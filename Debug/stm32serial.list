
stm32serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009428  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e70  080095c8  080095c8  000195c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a438  0800a438  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800a438  0800a438  0001a438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a440  0800a440  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a440  0800a440  0001a440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a444  0800a444  0001a444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800a448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000245c  200001ec  0800a634  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002648  0800a634  00022648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e583  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040e7  00000000  00000000  0003e79f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  00042888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001a279  00000000  00000000  00043db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001a6eb  00000000  00000000  0005e031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0009321e  00000000  00000000  0007871c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0010b93a  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001398  00000000  00000000  0010b990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005da4  00000000  00000000  0010cd28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080095b0 	.word	0x080095b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	080095b0 	.word	0x080095b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <updateDisplay>:
// Copy all data from local screenbuffer to the screen
	ssd1306_UpdateScreen(&hi2c1);

}

void updateDisplay(struct System *system) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]



	// ssd1306_Fill(Black);
	ssd1306_UpdateScreen(&hi2c1);
 8000580:	4813      	ldr	r0, [pc, #76]	; (80005d0 <updateDisplay+0x58>)
 8000582:	f000 fbc1 	bl	8000d08 <ssd1306_UpdateScreen>

	char cpu_text[20] = {0};
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	f107 0310 	add.w	r3, r7, #16
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]

	sprintf(cpu_text, "CPU %d %d C", system->cpu_util, system->cpu_temp);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	791b      	ldrb	r3, [r3, #4]
 800059c:	461a      	mov	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	799b      	ldrb	r3, [r3, #6]
 80005a2:	f107 000c 	add.w	r0, r7, #12
 80005a6:	490b      	ldr	r1, [pc, #44]	; (80005d4 <updateDisplay+0x5c>)
 80005a8:	f008 fbe2 	bl	8008d70 <siprintf>




	// Write data to local screenbuffer
	ssd1306_SetCursor(0, 15);
 80005ac:	210f      	movs	r1, #15
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 fce2 	bl	8000f78 <ssd1306_SetCursor>
	ssd1306_WriteString(cpu_text, Font_11x18, White);
 80005b4:	4a08      	ldr	r2, [pc, #32]	; (80005d8 <updateDisplay+0x60>)
 80005b6:	f107 000c 	add.w	r0, r7, #12
 80005ba:	2301      	movs	r3, #1
 80005bc:	ca06      	ldmia	r2, {r1, r2}
 80005be:	f000 fcb5 	bl	8000f2c <ssd1306_WriteString>



// Copy all data from local screenbuffer to the screen
	ssd1306_UpdateScreen(&hi2c1);
 80005c2:	4803      	ldr	r0, [pc, #12]	; (80005d0 <updateDisplay+0x58>)
 80005c4:	f000 fba0 	bl	8000d08 <ssd1306_UpdateScreen>

}
 80005c8:	bf00      	nop
 80005ca:	3720      	adds	r7, #32
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200008a0 	.word	0x200008a0
 80005d4:	080095c8 	.word	0x080095c8
 80005d8:	20000000 	.word	0x20000000

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b0c4      	sub	sp, #272	; 0x110
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char msg[11] = "No Data";
 80005e2:	4a3c      	ldr	r2, [pc, #240]	; (80006d4 <main+0xf8>)
 80005e4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80005e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ec:	e883 0003 	stmia.w	r3, {r0, r1}
 80005f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80005f4:	2100      	movs	r1, #0
 80005f6:	460a      	mov	r2, r1
 80005f8:	801a      	strh	r2, [r3, #0]
 80005fa:	460a      	mov	r2, r1
 80005fc:	709a      	strb	r2, [r3, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f000 fed9 	bl	80013b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f86b 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f000 f9c1 	bl	800098c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800060a:	f007 fdcb 	bl	80081a4 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 800060e:	f000 f8cf 	bl	80007b0 <MX_I2C1_Init>
  MX_DMA_Init();
 8000612:	f000 f99b 	bl	800094c <MX_DMA_Init>
  MX_TIM1_Init();
 8000616:	f000 f8f9 	bl	800080c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	// Init lcd using one of the stm32HAL i2c typedefs
	if (ssd1306_Init(&hi2c1) != 0) {
 800061a:	482f      	ldr	r0, [pc, #188]	; (80006d8 <main+0xfc>)
 800061c:	f000 fa30 	bl	8000a80 <ssd1306_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <main+0x4e>
		Error_Handler();
 8000626:	f000 fa0f 	bl	8000a48 <Error_Handler>
	}

//	writeToDisplay(msg);

	char message[20] = { 0 };
 800062a:	2300      	movs	r3, #0
 800062c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000630:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]

	uint8_t data_frame_buffer[64] = {0};
 800063e:	2300      	movs	r3, #0
 8000640:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000644:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000648:	223c      	movs	r2, #60	; 0x3c
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f008 fb87 	bl	8008d60 <memset>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		//neopixel_handle();

		uint8_t bytesAvailable = CDC_GetRxBufferBytesAvailable_FS();
 8000652:	f007 ff05 	bl	8008460 <CDC_GetRxBufferBytesAvailable_FS>
 8000656:	4603      	mov	r3, r0
 8000658:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		if (bytesAvailable != 0) {
 800065c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0f6      	beq.n	8000652 <main+0x76>
			memset(data_frame_buffer, 0, 64);  // clear the buffer
 8000664:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000668:	2240      	movs	r2, #64	; 0x40
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f008 fb77 	bl	8008d60 <memset>
			CDC_ReadRxBuffer_FS(data_frame_buffer, bytesAvailable);
 8000672:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8000676:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800067a:	4611      	mov	r1, r2
 800067c:	4618      	mov	r0, r3
 800067e:	f007 fedd 	bl	800843c <CDC_ReadRxBuffer_FS>

			DataHeaders data_head = (DataHeaders) data_frame_buffer[0];
 8000682:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8000686:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e


			switch(data_head){
 800068a:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800068e:	2b06      	cmp	r3, #6
 8000690:	d010      	beq.n	80006b4 <main+0xd8>
 8000692:	2b06      	cmp	r3, #6
 8000694:	dc14      	bgt.n	80006c0 <main+0xe4>
 8000696:	2b02      	cmp	r3, #2
 8000698:	d002      	beq.n	80006a0 <main+0xc4>
 800069a:	2b04      	cmp	r3, #4
 800069c:	d005      	beq.n	80006aa <main+0xce>
			    case RAM: {
			    	system.ram_util = data_frame_buffer[1];
			    	break;
			    }
			    default: {
			      break;
 800069e:	e00f      	b.n	80006c0 <main+0xe4>
			    	system.cpu_util = data_frame_buffer[1];
 80006a0:	f897 20ad 	ldrb.w	r2, [r7, #173]	; 0xad
 80006a4:	463b      	mov	r3, r7
 80006a6:	711a      	strb	r2, [r3, #4]
			    	break;
 80006a8:	e00b      	b.n	80006c2 <main+0xe6>
			    	system.cpu_temp = data_frame_buffer[1];
 80006aa:	f897 20ad 	ldrb.w	r2, [r7, #173]	; 0xad
 80006ae:	463b      	mov	r3, r7
 80006b0:	719a      	strb	r2, [r3, #6]
			    	break;
 80006b2:	e006      	b.n	80006c2 <main+0xe6>
			    	system.ram_util = data_frame_buffer[1];
 80006b4:	f897 20ad 	ldrb.w	r2, [r7, #173]	; 0xad
 80006b8:	463b      	mov	r3, r7
 80006ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			    	break;
 80006be:	e000      	b.n	80006c2 <main+0xe6>
			      break;
 80006c0:	bf00      	nop
			    }
			}

			updateDisplay(&system);
 80006c2:	463b      	mov	r3, r7
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ff57 	bl	8000578 <updateDisplay>
			CDC_FlushRxBuffer_FS();
 80006ca:	f007 feeb 	bl	80084a4 <CDC_FlushRxBuffer_FS>
			CDC_Read_Next();
 80006ce:	f007 fedf 	bl	8008490 <CDC_Read_Next>
	while (1) {
 80006d2:	e7be      	b.n	8000652 <main+0x76>
 80006d4:	080095d4 	.word	0x080095d4
 80006d8:	200008a0 	.word	0x200008a0

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	; 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	2230      	movs	r2, #48	; 0x30
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f008 fb38 	bl	8008d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <SystemClock_Config+0xcc>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	4a27      	ldr	r2, [pc, #156]	; (80007a8 <SystemClock_Config+0xcc>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	; 0x40
 8000710:	4b25      	ldr	r3, [pc, #148]	; (80007a8 <SystemClock_Config+0xcc>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b22      	ldr	r3, [pc, #136]	; (80007ac <SystemClock_Config+0xd0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemClock_Config+0xd0>)
 8000726:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <SystemClock_Config+0xd0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000738:	2301      	movs	r3, #1
 800073a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800073c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000742:	2302      	movs	r3, #2
 8000744:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000746:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800074a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800074c:	2319      	movs	r3, #25
 800074e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000750:	23c0      	movs	r3, #192	; 0xc0
 8000752:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000754:	2302      	movs	r3, #2
 8000756:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000758:	2304      	movs	r3, #4
 800075a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0320 	add.w	r3, r7, #32
 8000760:	4618      	mov	r0, r3
 8000762:	f003 fa35 	bl	8003bd0 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800076c:	f000 f96c 	bl	8000a48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	2302      	movs	r3, #2
 8000776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800077c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000780:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000786:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2103      	movs	r1, #3
 800078e:	4618      	mov	r0, r3
 8000790:	f003 fc96 	bl	80040c0 <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800079a:	f000 f955 	bl	8000a48 <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3750      	adds	r7, #80	; 0x50
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_I2C1_Init+0x50>)
 80007b6:	4a13      	ldr	r2, [pc, #76]	; (8000804 <MX_I2C1_Init+0x54>)
 80007b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_I2C1_Init+0x50>)
 80007bc:	4a12      	ldr	r2, [pc, #72]	; (8000808 <MX_I2C1_Init+0x58>)
 80007be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_I2C1_Init+0x50>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_I2C1_Init+0x50>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_I2C1_Init+0x50>)
 80007ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MX_I2C1_Init+0x50>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_I2C1_Init+0x50>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <MX_I2C1_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_I2C1_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_I2C1_Init+0x50>)
 80007ee:	f001 fc11 	bl	8002014 <HAL_I2C_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007f8:	f000 f926 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200008a0 	.word	0x200008a0
 8000804:	40005400 	.word	0x40005400
 8000808:	00061a80 	.word	0x00061a80

0800080c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b096      	sub	sp, #88	; 0x58
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000812:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000820:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800082a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]
 800083a:	615a      	str	r2, [r3, #20]
 800083c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2220      	movs	r2, #32
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f008 fa8b 	bl	8008d60 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800084a:	4b3e      	ldr	r3, [pc, #248]	; (8000944 <MX_TIM1_Init+0x138>)
 800084c:	4a3e      	ldr	r2, [pc, #248]	; (8000948 <MX_TIM1_Init+0x13c>)
 800084e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000850:	4b3c      	ldr	r3, [pc, #240]	; (8000944 <MX_TIM1_Init+0x138>)
 8000852:	2200      	movs	r2, #0
 8000854:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000856:	4b3b      	ldr	r3, [pc, #236]	; (8000944 <MX_TIM1_Init+0x138>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800085c:	4b39      	ldr	r3, [pc, #228]	; (8000944 <MX_TIM1_Init+0x138>)
 800085e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000862:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000864:	4b37      	ldr	r3, [pc, #220]	; (8000944 <MX_TIM1_Init+0x138>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800086a:	4b36      	ldr	r3, [pc, #216]	; (8000944 <MX_TIM1_Init+0x138>)
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000870:	4b34      	ldr	r3, [pc, #208]	; (8000944 <MX_TIM1_Init+0x138>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000876:	4833      	ldr	r0, [pc, #204]	; (8000944 <MX_TIM1_Init+0x138>)
 8000878:	f003 fdde 	bl	8004438 <HAL_TIM_Base_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000882:	f000 f8e1 	bl	8000a48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800088c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000890:	4619      	mov	r1, r3
 8000892:	482c      	ldr	r0, [pc, #176]	; (8000944 <MX_TIM1_Init+0x138>)
 8000894:	f004 f842 	bl	800491c <HAL_TIM_ConfigClockSource>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800089e:	f000 f8d3 	bl	8000a48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008a2:	4828      	ldr	r0, [pc, #160]	; (8000944 <MX_TIM1_Init+0x138>)
 80008a4:	f003 fe17 	bl	80044d6 <HAL_TIM_PWM_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80008ae:	f000 f8cb 	bl	8000a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b2:	2300      	movs	r3, #0
 80008b4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008be:	4619      	mov	r1, r3
 80008c0:	4820      	ldr	r0, [pc, #128]	; (8000944 <MX_TIM1_Init+0x138>)
 80008c2:	f004 fbc1 	bl	8005048 <HAL_TIMEx_MasterConfigSynchronization>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80008cc:	f000 f8bc 	bl	8000a48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008d0:	2360      	movs	r3, #96	; 0x60
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d8:	2300      	movs	r3, #0
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008dc:	2300      	movs	r3, #0
 80008de:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008e4:	2300      	movs	r3, #0
 80008e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008e8:	2300      	movs	r3, #0
 80008ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f0:	2200      	movs	r2, #0
 80008f2:	4619      	mov	r1, r3
 80008f4:	4813      	ldr	r0, [pc, #76]	; (8000944 <MX_TIM1_Init+0x138>)
 80008f6:	f003 ff4f 	bl	8004798 <HAL_TIM_PWM_ConfigChannel>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000900:	f000 f8a2 	bl	8000a48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800091c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	4619      	mov	r1, r3
 8000926:	4807      	ldr	r0, [pc, #28]	; (8000944 <MX_TIM1_Init+0x138>)
 8000928:	f004 fbfc 	bl	8005124 <HAL_TIMEx_ConfigBreakDeadTime>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000932:	f000 f889 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000936:	4803      	ldr	r0, [pc, #12]	; (8000944 <MX_TIM1_Init+0x138>)
 8000938:	f000 fbfa 	bl	8001130 <HAL_TIM_MspPostInit>

}
 800093c:	bf00      	nop
 800093e:	3758      	adds	r7, #88	; 0x58
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2000094c 	.word	0x2000094c
 8000948:	40010000 	.word	0x40010000

0800094c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_DMA_Init+0x3c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <MX_DMA_Init+0x3c>)
 800095c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_DMA_Init+0x3c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	2039      	movs	r0, #57	; 0x39
 8000974:	f000 fe8f 	bl	8001696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000978:	2039      	movs	r0, #57	; 0x39
 800097a:	f000 fea8 	bl	80016ce <HAL_NVIC_EnableIRQ>

}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800

0800098c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <MX_GPIO_Init+0xb4>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a25      	ldr	r2, [pc, #148]	; (8000a40 <MX_GPIO_Init+0xb4>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <MX_GPIO_Init+0xb4>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <MX_GPIO_Init+0xb4>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a1e      	ldr	r2, [pc, #120]	; (8000a40 <MX_GPIO_Init+0xb4>)
 80009c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <MX_GPIO_Init+0xb4>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <MX_GPIO_Init+0xb4>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a17      	ldr	r2, [pc, #92]	; (8000a40 <MX_GPIO_Init+0xb4>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <MX_GPIO_Init+0xb4>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_GPIO_Init+0xb4>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a10      	ldr	r2, [pc, #64]	; (8000a40 <MX_GPIO_Init+0xb4>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_GPIO_Init+0xb4>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2180      	movs	r1, #128	; 0x80
 8000a16:	480b      	ldr	r0, [pc, #44]	; (8000a44 <MX_GPIO_Init+0xb8>)
 8000a18:	f001 fae2 	bl	8001fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a1c:	2380      	movs	r3, #128	; 0x80
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_GPIO_Init+0xb8>)
 8000a34:	f001 f950 	bl	8001cd8 <HAL_GPIO_Init>

}
 8000a38:	bf00      	nop
 8000a3a:	3728      	adds	r7, #40	; 0x28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020400 	.word	0x40020400

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a50:	e7fe      	b.n	8000a50 <Error_Handler+0x8>

08000a52 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b086      	sub	sp, #24
 8000a56:	af04      	add	r7, sp, #16
 8000a58:	6078      	str	r0, [r7, #4]
 8000a5a:	460b      	mov	r3, r1
 8000a5c:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8000a5e:	230a      	movs	r3, #10
 8000a60:	9302      	str	r3, [sp, #8]
 8000a62:	2301      	movs	r3, #1
 8000a64:	9301      	str	r3, [sp, #4]
 8000a66:	1cfb      	adds	r3, r7, #3
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2178      	movs	r1, #120	; 0x78
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f001 fc13 	bl	800229c <HAL_I2C_Mem_Write>
 8000a76:	4603      	mov	r3, r0
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8000a88:	2064      	movs	r0, #100	; 0x64
 8000a8a:	f000 fd05 	bl	8001498 <HAL_Delay>
    int status = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8000a92:	21ae      	movs	r1, #174	; 0xae
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff ffdc 	bl	8000a52 <ssd1306_WriteCommand>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8000aa4:	2120      	movs	r1, #32
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff ffd3 	bl	8000a52 <ssd1306_WriteCommand>
 8000aac:	4603      	mov	r3, r0
 8000aae:	461a      	mov	r2, r3
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000ab6:	2110      	movs	r1, #16
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff ffca 	bl	8000a52 <ssd1306_WriteCommand>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8000ac8:	21b0      	movs	r1, #176	; 0xb0
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff ffc1 	bl	8000a52 <ssd1306_WriteCommand>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8000ada:	21c8      	movs	r1, #200	; 0xc8
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff ffb8 	bl	8000a52 <ssd1306_WriteCommand>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	4413      	add	r3, r2
 8000aea:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8000aec:	2100      	movs	r1, #0
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f7ff ffaf 	bl	8000a52 <ssd1306_WriteCommand>
 8000af4:	4603      	mov	r3, r0
 8000af6:	461a      	mov	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4413      	add	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8000afe:	2110      	movs	r1, #16
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff ffa6 	bl	8000a52 <ssd1306_WriteCommand>
 8000b06:	4603      	mov	r3, r0
 8000b08:	461a      	mov	r2, r3
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8000b10:	2140      	movs	r1, #64	; 0x40
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f7ff ff9d 	bl	8000a52 <ssd1306_WriteCommand>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8000b22:	2181      	movs	r1, #129	; 0x81
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff ff94 	bl	8000a52 <ssd1306_WriteCommand>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	4413      	add	r3, r2
 8000b32:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8000b34:	21ff      	movs	r1, #255	; 0xff
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff ff8b 	bl	8000a52 <ssd1306_WriteCommand>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	461a      	mov	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4413      	add	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8000b46:	21a1      	movs	r1, #161	; 0xa1
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff ff82 	bl	8000a52 <ssd1306_WriteCommand>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	461a      	mov	r2, r3
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	4413      	add	r3, r2
 8000b56:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8000b58:	21a6      	movs	r1, #166	; 0xa6
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ff79 	bl	8000a52 <ssd1306_WriteCommand>
 8000b60:	4603      	mov	r3, r0
 8000b62:	461a      	mov	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4413      	add	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8000b6a:	21a8      	movs	r1, #168	; 0xa8
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ff70 	bl	8000a52 <ssd1306_WriteCommand>
 8000b72:	4603      	mov	r3, r0
 8000b74:	461a      	mov	r2, r3
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4413      	add	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8000b7c:	213f      	movs	r1, #63	; 0x3f
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ff67 	bl	8000a52 <ssd1306_WriteCommand>
 8000b84:	4603      	mov	r3, r0
 8000b86:	461a      	mov	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000b8e:	21a4      	movs	r1, #164	; 0xa4
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ff5e 	bl	8000a52 <ssd1306_WriteCommand>
 8000b96:	4603      	mov	r3, r0
 8000b98:	461a      	mov	r2, r3
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8000ba0:	21d3      	movs	r1, #211	; 0xd3
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff ff55 	bl	8000a52 <ssd1306_WriteCommand>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	461a      	mov	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4413      	add	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff ff4c 	bl	8000a52 <ssd1306_WriteCommand>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8000bc4:	21d5      	movs	r1, #213	; 0xd5
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff ff43 	bl	8000a52 <ssd1306_WriteCommand>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	461a      	mov	r2, r3
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8000bd6:	21f0      	movs	r1, #240	; 0xf0
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff ff3a 	bl	8000a52 <ssd1306_WriteCommand>
 8000bde:	4603      	mov	r3, r0
 8000be0:	461a      	mov	r2, r3
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	4413      	add	r3, r2
 8000be6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8000be8:	21d9      	movs	r1, #217	; 0xd9
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff ff31 	bl	8000a52 <ssd1306_WriteCommand>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8000bfa:	2122      	movs	r1, #34	; 0x22
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff ff28 	bl	8000a52 <ssd1306_WriteCommand>
 8000c02:	4603      	mov	r3, r0
 8000c04:	461a      	mov	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	4413      	add	r3, r2
 8000c0a:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8000c0c:	21da      	movs	r1, #218	; 0xda
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff ff1f 	bl	8000a52 <ssd1306_WriteCommand>
 8000c14:	4603      	mov	r3, r0
 8000c16:	461a      	mov	r2, r3
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8000c1e:	2112      	movs	r1, #18
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ff16 	bl	8000a52 <ssd1306_WriteCommand>
 8000c26:	4603      	mov	r3, r0
 8000c28:	461a      	mov	r2, r3
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8000c30:	21db      	movs	r1, #219	; 0xdb
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff ff0d 	bl	8000a52 <ssd1306_WriteCommand>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8000c42:	2120      	movs	r1, #32
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ff04 	bl	8000a52 <ssd1306_WriteCommand>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	4413      	add	r3, r2
 8000c52:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8000c54:	218d      	movs	r1, #141	; 0x8d
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff fefb 	bl	8000a52 <ssd1306_WriteCommand>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	461a      	mov	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4413      	add	r3, r2
 8000c64:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8000c66:	2114      	movs	r1, #20
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f7ff fef2 	bl	8000a52 <ssd1306_WriteCommand>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	461a      	mov	r2, r3
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	4413      	add	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8000c78:	21af      	movs	r1, #175	; 0xaf
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff fee9 	bl	8000a52 <ssd1306_WriteCommand>
 8000c80:	4603      	mov	r3, r0
 8000c82:	461a      	mov	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4413      	add	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <ssd1306_Init+0x214>
        return 1;
 8000c90:	2301      	movs	r3, #1
 8000c92:	e00f      	b.n	8000cb4 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8000c94:	2000      	movs	r0, #0
 8000c96:	f000 f813 	bl	8000cc0 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f000 f834 	bl	8000d08 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <ssd1306_Init+0x23c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000ca6:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <ssd1306_Init+0x23c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <ssd1306_Init+0x23c>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	715a      	strb	r2, [r3, #5]

    return 0;
 8000cb2:	2300      	movs	r3, #0
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000608 	.word	0x20000608

08000cc0 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	e00d      	b.n	8000cec <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d101      	bne.n	8000cda <ssd1306_Fill+0x1a>
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	e000      	b.n	8000cdc <ssd1306_Fill+0x1c>
 8000cda:	21ff      	movs	r1, #255	; 0xff
 8000cdc:	4a09      	ldr	r2, [pc, #36]	; (8000d04 <ssd1306_Fill+0x44>)
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	460a      	mov	r2, r1
 8000ce4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cf2:	d3ed      	bcc.n	8000cd0 <ssd1306_Fill+0x10>
    }
}
 8000cf4:	bf00      	nop
 8000cf6:	bf00      	nop
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20000208 	.word	0x20000208

08000d08 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af04      	add	r7, sp, #16
 8000d0e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8000d10:	2300      	movs	r3, #0
 8000d12:	73fb      	strb	r3, [r7, #15]
 8000d14:	e020      	b.n	8000d58 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	3b50      	subs	r3, #80	; 0x50
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff fe97 	bl	8000a52 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8000d24:	2100      	movs	r1, #0
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff fe93 	bl	8000a52 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8000d2c:	2110      	movs	r1, #16
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff fe8f 	bl	8000a52 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	01db      	lsls	r3, r3, #7
 8000d38:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <ssd1306_UpdateScreen+0x60>)
 8000d3a:	4413      	add	r3, r2
 8000d3c:	2264      	movs	r2, #100	; 0x64
 8000d3e:	9202      	str	r2, [sp, #8]
 8000d40:	2280      	movs	r2, #128	; 0x80
 8000d42:	9201      	str	r2, [sp, #4]
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2301      	movs	r3, #1
 8000d48:	2240      	movs	r2, #64	; 0x40
 8000d4a:	2178      	movs	r1, #120	; 0x78
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f001 faa5 	bl	800229c <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	3301      	adds	r3, #1
 8000d56:	73fb      	strb	r3, [r7, #15]
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	2b07      	cmp	r3, #7
 8000d5c:	d9db      	bls.n	8000d16 <ssd1306_UpdateScreen+0xe>
    }
}
 8000d5e:	bf00      	nop
 8000d60:	bf00      	nop
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000208 	.word	0x20000208

08000d6c <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
 8000d76:	460b      	mov	r3, r1
 8000d78:	71bb      	strb	r3, [r7, #6]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	db48      	blt.n	8000e18 <ssd1306_DrawPixel+0xac>
 8000d86:	79bb      	ldrb	r3, [r7, #6]
 8000d88:	2b3f      	cmp	r3, #63	; 0x3f
 8000d8a:	d845      	bhi.n	8000e18 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8000d8c:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <ssd1306_DrawPixel+0xb8>)
 8000d8e:	791b      	ldrb	r3, [r3, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d006      	beq.n	8000da2 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8000d94:	797b      	ldrb	r3, [r7, #5]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	bf0c      	ite	eq
 8000d9a:	2301      	moveq	r3, #1
 8000d9c:	2300      	movne	r3, #0
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8000da2:	797b      	ldrb	r3, [r7, #5]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d11a      	bne.n	8000dde <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000da8:	79fa      	ldrb	r2, [r7, #7]
 8000daa:	79bb      	ldrb	r3, [r7, #6]
 8000dac:	08db      	lsrs	r3, r3, #3
 8000dae:	b2d8      	uxtb	r0, r3
 8000db0:	4603      	mov	r3, r0
 8000db2:	01db      	lsls	r3, r3, #7
 8000db4:	4413      	add	r3, r2
 8000db6:	4a1c      	ldr	r2, [pc, #112]	; (8000e28 <ssd1306_DrawPixel+0xbc>)
 8000db8:	5cd3      	ldrb	r3, [r2, r3]
 8000dba:	b25a      	sxtb	r2, r3
 8000dbc:	79bb      	ldrb	r3, [r7, #6]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc8:	b25b      	sxtb	r3, r3
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	b259      	sxtb	r1, r3
 8000dce:	79fa      	ldrb	r2, [r7, #7]
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	01db      	lsls	r3, r3, #7
 8000dd4:	4413      	add	r3, r2
 8000dd6:	b2c9      	uxtb	r1, r1
 8000dd8:	4a13      	ldr	r2, [pc, #76]	; (8000e28 <ssd1306_DrawPixel+0xbc>)
 8000dda:	54d1      	strb	r1, [r2, r3]
 8000ddc:	e01d      	b.n	8000e1a <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000dde:	79fa      	ldrb	r2, [r7, #7]
 8000de0:	79bb      	ldrb	r3, [r7, #6]
 8000de2:	08db      	lsrs	r3, r3, #3
 8000de4:	b2d8      	uxtb	r0, r3
 8000de6:	4603      	mov	r3, r0
 8000de8:	01db      	lsls	r3, r3, #7
 8000dea:	4413      	add	r3, r2
 8000dec:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <ssd1306_DrawPixel+0xbc>)
 8000dee:	5cd3      	ldrb	r3, [r2, r3]
 8000df0:	b25a      	sxtb	r2, r3
 8000df2:	79bb      	ldrb	r3, [r7, #6]
 8000df4:	f003 0307 	and.w	r3, r3, #7
 8000df8:	2101      	movs	r1, #1
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfe:	b25b      	sxtb	r3, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	b25b      	sxtb	r3, r3
 8000e04:	4013      	ands	r3, r2
 8000e06:	b259      	sxtb	r1, r3
 8000e08:	79fa      	ldrb	r2, [r7, #7]
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	01db      	lsls	r3, r3, #7
 8000e0e:	4413      	add	r3, r2
 8000e10:	b2c9      	uxtb	r1, r1
 8000e12:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <ssd1306_DrawPixel+0xbc>)
 8000e14:	54d1      	strb	r1, [r2, r3]
 8000e16:	e000      	b.n	8000e1a <ssd1306_DrawPixel+0xae>
        return;
 8000e18:	bf00      	nop
    }
}
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	20000608 	.word	0x20000608
 8000e28:	20000208 	.word	0x20000208

08000e2c <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8000e2c:	b590      	push	{r4, r7, lr}
 8000e2e:	b089      	sub	sp, #36	; 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4604      	mov	r4, r0
 8000e34:	1d38      	adds	r0, r7, #4
 8000e36:	e880 0006 	stmia.w	r0, {r1, r2}
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4623      	mov	r3, r4
 8000e3e:	73fb      	strb	r3, [r7, #15]
 8000e40:	4613      	mov	r3, r2
 8000e42:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000e44:	4b38      	ldr	r3, [pc, #224]	; (8000f28 <ssd1306_WriteChar+0xfc>)
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	793b      	ldrb	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8000e50:	dc06      	bgt.n	8000e60 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8000e52:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <ssd1306_WriteChar+0xfc>)
 8000e54:	885b      	ldrh	r3, [r3, #2]
 8000e56:	461a      	mov	r2, r3
 8000e58:	797b      	ldrb	r3, [r7, #5]
 8000e5a:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000e5c:	2b3f      	cmp	r3, #63	; 0x3f
 8000e5e:	dd01      	ble.n	8000e64 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	e05d      	b.n	8000f20 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
 8000e68:	e04c      	b.n	8000f04 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	3b20      	subs	r3, #32
 8000e70:	7979      	ldrb	r1, [r7, #5]
 8000e72:	fb01 f303 	mul.w	r3, r1, r3
 8000e76:	4619      	mov	r1, r3
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	440b      	add	r3, r1
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	4413      	add	r3, r2
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8000e84:	2300      	movs	r3, #0
 8000e86:	61bb      	str	r3, [r7, #24]
 8000e88:	e034      	b.n	8000ef4 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d012      	beq.n	8000ec0 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000e9a:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <ssd1306_WriteChar+0xfc>)
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	4413      	add	r3, r2
 8000ea6:	b2d8      	uxtb	r0, r3
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <ssd1306_WriteChar+0xfc>)
 8000eaa:	885b      	ldrh	r3, [r3, #2]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	4413      	add	r3, r2
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	7bba      	ldrb	r2, [r7, #14]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f7ff ff57 	bl	8000d6c <ssd1306_DrawPixel>
 8000ebe:	e016      	b.n	8000eee <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <ssd1306_WriteChar+0xfc>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	4413      	add	r3, r2
 8000ecc:	b2d8      	uxtb	r0, r3
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <ssd1306_WriteChar+0xfc>)
 8000ed0:	885b      	ldrh	r3, [r3, #2]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	4413      	add	r3, r2
 8000eda:	b2d9      	uxtb	r1, r3
 8000edc:	7bbb      	ldrb	r3, [r7, #14]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	bf0c      	ite	eq
 8000ee2:	2301      	moveq	r3, #1
 8000ee4:	2300      	movne	r3, #0
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	461a      	mov	r2, r3
 8000eea:	f7ff ff3f 	bl	8000d6c <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	61bb      	str	r3, [r7, #24]
 8000ef4:	793b      	ldrb	r3, [r7, #4]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d3c5      	bcc.n	8000e8a <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3301      	adds	r3, #1
 8000f02:	61fb      	str	r3, [r7, #28]
 8000f04:	797b      	ldrb	r3, [r7, #5]
 8000f06:	461a      	mov	r2, r3
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d3ad      	bcc.n	8000e6a <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <ssd1306_WriteChar+0xfc>)
 8000f10:	881a      	ldrh	r2, [r3, #0]
 8000f12:	793b      	ldrb	r3, [r7, #4]
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	4413      	add	r3, r2
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <ssd1306_WriteChar+0xfc>)
 8000f1c:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3724      	adds	r7, #36	; 0x24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd90      	pop	{r4, r7, pc}
 8000f28:	20000608 	.word	0x20000608

08000f2c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	1d38      	adds	r0, r7, #4
 8000f36:	e880 0006 	stmia.w	r0, {r1, r2}
 8000f3a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8000f3c:	e012      	b.n	8000f64 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	7818      	ldrb	r0, [r3, #0]
 8000f42:	78fb      	ldrb	r3, [r7, #3]
 8000f44:	1d3a      	adds	r2, r7, #4
 8000f46:	ca06      	ldmia	r2, {r1, r2}
 8000f48:	f7ff ff70 	bl	8000e2c <ssd1306_WriteChar>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d002      	beq.n	8000f5e <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	e008      	b.n	8000f70 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	3301      	adds	r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
    while (*str)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1e8      	bne.n	8000f3e <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	460a      	mov	r2, r1
 8000f82:	71fb      	strb	r3, [r7, #7]
 8000f84:	4613      	mov	r3, r2
 8000f86:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <ssd1306_SetCursor+0x2c>)
 8000f8e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000f90:	79bb      	ldrb	r3, [r7, #6]
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <ssd1306_SetCursor+0x2c>)
 8000f96:	805a      	strh	r2, [r3, #2]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	20000608 	.word	0x20000608

08000fa8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a19      	ldr	r2, [pc, #100]	; (800107c <HAL_I2C_MspInit+0x84>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d12c      	bne.n	8001074 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	4b18      	ldr	r3, [pc, #96]	; (8001080 <HAL_I2C_MspInit+0x88>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a17      	ldr	r2, [pc, #92]	; (8001080 <HAL_I2C_MspInit+0x88>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <HAL_I2C_MspInit+0x88>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001036:	f44f 7340 	mov.w	r3, #768	; 0x300
 800103a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800103c:	2312      	movs	r3, #18
 800103e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001048:	2304      	movs	r3, #4
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	480c      	ldr	r0, [pc, #48]	; (8001084 <HAL_I2C_MspInit+0x8c>)
 8001054:	f000 fe40 	bl	8001cd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HAL_I2C_MspInit+0x88>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	4a07      	ldr	r2, [pc, #28]	; (8001080 <HAL_I2C_MspInit+0x88>)
 8001062:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001066:	6413      	str	r3, [r2, #64]	; 0x40
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_I2C_MspInit+0x88>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001074:	bf00      	nop
 8001076:	3728      	adds	r7, #40	; 0x28
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40005400 	.word	0x40005400
 8001080:	40023800 	.word	0x40023800
 8001084:	40020400 	.word	0x40020400

08001088 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a22      	ldr	r2, [pc, #136]	; (8001120 <HAL_TIM_Base_MspInit+0x98>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d13e      	bne.n	8001118 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <HAL_TIM_Base_MspInit+0x9c>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	4a20      	ldr	r2, [pc, #128]	; (8001124 <HAL_TIM_Base_MspInit+0x9c>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6453      	str	r3, [r2, #68]	; 0x44
 80010aa:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <HAL_TIM_Base_MspInit+0x9c>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80010b6:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <HAL_TIM_Base_MspInit+0xa0>)
 80010b8:	4a1c      	ldr	r2, [pc, #112]	; (800112c <HAL_TIM_Base_MspInit+0xa4>)
 80010ba:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <HAL_TIM_Base_MspInit+0xa0>)
 80010be:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80010c2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_TIM_Base_MspInit+0xa0>)
 80010c6:	2240      	movs	r2, #64	; 0x40
 80010c8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <HAL_TIM_Base_MspInit+0xa0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_TIM_Base_MspInit+0xa0>)
 80010d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <HAL_TIM_Base_MspInit+0xa0>)
 80010da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010de:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <HAL_TIM_Base_MspInit+0xa0>)
 80010e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010e6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <HAL_TIM_Base_MspInit+0xa0>)
 80010ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ee:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <HAL_TIM_Base_MspInit+0xa0>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <HAL_TIM_Base_MspInit+0xa0>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80010fc:	480a      	ldr	r0, [pc, #40]	; (8001128 <HAL_TIM_Base_MspInit+0xa0>)
 80010fe:	f000 fb01 	bl	8001704 <HAL_DMA_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8001108:	f7ff fc9e 	bl	8000a48 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a06      	ldr	r2, [pc, #24]	; (8001128 <HAL_TIM_Base_MspInit+0xa0>)
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
 8001112:	4a05      	ldr	r2, [pc, #20]	; (8001128 <HAL_TIM_Base_MspInit+0xa0>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001118:	bf00      	nop
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40010000 	.word	0x40010000
 8001124:	40023800 	.word	0x40023800
 8001128:	20000840 	.word	0x20000840
 800112c:	40026428 	.word	0x40026428

08001130 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a12      	ldr	r2, [pc, #72]	; (8001198 <HAL_TIM_MspPostInit+0x68>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d11e      	bne.n	8001190 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <HAL_TIM_MspPostInit+0x6c>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a10      	ldr	r2, [pc, #64]	; (800119c <HAL_TIM_MspPostInit+0x6c>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_TIM_MspPostInit+0x6c>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800116e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001172:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001180:	2301      	movs	r3, #1
 8001182:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	4619      	mov	r1, r3
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <HAL_TIM_MspPostInit+0x70>)
 800118c:	f000 fda4 	bl	8001cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001190:	bf00      	nop
 8001192:	3720      	adds	r7, #32
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40010000 	.word	0x40010000
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020000 	.word	0x40020000

080011a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <NMI_Handler+0x4>

080011aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <HardFault_Handler+0x4>

080011b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <MemManage_Handler+0x4>

080011b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ba:	e7fe      	b.n	80011ba <BusFault_Handler+0x4>

080011bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <UsageFault_Handler+0x4>

080011c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f0:	f000 f932 	bl	8001458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <DMA2_Stream1_IRQHandler+0x10>)
 80011fe:	f000 fb2f 	bl	8001860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000840 	.word	0x20000840

0800120c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <OTG_FS_IRQHandler+0x10>)
 8001212:	f001 fcaa 	bl	8002b6a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20002230 	.word	0x20002230

08001220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001228:	4a14      	ldr	r2, [pc, #80]	; (800127c <_sbrk+0x5c>)
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <_sbrk+0x60>)
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001234:	4b13      	ldr	r3, [pc, #76]	; (8001284 <_sbrk+0x64>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d102      	bne.n	8001242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <_sbrk+0x64>)
 800123e:	4a12      	ldr	r2, [pc, #72]	; (8001288 <_sbrk+0x68>)
 8001240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	429a      	cmp	r2, r3
 800124e:	d207      	bcs.n	8001260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001250:	f007 fd4e 	bl	8008cf0 <__errno>
 8001254:	4603      	mov	r3, r0
 8001256:	220c      	movs	r2, #12
 8001258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800125e:	e009      	b.n	8001274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <_sbrk+0x64>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001266:	4b07      	ldr	r3, [pc, #28]	; (8001284 <_sbrk+0x64>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	4a05      	ldr	r2, [pc, #20]	; (8001284 <_sbrk+0x64>)
 8001270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001272:	68fb      	ldr	r3, [r7, #12]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20020000 	.word	0x20020000
 8001280:	00000400 	.word	0x00000400
 8001284:	20000610 	.word	0x20000610
 8001288:	20002648 	.word	0x20002648

0800128c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <SystemInit+0x20>)
 8001292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001296:	4a05      	ldr	r2, [pc, #20]	; (80012ac <SystemInit+0x20>)
 8001298:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800129c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <DMA2_Stream2_IRQHandler>:
	#endif

}

void DMA2_Stream2_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0

	#if defined(LED_BLUE_PORT)
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <DMA2_Stream2_IRQHandler+0x20>)
 80012b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012ba:	619a      	str	r2, [r3, #24]
	#endif

	// Check the interrupt and clear flag
	  HAL_DMA_IRQHandler(&dmaCC2);
 80012bc:	4805      	ldr	r0, [pc, #20]	; (80012d4 <DMA2_Stream2_IRQHandler+0x24>)
 80012be:	f000 facf 	bl	8001860 <HAL_DMA_IRQHandler>

	#if defined(LED_BLUE_PORT)
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN << 16;
 80012c2:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <DMA2_Stream2_IRQHandler+0x20>)
 80012c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80012c8:	619a      	str	r2, [r3, #24]
	#endif
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40020c00 	.word	0x40020c00
 80012d4:	20000a68 	.word	0x20000a68

080012d8 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <TIM1_UP_TIM10_IRQHandler+0x20>)
 80012de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012e2:	619a      	str	r2, [r3, #24]
	#endif

	HAL_TIM_IRQHandler(&TIM1_handle);
 80012e4:	4805      	ldr	r0, [pc, #20]	; (80012fc <TIM1_UP_TIM10_IRQHandler+0x24>)
 80012e6:	f003 f94f 	bl	8004588 <HAL_TIM_IRQHandler>

	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 80012ea:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <TIM1_UP_TIM10_IRQHandler+0x20>)
 80012ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80012f0:	619a      	str	r2, [r3, #24]
	#endif
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40020c00 	.word	0x40020c00
 80012fc:	20000ae4 	.word	0x20000ae4

08001300 <HAL_TIM_PeriodElapsedCallback>:

// TIM2 Interrupt Handler gets executed on every TIM2 Update if enabled
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
		__HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
		// set TransferComplete flag
		ws2812b.transferComplete = 1;
	}*/

    ws2812b.timerPeriodCounter = 0;
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800130a:	2200      	movs	r2, #0
 800130c:	615a      	str	r2, [r3, #20]
    TIM1->CR1 = 0; // disable timer
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]

    // disable the TIM2 Update IRQ
    __HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 8001314:	4b10      	ldr	r3, [pc, #64]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0201 	bic.w	r2, r2, #1
 8001322:	60da      	str	r2, [r3, #12]

    // Set back 1,25us period
    TIM1->ARR = tim_period;
 8001324:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Generate an update event to reload the Prescaler value immediatly
    TIM1->EGR = TIM_EGR_UG;
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800132e:	2201      	movs	r2, #1
 8001330:	615a      	str	r2, [r3, #20]
    __HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f06f 0201 	mvn.w	r2, #1
 800133a:	611a      	str	r2, [r3, #16]

    // set transfer_complete flag
    ws2812b.transferComplete = 1;
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800133e:	2201      	movs	r2, #1
 8001340:	741a      	strb	r2, [r3, #16]

}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000930 	.word	0x20000930
 8001354:	40010000 	.word	0x40010000
 8001358:	20000ae4 	.word	0x20000ae4
 800135c:	20000b2c 	.word	0x20000b2c

08001360 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001398 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001364:	480d      	ldr	r0, [pc, #52]	; (800139c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001366:	490e      	ldr	r1, [pc, #56]	; (80013a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001368:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800136c:	e002      	b.n	8001374 <LoopCopyDataInit>

0800136e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001372:	3304      	adds	r3, #4

08001374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001378:	d3f9      	bcc.n	800136e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137a:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800137c:	4c0b      	ldr	r4, [pc, #44]	; (80013ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001380:	e001      	b.n	8001386 <LoopFillZerobss>

08001382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001384:	3204      	adds	r2, #4

08001386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001388:	d3fb      	bcc.n	8001382 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800138a:	f7ff ff7f 	bl	800128c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800138e:	f007 fcb5 	bl	8008cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001392:	f7ff f923 	bl	80005dc <main>
  bx  lr    
 8001396:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001398:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800139c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80013a4:	0800a448 	.word	0x0800a448
  ldr r2, =_sbss
 80013a8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80013ac:	20002648 	.word	0x20002648

080013b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b0:	e7fe      	b.n	80013b0 <ADC_IRQHandler>
	...

080013b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013b8:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_Init+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0d      	ldr	r2, [pc, #52]	; (80013f4 <HAL_Init+0x40>)
 80013be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_Init+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <HAL_Init+0x40>)
 80013ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_Init+0x40>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <HAL_Init+0x40>)
 80013d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013dc:	2003      	movs	r0, #3
 80013de:	f000 f94f 	bl	8001680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e2:	200f      	movs	r0, #15
 80013e4:	f000 f808 	bl	80013f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e8:	f7ff fdde 	bl	8000fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023c00 	.word	0x40023c00

080013f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_InitTick+0x54>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_InitTick+0x58>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001412:	fbb2 f3f3 	udiv	r3, r2, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f967 	bl	80016ea <HAL_SYSTICK_Config>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e00e      	b.n	8001444 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b0f      	cmp	r3, #15
 800142a:	d80a      	bhi.n	8001442 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800142c:	2200      	movs	r2, #0
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001434:	f000 f92f 	bl	8001696 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001438:	4a06      	ldr	r2, [pc, #24]	; (8001454 <HAL_InitTick+0x5c>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	e000      	b.n	8001444 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000008 	.word	0x20000008
 8001450:	20000010 	.word	0x20000010
 8001454:	2000000c 	.word	0x2000000c

08001458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_IncTick+0x20>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_IncTick+0x24>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4413      	add	r3, r2
 8001468:	4a04      	ldr	r2, [pc, #16]	; (800147c <HAL_IncTick+0x24>)
 800146a:	6013      	str	r3, [r2, #0]
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20000010 	.word	0x20000010
 800147c:	20000c54 	.word	0x20000c54

08001480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return uwTick;
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <HAL_GetTick+0x14>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20000c54 	.word	0x20000c54

08001498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a0:	f7ff ffee 	bl	8001480 <HAL_GetTick>
 80014a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014b0:	d005      	beq.n	80014be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014b2:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <HAL_Delay+0x44>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4413      	add	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014be:	bf00      	nop
 80014c0:	f7ff ffde 	bl	8001480 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d8f7      	bhi.n	80014c0 <HAL_Delay+0x28>
  {
  }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000010 	.word	0x20000010

080014e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014fc:	4013      	ands	r3, r2
 80014fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800150c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001512:	4a04      	ldr	r2, [pc, #16]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	60d3      	str	r3, [r2, #12]
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <__NVIC_GetPriorityGrouping+0x18>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	f003 0307 	and.w	r3, r3, #7
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	2b00      	cmp	r3, #0
 8001554:	db0b      	blt.n	800156e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	f003 021f 	and.w	r2, r3, #31
 800155c:	4907      	ldr	r1, [pc, #28]	; (800157c <__NVIC_EnableIRQ+0x38>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	095b      	lsrs	r3, r3, #5
 8001564:	2001      	movs	r0, #1
 8001566:	fa00 f202 	lsl.w	r2, r0, r2
 800156a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000e100 	.word	0xe000e100

08001580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001590:	2b00      	cmp	r3, #0
 8001592:	db0a      	blt.n	80015aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	b2da      	uxtb	r2, r3
 8001598:	490c      	ldr	r1, [pc, #48]	; (80015cc <__NVIC_SetPriority+0x4c>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	0112      	lsls	r2, r2, #4
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	440b      	add	r3, r1
 80015a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a8:	e00a      	b.n	80015c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4908      	ldr	r1, [pc, #32]	; (80015d0 <__NVIC_SetPriority+0x50>)
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	3b04      	subs	r3, #4
 80015b8:	0112      	lsls	r2, r2, #4
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	440b      	add	r3, r1
 80015be:	761a      	strb	r2, [r3, #24]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000e100 	.word	0xe000e100
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	; 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f1c3 0307 	rsb	r3, r3, #7
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	bf28      	it	cs
 80015f2:	2304      	movcs	r3, #4
 80015f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3304      	adds	r3, #4
 80015fa:	2b06      	cmp	r3, #6
 80015fc:	d902      	bls.n	8001604 <NVIC_EncodePriority+0x30>
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3b03      	subs	r3, #3
 8001602:	e000      	b.n	8001606 <NVIC_EncodePriority+0x32>
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43da      	mvns	r2, r3
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	401a      	ands	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800161c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	43d9      	mvns	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	4313      	orrs	r3, r2
         );
}
 800162e:	4618      	mov	r0, r3
 8001630:	3724      	adds	r7, #36	; 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3b01      	subs	r3, #1
 8001648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800164c:	d301      	bcc.n	8001652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164e:	2301      	movs	r3, #1
 8001650:	e00f      	b.n	8001672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001652:	4a0a      	ldr	r2, [pc, #40]	; (800167c <SysTick_Config+0x40>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165a:	210f      	movs	r1, #15
 800165c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001660:	f7ff ff8e 	bl	8001580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <SysTick_Config+0x40>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166a:	4b04      	ldr	r3, [pc, #16]	; (800167c <SysTick_Config+0x40>)
 800166c:	2207      	movs	r2, #7
 800166e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	e000e010 	.word	0xe000e010

08001680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ff29 	bl	80014e0 <__NVIC_SetPriorityGrouping>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001696:	b580      	push	{r7, lr}
 8001698:	b086      	sub	sp, #24
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
 80016a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a8:	f7ff ff3e 	bl	8001528 <__NVIC_GetPriorityGrouping>
 80016ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	6978      	ldr	r0, [r7, #20]
 80016b4:	f7ff ff8e 	bl	80015d4 <NVIC_EncodePriority>
 80016b8:	4602      	mov	r2, r0
 80016ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016be:	4611      	mov	r1, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff5d 	bl	8001580 <__NVIC_SetPriority>
}
 80016c6:	bf00      	nop
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	4603      	mov	r3, r0
 80016d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff31 	bl	8001544 <__NVIC_EnableIRQ>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff ffa2 	bl	800163c <SysTick_Config>
 80016f8:	4603      	mov	r3, r0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001710:	f7ff feb6 	bl	8001480 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e099      	b.n	8001854 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2202      	movs	r2, #2
 8001724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0201 	bic.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001740:	e00f      	b.n	8001762 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001742:	f7ff fe9d 	bl	8001480 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b05      	cmp	r3, #5
 800174e:	d908      	bls.n	8001762 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2220      	movs	r2, #32
 8001754:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2203      	movs	r2, #3
 800175a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e078      	b.n	8001854 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1e8      	bne.n	8001742 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	4b38      	ldr	r3, [pc, #224]	; (800185c <HAL_DMA_Init+0x158>)
 800177c:	4013      	ands	r3, r2
 800177e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800178e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800179a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	d107      	bne.n	80017cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	4313      	orrs	r3, r2
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f023 0307 	bic.w	r3, r3, #7
 80017e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	d117      	bne.n	8001826 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00e      	beq.n	8001826 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 f9e9 	bl	8001be0 <DMA_CheckFifoParam>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d008      	beq.n	8001826 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2240      	movs	r2, #64	; 0x40
 8001818:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001822:	2301      	movs	r3, #1
 8001824:	e016      	b.n	8001854 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 f9a0 	bl	8001b74 <DMA_CalcBaseAndBitshift>
 8001834:	4603      	mov	r3, r0
 8001836:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800183c:	223f      	movs	r2, #63	; 0x3f
 800183e:	409a      	lsls	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	f010803f 	.word	0xf010803f

08001860 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001868:	2300      	movs	r3, #0
 800186a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800186c:	4b92      	ldr	r3, [pc, #584]	; (8001ab8 <HAL_DMA_IRQHandler+0x258>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a92      	ldr	r2, [pc, #584]	; (8001abc <HAL_DMA_IRQHandler+0x25c>)
 8001872:	fba2 2303 	umull	r2, r3, r2, r3
 8001876:	0a9b      	lsrs	r3, r3, #10
 8001878:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188a:	2208      	movs	r2, #8
 800188c:	409a      	lsls	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4013      	ands	r3, r2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d01a      	beq.n	80018cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d013      	beq.n	80018cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0204 	bic.w	r2, r2, #4
 80018b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b8:	2208      	movs	r2, #8
 80018ba:	409a      	lsls	r2, r3
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c4:	f043 0201 	orr.w	r2, r3, #1
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d0:	2201      	movs	r2, #1
 80018d2:	409a      	lsls	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d012      	beq.n	8001902 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00b      	beq.n	8001902 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ee:	2201      	movs	r2, #1
 80018f0:	409a      	lsls	r2, r3
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018fa:	f043 0202 	orr.w	r2, r3, #2
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001906:	2204      	movs	r2, #4
 8001908:	409a      	lsls	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4013      	ands	r3, r2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d012      	beq.n	8001938 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00b      	beq.n	8001938 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001924:	2204      	movs	r2, #4
 8001926:	409a      	lsls	r2, r3
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001930:	f043 0204 	orr.w	r2, r3, #4
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193c:	2210      	movs	r2, #16
 800193e:	409a      	lsls	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4013      	ands	r3, r2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d043      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	d03c      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195a:	2210      	movs	r2, #16
 800195c:	409a      	lsls	r2, r3
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d018      	beq.n	80019a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d108      	bne.n	8001990 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	2b00      	cmp	r3, #0
 8001984:	d024      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	4798      	blx	r3
 800198e:	e01f      	b.n	80019d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001994:	2b00      	cmp	r3, #0
 8001996:	d01b      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	4798      	blx	r3
 80019a0:	e016      	b.n	80019d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d107      	bne.n	80019c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0208 	bic.w	r2, r2, #8
 80019be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d4:	2220      	movs	r2, #32
 80019d6:	409a      	lsls	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 808e 	beq.w	8001afe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0310 	and.w	r3, r3, #16
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 8086 	beq.w	8001afe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f6:	2220      	movs	r2, #32
 80019f8:	409a      	lsls	r2, r3
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b05      	cmp	r3, #5
 8001a08:	d136      	bne.n	8001a78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0216 	bic.w	r2, r2, #22
 8001a18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	695a      	ldr	r2, [r3, #20]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d103      	bne.n	8001a3a <HAL_DMA_IRQHandler+0x1da>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d007      	beq.n	8001a4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0208 	bic.w	r2, r2, #8
 8001a48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4e:	223f      	movs	r2, #63	; 0x3f
 8001a50:	409a      	lsls	r2, r3
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d07d      	beq.n	8001b6a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	4798      	blx	r3
        }
        return;
 8001a76:	e078      	b.n	8001b6a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d01c      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d108      	bne.n	8001aa6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d030      	beq.n	8001afe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	4798      	blx	r3
 8001aa4:	e02b      	b.n	8001afe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d027      	beq.n	8001afe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	4798      	blx	r3
 8001ab6:	e022      	b.n	8001afe <HAL_DMA_IRQHandler+0x29e>
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10f      	bne.n	8001aee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0210 	bic.w	r2, r2, #16
 8001adc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d032      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d022      	beq.n	8001b58 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2205      	movs	r2, #5
 8001b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0201 	bic.w	r2, r2, #1
 8001b28:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d307      	bcc.n	8001b46 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f2      	bne.n	8001b2a <HAL_DMA_IRQHandler+0x2ca>
 8001b44:	e000      	b.n	8001b48 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001b46:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	4798      	blx	r3
 8001b68:	e000      	b.n	8001b6c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001b6a:	bf00      	nop
    }
  }
}
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop

08001b74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	3b10      	subs	r3, #16
 8001b84:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <DMA_CalcBaseAndBitshift+0x64>)
 8001b86:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8a:	091b      	lsrs	r3, r3, #4
 8001b8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b8e:	4a13      	ldr	r2, [pc, #76]	; (8001bdc <DMA_CalcBaseAndBitshift+0x68>)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d909      	bls.n	8001bb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001baa:	f023 0303 	bic.w	r3, r3, #3
 8001bae:	1d1a      	adds	r2, r3, #4
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	659a      	str	r2, [r3, #88]	; 0x58
 8001bb4:	e007      	b.n	8001bc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bbe:	f023 0303 	bic.w	r3, r3, #3
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	aaaaaaab 	.word	0xaaaaaaab
 8001bdc:	0800a39c 	.word	0x0800a39c

08001be0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d11f      	bne.n	8001c3a <DMA_CheckFifoParam+0x5a>
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b03      	cmp	r3, #3
 8001bfe:	d856      	bhi.n	8001cae <DMA_CheckFifoParam+0xce>
 8001c00:	a201      	add	r2, pc, #4	; (adr r2, 8001c08 <DMA_CheckFifoParam+0x28>)
 8001c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c06:	bf00      	nop
 8001c08:	08001c19 	.word	0x08001c19
 8001c0c:	08001c2b 	.word	0x08001c2b
 8001c10:	08001c19 	.word	0x08001c19
 8001c14:	08001caf 	.word	0x08001caf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d046      	beq.n	8001cb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c28:	e043      	b.n	8001cb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c32:	d140      	bne.n	8001cb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c38:	e03d      	b.n	8001cb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c42:	d121      	bne.n	8001c88 <DMA_CheckFifoParam+0xa8>
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d837      	bhi.n	8001cba <DMA_CheckFifoParam+0xda>
 8001c4a:	a201      	add	r2, pc, #4	; (adr r2, 8001c50 <DMA_CheckFifoParam+0x70>)
 8001c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c50:	08001c61 	.word	0x08001c61
 8001c54:	08001c67 	.word	0x08001c67
 8001c58:	08001c61 	.word	0x08001c61
 8001c5c:	08001c79 	.word	0x08001c79
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	73fb      	strb	r3, [r7, #15]
      break;
 8001c64:	e030      	b.n	8001cc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d025      	beq.n	8001cbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c76:	e022      	b.n	8001cbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c80:	d11f      	bne.n	8001cc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c86:	e01c      	b.n	8001cc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d903      	bls.n	8001c96 <DMA_CheckFifoParam+0xb6>
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d003      	beq.n	8001c9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c94:	e018      	b.n	8001cc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	73fb      	strb	r3, [r7, #15]
      break;
 8001c9a:	e015      	b.n	8001cc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00e      	beq.n	8001cc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
      break;
 8001cac:	e00b      	b.n	8001cc6 <DMA_CheckFifoParam+0xe6>
      break;
 8001cae:	bf00      	nop
 8001cb0:	e00a      	b.n	8001cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cb2:	bf00      	nop
 8001cb4:	e008      	b.n	8001cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cb6:	bf00      	nop
 8001cb8:	e006      	b.n	8001cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cba:	bf00      	nop
 8001cbc:	e004      	b.n	8001cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cbe:	bf00      	nop
 8001cc0:	e002      	b.n	8001cc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001cc2:	bf00      	nop
 8001cc4:	e000      	b.n	8001cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cc6:	bf00      	nop
    }
  } 
  
  return status; 
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop

08001cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	e159      	b.n	8001fa8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	f040 8148 	bne.w	8001fa2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d005      	beq.n	8001d2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d130      	bne.n	8001d8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	2203      	movs	r2, #3
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d60:	2201      	movs	r2, #1
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	f003 0201 	and.w	r2, r3, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d017      	beq.n	8001dc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d123      	bne.n	8001e1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	08da      	lsrs	r2, r3, #3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3208      	adds	r2, #8
 8001ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	220f      	movs	r2, #15
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	08da      	lsrs	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3208      	adds	r2, #8
 8001e16:	69b9      	ldr	r1, [r7, #24]
 8001e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2203      	movs	r2, #3
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0203 	and.w	r2, r3, #3
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80a2 	beq.w	8001fa2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b57      	ldr	r3, [pc, #348]	; (8001fc0 <HAL_GPIO_Init+0x2e8>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	4a56      	ldr	r2, [pc, #344]	; (8001fc0 <HAL_GPIO_Init+0x2e8>)
 8001e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6e:	4b54      	ldr	r3, [pc, #336]	; (8001fc0 <HAL_GPIO_Init+0x2e8>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e7a:	4a52      	ldr	r2, [pc, #328]	; (8001fc4 <HAL_GPIO_Init+0x2ec>)
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	3302      	adds	r3, #2
 8001e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	220f      	movs	r2, #15
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a49      	ldr	r2, [pc, #292]	; (8001fc8 <HAL_GPIO_Init+0x2f0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d019      	beq.n	8001eda <HAL_GPIO_Init+0x202>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a48      	ldr	r2, [pc, #288]	; (8001fcc <HAL_GPIO_Init+0x2f4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d013      	beq.n	8001ed6 <HAL_GPIO_Init+0x1fe>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a47      	ldr	r2, [pc, #284]	; (8001fd0 <HAL_GPIO_Init+0x2f8>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00d      	beq.n	8001ed2 <HAL_GPIO_Init+0x1fa>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a46      	ldr	r2, [pc, #280]	; (8001fd4 <HAL_GPIO_Init+0x2fc>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d007      	beq.n	8001ece <HAL_GPIO_Init+0x1f6>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a45      	ldr	r2, [pc, #276]	; (8001fd8 <HAL_GPIO_Init+0x300>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d101      	bne.n	8001eca <HAL_GPIO_Init+0x1f2>
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	e008      	b.n	8001edc <HAL_GPIO_Init+0x204>
 8001eca:	2307      	movs	r3, #7
 8001ecc:	e006      	b.n	8001edc <HAL_GPIO_Init+0x204>
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e004      	b.n	8001edc <HAL_GPIO_Init+0x204>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e002      	b.n	8001edc <HAL_GPIO_Init+0x204>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <HAL_GPIO_Init+0x204>
 8001eda:	2300      	movs	r3, #0
 8001edc:	69fa      	ldr	r2, [r7, #28]
 8001ede:	f002 0203 	and.w	r2, r2, #3
 8001ee2:	0092      	lsls	r2, r2, #2
 8001ee4:	4093      	lsls	r3, r2
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eec:	4935      	ldr	r1, [pc, #212]	; (8001fc4 <HAL_GPIO_Init+0x2ec>)
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	089b      	lsrs	r3, r3, #2
 8001ef2:	3302      	adds	r3, #2
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001efa:	4b38      	ldr	r3, [pc, #224]	; (8001fdc <HAL_GPIO_Init+0x304>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f1e:	4a2f      	ldr	r2, [pc, #188]	; (8001fdc <HAL_GPIO_Init+0x304>)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f24:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <HAL_GPIO_Init+0x304>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f48:	4a24      	ldr	r2, [pc, #144]	; (8001fdc <HAL_GPIO_Init+0x304>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f4e:	4b23      	ldr	r3, [pc, #140]	; (8001fdc <HAL_GPIO_Init+0x304>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f72:	4a1a      	ldr	r2, [pc, #104]	; (8001fdc <HAL_GPIO_Init+0x304>)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f78:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <HAL_GPIO_Init+0x304>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f9c:	4a0f      	ldr	r2, [pc, #60]	; (8001fdc <HAL_GPIO_Init+0x304>)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	61fb      	str	r3, [r7, #28]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	2b0f      	cmp	r3, #15
 8001fac:	f67f aea2 	bls.w	8001cf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	3724      	adds	r7, #36	; 0x24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40013800 	.word	0x40013800
 8001fc8:	40020000 	.word	0x40020000
 8001fcc:	40020400 	.word	0x40020400
 8001fd0:	40020800 	.word	0x40020800
 8001fd4:	40020c00 	.word	0x40020c00
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40013c00 	.word	0x40013c00

08001fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	807b      	strh	r3, [r7, #2]
 8001fec:	4613      	mov	r3, r2
 8001fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ff0:	787b      	ldrb	r3, [r7, #1]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ff6:	887a      	ldrh	r2, [r7, #2]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ffc:	e003      	b.n	8002006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ffe:	887b      	ldrh	r3, [r7, #2]
 8002000:	041a      	lsls	r2, r3, #16
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	619a      	str	r2, [r3, #24]
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e12b      	b.n	800227e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d106      	bne.n	8002040 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7fe ffdc 	bl	8000ff8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2224      	movs	r2, #36	; 0x24
 8002044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0201 	bic.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002066:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002076:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002078:	f002 f9ca 	bl	8004410 <HAL_RCC_GetPCLK1Freq>
 800207c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4a81      	ldr	r2, [pc, #516]	; (8002288 <HAL_I2C_Init+0x274>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d807      	bhi.n	8002098 <HAL_I2C_Init+0x84>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4a80      	ldr	r2, [pc, #512]	; (800228c <HAL_I2C_Init+0x278>)
 800208c:	4293      	cmp	r3, r2
 800208e:	bf94      	ite	ls
 8002090:	2301      	movls	r3, #1
 8002092:	2300      	movhi	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	e006      	b.n	80020a6 <HAL_I2C_Init+0x92>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4a7d      	ldr	r2, [pc, #500]	; (8002290 <HAL_I2C_Init+0x27c>)
 800209c:	4293      	cmp	r3, r2
 800209e:	bf94      	ite	ls
 80020a0:	2301      	movls	r3, #1
 80020a2:	2300      	movhi	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e0e7      	b.n	800227e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4a78      	ldr	r2, [pc, #480]	; (8002294 <HAL_I2C_Init+0x280>)
 80020b2:	fba2 2303 	umull	r2, r3, r2, r3
 80020b6:	0c9b      	lsrs	r3, r3, #18
 80020b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	4a6a      	ldr	r2, [pc, #424]	; (8002288 <HAL_I2C_Init+0x274>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d802      	bhi.n	80020e8 <HAL_I2C_Init+0xd4>
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	3301      	adds	r3, #1
 80020e6:	e009      	b.n	80020fc <HAL_I2C_Init+0xe8>
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020ee:	fb02 f303 	mul.w	r3, r2, r3
 80020f2:	4a69      	ldr	r2, [pc, #420]	; (8002298 <HAL_I2C_Init+0x284>)
 80020f4:	fba2 2303 	umull	r2, r3, r2, r3
 80020f8:	099b      	lsrs	r3, r3, #6
 80020fa:	3301      	adds	r3, #1
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	430b      	orrs	r3, r1
 8002102:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800210e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	495c      	ldr	r1, [pc, #368]	; (8002288 <HAL_I2C_Init+0x274>)
 8002118:	428b      	cmp	r3, r1
 800211a:	d819      	bhi.n	8002150 <HAL_I2C_Init+0x13c>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	1e59      	subs	r1, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	fbb1 f3f3 	udiv	r3, r1, r3
 800212a:	1c59      	adds	r1, r3, #1
 800212c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002130:	400b      	ands	r3, r1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00a      	beq.n	800214c <HAL_I2C_Init+0x138>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1e59      	subs	r1, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	fbb1 f3f3 	udiv	r3, r1, r3
 8002144:	3301      	adds	r3, #1
 8002146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800214a:	e051      	b.n	80021f0 <HAL_I2C_Init+0x1dc>
 800214c:	2304      	movs	r3, #4
 800214e:	e04f      	b.n	80021f0 <HAL_I2C_Init+0x1dc>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d111      	bne.n	800217c <HAL_I2C_Init+0x168>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1e58      	subs	r0, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6859      	ldr	r1, [r3, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	440b      	add	r3, r1
 8002166:	fbb0 f3f3 	udiv	r3, r0, r3
 800216a:	3301      	adds	r3, #1
 800216c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002170:	2b00      	cmp	r3, #0
 8002172:	bf0c      	ite	eq
 8002174:	2301      	moveq	r3, #1
 8002176:	2300      	movne	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	e012      	b.n	80021a2 <HAL_I2C_Init+0x18e>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	1e58      	subs	r0, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6859      	ldr	r1, [r3, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	0099      	lsls	r1, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002192:	3301      	adds	r3, #1
 8002194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002198:	2b00      	cmp	r3, #0
 800219a:	bf0c      	ite	eq
 800219c:	2301      	moveq	r3, #1
 800219e:	2300      	movne	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_I2C_Init+0x196>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e022      	b.n	80021f0 <HAL_I2C_Init+0x1dc>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10e      	bne.n	80021d0 <HAL_I2C_Init+0x1bc>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1e58      	subs	r0, r3, #1
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6859      	ldr	r1, [r3, #4]
 80021ba:	460b      	mov	r3, r1
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	440b      	add	r3, r1
 80021c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c4:	3301      	adds	r3, #1
 80021c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ce:	e00f      	b.n	80021f0 <HAL_I2C_Init+0x1dc>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1e58      	subs	r0, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	0099      	lsls	r1, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e6:	3301      	adds	r3, #1
 80021e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	6809      	ldr	r1, [r1, #0]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69da      	ldr	r2, [r3, #28]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800221e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6911      	ldr	r1, [r2, #16]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	68d2      	ldr	r2, [r2, #12]
 800222a:	4311      	orrs	r1, r2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	430b      	orrs	r3, r1
 8002232:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695a      	ldr	r2, [r3, #20]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0201 	orr.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	000186a0 	.word	0x000186a0
 800228c:	001e847f 	.word	0x001e847f
 8002290:	003d08ff 	.word	0x003d08ff
 8002294:	431bde83 	.word	0x431bde83
 8002298:	10624dd3 	.word	0x10624dd3

0800229c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	4608      	mov	r0, r1
 80022a6:	4611      	mov	r1, r2
 80022a8:	461a      	mov	r2, r3
 80022aa:	4603      	mov	r3, r0
 80022ac:	817b      	strh	r3, [r7, #10]
 80022ae:	460b      	mov	r3, r1
 80022b0:	813b      	strh	r3, [r7, #8]
 80022b2:	4613      	mov	r3, r2
 80022b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022b6:	f7ff f8e3 	bl	8001480 <HAL_GetTick>
 80022ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b20      	cmp	r3, #32
 80022c6:	f040 80d9 	bne.w	800247c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	2319      	movs	r3, #25
 80022d0:	2201      	movs	r2, #1
 80022d2:	496d      	ldr	r1, [pc, #436]	; (8002488 <HAL_I2C_Mem_Write+0x1ec>)
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 f971 	bl	80025bc <I2C_WaitOnFlagUntilTimeout>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80022e0:	2302      	movs	r3, #2
 80022e2:	e0cc      	b.n	800247e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_I2C_Mem_Write+0x56>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e0c5      	b.n	800247e <HAL_I2C_Mem_Write+0x1e2>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b01      	cmp	r3, #1
 8002306:	d007      	beq.n	8002318 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0201 	orr.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002326:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2221      	movs	r2, #33	; 0x21
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2240      	movs	r2, #64	; 0x40
 8002334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a3a      	ldr	r2, [r7, #32]
 8002342:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002348:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4a4d      	ldr	r2, [pc, #308]	; (800248c <HAL_I2C_Mem_Write+0x1f0>)
 8002358:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800235a:	88f8      	ldrh	r0, [r7, #6]
 800235c:	893a      	ldrh	r2, [r7, #8]
 800235e:	8979      	ldrh	r1, [r7, #10]
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	9301      	str	r3, [sp, #4]
 8002364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	4603      	mov	r3, r0
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f000 f890 	bl	8002490 <I2C_RequestMemoryWrite>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d052      	beq.n	800241c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e081      	b.n	800247e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 f9f2 	bl	8002768 <I2C_WaitOnTXEFlagUntilTimeout>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00d      	beq.n	80023a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	2b04      	cmp	r3, #4
 8002390:	d107      	bne.n	80023a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e06b      	b.n	800247e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	781a      	ldrb	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d11b      	bne.n	800241c <HAL_I2C_Mem_Write+0x180>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d017      	beq.n	800241c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	781a      	ldrb	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002406:	3b01      	subs	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1aa      	bne.n	800237a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 f9de 	bl	80027ea <I2C_WaitOnBTFFlagUntilTimeout>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00d      	beq.n	8002450 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	2b04      	cmp	r3, #4
 800243a:	d107      	bne.n	800244c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800244a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e016      	b.n	800247e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800245e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	e000      	b.n	800247e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800247c:	2302      	movs	r3, #2
  }
}
 800247e:	4618      	mov	r0, r3
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	00100002 	.word	0x00100002
 800248c:	ffff0000 	.word	0xffff0000

08002490 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af02      	add	r7, sp, #8
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	4608      	mov	r0, r1
 800249a:	4611      	mov	r1, r2
 800249c:	461a      	mov	r2, r3
 800249e:	4603      	mov	r3, r0
 80024a0:	817b      	strh	r3, [r7, #10]
 80024a2:	460b      	mov	r3, r1
 80024a4:	813b      	strh	r3, [r7, #8]
 80024a6:	4613      	mov	r3, r2
 80024a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 f878 	bl	80025bc <I2C_WaitOnFlagUntilTimeout>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00d      	beq.n	80024ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024e0:	d103      	bne.n	80024ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e05f      	b.n	80025ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024ee:	897b      	ldrh	r3, [r7, #10]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	6a3a      	ldr	r2, [r7, #32]
 8002502:	492d      	ldr	r1, [pc, #180]	; (80025b8 <I2C_RequestMemoryWrite+0x128>)
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f8b0 	bl	800266a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e04c      	b.n	80025ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800252a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252c:	6a39      	ldr	r1, [r7, #32]
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 f91a 	bl	8002768 <I2C_WaitOnTXEFlagUntilTimeout>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00d      	beq.n	8002556 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	2b04      	cmp	r3, #4
 8002540:	d107      	bne.n	8002552 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002550:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e02b      	b.n	80025ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d105      	bne.n	8002568 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800255c:	893b      	ldrh	r3, [r7, #8]
 800255e:	b2da      	uxtb	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	611a      	str	r2, [r3, #16]
 8002566:	e021      	b.n	80025ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002568:	893b      	ldrh	r3, [r7, #8]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	b29b      	uxth	r3, r3
 800256e:	b2da      	uxtb	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002578:	6a39      	ldr	r1, [r7, #32]
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 f8f4 	bl	8002768 <I2C_WaitOnTXEFlagUntilTimeout>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00d      	beq.n	80025a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	2b04      	cmp	r3, #4
 800258c:	d107      	bne.n	800259e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e005      	b.n	80025ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025a2:	893b      	ldrh	r3, [r7, #8]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	00010002 	.word	0x00010002

080025bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	4613      	mov	r3, r2
 80025ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025cc:	e025      	b.n	800261a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025d4:	d021      	beq.n	800261a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d6:	f7fe ff53 	bl	8001480 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d302      	bcc.n	80025ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d116      	bne.n	800261a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f043 0220 	orr.w	r2, r3, #32
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e023      	b.n	8002662 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	0c1b      	lsrs	r3, r3, #16
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b01      	cmp	r3, #1
 8002622:	d10d      	bne.n	8002640 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	43da      	mvns	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4013      	ands	r3, r2
 8002630:	b29b      	uxth	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	bf0c      	ite	eq
 8002636:	2301      	moveq	r3, #1
 8002638:	2300      	movne	r3, #0
 800263a:	b2db      	uxtb	r3, r3
 800263c:	461a      	mov	r2, r3
 800263e:	e00c      	b.n	800265a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	43da      	mvns	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4013      	ands	r3, r2
 800264c:	b29b      	uxth	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	bf0c      	ite	eq
 8002652:	2301      	moveq	r3, #1
 8002654:	2300      	movne	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	429a      	cmp	r2, r3
 800265e:	d0b6      	beq.n	80025ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002678:	e051      	b.n	800271e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002688:	d123      	bne.n	80026d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002698:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f043 0204 	orr.w	r2, r3, #4
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e046      	b.n	8002760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026d8:	d021      	beq.n	800271e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026da:	f7fe fed1 	bl	8001480 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d302      	bcc.n	80026f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d116      	bne.n	800271e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f043 0220 	orr.w	r2, r3, #32
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e020      	b.n	8002760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	0c1b      	lsrs	r3, r3, #16
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b01      	cmp	r3, #1
 8002726:	d10c      	bne.n	8002742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	43da      	mvns	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	4013      	ands	r3, r2
 8002734:	b29b      	uxth	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	bf14      	ite	ne
 800273a:	2301      	movne	r3, #1
 800273c:	2300      	moveq	r3, #0
 800273e:	b2db      	uxtb	r3, r3
 8002740:	e00b      	b.n	800275a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	43da      	mvns	r2, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	4013      	ands	r3, r2
 800274e:	b29b      	uxth	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf14      	ite	ne
 8002754:	2301      	movne	r3, #1
 8002756:	2300      	moveq	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d18d      	bne.n	800267a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002774:	e02d      	b.n	80027d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 f878 	bl	800286c <I2C_IsAcknowledgeFailed>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e02d      	b.n	80027e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800278c:	d021      	beq.n	80027d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800278e:	f7fe fe77 	bl	8001480 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	429a      	cmp	r2, r3
 800279c:	d302      	bcc.n	80027a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d116      	bne.n	80027d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f043 0220 	orr.w	r2, r3, #32
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e007      	b.n	80027e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027dc:	2b80      	cmp	r3, #128	; 0x80
 80027de:	d1ca      	bne.n	8002776 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	60f8      	str	r0, [r7, #12]
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027f6:	e02d      	b.n	8002854 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 f837 	bl	800286c <I2C_IsAcknowledgeFailed>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e02d      	b.n	8002864 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800280e:	d021      	beq.n	8002854 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002810:	f7fe fe36 	bl	8001480 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	429a      	cmp	r2, r3
 800281e:	d302      	bcc.n	8002826 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d116      	bne.n	8002854 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	f043 0220 	orr.w	r2, r3, #32
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e007      	b.n	8002864 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f003 0304 	and.w	r3, r3, #4
 800285e:	2b04      	cmp	r3, #4
 8002860:	d1ca      	bne.n	80027f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002882:	d11b      	bne.n	80028bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800288c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	f043 0204 	orr.w	r2, r3, #4
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028cc:	b08f      	sub	sp, #60	; 0x3c
 80028ce:	af0a      	add	r7, sp, #40	; 0x28
 80028d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e10f      	b.n	8002afc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f005 fef0 	bl	80086dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2203      	movs	r2, #3
 8002900:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290c:	2b00      	cmp	r3, #0
 800290e:	d102      	bne.n	8002916 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f002 fd7d 	bl	800541a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	603b      	str	r3, [r7, #0]
 8002926:	687e      	ldr	r6, [r7, #4]
 8002928:	466d      	mov	r5, sp
 800292a:	f106 0410 	add.w	r4, r6, #16
 800292e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002934:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002936:	e894 0003 	ldmia.w	r4, {r0, r1}
 800293a:	e885 0003 	stmia.w	r5, {r0, r1}
 800293e:	1d33      	adds	r3, r6, #4
 8002940:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002942:	6838      	ldr	r0, [r7, #0]
 8002944:	f002 fc54 	bl	80051f0 <USB_CoreInit>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d005      	beq.n	800295a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2202      	movs	r2, #2
 8002952:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e0d0      	b.n	8002afc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2100      	movs	r1, #0
 8002960:	4618      	mov	r0, r3
 8002962:	f002 fd6b 	bl	800543c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002966:	2300      	movs	r3, #0
 8002968:	73fb      	strb	r3, [r7, #15]
 800296a:	e04a      	b.n	8002a02 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800296c:	7bfa      	ldrb	r2, [r7, #15]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	333d      	adds	r3, #61	; 0x3d
 800297c:	2201      	movs	r2, #1
 800297e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002980:	7bfa      	ldrb	r2, [r7, #15]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	333c      	adds	r3, #60	; 0x3c
 8002990:	7bfa      	ldrb	r2, [r7, #15]
 8002992:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002994:	7bfa      	ldrb	r2, [r7, #15]
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	b298      	uxth	r0, r3
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	3342      	adds	r3, #66	; 0x42
 80029a8:	4602      	mov	r2, r0
 80029aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029ac:	7bfa      	ldrb	r2, [r7, #15]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	333f      	adds	r3, #63	; 0x3f
 80029bc:	2200      	movs	r2, #0
 80029be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029c0:	7bfa      	ldrb	r2, [r7, #15]
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	1a9b      	subs	r3, r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	3344      	adds	r3, #68	; 0x44
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029d4:	7bfa      	ldrb	r2, [r7, #15]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	3348      	adds	r3, #72	; 0x48
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029e8:	7bfa      	ldrb	r2, [r7, #15]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	3350      	adds	r3, #80	; 0x50
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	3301      	adds	r3, #1
 8002a00:	73fb      	strb	r3, [r7, #15]
 8002a02:	7bfa      	ldrb	r2, [r7, #15]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d3af      	bcc.n	800296c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	73fb      	strb	r3, [r7, #15]
 8002a10:	e044      	b.n	8002a9c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a12:	7bfa      	ldrb	r2, [r7, #15]
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	1a9b      	subs	r3, r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002a24:	2200      	movs	r2, #0
 8002a26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a28:	7bfa      	ldrb	r2, [r7, #15]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	1a9b      	subs	r3, r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002a3a:	7bfa      	ldrb	r2, [r7, #15]
 8002a3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a3e:	7bfa      	ldrb	r2, [r7, #15]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a54:	7bfa      	ldrb	r2, [r7, #15]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	1a9b      	subs	r3, r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a80:	7bfa      	ldrb	r2, [r7, #15]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
 8002a9c:	7bfa      	ldrb	r2, [r7, #15]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d3b5      	bcc.n	8002a12 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	687e      	ldr	r6, [r7, #4]
 8002aae:	466d      	mov	r5, sp
 8002ab0:	f106 0410 	add.w	r4, r6, #16
 8002ab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ab6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002abc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ac0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ac4:	1d33      	adds	r3, r6, #4
 8002ac6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ac8:	6838      	ldr	r0, [r7, #0]
 8002aca:	f002 fd03 	bl	80054d4 <USB_DevInit>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e00d      	b.n	8002afc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f003 fd7f 	bl	80065f8 <USB_DevDisconnect>

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b04 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_PCD_Start+0x1c>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e020      	b.n	8002b62 <HAL_PCD_Start+0x5e>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d109      	bne.n	8002b44 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d005      	beq.n	8002b44 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f002 fc55 	bl	80053f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f003 fd2f 	bl	80065b6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b6a:	b590      	push	{r4, r7, lr}
 8002b6c:	b08d      	sub	sp, #52	; 0x34
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f003 fded 	bl	8006760 <USB_GetMode>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f040 839d 	bne.w	80032c8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f003 fd51 	bl	800663a <USB_ReadInterrupts>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 8393 	beq.w	80032c6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f003 fd48 	bl	800663a <USB_ReadInterrupts>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d107      	bne.n	8002bc4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f002 0202 	and.w	r2, r2, #2
 8002bc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f003 fd36 	bl	800663a <USB_ReadInterrupts>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	2b10      	cmp	r3, #16
 8002bd6:	d161      	bne.n	8002c9c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0210 	bic.w	r2, r2, #16
 8002be6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	f003 020f 	and.w	r2, r3, #15
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	4413      	add	r3, r2
 8002c04:	3304      	adds	r3, #4
 8002c06:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	0c5b      	lsrs	r3, r3, #17
 8002c0c:	f003 030f 	and.w	r3, r3, #15
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d124      	bne.n	8002c5e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d035      	beq.n	8002c8c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	091b      	lsrs	r3, r3, #4
 8002c28:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	461a      	mov	r2, r3
 8002c32:	6a38      	ldr	r0, [r7, #32]
 8002c34:	f003 fb6d 	bl	8006312 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	091b      	lsrs	r3, r3, #4
 8002c40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c44:	441a      	add	r2, r3
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	091b      	lsrs	r3, r3, #4
 8002c52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c56:	441a      	add	r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	619a      	str	r2, [r3, #24]
 8002c5c:	e016      	b.n	8002c8c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	0c5b      	lsrs	r3, r3, #17
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	2b06      	cmp	r3, #6
 8002c68:	d110      	bne.n	8002c8c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c70:	2208      	movs	r2, #8
 8002c72:	4619      	mov	r1, r3
 8002c74:	6a38      	ldr	r0, [r7, #32]
 8002c76:	f003 fb4c 	bl	8006312 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	699a      	ldr	r2, [r3, #24]
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	091b      	lsrs	r3, r3, #4
 8002c82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c86:	441a      	add	r2, r3
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699a      	ldr	r2, [r3, #24]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0210 	orr.w	r2, r2, #16
 8002c9a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f003 fcca 	bl	800663a <USB_ReadInterrupts>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002cb0:	d16e      	bne.n	8002d90 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f003 fcd0 	bl	8006660 <USB_ReadDevAllOutEpInterrupt>
 8002cc0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002cc2:	e062      	b.n	8002d8a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d057      	beq.n	8002d7e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f003 fcf5 	bl	80066c8 <USB_ReadDevOutEPInterrupt>
 8002cde:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00c      	beq.n	8002d04 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	015a      	lsls	r2, r3, #5
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002cfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fdb0 	bl	8003864 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00c      	beq.n	8002d28 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	2308      	movs	r3, #8
 8002d1e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 feaa 	bl	8003a7c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f003 0310 	and.w	r3, r3, #16
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d008      	beq.n	8002d44 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	015a      	lsls	r2, r3, #5
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d3e:	461a      	mov	r2, r3
 8002d40:	2310      	movs	r3, #16
 8002d42:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f003 0320 	and.w	r3, r3, #32
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d008      	beq.n	8002d60 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	2320      	movs	r3, #32
 8002d5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d009      	beq.n	8002d7e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d76:	461a      	mov	r2, r3
 8002d78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d7c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	3301      	adds	r3, #1
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d86:	085b      	lsrs	r3, r3, #1
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d199      	bne.n	8002cc4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f003 fc50 	bl	800663a <USB_ReadInterrupts>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002da4:	f040 80c0 	bne.w	8002f28 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f003 fc71 	bl	8006694 <USB_ReadDevAllInEpInterrupt>
 8002db2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002db8:	e0b2      	b.n	8002f20 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80a7 	beq.w	8002f14 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f003 fc97 	bl	8006704 <USB_ReadDevInEPInterrupt>
 8002dd6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d057      	beq.n	8002e92 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	f003 030f 	and.w	r3, r3, #15
 8002de8:	2201      	movs	r2, #1
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	69f9      	ldr	r1, [r7, #28]
 8002dfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e02:	4013      	ands	r3, r2
 8002e04:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e12:	461a      	mov	r2, r3
 8002e14:	2301      	movs	r3, #1
 8002e16:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d132      	bne.n	8002e86 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e24:	4613      	mov	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	1a9b      	subs	r3, r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3348      	adds	r3, #72	; 0x48
 8002e30:	6819      	ldr	r1, [r3, #0]
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	1a9b      	subs	r3, r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4403      	add	r3, r0
 8002e40:	3344      	adds	r3, #68	; 0x44
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4419      	add	r1, r3
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	1a9b      	subs	r3, r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4403      	add	r3, r0
 8002e54:	3348      	adds	r3, #72	; 0x48
 8002e56:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d113      	bne.n	8002e86 <HAL_PCD_IRQHandler+0x31c>
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e62:	4613      	mov	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	1a9b      	subs	r3, r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3350      	adds	r3, #80	; 0x50
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d108      	bne.n	8002e86 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6818      	ldr	r0, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e7e:	461a      	mov	r2, r3
 8002e80:	2101      	movs	r1, #1
 8002e82:	f003 fc9f 	bl	80067c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f005 fca6 	bl	80087de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	2308      	movs	r3, #8
 8002eac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	f003 0310 	and.w	r3, r3, #16
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	2310      	movs	r3, #16
 8002ec8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d008      	beq.n	8002ee6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2340      	movs	r3, #64	; 0x40
 8002ee4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d008      	beq.n	8002f02 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002efc:	461a      	mov	r2, r3
 8002efe:	2302      	movs	r3, #2
 8002f00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 fc1b 	bl	800374a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	3301      	adds	r3, #1
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	085b      	lsrs	r3, r3, #1
 8002f1e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f47f af49 	bne.w	8002dba <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f003 fb84 	bl	800663a <USB_ReadInterrupts>
 8002f32:	4603      	mov	r3, r0
 8002f34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f3c:	d122      	bne.n	8002f84 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	69fa      	ldr	r2, [r7, #28]
 8002f48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f4c:	f023 0301 	bic.w	r3, r3, #1
 8002f50:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d108      	bne.n	8002f6e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f64:	2100      	movs	r1, #0
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fe26 	bl	8003bb8 <HAL_PCDEx_LPM_Callback>
 8002f6c:	e002      	b.n	8002f74 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f005 fca2 	bl	80088b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002f82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f003 fb56 	bl	800663a <USB_ReadInterrupts>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f98:	d112      	bne.n	8002fc0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d102      	bne.n	8002fb0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f005 fc5e 	bl	800886c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002fbe:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f003 fb38 	bl	800663a <USB_ReadInterrupts>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd4:	f040 80c7 	bne.w	8003166 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	69fa      	ldr	r2, [r7, #28]
 8002fe2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fe6:	f023 0301 	bic.w	r3, r3, #1
 8002fea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2110      	movs	r1, #16
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f002 fbd2 	bl	800579c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ffc:	e056      	b.n	80030ac <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	4413      	add	r3, r2
 8003006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800300a:	461a      	mov	r2, r3
 800300c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003010:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	4413      	add	r3, r2
 800301a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003022:	0151      	lsls	r1, r2, #5
 8003024:	69fa      	ldr	r2, [r7, #28]
 8003026:	440a      	add	r2, r1
 8003028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800302c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003030:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	4413      	add	r3, r2
 800303a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003042:	0151      	lsls	r1, r2, #5
 8003044:	69fa      	ldr	r2, [r7, #28]
 8003046:	440a      	add	r2, r1
 8003048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800304c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003050:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	4413      	add	r3, r2
 800305a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800305e:	461a      	mov	r2, r3
 8003060:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003064:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	4413      	add	r3, r2
 800306e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003076:	0151      	lsls	r1, r2, #5
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	440a      	add	r2, r1
 800307c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003080:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003084:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	4413      	add	r3, r2
 800308e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003096:	0151      	lsls	r1, r2, #5
 8003098:	69fa      	ldr	r2, [r7, #28]
 800309a:	440a      	add	r2, r1
 800309c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80030a4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a8:	3301      	adds	r3, #1
 80030aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d3a3      	bcc.n	8002ffe <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	69fa      	ldr	r2, [r7, #28]
 80030c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030c4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80030c8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d016      	beq.n	8003100 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030dc:	69fa      	ldr	r2, [r7, #28]
 80030de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030e2:	f043 030b 	orr.w	r3, r3, #11
 80030e6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030f8:	f043 030b 	orr.w	r3, r3, #11
 80030fc:	6453      	str	r3, [r2, #68]	; 0x44
 80030fe:	e015      	b.n	800312c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	69fa      	ldr	r2, [r7, #28]
 800310a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800310e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003112:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003116:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	69fa      	ldr	r2, [r7, #28]
 8003122:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003126:	f043 030b 	orr.w	r3, r3, #11
 800312a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	69fa      	ldr	r2, [r7, #28]
 8003136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800313a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800313e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6818      	ldr	r0, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003150:	461a      	mov	r2, r3
 8003152:	f003 fb37 	bl	80067c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695a      	ldr	r2, [r3, #20]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003164:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f003 fa65 	bl	800663a <USB_ReadInterrupts>
 8003170:	4603      	mov	r3, r0
 8003172:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800317a:	d124      	bne.n	80031c6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f003 fafb 	bl	800677c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f002 fb63 	bl	8005856 <USB_GetDevSpeed>
 8003190:	4603      	mov	r3, r0
 8003192:	461a      	mov	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681c      	ldr	r4, [r3, #0]
 800319c:	f001 f92c 	bl	80043f8 <HAL_RCC_GetHCLKFreq>
 80031a0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	4620      	mov	r0, r4
 80031ac:	f002 f882 	bl	80052b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f005 fb3c 	bl	800882e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695a      	ldr	r2, [r3, #20]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80031c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f003 fa35 	bl	800663a <USB_ReadInterrupts>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d10a      	bne.n	80031f0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f005 fb19 	bl	8008812 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695a      	ldr	r2, [r3, #20]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f002 0208 	and.w	r2, r2, #8
 80031ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f003 fa20 	bl	800663a <USB_ReadInterrupts>
 80031fa:	4603      	mov	r3, r0
 80031fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003200:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003204:	d10f      	bne.n	8003226 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	b2db      	uxtb	r3, r3
 800320e:	4619      	mov	r1, r3
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f005 fb71 	bl	80088f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695a      	ldr	r2, [r3, #20]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003224:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f003 fa05 	bl	800663a <USB_ReadInterrupts>
 8003230:	4603      	mov	r3, r0
 8003232:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003236:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800323a:	d10f      	bne.n	800325c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	b2db      	uxtb	r3, r3
 8003244:	4619      	mov	r1, r3
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f005 fb44 	bl	80088d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695a      	ldr	r2, [r3, #20]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800325a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f003 f9ea 	bl	800663a <USB_ReadInterrupts>
 8003266:	4603      	mov	r3, r0
 8003268:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800326c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003270:	d10a      	bne.n	8003288 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f005 fb52 	bl	800891c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695a      	ldr	r2, [r3, #20]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003286:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f003 f9d4 	bl	800663a <USB_ReadInterrupts>
 8003292:	4603      	mov	r3, r0
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b04      	cmp	r3, #4
 800329a:	d115      	bne.n	80032c8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f005 fb42 	bl	8008938 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6859      	ldr	r1, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	605a      	str	r2, [r3, #4]
 80032c4:	e000      	b.n	80032c8 <HAL_PCD_IRQHandler+0x75e>
      return;
 80032c6:	bf00      	nop
    }
  }
}
 80032c8:	3734      	adds	r7, #52	; 0x34
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd90      	pop	{r4, r7, pc}

080032ce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b082      	sub	sp, #8
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	460b      	mov	r3, r1
 80032d8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <HAL_PCD_SetAddress+0x1a>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e013      	b.n	8003310 <HAL_PCD_SetAddress+0x42>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	78fa      	ldrb	r2, [r7, #3]
 80032f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	4611      	mov	r1, r2
 8003300:	4618      	mov	r0, r3
 8003302:	f003 f932 	bl	800656a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	4608      	mov	r0, r1
 8003322:	4611      	mov	r1, r2
 8003324:	461a      	mov	r2, r3
 8003326:	4603      	mov	r3, r0
 8003328:	70fb      	strb	r3, [r7, #3]
 800332a:	460b      	mov	r3, r1
 800332c:	803b      	strh	r3, [r7, #0]
 800332e:	4613      	mov	r3, r2
 8003330:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003336:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800333a:	2b00      	cmp	r3, #0
 800333c:	da0f      	bge.n	800335e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800333e:	78fb      	ldrb	r3, [r7, #3]
 8003340:	f003 020f 	and.w	r2, r3, #15
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	3338      	adds	r3, #56	; 0x38
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	3304      	adds	r3, #4
 8003354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2201      	movs	r2, #1
 800335a:	705a      	strb	r2, [r3, #1]
 800335c:	e00f      	b.n	800337e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	f003 020f 	and.w	r2, r3, #15
 8003364:	4613      	mov	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	4413      	add	r3, r2
 8003374:	3304      	adds	r3, #4
 8003376:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800337e:	78fb      	ldrb	r3, [r7, #3]
 8003380:	f003 030f 	and.w	r3, r3, #15
 8003384:	b2da      	uxtb	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800338a:	883a      	ldrh	r2, [r7, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	78ba      	ldrb	r2, [r7, #2]
 8003394:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	785b      	ldrb	r3, [r3, #1]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d004      	beq.n	80033a8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80033a8:	78bb      	ldrb	r3, [r7, #2]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d102      	bne.n	80033b4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <HAL_PCD_EP_Open+0xaa>
 80033be:	2302      	movs	r3, #2
 80033c0:	e00e      	b.n	80033e0 <HAL_PCD_EP_Open+0xc8>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68f9      	ldr	r1, [r7, #12]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f002 fa65 	bl	80058a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80033de:	7afb      	ldrb	r3, [r7, #11]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	da0f      	bge.n	800341c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033fc:	78fb      	ldrb	r3, [r7, #3]
 80033fe:	f003 020f 	and.w	r2, r3, #15
 8003402:	4613      	mov	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	1a9b      	subs	r3, r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	3338      	adds	r3, #56	; 0x38
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	4413      	add	r3, r2
 8003410:	3304      	adds	r3, #4
 8003412:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2201      	movs	r2, #1
 8003418:	705a      	strb	r2, [r3, #1]
 800341a:	e00f      	b.n	800343c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800341c:	78fb      	ldrb	r3, [r7, #3]
 800341e:	f003 020f 	and.w	r2, r3, #15
 8003422:	4613      	mov	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	4413      	add	r3, r2
 8003432:	3304      	adds	r3, #4
 8003434:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800343c:	78fb      	ldrb	r3, [r7, #3]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	b2da      	uxtb	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800344e:	2b01      	cmp	r3, #1
 8003450:	d101      	bne.n	8003456 <HAL_PCD_EP_Close+0x6e>
 8003452:	2302      	movs	r3, #2
 8003454:	e00e      	b.n	8003474 <HAL_PCD_EP_Close+0x8c>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68f9      	ldr	r1, [r7, #12]
 8003464:	4618      	mov	r0, r3
 8003466:	f002 faa3 	bl	80059b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	607a      	str	r2, [r7, #4]
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	460b      	mov	r3, r1
 800348a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800348c:	7afb      	ldrb	r3, [r7, #11]
 800348e:	f003 020f 	and.w	r2, r3, #15
 8003492:	4613      	mov	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	1a9b      	subs	r3, r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4413      	add	r3, r2
 80034a2:	3304      	adds	r3, #4
 80034a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2200      	movs	r2, #0
 80034b6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2200      	movs	r2, #0
 80034bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034be:	7afb      	ldrb	r3, [r7, #11]
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d102      	bne.n	80034d8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034d8:	7afb      	ldrb	r3, [r7, #11]
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d109      	bne.n	80034f6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	461a      	mov	r2, r3
 80034ee:	6979      	ldr	r1, [r7, #20]
 80034f0:	f002 fd7e 	bl	8005ff0 <USB_EP0StartXfer>
 80034f4:	e008      	b.n	8003508 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	461a      	mov	r2, r3
 8003502:	6979      	ldr	r1, [r7, #20]
 8003504:	f002 fb30 	bl	8005b68 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	460b      	mov	r3, r1
 800351c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800351e:	78fb      	ldrb	r3, [r7, #3]
 8003520:	f003 020f 	and.w	r2, r3, #15
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	1a9b      	subs	r3, r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	440b      	add	r3, r1
 8003530:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003534:	681b      	ldr	r3, [r3, #0]
}
 8003536:	4618      	mov	r0, r3
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b086      	sub	sp, #24
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	603b      	str	r3, [r7, #0]
 800354e:	460b      	mov	r3, r1
 8003550:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003552:	7afb      	ldrb	r3, [r7, #11]
 8003554:	f003 020f 	and.w	r2, r3, #15
 8003558:	4613      	mov	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	3338      	adds	r3, #56	; 0x38
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4413      	add	r3, r2
 8003566:	3304      	adds	r3, #4
 8003568:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2200      	movs	r2, #0
 800357a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	2201      	movs	r2, #1
 8003580:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003582:	7afb      	ldrb	r3, [r7, #11]
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	b2da      	uxtb	r2, r3
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d102      	bne.n	800359c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800359c:	7afb      	ldrb	r3, [r7, #11]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d109      	bne.n	80035ba <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	461a      	mov	r2, r3
 80035b2:	6979      	ldr	r1, [r7, #20]
 80035b4:	f002 fd1c 	bl	8005ff0 <USB_EP0StartXfer>
 80035b8:	e008      	b.n	80035cc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6818      	ldr	r0, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	461a      	mov	r2, r3
 80035c6:	6979      	ldr	r1, [r7, #20]
 80035c8:	f002 face 	bl	8005b68 <USB_EPStartXfer>
  }

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	460b      	mov	r3, r1
 80035e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80035e2:	78fb      	ldrb	r3, [r7, #3]
 80035e4:	f003 020f 	and.w	r2, r3, #15
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d901      	bls.n	80035f4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e050      	b.n	8003696 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	da0f      	bge.n	800361c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035fc:	78fb      	ldrb	r3, [r7, #3]
 80035fe:	f003 020f 	and.w	r2, r3, #15
 8003602:	4613      	mov	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	1a9b      	subs	r3, r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	3338      	adds	r3, #56	; 0x38
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	4413      	add	r3, r2
 8003610:	3304      	adds	r3, #4
 8003612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2201      	movs	r2, #1
 8003618:	705a      	strb	r2, [r3, #1]
 800361a:	e00d      	b.n	8003638 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800361c:	78fa      	ldrb	r2, [r7, #3]
 800361e:	4613      	mov	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	1a9b      	subs	r3, r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	4413      	add	r3, r2
 800362e:	3304      	adds	r3, #4
 8003630:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2201      	movs	r2, #1
 800363c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	b2da      	uxtb	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_PCD_EP_SetStall+0x82>
 8003654:	2302      	movs	r3, #2
 8003656:	e01e      	b.n	8003696 <HAL_PCD_EP_SetStall+0xc0>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68f9      	ldr	r1, [r7, #12]
 8003666:	4618      	mov	r0, r3
 8003668:	f002 feab 	bl	80063c2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800366c:	78fb      	ldrb	r3, [r7, #3]
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10a      	bne.n	800368c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	b2d9      	uxtb	r1, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003686:	461a      	mov	r2, r3
 8003688:	f003 f89c 	bl	80067c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	460b      	mov	r3, r1
 80036a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80036aa:	78fb      	ldrb	r3, [r7, #3]
 80036ac:	f003 020f 	and.w	r2, r3, #15
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d901      	bls.n	80036bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e042      	b.n	8003742 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	da0f      	bge.n	80036e4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	f003 020f 	and.w	r2, r3, #15
 80036ca:	4613      	mov	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	1a9b      	subs	r3, r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	3338      	adds	r3, #56	; 0x38
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	4413      	add	r3, r2
 80036d8:	3304      	adds	r3, #4
 80036da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2201      	movs	r2, #1
 80036e0:	705a      	strb	r2, [r3, #1]
 80036e2:	e00f      	b.n	8003704 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036e4:	78fb      	ldrb	r3, [r7, #3]
 80036e6:	f003 020f 	and.w	r2, r3, #15
 80036ea:	4613      	mov	r3, r2
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	1a9b      	subs	r3, r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	4413      	add	r3, r2
 80036fa:	3304      	adds	r3, #4
 80036fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	b2da      	uxtb	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_PCD_EP_ClrStall+0x86>
 8003720:	2302      	movs	r3, #2
 8003722:	e00e      	b.n	8003742 <HAL_PCD_EP_ClrStall+0xa4>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68f9      	ldr	r1, [r7, #12]
 8003732:	4618      	mov	r0, r3
 8003734:	f002 feb3 	bl	800649e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b08a      	sub	sp, #40	; 0x28
 800374e:	af02      	add	r7, sp, #8
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	4613      	mov	r3, r2
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	1a9b      	subs	r3, r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	3338      	adds	r3, #56	; 0x38
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	4413      	add	r3, r2
 800376e:	3304      	adds	r3, #4
 8003770:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	699a      	ldr	r2, [r3, #24]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	429a      	cmp	r2, r3
 800377c:	d901      	bls.n	8003782 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e06c      	b.n	800385c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	695a      	ldr	r2, [r3, #20]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	69fa      	ldr	r2, [r7, #28]
 8003794:	429a      	cmp	r2, r3
 8003796:	d902      	bls.n	800379e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	3303      	adds	r3, #3
 80037a2:	089b      	lsrs	r3, r3, #2
 80037a4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037a6:	e02b      	b.n	8003800 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	695a      	ldr	r2, [r3, #20]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	69fa      	ldr	r2, [r7, #28]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d902      	bls.n	80037c4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	3303      	adds	r3, #3
 80037c8:	089b      	lsrs	r3, r3, #2
 80037ca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	68d9      	ldr	r1, [r3, #12]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	4603      	mov	r3, r0
 80037e2:	6978      	ldr	r0, [r7, #20]
 80037e4:	f002 fd57 	bl	8006296 <USB_WritePacket>

    ep->xfer_buff  += len;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	441a      	add	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	699a      	ldr	r2, [r3, #24]
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	441a      	add	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	b29b      	uxth	r3, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	429a      	cmp	r2, r3
 8003814:	d809      	bhi.n	800382a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	699a      	ldr	r2, [r3, #24]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800381e:	429a      	cmp	r2, r3
 8003820:	d203      	bcs.n	800382a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1be      	bne.n	80037a8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	695a      	ldr	r2, [r3, #20]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	429a      	cmp	r2, r3
 8003834:	d811      	bhi.n	800385a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	f003 030f 	and.w	r3, r3, #15
 800383c:	2201      	movs	r2, #1
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800384a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	43db      	mvns	r3, r3
 8003850:	6939      	ldr	r1, [r7, #16]
 8003852:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003856:	4013      	ands	r3, r2
 8003858:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3720      	adds	r7, #32
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	333c      	adds	r3, #60	; 0x3c
 800387c:	3304      	adds	r3, #4
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4413      	add	r3, r2
 800388a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	2b01      	cmp	r3, #1
 8003898:	f040 80a0 	bne.w	80039dc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d015      	beq.n	80038d2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4a72      	ldr	r2, [pc, #456]	; (8003a74 <PCD_EP_OutXfrComplete_int+0x210>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	f240 80dd 	bls.w	8003a6a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 80d7 	beq.w	8003a6a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c8:	461a      	mov	r2, r3
 80038ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ce:	6093      	str	r3, [r2, #8]
 80038d0:	e0cb      	b.n	8003a6a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d009      	beq.n	80038f0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e8:	461a      	mov	r2, r3
 80038ea:	2320      	movs	r3, #32
 80038ec:	6093      	str	r3, [r2, #8]
 80038ee:	e0bc      	b.n	8003a6a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f040 80b7 	bne.w	8003a6a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4a5d      	ldr	r2, [pc, #372]	; (8003a74 <PCD_EP_OutXfrComplete_int+0x210>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d90f      	bls.n	8003924 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4413      	add	r3, r2
 8003916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800391a:	461a      	mov	r2, r3
 800391c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003920:	6093      	str	r3, [r2, #8]
 8003922:	e0a2      	b.n	8003a6a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	4613      	mov	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	1a9b      	subs	r3, r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003936:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	0159      	lsls	r1, r3, #5
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	440b      	add	r3, r1
 8003940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800394a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	4613      	mov	r3, r2
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	1a9b      	subs	r3, r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4403      	add	r3, r0
 800395a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800395e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	4613      	mov	r3, r2
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	1a9b      	subs	r3, r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003972:	6819      	ldr	r1, [r3, #0]
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	4613      	mov	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	1a9b      	subs	r3, r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4403      	add	r3, r0
 8003982:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4419      	add	r1, r3
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	4613      	mov	r3, r2
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	1a9b      	subs	r3, r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4403      	add	r3, r0
 8003998:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800399c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d114      	bne.n	80039ce <PCD_EP_OutXfrComplete_int+0x16a>
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	4613      	mov	r3, r2
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	1a9b      	subs	r3, r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d108      	bne.n	80039ce <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039c6:	461a      	mov	r2, r3
 80039c8:	2101      	movs	r1, #1
 80039ca:	f002 fefb 	bl	80067c4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	4619      	mov	r1, r3
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f004 fee7 	bl	80087a8 <HAL_PCD_DataOutStageCallback>
 80039da:	e046      	b.n	8003a6a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4a26      	ldr	r2, [pc, #152]	; (8003a78 <PCD_EP_OutXfrComplete_int+0x214>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d124      	bne.n	8003a2e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039fa:	461a      	mov	r2, r3
 80039fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a00:	6093      	str	r3, [r2, #8]
 8003a02:	e032      	b.n	8003a6a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f003 0320 	and.w	r3, r3, #32
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d008      	beq.n	8003a20 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	2320      	movs	r3, #32
 8003a1e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	4619      	mov	r1, r3
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f004 febe 	bl	80087a8 <HAL_PCD_DataOutStageCallback>
 8003a2c:	e01d      	b.n	8003a6a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d114      	bne.n	8003a5e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	1a9b      	subs	r3, r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d108      	bne.n	8003a5e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6818      	ldr	r0, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a56:	461a      	mov	r2, r3
 8003a58:	2100      	movs	r1, #0
 8003a5a:	f002 feb3 	bl	80067c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	4619      	mov	r1, r3
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f004 fe9f 	bl	80087a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	4f54300a 	.word	0x4f54300a
 8003a78:	4f54310a 	.word	0x4f54310a

08003a7c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	333c      	adds	r3, #60	; 0x3c
 8003a94:	3304      	adds	r3, #4
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4a15      	ldr	r2, [pc, #84]	; (8003b04 <PCD_EP_OutSetupPacket_int+0x88>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d90e      	bls.n	8003ad0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d009      	beq.n	8003ad0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac8:	461a      	mov	r2, r3
 8003aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ace:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f004 fe57 	bl	8008784 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4a0a      	ldr	r2, [pc, #40]	; (8003b04 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d90c      	bls.n	8003af8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d108      	bne.n	8003af8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003af0:	461a      	mov	r2, r3
 8003af2:	2101      	movs	r1, #1
 8003af4:	f002 fe66 	bl	80067c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	4f54300a 	.word	0x4f54300a

08003b08 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	70fb      	strb	r3, [r7, #3]
 8003b14:	4613      	mov	r3, r2
 8003b16:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003b20:	78fb      	ldrb	r3, [r7, #3]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d107      	bne.n	8003b36 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b26:	883b      	ldrh	r3, [r7, #0]
 8003b28:	0419      	lsls	r1, r3, #16
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	629a      	str	r2, [r3, #40]	; 0x28
 8003b34:	e028      	b.n	8003b88 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3c:	0c1b      	lsrs	r3, r3, #16
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	4413      	add	r3, r2
 8003b42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b44:	2300      	movs	r3, #0
 8003b46:	73fb      	strb	r3, [r7, #15]
 8003b48:	e00d      	b.n	8003b66 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	3340      	adds	r3, #64	; 0x40
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	0c1b      	lsrs	r3, r3, #16
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
 8003b62:	3301      	adds	r3, #1
 8003b64:	73fb      	strb	r3, [r7, #15]
 8003b66:	7bfa      	ldrb	r2, [r7, #15]
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d3ec      	bcc.n	8003b4a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b70:	883b      	ldrh	r3, [r7, #0]
 8003b72:	0418      	lsls	r0, r3, #16
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6819      	ldr	r1, [r3, #0]
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	4302      	orrs	r2, r0
 8003b80:	3340      	adds	r3, #64	; 0x40
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	887a      	ldrh	r2, [r7, #2]
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e264      	b.n	80040ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d075      	beq.n	8003cda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bee:	4ba3      	ldr	r3, [pc, #652]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d00c      	beq.n	8003c14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bfa:	4ba0      	ldr	r3, [pc, #640]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d112      	bne.n	8003c2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c06:	4b9d      	ldr	r3, [pc, #628]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c12:	d10b      	bne.n	8003c2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c14:	4b99      	ldr	r3, [pc, #612]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d05b      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x108>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d157      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e23f      	b.n	80040ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c34:	d106      	bne.n	8003c44 <HAL_RCC_OscConfig+0x74>
 8003c36:	4b91      	ldr	r3, [pc, #580]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a90      	ldr	r2, [pc, #576]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	e01d      	b.n	8003c80 <HAL_RCC_OscConfig+0xb0>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c4c:	d10c      	bne.n	8003c68 <HAL_RCC_OscConfig+0x98>
 8003c4e:	4b8b      	ldr	r3, [pc, #556]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a8a      	ldr	r2, [pc, #552]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4b88      	ldr	r3, [pc, #544]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a87      	ldr	r2, [pc, #540]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e00b      	b.n	8003c80 <HAL_RCC_OscConfig+0xb0>
 8003c68:	4b84      	ldr	r3, [pc, #528]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a83      	ldr	r2, [pc, #524]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	4b81      	ldr	r3, [pc, #516]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a80      	ldr	r2, [pc, #512]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d013      	beq.n	8003cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c88:	f7fd fbfa 	bl	8001480 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c90:	f7fd fbf6 	bl	8001480 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b64      	cmp	r3, #100	; 0x64
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e204      	b.n	80040ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca2:	4b76      	ldr	r3, [pc, #472]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCC_OscConfig+0xc0>
 8003cae:	e014      	b.n	8003cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb0:	f7fd fbe6 	bl	8001480 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cb8:	f7fd fbe2 	bl	8001480 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b64      	cmp	r3, #100	; 0x64
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e1f0      	b.n	80040ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cca:	4b6c      	ldr	r3, [pc, #432]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0xe8>
 8003cd6:	e000      	b.n	8003cda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d063      	beq.n	8003dae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ce6:	4b65      	ldr	r3, [pc, #404]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 030c 	and.w	r3, r3, #12
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00b      	beq.n	8003d0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cf2:	4b62      	ldr	r3, [pc, #392]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d11c      	bne.n	8003d38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cfe:	4b5f      	ldr	r3, [pc, #380]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d116      	bne.n	8003d38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d0a:	4b5c      	ldr	r3, [pc, #368]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d005      	beq.n	8003d22 <HAL_RCC_OscConfig+0x152>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d001      	beq.n	8003d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e1c4      	b.n	80040ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d22:	4b56      	ldr	r3, [pc, #344]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	4952      	ldr	r1, [pc, #328]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d36:	e03a      	b.n	8003dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d020      	beq.n	8003d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d40:	4b4f      	ldr	r3, [pc, #316]	; (8003e80 <HAL_RCC_OscConfig+0x2b0>)
 8003d42:	2201      	movs	r2, #1
 8003d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d46:	f7fd fb9b 	bl	8001480 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d4e:	f7fd fb97 	bl	8001480 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e1a5      	b.n	80040ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d60:	4b46      	ldr	r3, [pc, #280]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0f0      	beq.n	8003d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d6c:	4b43      	ldr	r3, [pc, #268]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	4940      	ldr	r1, [pc, #256]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	600b      	str	r3, [r1, #0]
 8003d80:	e015      	b.n	8003dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d82:	4b3f      	ldr	r3, [pc, #252]	; (8003e80 <HAL_RCC_OscConfig+0x2b0>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d88:	f7fd fb7a 	bl	8001480 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d90:	f7fd fb76 	bl	8001480 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e184      	b.n	80040ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da2:	4b36      	ldr	r3, [pc, #216]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d030      	beq.n	8003e1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d016      	beq.n	8003df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dc2:	4b30      	ldr	r3, [pc, #192]	; (8003e84 <HAL_RCC_OscConfig+0x2b4>)
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc8:	f7fd fb5a 	bl	8001480 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dd0:	f7fd fb56 	bl	8001480 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e164      	b.n	80040ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de2:	4b26      	ldr	r3, [pc, #152]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x200>
 8003dee:	e015      	b.n	8003e1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df0:	4b24      	ldr	r3, [pc, #144]	; (8003e84 <HAL_RCC_OscConfig+0x2b4>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df6:	f7fd fb43 	bl	8001480 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dfc:	e008      	b.n	8003e10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dfe:	f7fd fb3f 	bl	8001480 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e14d      	b.n	80040ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e10:	4b1a      	ldr	r3, [pc, #104]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1f0      	bne.n	8003dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 80a0 	beq.w	8003f6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e2e:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10f      	bne.n	8003e5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60bb      	str	r3, [r7, #8]
 8003e3e:	4b0f      	ldr	r3, [pc, #60]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	4a0e      	ldr	r2, [pc, #56]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e48:	6413      	str	r3, [r2, #64]	; 0x40
 8003e4a:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <HAL_RCC_OscConfig+0x2ac>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e52:	60bb      	str	r3, [r7, #8]
 8003e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e56:	2301      	movs	r3, #1
 8003e58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5a:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <HAL_RCC_OscConfig+0x2b8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d121      	bne.n	8003eaa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e66:	4b08      	ldr	r3, [pc, #32]	; (8003e88 <HAL_RCC_OscConfig+0x2b8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a07      	ldr	r2, [pc, #28]	; (8003e88 <HAL_RCC_OscConfig+0x2b8>)
 8003e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e72:	f7fd fb05 	bl	8001480 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e78:	e011      	b.n	8003e9e <HAL_RCC_OscConfig+0x2ce>
 8003e7a:	bf00      	nop
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	42470000 	.word	0x42470000
 8003e84:	42470e80 	.word	0x42470e80
 8003e88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e8c:	f7fd faf8 	bl	8001480 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e106      	b.n	80040ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9e:	4b85      	ldr	r3, [pc, #532]	; (80040b4 <HAL_RCC_OscConfig+0x4e4>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0f0      	beq.n	8003e8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d106      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x2f0>
 8003eb2:	4b81      	ldr	r3, [pc, #516]	; (80040b8 <HAL_RCC_OscConfig+0x4e8>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	4a80      	ldr	r2, [pc, #512]	; (80040b8 <HAL_RCC_OscConfig+0x4e8>)
 8003eb8:	f043 0301 	orr.w	r3, r3, #1
 8003ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ebe:	e01c      	b.n	8003efa <HAL_RCC_OscConfig+0x32a>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	2b05      	cmp	r3, #5
 8003ec6:	d10c      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x312>
 8003ec8:	4b7b      	ldr	r3, [pc, #492]	; (80040b8 <HAL_RCC_OscConfig+0x4e8>)
 8003eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ecc:	4a7a      	ldr	r2, [pc, #488]	; (80040b8 <HAL_RCC_OscConfig+0x4e8>)
 8003ece:	f043 0304 	orr.w	r3, r3, #4
 8003ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed4:	4b78      	ldr	r3, [pc, #480]	; (80040b8 <HAL_RCC_OscConfig+0x4e8>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	4a77      	ldr	r2, [pc, #476]	; (80040b8 <HAL_RCC_OscConfig+0x4e8>)
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee0:	e00b      	b.n	8003efa <HAL_RCC_OscConfig+0x32a>
 8003ee2:	4b75      	ldr	r3, [pc, #468]	; (80040b8 <HAL_RCC_OscConfig+0x4e8>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee6:	4a74      	ldr	r2, [pc, #464]	; (80040b8 <HAL_RCC_OscConfig+0x4e8>)
 8003ee8:	f023 0301 	bic.w	r3, r3, #1
 8003eec:	6713      	str	r3, [r2, #112]	; 0x70
 8003eee:	4b72      	ldr	r3, [pc, #456]	; (80040b8 <HAL_RCC_OscConfig+0x4e8>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	4a71      	ldr	r2, [pc, #452]	; (80040b8 <HAL_RCC_OscConfig+0x4e8>)
 8003ef4:	f023 0304 	bic.w	r3, r3, #4
 8003ef8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d015      	beq.n	8003f2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f02:	f7fd fabd 	bl	8001480 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f08:	e00a      	b.n	8003f20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f0a:	f7fd fab9 	bl	8001480 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e0c5      	b.n	80040ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f20:	4b65      	ldr	r3, [pc, #404]	; (80040b8 <HAL_RCC_OscConfig+0x4e8>)
 8003f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0ee      	beq.n	8003f0a <HAL_RCC_OscConfig+0x33a>
 8003f2c:	e014      	b.n	8003f58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f2e:	f7fd faa7 	bl	8001480 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f34:	e00a      	b.n	8003f4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f36:	f7fd faa3 	bl	8001480 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e0af      	b.n	80040ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f4c:	4b5a      	ldr	r3, [pc, #360]	; (80040b8 <HAL_RCC_OscConfig+0x4e8>)
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1ee      	bne.n	8003f36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f58:	7dfb      	ldrb	r3, [r7, #23]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d105      	bne.n	8003f6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f5e:	4b56      	ldr	r3, [pc, #344]	; (80040b8 <HAL_RCC_OscConfig+0x4e8>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	4a55      	ldr	r2, [pc, #340]	; (80040b8 <HAL_RCC_OscConfig+0x4e8>)
 8003f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 809b 	beq.w	80040aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f74:	4b50      	ldr	r3, [pc, #320]	; (80040b8 <HAL_RCC_OscConfig+0x4e8>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 030c 	and.w	r3, r3, #12
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d05c      	beq.n	800403a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d141      	bne.n	800400c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f88:	4b4c      	ldr	r3, [pc, #304]	; (80040bc <HAL_RCC_OscConfig+0x4ec>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8e:	f7fd fa77 	bl	8001480 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f96:	f7fd fa73 	bl	8001480 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e081      	b.n	80040ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa8:	4b43      	ldr	r3, [pc, #268]	; (80040b8 <HAL_RCC_OscConfig+0x4e8>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1f0      	bne.n	8003f96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69da      	ldr	r2, [r3, #28]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	019b      	lsls	r3, r3, #6
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fca:	085b      	lsrs	r3, r3, #1
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	041b      	lsls	r3, r3, #16
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd6:	061b      	lsls	r3, r3, #24
 8003fd8:	4937      	ldr	r1, [pc, #220]	; (80040b8 <HAL_RCC_OscConfig+0x4e8>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fde:	4b37      	ldr	r3, [pc, #220]	; (80040bc <HAL_RCC_OscConfig+0x4ec>)
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe4:	f7fd fa4c 	bl	8001480 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fec:	f7fd fa48 	bl	8001480 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e056      	b.n	80040ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffe:	4b2e      	ldr	r3, [pc, #184]	; (80040b8 <HAL_RCC_OscConfig+0x4e8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0f0      	beq.n	8003fec <HAL_RCC_OscConfig+0x41c>
 800400a:	e04e      	b.n	80040aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400c:	4b2b      	ldr	r3, [pc, #172]	; (80040bc <HAL_RCC_OscConfig+0x4ec>)
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004012:	f7fd fa35 	bl	8001480 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800401a:	f7fd fa31 	bl	8001480 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e03f      	b.n	80040ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402c:	4b22      	ldr	r3, [pc, #136]	; (80040b8 <HAL_RCC_OscConfig+0x4e8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1f0      	bne.n	800401a <HAL_RCC_OscConfig+0x44a>
 8004038:	e037      	b.n	80040aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d101      	bne.n	8004046 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e032      	b.n	80040ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004046:	4b1c      	ldr	r3, [pc, #112]	; (80040b8 <HAL_RCC_OscConfig+0x4e8>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d028      	beq.n	80040a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800405e:	429a      	cmp	r2, r3
 8004060:	d121      	bne.n	80040a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406c:	429a      	cmp	r2, r3
 800406e:	d11a      	bne.n	80040a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004076:	4013      	ands	r3, r2
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800407c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800407e:	4293      	cmp	r3, r2
 8004080:	d111      	bne.n	80040a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	085b      	lsrs	r3, r3, #1
 800408e:	3b01      	subs	r3, #1
 8004090:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004092:	429a      	cmp	r2, r3
 8004094:	d107      	bne.n	80040a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d001      	beq.n	80040aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40007000 	.word	0x40007000
 80040b8:	40023800 	.word	0x40023800
 80040bc:	42470060 	.word	0x42470060

080040c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0cc      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040d4:	4b68      	ldr	r3, [pc, #416]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d90c      	bls.n	80040fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e2:	4b65      	ldr	r3, [pc, #404]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ea:	4b63      	ldr	r3, [pc, #396]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d001      	beq.n	80040fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0b8      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d020      	beq.n	800414a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004114:	4b59      	ldr	r3, [pc, #356]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	4a58      	ldr	r2, [pc, #352]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800411e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800412c:	4b53      	ldr	r3, [pc, #332]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4a52      	ldr	r2, [pc, #328]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004136:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004138:	4b50      	ldr	r3, [pc, #320]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	494d      	ldr	r1, [pc, #308]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	4313      	orrs	r3, r2
 8004148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d044      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d107      	bne.n	800416e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415e:	4b47      	ldr	r3, [pc, #284]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d119      	bne.n	800419e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e07f      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d003      	beq.n	800417e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800417a:	2b03      	cmp	r3, #3
 800417c:	d107      	bne.n	800418e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800417e:	4b3f      	ldr	r3, [pc, #252]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e06f      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418e:	4b3b      	ldr	r3, [pc, #236]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e067      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800419e:	4b37      	ldr	r3, [pc, #220]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f023 0203 	bic.w	r2, r3, #3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4934      	ldr	r1, [pc, #208]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041b0:	f7fd f966 	bl	8001480 <HAL_GetTick>
 80041b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b6:	e00a      	b.n	80041ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b8:	f7fd f962 	bl	8001480 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e04f      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ce:	4b2b      	ldr	r3, [pc, #172]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 020c 	and.w	r2, r3, #12
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	429a      	cmp	r2, r3
 80041de:	d1eb      	bne.n	80041b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041e0:	4b25      	ldr	r3, [pc, #148]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d20c      	bcs.n	8004208 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ee:	4b22      	ldr	r3, [pc, #136]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f6:	4b20      	ldr	r3, [pc, #128]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d001      	beq.n	8004208 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e032      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d008      	beq.n	8004226 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004214:	4b19      	ldr	r3, [pc, #100]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	4916      	ldr	r1, [pc, #88]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	4313      	orrs	r3, r2
 8004224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d009      	beq.n	8004246 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004232:	4b12      	ldr	r3, [pc, #72]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	490e      	ldr	r1, [pc, #56]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004242:	4313      	orrs	r3, r2
 8004244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004246:	f000 f821 	bl	800428c <HAL_RCC_GetSysClockFreq>
 800424a:	4602      	mov	r2, r0
 800424c:	4b0b      	ldr	r3, [pc, #44]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	490a      	ldr	r1, [pc, #40]	; (8004280 <HAL_RCC_ClockConfig+0x1c0>)
 8004258:	5ccb      	ldrb	r3, [r1, r3]
 800425a:	fa22 f303 	lsr.w	r3, r2, r3
 800425e:	4a09      	ldr	r2, [pc, #36]	; (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 8004260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004262:	4b09      	ldr	r3, [pc, #36]	; (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f7fd f8c6 	bl	80013f8 <HAL_InitTick>

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40023c00 	.word	0x40023c00
 800427c:	40023800 	.word	0x40023800
 8004280:	0800a384 	.word	0x0800a384
 8004284:	20000008 	.word	0x20000008
 8004288:	2000000c 	.word	0x2000000c

0800428c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800428c:	b5b0      	push	{r4, r5, r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004292:	2100      	movs	r1, #0
 8004294:	6079      	str	r1, [r7, #4]
 8004296:	2100      	movs	r1, #0
 8004298:	60f9      	str	r1, [r7, #12]
 800429a:	2100      	movs	r1, #0
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800429e:	2100      	movs	r1, #0
 80042a0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042a2:	4952      	ldr	r1, [pc, #328]	; (80043ec <HAL_RCC_GetSysClockFreq+0x160>)
 80042a4:	6889      	ldr	r1, [r1, #8]
 80042a6:	f001 010c 	and.w	r1, r1, #12
 80042aa:	2908      	cmp	r1, #8
 80042ac:	d00d      	beq.n	80042ca <HAL_RCC_GetSysClockFreq+0x3e>
 80042ae:	2908      	cmp	r1, #8
 80042b0:	f200 8094 	bhi.w	80043dc <HAL_RCC_GetSysClockFreq+0x150>
 80042b4:	2900      	cmp	r1, #0
 80042b6:	d002      	beq.n	80042be <HAL_RCC_GetSysClockFreq+0x32>
 80042b8:	2904      	cmp	r1, #4
 80042ba:	d003      	beq.n	80042c4 <HAL_RCC_GetSysClockFreq+0x38>
 80042bc:	e08e      	b.n	80043dc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042be:	4b4c      	ldr	r3, [pc, #304]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80042c0:	60bb      	str	r3, [r7, #8]
       break;
 80042c2:	e08e      	b.n	80043e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042c4:	4b4b      	ldr	r3, [pc, #300]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80042c6:	60bb      	str	r3, [r7, #8]
      break;
 80042c8:	e08b      	b.n	80043e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042ca:	4948      	ldr	r1, [pc, #288]	; (80043ec <HAL_RCC_GetSysClockFreq+0x160>)
 80042cc:	6849      	ldr	r1, [r1, #4]
 80042ce:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80042d2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042d4:	4945      	ldr	r1, [pc, #276]	; (80043ec <HAL_RCC_GetSysClockFreq+0x160>)
 80042d6:	6849      	ldr	r1, [r1, #4]
 80042d8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80042dc:	2900      	cmp	r1, #0
 80042de:	d024      	beq.n	800432a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042e0:	4942      	ldr	r1, [pc, #264]	; (80043ec <HAL_RCC_GetSysClockFreq+0x160>)
 80042e2:	6849      	ldr	r1, [r1, #4]
 80042e4:	0989      	lsrs	r1, r1, #6
 80042e6:	4608      	mov	r0, r1
 80042e8:	f04f 0100 	mov.w	r1, #0
 80042ec:	f240 14ff 	movw	r4, #511	; 0x1ff
 80042f0:	f04f 0500 	mov.w	r5, #0
 80042f4:	ea00 0204 	and.w	r2, r0, r4
 80042f8:	ea01 0305 	and.w	r3, r1, r5
 80042fc:	493d      	ldr	r1, [pc, #244]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80042fe:	fb01 f003 	mul.w	r0, r1, r3
 8004302:	2100      	movs	r1, #0
 8004304:	fb01 f102 	mul.w	r1, r1, r2
 8004308:	1844      	adds	r4, r0, r1
 800430a:	493a      	ldr	r1, [pc, #232]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x168>)
 800430c:	fba2 0101 	umull	r0, r1, r2, r1
 8004310:	1863      	adds	r3, r4, r1
 8004312:	4619      	mov	r1, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	461a      	mov	r2, r3
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	f7fb ffb0 	bl	8000280 <__aeabi_uldivmod>
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	4613      	mov	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	e04a      	b.n	80043c0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800432a:	4b30      	ldr	r3, [pc, #192]	; (80043ec <HAL_RCC_GetSysClockFreq+0x160>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	099b      	lsrs	r3, r3, #6
 8004330:	461a      	mov	r2, r3
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	f240 10ff 	movw	r0, #511	; 0x1ff
 800433a:	f04f 0100 	mov.w	r1, #0
 800433e:	ea02 0400 	and.w	r4, r2, r0
 8004342:	ea03 0501 	and.w	r5, r3, r1
 8004346:	4620      	mov	r0, r4
 8004348:	4629      	mov	r1, r5
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	014b      	lsls	r3, r1, #5
 8004354:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004358:	0142      	lsls	r2, r0, #5
 800435a:	4610      	mov	r0, r2
 800435c:	4619      	mov	r1, r3
 800435e:	1b00      	subs	r0, r0, r4
 8004360:	eb61 0105 	sbc.w	r1, r1, r5
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	018b      	lsls	r3, r1, #6
 800436e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004372:	0182      	lsls	r2, r0, #6
 8004374:	1a12      	subs	r2, r2, r0
 8004376:	eb63 0301 	sbc.w	r3, r3, r1
 800437a:	f04f 0000 	mov.w	r0, #0
 800437e:	f04f 0100 	mov.w	r1, #0
 8004382:	00d9      	lsls	r1, r3, #3
 8004384:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004388:	00d0      	lsls	r0, r2, #3
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	1912      	adds	r2, r2, r4
 8004390:	eb45 0303 	adc.w	r3, r5, r3
 8004394:	f04f 0000 	mov.w	r0, #0
 8004398:	f04f 0100 	mov.w	r1, #0
 800439c:	0299      	lsls	r1, r3, #10
 800439e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043a2:	0290      	lsls	r0, r2, #10
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4610      	mov	r0, r2
 80043aa:	4619      	mov	r1, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	461a      	mov	r2, r3
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	f7fb ff64 	bl	8000280 <__aeabi_uldivmod>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4613      	mov	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043c0:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <HAL_RCC_GetSysClockFreq+0x160>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	0c1b      	lsrs	r3, r3, #16
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	3301      	adds	r3, #1
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d8:	60bb      	str	r3, [r7, #8]
      break;
 80043da:	e002      	b.n	80043e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043dc:	4b04      	ldr	r3, [pc, #16]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80043de:	60bb      	str	r3, [r7, #8]
      break;
 80043e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043e2:	68bb      	ldr	r3, [r7, #8]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bdb0      	pop	{r4, r5, r7, pc}
 80043ec:	40023800 	.word	0x40023800
 80043f0:	00f42400 	.word	0x00f42400
 80043f4:	017d7840 	.word	0x017d7840

080043f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043fc:	4b03      	ldr	r3, [pc, #12]	; (800440c <HAL_RCC_GetHCLKFreq+0x14>)
 80043fe:	681b      	ldr	r3, [r3, #0]
}
 8004400:	4618      	mov	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	20000008 	.word	0x20000008

08004410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004414:	f7ff fff0 	bl	80043f8 <HAL_RCC_GetHCLKFreq>
 8004418:	4602      	mov	r2, r0
 800441a:	4b05      	ldr	r3, [pc, #20]	; (8004430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	0a9b      	lsrs	r3, r3, #10
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	4903      	ldr	r1, [pc, #12]	; (8004434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004426:	5ccb      	ldrb	r3, [r1, r3]
 8004428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800442c:	4618      	mov	r0, r3
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40023800 	.word	0x40023800
 8004434:	0800a394 	.word	0x0800a394

08004438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e041      	b.n	80044ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fc fe12 	bl	8001088 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3304      	adds	r3, #4
 8004474:	4619      	mov	r1, r3
 8004476:	4610      	mov	r0, r2
 8004478:	f000 fb40 	bl	8004afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b082      	sub	sp, #8
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e041      	b.n	800456c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d106      	bne.n	8004502 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f839 	bl	8004574 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2202      	movs	r2, #2
 8004506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	3304      	adds	r3, #4
 8004512:	4619      	mov	r1, r3
 8004514:	4610      	mov	r0, r2
 8004516:	f000 faf1 	bl	8004afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b02      	cmp	r3, #2
 800459c:	d122      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d11b      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0202 	mvn.w	r2, #2
 80045b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fa77 	bl	8004abe <HAL_TIM_IC_CaptureCallback>
 80045d0:	e005      	b.n	80045de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fa69 	bl	8004aaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 fa7a 	bl	8004ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0304 	and.w	r3, r3, #4
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d122      	bne.n	8004638 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	d11b      	bne.n	8004638 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0204 	mvn.w	r2, #4
 8004608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2202      	movs	r2, #2
 800460e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fa4d 	bl	8004abe <HAL_TIM_IC_CaptureCallback>
 8004624:	e005      	b.n	8004632 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 fa3f 	bl	8004aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fa50 	bl	8004ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b08      	cmp	r3, #8
 8004644:	d122      	bne.n	800468c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	2b08      	cmp	r3, #8
 8004652:	d11b      	bne.n	800468c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0208 	mvn.w	r2, #8
 800465c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2204      	movs	r2, #4
 8004662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fa23 	bl	8004abe <HAL_TIM_IC_CaptureCallback>
 8004678:	e005      	b.n	8004686 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 fa15 	bl	8004aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 fa26 	bl	8004ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f003 0310 	and.w	r3, r3, #16
 8004696:	2b10      	cmp	r3, #16
 8004698:	d122      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	2b10      	cmp	r3, #16
 80046a6:	d11b      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f06f 0210 	mvn.w	r2, #16
 80046b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2208      	movs	r2, #8
 80046b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f9f9 	bl	8004abe <HAL_TIM_IC_CaptureCallback>
 80046cc:	e005      	b.n	80046da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f9eb 	bl	8004aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f9fc 	bl	8004ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d10e      	bne.n	800470c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d107      	bne.n	800470c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f06f 0201 	mvn.w	r2, #1
 8004704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7fc fdfa 	bl	8001300 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004716:	2b80      	cmp	r3, #128	; 0x80
 8004718:	d10e      	bne.n	8004738 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004724:	2b80      	cmp	r3, #128	; 0x80
 8004726:	d107      	bne.n	8004738 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fd52 	bl	80051dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004742:	2b40      	cmp	r3, #64	; 0x40
 8004744:	d10e      	bne.n	8004764 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004750:	2b40      	cmp	r3, #64	; 0x40
 8004752:	d107      	bne.n	8004764 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800475c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f9c1 	bl	8004ae6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f003 0320 	and.w	r3, r3, #32
 800476e:	2b20      	cmp	r3, #32
 8004770:	d10e      	bne.n	8004790 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f003 0320 	and.w	r3, r3, #32
 800477c:	2b20      	cmp	r3, #32
 800477e:	d107      	bne.n	8004790 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f06f 0220 	mvn.w	r2, #32
 8004788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 fd1c 	bl	80051c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004790:	bf00      	nop
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d101      	bne.n	80047b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047b2:	2302      	movs	r3, #2
 80047b4:	e0ae      	b.n	8004914 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b0c      	cmp	r3, #12
 80047c2:	f200 809f 	bhi.w	8004904 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80047c6:	a201      	add	r2, pc, #4	; (adr r2, 80047cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047cc:	08004801 	.word	0x08004801
 80047d0:	08004905 	.word	0x08004905
 80047d4:	08004905 	.word	0x08004905
 80047d8:	08004905 	.word	0x08004905
 80047dc:	08004841 	.word	0x08004841
 80047e0:	08004905 	.word	0x08004905
 80047e4:	08004905 	.word	0x08004905
 80047e8:	08004905 	.word	0x08004905
 80047ec:	08004883 	.word	0x08004883
 80047f0:	08004905 	.word	0x08004905
 80047f4:	08004905 	.word	0x08004905
 80047f8:	08004905 	.word	0x08004905
 80047fc:	080048c3 	.word	0x080048c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68b9      	ldr	r1, [r7, #8]
 8004806:	4618      	mov	r0, r3
 8004808:	f000 f9f8 	bl	8004bfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699a      	ldr	r2, [r3, #24]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0208 	orr.w	r2, r2, #8
 800481a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699a      	ldr	r2, [r3, #24]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0204 	bic.w	r2, r2, #4
 800482a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6999      	ldr	r1, [r3, #24]
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	619a      	str	r2, [r3, #24]
      break;
 800483e:	e064      	b.n	800490a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68b9      	ldr	r1, [r7, #8]
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fa3e 	bl	8004cc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699a      	ldr	r2, [r3, #24]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800485a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699a      	ldr	r2, [r3, #24]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800486a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6999      	ldr	r1, [r3, #24]
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	021a      	lsls	r2, r3, #8
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	619a      	str	r2, [r3, #24]
      break;
 8004880:	e043      	b.n	800490a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	4618      	mov	r0, r3
 800488a:	f000 fa89 	bl	8004da0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69da      	ldr	r2, [r3, #28]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f042 0208 	orr.w	r2, r2, #8
 800489c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69da      	ldr	r2, [r3, #28]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0204 	bic.w	r2, r2, #4
 80048ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69d9      	ldr	r1, [r3, #28]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	61da      	str	r2, [r3, #28]
      break;
 80048c0:	e023      	b.n	800490a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68b9      	ldr	r1, [r7, #8]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 fad3 	bl	8004e74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69da      	ldr	r2, [r3, #28]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69da      	ldr	r2, [r3, #28]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	69d9      	ldr	r1, [r3, #28]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	021a      	lsls	r2, r3, #8
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	61da      	str	r2, [r3, #28]
      break;
 8004902:	e002      	b.n	800490a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	75fb      	strb	r3, [r7, #23]
      break;
 8004908:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004912:	7dfb      	ldrb	r3, [r7, #23]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_TIM_ConfigClockSource+0x1c>
 8004934:	2302      	movs	r3, #2
 8004936:	e0b4      	b.n	8004aa2 <HAL_TIM_ConfigClockSource+0x186>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800495e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004970:	d03e      	beq.n	80049f0 <HAL_TIM_ConfigClockSource+0xd4>
 8004972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004976:	f200 8087 	bhi.w	8004a88 <HAL_TIM_ConfigClockSource+0x16c>
 800497a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800497e:	f000 8086 	beq.w	8004a8e <HAL_TIM_ConfigClockSource+0x172>
 8004982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004986:	d87f      	bhi.n	8004a88 <HAL_TIM_ConfigClockSource+0x16c>
 8004988:	2b70      	cmp	r3, #112	; 0x70
 800498a:	d01a      	beq.n	80049c2 <HAL_TIM_ConfigClockSource+0xa6>
 800498c:	2b70      	cmp	r3, #112	; 0x70
 800498e:	d87b      	bhi.n	8004a88 <HAL_TIM_ConfigClockSource+0x16c>
 8004990:	2b60      	cmp	r3, #96	; 0x60
 8004992:	d050      	beq.n	8004a36 <HAL_TIM_ConfigClockSource+0x11a>
 8004994:	2b60      	cmp	r3, #96	; 0x60
 8004996:	d877      	bhi.n	8004a88 <HAL_TIM_ConfigClockSource+0x16c>
 8004998:	2b50      	cmp	r3, #80	; 0x50
 800499a:	d03c      	beq.n	8004a16 <HAL_TIM_ConfigClockSource+0xfa>
 800499c:	2b50      	cmp	r3, #80	; 0x50
 800499e:	d873      	bhi.n	8004a88 <HAL_TIM_ConfigClockSource+0x16c>
 80049a0:	2b40      	cmp	r3, #64	; 0x40
 80049a2:	d058      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x13a>
 80049a4:	2b40      	cmp	r3, #64	; 0x40
 80049a6:	d86f      	bhi.n	8004a88 <HAL_TIM_ConfigClockSource+0x16c>
 80049a8:	2b30      	cmp	r3, #48	; 0x30
 80049aa:	d064      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0x15a>
 80049ac:	2b30      	cmp	r3, #48	; 0x30
 80049ae:	d86b      	bhi.n	8004a88 <HAL_TIM_ConfigClockSource+0x16c>
 80049b0:	2b20      	cmp	r3, #32
 80049b2:	d060      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0x15a>
 80049b4:	2b20      	cmp	r3, #32
 80049b6:	d867      	bhi.n	8004a88 <HAL_TIM_ConfigClockSource+0x16c>
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d05c      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0x15a>
 80049bc:	2b10      	cmp	r3, #16
 80049be:	d05a      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0x15a>
 80049c0:	e062      	b.n	8004a88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6818      	ldr	r0, [r3, #0]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	6899      	ldr	r1, [r3, #8]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f000 fb19 	bl	8005008 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	609a      	str	r2, [r3, #8]
      break;
 80049ee:	e04f      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6818      	ldr	r0, [r3, #0]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	6899      	ldr	r1, [r3, #8]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f000 fb02 	bl	8005008 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a12:	609a      	str	r2, [r3, #8]
      break;
 8004a14:	e03c      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6818      	ldr	r0, [r3, #0]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	6859      	ldr	r1, [r3, #4]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	461a      	mov	r2, r3
 8004a24:	f000 fa76 	bl	8004f14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2150      	movs	r1, #80	; 0x50
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 facf 	bl	8004fd2 <TIM_ITRx_SetConfig>
      break;
 8004a34:	e02c      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	6859      	ldr	r1, [r3, #4]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	461a      	mov	r2, r3
 8004a44:	f000 fa95 	bl	8004f72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2160      	movs	r1, #96	; 0x60
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fabf 	bl	8004fd2 <TIM_ITRx_SetConfig>
      break;
 8004a54:	e01c      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6818      	ldr	r0, [r3, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	6859      	ldr	r1, [r3, #4]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	461a      	mov	r2, r3
 8004a64:	f000 fa56 	bl	8004f14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2140      	movs	r1, #64	; 0x40
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 faaf 	bl	8004fd2 <TIM_ITRx_SetConfig>
      break;
 8004a74:	e00c      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4619      	mov	r1, r3
 8004a80:	4610      	mov	r0, r2
 8004a82:	f000 faa6 	bl	8004fd2 <TIM_ITRx_SetConfig>
      break;
 8004a86:	e003      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a8c:	e000      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
	...

08004afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a34      	ldr	r2, [pc, #208]	; (8004be0 <TIM_Base_SetConfig+0xe4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d00f      	beq.n	8004b34 <TIM_Base_SetConfig+0x38>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b1a:	d00b      	beq.n	8004b34 <TIM_Base_SetConfig+0x38>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a31      	ldr	r2, [pc, #196]	; (8004be4 <TIM_Base_SetConfig+0xe8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d007      	beq.n	8004b34 <TIM_Base_SetConfig+0x38>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a30      	ldr	r2, [pc, #192]	; (8004be8 <TIM_Base_SetConfig+0xec>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d003      	beq.n	8004b34 <TIM_Base_SetConfig+0x38>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a2f      	ldr	r2, [pc, #188]	; (8004bec <TIM_Base_SetConfig+0xf0>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d108      	bne.n	8004b46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a25      	ldr	r2, [pc, #148]	; (8004be0 <TIM_Base_SetConfig+0xe4>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d01b      	beq.n	8004b86 <TIM_Base_SetConfig+0x8a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b54:	d017      	beq.n	8004b86 <TIM_Base_SetConfig+0x8a>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a22      	ldr	r2, [pc, #136]	; (8004be4 <TIM_Base_SetConfig+0xe8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d013      	beq.n	8004b86 <TIM_Base_SetConfig+0x8a>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a21      	ldr	r2, [pc, #132]	; (8004be8 <TIM_Base_SetConfig+0xec>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d00f      	beq.n	8004b86 <TIM_Base_SetConfig+0x8a>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a20      	ldr	r2, [pc, #128]	; (8004bec <TIM_Base_SetConfig+0xf0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d00b      	beq.n	8004b86 <TIM_Base_SetConfig+0x8a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a1f      	ldr	r2, [pc, #124]	; (8004bf0 <TIM_Base_SetConfig+0xf4>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d007      	beq.n	8004b86 <TIM_Base_SetConfig+0x8a>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a1e      	ldr	r2, [pc, #120]	; (8004bf4 <TIM_Base_SetConfig+0xf8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d003      	beq.n	8004b86 <TIM_Base_SetConfig+0x8a>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a1d      	ldr	r2, [pc, #116]	; (8004bf8 <TIM_Base_SetConfig+0xfc>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d108      	bne.n	8004b98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a08      	ldr	r2, [pc, #32]	; (8004be0 <TIM_Base_SetConfig+0xe4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d103      	bne.n	8004bcc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	691a      	ldr	r2, [r3, #16]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	615a      	str	r2, [r3, #20]
}
 8004bd2:	bf00      	nop
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	40010000 	.word	0x40010000
 8004be4:	40000400 	.word	0x40000400
 8004be8:	40000800 	.word	0x40000800
 8004bec:	40000c00 	.word	0x40000c00
 8004bf0:	40014000 	.word	0x40014000
 8004bf4:	40014400 	.word	0x40014400
 8004bf8:	40014800 	.word	0x40014800

08004bfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	f023 0201 	bic.w	r2, r3, #1
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0303 	bic.w	r3, r3, #3
 8004c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f023 0302 	bic.w	r3, r3, #2
 8004c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a1c      	ldr	r2, [pc, #112]	; (8004cc4 <TIM_OC1_SetConfig+0xc8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d10c      	bne.n	8004c72 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f023 0308 	bic.w	r3, r3, #8
 8004c5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f023 0304 	bic.w	r3, r3, #4
 8004c70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a13      	ldr	r2, [pc, #76]	; (8004cc4 <TIM_OC1_SetConfig+0xc8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d111      	bne.n	8004c9e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	621a      	str	r2, [r3, #32]
}
 8004cb8:	bf00      	nop
 8004cba:	371c      	adds	r7, #28
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr
 8004cc4:	40010000 	.word	0x40010000

08004cc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	f023 0210 	bic.w	r2, r3, #16
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	021b      	lsls	r3, r3, #8
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f023 0320 	bic.w	r3, r3, #32
 8004d12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	011b      	lsls	r3, r3, #4
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a1e      	ldr	r2, [pc, #120]	; (8004d9c <TIM_OC2_SetConfig+0xd4>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d10d      	bne.n	8004d44 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a15      	ldr	r2, [pc, #84]	; (8004d9c <TIM_OC2_SetConfig+0xd4>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d113      	bne.n	8004d74 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	621a      	str	r2, [r3, #32]
}
 8004d8e:	bf00      	nop
 8004d90:	371c      	adds	r7, #28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	40010000 	.word	0x40010000

08004da0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0303 	bic.w	r3, r3, #3
 8004dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	021b      	lsls	r3, r3, #8
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a1d      	ldr	r2, [pc, #116]	; (8004e70 <TIM_OC3_SetConfig+0xd0>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d10d      	bne.n	8004e1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	021b      	lsls	r3, r3, #8
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a14      	ldr	r2, [pc, #80]	; (8004e70 <TIM_OC3_SetConfig+0xd0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d113      	bne.n	8004e4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	011b      	lsls	r3, r3, #4
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	621a      	str	r2, [r3, #32]
}
 8004e64:	bf00      	nop
 8004e66:	371c      	adds	r7, #28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	40010000 	.word	0x40010000

08004e74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	031b      	lsls	r3, r3, #12
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a10      	ldr	r2, [pc, #64]	; (8004f10 <TIM_OC4_SetConfig+0x9c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d109      	bne.n	8004ee8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	019b      	lsls	r3, r3, #6
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	621a      	str	r2, [r3, #32]
}
 8004f02:	bf00      	nop
 8004f04:	371c      	adds	r7, #28
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40010000 	.word	0x40010000

08004f14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	f023 0201 	bic.w	r2, r3, #1
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f023 030a 	bic.w	r3, r3, #10
 8004f50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	621a      	str	r2, [r3, #32]
}
 8004f66:	bf00      	nop
 8004f68:	371c      	adds	r7, #28
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b087      	sub	sp, #28
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	60f8      	str	r0, [r7, #12]
 8004f7a:	60b9      	str	r1, [r7, #8]
 8004f7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	f023 0210 	bic.w	r2, r3, #16
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	031b      	lsls	r3, r3, #12
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	621a      	str	r2, [r3, #32]
}
 8004fc6:	bf00      	nop
 8004fc8:	371c      	adds	r7, #28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b085      	sub	sp, #20
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f043 0307 	orr.w	r3, r3, #7
 8004ff4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	609a      	str	r2, [r3, #8]
}
 8004ffc:	bf00      	nop
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
 8005014:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005022:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	021a      	lsls	r2, r3, #8
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	431a      	orrs	r2, r3
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	4313      	orrs	r3, r2
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	4313      	orrs	r3, r2
 8005034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	609a      	str	r2, [r3, #8]
}
 800503c:	bf00      	nop
 800503e:	371c      	adds	r7, #28
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800505c:	2302      	movs	r3, #2
 800505e:	e050      	b.n	8005102 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005086:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a1c      	ldr	r2, [pc, #112]	; (8005110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d018      	beq.n	80050d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ac:	d013      	beq.n	80050d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a18      	ldr	r2, [pc, #96]	; (8005114 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d00e      	beq.n	80050d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a16      	ldr	r2, [pc, #88]	; (8005118 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d009      	beq.n	80050d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a15      	ldr	r2, [pc, #84]	; (800511c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d004      	beq.n	80050d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a13      	ldr	r2, [pc, #76]	; (8005120 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d10c      	bne.n	80050f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	40010000 	.word	0x40010000
 8005114:	40000400 	.word	0x40000400
 8005118:	40000800 	.word	0x40000800
 800511c:	40000c00 	.word	0x40000c00
 8005120:	40014000 	.word	0x40014000

08005124 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005138:	2b01      	cmp	r3, #1
 800513a:	d101      	bne.n	8005140 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800513c:	2302      	movs	r3, #2
 800513e:	e03d      	b.n	80051bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	4313      	orrs	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4313      	orrs	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	4313      	orrs	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3714      	adds	r7, #20
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051f0:	b084      	sub	sp, #16
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b084      	sub	sp, #16
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	f107 001c 	add.w	r0, r7, #28
 80051fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	2b01      	cmp	r3, #1
 8005206:	d122      	bne.n	800524e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800521c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005232:	2b01      	cmp	r3, #1
 8005234:	d105      	bne.n	8005242 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f001 fb1c 	bl	8006880 <USB_CoreReset>
 8005248:	4603      	mov	r3, r0
 800524a:	73fb      	strb	r3, [r7, #15]
 800524c:	e01a      	b.n	8005284 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f001 fb10 	bl	8006880 <USB_CoreReset>
 8005260:	4603      	mov	r3, r0
 8005262:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005266:	2b00      	cmp	r3, #0
 8005268:	d106      	bne.n	8005278 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	639a      	str	r2, [r3, #56]	; 0x38
 8005276:	e005      	b.n	8005284 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005286:	2b01      	cmp	r3, #1
 8005288:	d10b      	bne.n	80052a2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f043 0206 	orr.w	r2, r3, #6
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f043 0220 	orr.w	r2, r3, #32
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052ae:	b004      	add	sp, #16
 80052b0:	4770      	bx	lr
	...

080052b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	4613      	mov	r3, r2
 80052c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d165      	bne.n	8005394 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	4a41      	ldr	r2, [pc, #260]	; (80053d0 <USB_SetTurnaroundTime+0x11c>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d906      	bls.n	80052de <USB_SetTurnaroundTime+0x2a>
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	4a40      	ldr	r2, [pc, #256]	; (80053d4 <USB_SetTurnaroundTime+0x120>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d202      	bcs.n	80052de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80052d8:	230f      	movs	r3, #15
 80052da:	617b      	str	r3, [r7, #20]
 80052dc:	e062      	b.n	80053a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	4a3c      	ldr	r2, [pc, #240]	; (80053d4 <USB_SetTurnaroundTime+0x120>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d306      	bcc.n	80052f4 <USB_SetTurnaroundTime+0x40>
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	4a3b      	ldr	r2, [pc, #236]	; (80053d8 <USB_SetTurnaroundTime+0x124>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d202      	bcs.n	80052f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80052ee:	230e      	movs	r3, #14
 80052f0:	617b      	str	r3, [r7, #20]
 80052f2:	e057      	b.n	80053a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4a38      	ldr	r2, [pc, #224]	; (80053d8 <USB_SetTurnaroundTime+0x124>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d306      	bcc.n	800530a <USB_SetTurnaroundTime+0x56>
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	4a37      	ldr	r2, [pc, #220]	; (80053dc <USB_SetTurnaroundTime+0x128>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d202      	bcs.n	800530a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005304:	230d      	movs	r3, #13
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	e04c      	b.n	80053a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	4a33      	ldr	r2, [pc, #204]	; (80053dc <USB_SetTurnaroundTime+0x128>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d306      	bcc.n	8005320 <USB_SetTurnaroundTime+0x6c>
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	4a32      	ldr	r2, [pc, #200]	; (80053e0 <USB_SetTurnaroundTime+0x12c>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d802      	bhi.n	8005320 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800531a:	230c      	movs	r3, #12
 800531c:	617b      	str	r3, [r7, #20]
 800531e:	e041      	b.n	80053a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4a2f      	ldr	r2, [pc, #188]	; (80053e0 <USB_SetTurnaroundTime+0x12c>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d906      	bls.n	8005336 <USB_SetTurnaroundTime+0x82>
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4a2e      	ldr	r2, [pc, #184]	; (80053e4 <USB_SetTurnaroundTime+0x130>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d802      	bhi.n	8005336 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005330:	230b      	movs	r3, #11
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	e036      	b.n	80053a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	4a2a      	ldr	r2, [pc, #168]	; (80053e4 <USB_SetTurnaroundTime+0x130>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d906      	bls.n	800534c <USB_SetTurnaroundTime+0x98>
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	4a29      	ldr	r2, [pc, #164]	; (80053e8 <USB_SetTurnaroundTime+0x134>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d802      	bhi.n	800534c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005346:	230a      	movs	r3, #10
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	e02b      	b.n	80053a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	4a26      	ldr	r2, [pc, #152]	; (80053e8 <USB_SetTurnaroundTime+0x134>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d906      	bls.n	8005362 <USB_SetTurnaroundTime+0xae>
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4a25      	ldr	r2, [pc, #148]	; (80053ec <USB_SetTurnaroundTime+0x138>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d202      	bcs.n	8005362 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800535c:	2309      	movs	r3, #9
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	e020      	b.n	80053a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	4a21      	ldr	r2, [pc, #132]	; (80053ec <USB_SetTurnaroundTime+0x138>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d306      	bcc.n	8005378 <USB_SetTurnaroundTime+0xc4>
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	4a20      	ldr	r2, [pc, #128]	; (80053f0 <USB_SetTurnaroundTime+0x13c>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d802      	bhi.n	8005378 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005372:	2308      	movs	r3, #8
 8005374:	617b      	str	r3, [r7, #20]
 8005376:	e015      	b.n	80053a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	4a1d      	ldr	r2, [pc, #116]	; (80053f0 <USB_SetTurnaroundTime+0x13c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d906      	bls.n	800538e <USB_SetTurnaroundTime+0xda>
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	4a1c      	ldr	r2, [pc, #112]	; (80053f4 <USB_SetTurnaroundTime+0x140>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d202      	bcs.n	800538e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005388:	2307      	movs	r3, #7
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	e00a      	b.n	80053a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800538e:	2306      	movs	r3, #6
 8005390:	617b      	str	r3, [r7, #20]
 8005392:	e007      	b.n	80053a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005394:	79fb      	ldrb	r3, [r7, #7]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d102      	bne.n	80053a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800539a:	2309      	movs	r3, #9
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	e001      	b.n	80053a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80053a0:	2309      	movs	r3, #9
 80053a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	029b      	lsls	r3, r3, #10
 80053b8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80053bc:	431a      	orrs	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	371c      	adds	r7, #28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	00d8acbf 	.word	0x00d8acbf
 80053d4:	00e4e1c0 	.word	0x00e4e1c0
 80053d8:	00f42400 	.word	0x00f42400
 80053dc:	01067380 	.word	0x01067380
 80053e0:	011a499f 	.word	0x011a499f
 80053e4:	01312cff 	.word	0x01312cff
 80053e8:	014ca43f 	.word	0x014ca43f
 80053ec:	016e3600 	.word	0x016e3600
 80053f0:	01a6ab1f 	.word	0x01a6ab1f
 80053f4:	01e84800 	.word	0x01e84800

080053f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f043 0201 	orr.w	r2, r3, #1
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f023 0201 	bic.w	r2, r3, #1
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005448:	2300      	movs	r3, #0
 800544a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005458:	78fb      	ldrb	r3, [r7, #3]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d115      	bne.n	800548a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800546a:	2001      	movs	r0, #1
 800546c:	f7fc f814 	bl	8001498 <HAL_Delay>
      ms++;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	3301      	adds	r3, #1
 8005474:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f001 f972 	bl	8006760 <USB_GetMode>
 800547c:	4603      	mov	r3, r0
 800547e:	2b01      	cmp	r3, #1
 8005480:	d01e      	beq.n	80054c0 <USB_SetCurrentMode+0x84>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2b31      	cmp	r3, #49	; 0x31
 8005486:	d9f0      	bls.n	800546a <USB_SetCurrentMode+0x2e>
 8005488:	e01a      	b.n	80054c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800548a:	78fb      	ldrb	r3, [r7, #3]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d115      	bne.n	80054bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800549c:	2001      	movs	r0, #1
 800549e:	f7fb fffb 	bl	8001498 <HAL_Delay>
      ms++;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	3301      	adds	r3, #1
 80054a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f001 f959 	bl	8006760 <USB_GetMode>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d005      	beq.n	80054c0 <USB_SetCurrentMode+0x84>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2b31      	cmp	r3, #49	; 0x31
 80054b8:	d9f0      	bls.n	800549c <USB_SetCurrentMode+0x60>
 80054ba:	e001      	b.n	80054c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e005      	b.n	80054cc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b32      	cmp	r3, #50	; 0x32
 80054c4:	d101      	bne.n	80054ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054d4:	b084      	sub	sp, #16
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b086      	sub	sp, #24
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80054e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80054ee:	2300      	movs	r3, #0
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	e009      	b.n	8005508 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	3340      	adds	r3, #64	; 0x40
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	2200      	movs	r2, #0
 8005500:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	3301      	adds	r3, #1
 8005506:	613b      	str	r3, [r7, #16]
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	2b0e      	cmp	r3, #14
 800550c:	d9f2      	bls.n	80054f4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800550e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005510:	2b00      	cmp	r3, #0
 8005512:	d11c      	bne.n	800554e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005522:	f043 0302 	orr.w	r3, r3, #2
 8005526:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005538:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005544:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	639a      	str	r2, [r3, #56]	; 0x38
 800554c:	e00b      	b.n	8005566 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005552:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800556c:	461a      	mov	r2, r3
 800556e:	2300      	movs	r3, #0
 8005570:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005578:	4619      	mov	r1, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005580:	461a      	mov	r2, r3
 8005582:	680b      	ldr	r3, [r1, #0]
 8005584:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005588:	2b01      	cmp	r3, #1
 800558a:	d10c      	bne.n	80055a6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800558c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558e:	2b00      	cmp	r3, #0
 8005590:	d104      	bne.n	800559c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005592:	2100      	movs	r1, #0
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f945 	bl	8005824 <USB_SetDevSpeed>
 800559a:	e008      	b.n	80055ae <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800559c:	2101      	movs	r1, #1
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f940 	bl	8005824 <USB_SetDevSpeed>
 80055a4:	e003      	b.n	80055ae <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80055a6:	2103      	movs	r1, #3
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f93b 	bl	8005824 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80055ae:	2110      	movs	r1, #16
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f8f3 	bl	800579c <USB_FlushTxFifo>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f90f 	bl	80057e4 <USB_FlushRxFifo>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d6:	461a      	mov	r2, r3
 80055d8:	2300      	movs	r3, #0
 80055da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e2:	461a      	mov	r2, r3
 80055e4:	2300      	movs	r3, #0
 80055e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ee:	461a      	mov	r2, r3
 80055f0:	2300      	movs	r3, #0
 80055f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055f4:	2300      	movs	r3, #0
 80055f6:	613b      	str	r3, [r7, #16]
 80055f8:	e043      	b.n	8005682 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4413      	add	r3, r2
 8005602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800560c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005610:	d118      	bne.n	8005644 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10a      	bne.n	800562e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005624:	461a      	mov	r2, r3
 8005626:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800562a:	6013      	str	r3, [r2, #0]
 800562c:	e013      	b.n	8005656 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563a:	461a      	mov	r2, r3
 800563c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	e008      	b.n	8005656 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005650:	461a      	mov	r2, r3
 8005652:	2300      	movs	r3, #0
 8005654:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	4413      	add	r3, r2
 800565e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005662:	461a      	mov	r2, r3
 8005664:	2300      	movs	r3, #0
 8005666:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005674:	461a      	mov	r2, r3
 8005676:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800567a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	3301      	adds	r3, #1
 8005680:	613b      	str	r3, [r7, #16]
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	429a      	cmp	r2, r3
 8005688:	d3b7      	bcc.n	80055fa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800568a:	2300      	movs	r3, #0
 800568c:	613b      	str	r3, [r7, #16]
 800568e:	e043      	b.n	8005718 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4413      	add	r3, r2
 8005698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056a6:	d118      	bne.n	80056da <USB_DevInit+0x206>
    {
      if (i == 0U)
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10a      	bne.n	80056c4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ba:	461a      	mov	r2, r3
 80056bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	e013      	b.n	80056ec <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d0:	461a      	mov	r2, r3
 80056d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	e008      	b.n	80056ec <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e6:	461a      	mov	r2, r3
 80056e8:	2300      	movs	r3, #0
 80056ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f8:	461a      	mov	r2, r3
 80056fa:	2300      	movs	r3, #0
 80056fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4413      	add	r3, r2
 8005706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570a:	461a      	mov	r2, r3
 800570c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005710:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	3301      	adds	r3, #1
 8005716:	613b      	str	r3, [r7, #16]
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	429a      	cmp	r2, r3
 800571e:	d3b7      	bcc.n	8005690 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800572e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005732:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005740:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	2b00      	cmp	r3, #0
 8005746:	d105      	bne.n	8005754 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	f043 0210 	orr.w	r2, r3, #16
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	699a      	ldr	r2, [r3, #24]
 8005758:	4b0f      	ldr	r3, [pc, #60]	; (8005798 <USB_DevInit+0x2c4>)
 800575a:	4313      	orrs	r3, r2
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005762:	2b00      	cmp	r3, #0
 8005764:	d005      	beq.n	8005772 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	f043 0208 	orr.w	r2, r3, #8
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005774:	2b01      	cmp	r3, #1
 8005776:	d107      	bne.n	8005788 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005780:	f043 0304 	orr.w	r3, r3, #4
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005788:	7dfb      	ldrb	r3, [r7, #23]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3718      	adds	r7, #24
 800578e:	46bd      	mov	sp, r7
 8005790:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005794:	b004      	add	sp, #16
 8005796:	4770      	bx	lr
 8005798:	803c3800 	.word	0x803c3800

0800579c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	019b      	lsls	r3, r3, #6
 80057ae:	f043 0220 	orr.w	r2, r3, #32
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	3301      	adds	r3, #1
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	4a08      	ldr	r2, [pc, #32]	; (80057e0 <USB_FlushTxFifo+0x44>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d901      	bls.n	80057c6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e006      	b.n	80057d4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f003 0320 	and.w	r3, r3, #32
 80057ce:	2b20      	cmp	r3, #32
 80057d0:	d0f1      	beq.n	80057b6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	00030d40 	.word	0x00030d40

080057e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2210      	movs	r2, #16
 80057f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	3301      	adds	r3, #1
 80057fa:	60fb      	str	r3, [r7, #12]
 80057fc:	4a08      	ldr	r2, [pc, #32]	; (8005820 <USB_FlushRxFifo+0x3c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d901      	bls.n	8005806 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e006      	b.n	8005814 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f003 0310 	and.w	r3, r3, #16
 800580e:	2b10      	cmp	r3, #16
 8005810:	d0f1      	beq.n	80057f6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	00030d40 	.word	0x00030d40

08005824 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	460b      	mov	r3, r1
 800582e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	78fb      	ldrb	r3, [r7, #3]
 800583e:	68f9      	ldr	r1, [r7, #12]
 8005840:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005844:	4313      	orrs	r3, r2
 8005846:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005856:	b480      	push	{r7}
 8005858:	b087      	sub	sp, #28
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 0306 	and.w	r3, r3, #6
 800586e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d102      	bne.n	800587c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005876:	2300      	movs	r3, #0
 8005878:	75fb      	strb	r3, [r7, #23]
 800587a:	e00a      	b.n	8005892 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2b02      	cmp	r3, #2
 8005880:	d002      	beq.n	8005888 <USB_GetDevSpeed+0x32>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2b06      	cmp	r3, #6
 8005886:	d102      	bne.n	800588e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005888:	2302      	movs	r3, #2
 800588a:	75fb      	strb	r3, [r7, #23]
 800588c:	e001      	b.n	8005892 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800588e:	230f      	movs	r3, #15
 8005890:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005892:	7dfb      	ldrb	r3, [r7, #23]
}
 8005894:	4618      	mov	r0, r3
 8005896:	371c      	adds	r7, #28
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	785b      	ldrb	r3, [r3, #1]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d13a      	bne.n	8005932 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c2:	69da      	ldr	r2, [r3, #28]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	f003 030f 	and.w	r3, r3, #15
 80058cc:	2101      	movs	r1, #1
 80058ce:	fa01 f303 	lsl.w	r3, r1, r3
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	68f9      	ldr	r1, [r7, #12]
 80058d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058da:	4313      	orrs	r3, r2
 80058dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d155      	bne.n	80059a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	78db      	ldrb	r3, [r3, #3]
 800590e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005910:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	059b      	lsls	r3, r3, #22
 8005916:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005918:	4313      	orrs	r3, r2
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	0151      	lsls	r1, r2, #5
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	440a      	add	r2, r1
 8005922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800592a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800592e:	6013      	str	r3, [r2, #0]
 8005930:	e036      	b.n	80059a0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005938:	69da      	ldr	r2, [r3, #28]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	f003 030f 	and.w	r3, r3, #15
 8005942:	2101      	movs	r1, #1
 8005944:	fa01 f303 	lsl.w	r3, r1, r3
 8005948:	041b      	lsls	r3, r3, #16
 800594a:	68f9      	ldr	r1, [r7, #12]
 800594c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005950:	4313      	orrs	r3, r2
 8005952:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d11a      	bne.n	80059a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	78db      	ldrb	r3, [r3, #3]
 8005984:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005986:	430b      	orrs	r3, r1
 8005988:	4313      	orrs	r3, r2
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	0151      	lsls	r1, r2, #5
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	440a      	add	r2, r1
 8005992:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800599a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800599e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
	...

080059b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	785b      	ldrb	r3, [r3, #1]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d161      	bne.n	8005a90 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059e2:	d11f      	bne.n	8005a24 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	0151      	lsls	r1, r2, #5
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	440a      	add	r2, r1
 80059fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a02:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	0151      	lsls	r1, r2, #5
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	440a      	add	r2, r1
 8005a1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	f003 030f 	and.w	r3, r3, #15
 8005a34:	2101      	movs	r1, #1
 8005a36:	fa01 f303 	lsl.w	r3, r1, r3
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	43db      	mvns	r3, r3
 8005a3e:	68f9      	ldr	r1, [r7, #12]
 8005a40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a44:	4013      	ands	r3, r2
 8005a46:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4e:	69da      	ldr	r2, [r3, #28]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	f003 030f 	and.w	r3, r3, #15
 8005a58:	2101      	movs	r1, #1
 8005a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	43db      	mvns	r3, r3
 8005a62:	68f9      	ldr	r1, [r7, #12]
 8005a64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a68:	4013      	ands	r3, r2
 8005a6a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	0159      	lsls	r1, r3, #5
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	440b      	add	r3, r1
 8005a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a86:	4619      	mov	r1, r3
 8005a88:	4b35      	ldr	r3, [pc, #212]	; (8005b60 <USB_DeactivateEndpoint+0x1b0>)
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	600b      	str	r3, [r1, #0]
 8005a8e:	e060      	b.n	8005b52 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aa6:	d11f      	bne.n	8005ae8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	0151      	lsls	r1, r2, #5
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	440a      	add	r2, r1
 8005abe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ac2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ac6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	0151      	lsls	r1, r2, #5
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	440a      	add	r2, r1
 8005ade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ae2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ae6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	f003 030f 	and.w	r3, r3, #15
 8005af8:	2101      	movs	r1, #1
 8005afa:	fa01 f303 	lsl.w	r3, r1, r3
 8005afe:	041b      	lsls	r3, r3, #16
 8005b00:	43db      	mvns	r3, r3
 8005b02:	68f9      	ldr	r1, [r7, #12]
 8005b04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b08:	4013      	ands	r3, r2
 8005b0a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b12:	69da      	ldr	r2, [r3, #28]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	f003 030f 	and.w	r3, r3, #15
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b22:	041b      	lsls	r3, r3, #16
 8005b24:	43db      	mvns	r3, r3
 8005b26:	68f9      	ldr	r1, [r7, #12]
 8005b28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	0159      	lsls	r1, r3, #5
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	440b      	add	r3, r1
 8005b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	4b05      	ldr	r3, [pc, #20]	; (8005b64 <USB_DeactivateEndpoint+0x1b4>)
 8005b4e:	4013      	ands	r3, r2
 8005b50:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	ec337800 	.word	0xec337800
 8005b64:	eff37800 	.word	0xeff37800

08005b68 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08a      	sub	sp, #40	; 0x28
 8005b6c:	af02      	add	r7, sp, #8
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	4613      	mov	r3, r2
 8005b74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	785b      	ldrb	r3, [r3, #1]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	f040 815c 	bne.w	8005e42 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d132      	bne.n	8005bf8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	0151      	lsls	r1, r2, #5
 8005ba4:	69fa      	ldr	r2, [r7, #28]
 8005ba6:	440a      	add	r2, r1
 8005ba8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	0151      	lsls	r1, r2, #5
 8005bc8:	69fa      	ldr	r2, [r7, #28]
 8005bca:	440a      	add	r2, r1
 8005bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	0151      	lsls	r1, r2, #5
 8005be8:	69fa      	ldr	r2, [r7, #28]
 8005bea:	440a      	add	r2, r1
 8005bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf0:	0cdb      	lsrs	r3, r3, #19
 8005bf2:	04db      	lsls	r3, r3, #19
 8005bf4:	6113      	str	r3, [r2, #16]
 8005bf6:	e074      	b.n	8005ce2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	69ba      	ldr	r2, [r7, #24]
 8005c08:	0151      	lsls	r1, r2, #5
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	440a      	add	r2, r1
 8005c0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c12:	0cdb      	lsrs	r3, r3, #19
 8005c14:	04db      	lsls	r3, r3, #19
 8005c16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	0151      	lsls	r1, r2, #5
 8005c2a:	69fa      	ldr	r2, [r7, #28]
 8005c2c:	440a      	add	r2, r1
 8005c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c48:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	6959      	ldr	r1, [r3, #20]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	440b      	add	r3, r1
 8005c54:	1e59      	subs	r1, r3, #1
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c5e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c60:	4b9d      	ldr	r3, [pc, #628]	; (8005ed8 <USB_EPStartXfer+0x370>)
 8005c62:	400b      	ands	r3, r1
 8005c64:	69b9      	ldr	r1, [r7, #24]
 8005c66:	0148      	lsls	r0, r1, #5
 8005c68:	69f9      	ldr	r1, [r7, #28]
 8005c6a:	4401      	add	r1, r0
 8005c6c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c70:	4313      	orrs	r3, r2
 8005c72:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c80:	691a      	ldr	r2, [r3, #16]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c8a:	69b9      	ldr	r1, [r7, #24]
 8005c8c:	0148      	lsls	r0, r1, #5
 8005c8e:	69f9      	ldr	r1, [r7, #28]
 8005c90:	4401      	add	r1, r0
 8005c92:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c96:	4313      	orrs	r3, r2
 8005c98:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	78db      	ldrb	r3, [r3, #3]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d11f      	bne.n	8005ce2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	0151      	lsls	r1, r2, #5
 8005cb4:	69fa      	ldr	r2, [r7, #28]
 8005cb6:	440a      	add	r2, r1
 8005cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cbc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005cc0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	0151      	lsls	r1, r2, #5
 8005cd4:	69fa      	ldr	r2, [r7, #28]
 8005cd6:	440a      	add	r2, r1
 8005cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ce0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005ce2:	79fb      	ldrb	r3, [r7, #7]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d14b      	bne.n	8005d80 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d009      	beq.n	8005d04 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	78db      	ldrb	r3, [r3, #3]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d128      	bne.n	8005d5e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d110      	bne.n	8005d3e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	0151      	lsls	r1, r2, #5
 8005d2e:	69fa      	ldr	r2, [r7, #28]
 8005d30:	440a      	add	r2, r1
 8005d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d3a:	6013      	str	r3, [r2, #0]
 8005d3c:	e00f      	b.n	8005d5e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	0151      	lsls	r1, r2, #5
 8005d50:	69fa      	ldr	r2, [r7, #28]
 8005d52:	440a      	add	r2, r1
 8005d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d5c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	69ba      	ldr	r2, [r7, #24]
 8005d6e:	0151      	lsls	r1, r2, #5
 8005d70:	69fa      	ldr	r2, [r7, #28]
 8005d72:	440a      	add	r2, r1
 8005d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	e12f      	b.n	8005fe0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	0151      	lsls	r1, r2, #5
 8005d92:	69fa      	ldr	r2, [r7, #28]
 8005d94:	440a      	add	r2, r1
 8005d96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d9e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	78db      	ldrb	r3, [r3, #3]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d015      	beq.n	8005dd4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 8117 	beq.w	8005fe0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005dc8:	69f9      	ldr	r1, [r7, #28]
 8005dca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	634b      	str	r3, [r1, #52]	; 0x34
 8005dd2:	e105      	b.n	8005fe0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d110      	bne.n	8005e06 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	0151      	lsls	r1, r2, #5
 8005df6:	69fa      	ldr	r2, [r7, #28]
 8005df8:	440a      	add	r2, r1
 8005dfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dfe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	e00f      	b.n	8005e26 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	0151      	lsls	r1, r2, #5
 8005e18:	69fa      	ldr	r2, [r7, #28]
 8005e1a:	440a      	add	r2, r1
 8005e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e24:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	68d9      	ldr	r1, [r3, #12]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	781a      	ldrb	r2, [r3, #0]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	b298      	uxth	r0, r3
 8005e34:	79fb      	ldrb	r3, [r7, #7]
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	4603      	mov	r3, r0
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f000 fa2b 	bl	8006296 <USB_WritePacket>
 8005e40:	e0ce      	b.n	8005fe0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	0151      	lsls	r1, r2, #5
 8005e54:	69fa      	ldr	r2, [r7, #28]
 8005e56:	440a      	add	r2, r1
 8005e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e5c:	0cdb      	lsrs	r3, r3, #19
 8005e5e:	04db      	lsls	r3, r3, #19
 8005e60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	0151      	lsls	r1, r2, #5
 8005e74:	69fa      	ldr	r2, [r7, #28]
 8005e76:	440a      	add	r2, r1
 8005e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e84:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d126      	bne.n	8005edc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9a:	691a      	ldr	r2, [r3, #16]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ea4:	69b9      	ldr	r1, [r7, #24]
 8005ea6:	0148      	lsls	r0, r1, #5
 8005ea8:	69f9      	ldr	r1, [r7, #28]
 8005eaa:	4401      	add	r1, r0
 8005eac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	0151      	lsls	r1, r2, #5
 8005ec6:	69fa      	ldr	r2, [r7, #28]
 8005ec8:	440a      	add	r2, r1
 8005eca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ece:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ed2:	6113      	str	r3, [r2, #16]
 8005ed4:	e036      	b.n	8005f44 <USB_EPStartXfer+0x3dc>
 8005ed6:	bf00      	nop
 8005ed8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	695a      	ldr	r2, [r3, #20]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	1e5a      	subs	r2, r3, #1
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efe:	691a      	ldr	r2, [r3, #16]
 8005f00:	8afb      	ldrh	r3, [r7, #22]
 8005f02:	04d9      	lsls	r1, r3, #19
 8005f04:	4b39      	ldr	r3, [pc, #228]	; (8005fec <USB_EPStartXfer+0x484>)
 8005f06:	400b      	ands	r3, r1
 8005f08:	69b9      	ldr	r1, [r7, #24]
 8005f0a:	0148      	lsls	r0, r1, #5
 8005f0c:	69f9      	ldr	r1, [r7, #28]
 8005f0e:	4401      	add	r1, r0
 8005f10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f14:	4313      	orrs	r3, r2
 8005f16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f24:	691a      	ldr	r2, [r3, #16]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	8af9      	ldrh	r1, [r7, #22]
 8005f2c:	fb01 f303 	mul.w	r3, r1, r3
 8005f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f34:	69b9      	ldr	r1, [r7, #24]
 8005f36:	0148      	lsls	r0, r1, #5
 8005f38:	69f9      	ldr	r1, [r7, #28]
 8005f3a:	4401      	add	r1, r0
 8005f3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f40:	4313      	orrs	r3, r2
 8005f42:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f44:	79fb      	ldrb	r3, [r7, #7]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d10d      	bne.n	8005f66 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d009      	beq.n	8005f66 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	68d9      	ldr	r1, [r3, #12]
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f62:	460a      	mov	r2, r1
 8005f64:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	78db      	ldrb	r3, [r3, #3]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d128      	bne.n	8005fc0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d110      	bne.n	8005fa0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	0151      	lsls	r1, r2, #5
 8005f90:	69fa      	ldr	r2, [r7, #28]
 8005f92:	440a      	add	r2, r1
 8005f94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f9c:	6013      	str	r3, [r2, #0]
 8005f9e:	e00f      	b.n	8005fc0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	0151      	lsls	r1, r2, #5
 8005fb2:	69fa      	ldr	r2, [r7, #28]
 8005fb4:	440a      	add	r2, r1
 8005fb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fbe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	0151      	lsls	r1, r2, #5
 8005fd2:	69fa      	ldr	r2, [r7, #28]
 8005fd4:	440a      	add	r2, r1
 8005fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3720      	adds	r7, #32
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	1ff80000 	.word	0x1ff80000

08005ff0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	785b      	ldrb	r3, [r3, #1]
 800600c:	2b01      	cmp	r3, #1
 800600e:	f040 80cd 	bne.w	80061ac <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d132      	bne.n	8006080 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	4413      	add	r3, r2
 8006022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	0151      	lsls	r1, r2, #5
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	440a      	add	r2, r1
 8006030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006034:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006038:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800603c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	4413      	add	r3, r2
 8006046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	0151      	lsls	r1, r2, #5
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	440a      	add	r2, r1
 8006054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006058:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800605c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	4413      	add	r3, r2
 8006066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	0151      	lsls	r1, r2, #5
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	440a      	add	r2, r1
 8006074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006078:	0cdb      	lsrs	r3, r3, #19
 800607a:	04db      	lsls	r3, r3, #19
 800607c:	6113      	str	r3, [r2, #16]
 800607e:	e04e      	b.n	800611e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	0151      	lsls	r1, r2, #5
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	440a      	add	r2, r1
 8006096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800609a:	0cdb      	lsrs	r3, r3, #19
 800609c:	04db      	lsls	r3, r3, #19
 800609e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	0151      	lsls	r1, r2, #5
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	440a      	add	r2, r1
 80060b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060c2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	695a      	ldr	r2, [r3, #20]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d903      	bls.n	80060d8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	689a      	ldr	r2, [r3, #8]
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	015a      	lsls	r2, r3, #5
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	4413      	add	r3, r2
 80060e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	0151      	lsls	r1, r2, #5
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	440a      	add	r2, r1
 80060ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006104:	691a      	ldr	r2, [r3, #16]
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800610e:	6939      	ldr	r1, [r7, #16]
 8006110:	0148      	lsls	r0, r1, #5
 8006112:	6979      	ldr	r1, [r7, #20]
 8006114:	4401      	add	r1, r0
 8006116:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800611a:	4313      	orrs	r3, r2
 800611c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800611e:	79fb      	ldrb	r3, [r7, #7]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d11e      	bne.n	8006162 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d009      	beq.n	8006140 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006138:	461a      	mov	r2, r3
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	0151      	lsls	r1, r2, #5
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	440a      	add	r2, r1
 8006156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800615a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800615e:	6013      	str	r3, [r2, #0]
 8006160:	e092      	b.n	8006288 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	4413      	add	r3, r2
 800616a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	0151      	lsls	r1, r2, #5
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	440a      	add	r2, r1
 8006178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800617c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006180:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d07e      	beq.n	8006288 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	f003 030f 	and.w	r3, r3, #15
 800619a:	2101      	movs	r1, #1
 800619c:	fa01 f303 	lsl.w	r3, r1, r3
 80061a0:	6979      	ldr	r1, [r7, #20]
 80061a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061a6:	4313      	orrs	r3, r2
 80061a8:	634b      	str	r3, [r1, #52]	; 0x34
 80061aa:	e06d      	b.n	8006288 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	0151      	lsls	r1, r2, #5
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	440a      	add	r2, r1
 80061c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c6:	0cdb      	lsrs	r3, r3, #19
 80061c8:	04db      	lsls	r3, r3, #19
 80061ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	0151      	lsls	r1, r2, #5
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	440a      	add	r2, r1
 80061e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061ee:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	0151      	lsls	r1, r2, #5
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	440a      	add	r2, r1
 8006216:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800621a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800621e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800622c:	691a      	ldr	r2, [r3, #16]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006236:	6939      	ldr	r1, [r7, #16]
 8006238:	0148      	lsls	r0, r1, #5
 800623a:	6979      	ldr	r1, [r7, #20]
 800623c:	4401      	add	r1, r0
 800623e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006242:	4313      	orrs	r3, r2
 8006244:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006246:	79fb      	ldrb	r3, [r7, #7]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d10d      	bne.n	8006268 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d009      	beq.n	8006268 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	68d9      	ldr	r1, [r3, #12]
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006264:	460a      	mov	r2, r1
 8006266:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	4413      	add	r3, r2
 8006270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	0151      	lsls	r1, r2, #5
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	440a      	add	r2, r1
 800627e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006282:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006286:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	371c      	adds	r7, #28
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006296:	b480      	push	{r7}
 8006298:	b089      	sub	sp, #36	; 0x24
 800629a:	af00      	add	r7, sp, #0
 800629c:	60f8      	str	r0, [r7, #12]
 800629e:	60b9      	str	r1, [r7, #8]
 80062a0:	4611      	mov	r1, r2
 80062a2:	461a      	mov	r2, r3
 80062a4:	460b      	mov	r3, r1
 80062a6:	71fb      	strb	r3, [r7, #7]
 80062a8:	4613      	mov	r3, r2
 80062aa:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80062b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d123      	bne.n	8006304 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80062bc:	88bb      	ldrh	r3, [r7, #4]
 80062be:	3303      	adds	r3, #3
 80062c0:	089b      	lsrs	r3, r3, #2
 80062c2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80062c4:	2300      	movs	r3, #0
 80062c6:	61bb      	str	r3, [r7, #24]
 80062c8:	e018      	b.n	80062fc <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80062ca:	79fb      	ldrb	r3, [r7, #7]
 80062cc:	031a      	lsls	r2, r3, #12
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062d6:	461a      	mov	r2, r3
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6013      	str	r3, [r2, #0]
      pSrc++;
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	3301      	adds	r3, #1
 80062e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	3301      	adds	r3, #1
 80062e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	3301      	adds	r3, #1
 80062ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	3301      	adds	r3, #1
 80062f4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	3301      	adds	r3, #1
 80062fa:	61bb      	str	r3, [r7, #24]
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	429a      	cmp	r2, r3
 8006302:	d3e2      	bcc.n	80062ca <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3724      	adds	r7, #36	; 0x24
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006312:	b480      	push	{r7}
 8006314:	b08b      	sub	sp, #44	; 0x2c
 8006316:	af00      	add	r7, sp, #0
 8006318:	60f8      	str	r0, [r7, #12]
 800631a:	60b9      	str	r1, [r7, #8]
 800631c:	4613      	mov	r3, r2
 800631e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006328:	88fb      	ldrh	r3, [r7, #6]
 800632a:	089b      	lsrs	r3, r3, #2
 800632c:	b29b      	uxth	r3, r3
 800632e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006330:	88fb      	ldrh	r3, [r7, #6]
 8006332:	f003 0303 	and.w	r3, r3, #3
 8006336:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006338:	2300      	movs	r3, #0
 800633a:	623b      	str	r3, [r7, #32]
 800633c:	e014      	b.n	8006368 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006348:	601a      	str	r2, [r3, #0]
    pDest++;
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	3301      	adds	r3, #1
 800634e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	3301      	adds	r3, #1
 8006354:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006358:	3301      	adds	r3, #1
 800635a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	3301      	adds	r3, #1
 8006360:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	3301      	adds	r3, #1
 8006366:	623b      	str	r3, [r7, #32]
 8006368:	6a3a      	ldr	r2, [r7, #32]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	429a      	cmp	r2, r3
 800636e:	d3e6      	bcc.n	800633e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006370:	8bfb      	ldrh	r3, [r7, #30]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d01e      	beq.n	80063b4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006376:	2300      	movs	r3, #0
 8006378:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006380:	461a      	mov	r2, r3
 8006382:	f107 0310 	add.w	r3, r7, #16
 8006386:	6812      	ldr	r2, [r2, #0]
 8006388:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	b2db      	uxtb	r3, r3
 8006390:	00db      	lsls	r3, r3, #3
 8006392:	fa22 f303 	lsr.w	r3, r2, r3
 8006396:	b2da      	uxtb	r2, r3
 8006398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639a:	701a      	strb	r2, [r3, #0]
      i++;
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	3301      	adds	r3, #1
 80063a0:	623b      	str	r3, [r7, #32]
      pDest++;
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	3301      	adds	r3, #1
 80063a6:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80063a8:	8bfb      	ldrh	r3, [r7, #30]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80063ae:	8bfb      	ldrh	r3, [r7, #30]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1ea      	bne.n	800638a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80063b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	372c      	adds	r7, #44	; 0x2c
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b085      	sub	sp, #20
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	785b      	ldrb	r3, [r3, #1]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d12c      	bne.n	8006438 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	db12      	blt.n	8006416 <USB_EPSetStall+0x54>
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00f      	beq.n	8006416 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	0151      	lsls	r1, r2, #5
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	440a      	add	r2, r1
 800640c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006410:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006414:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4413      	add	r3, r2
 800641e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	0151      	lsls	r1, r2, #5
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	440a      	add	r2, r1
 800642c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006430:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006434:	6013      	str	r3, [r2, #0]
 8006436:	e02b      	b.n	8006490 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	db12      	blt.n	8006470 <USB_EPSetStall+0xae>
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00f      	beq.n	8006470 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	0151      	lsls	r1, r2, #5
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	440a      	add	r2, r1
 8006466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800646a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800646e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	0151      	lsls	r1, r2, #5
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	440a      	add	r2, r1
 8006486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800648a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800648e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800649e:	b480      	push	{r7}
 80064a0:	b085      	sub	sp, #20
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
 80064a6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	785b      	ldrb	r3, [r3, #1]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d128      	bne.n	800650c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	0151      	lsls	r1, r2, #5
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	440a      	add	r2, r1
 80064d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	78db      	ldrb	r3, [r3, #3]
 80064de:	2b03      	cmp	r3, #3
 80064e0:	d003      	beq.n	80064ea <USB_EPClearStall+0x4c>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	78db      	ldrb	r3, [r3, #3]
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d138      	bne.n	800655c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	0151      	lsls	r1, r2, #5
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	440a      	add	r2, r1
 8006500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006508:	6013      	str	r3, [r2, #0]
 800650a:	e027      	b.n	800655c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4413      	add	r3, r2
 8006514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	0151      	lsls	r1, r2, #5
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	440a      	add	r2, r1
 8006522:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006526:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800652a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	78db      	ldrb	r3, [r3, #3]
 8006530:	2b03      	cmp	r3, #3
 8006532:	d003      	beq.n	800653c <USB_EPClearStall+0x9e>
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	78db      	ldrb	r3, [r3, #3]
 8006538:	2b02      	cmp	r3, #2
 800653a:	d10f      	bne.n	800655c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4413      	add	r3, r2
 8006544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	0151      	lsls	r1, r2, #5
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	440a      	add	r2, r1
 8006552:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800655a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800656a:	b480      	push	{r7}
 800656c:	b085      	sub	sp, #20
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	460b      	mov	r3, r1
 8006574:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006588:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800658c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	78fb      	ldrb	r3, [r7, #3]
 8006598:	011b      	lsls	r3, r3, #4
 800659a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800659e:	68f9      	ldr	r1, [r7, #12]
 80065a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065a4:	4313      	orrs	r3, r2
 80065a6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b085      	sub	sp, #20
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065d0:	f023 0303 	bic.w	r3, r3, #3
 80065d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065e4:	f023 0302 	bic.w	r3, r3, #2
 80065e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006612:	f023 0303 	bic.w	r3, r3, #3
 8006616:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006626:	f043 0302 	orr.w	r3, r3, #2
 800662a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800663a:	b480      	push	{r7}
 800663c:	b085      	sub	sp, #20
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	4013      	ands	r3, r2
 8006650:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006652:	68fb      	ldr	r3, [r7, #12]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	4013      	ands	r3, r2
 8006682:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	0c1b      	lsrs	r3, r3, #16
}
 8006688:	4618      	mov	r0, r3
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	4013      	ands	r3, r2
 80066b6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	b29b      	uxth	r3, r3
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3714      	adds	r7, #20
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	460b      	mov	r3, r1
 80066d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80066d8:	78fb      	ldrb	r3, [r7, #3]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	4013      	ands	r3, r2
 80066f4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066f6:	68bb      	ldr	r3, [r7, #8]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	460b      	mov	r3, r1
 800670e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006726:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006728:	78fb      	ldrb	r3, [r7, #3]
 800672a:	f003 030f 	and.w	r3, r3, #15
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	fa22 f303 	lsr.w	r3, r2, r3
 8006734:	01db      	lsls	r3, r3, #7
 8006736:	b2db      	uxtb	r3, r3
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	4313      	orrs	r3, r2
 800673c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800673e:	78fb      	ldrb	r3, [r7, #3]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	4413      	add	r3, r2
 8006746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	4013      	ands	r3, r2
 8006750:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006752:	68bb      	ldr	r3, [r7, #8]
}
 8006754:	4618      	mov	r0, r3
 8006756:	371c      	adds	r7, #28
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	f003 0301 	and.w	r3, r3, #1
}
 8006770:	4618      	mov	r0, r3
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006796:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800679a:	f023 0307 	bic.w	r3, r3, #7
 800679e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
	...

080067c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b087      	sub	sp, #28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	460b      	mov	r3, r1
 80067ce:	607a      	str	r2, [r7, #4]
 80067d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	333c      	adds	r3, #60	; 0x3c
 80067da:	3304      	adds	r3, #4
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	4a26      	ldr	r2, [pc, #152]	; (800687c <USB_EP0_OutStart+0xb8>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d90a      	bls.n	80067fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067f8:	d101      	bne.n	80067fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	e037      	b.n	800686e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006804:	461a      	mov	r2, r3
 8006806:	2300      	movs	r3, #0
 8006808:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006818:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800681c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800682c:	f043 0318 	orr.w	r3, r3, #24
 8006830:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006840:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006844:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006846:	7afb      	ldrb	r3, [r7, #11]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d10f      	bne.n	800686c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006852:	461a      	mov	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006866:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800686a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	371c      	adds	r7, #28
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	4f54300a 	.word	0x4f54300a

08006880 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006888:	2300      	movs	r3, #0
 800688a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	3301      	adds	r3, #1
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	4a13      	ldr	r2, [pc, #76]	; (80068e0 <USB_CoreReset+0x60>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d901      	bls.n	800689c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e01a      	b.n	80068d2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	daf3      	bge.n	800688c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	f043 0201 	orr.w	r2, r3, #1
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	3301      	adds	r3, #1
 80068b8:	60fb      	str	r3, [r7, #12]
 80068ba:	4a09      	ldr	r2, [pc, #36]	; (80068e0 <USB_CoreReset+0x60>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d901      	bls.n	80068c4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e006      	b.n	80068d2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d0f1      	beq.n	80068b4 <USB_CoreReset+0x34>

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	00030d40 	.word	0x00030d40

080068e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	460b      	mov	r3, r1
 80068ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80068f0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80068f4:	f002 f9b8 	bl	8008c68 <USBD_static_malloc>
 80068f8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d105      	bne.n	800690c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006908:	2302      	movs	r3, #2
 800690a:	e066      	b.n	80069da <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	7c1b      	ldrb	r3, [r3, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d119      	bne.n	8006950 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800691c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006920:	2202      	movs	r2, #2
 8006922:	2181      	movs	r1, #129	; 0x81
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f002 f87c 	bl	8008a22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006934:	2202      	movs	r2, #2
 8006936:	2101      	movs	r1, #1
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f002 f872 	bl	8008a22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2210      	movs	r2, #16
 800694a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800694e:	e016      	b.n	800697e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006950:	2340      	movs	r3, #64	; 0x40
 8006952:	2202      	movs	r2, #2
 8006954:	2181      	movs	r1, #129	; 0x81
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f002 f863 	bl	8008a22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006962:	2340      	movs	r3, #64	; 0x40
 8006964:	2202      	movs	r2, #2
 8006966:	2101      	movs	r1, #1
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f002 f85a 	bl	8008a22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2210      	movs	r2, #16
 800697a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800697e:	2308      	movs	r3, #8
 8006980:	2203      	movs	r2, #3
 8006982:	2182      	movs	r1, #130	; 0x82
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f002 f84c 	bl	8008a22 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	7c1b      	ldrb	r3, [r3, #16]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d109      	bne.n	80069c8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069be:	2101      	movs	r1, #1
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f002 f91d 	bl	8008c00 <USBD_LL_PrepareReceive>
 80069c6:	e007      	b.n	80069d8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069ce:	2340      	movs	r3, #64	; 0x40
 80069d0:	2101      	movs	r1, #1
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f002 f914 	bl	8008c00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b082      	sub	sp, #8
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	460b      	mov	r3, r1
 80069ec:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80069ee:	2181      	movs	r1, #129	; 0x81
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f002 f83c 	bl	8008a6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80069fc:	2101      	movs	r1, #1
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f002 f835 	bl	8008a6e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006a0c:	2182      	movs	r1, #130	; 0x82
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f002 f82d 	bl	8008a6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00e      	beq.n	8006a4c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f002 f920 	bl	8008c84 <USBD_static_free>
    pdev->pClassData = NULL;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
	...

08006a58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a68:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a72:	2300      	movs	r3, #0
 8006a74:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e0af      	b.n	8006be0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d03f      	beq.n	8006b0c <USBD_CDC_Setup+0xb4>
 8006a8c:	2b20      	cmp	r3, #32
 8006a8e:	f040 809f 	bne.w	8006bd0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	88db      	ldrh	r3, [r3, #6]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d02e      	beq.n	8006af8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	b25b      	sxtb	r3, r3
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	da16      	bge.n	8006ad2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006ab0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	88d2      	ldrh	r2, [r2, #6]
 8006ab6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	88db      	ldrh	r3, [r3, #6]
 8006abc:	2b07      	cmp	r3, #7
 8006abe:	bf28      	it	cs
 8006ac0:	2307      	movcs	r3, #7
 8006ac2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	89fa      	ldrh	r2, [r7, #14]
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f001 fae9 	bl	80080a2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006ad0:	e085      	b.n	8006bde <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	785a      	ldrb	r2, [r3, #1]
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	88db      	ldrh	r3, [r3, #6]
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006ae8:	6939      	ldr	r1, [r7, #16]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	88db      	ldrh	r3, [r3, #6]
 8006aee:	461a      	mov	r2, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f001 fb02 	bl	80080fa <USBD_CtlPrepareRx>
      break;
 8006af6:	e072      	b.n	8006bde <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	7850      	ldrb	r0, [r2, #1]
 8006b04:	2200      	movs	r2, #0
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	4798      	blx	r3
      break;
 8006b0a:	e068      	b.n	8006bde <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	785b      	ldrb	r3, [r3, #1]
 8006b10:	2b0b      	cmp	r3, #11
 8006b12:	d852      	bhi.n	8006bba <USBD_CDC_Setup+0x162>
 8006b14:	a201      	add	r2, pc, #4	; (adr r2, 8006b1c <USBD_CDC_Setup+0xc4>)
 8006b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1a:	bf00      	nop
 8006b1c:	08006b4d 	.word	0x08006b4d
 8006b20:	08006bc9 	.word	0x08006bc9
 8006b24:	08006bbb 	.word	0x08006bbb
 8006b28:	08006bbb 	.word	0x08006bbb
 8006b2c:	08006bbb 	.word	0x08006bbb
 8006b30:	08006bbb 	.word	0x08006bbb
 8006b34:	08006bbb 	.word	0x08006bbb
 8006b38:	08006bbb 	.word	0x08006bbb
 8006b3c:	08006bbb 	.word	0x08006bbb
 8006b40:	08006bbb 	.word	0x08006bbb
 8006b44:	08006b77 	.word	0x08006b77
 8006b48:	08006ba1 	.word	0x08006ba1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	2b03      	cmp	r3, #3
 8006b56:	d107      	bne.n	8006b68 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006b58:	f107 030a 	add.w	r3, r7, #10
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f001 fa9e 	bl	80080a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b66:	e032      	b.n	8006bce <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f001 fa28 	bl	8007fc0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b70:	2303      	movs	r3, #3
 8006b72:	75fb      	strb	r3, [r7, #23]
          break;
 8006b74:	e02b      	b.n	8006bce <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b03      	cmp	r3, #3
 8006b80:	d107      	bne.n	8006b92 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006b82:	f107 030d 	add.w	r3, r7, #13
 8006b86:	2201      	movs	r2, #1
 8006b88:	4619      	mov	r1, r3
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f001 fa89 	bl	80080a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b90:	e01d      	b.n	8006bce <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006b92:	6839      	ldr	r1, [r7, #0]
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f001 fa13 	bl	8007fc0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	75fb      	strb	r3, [r7, #23]
          break;
 8006b9e:	e016      	b.n	8006bce <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b03      	cmp	r3, #3
 8006baa:	d00f      	beq.n	8006bcc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f001 fa06 	bl	8007fc0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006bb8:	e008      	b.n	8006bcc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006bba:	6839      	ldr	r1, [r7, #0]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f001 f9ff 	bl	8007fc0 <USBD_CtlError>
          ret = USBD_FAIL;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	75fb      	strb	r3, [r7, #23]
          break;
 8006bc6:	e002      	b.n	8006bce <USBD_CDC_Setup+0x176>
          break;
 8006bc8:	bf00      	nop
 8006bca:	e008      	b.n	8006bde <USBD_CDC_Setup+0x186>
          break;
 8006bcc:	bf00      	nop
      }
      break;
 8006bce:	e006      	b.n	8006bde <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f001 f9f4 	bl	8007fc0 <USBD_CtlError>
      ret = USBD_FAIL;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	75fb      	strb	r3, [r7, #23]
      break;
 8006bdc:	bf00      	nop
  }

  return (uint8_t)ret;
 8006bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3718      	adds	r7, #24
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006bfa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d101      	bne.n	8006c0a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e04f      	b.n	8006caa <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c10:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006c12:	78fa      	ldrb	r2, [r7, #3]
 8006c14:	6879      	ldr	r1, [r7, #4]
 8006c16:	4613      	mov	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4413      	add	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	440b      	add	r3, r1
 8006c20:	3318      	adds	r3, #24
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d029      	beq.n	8006c7c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006c28:	78fa      	ldrb	r2, [r7, #3]
 8006c2a:	6879      	ldr	r1, [r7, #4]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	440b      	add	r3, r1
 8006c36:	3318      	adds	r3, #24
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	78f9      	ldrb	r1, [r7, #3]
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	460b      	mov	r3, r1
 8006c40:	00db      	lsls	r3, r3, #3
 8006c42:	1a5b      	subs	r3, r3, r1
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4403      	add	r3, r0
 8006c48:	3344      	adds	r3, #68	; 0x44
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006c50:	fb03 f301 	mul.w	r3, r3, r1
 8006c54:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d110      	bne.n	8006c7c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006c5a:	78fa      	ldrb	r2, [r7, #3]
 8006c5c:	6879      	ldr	r1, [r7, #4]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	440b      	add	r3, r1
 8006c68:	3318      	adds	r3, #24
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006c6e:	78f9      	ldrb	r1, [r7, #3]
 8006c70:	2300      	movs	r3, #0
 8006c72:	2200      	movs	r2, #0
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 ffa2 	bl	8008bbe <USBD_LL_Transmit>
 8006c7a:	e015      	b.n	8006ca8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00b      	beq.n	8006ca8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006ca4:	78fa      	ldrb	r2, [r7, #3]
 8006ca6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b084      	sub	sp, #16
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
 8006cba:	460b      	mov	r3, r1
 8006cbc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cc4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e015      	b.n	8006d00 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006cd4:	78fb      	ldrb	r3, [r7, #3]
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f001 ffb2 	bl	8008c42 <USBD_LL_GetRxDataSize>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006cfa:	4611      	mov	r1, r2
 8006cfc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d16:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e01b      	b.n	8006d5a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d015      	beq.n	8006d58 <USBD_CDC_EP0_RxReady+0x50>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006d32:	2bff      	cmp	r3, #255	; 0xff
 8006d34:	d010      	beq.n	8006d58 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006d44:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d4c:	b292      	uxth	r2, r2
 8006d4e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	22ff      	movs	r2, #255	; 0xff
 8006d54:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
	...

08006d64 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2243      	movs	r2, #67	; 0x43
 8006d70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006d72:	4b03      	ldr	r3, [pc, #12]	; (8006d80 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	2000009c 	.word	0x2000009c

08006d84 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2243      	movs	r2, #67	; 0x43
 8006d90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006d92:	4b03      	ldr	r3, [pc, #12]	; (8006da0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	20000058 	.word	0x20000058

08006da4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2243      	movs	r2, #67	; 0x43
 8006db0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006db2:	4b03      	ldr	r3, [pc, #12]	; (8006dc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	200000e0 	.word	0x200000e0

08006dc4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	220a      	movs	r2, #10
 8006dd0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006dd2:	4b03      	ldr	r3, [pc, #12]	; (8006de0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	20000014 	.word	0x20000014

08006de4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e004      	b.n	8006e02 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b087      	sub	sp, #28
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	60f8      	str	r0, [r7, #12]
 8006e16:	60b9      	str	r1, [r7, #8]
 8006e18:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e20:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e008      	b.n	8006e3e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	371c      	adds	r7, #28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b085      	sub	sp, #20
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e5a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d101      	bne.n	8006e66 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e004      	b.n	8006e70 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	683a      	ldr	r2, [r7, #0]
 8006e6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3714      	adds	r7, #20
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e016      	b.n	8006ec8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	7c1b      	ldrb	r3, [r3, #16]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d109      	bne.n	8006eb6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006eac:	2101      	movs	r1, #1
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f001 fea6 	bl	8008c00 <USBD_LL_PrepareReceive>
 8006eb4:	e007      	b.n	8006ec6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ebc:	2340      	movs	r3, #64	; 0x40
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f001 fe9d 	bl	8008c00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	4613      	mov	r3, r2
 8006edc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e01f      	b.n	8006f28 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	79fa      	ldrb	r2, [r7, #7]
 8006f1a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f001 fd19 	bl	8008954 <USBD_LL_Init>
 8006f22:	4603      	mov	r3, r0
 8006f24:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3718      	adds	r7, #24
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e016      	b.n	8006f76 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00b      	beq.n	8006f74 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f64:	f107 020e 	add.w	r2, r7, #14
 8006f68:	4610      	mov	r0, r2
 8006f6a:	4798      	blx	r3
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b082      	sub	sp, #8
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f001 fd30 	bl	80089ec <USBD_LL_Start>
 8006f8c:	4603      	mov	r3, r0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b083      	sub	sp, #12
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d009      	beq.n	8006fda <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	78fa      	ldrb	r2, [r7, #3]
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	4798      	blx	r3
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	460b      	mov	r3, r1
 8006fee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d007      	beq.n	800700a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	78fa      	ldrb	r2, [r7, #3]
 8007004:	4611      	mov	r1, r2
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	4798      	blx	r3
  }

  return USBD_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007024:	6839      	ldr	r1, [r7, #0]
 8007026:	4618      	mov	r0, r3
 8007028:	f000 ff90 	bl	8007f4c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800703a:	461a      	mov	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007048:	f003 031f 	and.w	r3, r3, #31
 800704c:	2b02      	cmp	r3, #2
 800704e:	d01a      	beq.n	8007086 <USBD_LL_SetupStage+0x72>
 8007050:	2b02      	cmp	r3, #2
 8007052:	d822      	bhi.n	800709a <USBD_LL_SetupStage+0x86>
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <USBD_LL_SetupStage+0x4a>
 8007058:	2b01      	cmp	r3, #1
 800705a:	d00a      	beq.n	8007072 <USBD_LL_SetupStage+0x5e>
 800705c:	e01d      	b.n	800709a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fa62 	bl	8007530 <USBD_StdDevReq>
 800706c:	4603      	mov	r3, r0
 800706e:	73fb      	strb	r3, [r7, #15]
      break;
 8007070:	e020      	b.n	80070b4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007078:	4619      	mov	r1, r3
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fac6 	bl	800760c <USBD_StdItfReq>
 8007080:	4603      	mov	r3, r0
 8007082:	73fb      	strb	r3, [r7, #15]
      break;
 8007084:	e016      	b.n	80070b4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800708c:	4619      	mov	r1, r3
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fb05 	bl	800769e <USBD_StdEPReq>
 8007094:	4603      	mov	r3, r0
 8007096:	73fb      	strb	r3, [r7, #15]
      break;
 8007098:	e00c      	b.n	80070b4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80070a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f001 fcff 	bl	8008aac <USBD_LL_StallEP>
 80070ae:	4603      	mov	r3, r0
 80070b0:	73fb      	strb	r3, [r7, #15]
      break;
 80070b2:	bf00      	nop
  }

  return ret;
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b086      	sub	sp, #24
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	60f8      	str	r0, [r7, #12]
 80070c6:	460b      	mov	r3, r1
 80070c8:	607a      	str	r2, [r7, #4]
 80070ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80070cc:	7afb      	ldrb	r3, [r7, #11]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d138      	bne.n	8007144 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80070d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	d14a      	bne.n	800717a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	689a      	ldr	r2, [r3, #8]
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d913      	bls.n	8007118 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	689a      	ldr	r2, [r3, #8]
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	1ad2      	subs	r2, r2, r3
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	68da      	ldr	r2, [r3, #12]
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	4293      	cmp	r3, r2
 8007108:	bf28      	it	cs
 800710a:	4613      	movcs	r3, r2
 800710c:	461a      	mov	r2, r3
 800710e:	6879      	ldr	r1, [r7, #4]
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f001 f80f 	bl	8008134 <USBD_CtlContinueRx>
 8007116:	e030      	b.n	800717a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800711e:	b2db      	uxtb	r3, r3
 8007120:	2b03      	cmp	r3, #3
 8007122:	d10b      	bne.n	800713c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d005      	beq.n	800713c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f001 f80a 	bl	8008156 <USBD_CtlSendStatus>
 8007142:	e01a      	b.n	800717a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b03      	cmp	r3, #3
 800714e:	d114      	bne.n	800717a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00e      	beq.n	800717a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	7afa      	ldrb	r2, [r7, #11]
 8007166:	4611      	mov	r1, r2
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	4798      	blx	r3
 800716c:	4603      	mov	r3, r0
 800716e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007170:	7dfb      	ldrb	r3, [r7, #23]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007176:	7dfb      	ldrb	r3, [r7, #23]
 8007178:	e000      	b.n	800717c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3718      	adds	r7, #24
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	460b      	mov	r3, r1
 800718e:	607a      	str	r2, [r7, #4]
 8007190:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007192:	7afb      	ldrb	r3, [r7, #11]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d16b      	bne.n	8007270 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	3314      	adds	r3, #20
 800719c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d156      	bne.n	8007256 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	689a      	ldr	r2, [r3, #8]
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d914      	bls.n	80071de <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	689a      	ldr	r2, [r3, #8]
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	1ad2      	subs	r2, r2, r3
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	461a      	mov	r2, r3
 80071c8:	6879      	ldr	r1, [r7, #4]
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f000 ff84 	bl	80080d8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071d0:	2300      	movs	r3, #0
 80071d2:	2200      	movs	r2, #0
 80071d4:	2100      	movs	r1, #0
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f001 fd12 	bl	8008c00 <USBD_LL_PrepareReceive>
 80071dc:	e03b      	b.n	8007256 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	68da      	ldr	r2, [r3, #12]
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d11c      	bne.n	8007224 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d316      	bcc.n	8007224 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007200:	429a      	cmp	r2, r3
 8007202:	d20f      	bcs.n	8007224 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007204:	2200      	movs	r2, #0
 8007206:	2100      	movs	r1, #0
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 ff65 	bl	80080d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007216:	2300      	movs	r3, #0
 8007218:	2200      	movs	r2, #0
 800721a:	2100      	movs	r1, #0
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f001 fcef 	bl	8008c00 <USBD_LL_PrepareReceive>
 8007222:	e018      	b.n	8007256 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800722a:	b2db      	uxtb	r3, r3
 800722c:	2b03      	cmp	r3, #3
 800722e:	d10b      	bne.n	8007248 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d005      	beq.n	8007248 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007248:	2180      	movs	r1, #128	; 0x80
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f001 fc2e 	bl	8008aac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 ff93 	bl	800817c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800725c:	2b01      	cmp	r3, #1
 800725e:	d122      	bne.n	80072a6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f7ff fe98 	bl	8006f96 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800726e:	e01a      	b.n	80072a6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b03      	cmp	r3, #3
 800727a:	d114      	bne.n	80072a6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007282:	695b      	ldr	r3, [r3, #20]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00e      	beq.n	80072a6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800728e:	695b      	ldr	r3, [r3, #20]
 8007290:	7afa      	ldrb	r2, [r7, #11]
 8007292:	4611      	mov	r1, r2
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	4798      	blx	r3
 8007298:	4603      	mov	r3, r0
 800729a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800729c:	7dfb      	ldrb	r3, [r7, #23]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80072a2:	7dfb      	ldrb	r3, [r7, #23]
 80072a4:	e000      	b.n	80072a8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3718      	adds	r7, #24
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d101      	bne.n	80072e4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e02f      	b.n	8007344 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00f      	beq.n	800730e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d009      	beq.n	800730e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	6852      	ldr	r2, [r2, #4]
 8007306:	b2d2      	uxtb	r2, r2
 8007308:	4611      	mov	r1, r2
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800730e:	2340      	movs	r3, #64	; 0x40
 8007310:	2200      	movs	r2, #0
 8007312:	2100      	movs	r1, #0
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f001 fb84 	bl	8008a22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2240      	movs	r2, #64	; 0x40
 8007326:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800732a:	2340      	movs	r3, #64	; 0x40
 800732c:	2200      	movs	r2, #0
 800732e:	2180      	movs	r1, #128	; 0x80
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f001 fb76 	bl	8008a22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2240      	movs	r2, #64	; 0x40
 8007340:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	460b      	mov	r3, r1
 8007356:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	78fa      	ldrb	r2, [r7, #3]
 800735c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800737a:	b2da      	uxtb	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2204      	movs	r2, #4
 8007386:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b04      	cmp	r3, #4
 80073aa:	d106      	bne.n	80073ba <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d101      	bne.n	80073de <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80073da:	2303      	movs	r3, #3
 80073dc:	e012      	b.n	8007404 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d10b      	bne.n	8007402 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d005      	beq.n	8007402 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3708      	adds	r7, #8
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	460b      	mov	r3, r1
 8007416:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007422:	2303      	movs	r3, #3
 8007424:	e014      	b.n	8007450 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b03      	cmp	r3, #3
 8007430:	d10d      	bne.n	800744e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d007      	beq.n	800744e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	78fa      	ldrb	r2, [r7, #3]
 8007448:	4611      	mov	r1, r2
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	460b      	mov	r3, r1
 8007462:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800746e:	2303      	movs	r3, #3
 8007470:	e014      	b.n	800749c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b03      	cmp	r3, #3
 800747c:	d10d      	bne.n	800749a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007486:	2b00      	cmp	r3, #0
 8007488:	d007      	beq.n	800749a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007492:	78fa      	ldrb	r2, [r7, #3]
 8007494:	4611      	mov	r1, r2
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b082      	sub	sp, #8
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d009      	beq.n	80074e8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	6852      	ldr	r2, [r2, #4]
 80074e0:	b2d2      	uxtb	r2, r2
 80074e2:	4611      	mov	r1, r2
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	4798      	blx	r3
  }

  return USBD_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b087      	sub	sp, #28
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	3301      	adds	r3, #1
 8007508:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007510:	8a3b      	ldrh	r3, [r7, #16]
 8007512:	021b      	lsls	r3, r3, #8
 8007514:	b21a      	sxth	r2, r3
 8007516:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800751a:	4313      	orrs	r3, r2
 800751c:	b21b      	sxth	r3, r3
 800751e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007520:	89fb      	ldrh	r3, [r7, #14]
}
 8007522:	4618      	mov	r0, r3
 8007524:	371c      	adds	r7, #28
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
	...

08007530 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007546:	2b40      	cmp	r3, #64	; 0x40
 8007548:	d005      	beq.n	8007556 <USBD_StdDevReq+0x26>
 800754a:	2b40      	cmp	r3, #64	; 0x40
 800754c:	d853      	bhi.n	80075f6 <USBD_StdDevReq+0xc6>
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00b      	beq.n	800756a <USBD_StdDevReq+0x3a>
 8007552:	2b20      	cmp	r3, #32
 8007554:	d14f      	bne.n	80075f6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	6839      	ldr	r1, [r7, #0]
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	4798      	blx	r3
 8007564:	4603      	mov	r3, r0
 8007566:	73fb      	strb	r3, [r7, #15]
      break;
 8007568:	e04a      	b.n	8007600 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	785b      	ldrb	r3, [r3, #1]
 800756e:	2b09      	cmp	r3, #9
 8007570:	d83b      	bhi.n	80075ea <USBD_StdDevReq+0xba>
 8007572:	a201      	add	r2, pc, #4	; (adr r2, 8007578 <USBD_StdDevReq+0x48>)
 8007574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007578:	080075cd 	.word	0x080075cd
 800757c:	080075e1 	.word	0x080075e1
 8007580:	080075eb 	.word	0x080075eb
 8007584:	080075d7 	.word	0x080075d7
 8007588:	080075eb 	.word	0x080075eb
 800758c:	080075ab 	.word	0x080075ab
 8007590:	080075a1 	.word	0x080075a1
 8007594:	080075eb 	.word	0x080075eb
 8007598:	080075c3 	.word	0x080075c3
 800759c:	080075b5 	.word	0x080075b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80075a0:	6839      	ldr	r1, [r7, #0]
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f9de 	bl	8007964 <USBD_GetDescriptor>
          break;
 80075a8:	e024      	b.n	80075f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80075aa:	6839      	ldr	r1, [r7, #0]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fb43 	bl	8007c38 <USBD_SetAddress>
          break;
 80075b2:	e01f      	b.n	80075f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fb82 	bl	8007cc0 <USBD_SetConfig>
 80075bc:	4603      	mov	r3, r0
 80075be:	73fb      	strb	r3, [r7, #15]
          break;
 80075c0:	e018      	b.n	80075f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80075c2:	6839      	ldr	r1, [r7, #0]
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 fc21 	bl	8007e0c <USBD_GetConfig>
          break;
 80075ca:	e013      	b.n	80075f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80075cc:	6839      	ldr	r1, [r7, #0]
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fc52 	bl	8007e78 <USBD_GetStatus>
          break;
 80075d4:	e00e      	b.n	80075f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80075d6:	6839      	ldr	r1, [r7, #0]
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fc81 	bl	8007ee0 <USBD_SetFeature>
          break;
 80075de:	e009      	b.n	80075f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80075e0:	6839      	ldr	r1, [r7, #0]
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fc90 	bl	8007f08 <USBD_ClrFeature>
          break;
 80075e8:	e004      	b.n	80075f4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80075ea:	6839      	ldr	r1, [r7, #0]
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fce7 	bl	8007fc0 <USBD_CtlError>
          break;
 80075f2:	bf00      	nop
      }
      break;
 80075f4:	e004      	b.n	8007600 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80075f6:	6839      	ldr	r1, [r7, #0]
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 fce1 	bl	8007fc0 <USBD_CtlError>
      break;
 80075fe:	bf00      	nop
  }

  return ret;
 8007600:	7bfb      	ldrb	r3, [r7, #15]
}
 8007602:	4618      	mov	r0, r3
 8007604:	3710      	adds	r7, #16
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop

0800760c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007622:	2b40      	cmp	r3, #64	; 0x40
 8007624:	d005      	beq.n	8007632 <USBD_StdItfReq+0x26>
 8007626:	2b40      	cmp	r3, #64	; 0x40
 8007628:	d82f      	bhi.n	800768a <USBD_StdItfReq+0x7e>
 800762a:	2b00      	cmp	r3, #0
 800762c:	d001      	beq.n	8007632 <USBD_StdItfReq+0x26>
 800762e:	2b20      	cmp	r3, #32
 8007630:	d12b      	bne.n	800768a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007638:	b2db      	uxtb	r3, r3
 800763a:	3b01      	subs	r3, #1
 800763c:	2b02      	cmp	r3, #2
 800763e:	d81d      	bhi.n	800767c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	889b      	ldrh	r3, [r3, #4]
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b01      	cmp	r3, #1
 8007648:	d813      	bhi.n	8007672 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	6839      	ldr	r1, [r7, #0]
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	4798      	blx	r3
 8007658:	4603      	mov	r3, r0
 800765a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	88db      	ldrh	r3, [r3, #6]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d110      	bne.n	8007686 <USBD_StdItfReq+0x7a>
 8007664:	7bfb      	ldrb	r3, [r7, #15]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10d      	bne.n	8007686 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fd73 	bl	8008156 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007670:	e009      	b.n	8007686 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007672:	6839      	ldr	r1, [r7, #0]
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fca3 	bl	8007fc0 <USBD_CtlError>
          break;
 800767a:	e004      	b.n	8007686 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fc9e 	bl	8007fc0 <USBD_CtlError>
          break;
 8007684:	e000      	b.n	8007688 <USBD_StdItfReq+0x7c>
          break;
 8007686:	bf00      	nop
      }
      break;
 8007688:	e004      	b.n	8007694 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800768a:	6839      	ldr	r1, [r7, #0]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fc97 	bl	8007fc0 <USBD_CtlError>
      break;
 8007692:	bf00      	nop
  }

  return ret;
 8007694:	7bfb      	ldrb	r3, [r7, #15]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b084      	sub	sp, #16
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80076a8:	2300      	movs	r3, #0
 80076aa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	889b      	ldrh	r3, [r3, #4]
 80076b0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076ba:	2b40      	cmp	r3, #64	; 0x40
 80076bc:	d007      	beq.n	80076ce <USBD_StdEPReq+0x30>
 80076be:	2b40      	cmp	r3, #64	; 0x40
 80076c0:	f200 8145 	bhi.w	800794e <USBD_StdEPReq+0x2b0>
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00c      	beq.n	80076e2 <USBD_StdEPReq+0x44>
 80076c8:	2b20      	cmp	r3, #32
 80076ca:	f040 8140 	bne.w	800794e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	6839      	ldr	r1, [r7, #0]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	4798      	blx	r3
 80076dc:	4603      	mov	r3, r0
 80076de:	73fb      	strb	r3, [r7, #15]
      break;
 80076e0:	e13a      	b.n	8007958 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	785b      	ldrb	r3, [r3, #1]
 80076e6:	2b03      	cmp	r3, #3
 80076e8:	d007      	beq.n	80076fa <USBD_StdEPReq+0x5c>
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	f300 8129 	bgt.w	8007942 <USBD_StdEPReq+0x2a4>
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d07f      	beq.n	80077f4 <USBD_StdEPReq+0x156>
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d03c      	beq.n	8007772 <USBD_StdEPReq+0xd4>
 80076f8:	e123      	b.n	8007942 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b02      	cmp	r3, #2
 8007704:	d002      	beq.n	800770c <USBD_StdEPReq+0x6e>
 8007706:	2b03      	cmp	r3, #3
 8007708:	d016      	beq.n	8007738 <USBD_StdEPReq+0x9a>
 800770a:	e02c      	b.n	8007766 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800770c:	7bbb      	ldrb	r3, [r7, #14]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00d      	beq.n	800772e <USBD_StdEPReq+0x90>
 8007712:	7bbb      	ldrb	r3, [r7, #14]
 8007714:	2b80      	cmp	r3, #128	; 0x80
 8007716:	d00a      	beq.n	800772e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007718:	7bbb      	ldrb	r3, [r7, #14]
 800771a:	4619      	mov	r1, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f001 f9c5 	bl	8008aac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007722:	2180      	movs	r1, #128	; 0x80
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f001 f9c1 	bl	8008aac <USBD_LL_StallEP>
 800772a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800772c:	e020      	b.n	8007770 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800772e:	6839      	ldr	r1, [r7, #0]
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fc45 	bl	8007fc0 <USBD_CtlError>
              break;
 8007736:	e01b      	b.n	8007770 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	885b      	ldrh	r3, [r3, #2]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10e      	bne.n	800775e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007740:	7bbb      	ldrb	r3, [r7, #14]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00b      	beq.n	800775e <USBD_StdEPReq+0xc0>
 8007746:	7bbb      	ldrb	r3, [r7, #14]
 8007748:	2b80      	cmp	r3, #128	; 0x80
 800774a:	d008      	beq.n	800775e <USBD_StdEPReq+0xc0>
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	88db      	ldrh	r3, [r3, #6]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d104      	bne.n	800775e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007754:	7bbb      	ldrb	r3, [r7, #14]
 8007756:	4619      	mov	r1, r3
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f001 f9a7 	bl	8008aac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fcf9 	bl	8008156 <USBD_CtlSendStatus>

              break;
 8007764:	e004      	b.n	8007770 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007766:	6839      	ldr	r1, [r7, #0]
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 fc29 	bl	8007fc0 <USBD_CtlError>
              break;
 800776e:	bf00      	nop
          }
          break;
 8007770:	e0ec      	b.n	800794c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b02      	cmp	r3, #2
 800777c:	d002      	beq.n	8007784 <USBD_StdEPReq+0xe6>
 800777e:	2b03      	cmp	r3, #3
 8007780:	d016      	beq.n	80077b0 <USBD_StdEPReq+0x112>
 8007782:	e030      	b.n	80077e6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007784:	7bbb      	ldrb	r3, [r7, #14]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00d      	beq.n	80077a6 <USBD_StdEPReq+0x108>
 800778a:	7bbb      	ldrb	r3, [r7, #14]
 800778c:	2b80      	cmp	r3, #128	; 0x80
 800778e:	d00a      	beq.n	80077a6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007790:	7bbb      	ldrb	r3, [r7, #14]
 8007792:	4619      	mov	r1, r3
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f001 f989 	bl	8008aac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800779a:	2180      	movs	r1, #128	; 0x80
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f001 f985 	bl	8008aac <USBD_LL_StallEP>
 80077a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077a4:	e025      	b.n	80077f2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80077a6:	6839      	ldr	r1, [r7, #0]
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fc09 	bl	8007fc0 <USBD_CtlError>
              break;
 80077ae:	e020      	b.n	80077f2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	885b      	ldrh	r3, [r3, #2]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d11b      	bne.n	80077f0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80077b8:	7bbb      	ldrb	r3, [r7, #14]
 80077ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d004      	beq.n	80077cc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80077c2:	7bbb      	ldrb	r3, [r7, #14]
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f001 f98f 	bl	8008aea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fcc2 	bl	8008156 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	4798      	blx	r3
 80077e0:	4603      	mov	r3, r0
 80077e2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80077e4:	e004      	b.n	80077f0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fbe9 	bl	8007fc0 <USBD_CtlError>
              break;
 80077ee:	e000      	b.n	80077f2 <USBD_StdEPReq+0x154>
              break;
 80077f0:	bf00      	nop
          }
          break;
 80077f2:	e0ab      	b.n	800794c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d002      	beq.n	8007806 <USBD_StdEPReq+0x168>
 8007800:	2b03      	cmp	r3, #3
 8007802:	d032      	beq.n	800786a <USBD_StdEPReq+0x1cc>
 8007804:	e097      	b.n	8007936 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007806:	7bbb      	ldrb	r3, [r7, #14]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d007      	beq.n	800781c <USBD_StdEPReq+0x17e>
 800780c:	7bbb      	ldrb	r3, [r7, #14]
 800780e:	2b80      	cmp	r3, #128	; 0x80
 8007810:	d004      	beq.n	800781c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fbd3 	bl	8007fc0 <USBD_CtlError>
                break;
 800781a:	e091      	b.n	8007940 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800781c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007820:	2b00      	cmp	r3, #0
 8007822:	da0b      	bge.n	800783c <USBD_StdEPReq+0x19e>
 8007824:	7bbb      	ldrb	r3, [r7, #14]
 8007826:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800782a:	4613      	mov	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	3310      	adds	r3, #16
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	4413      	add	r3, r2
 8007838:	3304      	adds	r3, #4
 800783a:	e00b      	b.n	8007854 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800783c:	7bbb      	ldrb	r3, [r7, #14]
 800783e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007842:	4613      	mov	r3, r2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	4413      	add	r3, r2
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	4413      	add	r3, r2
 8007852:	3304      	adds	r3, #4
 8007854:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	2200      	movs	r2, #0
 800785a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2202      	movs	r2, #2
 8007860:	4619      	mov	r1, r3
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fc1d 	bl	80080a2 <USBD_CtlSendData>
              break;
 8007868:	e06a      	b.n	8007940 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800786a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800786e:	2b00      	cmp	r3, #0
 8007870:	da11      	bge.n	8007896 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007872:	7bbb      	ldrb	r3, [r7, #14]
 8007874:	f003 020f 	and.w	r2, r3, #15
 8007878:	6879      	ldr	r1, [r7, #4]
 800787a:	4613      	mov	r3, r2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	440b      	add	r3, r1
 8007884:	3324      	adds	r3, #36	; 0x24
 8007886:	881b      	ldrh	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d117      	bne.n	80078bc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800788c:	6839      	ldr	r1, [r7, #0]
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fb96 	bl	8007fc0 <USBD_CtlError>
                  break;
 8007894:	e054      	b.n	8007940 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007896:	7bbb      	ldrb	r3, [r7, #14]
 8007898:	f003 020f 	and.w	r2, r3, #15
 800789c:	6879      	ldr	r1, [r7, #4]
 800789e:	4613      	mov	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	440b      	add	r3, r1
 80078a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80078ac:	881b      	ldrh	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d104      	bne.n	80078bc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fb83 	bl	8007fc0 <USBD_CtlError>
                  break;
 80078ba:	e041      	b.n	8007940 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	da0b      	bge.n	80078dc <USBD_StdEPReq+0x23e>
 80078c4:	7bbb      	ldrb	r3, [r7, #14]
 80078c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078ca:	4613      	mov	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	3310      	adds	r3, #16
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	4413      	add	r3, r2
 80078d8:	3304      	adds	r3, #4
 80078da:	e00b      	b.n	80078f4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078dc:	7bbb      	ldrb	r3, [r7, #14]
 80078de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078e2:	4613      	mov	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	4413      	add	r3, r2
 80078f2:	3304      	adds	r3, #4
 80078f4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80078f6:	7bbb      	ldrb	r3, [r7, #14]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d002      	beq.n	8007902 <USBD_StdEPReq+0x264>
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
 80078fe:	2b80      	cmp	r3, #128	; 0x80
 8007900:	d103      	bne.n	800790a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	2200      	movs	r2, #0
 8007906:	601a      	str	r2, [r3, #0]
 8007908:	e00e      	b.n	8007928 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800790a:	7bbb      	ldrb	r3, [r7, #14]
 800790c:	4619      	mov	r1, r3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f001 f90a 	bl	8008b28 <USBD_LL_IsStallEP>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d003      	beq.n	8007922 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	2201      	movs	r2, #1
 800791e:	601a      	str	r2, [r3, #0]
 8007920:	e002      	b.n	8007928 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2200      	movs	r2, #0
 8007926:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2202      	movs	r2, #2
 800792c:	4619      	mov	r1, r3
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fbb7 	bl	80080a2 <USBD_CtlSendData>
              break;
 8007934:	e004      	b.n	8007940 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007936:	6839      	ldr	r1, [r7, #0]
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fb41 	bl	8007fc0 <USBD_CtlError>
              break;
 800793e:	bf00      	nop
          }
          break;
 8007940:	e004      	b.n	800794c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007942:	6839      	ldr	r1, [r7, #0]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fb3b 	bl	8007fc0 <USBD_CtlError>
          break;
 800794a:	bf00      	nop
      }
      break;
 800794c:	e004      	b.n	8007958 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fb35 	bl	8007fc0 <USBD_CtlError>
      break;
 8007956:	bf00      	nop
  }

  return ret;
 8007958:	7bfb      	ldrb	r3, [r7, #15]
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
	...

08007964 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800796e:	2300      	movs	r3, #0
 8007970:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007972:	2300      	movs	r3, #0
 8007974:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	885b      	ldrh	r3, [r3, #2]
 800797e:	0a1b      	lsrs	r3, r3, #8
 8007980:	b29b      	uxth	r3, r3
 8007982:	3b01      	subs	r3, #1
 8007984:	2b06      	cmp	r3, #6
 8007986:	f200 8128 	bhi.w	8007bda <USBD_GetDescriptor+0x276>
 800798a:	a201      	add	r2, pc, #4	; (adr r2, 8007990 <USBD_GetDescriptor+0x2c>)
 800798c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007990:	080079ad 	.word	0x080079ad
 8007994:	080079c5 	.word	0x080079c5
 8007998:	08007a05 	.word	0x08007a05
 800799c:	08007bdb 	.word	0x08007bdb
 80079a0:	08007bdb 	.word	0x08007bdb
 80079a4:	08007b7b 	.word	0x08007b7b
 80079a8:	08007ba7 	.word	0x08007ba7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	7c12      	ldrb	r2, [r2, #16]
 80079b8:	f107 0108 	add.w	r1, r7, #8
 80079bc:	4610      	mov	r0, r2
 80079be:	4798      	blx	r3
 80079c0:	60f8      	str	r0, [r7, #12]
      break;
 80079c2:	e112      	b.n	8007bea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	7c1b      	ldrb	r3, [r3, #16]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10d      	bne.n	80079e8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d4:	f107 0208 	add.w	r2, r7, #8
 80079d8:	4610      	mov	r0, r2
 80079da:	4798      	blx	r3
 80079dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	3301      	adds	r3, #1
 80079e2:	2202      	movs	r2, #2
 80079e4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80079e6:	e100      	b.n	8007bea <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f0:	f107 0208 	add.w	r2, r7, #8
 80079f4:	4610      	mov	r0, r2
 80079f6:	4798      	blx	r3
 80079f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	3301      	adds	r3, #1
 80079fe:	2202      	movs	r2, #2
 8007a00:	701a      	strb	r2, [r3, #0]
      break;
 8007a02:	e0f2      	b.n	8007bea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	885b      	ldrh	r3, [r3, #2]
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b05      	cmp	r3, #5
 8007a0c:	f200 80ac 	bhi.w	8007b68 <USBD_GetDescriptor+0x204>
 8007a10:	a201      	add	r2, pc, #4	; (adr r2, 8007a18 <USBD_GetDescriptor+0xb4>)
 8007a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a16:	bf00      	nop
 8007a18:	08007a31 	.word	0x08007a31
 8007a1c:	08007a65 	.word	0x08007a65
 8007a20:	08007a99 	.word	0x08007a99
 8007a24:	08007acd 	.word	0x08007acd
 8007a28:	08007b01 	.word	0x08007b01
 8007a2c:	08007b35 	.word	0x08007b35
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00b      	beq.n	8007a54 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	7c12      	ldrb	r2, [r2, #16]
 8007a48:	f107 0108 	add.w	r1, r7, #8
 8007a4c:	4610      	mov	r0, r2
 8007a4e:	4798      	blx	r3
 8007a50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a52:	e091      	b.n	8007b78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a54:	6839      	ldr	r1, [r7, #0]
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fab2 	bl	8007fc0 <USBD_CtlError>
            err++;
 8007a5c:	7afb      	ldrb	r3, [r7, #11]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	72fb      	strb	r3, [r7, #11]
          break;
 8007a62:	e089      	b.n	8007b78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00b      	beq.n	8007a88 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	7c12      	ldrb	r2, [r2, #16]
 8007a7c:	f107 0108 	add.w	r1, r7, #8
 8007a80:	4610      	mov	r0, r2
 8007a82:	4798      	blx	r3
 8007a84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a86:	e077      	b.n	8007b78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fa98 	bl	8007fc0 <USBD_CtlError>
            err++;
 8007a90:	7afb      	ldrb	r3, [r7, #11]
 8007a92:	3301      	adds	r3, #1
 8007a94:	72fb      	strb	r3, [r7, #11]
          break;
 8007a96:	e06f      	b.n	8007b78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00b      	beq.n	8007abc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	7c12      	ldrb	r2, [r2, #16]
 8007ab0:	f107 0108 	add.w	r1, r7, #8
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	4798      	blx	r3
 8007ab8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aba:	e05d      	b.n	8007b78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007abc:	6839      	ldr	r1, [r7, #0]
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fa7e 	bl	8007fc0 <USBD_CtlError>
            err++;
 8007ac4:	7afb      	ldrb	r3, [r7, #11]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	72fb      	strb	r3, [r7, #11]
          break;
 8007aca:	e055      	b.n	8007b78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00b      	beq.n	8007af0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	7c12      	ldrb	r2, [r2, #16]
 8007ae4:	f107 0108 	add.w	r1, r7, #8
 8007ae8:	4610      	mov	r0, r2
 8007aea:	4798      	blx	r3
 8007aec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aee:	e043      	b.n	8007b78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007af0:	6839      	ldr	r1, [r7, #0]
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fa64 	bl	8007fc0 <USBD_CtlError>
            err++;
 8007af8:	7afb      	ldrb	r3, [r7, #11]
 8007afa:	3301      	adds	r3, #1
 8007afc:	72fb      	strb	r3, [r7, #11]
          break;
 8007afe:	e03b      	b.n	8007b78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00b      	beq.n	8007b24 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b12:	695b      	ldr	r3, [r3, #20]
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	7c12      	ldrb	r2, [r2, #16]
 8007b18:	f107 0108 	add.w	r1, r7, #8
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	4798      	blx	r3
 8007b20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b22:	e029      	b.n	8007b78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fa4a 	bl	8007fc0 <USBD_CtlError>
            err++;
 8007b2c:	7afb      	ldrb	r3, [r7, #11]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	72fb      	strb	r3, [r7, #11]
          break;
 8007b32:	e021      	b.n	8007b78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b3a:	699b      	ldr	r3, [r3, #24]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00b      	beq.n	8007b58 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	7c12      	ldrb	r2, [r2, #16]
 8007b4c:	f107 0108 	add.w	r1, r7, #8
 8007b50:	4610      	mov	r0, r2
 8007b52:	4798      	blx	r3
 8007b54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b56:	e00f      	b.n	8007b78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b58:	6839      	ldr	r1, [r7, #0]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fa30 	bl	8007fc0 <USBD_CtlError>
            err++;
 8007b60:	7afb      	ldrb	r3, [r7, #11]
 8007b62:	3301      	adds	r3, #1
 8007b64:	72fb      	strb	r3, [r7, #11]
          break;
 8007b66:	e007      	b.n	8007b78 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007b68:	6839      	ldr	r1, [r7, #0]
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fa28 	bl	8007fc0 <USBD_CtlError>
          err++;
 8007b70:	7afb      	ldrb	r3, [r7, #11]
 8007b72:	3301      	adds	r3, #1
 8007b74:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007b76:	bf00      	nop
      }
      break;
 8007b78:	e037      	b.n	8007bea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	7c1b      	ldrb	r3, [r3, #16]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d109      	bne.n	8007b96 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b8a:	f107 0208 	add.w	r2, r7, #8
 8007b8e:	4610      	mov	r0, r2
 8007b90:	4798      	blx	r3
 8007b92:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b94:	e029      	b.n	8007bea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b96:	6839      	ldr	r1, [r7, #0]
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fa11 	bl	8007fc0 <USBD_CtlError>
        err++;
 8007b9e:	7afb      	ldrb	r3, [r7, #11]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	72fb      	strb	r3, [r7, #11]
      break;
 8007ba4:	e021      	b.n	8007bea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	7c1b      	ldrb	r3, [r3, #16]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d10d      	bne.n	8007bca <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb6:	f107 0208 	add.w	r2, r7, #8
 8007bba:	4610      	mov	r0, r2
 8007bbc:	4798      	blx	r3
 8007bbe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	2207      	movs	r2, #7
 8007bc6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bc8:	e00f      	b.n	8007bea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007bca:	6839      	ldr	r1, [r7, #0]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f9f7 	bl	8007fc0 <USBD_CtlError>
        err++;
 8007bd2:	7afb      	ldrb	r3, [r7, #11]
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	72fb      	strb	r3, [r7, #11]
      break;
 8007bd8:	e007      	b.n	8007bea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007bda:	6839      	ldr	r1, [r7, #0]
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f9ef 	bl	8007fc0 <USBD_CtlError>
      err++;
 8007be2:	7afb      	ldrb	r3, [r7, #11]
 8007be4:	3301      	adds	r3, #1
 8007be6:	72fb      	strb	r3, [r7, #11]
      break;
 8007be8:	bf00      	nop
  }

  if (err != 0U)
 8007bea:	7afb      	ldrb	r3, [r7, #11]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d11e      	bne.n	8007c2e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	88db      	ldrh	r3, [r3, #6]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d016      	beq.n	8007c26 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007bf8:	893b      	ldrh	r3, [r7, #8]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00e      	beq.n	8007c1c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	88da      	ldrh	r2, [r3, #6]
 8007c02:	893b      	ldrh	r3, [r7, #8]
 8007c04:	4293      	cmp	r3, r2
 8007c06:	bf28      	it	cs
 8007c08:	4613      	movcs	r3, r2
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c0e:	893b      	ldrh	r3, [r7, #8]
 8007c10:	461a      	mov	r2, r3
 8007c12:	68f9      	ldr	r1, [r7, #12]
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 fa44 	bl	80080a2 <USBD_CtlSendData>
 8007c1a:	e009      	b.n	8007c30 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f9ce 	bl	8007fc0 <USBD_CtlError>
 8007c24:	e004      	b.n	8007c30 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fa95 	bl	8008156 <USBD_CtlSendStatus>
 8007c2c:	e000      	b.n	8007c30 <USBD_GetDescriptor+0x2cc>
    return;
 8007c2e:	bf00      	nop
  }
}
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop

08007c38 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	889b      	ldrh	r3, [r3, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d131      	bne.n	8007cae <USBD_SetAddress+0x76>
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	88db      	ldrh	r3, [r3, #6]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d12d      	bne.n	8007cae <USBD_SetAddress+0x76>
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	885b      	ldrh	r3, [r3, #2]
 8007c56:	2b7f      	cmp	r3, #127	; 0x7f
 8007c58:	d829      	bhi.n	8007cae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	885b      	ldrh	r3, [r3, #2]
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b03      	cmp	r3, #3
 8007c70:	d104      	bne.n	8007c7c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f9a3 	bl	8007fc0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c7a:	e01d      	b.n	8007cb8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	7bfa      	ldrb	r2, [r7, #15]
 8007c80:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
 8007c86:	4619      	mov	r1, r3
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 ff79 	bl	8008b80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fa61 	bl	8008156 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d004      	beq.n	8007ca4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2202      	movs	r2, #2
 8007c9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ca2:	e009      	b.n	8007cb8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cac:	e004      	b.n	8007cb8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007cae:	6839      	ldr	r1, [r7, #0]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f985 	bl	8007fc0 <USBD_CtlError>
  }
}
 8007cb6:	bf00      	nop
 8007cb8:	bf00      	nop
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	885b      	ldrh	r3, [r3, #2]
 8007cd2:	b2da      	uxtb	r2, r3
 8007cd4:	4b4c      	ldr	r3, [pc, #304]	; (8007e08 <USBD_SetConfig+0x148>)
 8007cd6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007cd8:	4b4b      	ldr	r3, [pc, #300]	; (8007e08 <USBD_SetConfig+0x148>)
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d905      	bls.n	8007cec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f96c 	bl	8007fc0 <USBD_CtlError>
    return USBD_FAIL;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	e088      	b.n	8007dfe <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d002      	beq.n	8007cfe <USBD_SetConfig+0x3e>
 8007cf8:	2b03      	cmp	r3, #3
 8007cfa:	d025      	beq.n	8007d48 <USBD_SetConfig+0x88>
 8007cfc:	e071      	b.n	8007de2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007cfe:	4b42      	ldr	r3, [pc, #264]	; (8007e08 <USBD_SetConfig+0x148>)
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d01c      	beq.n	8007d40 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007d06:	4b40      	ldr	r3, [pc, #256]	; (8007e08 <USBD_SetConfig+0x148>)
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d10:	4b3d      	ldr	r3, [pc, #244]	; (8007e08 <USBD_SetConfig+0x148>)
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	4619      	mov	r1, r3
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f7ff f948 	bl	8006fac <USBD_SetClassConfig>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d004      	beq.n	8007d30 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007d26:	6839      	ldr	r1, [r7, #0]
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f949 	bl	8007fc0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d2e:	e065      	b.n	8007dfc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fa10 	bl	8008156 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2203      	movs	r2, #3
 8007d3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007d3e:	e05d      	b.n	8007dfc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 fa08 	bl	8008156 <USBD_CtlSendStatus>
      break;
 8007d46:	e059      	b.n	8007dfc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007d48:	4b2f      	ldr	r3, [pc, #188]	; (8007e08 <USBD_SetConfig+0x148>)
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d112      	bne.n	8007d76 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2202      	movs	r2, #2
 8007d54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007d58:	4b2b      	ldr	r3, [pc, #172]	; (8007e08 <USBD_SetConfig+0x148>)
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d62:	4b29      	ldr	r3, [pc, #164]	; (8007e08 <USBD_SetConfig+0x148>)
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	4619      	mov	r1, r3
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f7ff f93b 	bl	8006fe4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f9f1 	bl	8008156 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d74:	e042      	b.n	8007dfc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007d76:	4b24      	ldr	r3, [pc, #144]	; (8007e08 <USBD_SetConfig+0x148>)
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d02a      	beq.n	8007dda <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7ff f929 	bl	8006fe4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007d92:	4b1d      	ldr	r3, [pc, #116]	; (8007e08 <USBD_SetConfig+0x148>)
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	461a      	mov	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d9c:	4b1a      	ldr	r3, [pc, #104]	; (8007e08 <USBD_SetConfig+0x148>)
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	4619      	mov	r1, r3
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f7ff f902 	bl	8006fac <USBD_SetClassConfig>
 8007da8:	4603      	mov	r3, r0
 8007daa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007dac:	7bfb      	ldrb	r3, [r7, #15]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00f      	beq.n	8007dd2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f903 	bl	8007fc0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f7ff f90e 	bl	8006fe4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2202      	movs	r2, #2
 8007dcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007dd0:	e014      	b.n	8007dfc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f9bf 	bl	8008156 <USBD_CtlSendStatus>
      break;
 8007dd8:	e010      	b.n	8007dfc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f9bb 	bl	8008156 <USBD_CtlSendStatus>
      break;
 8007de0:	e00c      	b.n	8007dfc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007de2:	6839      	ldr	r1, [r7, #0]
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f8eb 	bl	8007fc0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007dea:	4b07      	ldr	r3, [pc, #28]	; (8007e08 <USBD_SetConfig+0x148>)
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	4619      	mov	r1, r3
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7ff f8f7 	bl	8006fe4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007df6:	2303      	movs	r3, #3
 8007df8:	73fb      	strb	r3, [r7, #15]
      break;
 8007dfa:	bf00      	nop
  }

  return ret;
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20000614 	.word	0x20000614

08007e0c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	88db      	ldrh	r3, [r3, #6]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d004      	beq.n	8007e28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e1e:	6839      	ldr	r1, [r7, #0]
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 f8cd 	bl	8007fc0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e26:	e023      	b.n	8007e70 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	dc02      	bgt.n	8007e3a <USBD_GetConfig+0x2e>
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	dc03      	bgt.n	8007e40 <USBD_GetConfig+0x34>
 8007e38:	e015      	b.n	8007e66 <USBD_GetConfig+0x5a>
 8007e3a:	2b03      	cmp	r3, #3
 8007e3c:	d00b      	beq.n	8007e56 <USBD_GetConfig+0x4a>
 8007e3e:	e012      	b.n	8007e66 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	3308      	adds	r3, #8
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f927 	bl	80080a2 <USBD_CtlSendData>
        break;
 8007e54:	e00c      	b.n	8007e70 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	3304      	adds	r3, #4
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f91f 	bl	80080a2 <USBD_CtlSendData>
        break;
 8007e64:	e004      	b.n	8007e70 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007e66:	6839      	ldr	r1, [r7, #0]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f8a9 	bl	8007fc0 <USBD_CtlError>
        break;
 8007e6e:	bf00      	nop
}
 8007e70:	bf00      	nop
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d81e      	bhi.n	8007ece <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	88db      	ldrh	r3, [r3, #6]
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d004      	beq.n	8007ea2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007e98:	6839      	ldr	r1, [r7, #0]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f890 	bl	8007fc0 <USBD_CtlError>
        break;
 8007ea0:	e01a      	b.n	8007ed8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d005      	beq.n	8007ebe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	f043 0202 	orr.w	r2, r3, #2
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	330c      	adds	r3, #12
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f8eb 	bl	80080a2 <USBD_CtlSendData>
      break;
 8007ecc:	e004      	b.n	8007ed8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 f875 	bl	8007fc0 <USBD_CtlError>
      break;
 8007ed6:	bf00      	nop
  }
}
 8007ed8:	bf00      	nop
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	885b      	ldrh	r3, [r3, #2]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d106      	bne.n	8007f00 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f92b 	bl	8008156 <USBD_CtlSendStatus>
  }
}
 8007f00:	bf00      	nop
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d80b      	bhi.n	8007f38 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	885b      	ldrh	r3, [r3, #2]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d10c      	bne.n	8007f42 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f910 	bl	8008156 <USBD_CtlSendStatus>
      }
      break;
 8007f36:	e004      	b.n	8007f42 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f840 	bl	8007fc0 <USBD_CtlError>
      break;
 8007f40:	e000      	b.n	8007f44 <USBD_ClrFeature+0x3c>
      break;
 8007f42:	bf00      	nop
  }
}
 8007f44:	bf00      	nop
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	781a      	ldrb	r2, [r3, #0]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	3301      	adds	r3, #1
 8007f66:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	781a      	ldrb	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	3301      	adds	r3, #1
 8007f74:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f7ff fabb 	bl	80074f2 <SWAPBYTE>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	461a      	mov	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	3301      	adds	r3, #1
 8007f88:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f7ff faae 	bl	80074f2 <SWAPBYTE>
 8007f96:	4603      	mov	r3, r0
 8007f98:	461a      	mov	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f7ff faa1 	bl	80074f2 <SWAPBYTE>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	80da      	strh	r2, [r3, #6]
}
 8007fb8:	bf00      	nop
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fca:	2180      	movs	r1, #128	; 0x80
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 fd6d 	bl	8008aac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fd69 	bl	8008aac <USBD_LL_StallEP>
}
 8007fda:	bf00      	nop
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b086      	sub	sp, #24
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	60f8      	str	r0, [r7, #12]
 8007fea:	60b9      	str	r1, [r7, #8]
 8007fec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d036      	beq.n	8008066 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007ffc:	6938      	ldr	r0, [r7, #16]
 8007ffe:	f000 f836 	bl	800806e <USBD_GetLen>
 8008002:	4603      	mov	r3, r0
 8008004:	3301      	adds	r3, #1
 8008006:	b29b      	uxth	r3, r3
 8008008:	005b      	lsls	r3, r3, #1
 800800a:	b29a      	uxth	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008010:	7dfb      	ldrb	r3, [r7, #23]
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	4413      	add	r3, r2
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	7812      	ldrb	r2, [r2, #0]
 800801a:	701a      	strb	r2, [r3, #0]
  idx++;
 800801c:	7dfb      	ldrb	r3, [r7, #23]
 800801e:	3301      	adds	r3, #1
 8008020:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008022:	7dfb      	ldrb	r3, [r7, #23]
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	4413      	add	r3, r2
 8008028:	2203      	movs	r2, #3
 800802a:	701a      	strb	r2, [r3, #0]
  idx++;
 800802c:	7dfb      	ldrb	r3, [r7, #23]
 800802e:	3301      	adds	r3, #1
 8008030:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008032:	e013      	b.n	800805c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008034:	7dfb      	ldrb	r3, [r7, #23]
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	4413      	add	r3, r2
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	7812      	ldrb	r2, [r2, #0]
 800803e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	3301      	adds	r3, #1
 8008044:	613b      	str	r3, [r7, #16]
    idx++;
 8008046:	7dfb      	ldrb	r3, [r7, #23]
 8008048:	3301      	adds	r3, #1
 800804a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800804c:	7dfb      	ldrb	r3, [r7, #23]
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	4413      	add	r3, r2
 8008052:	2200      	movs	r2, #0
 8008054:	701a      	strb	r2, [r3, #0]
    idx++;
 8008056:	7dfb      	ldrb	r3, [r7, #23]
 8008058:	3301      	adds	r3, #1
 800805a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d1e7      	bne.n	8008034 <USBD_GetString+0x52>
 8008064:	e000      	b.n	8008068 <USBD_GetString+0x86>
    return;
 8008066:	bf00      	nop
  }
}
 8008068:	3718      	adds	r7, #24
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800806e:	b480      	push	{r7}
 8008070:	b085      	sub	sp, #20
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008076:	2300      	movs	r3, #0
 8008078:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800807e:	e005      	b.n	800808c <USBD_GetLen+0x1e>
  {
    len++;
 8008080:	7bfb      	ldrb	r3, [r7, #15]
 8008082:	3301      	adds	r3, #1
 8008084:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	3301      	adds	r3, #1
 800808a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1f5      	bne.n	8008080 <USBD_GetLen+0x12>
  }

  return len;
 8008094:	7bfb      	ldrb	r3, [r7, #15]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3714      	adds	r7, #20
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b084      	sub	sp, #16
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	60f8      	str	r0, [r7, #12]
 80080aa:	60b9      	str	r1, [r7, #8]
 80080ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2202      	movs	r2, #2
 80080b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	2100      	movs	r1, #0
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f000 fd78 	bl	8008bbe <USBD_LL_Transmit>

  return USBD_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	68ba      	ldr	r2, [r7, #8]
 80080e8:	2100      	movs	r1, #0
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f000 fd67 	bl	8008bbe <USBD_LL_Transmit>

  return USBD_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b084      	sub	sp, #16
 80080fe:	af00      	add	r7, sp, #0
 8008100:	60f8      	str	r0, [r7, #12]
 8008102:	60b9      	str	r1, [r7, #8]
 8008104:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2203      	movs	r2, #3
 800810a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	2100      	movs	r1, #0
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f000 fd6b 	bl	8008c00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	2100      	movs	r1, #0
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f000 fd5a 	bl	8008c00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b082      	sub	sp, #8
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2204      	movs	r2, #4
 8008162:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008166:	2300      	movs	r3, #0
 8008168:	2200      	movs	r2, #0
 800816a:	2100      	movs	r1, #0
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fd26 	bl	8008bbe <USBD_LL_Transmit>

  return USBD_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2205      	movs	r2, #5
 8008188:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800818c:	2300      	movs	r3, #0
 800818e:	2200      	movs	r2, #0
 8008190:	2100      	movs	r1, #0
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fd34 	bl	8008c00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
	...

080081a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80081a8:	2200      	movs	r2, #0
 80081aa:	4912      	ldr	r1, [pc, #72]	; (80081f4 <MX_USB_DEVICE_Init+0x50>)
 80081ac:	4812      	ldr	r0, [pc, #72]	; (80081f8 <MX_USB_DEVICE_Init+0x54>)
 80081ae:	f7fe fe8f 	bl	8006ed0 <USBD_Init>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80081b8:	f7f8 fc46 	bl	8000a48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80081bc:	490f      	ldr	r1, [pc, #60]	; (80081fc <MX_USB_DEVICE_Init+0x58>)
 80081be:	480e      	ldr	r0, [pc, #56]	; (80081f8 <MX_USB_DEVICE_Init+0x54>)
 80081c0:	f7fe feb6 	bl	8006f30 <USBD_RegisterClass>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d001      	beq.n	80081ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80081ca:	f7f8 fc3d 	bl	8000a48 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80081ce:	490c      	ldr	r1, [pc, #48]	; (8008200 <MX_USB_DEVICE_Init+0x5c>)
 80081d0:	4809      	ldr	r0, [pc, #36]	; (80081f8 <MX_USB_DEVICE_Init+0x54>)
 80081d2:	f7fe fe07 	bl	8006de4 <USBD_CDC_RegisterInterface>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d001      	beq.n	80081e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80081dc:	f7f8 fc34 	bl	8000a48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80081e0:	4805      	ldr	r0, [pc, #20]	; (80081f8 <MX_USB_DEVICE_Init+0x54>)
 80081e2:	f7fe fecc 	bl	8006f7e <USBD_Start>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d001      	beq.n	80081f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80081ec:	f7f8 fc2c 	bl	8000a48 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80081f0:	bf00      	nop
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	20000138 	.word	0x20000138
 80081f8:	20000c58 	.word	0x20000c58
 80081fc:	20000020 	.word	0x20000020
 8008200:	20000124 	.word	0x20000124

08008204 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800820a:	2200      	movs	r2, #0
 800820c:	4915      	ldr	r1, [pc, #84]	; (8008264 <CDC_Init_FS+0x60>)
 800820e:	4816      	ldr	r0, [pc, #88]	; (8008268 <CDC_Init_FS+0x64>)
 8008210:	f7fe fdfd 	bl	8006e0e <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008214:	4915      	ldr	r1, [pc, #84]	; (800826c <CDC_Init_FS+0x68>)
 8008216:	4814      	ldr	r0, [pc, #80]	; (8008268 <CDC_Init_FS+0x64>)
 8008218:	f7fe fe17 	bl	8006e4a <USBD_CDC_SetRxBuffer>

	// https://stackoverflow.com/a/26925578
	uint32_t baudrate = 9600;
 800821c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8008220:	607b      	str	r3, [r7, #4]
	lcBuffer[0] = (uint8_t) (baudrate);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	b2da      	uxtb	r2, r3
 8008226:	4b12      	ldr	r3, [pc, #72]	; (8008270 <CDC_Init_FS+0x6c>)
 8008228:	701a      	strb	r2, [r3, #0]
	lcBuffer[1] = (uint8_t) (baudrate >> 8);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	0a1b      	lsrs	r3, r3, #8
 800822e:	b2da      	uxtb	r2, r3
 8008230:	4b0f      	ldr	r3, [pc, #60]	; (8008270 <CDC_Init_FS+0x6c>)
 8008232:	705a      	strb	r2, [r3, #1]
	lcBuffer[2] = (uint8_t) (baudrate >> 16);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	0c1b      	lsrs	r3, r3, #16
 8008238:	b2da      	uxtb	r2, r3
 800823a:	4b0d      	ldr	r3, [pc, #52]	; (8008270 <CDC_Init_FS+0x6c>)
 800823c:	709a      	strb	r2, [r3, #2]
	lcBuffer[3] = (uint8_t) (baudrate >> 24);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	0e1b      	lsrs	r3, r3, #24
 8008242:	b2da      	uxtb	r2, r3
 8008244:	4b0a      	ldr	r3, [pc, #40]	; (8008270 <CDC_Init_FS+0x6c>)
 8008246:	70da      	strb	r2, [r3, #3]
	lcBuffer[4] = 0; // 1 Stop bit
 8008248:	4b09      	ldr	r3, [pc, #36]	; (8008270 <CDC_Init_FS+0x6c>)
 800824a:	2200      	movs	r2, #0
 800824c:	711a      	strb	r2, [r3, #4]
	lcBuffer[5] = 0; // No parity
 800824e:	4b08      	ldr	r3, [pc, #32]	; (8008270 <CDC_Init_FS+0x6c>)
 8008250:	2200      	movs	r2, #0
 8008252:	715a      	strb	r2, [r3, #5]
	lcBuffer[6] = 8; // 8 data bits
 8008254:	4b06      	ldr	r3, [pc, #24]	; (8008270 <CDC_Init_FS+0x6c>)
 8008256:	2208      	movs	r2, #8
 8008258:	719a      	strb	r2, [r3, #6]

	return (USBD_OK);
 800825a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800825c:	4618      	mov	r0, r3
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	20001728 	.word	0x20001728
 8008268:	20000c58 	.word	0x20000c58
 800826c:	20000f28 	.word	0x20000f28
 8008270:	20002028 	.word	0x20002028

08008274 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008274:	b480      	push	{r7}
 8008276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8008278:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800827a:	4618      	mov	r0, r3
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	4603      	mov	r3, r0
 800828c:	6039      	str	r1, [r7, #0]
 800828e:	71fb      	strb	r3, [r7, #7]
 8008290:	4613      	mov	r3, r2
 8008292:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 8008294:	79fb      	ldrb	r3, [r7, #7]
 8008296:	2b23      	cmp	r3, #35	; 0x23
 8008298:	f200 808e 	bhi.w	80083b8 <CDC_Control_FS+0x134>
 800829c:	a201      	add	r2, pc, #4	; (adr r2, 80082a4 <CDC_Control_FS+0x20>)
 800829e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a2:	bf00      	nop
 80082a4:	080083b9 	.word	0x080083b9
 80082a8:	080083b9 	.word	0x080083b9
 80082ac:	080083b9 	.word	0x080083b9
 80082b0:	080083b9 	.word	0x080083b9
 80082b4:	080083b9 	.word	0x080083b9
 80082b8:	080083b9 	.word	0x080083b9
 80082bc:	080083b9 	.word	0x080083b9
 80082c0:	080083b9 	.word	0x080083b9
 80082c4:	080083b9 	.word	0x080083b9
 80082c8:	080083b9 	.word	0x080083b9
 80082cc:	080083b9 	.word	0x080083b9
 80082d0:	080083b9 	.word	0x080083b9
 80082d4:	080083b9 	.word	0x080083b9
 80082d8:	080083b9 	.word	0x080083b9
 80082dc:	080083b9 	.word	0x080083b9
 80082e0:	080083b9 	.word	0x080083b9
 80082e4:	080083b9 	.word	0x080083b9
 80082e8:	080083b9 	.word	0x080083b9
 80082ec:	080083b9 	.word	0x080083b9
 80082f0:	080083b9 	.word	0x080083b9
 80082f4:	080083b9 	.word	0x080083b9
 80082f8:	080083b9 	.word	0x080083b9
 80082fc:	080083b9 	.word	0x080083b9
 8008300:	080083b9 	.word	0x080083b9
 8008304:	080083b9 	.word	0x080083b9
 8008308:	080083b9 	.word	0x080083b9
 800830c:	080083b9 	.word	0x080083b9
 8008310:	080083b9 	.word	0x080083b9
 8008314:	080083b9 	.word	0x080083b9
 8008318:	080083b9 	.word	0x080083b9
 800831c:	080083b9 	.word	0x080083b9
 8008320:	080083b9 	.word	0x080083b9
 8008324:	08008335 	.word	0x08008335
 8008328:	0800836f 	.word	0x0800836f
 800832c:	080083b9 	.word	0x080083b9
 8008330:	080083b9 	.word	0x080083b9
		/* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
		/*******************************************************************************/

		// https://github.com/philrawlings/bluepill-usb-cdc-test/blob/main/USB_DEVICE/App/usbd_cdc_if.c
	case CDC_SET_LINE_CODING:
		lcBuffer[0] = pbuf[0];
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	781a      	ldrb	r2, [r3, #0]
 8008338:	4b22      	ldr	r3, [pc, #136]	; (80083c4 <CDC_Control_FS+0x140>)
 800833a:	701a      	strb	r2, [r3, #0]
		lcBuffer[1] = pbuf[1];
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	785a      	ldrb	r2, [r3, #1]
 8008340:	4b20      	ldr	r3, [pc, #128]	; (80083c4 <CDC_Control_FS+0x140>)
 8008342:	705a      	strb	r2, [r3, #1]
		lcBuffer[2] = pbuf[2];
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	789a      	ldrb	r2, [r3, #2]
 8008348:	4b1e      	ldr	r3, [pc, #120]	; (80083c4 <CDC_Control_FS+0x140>)
 800834a:	709a      	strb	r2, [r3, #2]
		lcBuffer[3] = pbuf[3];
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	78da      	ldrb	r2, [r3, #3]
 8008350:	4b1c      	ldr	r3, [pc, #112]	; (80083c4 <CDC_Control_FS+0x140>)
 8008352:	70da      	strb	r2, [r3, #3]
		lcBuffer[4] = pbuf[4];
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	791a      	ldrb	r2, [r3, #4]
 8008358:	4b1a      	ldr	r3, [pc, #104]	; (80083c4 <CDC_Control_FS+0x140>)
 800835a:	711a      	strb	r2, [r3, #4]
		lcBuffer[5] = pbuf[5];
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	795a      	ldrb	r2, [r3, #5]
 8008360:	4b18      	ldr	r3, [pc, #96]	; (80083c4 <CDC_Control_FS+0x140>)
 8008362:	715a      	strb	r2, [r3, #5]
		lcBuffer[6] = pbuf[6];
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	799a      	ldrb	r2, [r3, #6]
 8008368:	4b16      	ldr	r3, [pc, #88]	; (80083c4 <CDC_Control_FS+0x140>)
 800836a:	719a      	strb	r2, [r3, #6]
		break;
 800836c:	e025      	b.n	80083ba <CDC_Control_FS+0x136>

	case CDC_GET_LINE_CODING:
		pbuf[0] = lcBuffer[0];
 800836e:	4b15      	ldr	r3, [pc, #84]	; (80083c4 <CDC_Control_FS+0x140>)
 8008370:	781a      	ldrb	r2, [r3, #0]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	701a      	strb	r2, [r3, #0]
		pbuf[1] = lcBuffer[1];
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	3301      	adds	r3, #1
 800837a:	4a12      	ldr	r2, [pc, #72]	; (80083c4 <CDC_Control_FS+0x140>)
 800837c:	7852      	ldrb	r2, [r2, #1]
 800837e:	701a      	strb	r2, [r3, #0]
		pbuf[2] = lcBuffer[2];
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	3302      	adds	r3, #2
 8008384:	4a0f      	ldr	r2, [pc, #60]	; (80083c4 <CDC_Control_FS+0x140>)
 8008386:	7892      	ldrb	r2, [r2, #2]
 8008388:	701a      	strb	r2, [r3, #0]
		pbuf[3] = lcBuffer[3];
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	3303      	adds	r3, #3
 800838e:	4a0d      	ldr	r2, [pc, #52]	; (80083c4 <CDC_Control_FS+0x140>)
 8008390:	78d2      	ldrb	r2, [r2, #3]
 8008392:	701a      	strb	r2, [r3, #0]
		pbuf[4] = lcBuffer[4];
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	3304      	adds	r3, #4
 8008398:	4a0a      	ldr	r2, [pc, #40]	; (80083c4 <CDC_Control_FS+0x140>)
 800839a:	7912      	ldrb	r2, [r2, #4]
 800839c:	701a      	strb	r2, [r3, #0]
		pbuf[5] = lcBuffer[5];
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	3305      	adds	r3, #5
 80083a2:	4a08      	ldr	r2, [pc, #32]	; (80083c4 <CDC_Control_FS+0x140>)
 80083a4:	7952      	ldrb	r2, [r2, #5]
 80083a6:	701a      	strb	r2, [r3, #0]
		pbuf[6] = lcBuffer[6];
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	3306      	adds	r3, #6
 80083ac:	4a05      	ldr	r2, [pc, #20]	; (80083c4 <CDC_Control_FS+0x140>)
 80083ae:	7992      	ldrb	r2, [r2, #6]
 80083b0:	701a      	strb	r2, [r3, #0]

		// Get line coding is invoked when the host connects, clear the RxBuffer when this occurs
		CDC_FlushRxBuffer_FS();
 80083b2:	f000 f877 	bl	80084a4 <CDC_FlushRxBuffer_FS>

	case CDC_SET_CONTROL_LINE_STATE:

		break;
 80083b6:	e000      	b.n	80083ba <CDC_Control_FS+0x136>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 80083b8:	bf00      	nop
	}

	return (USBD_OK);
 80083ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	20002028 	.word	0x20002028

080083c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80083d2:	6879      	ldr	r1, [r7, #4]
 80083d4:	480e      	ldr	r0, [pc, #56]	; (8008410 <CDC_Receive_FS+0x48>)
 80083d6:	f7fe fd38 	bl	8006e4a <USBD_CDC_SetRxBuffer>

	uint8_t len = (uint8_t) *Len; // Get length
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	73fb      	strb	r3, [r7, #15]

	memset(rxBuffer, 0, HL_RX_BUFFER_SIZE);  // clear the buffer
 80083e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083e4:	2100      	movs	r1, #0
 80083e6:	480b      	ldr	r0, [pc, #44]	; (8008414 <CDC_Receive_FS+0x4c>)
 80083e8:	f000 fcba 	bl	8008d60 <memset>
	memcpy(rxBuffer, Buf, len);  // copy the data to the buffer
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
 80083ee:	461a      	mov	r2, r3
 80083f0:	6879      	ldr	r1, [r7, #4]
 80083f2:	4808      	ldr	r0, [pc, #32]	; (8008414 <CDC_Receive_FS+0x4c>)
 80083f4:	f000 fca6 	bl	8008d44 <memcpy>
	memset(Buf, 0, len);   // clear the Buf also
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
 80083fa:	461a      	mov	r2, r3
 80083fc:	2100      	movs	r1, #0
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fcae 	bl	8008d60 <memset>



	return (USBD_OK);
 8008404:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008406:	4618      	mov	r0, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	20000c58 	.word	0x20000c58
 8008414:	20001f28 	.word	0x20001f28

08008418 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008418:	b480      	push	{r7}
 800841a:	b087      	sub	sp, #28
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	4613      	mov	r3, r2
 8008424:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008426:	2300      	movs	r3, #0
 8008428:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800842a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800842e:	4618      	mov	r0, r3
 8008430:	371c      	adds	r7, #28
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
	...

0800843c <CDC_ReadRxBuffer_FS>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void CDC_ReadRxBuffer_FS(uint8_t *Buf, uint8_t Len) {
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	460b      	mov	r3, r1
 8008446:	70fb      	strb	r3, [r7, #3]
	memcpy(Buf, rxBuffer, Len);  // copy the data to the buffer
 8008448:	78fb      	ldrb	r3, [r7, #3]
 800844a:	461a      	mov	r2, r3
 800844c:	4903      	ldr	r1, [pc, #12]	; (800845c <CDC_ReadRxBuffer_FS+0x20>)
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fc78 	bl	8008d44 <memcpy>
}
 8008454:	bf00      	nop
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	20001f28 	.word	0x20001f28

08008460 <CDC_GetRxBufferBytesAvailable_FS>:

uint8_t CDC_GetRxBufferBytesAvailable_FS(void) {
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0

	uint8_t index = 0;
 8008466:	2300      	movs	r3, #0
 8008468:	71fb      	strb	r3, [r7, #7]
	while (rxBuffer[index] != 0) {
 800846a:	e002      	b.n	8008472 <CDC_GetRxBufferBytesAvailable_FS+0x12>
		index++;
 800846c:	79fb      	ldrb	r3, [r7, #7]
 800846e:	3301      	adds	r3, #1
 8008470:	71fb      	strb	r3, [r7, #7]
	while (rxBuffer[index] != 0) {
 8008472:	79fb      	ldrb	r3, [r7, #7]
 8008474:	4a05      	ldr	r2, [pc, #20]	; (800848c <CDC_GetRxBufferBytesAvailable_FS+0x2c>)
 8008476:	5cd3      	ldrb	r3, [r2, r3]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1f7      	bne.n	800846c <CDC_GetRxBufferBytesAvailable_FS+0xc>
	}
	return index;
 800847c:	79fb      	ldrb	r3, [r7, #7]

}
 800847e:	4618      	mov	r0, r3
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	20001f28 	.word	0x20001f28

08008490 <CDC_Read_Next>:

void CDC_Read_Next() {
 8008490:	b580      	push	{r7, lr}
 8008492:	af00      	add	r7, sp, #0
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008494:	4802      	ldr	r0, [pc, #8]	; (80084a0 <CDC_Read_Next+0x10>)
 8008496:	f7fe fcf1 	bl	8006e7c <USBD_CDC_ReceivePacket>
}
 800849a:	bf00      	nop
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	20000c58 	.word	0x20000c58

080084a4 <CDC_FlushRxBuffer_FS>:

void CDC_FlushRxBuffer_FS() {
 80084a4:	b580      	push	{r7, lr}
 80084a6:	af00      	add	r7, sp, #0
	memset(rxBuffer, 0, HL_RX_BUFFER_SIZE);
 80084a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084ac:	2100      	movs	r1, #0
 80084ae:	4802      	ldr	r0, [pc, #8]	; (80084b8 <CDC_FlushRxBuffer_FS+0x14>)
 80084b0:	f000 fc56 	bl	8008d60 <memset>
}
 80084b4:	bf00      	nop
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	20001f28 	.word	0x20001f28

080084bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	4603      	mov	r3, r0
 80084c4:	6039      	str	r1, [r7, #0]
 80084c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	2212      	movs	r2, #18
 80084cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80084ce:	4b03      	ldr	r3, [pc, #12]	; (80084dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr
 80084dc:	20000154 	.word	0x20000154

080084e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	4603      	mov	r3, r0
 80084e8:	6039      	str	r1, [r7, #0]
 80084ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	2204      	movs	r2, #4
 80084f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80084f2:	4b03      	ldr	r3, [pc, #12]	; (8008500 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr
 8008500:	20000168 	.word	0x20000168

08008504 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	4603      	mov	r3, r0
 800850c:	6039      	str	r1, [r7, #0]
 800850e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008510:	79fb      	ldrb	r3, [r7, #7]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d105      	bne.n	8008522 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	4907      	ldr	r1, [pc, #28]	; (8008538 <USBD_FS_ProductStrDescriptor+0x34>)
 800851a:	4808      	ldr	r0, [pc, #32]	; (800853c <USBD_FS_ProductStrDescriptor+0x38>)
 800851c:	f7ff fd61 	bl	8007fe2 <USBD_GetString>
 8008520:	e004      	b.n	800852c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	4904      	ldr	r1, [pc, #16]	; (8008538 <USBD_FS_ProductStrDescriptor+0x34>)
 8008526:	4805      	ldr	r0, [pc, #20]	; (800853c <USBD_FS_ProductStrDescriptor+0x38>)
 8008528:	f7ff fd5b 	bl	8007fe2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800852c:	4b02      	ldr	r3, [pc, #8]	; (8008538 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800852e:	4618      	mov	r0, r3
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	20002030 	.word	0x20002030
 800853c:	080095e0 	.word	0x080095e0

08008540 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	4603      	mov	r3, r0
 8008548:	6039      	str	r1, [r7, #0]
 800854a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	4904      	ldr	r1, [pc, #16]	; (8008560 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008550:	4804      	ldr	r0, [pc, #16]	; (8008564 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008552:	f7ff fd46 	bl	8007fe2 <USBD_GetString>
  return USBD_StrDesc;
 8008556:	4b02      	ldr	r3, [pc, #8]	; (8008560 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008558:	4618      	mov	r0, r3
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}
 8008560:	20002030 	.word	0x20002030
 8008564:	080095f8 	.word	0x080095f8

08008568 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	4603      	mov	r3, r0
 8008570:	6039      	str	r1, [r7, #0]
 8008572:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	221a      	movs	r2, #26
 8008578:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800857a:	f000 f843 	bl	8008604 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800857e:	4b02      	ldr	r3, [pc, #8]	; (8008588 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008580:	4618      	mov	r0, r3
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	2000016c 	.word	0x2000016c

0800858c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	4603      	mov	r3, r0
 8008594:	6039      	str	r1, [r7, #0]
 8008596:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008598:	79fb      	ldrb	r3, [r7, #7]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d105      	bne.n	80085aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800859e:	683a      	ldr	r2, [r7, #0]
 80085a0:	4907      	ldr	r1, [pc, #28]	; (80085c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085a2:	4808      	ldr	r0, [pc, #32]	; (80085c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085a4:	f7ff fd1d 	bl	8007fe2 <USBD_GetString>
 80085a8:	e004      	b.n	80085b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	4904      	ldr	r1, [pc, #16]	; (80085c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085ae:	4805      	ldr	r0, [pc, #20]	; (80085c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085b0:	f7ff fd17 	bl	8007fe2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085b4:	4b02      	ldr	r3, [pc, #8]	; (80085c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3708      	adds	r7, #8
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	20002030 	.word	0x20002030
 80085c4:	0800960c 	.word	0x0800960c

080085c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	4603      	mov	r3, r0
 80085d0:	6039      	str	r1, [r7, #0]
 80085d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085d4:	79fb      	ldrb	r3, [r7, #7]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d105      	bne.n	80085e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	4907      	ldr	r1, [pc, #28]	; (80085fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085de:	4808      	ldr	r0, [pc, #32]	; (8008600 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085e0:	f7ff fcff 	bl	8007fe2 <USBD_GetString>
 80085e4:	e004      	b.n	80085f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	4904      	ldr	r1, [pc, #16]	; (80085fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085ea:	4805      	ldr	r0, [pc, #20]	; (8008600 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085ec:	f7ff fcf9 	bl	8007fe2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085f0:	4b02      	ldr	r3, [pc, #8]	; (80085fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3708      	adds	r7, #8
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	20002030 	.word	0x20002030
 8008600:	08009618 	.word	0x08009618

08008604 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800860a:	4b0f      	ldr	r3, [pc, #60]	; (8008648 <Get_SerialNum+0x44>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008610:	4b0e      	ldr	r3, [pc, #56]	; (800864c <Get_SerialNum+0x48>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008616:	4b0e      	ldr	r3, [pc, #56]	; (8008650 <Get_SerialNum+0x4c>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4413      	add	r3, r2
 8008622:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d009      	beq.n	800863e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800862a:	2208      	movs	r2, #8
 800862c:	4909      	ldr	r1, [pc, #36]	; (8008654 <Get_SerialNum+0x50>)
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f000 f814 	bl	800865c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008634:	2204      	movs	r2, #4
 8008636:	4908      	ldr	r1, [pc, #32]	; (8008658 <Get_SerialNum+0x54>)
 8008638:	68b8      	ldr	r0, [r7, #8]
 800863a:	f000 f80f 	bl	800865c <IntToUnicode>
  }
}
 800863e:	bf00      	nop
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	1fff7a10 	.word	0x1fff7a10
 800864c:	1fff7a14 	.word	0x1fff7a14
 8008650:	1fff7a18 	.word	0x1fff7a18
 8008654:	2000016e 	.word	0x2000016e
 8008658:	2000017e 	.word	0x2000017e

0800865c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800865c:	b480      	push	{r7}
 800865e:	b087      	sub	sp, #28
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	4613      	mov	r3, r2
 8008668:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800866a:	2300      	movs	r3, #0
 800866c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800866e:	2300      	movs	r3, #0
 8008670:	75fb      	strb	r3, [r7, #23]
 8008672:	e027      	b.n	80086c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	0f1b      	lsrs	r3, r3, #28
 8008678:	2b09      	cmp	r3, #9
 800867a:	d80b      	bhi.n	8008694 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	0f1b      	lsrs	r3, r3, #28
 8008680:	b2da      	uxtb	r2, r3
 8008682:	7dfb      	ldrb	r3, [r7, #23]
 8008684:	005b      	lsls	r3, r3, #1
 8008686:	4619      	mov	r1, r3
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	440b      	add	r3, r1
 800868c:	3230      	adds	r2, #48	; 0x30
 800868e:	b2d2      	uxtb	r2, r2
 8008690:	701a      	strb	r2, [r3, #0]
 8008692:	e00a      	b.n	80086aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	0f1b      	lsrs	r3, r3, #28
 8008698:	b2da      	uxtb	r2, r3
 800869a:	7dfb      	ldrb	r3, [r7, #23]
 800869c:	005b      	lsls	r3, r3, #1
 800869e:	4619      	mov	r1, r3
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	440b      	add	r3, r1
 80086a4:	3237      	adds	r2, #55	; 0x37
 80086a6:	b2d2      	uxtb	r2, r2
 80086a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	011b      	lsls	r3, r3, #4
 80086ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80086b0:	7dfb      	ldrb	r3, [r7, #23]
 80086b2:	005b      	lsls	r3, r3, #1
 80086b4:	3301      	adds	r3, #1
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	4413      	add	r3, r2
 80086ba:	2200      	movs	r2, #0
 80086bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80086be:	7dfb      	ldrb	r3, [r7, #23]
 80086c0:	3301      	adds	r3, #1
 80086c2:	75fb      	strb	r3, [r7, #23]
 80086c4:	7dfa      	ldrb	r2, [r7, #23]
 80086c6:	79fb      	ldrb	r3, [r7, #7]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d3d3      	bcc.n	8008674 <IntToUnicode+0x18>
  }
}
 80086cc:	bf00      	nop
 80086ce:	bf00      	nop
 80086d0:	371c      	adds	r7, #28
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr
	...

080086dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b08a      	sub	sp, #40	; 0x28
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086e4:	f107 0314 	add.w	r3, r7, #20
 80086e8:	2200      	movs	r2, #0
 80086ea:	601a      	str	r2, [r3, #0]
 80086ec:	605a      	str	r2, [r3, #4]
 80086ee:	609a      	str	r2, [r3, #8]
 80086f0:	60da      	str	r2, [r3, #12]
 80086f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086fc:	d13a      	bne.n	8008774 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086fe:	2300      	movs	r3, #0
 8008700:	613b      	str	r3, [r7, #16]
 8008702:	4b1e      	ldr	r3, [pc, #120]	; (800877c <HAL_PCD_MspInit+0xa0>)
 8008704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008706:	4a1d      	ldr	r2, [pc, #116]	; (800877c <HAL_PCD_MspInit+0xa0>)
 8008708:	f043 0301 	orr.w	r3, r3, #1
 800870c:	6313      	str	r3, [r2, #48]	; 0x30
 800870e:	4b1b      	ldr	r3, [pc, #108]	; (800877c <HAL_PCD_MspInit+0xa0>)
 8008710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008712:	f003 0301 	and.w	r3, r3, #1
 8008716:	613b      	str	r3, [r7, #16]
 8008718:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800871a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800871e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008720:	2302      	movs	r3, #2
 8008722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008724:	2300      	movs	r3, #0
 8008726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008728:	2303      	movs	r3, #3
 800872a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800872c:	230a      	movs	r3, #10
 800872e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008730:	f107 0314 	add.w	r3, r7, #20
 8008734:	4619      	mov	r1, r3
 8008736:	4812      	ldr	r0, [pc, #72]	; (8008780 <HAL_PCD_MspInit+0xa4>)
 8008738:	f7f9 face 	bl	8001cd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800873c:	4b0f      	ldr	r3, [pc, #60]	; (800877c <HAL_PCD_MspInit+0xa0>)
 800873e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008740:	4a0e      	ldr	r2, [pc, #56]	; (800877c <HAL_PCD_MspInit+0xa0>)
 8008742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008746:	6353      	str	r3, [r2, #52]	; 0x34
 8008748:	2300      	movs	r3, #0
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	4b0b      	ldr	r3, [pc, #44]	; (800877c <HAL_PCD_MspInit+0xa0>)
 800874e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008750:	4a0a      	ldr	r2, [pc, #40]	; (800877c <HAL_PCD_MspInit+0xa0>)
 8008752:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008756:	6453      	str	r3, [r2, #68]	; 0x44
 8008758:	4b08      	ldr	r3, [pc, #32]	; (800877c <HAL_PCD_MspInit+0xa0>)
 800875a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800875c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008760:	60fb      	str	r3, [r7, #12]
 8008762:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008764:	2200      	movs	r2, #0
 8008766:	2100      	movs	r1, #0
 8008768:	2043      	movs	r0, #67	; 0x43
 800876a:	f7f8 ff94 	bl	8001696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800876e:	2043      	movs	r0, #67	; 0x43
 8008770:	f7f8 ffad 	bl	80016ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008774:	bf00      	nop
 8008776:	3728      	adds	r7, #40	; 0x28
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	40023800 	.word	0x40023800
 8008780:	40020000 	.word	0x40020000

08008784 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008798:	4619      	mov	r1, r3
 800879a:	4610      	mov	r0, r2
 800879c:	f7fe fc3a 	bl	8007014 <USBD_LL_SetupStage>
}
 80087a0:	bf00      	nop
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	460b      	mov	r3, r1
 80087b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80087ba:	78fa      	ldrb	r2, [r7, #3]
 80087bc:	6879      	ldr	r1, [r7, #4]
 80087be:	4613      	mov	r3, r2
 80087c0:	00db      	lsls	r3, r3, #3
 80087c2:	1a9b      	subs	r3, r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	440b      	add	r3, r1
 80087c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	78fb      	ldrb	r3, [r7, #3]
 80087d0:	4619      	mov	r1, r3
 80087d2:	f7fe fc74 	bl	80070be <USBD_LL_DataOutStage>
}
 80087d6:	bf00      	nop
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b082      	sub	sp, #8
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
 80087e6:	460b      	mov	r3, r1
 80087e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80087f0:	78fa      	ldrb	r2, [r7, #3]
 80087f2:	6879      	ldr	r1, [r7, #4]
 80087f4:	4613      	mov	r3, r2
 80087f6:	00db      	lsls	r3, r3, #3
 80087f8:	1a9b      	subs	r3, r3, r2
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	440b      	add	r3, r1
 80087fe:	3348      	adds	r3, #72	; 0x48
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	78fb      	ldrb	r3, [r7, #3]
 8008804:	4619      	mov	r1, r3
 8008806:	f7fe fcbd 	bl	8007184 <USBD_LL_DataInStage>
}
 800880a:	bf00      	nop
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b082      	sub	sp, #8
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008820:	4618      	mov	r0, r3
 8008822:	f7fe fdd1 	bl	80073c8 <USBD_LL_SOF>
}
 8008826:	bf00      	nop
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b084      	sub	sp, #16
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008836:	2301      	movs	r3, #1
 8008838:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	2b02      	cmp	r3, #2
 8008840:	d001      	beq.n	8008846 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008842:	f7f8 f901 	bl	8000a48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800884c:	7bfa      	ldrb	r2, [r7, #15]
 800884e:	4611      	mov	r1, r2
 8008850:	4618      	mov	r0, r3
 8008852:	f7fe fd7b 	bl	800734c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800885c:	4618      	mov	r0, r3
 800885e:	f7fe fd27 	bl	80072b0 <USBD_LL_Reset>
}
 8008862:	bf00      	nop
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
	...

0800886c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800887a:	4618      	mov	r0, r3
 800887c:	f7fe fd76 	bl	800736c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	6812      	ldr	r2, [r2, #0]
 800888e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008892:	f043 0301 	orr.w	r3, r3, #1
 8008896:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a1b      	ldr	r3, [r3, #32]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d005      	beq.n	80088ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088a0:	4b04      	ldr	r3, [pc, #16]	; (80088b4 <HAL_PCD_SuspendCallback+0x48>)
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	4a03      	ldr	r2, [pc, #12]	; (80088b4 <HAL_PCD_SuspendCallback+0x48>)
 80088a6:	f043 0306 	orr.w	r3, r3, #6
 80088aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80088ac:	bf00      	nop
 80088ae:	3708      	adds	r7, #8
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	e000ed00 	.word	0xe000ed00

080088b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7fe fd66 	bl	8007398 <USBD_LL_Resume>
}
 80088cc:	bf00      	nop
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	460b      	mov	r3, r1
 80088de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088e6:	78fa      	ldrb	r2, [r7, #3]
 80088e8:	4611      	mov	r1, r2
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fe fdb4 	bl	8007458 <USBD_LL_IsoOUTIncomplete>
}
 80088f0:	bf00      	nop
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	460b      	mov	r3, r1
 8008902:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800890a:	78fa      	ldrb	r2, [r7, #3]
 800890c:	4611      	mov	r1, r2
 800890e:	4618      	mov	r0, r3
 8008910:	f7fe fd7c 	bl	800740c <USBD_LL_IsoINIncomplete>
}
 8008914:	bf00      	nop
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800892a:	4618      	mov	r0, r3
 800892c:	f7fe fdba 	bl	80074a4 <USBD_LL_DevConnected>
}
 8008930:	bf00      	nop
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008946:	4618      	mov	r0, r3
 8008948:	f7fe fdb7 	bl	80074ba <USBD_LL_DevDisconnected>
}
 800894c:	bf00      	nop
 800894e:	3708      	adds	r7, #8
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d13c      	bne.n	80089de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008964:	4a20      	ldr	r2, [pc, #128]	; (80089e8 <USBD_LL_Init+0x94>)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a1e      	ldr	r2, [pc, #120]	; (80089e8 <USBD_LL_Init+0x94>)
 8008970:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008974:	4b1c      	ldr	r3, [pc, #112]	; (80089e8 <USBD_LL_Init+0x94>)
 8008976:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800897a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800897c:	4b1a      	ldr	r3, [pc, #104]	; (80089e8 <USBD_LL_Init+0x94>)
 800897e:	2204      	movs	r2, #4
 8008980:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008982:	4b19      	ldr	r3, [pc, #100]	; (80089e8 <USBD_LL_Init+0x94>)
 8008984:	2202      	movs	r2, #2
 8008986:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008988:	4b17      	ldr	r3, [pc, #92]	; (80089e8 <USBD_LL_Init+0x94>)
 800898a:	2200      	movs	r2, #0
 800898c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800898e:	4b16      	ldr	r3, [pc, #88]	; (80089e8 <USBD_LL_Init+0x94>)
 8008990:	2202      	movs	r2, #2
 8008992:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008994:	4b14      	ldr	r3, [pc, #80]	; (80089e8 <USBD_LL_Init+0x94>)
 8008996:	2200      	movs	r2, #0
 8008998:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800899a:	4b13      	ldr	r3, [pc, #76]	; (80089e8 <USBD_LL_Init+0x94>)
 800899c:	2200      	movs	r2, #0
 800899e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80089a0:	4b11      	ldr	r3, [pc, #68]	; (80089e8 <USBD_LL_Init+0x94>)
 80089a2:	2200      	movs	r2, #0
 80089a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80089a6:	4b10      	ldr	r3, [pc, #64]	; (80089e8 <USBD_LL_Init+0x94>)
 80089a8:	2200      	movs	r2, #0
 80089aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80089ac:	4b0e      	ldr	r3, [pc, #56]	; (80089e8 <USBD_LL_Init+0x94>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80089b2:	480d      	ldr	r0, [pc, #52]	; (80089e8 <USBD_LL_Init+0x94>)
 80089b4:	f7f9 ff89 	bl	80028ca <HAL_PCD_Init>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d001      	beq.n	80089c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80089be:	f7f8 f843 	bl	8000a48 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80089c2:	2180      	movs	r1, #128	; 0x80
 80089c4:	4808      	ldr	r0, [pc, #32]	; (80089e8 <USBD_LL_Init+0x94>)
 80089c6:	f7fb f8e6 	bl	8003b96 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80089ca:	2240      	movs	r2, #64	; 0x40
 80089cc:	2100      	movs	r1, #0
 80089ce:	4806      	ldr	r0, [pc, #24]	; (80089e8 <USBD_LL_Init+0x94>)
 80089d0:	f7fb f89a 	bl	8003b08 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80089d4:	2280      	movs	r2, #128	; 0x80
 80089d6:	2101      	movs	r1, #1
 80089d8:	4803      	ldr	r0, [pc, #12]	; (80089e8 <USBD_LL_Init+0x94>)
 80089da:	f7fb f895 	bl	8003b08 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3708      	adds	r7, #8
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	20002230 	.word	0x20002230

080089ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089f8:	2300      	movs	r3, #0
 80089fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7fa f87e 	bl	8002b04 <HAL_PCD_Start>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 f942 	bl	8008c98 <USBD_Get_USB_Status>
 8008a14:	4603      	mov	r3, r0
 8008a16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b084      	sub	sp, #16
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	4608      	mov	r0, r1
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	461a      	mov	r2, r3
 8008a30:	4603      	mov	r3, r0
 8008a32:	70fb      	strb	r3, [r7, #3]
 8008a34:	460b      	mov	r3, r1
 8008a36:	70bb      	strb	r3, [r7, #2]
 8008a38:	4613      	mov	r3, r2
 8008a3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a4a:	78bb      	ldrb	r3, [r7, #2]
 8008a4c:	883a      	ldrh	r2, [r7, #0]
 8008a4e:	78f9      	ldrb	r1, [r7, #3]
 8008a50:	f7fa fc62 	bl	8003318 <HAL_PCD_EP_Open>
 8008a54:	4603      	mov	r3, r0
 8008a56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f000 f91c 	bl	8008c98 <USBD_Get_USB_Status>
 8008a60:	4603      	mov	r3, r0
 8008a62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b084      	sub	sp, #16
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
 8008a76:	460b      	mov	r3, r1
 8008a78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a88:	78fa      	ldrb	r2, [r7, #3]
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7fa fcab 	bl	80033e8 <HAL_PCD_EP_Close>
 8008a92:	4603      	mov	r3, r0
 8008a94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a96:	7bfb      	ldrb	r3, [r7, #15]
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f000 f8fd 	bl	8008c98 <USBD_Get_USB_Status>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008aa2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ac6:	78fa      	ldrb	r2, [r7, #3]
 8008ac8:	4611      	mov	r1, r2
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7fa fd83 	bl	80035d6 <HAL_PCD_EP_SetStall>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ad4:	7bfb      	ldrb	r3, [r7, #15]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f000 f8de 	bl	8008c98 <USBD_Get_USB_Status>
 8008adc:	4603      	mov	r3, r0
 8008ade:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ae0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b084      	sub	sp, #16
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
 8008af2:	460b      	mov	r3, r1
 8008af4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008afa:	2300      	movs	r3, #0
 8008afc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b04:	78fa      	ldrb	r2, [r7, #3]
 8008b06:	4611      	mov	r1, r2
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7fa fdc8 	bl	800369e <HAL_PCD_EP_ClrStall>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
 8008b14:	4618      	mov	r0, r3
 8008b16:	f000 f8bf 	bl	8008c98 <USBD_Get_USB_Status>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	460b      	mov	r3, r1
 8008b32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008b3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	da0b      	bge.n	8008b5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008b44:	78fb      	ldrb	r3, [r7, #3]
 8008b46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b4a:	68f9      	ldr	r1, [r7, #12]
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	00db      	lsls	r3, r3, #3
 8008b50:	1a9b      	subs	r3, r3, r2
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	440b      	add	r3, r1
 8008b56:	333e      	adds	r3, #62	; 0x3e
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	e00b      	b.n	8008b74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008b5c:	78fb      	ldrb	r3, [r7, #3]
 8008b5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b62:	68f9      	ldr	r1, [r7, #12]
 8008b64:	4613      	mov	r3, r2
 8008b66:	00db      	lsls	r3, r3, #3
 8008b68:	1a9b      	subs	r3, r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	440b      	add	r3, r1
 8008b6e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008b72:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3714      	adds	r7, #20
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b9a:	78fa      	ldrb	r2, [r7, #3]
 8008b9c:	4611      	mov	r1, r2
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fa fb95 	bl	80032ce <HAL_PCD_SetAddress>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ba8:	7bfb      	ldrb	r3, [r7, #15]
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 f874 	bl	8008c98 <USBD_Get_USB_Status>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b086      	sub	sp, #24
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	60f8      	str	r0, [r7, #12]
 8008bc6:	607a      	str	r2, [r7, #4]
 8008bc8:	603b      	str	r3, [r7, #0]
 8008bca:	460b      	mov	r3, r1
 8008bcc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008bdc:	7af9      	ldrb	r1, [r7, #11]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	f7fa fcae 	bl	8003542 <HAL_PCD_EP_Transmit>
 8008be6:	4603      	mov	r3, r0
 8008be8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bea:	7dfb      	ldrb	r3, [r7, #23]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 f853 	bl	8008c98 <USBD_Get_USB_Status>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bf6:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3718      	adds	r7, #24
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	607a      	str	r2, [r7, #4]
 8008c0a:	603b      	str	r3, [r7, #0]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c14:	2300      	movs	r3, #0
 8008c16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008c1e:	7af9      	ldrb	r1, [r7, #11]
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	f7fa fc2a 	bl	800347c <HAL_PCD_EP_Receive>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c2c:	7dfb      	ldrb	r3, [r7, #23]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f000 f832 	bl	8008c98 <USBD_Get_USB_Status>
 8008c34:	4603      	mov	r3, r0
 8008c36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c38:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3718      	adds	r7, #24
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b082      	sub	sp, #8
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c54:	78fa      	ldrb	r2, [r7, #3]
 8008c56:	4611      	mov	r1, r2
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7fa fc5a 	bl	8003512 <HAL_PCD_EP_GetRxCount>
 8008c5e:	4603      	mov	r3, r0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008c70:	4b03      	ldr	r3, [pc, #12]	; (8008c80 <USBD_static_malloc+0x18>)
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	370c      	adds	r7, #12
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	20000618 	.word	0x20000618

08008c84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]

}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ca6:	79fb      	ldrb	r3, [r7, #7]
 8008ca8:	2b03      	cmp	r3, #3
 8008caa:	d817      	bhi.n	8008cdc <USBD_Get_USB_Status+0x44>
 8008cac:	a201      	add	r2, pc, #4	; (adr r2, 8008cb4 <USBD_Get_USB_Status+0x1c>)
 8008cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb2:	bf00      	nop
 8008cb4:	08008cc5 	.word	0x08008cc5
 8008cb8:	08008ccb 	.word	0x08008ccb
 8008cbc:	08008cd1 	.word	0x08008cd1
 8008cc0:	08008cd7 	.word	0x08008cd7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	73fb      	strb	r3, [r7, #15]
    break;
 8008cc8:	e00b      	b.n	8008ce2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	73fb      	strb	r3, [r7, #15]
    break;
 8008cce:	e008      	b.n	8008ce2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	73fb      	strb	r3, [r7, #15]
    break;
 8008cd4:	e005      	b.n	8008ce2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	73fb      	strb	r3, [r7, #15]
    break;
 8008cda:	e002      	b.n	8008ce2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	73fb      	strb	r3, [r7, #15]
    break;
 8008ce0:	bf00      	nop
  }
  return usb_status;
 8008ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <__errno>:
 8008cf0:	4b01      	ldr	r3, [pc, #4]	; (8008cf8 <__errno+0x8>)
 8008cf2:	6818      	ldr	r0, [r3, #0]
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	20000188 	.word	0x20000188

08008cfc <__libc_init_array>:
 8008cfc:	b570      	push	{r4, r5, r6, lr}
 8008cfe:	4d0d      	ldr	r5, [pc, #52]	; (8008d34 <__libc_init_array+0x38>)
 8008d00:	4c0d      	ldr	r4, [pc, #52]	; (8008d38 <__libc_init_array+0x3c>)
 8008d02:	1b64      	subs	r4, r4, r5
 8008d04:	10a4      	asrs	r4, r4, #2
 8008d06:	2600      	movs	r6, #0
 8008d08:	42a6      	cmp	r6, r4
 8008d0a:	d109      	bne.n	8008d20 <__libc_init_array+0x24>
 8008d0c:	4d0b      	ldr	r5, [pc, #44]	; (8008d3c <__libc_init_array+0x40>)
 8008d0e:	4c0c      	ldr	r4, [pc, #48]	; (8008d40 <__libc_init_array+0x44>)
 8008d10:	f000 fc4e 	bl	80095b0 <_init>
 8008d14:	1b64      	subs	r4, r4, r5
 8008d16:	10a4      	asrs	r4, r4, #2
 8008d18:	2600      	movs	r6, #0
 8008d1a:	42a6      	cmp	r6, r4
 8008d1c:	d105      	bne.n	8008d2a <__libc_init_array+0x2e>
 8008d1e:	bd70      	pop	{r4, r5, r6, pc}
 8008d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d24:	4798      	blx	r3
 8008d26:	3601      	adds	r6, #1
 8008d28:	e7ee      	b.n	8008d08 <__libc_init_array+0xc>
 8008d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d2e:	4798      	blx	r3
 8008d30:	3601      	adds	r6, #1
 8008d32:	e7f2      	b.n	8008d1a <__libc_init_array+0x1e>
 8008d34:	0800a440 	.word	0x0800a440
 8008d38:	0800a440 	.word	0x0800a440
 8008d3c:	0800a440 	.word	0x0800a440
 8008d40:	0800a444 	.word	0x0800a444

08008d44 <memcpy>:
 8008d44:	440a      	add	r2, r1
 8008d46:	4291      	cmp	r1, r2
 8008d48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008d4c:	d100      	bne.n	8008d50 <memcpy+0xc>
 8008d4e:	4770      	bx	lr
 8008d50:	b510      	push	{r4, lr}
 8008d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d5a:	4291      	cmp	r1, r2
 8008d5c:	d1f9      	bne.n	8008d52 <memcpy+0xe>
 8008d5e:	bd10      	pop	{r4, pc}

08008d60 <memset>:
 8008d60:	4402      	add	r2, r0
 8008d62:	4603      	mov	r3, r0
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d100      	bne.n	8008d6a <memset+0xa>
 8008d68:	4770      	bx	lr
 8008d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8008d6e:	e7f9      	b.n	8008d64 <memset+0x4>

08008d70 <siprintf>:
 8008d70:	b40e      	push	{r1, r2, r3}
 8008d72:	b500      	push	{lr}
 8008d74:	b09c      	sub	sp, #112	; 0x70
 8008d76:	ab1d      	add	r3, sp, #116	; 0x74
 8008d78:	9002      	str	r0, [sp, #8]
 8008d7a:	9006      	str	r0, [sp, #24]
 8008d7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d80:	4809      	ldr	r0, [pc, #36]	; (8008da8 <siprintf+0x38>)
 8008d82:	9107      	str	r1, [sp, #28]
 8008d84:	9104      	str	r1, [sp, #16]
 8008d86:	4909      	ldr	r1, [pc, #36]	; (8008dac <siprintf+0x3c>)
 8008d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d8c:	9105      	str	r1, [sp, #20]
 8008d8e:	6800      	ldr	r0, [r0, #0]
 8008d90:	9301      	str	r3, [sp, #4]
 8008d92:	a902      	add	r1, sp, #8
 8008d94:	f000 f912 	bl	8008fbc <_svfiprintf_r>
 8008d98:	9b02      	ldr	r3, [sp, #8]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	701a      	strb	r2, [r3, #0]
 8008d9e:	b01c      	add	sp, #112	; 0x70
 8008da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008da4:	b003      	add	sp, #12
 8008da6:	4770      	bx	lr
 8008da8:	20000188 	.word	0x20000188
 8008dac:	ffff0208 	.word	0xffff0208

08008db0 <_free_r>:
 8008db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008db2:	2900      	cmp	r1, #0
 8008db4:	d048      	beq.n	8008e48 <_free_r+0x98>
 8008db6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dba:	9001      	str	r0, [sp, #4]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f1a1 0404 	sub.w	r4, r1, #4
 8008dc2:	bfb8      	it	lt
 8008dc4:	18e4      	addlt	r4, r4, r3
 8008dc6:	f000 fbb9 	bl	800953c <__malloc_lock>
 8008dca:	4a20      	ldr	r2, [pc, #128]	; (8008e4c <_free_r+0x9c>)
 8008dcc:	9801      	ldr	r0, [sp, #4]
 8008dce:	6813      	ldr	r3, [r2, #0]
 8008dd0:	4615      	mov	r5, r2
 8008dd2:	b933      	cbnz	r3, 8008de2 <_free_r+0x32>
 8008dd4:	6063      	str	r3, [r4, #4]
 8008dd6:	6014      	str	r4, [r2, #0]
 8008dd8:	b003      	add	sp, #12
 8008dda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008dde:	f000 bbb3 	b.w	8009548 <__malloc_unlock>
 8008de2:	42a3      	cmp	r3, r4
 8008de4:	d90b      	bls.n	8008dfe <_free_r+0x4e>
 8008de6:	6821      	ldr	r1, [r4, #0]
 8008de8:	1862      	adds	r2, r4, r1
 8008dea:	4293      	cmp	r3, r2
 8008dec:	bf04      	itt	eq
 8008dee:	681a      	ldreq	r2, [r3, #0]
 8008df0:	685b      	ldreq	r3, [r3, #4]
 8008df2:	6063      	str	r3, [r4, #4]
 8008df4:	bf04      	itt	eq
 8008df6:	1852      	addeq	r2, r2, r1
 8008df8:	6022      	streq	r2, [r4, #0]
 8008dfa:	602c      	str	r4, [r5, #0]
 8008dfc:	e7ec      	b.n	8008dd8 <_free_r+0x28>
 8008dfe:	461a      	mov	r2, r3
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	b10b      	cbz	r3, 8008e08 <_free_r+0x58>
 8008e04:	42a3      	cmp	r3, r4
 8008e06:	d9fa      	bls.n	8008dfe <_free_r+0x4e>
 8008e08:	6811      	ldr	r1, [r2, #0]
 8008e0a:	1855      	adds	r5, r2, r1
 8008e0c:	42a5      	cmp	r5, r4
 8008e0e:	d10b      	bne.n	8008e28 <_free_r+0x78>
 8008e10:	6824      	ldr	r4, [r4, #0]
 8008e12:	4421      	add	r1, r4
 8008e14:	1854      	adds	r4, r2, r1
 8008e16:	42a3      	cmp	r3, r4
 8008e18:	6011      	str	r1, [r2, #0]
 8008e1a:	d1dd      	bne.n	8008dd8 <_free_r+0x28>
 8008e1c:	681c      	ldr	r4, [r3, #0]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	6053      	str	r3, [r2, #4]
 8008e22:	4421      	add	r1, r4
 8008e24:	6011      	str	r1, [r2, #0]
 8008e26:	e7d7      	b.n	8008dd8 <_free_r+0x28>
 8008e28:	d902      	bls.n	8008e30 <_free_r+0x80>
 8008e2a:	230c      	movs	r3, #12
 8008e2c:	6003      	str	r3, [r0, #0]
 8008e2e:	e7d3      	b.n	8008dd8 <_free_r+0x28>
 8008e30:	6825      	ldr	r5, [r4, #0]
 8008e32:	1961      	adds	r1, r4, r5
 8008e34:	428b      	cmp	r3, r1
 8008e36:	bf04      	itt	eq
 8008e38:	6819      	ldreq	r1, [r3, #0]
 8008e3a:	685b      	ldreq	r3, [r3, #4]
 8008e3c:	6063      	str	r3, [r4, #4]
 8008e3e:	bf04      	itt	eq
 8008e40:	1949      	addeq	r1, r1, r5
 8008e42:	6021      	streq	r1, [r4, #0]
 8008e44:	6054      	str	r4, [r2, #4]
 8008e46:	e7c7      	b.n	8008dd8 <_free_r+0x28>
 8008e48:	b003      	add	sp, #12
 8008e4a:	bd30      	pop	{r4, r5, pc}
 8008e4c:	20000838 	.word	0x20000838

08008e50 <_malloc_r>:
 8008e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e52:	1ccd      	adds	r5, r1, #3
 8008e54:	f025 0503 	bic.w	r5, r5, #3
 8008e58:	3508      	adds	r5, #8
 8008e5a:	2d0c      	cmp	r5, #12
 8008e5c:	bf38      	it	cc
 8008e5e:	250c      	movcc	r5, #12
 8008e60:	2d00      	cmp	r5, #0
 8008e62:	4606      	mov	r6, r0
 8008e64:	db01      	blt.n	8008e6a <_malloc_r+0x1a>
 8008e66:	42a9      	cmp	r1, r5
 8008e68:	d903      	bls.n	8008e72 <_malloc_r+0x22>
 8008e6a:	230c      	movs	r3, #12
 8008e6c:	6033      	str	r3, [r6, #0]
 8008e6e:	2000      	movs	r0, #0
 8008e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e72:	f000 fb63 	bl	800953c <__malloc_lock>
 8008e76:	4921      	ldr	r1, [pc, #132]	; (8008efc <_malloc_r+0xac>)
 8008e78:	680a      	ldr	r2, [r1, #0]
 8008e7a:	4614      	mov	r4, r2
 8008e7c:	b99c      	cbnz	r4, 8008ea6 <_malloc_r+0x56>
 8008e7e:	4f20      	ldr	r7, [pc, #128]	; (8008f00 <_malloc_r+0xb0>)
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	b923      	cbnz	r3, 8008e8e <_malloc_r+0x3e>
 8008e84:	4621      	mov	r1, r4
 8008e86:	4630      	mov	r0, r6
 8008e88:	f000 fb2c 	bl	80094e4 <_sbrk_r>
 8008e8c:	6038      	str	r0, [r7, #0]
 8008e8e:	4629      	mov	r1, r5
 8008e90:	4630      	mov	r0, r6
 8008e92:	f000 fb27 	bl	80094e4 <_sbrk_r>
 8008e96:	1c43      	adds	r3, r0, #1
 8008e98:	d123      	bne.n	8008ee2 <_malloc_r+0x92>
 8008e9a:	230c      	movs	r3, #12
 8008e9c:	6033      	str	r3, [r6, #0]
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	f000 fb52 	bl	8009548 <__malloc_unlock>
 8008ea4:	e7e3      	b.n	8008e6e <_malloc_r+0x1e>
 8008ea6:	6823      	ldr	r3, [r4, #0]
 8008ea8:	1b5b      	subs	r3, r3, r5
 8008eaa:	d417      	bmi.n	8008edc <_malloc_r+0x8c>
 8008eac:	2b0b      	cmp	r3, #11
 8008eae:	d903      	bls.n	8008eb8 <_malloc_r+0x68>
 8008eb0:	6023      	str	r3, [r4, #0]
 8008eb2:	441c      	add	r4, r3
 8008eb4:	6025      	str	r5, [r4, #0]
 8008eb6:	e004      	b.n	8008ec2 <_malloc_r+0x72>
 8008eb8:	6863      	ldr	r3, [r4, #4]
 8008eba:	42a2      	cmp	r2, r4
 8008ebc:	bf0c      	ite	eq
 8008ebe:	600b      	streq	r3, [r1, #0]
 8008ec0:	6053      	strne	r3, [r2, #4]
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	f000 fb40 	bl	8009548 <__malloc_unlock>
 8008ec8:	f104 000b 	add.w	r0, r4, #11
 8008ecc:	1d23      	adds	r3, r4, #4
 8008ece:	f020 0007 	bic.w	r0, r0, #7
 8008ed2:	1ac2      	subs	r2, r0, r3
 8008ed4:	d0cc      	beq.n	8008e70 <_malloc_r+0x20>
 8008ed6:	1a1b      	subs	r3, r3, r0
 8008ed8:	50a3      	str	r3, [r4, r2]
 8008eda:	e7c9      	b.n	8008e70 <_malloc_r+0x20>
 8008edc:	4622      	mov	r2, r4
 8008ede:	6864      	ldr	r4, [r4, #4]
 8008ee0:	e7cc      	b.n	8008e7c <_malloc_r+0x2c>
 8008ee2:	1cc4      	adds	r4, r0, #3
 8008ee4:	f024 0403 	bic.w	r4, r4, #3
 8008ee8:	42a0      	cmp	r0, r4
 8008eea:	d0e3      	beq.n	8008eb4 <_malloc_r+0x64>
 8008eec:	1a21      	subs	r1, r4, r0
 8008eee:	4630      	mov	r0, r6
 8008ef0:	f000 faf8 	bl	80094e4 <_sbrk_r>
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	d1dd      	bne.n	8008eb4 <_malloc_r+0x64>
 8008ef8:	e7cf      	b.n	8008e9a <_malloc_r+0x4a>
 8008efa:	bf00      	nop
 8008efc:	20000838 	.word	0x20000838
 8008f00:	2000083c 	.word	0x2000083c

08008f04 <__ssputs_r>:
 8008f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f08:	688e      	ldr	r6, [r1, #8]
 8008f0a:	429e      	cmp	r6, r3
 8008f0c:	4682      	mov	sl, r0
 8008f0e:	460c      	mov	r4, r1
 8008f10:	4690      	mov	r8, r2
 8008f12:	461f      	mov	r7, r3
 8008f14:	d838      	bhi.n	8008f88 <__ssputs_r+0x84>
 8008f16:	898a      	ldrh	r2, [r1, #12]
 8008f18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f1c:	d032      	beq.n	8008f84 <__ssputs_r+0x80>
 8008f1e:	6825      	ldr	r5, [r4, #0]
 8008f20:	6909      	ldr	r1, [r1, #16]
 8008f22:	eba5 0901 	sub.w	r9, r5, r1
 8008f26:	6965      	ldr	r5, [r4, #20]
 8008f28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f30:	3301      	adds	r3, #1
 8008f32:	444b      	add	r3, r9
 8008f34:	106d      	asrs	r5, r5, #1
 8008f36:	429d      	cmp	r5, r3
 8008f38:	bf38      	it	cc
 8008f3a:	461d      	movcc	r5, r3
 8008f3c:	0553      	lsls	r3, r2, #21
 8008f3e:	d531      	bpl.n	8008fa4 <__ssputs_r+0xa0>
 8008f40:	4629      	mov	r1, r5
 8008f42:	f7ff ff85 	bl	8008e50 <_malloc_r>
 8008f46:	4606      	mov	r6, r0
 8008f48:	b950      	cbnz	r0, 8008f60 <__ssputs_r+0x5c>
 8008f4a:	230c      	movs	r3, #12
 8008f4c:	f8ca 3000 	str.w	r3, [sl]
 8008f50:	89a3      	ldrh	r3, [r4, #12]
 8008f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f56:	81a3      	strh	r3, [r4, #12]
 8008f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f60:	6921      	ldr	r1, [r4, #16]
 8008f62:	464a      	mov	r2, r9
 8008f64:	f7ff feee 	bl	8008d44 <memcpy>
 8008f68:	89a3      	ldrh	r3, [r4, #12]
 8008f6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f72:	81a3      	strh	r3, [r4, #12]
 8008f74:	6126      	str	r6, [r4, #16]
 8008f76:	6165      	str	r5, [r4, #20]
 8008f78:	444e      	add	r6, r9
 8008f7a:	eba5 0509 	sub.w	r5, r5, r9
 8008f7e:	6026      	str	r6, [r4, #0]
 8008f80:	60a5      	str	r5, [r4, #8]
 8008f82:	463e      	mov	r6, r7
 8008f84:	42be      	cmp	r6, r7
 8008f86:	d900      	bls.n	8008f8a <__ssputs_r+0x86>
 8008f88:	463e      	mov	r6, r7
 8008f8a:	4632      	mov	r2, r6
 8008f8c:	6820      	ldr	r0, [r4, #0]
 8008f8e:	4641      	mov	r1, r8
 8008f90:	f000 faba 	bl	8009508 <memmove>
 8008f94:	68a3      	ldr	r3, [r4, #8]
 8008f96:	6822      	ldr	r2, [r4, #0]
 8008f98:	1b9b      	subs	r3, r3, r6
 8008f9a:	4432      	add	r2, r6
 8008f9c:	60a3      	str	r3, [r4, #8]
 8008f9e:	6022      	str	r2, [r4, #0]
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	e7db      	b.n	8008f5c <__ssputs_r+0x58>
 8008fa4:	462a      	mov	r2, r5
 8008fa6:	f000 fad5 	bl	8009554 <_realloc_r>
 8008faa:	4606      	mov	r6, r0
 8008fac:	2800      	cmp	r0, #0
 8008fae:	d1e1      	bne.n	8008f74 <__ssputs_r+0x70>
 8008fb0:	6921      	ldr	r1, [r4, #16]
 8008fb2:	4650      	mov	r0, sl
 8008fb4:	f7ff fefc 	bl	8008db0 <_free_r>
 8008fb8:	e7c7      	b.n	8008f4a <__ssputs_r+0x46>
	...

08008fbc <_svfiprintf_r>:
 8008fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc0:	4698      	mov	r8, r3
 8008fc2:	898b      	ldrh	r3, [r1, #12]
 8008fc4:	061b      	lsls	r3, r3, #24
 8008fc6:	b09d      	sub	sp, #116	; 0x74
 8008fc8:	4607      	mov	r7, r0
 8008fca:	460d      	mov	r5, r1
 8008fcc:	4614      	mov	r4, r2
 8008fce:	d50e      	bpl.n	8008fee <_svfiprintf_r+0x32>
 8008fd0:	690b      	ldr	r3, [r1, #16]
 8008fd2:	b963      	cbnz	r3, 8008fee <_svfiprintf_r+0x32>
 8008fd4:	2140      	movs	r1, #64	; 0x40
 8008fd6:	f7ff ff3b 	bl	8008e50 <_malloc_r>
 8008fda:	6028      	str	r0, [r5, #0]
 8008fdc:	6128      	str	r0, [r5, #16]
 8008fde:	b920      	cbnz	r0, 8008fea <_svfiprintf_r+0x2e>
 8008fe0:	230c      	movs	r3, #12
 8008fe2:	603b      	str	r3, [r7, #0]
 8008fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fe8:	e0d1      	b.n	800918e <_svfiprintf_r+0x1d2>
 8008fea:	2340      	movs	r3, #64	; 0x40
 8008fec:	616b      	str	r3, [r5, #20]
 8008fee:	2300      	movs	r3, #0
 8008ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ff2:	2320      	movs	r3, #32
 8008ff4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ff8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ffc:	2330      	movs	r3, #48	; 0x30
 8008ffe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80091a8 <_svfiprintf_r+0x1ec>
 8009002:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009006:	f04f 0901 	mov.w	r9, #1
 800900a:	4623      	mov	r3, r4
 800900c:	469a      	mov	sl, r3
 800900e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009012:	b10a      	cbz	r2, 8009018 <_svfiprintf_r+0x5c>
 8009014:	2a25      	cmp	r2, #37	; 0x25
 8009016:	d1f9      	bne.n	800900c <_svfiprintf_r+0x50>
 8009018:	ebba 0b04 	subs.w	fp, sl, r4
 800901c:	d00b      	beq.n	8009036 <_svfiprintf_r+0x7a>
 800901e:	465b      	mov	r3, fp
 8009020:	4622      	mov	r2, r4
 8009022:	4629      	mov	r1, r5
 8009024:	4638      	mov	r0, r7
 8009026:	f7ff ff6d 	bl	8008f04 <__ssputs_r>
 800902a:	3001      	adds	r0, #1
 800902c:	f000 80aa 	beq.w	8009184 <_svfiprintf_r+0x1c8>
 8009030:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009032:	445a      	add	r2, fp
 8009034:	9209      	str	r2, [sp, #36]	; 0x24
 8009036:	f89a 3000 	ldrb.w	r3, [sl]
 800903a:	2b00      	cmp	r3, #0
 800903c:	f000 80a2 	beq.w	8009184 <_svfiprintf_r+0x1c8>
 8009040:	2300      	movs	r3, #0
 8009042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009046:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800904a:	f10a 0a01 	add.w	sl, sl, #1
 800904e:	9304      	str	r3, [sp, #16]
 8009050:	9307      	str	r3, [sp, #28]
 8009052:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009056:	931a      	str	r3, [sp, #104]	; 0x68
 8009058:	4654      	mov	r4, sl
 800905a:	2205      	movs	r2, #5
 800905c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009060:	4851      	ldr	r0, [pc, #324]	; (80091a8 <_svfiprintf_r+0x1ec>)
 8009062:	f7f7 f8bd 	bl	80001e0 <memchr>
 8009066:	9a04      	ldr	r2, [sp, #16]
 8009068:	b9d8      	cbnz	r0, 80090a2 <_svfiprintf_r+0xe6>
 800906a:	06d0      	lsls	r0, r2, #27
 800906c:	bf44      	itt	mi
 800906e:	2320      	movmi	r3, #32
 8009070:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009074:	0711      	lsls	r1, r2, #28
 8009076:	bf44      	itt	mi
 8009078:	232b      	movmi	r3, #43	; 0x2b
 800907a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800907e:	f89a 3000 	ldrb.w	r3, [sl]
 8009082:	2b2a      	cmp	r3, #42	; 0x2a
 8009084:	d015      	beq.n	80090b2 <_svfiprintf_r+0xf6>
 8009086:	9a07      	ldr	r2, [sp, #28]
 8009088:	4654      	mov	r4, sl
 800908a:	2000      	movs	r0, #0
 800908c:	f04f 0c0a 	mov.w	ip, #10
 8009090:	4621      	mov	r1, r4
 8009092:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009096:	3b30      	subs	r3, #48	; 0x30
 8009098:	2b09      	cmp	r3, #9
 800909a:	d94e      	bls.n	800913a <_svfiprintf_r+0x17e>
 800909c:	b1b0      	cbz	r0, 80090cc <_svfiprintf_r+0x110>
 800909e:	9207      	str	r2, [sp, #28]
 80090a0:	e014      	b.n	80090cc <_svfiprintf_r+0x110>
 80090a2:	eba0 0308 	sub.w	r3, r0, r8
 80090a6:	fa09 f303 	lsl.w	r3, r9, r3
 80090aa:	4313      	orrs	r3, r2
 80090ac:	9304      	str	r3, [sp, #16]
 80090ae:	46a2      	mov	sl, r4
 80090b0:	e7d2      	b.n	8009058 <_svfiprintf_r+0x9c>
 80090b2:	9b03      	ldr	r3, [sp, #12]
 80090b4:	1d19      	adds	r1, r3, #4
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	9103      	str	r1, [sp, #12]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	bfbb      	ittet	lt
 80090be:	425b      	neglt	r3, r3
 80090c0:	f042 0202 	orrlt.w	r2, r2, #2
 80090c4:	9307      	strge	r3, [sp, #28]
 80090c6:	9307      	strlt	r3, [sp, #28]
 80090c8:	bfb8      	it	lt
 80090ca:	9204      	strlt	r2, [sp, #16]
 80090cc:	7823      	ldrb	r3, [r4, #0]
 80090ce:	2b2e      	cmp	r3, #46	; 0x2e
 80090d0:	d10c      	bne.n	80090ec <_svfiprintf_r+0x130>
 80090d2:	7863      	ldrb	r3, [r4, #1]
 80090d4:	2b2a      	cmp	r3, #42	; 0x2a
 80090d6:	d135      	bne.n	8009144 <_svfiprintf_r+0x188>
 80090d8:	9b03      	ldr	r3, [sp, #12]
 80090da:	1d1a      	adds	r2, r3, #4
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	9203      	str	r2, [sp, #12]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	bfb8      	it	lt
 80090e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80090e8:	3402      	adds	r4, #2
 80090ea:	9305      	str	r3, [sp, #20]
 80090ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80091b8 <_svfiprintf_r+0x1fc>
 80090f0:	7821      	ldrb	r1, [r4, #0]
 80090f2:	2203      	movs	r2, #3
 80090f4:	4650      	mov	r0, sl
 80090f6:	f7f7 f873 	bl	80001e0 <memchr>
 80090fa:	b140      	cbz	r0, 800910e <_svfiprintf_r+0x152>
 80090fc:	2340      	movs	r3, #64	; 0x40
 80090fe:	eba0 000a 	sub.w	r0, r0, sl
 8009102:	fa03 f000 	lsl.w	r0, r3, r0
 8009106:	9b04      	ldr	r3, [sp, #16]
 8009108:	4303      	orrs	r3, r0
 800910a:	3401      	adds	r4, #1
 800910c:	9304      	str	r3, [sp, #16]
 800910e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009112:	4826      	ldr	r0, [pc, #152]	; (80091ac <_svfiprintf_r+0x1f0>)
 8009114:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009118:	2206      	movs	r2, #6
 800911a:	f7f7 f861 	bl	80001e0 <memchr>
 800911e:	2800      	cmp	r0, #0
 8009120:	d038      	beq.n	8009194 <_svfiprintf_r+0x1d8>
 8009122:	4b23      	ldr	r3, [pc, #140]	; (80091b0 <_svfiprintf_r+0x1f4>)
 8009124:	bb1b      	cbnz	r3, 800916e <_svfiprintf_r+0x1b2>
 8009126:	9b03      	ldr	r3, [sp, #12]
 8009128:	3307      	adds	r3, #7
 800912a:	f023 0307 	bic.w	r3, r3, #7
 800912e:	3308      	adds	r3, #8
 8009130:	9303      	str	r3, [sp, #12]
 8009132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009134:	4433      	add	r3, r6
 8009136:	9309      	str	r3, [sp, #36]	; 0x24
 8009138:	e767      	b.n	800900a <_svfiprintf_r+0x4e>
 800913a:	fb0c 3202 	mla	r2, ip, r2, r3
 800913e:	460c      	mov	r4, r1
 8009140:	2001      	movs	r0, #1
 8009142:	e7a5      	b.n	8009090 <_svfiprintf_r+0xd4>
 8009144:	2300      	movs	r3, #0
 8009146:	3401      	adds	r4, #1
 8009148:	9305      	str	r3, [sp, #20]
 800914a:	4619      	mov	r1, r3
 800914c:	f04f 0c0a 	mov.w	ip, #10
 8009150:	4620      	mov	r0, r4
 8009152:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009156:	3a30      	subs	r2, #48	; 0x30
 8009158:	2a09      	cmp	r2, #9
 800915a:	d903      	bls.n	8009164 <_svfiprintf_r+0x1a8>
 800915c:	2b00      	cmp	r3, #0
 800915e:	d0c5      	beq.n	80090ec <_svfiprintf_r+0x130>
 8009160:	9105      	str	r1, [sp, #20]
 8009162:	e7c3      	b.n	80090ec <_svfiprintf_r+0x130>
 8009164:	fb0c 2101 	mla	r1, ip, r1, r2
 8009168:	4604      	mov	r4, r0
 800916a:	2301      	movs	r3, #1
 800916c:	e7f0      	b.n	8009150 <_svfiprintf_r+0x194>
 800916e:	ab03      	add	r3, sp, #12
 8009170:	9300      	str	r3, [sp, #0]
 8009172:	462a      	mov	r2, r5
 8009174:	4b0f      	ldr	r3, [pc, #60]	; (80091b4 <_svfiprintf_r+0x1f8>)
 8009176:	a904      	add	r1, sp, #16
 8009178:	4638      	mov	r0, r7
 800917a:	f3af 8000 	nop.w
 800917e:	1c42      	adds	r2, r0, #1
 8009180:	4606      	mov	r6, r0
 8009182:	d1d6      	bne.n	8009132 <_svfiprintf_r+0x176>
 8009184:	89ab      	ldrh	r3, [r5, #12]
 8009186:	065b      	lsls	r3, r3, #25
 8009188:	f53f af2c 	bmi.w	8008fe4 <_svfiprintf_r+0x28>
 800918c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800918e:	b01d      	add	sp, #116	; 0x74
 8009190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009194:	ab03      	add	r3, sp, #12
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	462a      	mov	r2, r5
 800919a:	4b06      	ldr	r3, [pc, #24]	; (80091b4 <_svfiprintf_r+0x1f8>)
 800919c:	a904      	add	r1, sp, #16
 800919e:	4638      	mov	r0, r7
 80091a0:	f000 f87a 	bl	8009298 <_printf_i>
 80091a4:	e7eb      	b.n	800917e <_svfiprintf_r+0x1c2>
 80091a6:	bf00      	nop
 80091a8:	0800a3a4 	.word	0x0800a3a4
 80091ac:	0800a3ae 	.word	0x0800a3ae
 80091b0:	00000000 	.word	0x00000000
 80091b4:	08008f05 	.word	0x08008f05
 80091b8:	0800a3aa 	.word	0x0800a3aa

080091bc <_printf_common>:
 80091bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091c0:	4616      	mov	r6, r2
 80091c2:	4699      	mov	r9, r3
 80091c4:	688a      	ldr	r2, [r1, #8]
 80091c6:	690b      	ldr	r3, [r1, #16]
 80091c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091cc:	4293      	cmp	r3, r2
 80091ce:	bfb8      	it	lt
 80091d0:	4613      	movlt	r3, r2
 80091d2:	6033      	str	r3, [r6, #0]
 80091d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091d8:	4607      	mov	r7, r0
 80091da:	460c      	mov	r4, r1
 80091dc:	b10a      	cbz	r2, 80091e2 <_printf_common+0x26>
 80091de:	3301      	adds	r3, #1
 80091e0:	6033      	str	r3, [r6, #0]
 80091e2:	6823      	ldr	r3, [r4, #0]
 80091e4:	0699      	lsls	r1, r3, #26
 80091e6:	bf42      	ittt	mi
 80091e8:	6833      	ldrmi	r3, [r6, #0]
 80091ea:	3302      	addmi	r3, #2
 80091ec:	6033      	strmi	r3, [r6, #0]
 80091ee:	6825      	ldr	r5, [r4, #0]
 80091f0:	f015 0506 	ands.w	r5, r5, #6
 80091f4:	d106      	bne.n	8009204 <_printf_common+0x48>
 80091f6:	f104 0a19 	add.w	sl, r4, #25
 80091fa:	68e3      	ldr	r3, [r4, #12]
 80091fc:	6832      	ldr	r2, [r6, #0]
 80091fe:	1a9b      	subs	r3, r3, r2
 8009200:	42ab      	cmp	r3, r5
 8009202:	dc26      	bgt.n	8009252 <_printf_common+0x96>
 8009204:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009208:	1e13      	subs	r3, r2, #0
 800920a:	6822      	ldr	r2, [r4, #0]
 800920c:	bf18      	it	ne
 800920e:	2301      	movne	r3, #1
 8009210:	0692      	lsls	r2, r2, #26
 8009212:	d42b      	bmi.n	800926c <_printf_common+0xb0>
 8009214:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009218:	4649      	mov	r1, r9
 800921a:	4638      	mov	r0, r7
 800921c:	47c0      	blx	r8
 800921e:	3001      	adds	r0, #1
 8009220:	d01e      	beq.n	8009260 <_printf_common+0xa4>
 8009222:	6823      	ldr	r3, [r4, #0]
 8009224:	68e5      	ldr	r5, [r4, #12]
 8009226:	6832      	ldr	r2, [r6, #0]
 8009228:	f003 0306 	and.w	r3, r3, #6
 800922c:	2b04      	cmp	r3, #4
 800922e:	bf08      	it	eq
 8009230:	1aad      	subeq	r5, r5, r2
 8009232:	68a3      	ldr	r3, [r4, #8]
 8009234:	6922      	ldr	r2, [r4, #16]
 8009236:	bf0c      	ite	eq
 8009238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800923c:	2500      	movne	r5, #0
 800923e:	4293      	cmp	r3, r2
 8009240:	bfc4      	itt	gt
 8009242:	1a9b      	subgt	r3, r3, r2
 8009244:	18ed      	addgt	r5, r5, r3
 8009246:	2600      	movs	r6, #0
 8009248:	341a      	adds	r4, #26
 800924a:	42b5      	cmp	r5, r6
 800924c:	d11a      	bne.n	8009284 <_printf_common+0xc8>
 800924e:	2000      	movs	r0, #0
 8009250:	e008      	b.n	8009264 <_printf_common+0xa8>
 8009252:	2301      	movs	r3, #1
 8009254:	4652      	mov	r2, sl
 8009256:	4649      	mov	r1, r9
 8009258:	4638      	mov	r0, r7
 800925a:	47c0      	blx	r8
 800925c:	3001      	adds	r0, #1
 800925e:	d103      	bne.n	8009268 <_printf_common+0xac>
 8009260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009268:	3501      	adds	r5, #1
 800926a:	e7c6      	b.n	80091fa <_printf_common+0x3e>
 800926c:	18e1      	adds	r1, r4, r3
 800926e:	1c5a      	adds	r2, r3, #1
 8009270:	2030      	movs	r0, #48	; 0x30
 8009272:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009276:	4422      	add	r2, r4
 8009278:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800927c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009280:	3302      	adds	r3, #2
 8009282:	e7c7      	b.n	8009214 <_printf_common+0x58>
 8009284:	2301      	movs	r3, #1
 8009286:	4622      	mov	r2, r4
 8009288:	4649      	mov	r1, r9
 800928a:	4638      	mov	r0, r7
 800928c:	47c0      	blx	r8
 800928e:	3001      	adds	r0, #1
 8009290:	d0e6      	beq.n	8009260 <_printf_common+0xa4>
 8009292:	3601      	adds	r6, #1
 8009294:	e7d9      	b.n	800924a <_printf_common+0x8e>
	...

08009298 <_printf_i>:
 8009298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800929c:	460c      	mov	r4, r1
 800929e:	4691      	mov	r9, r2
 80092a0:	7e27      	ldrb	r7, [r4, #24]
 80092a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80092a4:	2f78      	cmp	r7, #120	; 0x78
 80092a6:	4680      	mov	r8, r0
 80092a8:	469a      	mov	sl, r3
 80092aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092ae:	d807      	bhi.n	80092c0 <_printf_i+0x28>
 80092b0:	2f62      	cmp	r7, #98	; 0x62
 80092b2:	d80a      	bhi.n	80092ca <_printf_i+0x32>
 80092b4:	2f00      	cmp	r7, #0
 80092b6:	f000 80d8 	beq.w	800946a <_printf_i+0x1d2>
 80092ba:	2f58      	cmp	r7, #88	; 0x58
 80092bc:	f000 80a3 	beq.w	8009406 <_printf_i+0x16e>
 80092c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80092c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80092c8:	e03a      	b.n	8009340 <_printf_i+0xa8>
 80092ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80092ce:	2b15      	cmp	r3, #21
 80092d0:	d8f6      	bhi.n	80092c0 <_printf_i+0x28>
 80092d2:	a001      	add	r0, pc, #4	; (adr r0, 80092d8 <_printf_i+0x40>)
 80092d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80092d8:	08009331 	.word	0x08009331
 80092dc:	08009345 	.word	0x08009345
 80092e0:	080092c1 	.word	0x080092c1
 80092e4:	080092c1 	.word	0x080092c1
 80092e8:	080092c1 	.word	0x080092c1
 80092ec:	080092c1 	.word	0x080092c1
 80092f0:	08009345 	.word	0x08009345
 80092f4:	080092c1 	.word	0x080092c1
 80092f8:	080092c1 	.word	0x080092c1
 80092fc:	080092c1 	.word	0x080092c1
 8009300:	080092c1 	.word	0x080092c1
 8009304:	08009451 	.word	0x08009451
 8009308:	08009375 	.word	0x08009375
 800930c:	08009433 	.word	0x08009433
 8009310:	080092c1 	.word	0x080092c1
 8009314:	080092c1 	.word	0x080092c1
 8009318:	08009473 	.word	0x08009473
 800931c:	080092c1 	.word	0x080092c1
 8009320:	08009375 	.word	0x08009375
 8009324:	080092c1 	.word	0x080092c1
 8009328:	080092c1 	.word	0x080092c1
 800932c:	0800943b 	.word	0x0800943b
 8009330:	680b      	ldr	r3, [r1, #0]
 8009332:	1d1a      	adds	r2, r3, #4
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	600a      	str	r2, [r1, #0]
 8009338:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800933c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009340:	2301      	movs	r3, #1
 8009342:	e0a3      	b.n	800948c <_printf_i+0x1f4>
 8009344:	6825      	ldr	r5, [r4, #0]
 8009346:	6808      	ldr	r0, [r1, #0]
 8009348:	062e      	lsls	r6, r5, #24
 800934a:	f100 0304 	add.w	r3, r0, #4
 800934e:	d50a      	bpl.n	8009366 <_printf_i+0xce>
 8009350:	6805      	ldr	r5, [r0, #0]
 8009352:	600b      	str	r3, [r1, #0]
 8009354:	2d00      	cmp	r5, #0
 8009356:	da03      	bge.n	8009360 <_printf_i+0xc8>
 8009358:	232d      	movs	r3, #45	; 0x2d
 800935a:	426d      	negs	r5, r5
 800935c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009360:	485e      	ldr	r0, [pc, #376]	; (80094dc <_printf_i+0x244>)
 8009362:	230a      	movs	r3, #10
 8009364:	e019      	b.n	800939a <_printf_i+0x102>
 8009366:	f015 0f40 	tst.w	r5, #64	; 0x40
 800936a:	6805      	ldr	r5, [r0, #0]
 800936c:	600b      	str	r3, [r1, #0]
 800936e:	bf18      	it	ne
 8009370:	b22d      	sxthne	r5, r5
 8009372:	e7ef      	b.n	8009354 <_printf_i+0xbc>
 8009374:	680b      	ldr	r3, [r1, #0]
 8009376:	6825      	ldr	r5, [r4, #0]
 8009378:	1d18      	adds	r0, r3, #4
 800937a:	6008      	str	r0, [r1, #0]
 800937c:	0628      	lsls	r0, r5, #24
 800937e:	d501      	bpl.n	8009384 <_printf_i+0xec>
 8009380:	681d      	ldr	r5, [r3, #0]
 8009382:	e002      	b.n	800938a <_printf_i+0xf2>
 8009384:	0669      	lsls	r1, r5, #25
 8009386:	d5fb      	bpl.n	8009380 <_printf_i+0xe8>
 8009388:	881d      	ldrh	r5, [r3, #0]
 800938a:	4854      	ldr	r0, [pc, #336]	; (80094dc <_printf_i+0x244>)
 800938c:	2f6f      	cmp	r7, #111	; 0x6f
 800938e:	bf0c      	ite	eq
 8009390:	2308      	moveq	r3, #8
 8009392:	230a      	movne	r3, #10
 8009394:	2100      	movs	r1, #0
 8009396:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800939a:	6866      	ldr	r6, [r4, #4]
 800939c:	60a6      	str	r6, [r4, #8]
 800939e:	2e00      	cmp	r6, #0
 80093a0:	bfa2      	ittt	ge
 80093a2:	6821      	ldrge	r1, [r4, #0]
 80093a4:	f021 0104 	bicge.w	r1, r1, #4
 80093a8:	6021      	strge	r1, [r4, #0]
 80093aa:	b90d      	cbnz	r5, 80093b0 <_printf_i+0x118>
 80093ac:	2e00      	cmp	r6, #0
 80093ae:	d04d      	beq.n	800944c <_printf_i+0x1b4>
 80093b0:	4616      	mov	r6, r2
 80093b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80093b6:	fb03 5711 	mls	r7, r3, r1, r5
 80093ba:	5dc7      	ldrb	r7, [r0, r7]
 80093bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093c0:	462f      	mov	r7, r5
 80093c2:	42bb      	cmp	r3, r7
 80093c4:	460d      	mov	r5, r1
 80093c6:	d9f4      	bls.n	80093b2 <_printf_i+0x11a>
 80093c8:	2b08      	cmp	r3, #8
 80093ca:	d10b      	bne.n	80093e4 <_printf_i+0x14c>
 80093cc:	6823      	ldr	r3, [r4, #0]
 80093ce:	07df      	lsls	r7, r3, #31
 80093d0:	d508      	bpl.n	80093e4 <_printf_i+0x14c>
 80093d2:	6923      	ldr	r3, [r4, #16]
 80093d4:	6861      	ldr	r1, [r4, #4]
 80093d6:	4299      	cmp	r1, r3
 80093d8:	bfde      	ittt	le
 80093da:	2330      	movle	r3, #48	; 0x30
 80093dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093e0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80093e4:	1b92      	subs	r2, r2, r6
 80093e6:	6122      	str	r2, [r4, #16]
 80093e8:	f8cd a000 	str.w	sl, [sp]
 80093ec:	464b      	mov	r3, r9
 80093ee:	aa03      	add	r2, sp, #12
 80093f0:	4621      	mov	r1, r4
 80093f2:	4640      	mov	r0, r8
 80093f4:	f7ff fee2 	bl	80091bc <_printf_common>
 80093f8:	3001      	adds	r0, #1
 80093fa:	d14c      	bne.n	8009496 <_printf_i+0x1fe>
 80093fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009400:	b004      	add	sp, #16
 8009402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009406:	4835      	ldr	r0, [pc, #212]	; (80094dc <_printf_i+0x244>)
 8009408:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800940c:	6823      	ldr	r3, [r4, #0]
 800940e:	680e      	ldr	r6, [r1, #0]
 8009410:	061f      	lsls	r7, r3, #24
 8009412:	f856 5b04 	ldr.w	r5, [r6], #4
 8009416:	600e      	str	r6, [r1, #0]
 8009418:	d514      	bpl.n	8009444 <_printf_i+0x1ac>
 800941a:	07d9      	lsls	r1, r3, #31
 800941c:	bf44      	itt	mi
 800941e:	f043 0320 	orrmi.w	r3, r3, #32
 8009422:	6023      	strmi	r3, [r4, #0]
 8009424:	b91d      	cbnz	r5, 800942e <_printf_i+0x196>
 8009426:	6823      	ldr	r3, [r4, #0]
 8009428:	f023 0320 	bic.w	r3, r3, #32
 800942c:	6023      	str	r3, [r4, #0]
 800942e:	2310      	movs	r3, #16
 8009430:	e7b0      	b.n	8009394 <_printf_i+0xfc>
 8009432:	6823      	ldr	r3, [r4, #0]
 8009434:	f043 0320 	orr.w	r3, r3, #32
 8009438:	6023      	str	r3, [r4, #0]
 800943a:	2378      	movs	r3, #120	; 0x78
 800943c:	4828      	ldr	r0, [pc, #160]	; (80094e0 <_printf_i+0x248>)
 800943e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009442:	e7e3      	b.n	800940c <_printf_i+0x174>
 8009444:	065e      	lsls	r6, r3, #25
 8009446:	bf48      	it	mi
 8009448:	b2ad      	uxthmi	r5, r5
 800944a:	e7e6      	b.n	800941a <_printf_i+0x182>
 800944c:	4616      	mov	r6, r2
 800944e:	e7bb      	b.n	80093c8 <_printf_i+0x130>
 8009450:	680b      	ldr	r3, [r1, #0]
 8009452:	6826      	ldr	r6, [r4, #0]
 8009454:	6960      	ldr	r0, [r4, #20]
 8009456:	1d1d      	adds	r5, r3, #4
 8009458:	600d      	str	r5, [r1, #0]
 800945a:	0635      	lsls	r5, r6, #24
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	d501      	bpl.n	8009464 <_printf_i+0x1cc>
 8009460:	6018      	str	r0, [r3, #0]
 8009462:	e002      	b.n	800946a <_printf_i+0x1d2>
 8009464:	0671      	lsls	r1, r6, #25
 8009466:	d5fb      	bpl.n	8009460 <_printf_i+0x1c8>
 8009468:	8018      	strh	r0, [r3, #0]
 800946a:	2300      	movs	r3, #0
 800946c:	6123      	str	r3, [r4, #16]
 800946e:	4616      	mov	r6, r2
 8009470:	e7ba      	b.n	80093e8 <_printf_i+0x150>
 8009472:	680b      	ldr	r3, [r1, #0]
 8009474:	1d1a      	adds	r2, r3, #4
 8009476:	600a      	str	r2, [r1, #0]
 8009478:	681e      	ldr	r6, [r3, #0]
 800947a:	6862      	ldr	r2, [r4, #4]
 800947c:	2100      	movs	r1, #0
 800947e:	4630      	mov	r0, r6
 8009480:	f7f6 feae 	bl	80001e0 <memchr>
 8009484:	b108      	cbz	r0, 800948a <_printf_i+0x1f2>
 8009486:	1b80      	subs	r0, r0, r6
 8009488:	6060      	str	r0, [r4, #4]
 800948a:	6863      	ldr	r3, [r4, #4]
 800948c:	6123      	str	r3, [r4, #16]
 800948e:	2300      	movs	r3, #0
 8009490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009494:	e7a8      	b.n	80093e8 <_printf_i+0x150>
 8009496:	6923      	ldr	r3, [r4, #16]
 8009498:	4632      	mov	r2, r6
 800949a:	4649      	mov	r1, r9
 800949c:	4640      	mov	r0, r8
 800949e:	47d0      	blx	sl
 80094a0:	3001      	adds	r0, #1
 80094a2:	d0ab      	beq.n	80093fc <_printf_i+0x164>
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	079b      	lsls	r3, r3, #30
 80094a8:	d413      	bmi.n	80094d2 <_printf_i+0x23a>
 80094aa:	68e0      	ldr	r0, [r4, #12]
 80094ac:	9b03      	ldr	r3, [sp, #12]
 80094ae:	4298      	cmp	r0, r3
 80094b0:	bfb8      	it	lt
 80094b2:	4618      	movlt	r0, r3
 80094b4:	e7a4      	b.n	8009400 <_printf_i+0x168>
 80094b6:	2301      	movs	r3, #1
 80094b8:	4632      	mov	r2, r6
 80094ba:	4649      	mov	r1, r9
 80094bc:	4640      	mov	r0, r8
 80094be:	47d0      	blx	sl
 80094c0:	3001      	adds	r0, #1
 80094c2:	d09b      	beq.n	80093fc <_printf_i+0x164>
 80094c4:	3501      	adds	r5, #1
 80094c6:	68e3      	ldr	r3, [r4, #12]
 80094c8:	9903      	ldr	r1, [sp, #12]
 80094ca:	1a5b      	subs	r3, r3, r1
 80094cc:	42ab      	cmp	r3, r5
 80094ce:	dcf2      	bgt.n	80094b6 <_printf_i+0x21e>
 80094d0:	e7eb      	b.n	80094aa <_printf_i+0x212>
 80094d2:	2500      	movs	r5, #0
 80094d4:	f104 0619 	add.w	r6, r4, #25
 80094d8:	e7f5      	b.n	80094c6 <_printf_i+0x22e>
 80094da:	bf00      	nop
 80094dc:	0800a3b5 	.word	0x0800a3b5
 80094e0:	0800a3c6 	.word	0x0800a3c6

080094e4 <_sbrk_r>:
 80094e4:	b538      	push	{r3, r4, r5, lr}
 80094e6:	4d06      	ldr	r5, [pc, #24]	; (8009500 <_sbrk_r+0x1c>)
 80094e8:	2300      	movs	r3, #0
 80094ea:	4604      	mov	r4, r0
 80094ec:	4608      	mov	r0, r1
 80094ee:	602b      	str	r3, [r5, #0]
 80094f0:	f7f7 fe96 	bl	8001220 <_sbrk>
 80094f4:	1c43      	adds	r3, r0, #1
 80094f6:	d102      	bne.n	80094fe <_sbrk_r+0x1a>
 80094f8:	682b      	ldr	r3, [r5, #0]
 80094fa:	b103      	cbz	r3, 80094fe <_sbrk_r+0x1a>
 80094fc:	6023      	str	r3, [r4, #0]
 80094fe:	bd38      	pop	{r3, r4, r5, pc}
 8009500:	20002644 	.word	0x20002644

08009504 <__retarget_lock_acquire_recursive>:
 8009504:	4770      	bx	lr

08009506 <__retarget_lock_release_recursive>:
 8009506:	4770      	bx	lr

08009508 <memmove>:
 8009508:	4288      	cmp	r0, r1
 800950a:	b510      	push	{r4, lr}
 800950c:	eb01 0402 	add.w	r4, r1, r2
 8009510:	d902      	bls.n	8009518 <memmove+0x10>
 8009512:	4284      	cmp	r4, r0
 8009514:	4623      	mov	r3, r4
 8009516:	d807      	bhi.n	8009528 <memmove+0x20>
 8009518:	1e43      	subs	r3, r0, #1
 800951a:	42a1      	cmp	r1, r4
 800951c:	d008      	beq.n	8009530 <memmove+0x28>
 800951e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009522:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009526:	e7f8      	b.n	800951a <memmove+0x12>
 8009528:	4402      	add	r2, r0
 800952a:	4601      	mov	r1, r0
 800952c:	428a      	cmp	r2, r1
 800952e:	d100      	bne.n	8009532 <memmove+0x2a>
 8009530:	bd10      	pop	{r4, pc}
 8009532:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009536:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800953a:	e7f7      	b.n	800952c <memmove+0x24>

0800953c <__malloc_lock>:
 800953c:	4801      	ldr	r0, [pc, #4]	; (8009544 <__malloc_lock+0x8>)
 800953e:	f7ff bfe1 	b.w	8009504 <__retarget_lock_acquire_recursive>
 8009542:	bf00      	nop
 8009544:	2000263c 	.word	0x2000263c

08009548 <__malloc_unlock>:
 8009548:	4801      	ldr	r0, [pc, #4]	; (8009550 <__malloc_unlock+0x8>)
 800954a:	f7ff bfdc 	b.w	8009506 <__retarget_lock_release_recursive>
 800954e:	bf00      	nop
 8009550:	2000263c 	.word	0x2000263c

08009554 <_realloc_r>:
 8009554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009556:	4607      	mov	r7, r0
 8009558:	4614      	mov	r4, r2
 800955a:	460e      	mov	r6, r1
 800955c:	b921      	cbnz	r1, 8009568 <_realloc_r+0x14>
 800955e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009562:	4611      	mov	r1, r2
 8009564:	f7ff bc74 	b.w	8008e50 <_malloc_r>
 8009568:	b922      	cbnz	r2, 8009574 <_realloc_r+0x20>
 800956a:	f7ff fc21 	bl	8008db0 <_free_r>
 800956e:	4625      	mov	r5, r4
 8009570:	4628      	mov	r0, r5
 8009572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009574:	f000 f814 	bl	80095a0 <_malloc_usable_size_r>
 8009578:	42a0      	cmp	r0, r4
 800957a:	d20f      	bcs.n	800959c <_realloc_r+0x48>
 800957c:	4621      	mov	r1, r4
 800957e:	4638      	mov	r0, r7
 8009580:	f7ff fc66 	bl	8008e50 <_malloc_r>
 8009584:	4605      	mov	r5, r0
 8009586:	2800      	cmp	r0, #0
 8009588:	d0f2      	beq.n	8009570 <_realloc_r+0x1c>
 800958a:	4631      	mov	r1, r6
 800958c:	4622      	mov	r2, r4
 800958e:	f7ff fbd9 	bl	8008d44 <memcpy>
 8009592:	4631      	mov	r1, r6
 8009594:	4638      	mov	r0, r7
 8009596:	f7ff fc0b 	bl	8008db0 <_free_r>
 800959a:	e7e9      	b.n	8009570 <_realloc_r+0x1c>
 800959c:	4635      	mov	r5, r6
 800959e:	e7e7      	b.n	8009570 <_realloc_r+0x1c>

080095a0 <_malloc_usable_size_r>:
 80095a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095a4:	1f18      	subs	r0, r3, #4
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	bfbc      	itt	lt
 80095aa:	580b      	ldrlt	r3, [r1, r0]
 80095ac:	18c0      	addlt	r0, r0, r3
 80095ae:	4770      	bx	lr

080095b0 <_init>:
 80095b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095b2:	bf00      	nop
 80095b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095b6:	bc08      	pop	{r3}
 80095b8:	469e      	mov	lr, r3
 80095ba:	4770      	bx	lr

080095bc <_fini>:
 80095bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095be:	bf00      	nop
 80095c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095c2:	bc08      	pop	{r3}
 80095c4:	469e      	mov	lr, r3
 80095c6:	4770      	bx	lr
