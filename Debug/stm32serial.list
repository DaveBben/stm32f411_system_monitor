
stm32serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fe8  0800b870  0800b870  0001b870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c858  0800c858  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c858  0800c858  0001c858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c860  0800c860  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c860  0800c860  0001c860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c864  0800c864  0001c864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000244c  200001ec  0800ca54  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002638  0800ca54  00022638  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c9c1  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d8c  00000000  00000000  0003cbdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  00040970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001a0ad  00000000  00000000  00041e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00019925  00000000  00000000  0005beb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000932b3  00000000  00000000  000757da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00108a8d  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001310  00000000  00000000  00108ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005dfc  00000000  00000000  00109df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b854 	.word	0x0800b854

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800b854 	.word	0x0800b854

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c70:	f000 b96e 	b.w	8000f50 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	4604      	mov	r4, r0
 8000c94:	468c      	mov	ip, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f040 8083 	bne.w	8000da2 <__udivmoddi4+0x116>
 8000c9c:	428a      	cmp	r2, r1
 8000c9e:	4617      	mov	r7, r2
 8000ca0:	d947      	bls.n	8000d32 <__udivmoddi4+0xa6>
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	b142      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca8:	f1c2 0020 	rsb	r0, r2, #32
 8000cac:	fa24 f000 	lsr.w	r0, r4, r0
 8000cb0:	4091      	lsls	r1, r2
 8000cb2:	4097      	lsls	r7, r2
 8000cb4:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb8:	4094      	lsls	r4, r2
 8000cba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc4:	fa1f fe87 	uxth.w	lr, r7
 8000cc8:	fb08 c116 	mls	r1, r8, r6, ip
 8000ccc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd0:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	d909      	bls.n	8000cec <__udivmoddi4+0x60>
 8000cd8:	18fb      	adds	r3, r7, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cde:	f080 8119 	bcs.w	8000f14 <__udivmoddi4+0x288>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 8116 	bls.w	8000f14 <__udivmoddi4+0x288>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	443b      	add	r3, r7
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x8c>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0a:	f080 8105 	bcs.w	8000f18 <__udivmoddi4+0x28c>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f240 8102 	bls.w	8000f18 <__udivmoddi4+0x28c>
 8000d14:	3802      	subs	r0, #2
 8000d16:	443c      	add	r4, r7
 8000d18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1c:	eba4 040e 	sub.w	r4, r4, lr
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa0>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	b902      	cbnz	r2, 8000d36 <__udivmoddi4+0xaa>
 8000d34:	deff      	udf	#255	; 0xff
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	2a00      	cmp	r2, #0
 8000d3c:	d150      	bne.n	8000de0 <__udivmoddi4+0x154>
 8000d3e:	1bcb      	subs	r3, r1, r7
 8000d40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d44:	fa1f f887 	uxth.w	r8, r7
 8000d48:	2601      	movs	r6, #1
 8000d4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4e:	0c21      	lsrs	r1, r4, #16
 8000d50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d58:	fb08 f30c 	mul.w	r3, r8, ip
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	d907      	bls.n	8000d70 <__udivmoddi4+0xe4>
 8000d60:	1879      	adds	r1, r7, r1
 8000d62:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0xe2>
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	f200 80e9 	bhi.w	8000f40 <__udivmoddi4+0x2b4>
 8000d6e:	4684      	mov	ip, r0
 8000d70:	1ac9      	subs	r1, r1, r3
 8000d72:	b2a3      	uxth	r3, r4
 8000d74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d80:	fb08 f800 	mul.w	r8, r8, r0
 8000d84:	45a0      	cmp	r8, r4
 8000d86:	d907      	bls.n	8000d98 <__udivmoddi4+0x10c>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x10a>
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	f200 80d9 	bhi.w	8000f48 <__udivmoddi4+0x2bc>
 8000d96:	4618      	mov	r0, r3
 8000d98:	eba4 0408 	sub.w	r4, r4, r8
 8000d9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000da0:	e7bf      	b.n	8000d22 <__udivmoddi4+0x96>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0x12e>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80b1 	beq.w	8000f0e <__udivmoddi4+0x282>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x1cc>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0x140>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80b8 	bhi.w	8000f3c <__udivmoddi4+0x2b0>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0103 	sbc.w	r1, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	468c      	mov	ip, r1
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0a8      	beq.n	8000d2c <__udivmoddi4+0xa0>
 8000dda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dde:	e7a5      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f603 	lsr.w	r6, r0, r3
 8000de8:	4097      	lsls	r7, r2
 8000dea:	fa01 f002 	lsl.w	r0, r1, r2
 8000dee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df2:	40d9      	lsrs	r1, r3
 8000df4:	4330      	orrs	r0, r6
 8000df6:	0c03      	lsrs	r3, r0, #16
 8000df8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e08:	fb06 f108 	mul.w	r1, r6, r8
 8000e0c:	4299      	cmp	r1, r3
 8000e0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x19c>
 8000e14:	18fb      	adds	r3, r7, r3
 8000e16:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e1a:	f080 808d 	bcs.w	8000f38 <__udivmoddi4+0x2ac>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 808a 	bls.w	8000f38 <__udivmoddi4+0x2ac>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	443b      	add	r3, r7
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b281      	uxth	r1, r0
 8000e2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e38:	fb00 f308 	mul.w	r3, r0, r8
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x1c4>
 8000e40:	1879      	adds	r1, r7, r1
 8000e42:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e46:	d273      	bcs.n	8000f30 <__udivmoddi4+0x2a4>
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d971      	bls.n	8000f30 <__udivmoddi4+0x2a4>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4439      	add	r1, r7
 8000e50:	1acb      	subs	r3, r1, r3
 8000e52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e56:	e778      	b.n	8000d4a <__udivmoddi4+0xbe>
 8000e58:	f1c6 0c20 	rsb	ip, r6, #32
 8000e5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e64:	431c      	orrs	r4, r3
 8000e66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e76:	431f      	orrs	r7, r3
 8000e78:	0c3b      	lsrs	r3, r7, #16
 8000e7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7e:	fa1f f884 	uxth.w	r8, r4
 8000e82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	fa02 f206 	lsl.w	r2, r2, r6
 8000e94:	fa00 f306 	lsl.w	r3, r0, r6
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x220>
 8000e9a:	1861      	adds	r1, r4, r1
 8000e9c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ea0:	d248      	bcs.n	8000f34 <__udivmoddi4+0x2a8>
 8000ea2:	458a      	cmp	sl, r1
 8000ea4:	d946      	bls.n	8000f34 <__udivmoddi4+0x2a8>
 8000ea6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eaa:	4421      	add	r1, r4
 8000eac:	eba1 010a 	sub.w	r1, r1, sl
 8000eb0:	b2bf      	uxth	r7, r7
 8000eb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ebe:	fb00 f808 	mul.w	r8, r0, r8
 8000ec2:	45b8      	cmp	r8, r7
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x24a>
 8000ec6:	19e7      	adds	r7, r4, r7
 8000ec8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ecc:	d22e      	bcs.n	8000f2c <__udivmoddi4+0x2a0>
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d92c      	bls.n	8000f2c <__udivmoddi4+0x2a0>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4427      	add	r7, r4
 8000ed6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eda:	eba7 0708 	sub.w	r7, r7, r8
 8000ede:	fba0 8902 	umull	r8, r9, r0, r2
 8000ee2:	454f      	cmp	r7, r9
 8000ee4:	46c6      	mov	lr, r8
 8000ee6:	4649      	mov	r1, r9
 8000ee8:	d31a      	bcc.n	8000f20 <__udivmoddi4+0x294>
 8000eea:	d017      	beq.n	8000f1c <__udivmoddi4+0x290>
 8000eec:	b15d      	cbz	r5, 8000f06 <__udivmoddi4+0x27a>
 8000eee:	ebb3 020e 	subs.w	r2, r3, lr
 8000ef2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000efa:	40f2      	lsrs	r2, r6
 8000efc:	ea4c 0202 	orr.w	r2, ip, r2
 8000f00:	40f7      	lsrs	r7, r6
 8000f02:	e9c5 2700 	strd	r2, r7, [r5]
 8000f06:	2600      	movs	r6, #0
 8000f08:	4631      	mov	r1, r6
 8000f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0e:	462e      	mov	r6, r5
 8000f10:	4628      	mov	r0, r5
 8000f12:	e70b      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000f14:	4606      	mov	r6, r0
 8000f16:	e6e9      	b.n	8000cec <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fd      	b.n	8000d18 <__udivmoddi4+0x8c>
 8000f1c:	4543      	cmp	r3, r8
 8000f1e:	d2e5      	bcs.n	8000eec <__udivmoddi4+0x260>
 8000f20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f24:	eb69 0104 	sbc.w	r1, r9, r4
 8000f28:	3801      	subs	r0, #1
 8000f2a:	e7df      	b.n	8000eec <__udivmoddi4+0x260>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	e7d2      	b.n	8000ed6 <__udivmoddi4+0x24a>
 8000f30:	4660      	mov	r0, ip
 8000f32:	e78d      	b.n	8000e50 <__udivmoddi4+0x1c4>
 8000f34:	4681      	mov	r9, r0
 8000f36:	e7b9      	b.n	8000eac <__udivmoddi4+0x220>
 8000f38:	4666      	mov	r6, ip
 8000f3a:	e775      	b.n	8000e28 <__udivmoddi4+0x19c>
 8000f3c:	4630      	mov	r0, r6
 8000f3e:	e74a      	b.n	8000dd6 <__udivmoddi4+0x14a>
 8000f40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f44:	4439      	add	r1, r7
 8000f46:	e713      	b.n	8000d70 <__udivmoddi4+0xe4>
 8000f48:	3802      	subs	r0, #2
 8000f4a:	443c      	add	r4, r7
 8000f4c:	e724      	b.n	8000d98 <__udivmoddi4+0x10c>
 8000f4e:	bf00      	nop

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <updateDisplay>:
// Copy all data from local screenbuffer to the screen
	ssd1306_UpdateScreen(&hi2c1);

}

void updateDisplay(struct System *system) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]

	// ssd1306_Fill(Black);
	ssd1306_UpdateScreen(&hi2c1);
 8000f5c:	4813      	ldr	r0, [pc, #76]	; (8000fac <updateDisplay+0x58>)
 8000f5e:	f000 fd4f 	bl	8001a00 <ssd1306_UpdateScreen>

	char cpu_text[20] = { 0 };
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	f107 0310 	add.w	r3, r7, #16
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]

	sprintf(cpu_text, "CPU %d %d C", system->cpu_util, system->cpu_temp);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	791b      	ldrb	r3, [r3, #4]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	799b      	ldrb	r3, [r3, #6]
 8000f7e:	f107 000c 	add.w	r0, r7, #12
 8000f82:	490b      	ldr	r1, [pc, #44]	; (8000fb0 <updateDisplay+0x5c>)
 8000f84:	f008 ffe2 	bl	8009f4c <siprintf>

	// Write data to local screenbuffer
	ssd1306_SetCursor(0, 15);
 8000f88:	210f      	movs	r1, #15
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f000 fe70 	bl	8001c70 <ssd1306_SetCursor>
	ssd1306_WriteString(cpu_text, Font_11x18, White);
 8000f90:	4a08      	ldr	r2, [pc, #32]	; (8000fb4 <updateDisplay+0x60>)
 8000f92:	f107 000c 	add.w	r0, r7, #12
 8000f96:	2301      	movs	r3, #1
 8000f98:	ca06      	ldmia	r2, {r1, r2}
 8000f9a:	f000 fe43 	bl	8001c24 <ssd1306_WriteString>

// Copy all data from local screenbuffer to the screen
	ssd1306_UpdateScreen(&hi2c1);
 8000f9e:	4803      	ldr	r0, [pc, #12]	; (8000fac <updateDisplay+0x58>)
 8000fa0:	f000 fd2e 	bl	8001a00 <ssd1306_UpdateScreen>

}
 8000fa4:	bf00      	nop
 8000fa6:	3720      	adds	r7, #32
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200008d4 	.word	0x200008d4
 8000fb0:	0800b870 	.word	0x0800b870
 8000fb4:	20000000 	.word	0x20000000

08000fb8 <Set_LED>:

void Set_LED(int LEDnum, int Red, int Green, int Blue) {
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
 8000fc4:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	b2d9      	uxtb	r1, r3
 8000fca:	4a11      	ldr	r2, [pc, #68]	; (8001010 <Set_LED+0x58>)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	b2d9      	uxtb	r1, r3
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <Set_LED+0x58>)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	460a      	mov	r2, r1
 8000fe0:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	b2d9      	uxtb	r1, r3
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <Set_LED+0x58>)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	460a      	mov	r2, r1
 8000ff0:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	b2d9      	uxtb	r1, r3
 8000ff6:	4a06      	ldr	r2, [pc, #24]	; (8001010 <Set_LED+0x58>)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	460a      	mov	r2, r1
 8001000:	70da      	strb	r2, [r3, #3]
}
 8001002:	bf00      	nop
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	200008a4 	.word	0x200008a4
 8001014:	00000000 	.word	0x00000000

08001018 <Set_Brightness>:

void Set_Brightness(int brightness)  // 0-45
{
 8001018:	b5b0      	push	{r4, r5, r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b2d      	cmp	r3, #45	; 0x2d
 8001024:	dd01      	ble.n	800102a <Set_Brightness+0x12>
		brightness = 45;
 8001026:	232d      	movs	r3, #45	; 0x2d
 8001028:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < MAX_LED; i++) {
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	e060      	b.n	80010f2 <Set_Brightness+0xda>
		LED_Mod[i][0] = LED_Data[i][0];
 8001030:	4a37      	ldr	r2, [pc, #220]	; (8001110 <Set_Brightness+0xf8>)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8001038:	4a36      	ldr	r2, [pc, #216]	; (8001114 <Set_Brightness+0xfc>)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; j++) {
 8001040:	2301      	movs	r3, #1
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	e04f      	b.n	80010e6 <Set_Brightness+0xce>
			float angle = 90 - brightness;  // in degrees
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800104c:	ee07 3a90 	vmov	s15, r3
 8001050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001054:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle * PI / 180;  // in rad
 8001058:	68f8      	ldr	r0, [r7, #12]
 800105a:	f7ff fa75 	bl	8000548 <__aeabi_f2d>
 800105e:	a32a      	add	r3, pc, #168	; (adr r3, 8001108 <Set_Brightness+0xf0>)
 8001060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001064:	f7ff fac8 	bl	80005f8 <__aeabi_dmul>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	4b28      	ldr	r3, [pc, #160]	; (8001118 <Set_Brightness+0x100>)
 8001076:	f7ff fbe9 	bl	800084c <__aeabi_ddiv>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	f7ff fd9b 	bl	8000bbc <__aeabi_d2f>
 8001086:	4603      	mov	r3, r0
 8001088:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j]) / (tan(angle));
 800108a:	4a21      	ldr	r2, [pc, #132]	; (8001110 <Set_Brightness+0xf8>)
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	441a      	add	r2, r3
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4413      	add	r3, r2
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fa43 	bl	8000524 <__aeabi_i2d>
 800109e:	4604      	mov	r4, r0
 80010a0:	460d      	mov	r5, r1
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f7ff fa50 	bl	8000548 <__aeabi_f2d>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	ec43 2b10 	vmov	d0, r2, r3
 80010b0:	f009 fb6e 	bl	800a790 <tan>
 80010b4:	ec53 2b10 	vmov	r2, r3, d0
 80010b8:	4620      	mov	r0, r4
 80010ba:	4629      	mov	r1, r5
 80010bc:	f7ff fbc6 	bl	800084c <__aeabi_ddiv>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	f7ff fd58 	bl	8000b7c <__aeabi_d2uiz>
 80010cc:	4603      	mov	r3, r0
 80010ce:	b2d9      	uxtb	r1, r3
 80010d0:	4a10      	ldr	r2, [pc, #64]	; (8001114 <Set_Brightness+0xfc>)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	441a      	add	r2, r3
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4413      	add	r3, r2
 80010dc:	460a      	mov	r2, r1
 80010de:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; j++) {
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	3301      	adds	r3, #1
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	ddac      	ble.n	8001046 <Set_Brightness+0x2e>
	for (int i = 0; i < MAX_LED; i++) {
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	3301      	adds	r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	2b0b      	cmp	r3, #11
 80010f6:	dd9b      	ble.n	8001030 <Set_Brightness+0x18>
		}
	}

#endif

}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bdb0      	pop	{r4, r5, r7, pc}
 8001102:	bf00      	nop
 8001104:	f3af 8000 	nop.w
 8001108:	53c8d4f1 	.word	0x53c8d4f1
 800110c:	400921fb 	.word	0x400921fb
 8001110:	200008a4 	.word	0x200008a4
 8001114:	20000928 	.word	0x20000928
 8001118:	40668000 	.word	0x40668000

0800111c <WS2812_Send>:

//https://controllerstech.com/interface-ws2812-with-stm32/
void WS2812_Send(void) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
	uint32_t indx = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; i++) {
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	e036      	b.n	800119a <WS2812_Send+0x7e>
#if USE_BRIGHTNESS
		color =
				((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 800112c:	4a2e      	ldr	r2, [pc, #184]	; (80011e8 <WS2812_Send+0xcc>)
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	785b      	ldrb	r3, [r3, #1]
 8001136:	041a      	lsls	r2, r3, #16
 8001138:	492b      	ldr	r1, [pc, #172]	; (80011e8 <WS2812_Send+0xcc>)
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	440b      	add	r3, r1
 8001140:	789b      	ldrb	r3, [r3, #2]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	431a      	orrs	r2, r3
 8001146:	4928      	ldr	r1, [pc, #160]	; (80011e8 <WS2812_Send+0xcc>)
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	78db      	ldrb	r3, [r3, #3]
 8001150:	4313      	orrs	r3, r2
		color =
 8001152:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i = 23; i >= 0; i--) {
 8001154:	2317      	movs	r3, #23
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	e019      	b.n	800118e <WS2812_Send+0x72>
			if (color & (1 << i)) {
 800115a:	2201      	movs	r2, #1
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	461a      	mov	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4013      	ands	r3, r2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d005      	beq.n	8001178 <WS2812_Send+0x5c>
				pwmData[indx] = 60;  // 2/3 of 90
 800116c:	4a1f      	ldr	r2, [pc, #124]	; (80011ec <WS2812_Send+0xd0>)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	213c      	movs	r1, #60	; 0x3c
 8001172:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001176:	e004      	b.n	8001182 <WS2812_Send+0x66>
			}

			else
				pwmData[indx] = 30;  // 1/3 of 90
 8001178:	4a1c      	ldr	r2, [pc, #112]	; (80011ec <WS2812_Send+0xd0>)
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	211e      	movs	r1, #30
 800117e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	3301      	adds	r3, #1
 8001186:	617b      	str	r3, [r7, #20]
		for (int i = 23; i >= 0; i--) {
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	3b01      	subs	r3, #1
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2b00      	cmp	r3, #0
 8001192:	dae2      	bge.n	800115a <WS2812_Send+0x3e>
	for (int i = 0; i < MAX_LED; i++) {
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	3301      	adds	r3, #1
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	2b0b      	cmp	r3, #11
 800119e:	ddc5      	ble.n	800112c <WS2812_Send+0x10>
		}

	}

	for (int i = 0; i < 50; i++) {
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	e00a      	b.n	80011bc <WS2812_Send+0xa0>
		pwmData[indx] = 0;
 80011a6:	4a11      	ldr	r2, [pc, #68]	; (80011ec <WS2812_Send+0xd0>)
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	2100      	movs	r1, #0
 80011ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	3301      	adds	r3, #1
 80011b4:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; i++) {
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	3301      	adds	r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	2b31      	cmp	r3, #49	; 0x31
 80011c0:	ddf1      	ble.n	80011a6 <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*) pwmData, indx);
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	4a09      	ldr	r2, [pc, #36]	; (80011ec <WS2812_Send+0xd0>)
 80011c8:	2100      	movs	r1, #0
 80011ca:	4809      	ldr	r0, [pc, #36]	; (80011f0 <WS2812_Send+0xd4>)
 80011cc:	f004 f88e 	bl	80052ec <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag) {
 80011d0:	bf00      	nop
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <WS2812_Send+0xd8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0fb      	beq.n	80011d2 <WS2812_Send+0xb6>
	};
	datasentflag = 0;
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <WS2812_Send+0xd8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
}
 80011e0:	bf00      	nop
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000928 	.word	0x20000928
 80011ec:	20000958 	.word	0x20000958
 80011f0:	20000bfc 	.word	0x20000bfc
 80011f4:	20000208 	.word	0x20000208

080011f8 <HAL_TIM_PWM_PulseFinishedCallback>:


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001200:	2100      	movs	r1, #0
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001204:	f004 fa22 	bl	800564c <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800120a:	2201      	movs	r2, #1
 800120c:	601a      	str	r2, [r3, #0]
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000bfc 	.word	0x20000bfc
 800121c:	20000208 	.word	0x20000208

08001220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b0c6      	sub	sp, #280	; 0x118
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char msg[11] = "No Data";
 8001226:	4a76      	ldr	r2, [pc, #472]	; (8001400 <main+0x1e0>)
 8001228:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800122c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001230:	e883 0003 	stmia.w	r3, {r0, r1}
 8001234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001238:	2100      	movs	r1, #0
 800123a:	460a      	mov	r2, r1
 800123c:	801a      	strh	r2, [r3, #0]
 800123e:	460a      	mov	r2, r1
 8001240:	709a      	strb	r2, [r3, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001242:	f000 fedb 	bl	8001ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001246:	f000 f8df 	bl	8001408 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800124a:	f000 fa35 	bl	80016b8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800124e:	f008 f897 	bl	8009380 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8001252:	f000 f943 	bl	80014dc <MX_I2C1_Init>
  MX_DMA_Init();
 8001256:	f000 fa0f 	bl	8001678 <MX_DMA_Init>
  MX_TIM1_Init();
 800125a:	f000 f96d 	bl	8001538 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	// Init lcd using one of the stm32HAL i2c typedefs
	if (ssd1306_Init(&hi2c1) != 0) {
 800125e:	4869      	ldr	r0, [pc, #420]	; (8001404 <main+0x1e4>)
 8001260:	f000 fa8a 	bl	8001778 <ssd1306_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <main+0x4e>
		Error_Handler();
 800126a:	f000 fa69 	bl	8001740 <Error_Handler>
	}

//	writeToDisplay(msg);

	char message[20] = { 0 };
 800126e:	2300      	movs	r3, #0
 8001270:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001274:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]

	uint8_t data_frame_buffer[64] = { 0 };
 8001282:	2300      	movs	r3, #0
 8001284:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001288:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800128c:	223c      	movs	r2, #60	; 0x3c
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f008 fe53 	bl	8009f3c <memset>

	DataHeaders headers;



	  Set_LED(0, 255, 0, 0);
 8001296:	2300      	movs	r3, #0
 8001298:	2200      	movs	r2, #0
 800129a:	21ff      	movs	r1, #255	; 0xff
 800129c:	2000      	movs	r0, #0
 800129e:	f7ff fe8b 	bl	8000fb8 <Set_LED>
	  Set_LED(1, 0, 255, 0);
 80012a2:	2300      	movs	r3, #0
 80012a4:	22ff      	movs	r2, #255	; 0xff
 80012a6:	2100      	movs	r1, #0
 80012a8:	2001      	movs	r0, #1
 80012aa:	f7ff fe85 	bl	8000fb8 <Set_LED>
	  Set_LED(2, 0, 0, 255);
 80012ae:	23ff      	movs	r3, #255	; 0xff
 80012b0:	2200      	movs	r2, #0
 80012b2:	2100      	movs	r1, #0
 80012b4:	2002      	movs	r0, #2
 80012b6:	f7ff fe7f 	bl	8000fb8 <Set_LED>

	  Set_LED(3, 46, 89, 128);
 80012ba:	2380      	movs	r3, #128	; 0x80
 80012bc:	2259      	movs	r2, #89	; 0x59
 80012be:	212e      	movs	r1, #46	; 0x2e
 80012c0:	2003      	movs	r0, #3
 80012c2:	f7ff fe79 	bl	8000fb8 <Set_LED>

	  Set_LED(4, 156, 233, 100);
 80012c6:	2364      	movs	r3, #100	; 0x64
 80012c8:	22e9      	movs	r2, #233	; 0xe9
 80012ca:	219c      	movs	r1, #156	; 0x9c
 80012cc:	2004      	movs	r0, #4
 80012ce:	f7ff fe73 	bl	8000fb8 <Set_LED>
	  Set_LED(5, 102, 0, 235);
 80012d2:	23eb      	movs	r3, #235	; 0xeb
 80012d4:	2200      	movs	r2, #0
 80012d6:	2166      	movs	r1, #102	; 0x66
 80012d8:	2005      	movs	r0, #5
 80012da:	f7ff fe6d 	bl	8000fb8 <Set_LED>
	  Set_LED(6, 47, 38, 77);
 80012de:	234d      	movs	r3, #77	; 0x4d
 80012e0:	2226      	movs	r2, #38	; 0x26
 80012e2:	212f      	movs	r1, #47	; 0x2f
 80012e4:	2006      	movs	r0, #6
 80012e6:	f7ff fe67 	bl	8000fb8 <Set_LED>

	  Set_LED(7, 255, 200, 0);
 80012ea:	2300      	movs	r3, #0
 80012ec:	22c8      	movs	r2, #200	; 0xc8
 80012ee:	21ff      	movs	r1, #255	; 0xff
 80012f0:	2007      	movs	r0, #7
 80012f2:	f7ff fe61 	bl	8000fb8 <Set_LED>
	  Set_LED(8, 255, 200, 0);
 80012f6:	2300      	movs	r3, #0
 80012f8:	22c8      	movs	r2, #200	; 0xc8
 80012fa:	21ff      	movs	r1, #255	; 0xff
 80012fc:	2008      	movs	r0, #8
 80012fe:	f7ff fe5b 	bl	8000fb8 <Set_LED>
	  Set_LED(9, 255, 200, 0);
 8001302:	2300      	movs	r3, #0
 8001304:	22c8      	movs	r2, #200	; 0xc8
 8001306:	21ff      	movs	r1, #255	; 0xff
 8001308:	2009      	movs	r0, #9
 800130a:	f7ff fe55 	bl	8000fb8 <Set_LED>
	  Set_LED(10, 255, 200, 0);
 800130e:	2300      	movs	r3, #0
 8001310:	22c8      	movs	r2, #200	; 0xc8
 8001312:	21ff      	movs	r1, #255	; 0xff
 8001314:	200a      	movs	r0, #10
 8001316:	f7ff fe4f 	bl	8000fb8 <Set_LED>
	  Set_LED(11, 255, 200, 0);
 800131a:	2300      	movs	r3, #0
 800131c:	22c8      	movs	r2, #200	; 0xc8
 800131e:	21ff      	movs	r1, #255	; 0xff
 8001320:	200b      	movs	r0, #11
 8001322:	f7ff fe49 	bl	8000fb8 <Set_LED>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {


		  for (int i=0; i<46; i++)
 8001326:	2300      	movs	r3, #0
 8001328:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800132c:	e00d      	b.n	800134a <main+0x12a>
			  {
				  Set_Brightness(i);
 800132e:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8001332:	f7ff fe71 	bl	8001018 <Set_Brightness>
				  WS2812_Send();
 8001336:	f7ff fef1 	bl	800111c <WS2812_Send>
				  HAL_Delay (50);
 800133a:	2032      	movs	r0, #50	; 0x32
 800133c:	f000 fed0 	bl	80020e0 <HAL_Delay>
		  for (int i=0; i<46; i++)
 8001340:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001344:	3301      	adds	r3, #1
 8001346:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800134a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800134e:	2b2d      	cmp	r3, #45	; 0x2d
 8001350:	dded      	ble.n	800132e <main+0x10e>
			  }

			  for (int i=45; i>=0; i--)
 8001352:	232d      	movs	r3, #45	; 0x2d
 8001354:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001358:	e00d      	b.n	8001376 <main+0x156>
			  {
				  Set_Brightness(i);
 800135a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800135e:	f7ff fe5b 	bl	8001018 <Set_Brightness>
				  WS2812_Send();
 8001362:	f7ff fedb 	bl	800111c <WS2812_Send>
				  HAL_Delay (50);
 8001366:	2032      	movs	r0, #50	; 0x32
 8001368:	f000 feba 	bl	80020e0 <HAL_Delay>
			  for (int i=45; i>=0; i--)
 800136c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001370:	3b01      	subs	r3, #1
 8001372:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001376:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800137a:	2b00      	cmp	r3, #0
 800137c:	daed      	bge.n	800135a <main+0x13a>
			  }



		uint8_t bytesAvailable = CDC_GetRxBufferBytesAvailable_FS();
 800137e:	f008 f95d 	bl	800963c <CDC_GetRxBufferBytesAvailable_FS>
 8001382:	4603      	mov	r3, r0
 8001384:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		if (bytesAvailable != 0) {
 8001388:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0ca      	beq.n	8001326 <main+0x106>
			memset(data_frame_buffer, 0, 64);  // clear the buffer
 8001390:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001394:	2240      	movs	r2, #64	; 0x40
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f008 fdcf 	bl	8009f3c <memset>
			CDC_ReadRxBuffer_FS(data_frame_buffer, bytesAvailable);
 800139e:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 80013a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f008 f935 	bl	8009618 <CDC_ReadRxBuffer_FS>

			DataHeaders data_head = (DataHeaders) data_frame_buffer[0];
 80013ae:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80013b2:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

			switch (data_head) {
 80013b6:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d010      	beq.n	80013e0 <main+0x1c0>
 80013be:	2b06      	cmp	r3, #6
 80013c0:	dc14      	bgt.n	80013ec <main+0x1cc>
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d002      	beq.n	80013cc <main+0x1ac>
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d005      	beq.n	80013d6 <main+0x1b6>
			case RAM: {
				system.ram_util = data_frame_buffer[1];
				break;
			}
			default: {
				break;
 80013ca:	e00f      	b.n	80013ec <main+0x1cc>
				system.cpu_util = data_frame_buffer[1];
 80013cc:	f897 20ad 	ldrb.w	r2, [r7, #173]	; 0xad
 80013d0:	463b      	mov	r3, r7
 80013d2:	711a      	strb	r2, [r3, #4]
				break;
 80013d4:	e00b      	b.n	80013ee <main+0x1ce>
				system.cpu_temp = data_frame_buffer[1];
 80013d6:	f897 20ad 	ldrb.w	r2, [r7, #173]	; 0xad
 80013da:	463b      	mov	r3, r7
 80013dc:	719a      	strb	r2, [r3, #6]
				break;
 80013de:	e006      	b.n	80013ee <main+0x1ce>
				system.ram_util = data_frame_buffer[1];
 80013e0:	f897 20ad 	ldrb.w	r2, [r7, #173]	; 0xad
 80013e4:	463b      	mov	r3, r7
 80013e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				break;
 80013ea:	e000      	b.n	80013ee <main+0x1ce>
				break;
 80013ec:	bf00      	nop
			}
			}

			updateDisplay(&system);
 80013ee:	463b      	mov	r3, r7
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fdaf 	bl	8000f54 <updateDisplay>
			CDC_FlushRxBuffer_FS();
 80013f6:	f008 f943 	bl	8009680 <CDC_FlushRxBuffer_FS>
			CDC_Read_Next();
 80013fa:	f008 f937 	bl	800966c <CDC_Read_Next>
	while (1) {
 80013fe:	e792      	b.n	8001326 <main+0x106>
 8001400:	0800b87c 	.word	0x0800b87c
 8001404:	200008d4 	.word	0x200008d4

08001408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b094      	sub	sp, #80	; 0x50
 800140c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140e:	f107 0320 	add.w	r3, r7, #32
 8001412:	2230      	movs	r2, #48	; 0x30
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f008 fd90 	bl	8009f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <SystemClock_Config+0xcc>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	4a27      	ldr	r2, [pc, #156]	; (80014d4 <SystemClock_Config+0xcc>)
 8001436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800143a:	6413      	str	r3, [r2, #64]	; 0x40
 800143c:	4b25      	ldr	r3, [pc, #148]	; (80014d4 <SystemClock_Config+0xcc>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001448:	2300      	movs	r3, #0
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <SystemClock_Config+0xd0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a21      	ldr	r2, [pc, #132]	; (80014d8 <SystemClock_Config+0xd0>)
 8001452:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <SystemClock_Config+0xd0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001464:	2301      	movs	r3, #1
 8001466:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001468:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800146e:	2302      	movs	r3, #2
 8001470:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001472:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001476:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001478:	2319      	movs	r3, #25
 800147a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800147c:	2390      	movs	r3, #144	; 0x90
 800147e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001480:	2302      	movs	r3, #2
 8001482:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001484:	2303      	movs	r3, #3
 8001486:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001488:	f107 0320 	add.w	r3, r7, #32
 800148c:	4618      	mov	r0, r3
 800148e:	f003 fa51 	bl	8004934 <HAL_RCC_OscConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001498:	f000 f952 	bl	8001740 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800149c:	230f      	movs	r3, #15
 800149e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a0:	2302      	movs	r3, #2
 80014a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	2102      	movs	r1, #2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f003 fcb2 	bl	8004e24 <HAL_RCC_ClockConfig>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014c6:	f000 f93b 	bl	8001740 <Error_Handler>
  }
}
 80014ca:	bf00      	nop
 80014cc:	3750      	adds	r7, #80	; 0x50
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40007000 	.word	0x40007000

080014dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <MX_I2C1_Init+0x50>)
 80014e2:	4a13      	ldr	r2, [pc, #76]	; (8001530 <MX_I2C1_Init+0x54>)
 80014e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_I2C1_Init+0x50>)
 80014e8:	4a12      	ldr	r2, [pc, #72]	; (8001534 <MX_I2C1_Init+0x58>)
 80014ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <MX_I2C1_Init+0x50>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_I2C1_Init+0x50>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_I2C1_Init+0x50>)
 80014fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001500:	4b0a      	ldr	r3, [pc, #40]	; (800152c <MX_I2C1_Init+0x50>)
 8001502:	2200      	movs	r2, #0
 8001504:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_I2C1_Init+0x50>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800150c:	4b07      	ldr	r3, [pc, #28]	; (800152c <MX_I2C1_Init+0x50>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_I2C1_Init+0x50>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001518:	4804      	ldr	r0, [pc, #16]	; (800152c <MX_I2C1_Init+0x50>)
 800151a:	f001 fc2d 	bl	8002d78 <HAL_I2C_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001524:	f000 f90c 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200008d4 	.word	0x200008d4
 8001530:	40005400 	.word	0x40005400
 8001534:	00061a80 	.word	0x00061a80

08001538 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b096      	sub	sp, #88	; 0x58
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	611a      	str	r2, [r3, #16]
 8001566:	615a      	str	r2, [r3, #20]
 8001568:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2220      	movs	r2, #32
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f008 fce3 	bl	8009f3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001576:	4b3e      	ldr	r3, [pc, #248]	; (8001670 <MX_TIM1_Init+0x138>)
 8001578:	4a3e      	ldr	r2, [pc, #248]	; (8001674 <MX_TIM1_Init+0x13c>)
 800157a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800157c:	4b3c      	ldr	r3, [pc, #240]	; (8001670 <MX_TIM1_Init+0x138>)
 800157e:	2200      	movs	r2, #0
 8001580:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001582:	4b3b      	ldr	r3, [pc, #236]	; (8001670 <MX_TIM1_Init+0x138>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 72-1;
 8001588:	4b39      	ldr	r3, [pc, #228]	; (8001670 <MX_TIM1_Init+0x138>)
 800158a:	2247      	movs	r2, #71	; 0x47
 800158c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158e:	4b38      	ldr	r3, [pc, #224]	; (8001670 <MX_TIM1_Init+0x138>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001594:	4b36      	ldr	r3, [pc, #216]	; (8001670 <MX_TIM1_Init+0x138>)
 8001596:	2200      	movs	r2, #0
 8001598:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159a:	4b35      	ldr	r3, [pc, #212]	; (8001670 <MX_TIM1_Init+0x138>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015a0:	4833      	ldr	r0, [pc, #204]	; (8001670 <MX_TIM1_Init+0x138>)
 80015a2:	f003 fdfb 	bl	800519c <HAL_TIM_Base_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80015ac:	f000 f8c8 	bl	8001740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015ba:	4619      	mov	r1, r3
 80015bc:	482c      	ldr	r0, [pc, #176]	; (8001670 <MX_TIM1_Init+0x138>)
 80015be:	f004 f9cd 	bl	800595c <HAL_TIM_ConfigClockSource>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80015c8:	f000 f8ba 	bl	8001740 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015cc:	4828      	ldr	r0, [pc, #160]	; (8001670 <MX_TIM1_Init+0x138>)
 80015ce:	f003 fe34 	bl	800523a <HAL_TIM_PWM_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80015d8:	f000 f8b2 	bl	8001740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015dc:	2300      	movs	r3, #0
 80015de:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015e8:	4619      	mov	r1, r3
 80015ea:	4821      	ldr	r0, [pc, #132]	; (8001670 <MX_TIM1_Init+0x138>)
 80015ec:	f004 fe2e 	bl	800624c <HAL_TIMEx_MasterConfigSynchronization>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80015f6:	f000 f8a3 	bl	8001740 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015fa:	2360      	movs	r3, #96	; 0x60
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001602:	2300      	movs	r3, #0
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001606:	2300      	movs	r3, #0
 8001608:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800160e:	2300      	movs	r3, #0
 8001610:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001612:	2300      	movs	r3, #0
 8001614:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161a:	2200      	movs	r2, #0
 800161c:	4619      	mov	r1, r3
 800161e:	4814      	ldr	r0, [pc, #80]	; (8001670 <MX_TIM1_Init+0x138>)
 8001620:	f004 f8da 	bl	80057d8 <HAL_TIM_PWM_ConfigChannel>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800162a:	f000 f889 	bl	8001740 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001642:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001646:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	4619      	mov	r1, r3
 8001650:	4807      	ldr	r0, [pc, #28]	; (8001670 <MX_TIM1_Init+0x138>)
 8001652:	f004 fe69 	bl	8006328 <HAL_TIMEx_ConfigBreakDeadTime>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800165c:	f000 f870 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001660:	4803      	ldr	r0, [pc, #12]	; (8001670 <MX_TIM1_Init+0x138>)
 8001662:	f000 fbe1 	bl	8001e28 <HAL_TIM_MspPostInit>

}
 8001666:	bf00      	nop
 8001668:	3758      	adds	r7, #88	; 0x58
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000bfc 	.word	0x20000bfc
 8001674:	40010000 	.word	0x40010000

08001678 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <MX_DMA_Init+0x3c>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <MX_DMA_Init+0x3c>)
 8001688:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <MX_DMA_Init+0x3c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	2039      	movs	r0, #57	; 0x39
 80016a0:	f000 fe1d 	bl	80022de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80016a4:	2039      	movs	r0, #57	; 0x39
 80016a6:	f000 fe36 	bl	8002316 <HAL_NVIC_EnableIRQ>

}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800

080016b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b1e      	ldr	r3, [pc, #120]	; (800173c <MX_GPIO_Init+0x84>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a1d      	ldr	r2, [pc, #116]	; (800173c <MX_GPIO_Init+0x84>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b1b      	ldr	r3, [pc, #108]	; (800173c <MX_GPIO_Init+0x84>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <MX_GPIO_Init+0x84>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a16      	ldr	r2, [pc, #88]	; (800173c <MX_GPIO_Init+0x84>)
 80016e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b14      	ldr	r3, [pc, #80]	; (800173c <MX_GPIO_Init+0x84>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <MX_GPIO_Init+0x84>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a0f      	ldr	r2, [pc, #60]	; (800173c <MX_GPIO_Init+0x84>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <MX_GPIO_Init+0x84>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	603b      	str	r3, [r7, #0]
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <MX_GPIO_Init+0x84>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a08      	ldr	r2, [pc, #32]	; (800173c <MX_GPIO_Init+0x84>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <MX_GPIO_Init+0x84>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	683b      	ldr	r3, [r7, #0]

}
 800172e:	bf00      	nop
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800

08001740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001744:	b672      	cpsid	i
}
 8001746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001748:	e7fe      	b.n	8001748 <Error_Handler+0x8>

0800174a <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af04      	add	r7, sp, #16
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	460b      	mov	r3, r1
 8001754:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001756:	230a      	movs	r3, #10
 8001758:	9302      	str	r3, [sp, #8]
 800175a:	2301      	movs	r3, #1
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	1cfb      	adds	r3, r7, #3
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2301      	movs	r3, #1
 8001764:	2200      	movs	r2, #0
 8001766:	2178      	movs	r1, #120	; 0x78
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f001 fc49 	bl	8003000 <HAL_I2C_Mem_Write>
 800176e:	4603      	mov	r3, r0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001780:	2064      	movs	r0, #100	; 0x64
 8001782:	f000 fcad 	bl	80020e0 <HAL_Delay>
    int status = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 800178a:	21ae      	movs	r1, #174	; 0xae
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ffdc 	bl	800174a <ssd1306_WriteCommand>
 8001792:	4603      	mov	r3, r0
 8001794:	461a      	mov	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	4413      	add	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 800179c:	2120      	movs	r1, #32
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ffd3 	bl	800174a <ssd1306_WriteCommand>
 80017a4:	4603      	mov	r3, r0
 80017a6:	461a      	mov	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4413      	add	r3, r2
 80017ac:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80017ae:	2110      	movs	r1, #16
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff ffca 	bl	800174a <ssd1306_WriteCommand>
 80017b6:	4603      	mov	r3, r0
 80017b8:	461a      	mov	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4413      	add	r3, r2
 80017be:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80017c0:	21b0      	movs	r1, #176	; 0xb0
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff ffc1 	bl	800174a <ssd1306_WriteCommand>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4413      	add	r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 80017d2:	21c8      	movs	r1, #200	; 0xc8
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff ffb8 	bl	800174a <ssd1306_WriteCommand>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	4413      	add	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 80017e4:	2100      	movs	r1, #0
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff ffaf 	bl	800174a <ssd1306_WriteCommand>
 80017ec:	4603      	mov	r3, r0
 80017ee:	461a      	mov	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4413      	add	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 80017f6:	2110      	movs	r1, #16
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ffa6 	bl	800174a <ssd1306_WriteCommand>
 80017fe:	4603      	mov	r3, r0
 8001800:	461a      	mov	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4413      	add	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001808:	2140      	movs	r1, #64	; 0x40
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff ff9d 	bl	800174a <ssd1306_WriteCommand>
 8001810:	4603      	mov	r3, r0
 8001812:	461a      	mov	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4413      	add	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 800181a:	2181      	movs	r1, #129	; 0x81
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff94 	bl	800174a <ssd1306_WriteCommand>
 8001822:	4603      	mov	r3, r0
 8001824:	461a      	mov	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4413      	add	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 800182c:	21ff      	movs	r1, #255	; 0xff
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ff8b 	bl	800174a <ssd1306_WriteCommand>
 8001834:	4603      	mov	r3, r0
 8001836:	461a      	mov	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4413      	add	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 800183e:	21a1      	movs	r1, #161	; 0xa1
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ff82 	bl	800174a <ssd1306_WriteCommand>
 8001846:	4603      	mov	r3, r0
 8001848:	461a      	mov	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4413      	add	r3, r2
 800184e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8001850:	21a6      	movs	r1, #166	; 0xa6
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff ff79 	bl	800174a <ssd1306_WriteCommand>
 8001858:	4603      	mov	r3, r0
 800185a:	461a      	mov	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4413      	add	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8001862:	21a8      	movs	r1, #168	; 0xa8
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ff70 	bl	800174a <ssd1306_WriteCommand>
 800186a:	4603      	mov	r3, r0
 800186c:	461a      	mov	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	4413      	add	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8001874:	213f      	movs	r1, #63	; 0x3f
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ff67 	bl	800174a <ssd1306_WriteCommand>
 800187c:	4603      	mov	r3, r0
 800187e:	461a      	mov	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001886:	21a4      	movs	r1, #164	; 0xa4
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ff5e 	bl	800174a <ssd1306_WriteCommand>
 800188e:	4603      	mov	r3, r0
 8001890:	461a      	mov	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4413      	add	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8001898:	21d3      	movs	r1, #211	; 0xd3
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ff55 	bl	800174a <ssd1306_WriteCommand>
 80018a0:	4603      	mov	r3, r0
 80018a2:	461a      	mov	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4413      	add	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 80018aa:	2100      	movs	r1, #0
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff4c 	bl	800174a <ssd1306_WriteCommand>
 80018b2:	4603      	mov	r3, r0
 80018b4:	461a      	mov	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4413      	add	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 80018bc:	21d5      	movs	r1, #213	; 0xd5
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff ff43 	bl	800174a <ssd1306_WriteCommand>
 80018c4:	4603      	mov	r3, r0
 80018c6:	461a      	mov	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4413      	add	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 80018ce:	21f0      	movs	r1, #240	; 0xf0
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ff3a 	bl	800174a <ssd1306_WriteCommand>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461a      	mov	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4413      	add	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 80018e0:	21d9      	movs	r1, #217	; 0xd9
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ff31 	bl	800174a <ssd1306_WriteCommand>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461a      	mov	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 80018f2:	2122      	movs	r1, #34	; 0x22
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ff28 	bl	800174a <ssd1306_WriteCommand>
 80018fa:	4603      	mov	r3, r0
 80018fc:	461a      	mov	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4413      	add	r3, r2
 8001902:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8001904:	21da      	movs	r1, #218	; 0xda
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ff1f 	bl	800174a <ssd1306_WriteCommand>
 800190c:	4603      	mov	r3, r0
 800190e:	461a      	mov	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4413      	add	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8001916:	2112      	movs	r1, #18
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff16 	bl	800174a <ssd1306_WriteCommand>
 800191e:	4603      	mov	r3, r0
 8001920:	461a      	mov	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4413      	add	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001928:	21db      	movs	r1, #219	; 0xdb
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ff0d 	bl	800174a <ssd1306_WriteCommand>
 8001930:	4603      	mov	r3, r0
 8001932:	461a      	mov	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4413      	add	r3, r2
 8001938:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 800193a:	2120      	movs	r1, #32
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ff04 	bl	800174a <ssd1306_WriteCommand>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4413      	add	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 800194c:	218d      	movs	r1, #141	; 0x8d
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff fefb 	bl	800174a <ssd1306_WriteCommand>
 8001954:	4603      	mov	r3, r0
 8001956:	461a      	mov	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4413      	add	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 800195e:	2114      	movs	r1, #20
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff fef2 	bl	800174a <ssd1306_WriteCommand>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4413      	add	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8001970:	21af      	movs	r1, #175	; 0xaf
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff fee9 	bl	800174a <ssd1306_WriteCommand>
 8001978:	4603      	mov	r3, r0
 800197a:	461a      	mov	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <ssd1306_Init+0x214>
        return 1;
 8001988:	2301      	movs	r3, #1
 800198a:	e00f      	b.n	80019ac <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 800198c:	2000      	movs	r0, #0
 800198e:	f000 f813 	bl	80019b8 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f834 	bl	8001a00 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <ssd1306_Init+0x23c>)
 800199a:	2200      	movs	r2, #0
 800199c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <ssd1306_Init+0x23c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80019a4:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <ssd1306_Init+0x23c>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	715a      	strb	r2, [r3, #5]

    return 0;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	2000060c 	.word	0x2000060c

080019b8 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	e00d      	b.n	80019e4 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <ssd1306_Fill+0x1a>
 80019ce:	2100      	movs	r1, #0
 80019d0:	e000      	b.n	80019d4 <ssd1306_Fill+0x1c>
 80019d2:	21ff      	movs	r1, #255	; 0xff
 80019d4:	4a09      	ldr	r2, [pc, #36]	; (80019fc <ssd1306_Fill+0x44>)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	4413      	add	r3, r2
 80019da:	460a      	mov	r2, r1
 80019dc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	3301      	adds	r3, #1
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ea:	d3ed      	bcc.n	80019c8 <ssd1306_Fill+0x10>
    }
}
 80019ec:	bf00      	nop
 80019ee:	bf00      	nop
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	2000020c 	.word	0x2000020c

08001a00 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af04      	add	r7, sp, #16
 8001a06:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8001a08:	2300      	movs	r3, #0
 8001a0a:	73fb      	strb	r3, [r7, #15]
 8001a0c:	e020      	b.n	8001a50 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	3b50      	subs	r3, #80	; 0x50
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	4619      	mov	r1, r3
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff fe97 	bl	800174a <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff fe93 	bl	800174a <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001a24:	2110      	movs	r1, #16
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff fe8f 	bl	800174a <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	01db      	lsls	r3, r3, #7
 8001a30:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <ssd1306_UpdateScreen+0x60>)
 8001a32:	4413      	add	r3, r2
 8001a34:	2264      	movs	r2, #100	; 0x64
 8001a36:	9202      	str	r2, [sp, #8]
 8001a38:	2280      	movs	r2, #128	; 0x80
 8001a3a:	9201      	str	r2, [sp, #4]
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	2301      	movs	r3, #1
 8001a40:	2240      	movs	r2, #64	; 0x40
 8001a42:	2178      	movs	r1, #120	; 0x78
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f001 fadb 	bl	8003000 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	73fb      	strb	r3, [r7, #15]
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	2b07      	cmp	r3, #7
 8001a54:	d9db      	bls.n	8001a0e <ssd1306_UpdateScreen+0xe>
    }
}
 8001a56:	bf00      	nop
 8001a58:	bf00      	nop
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	2000020c 	.word	0x2000020c

08001a64 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	71bb      	strb	r3, [r7, #6]
 8001a72:	4613      	mov	r3, r2
 8001a74:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	db48      	blt.n	8001b10 <ssd1306_DrawPixel+0xac>
 8001a7e:	79bb      	ldrb	r3, [r7, #6]
 8001a80:	2b3f      	cmp	r3, #63	; 0x3f
 8001a82:	d845      	bhi.n	8001b10 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8001a84:	4b25      	ldr	r3, [pc, #148]	; (8001b1c <ssd1306_DrawPixel+0xb8>)
 8001a86:	791b      	ldrb	r3, [r3, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d006      	beq.n	8001a9a <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8001a8c:	797b      	ldrb	r3, [r7, #5]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	bf0c      	ite	eq
 8001a92:	2301      	moveq	r3, #1
 8001a94:	2300      	movne	r3, #0
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8001a9a:	797b      	ldrb	r3, [r7, #5]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d11a      	bne.n	8001ad6 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001aa0:	79fa      	ldrb	r2, [r7, #7]
 8001aa2:	79bb      	ldrb	r3, [r7, #6]
 8001aa4:	08db      	lsrs	r3, r3, #3
 8001aa6:	b2d8      	uxtb	r0, r3
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	01db      	lsls	r3, r3, #7
 8001aac:	4413      	add	r3, r2
 8001aae:	4a1c      	ldr	r2, [pc, #112]	; (8001b20 <ssd1306_DrawPixel+0xbc>)
 8001ab0:	5cd3      	ldrb	r3, [r2, r3]
 8001ab2:	b25a      	sxtb	r2, r3
 8001ab4:	79bb      	ldrb	r3, [r7, #6]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	2101      	movs	r1, #1
 8001abc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac0:	b25b      	sxtb	r3, r3
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	b259      	sxtb	r1, r3
 8001ac6:	79fa      	ldrb	r2, [r7, #7]
 8001ac8:	4603      	mov	r3, r0
 8001aca:	01db      	lsls	r3, r3, #7
 8001acc:	4413      	add	r3, r2
 8001ace:	b2c9      	uxtb	r1, r1
 8001ad0:	4a13      	ldr	r2, [pc, #76]	; (8001b20 <ssd1306_DrawPixel+0xbc>)
 8001ad2:	54d1      	strb	r1, [r2, r3]
 8001ad4:	e01d      	b.n	8001b12 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ad6:	79fa      	ldrb	r2, [r7, #7]
 8001ad8:	79bb      	ldrb	r3, [r7, #6]
 8001ada:	08db      	lsrs	r3, r3, #3
 8001adc:	b2d8      	uxtb	r0, r3
 8001ade:	4603      	mov	r3, r0
 8001ae0:	01db      	lsls	r3, r3, #7
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a0e      	ldr	r2, [pc, #56]	; (8001b20 <ssd1306_DrawPixel+0xbc>)
 8001ae6:	5cd3      	ldrb	r3, [r2, r3]
 8001ae8:	b25a      	sxtb	r2, r3
 8001aea:	79bb      	ldrb	r3, [r7, #6]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	2101      	movs	r1, #1
 8001af2:	fa01 f303 	lsl.w	r3, r1, r3
 8001af6:	b25b      	sxtb	r3, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	b25b      	sxtb	r3, r3
 8001afc:	4013      	ands	r3, r2
 8001afe:	b259      	sxtb	r1, r3
 8001b00:	79fa      	ldrb	r2, [r7, #7]
 8001b02:	4603      	mov	r3, r0
 8001b04:	01db      	lsls	r3, r3, #7
 8001b06:	4413      	add	r3, r2
 8001b08:	b2c9      	uxtb	r1, r1
 8001b0a:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <ssd1306_DrawPixel+0xbc>)
 8001b0c:	54d1      	strb	r1, [r2, r3]
 8001b0e:	e000      	b.n	8001b12 <ssd1306_DrawPixel+0xae>
        return;
 8001b10:	bf00      	nop
    }
}
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	2000060c 	.word	0x2000060c
 8001b20:	2000020c 	.word	0x2000020c

08001b24 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	1d38      	adds	r0, r7, #4
 8001b2e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001b32:	461a      	mov	r2, r3
 8001b34:	4623      	mov	r3, r4
 8001b36:	73fb      	strb	r3, [r7, #15]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001b3c:	4b38      	ldr	r3, [pc, #224]	; (8001c20 <ssd1306_WriteChar+0xfc>)
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	793b      	ldrb	r3, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	2b7f      	cmp	r3, #127	; 0x7f
 8001b48:	dc06      	bgt.n	8001b58 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001b4a:	4b35      	ldr	r3, [pc, #212]	; (8001c20 <ssd1306_WriteChar+0xfc>)
 8001b4c:	885b      	ldrh	r3, [r3, #2]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	797b      	ldrb	r3, [r7, #5]
 8001b52:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001b54:	2b3f      	cmp	r3, #63	; 0x3f
 8001b56:	dd01      	ble.n	8001b5c <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	e05d      	b.n	8001c18 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]
 8001b60:	e04c      	b.n	8001bfc <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	3b20      	subs	r3, #32
 8001b68:	7979      	ldrb	r1, [r7, #5]
 8001b6a:	fb01 f303 	mul.w	r3, r1, r3
 8001b6e:	4619      	mov	r1, r3
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	440b      	add	r3, r1
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61bb      	str	r3, [r7, #24]
 8001b80:	e034      	b.n	8001bec <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d012      	beq.n	8001bb8 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001b92:	4b23      	ldr	r3, [pc, #140]	; (8001c20 <ssd1306_WriteChar+0xfc>)
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b2d8      	uxtb	r0, r3
 8001ba0:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <ssd1306_WriteChar+0xfc>)
 8001ba2:	885b      	ldrh	r3, [r3, #2]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	7bba      	ldrb	r2, [r7, #14]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f7ff ff57 	bl	8001a64 <ssd1306_DrawPixel>
 8001bb6:	e016      	b.n	8001be6 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001bb8:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <ssd1306_WriteChar+0xfc>)
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	b2d8      	uxtb	r0, r3
 8001bc6:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <ssd1306_WriteChar+0xfc>)
 8001bc8:	885b      	ldrh	r3, [r3, #2]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	b2d9      	uxtb	r1, r3
 8001bd4:	7bbb      	ldrb	r3, [r7, #14]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	bf0c      	ite	eq
 8001bda:	2301      	moveq	r3, #1
 8001bdc:	2300      	movne	r3, #0
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	461a      	mov	r2, r3
 8001be2:	f7ff ff3f 	bl	8001a64 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	3301      	adds	r3, #1
 8001bea:	61bb      	str	r3, [r7, #24]
 8001bec:	793b      	ldrb	r3, [r7, #4]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d3c5      	bcc.n	8001b82 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	61fb      	str	r3, [r7, #28]
 8001bfc:	797b      	ldrb	r3, [r7, #5]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d3ad      	bcc.n	8001b62 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <ssd1306_WriteChar+0xfc>)
 8001c08:	881a      	ldrh	r2, [r3, #0]
 8001c0a:	793b      	ldrb	r3, [r7, #4]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	4413      	add	r3, r2
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <ssd1306_WriteChar+0xfc>)
 8001c14:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3724      	adds	r7, #36	; 0x24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd90      	pop	{r4, r7, pc}
 8001c20:	2000060c 	.word	0x2000060c

08001c24 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	1d38      	adds	r0, r7, #4
 8001c2e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001c32:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8001c34:	e012      	b.n	8001c5c <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	7818      	ldrb	r0, [r3, #0]
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	1d3a      	adds	r2, r7, #4
 8001c3e:	ca06      	ldmia	r2, {r1, r2}
 8001c40:	f7ff ff70 	bl	8001b24 <ssd1306_WriteChar>
 8001c44:	4603      	mov	r3, r0
 8001c46:	461a      	mov	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d002      	beq.n	8001c56 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	e008      	b.n	8001c68 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
    while (*str)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1e8      	bne.n	8001c36 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	781b      	ldrb	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	460a      	mov	r2, r1
 8001c7a:	71fb      	strb	r3, [r7, #7]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <ssd1306_SetCursor+0x2c>)
 8001c86:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001c88:	79bb      	ldrb	r3, [r7, #6]
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <ssd1306_SetCursor+0x2c>)
 8001c8e:	805a      	strh	r2, [r3, #2]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	2000060c 	.word	0x2000060c

08001ca0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <HAL_MspInit+0x4c>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	4a0f      	ldr	r2, [pc, #60]	; (8001cec <HAL_MspInit+0x4c>)
 8001cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <HAL_MspInit+0x4c>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	603b      	str	r3, [r7, #0]
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <HAL_MspInit+0x4c>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	4a08      	ldr	r2, [pc, #32]	; (8001cec <HAL_MspInit+0x4c>)
 8001ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_MspInit+0x4c>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	603b      	str	r3, [r7, #0]
 8001cdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800

08001cf0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a19      	ldr	r2, [pc, #100]	; (8001d74 <HAL_I2C_MspInit+0x84>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d12c      	bne.n	8001d6c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <HAL_I2C_MspInit+0x88>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a17      	ldr	r2, [pc, #92]	; (8001d78 <HAL_I2C_MspInit+0x88>)
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <HAL_I2C_MspInit+0x88>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d34:	2312      	movs	r3, #18
 8001d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d40:	2304      	movs	r3, #4
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	4619      	mov	r1, r3
 8001d4a:	480c      	ldr	r0, [pc, #48]	; (8001d7c <HAL_I2C_MspInit+0x8c>)
 8001d4c:	f000 fe90 	bl	8002a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <HAL_I2C_MspInit+0x88>)
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	4a07      	ldr	r2, [pc, #28]	; (8001d78 <HAL_I2C_MspInit+0x88>)
 8001d5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <HAL_I2C_MspInit+0x88>)
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d6c:	bf00      	nop
 8001d6e:	3728      	adds	r7, #40	; 0x28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40005400 	.word	0x40005400
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40020400 	.word	0x40020400

08001d80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a22      	ldr	r2, [pc, #136]	; (8001e18 <HAL_TIM_Base_MspInit+0x98>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d13d      	bne.n	8001e0e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <HAL_TIM_Base_MspInit+0x9c>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	4a20      	ldr	r2, [pc, #128]	; (8001e1c <HAL_TIM_Base_MspInit+0x9c>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6453      	str	r3, [r2, #68]	; 0x44
 8001da2:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <HAL_TIM_Base_MspInit+0x9c>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001dae:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <HAL_TIM_Base_MspInit+0xa0>)
 8001db0:	4a1c      	ldr	r2, [pc, #112]	; (8001e24 <HAL_TIM_Base_MspInit+0xa4>)
 8001db2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001db4:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <HAL_TIM_Base_MspInit+0xa0>)
 8001db6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001dba:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dbc:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <HAL_TIM_Base_MspInit+0xa0>)
 8001dbe:	2240      	movs	r2, #64	; 0x40
 8001dc0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dc2:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <HAL_TIM_Base_MspInit+0xa0>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001dc8:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <HAL_TIM_Base_MspInit+0xa0>)
 8001dca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dce:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001dd0:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <HAL_TIM_Base_MspInit+0xa0>)
 8001dd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dd6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <HAL_TIM_Base_MspInit+0xa0>)
 8001dda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dde:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001de0:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <HAL_TIM_Base_MspInit+0xa0>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001de6:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <HAL_TIM_Base_MspInit+0xa0>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <HAL_TIM_Base_MspInit+0xa0>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001df2:	480b      	ldr	r0, [pc, #44]	; (8001e20 <HAL_TIM_Base_MspInit+0xa0>)
 8001df4:	f000 faaa 	bl	800234c <HAL_DMA_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001dfe:	f7ff fc9f 	bl	8001740 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a06      	ldr	r2, [pc, #24]	; (8001e20 <HAL_TIM_Base_MspInit+0xa0>)
 8001e06:	625a      	str	r2, [r3, #36]	; 0x24
 8001e08:	4a05      	ldr	r2, [pc, #20]	; (8001e20 <HAL_TIM_Base_MspInit+0xa0>)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e0e:	bf00      	nop
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40010000 	.word	0x40010000
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	20000844 	.word	0x20000844
 8001e24:	40026428 	.word	0x40026428

08001e28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 030c 	add.w	r3, r7, #12
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a12      	ldr	r2, [pc, #72]	; (8001e90 <HAL_TIM_MspPostInit+0x68>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d11e      	bne.n	8001e88 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <HAL_TIM_MspPostInit+0x6c>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a10      	ldr	r2, [pc, #64]	; (8001e94 <HAL_TIM_MspPostInit+0x6c>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <HAL_TIM_MspPostInit+0x6c>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7c:	f107 030c 	add.w	r3, r7, #12
 8001e80:	4619      	mov	r1, r3
 8001e82:	4805      	ldr	r0, [pc, #20]	; (8001e98 <HAL_TIM_MspPostInit+0x70>)
 8001e84:	f000 fdf4 	bl	8002a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e88:	bf00      	nop
 8001e8a:	3720      	adds	r7, #32
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40010000 	.word	0x40010000
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020000 	.word	0x40020000

08001e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <NMI_Handler+0x4>

08001ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea6:	e7fe      	b.n	8001ea6 <HardFault_Handler+0x4>

08001ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <MemManage_Handler+0x4>

08001eae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <BusFault_Handler+0x4>

08001eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <UsageFault_Handler+0x4>

08001eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee8:	f000 f8da 	bl	80020a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <DMA2_Stream1_IRQHandler+0x10>)
 8001ef6:	f000 fb51 	bl	800259c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000844 	.word	0x20000844

08001f04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <OTG_FS_IRQHandler+0x10>)
 8001f0a:	f001 fce0 	bl	80038ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20002220 	.word	0x20002220

08001f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f20:	4a14      	ldr	r2, [pc, #80]	; (8001f74 <_sbrk+0x5c>)
 8001f22:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <_sbrk+0x60>)
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f2c:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <_sbrk+0x64>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d102      	bne.n	8001f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <_sbrk+0x64>)
 8001f36:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <_sbrk+0x68>)
 8001f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <_sbrk+0x64>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d207      	bcs.n	8001f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f48:	f007 ffc0 	bl	8009ecc <__errno>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	220c      	movs	r2, #12
 8001f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f56:	e009      	b.n	8001f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f58:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <_sbrk+0x64>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f5e:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <_sbrk+0x64>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	4a05      	ldr	r2, [pc, #20]	; (8001f7c <_sbrk+0x64>)
 8001f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20020000 	.word	0x20020000
 8001f78:	00000400 	.word	0x00000400
 8001f7c:	20000614 	.word	0x20000614
 8001f80:	20002638 	.word	0x20002638

08001f84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f88:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <SystemInit+0x20>)
 8001f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8e:	4a05      	ldr	r2, [pc, #20]	; (8001fa4 <SystemInit+0x20>)
 8001f90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fe0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fac:	480d      	ldr	r0, [pc, #52]	; (8001fe4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fae:	490e      	ldr	r1, [pc, #56]	; (8001fe8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fb0:	4a0e      	ldr	r2, [pc, #56]	; (8001fec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb4:	e002      	b.n	8001fbc <LoopCopyDataInit>

08001fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fba:	3304      	adds	r3, #4

08001fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc0:	d3f9      	bcc.n	8001fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fc2:	4a0b      	ldr	r2, [pc, #44]	; (8001ff0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fc4:	4c0b      	ldr	r4, [pc, #44]	; (8001ff4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc8:	e001      	b.n	8001fce <LoopFillZerobss>

08001fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fcc:	3204      	adds	r2, #4

08001fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd0:	d3fb      	bcc.n	8001fca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fd2:	f7ff ffd7 	bl	8001f84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fd6:	f007 ff7f 	bl	8009ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fda:	f7ff f921 	bl	8001220 <main>
  bx  lr    
 8001fde:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fe0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001fec:	0800c868 	.word	0x0800c868
  ldr r2, =_sbss
 8001ff0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001ff4:	20002638 	.word	0x20002638

08001ff8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ff8:	e7fe      	b.n	8001ff8 <ADC_IRQHandler>
	...

08001ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002000:	4b0e      	ldr	r3, [pc, #56]	; (800203c <HAL_Init+0x40>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0d      	ldr	r2, [pc, #52]	; (800203c <HAL_Init+0x40>)
 8002006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800200a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_Init+0x40>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a0a      	ldr	r2, [pc, #40]	; (800203c <HAL_Init+0x40>)
 8002012:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002016:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <HAL_Init+0x40>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a07      	ldr	r2, [pc, #28]	; (800203c <HAL_Init+0x40>)
 800201e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002022:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002024:	2003      	movs	r0, #3
 8002026:	f000 f94f 	bl	80022c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800202a:	200f      	movs	r0, #15
 800202c:	f000 f808 	bl	8002040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002030:	f7ff fe36 	bl	8001ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40023c00 	.word	0x40023c00

08002040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_InitTick+0x54>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_InitTick+0x58>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	4619      	mov	r1, r3
 8002052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002056:	fbb3 f3f1 	udiv	r3, r3, r1
 800205a:	fbb2 f3f3 	udiv	r3, r2, r3
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f967 	bl	8002332 <HAL_SYSTICK_Config>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e00e      	b.n	800208c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b0f      	cmp	r3, #15
 8002072:	d80a      	bhi.n	800208a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002074:	2200      	movs	r2, #0
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800207c:	f000 f92f 	bl	80022de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002080:	4a06      	ldr	r2, [pc, #24]	; (800209c <HAL_InitTick+0x5c>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	e000      	b.n	800208c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000008 	.word	0x20000008
 8002098:	20000010 	.word	0x20000010
 800209c:	2000000c 	.word	0x2000000c

080020a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_IncTick+0x20>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_IncTick+0x24>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4413      	add	r3, r2
 80020b0:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <HAL_IncTick+0x24>)
 80020b2:	6013      	str	r3, [r2, #0]
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20000010 	.word	0x20000010
 80020c4:	20000c44 	.word	0x20000c44

080020c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return uwTick;
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <HAL_GetTick+0x14>)
 80020ce:	681b      	ldr	r3, [r3, #0]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	20000c44 	.word	0x20000c44

080020e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e8:	f7ff ffee 	bl	80020c8 <HAL_GetTick>
 80020ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020f8:	d005      	beq.n	8002106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020fa:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <HAL_Delay+0x44>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4413      	add	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002106:	bf00      	nop
 8002108:	f7ff ffde 	bl	80020c8 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	429a      	cmp	r2, r3
 8002116:	d8f7      	bhi.n	8002108 <HAL_Delay+0x28>
  {
  }
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000010 	.word	0x20000010

08002128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <__NVIC_SetPriorityGrouping+0x44>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002144:	4013      	ands	r3, r2
 8002146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002150:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800215a:	4a04      	ldr	r2, [pc, #16]	; (800216c <__NVIC_SetPriorityGrouping+0x44>)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	60d3      	str	r3, [r2, #12]
}
 8002160:	bf00      	nop
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002174:	4b04      	ldr	r3, [pc, #16]	; (8002188 <__NVIC_GetPriorityGrouping+0x18>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	0a1b      	lsrs	r3, r3, #8
 800217a:	f003 0307 	and.w	r3, r3, #7
}
 800217e:	4618      	mov	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	2b00      	cmp	r3, #0
 800219c:	db0b      	blt.n	80021b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	f003 021f 	and.w	r2, r3, #31
 80021a4:	4907      	ldr	r1, [pc, #28]	; (80021c4 <__NVIC_EnableIRQ+0x38>)
 80021a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021aa:	095b      	lsrs	r3, r3, #5
 80021ac:	2001      	movs	r0, #1
 80021ae:	fa00 f202 	lsl.w	r2, r0, r2
 80021b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	e000e100 	.word	0xe000e100

080021c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	6039      	str	r1, [r7, #0]
 80021d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	db0a      	blt.n	80021f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	490c      	ldr	r1, [pc, #48]	; (8002214 <__NVIC_SetPriority+0x4c>)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	0112      	lsls	r2, r2, #4
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	440b      	add	r3, r1
 80021ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021f0:	e00a      	b.n	8002208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	4908      	ldr	r1, [pc, #32]	; (8002218 <__NVIC_SetPriority+0x50>)
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	3b04      	subs	r3, #4
 8002200:	0112      	lsls	r2, r2, #4
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	440b      	add	r3, r1
 8002206:	761a      	strb	r2, [r3, #24]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000e100 	.word	0xe000e100
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800221c:	b480      	push	{r7}
 800221e:	b089      	sub	sp, #36	; 0x24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f1c3 0307 	rsb	r3, r3, #7
 8002236:	2b04      	cmp	r3, #4
 8002238:	bf28      	it	cs
 800223a:	2304      	movcs	r3, #4
 800223c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3304      	adds	r3, #4
 8002242:	2b06      	cmp	r3, #6
 8002244:	d902      	bls.n	800224c <NVIC_EncodePriority+0x30>
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3b03      	subs	r3, #3
 800224a:	e000      	b.n	800224e <NVIC_EncodePriority+0x32>
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002250:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43da      	mvns	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	401a      	ands	r2, r3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002264:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	fa01 f303 	lsl.w	r3, r1, r3
 800226e:	43d9      	mvns	r1, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002274:	4313      	orrs	r3, r2
         );
}
 8002276:	4618      	mov	r0, r3
 8002278:	3724      	adds	r7, #36	; 0x24
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
	...

08002284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002294:	d301      	bcc.n	800229a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002296:	2301      	movs	r3, #1
 8002298:	e00f      	b.n	80022ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800229a:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <SysTick_Config+0x40>)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3b01      	subs	r3, #1
 80022a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022a2:	210f      	movs	r1, #15
 80022a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022a8:	f7ff ff8e 	bl	80021c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022ac:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <SysTick_Config+0x40>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022b2:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <SysTick_Config+0x40>)
 80022b4:	2207      	movs	r2, #7
 80022b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	e000e010 	.word	0xe000e010

080022c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff ff29 	bl	8002128 <__NVIC_SetPriorityGrouping>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022de:	b580      	push	{r7, lr}
 80022e0:	b086      	sub	sp, #24
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	4603      	mov	r3, r0
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022f0:	f7ff ff3e 	bl	8002170 <__NVIC_GetPriorityGrouping>
 80022f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	6978      	ldr	r0, [r7, #20]
 80022fc:	f7ff ff8e 	bl	800221c <NVIC_EncodePriority>
 8002300:	4602      	mov	r2, r0
 8002302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff ff5d 	bl	80021c8 <__NVIC_SetPriority>
}
 800230e:	bf00      	nop
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff31 	bl	800218c <__NVIC_EnableIRQ>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ffa2 	bl	8002284 <SysTick_Config>
 8002340:	4603      	mov	r3, r0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002358:	f7ff feb6 	bl	80020c8 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e099      	b.n	800249c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0201 	bic.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002388:	e00f      	b.n	80023aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800238a:	f7ff fe9d 	bl	80020c8 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b05      	cmp	r3, #5
 8002396:	d908      	bls.n	80023aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2220      	movs	r2, #32
 800239c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2203      	movs	r2, #3
 80023a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e078      	b.n	800249c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1e8      	bne.n	800238a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	4b38      	ldr	r3, [pc, #224]	; (80024a4 <HAL_DMA_Init+0x158>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	2b04      	cmp	r3, #4
 8002402:	d107      	bne.n	8002414 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	4313      	orrs	r3, r2
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4313      	orrs	r3, r2
 8002412:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f023 0307 	bic.w	r3, r3, #7
 800242a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	4313      	orrs	r3, r2
 8002434:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	2b04      	cmp	r3, #4
 800243c:	d117      	bne.n	800246e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	4313      	orrs	r3, r2
 8002446:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00e      	beq.n	800246e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 fa91 	bl	8002978 <DMA_CheckFifoParam>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2240      	movs	r2, #64	; 0x40
 8002460:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800246a:	2301      	movs	r3, #1
 800246c:	e016      	b.n	800249c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fa48 	bl	800290c <DMA_CalcBaseAndBitshift>
 800247c:	4603      	mov	r3, r0
 800247e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002484:	223f      	movs	r2, #63	; 0x3f
 8002486:	409a      	lsls	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	f010803f 	.word	0xf010803f

080024a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_DMA_Start_IT+0x26>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e040      	b.n	8002550 <HAL_DMA_Start_IT+0xa8>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d12f      	bne.n	8002542 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2202      	movs	r2, #2
 80024e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f9da 	bl	80028b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	223f      	movs	r2, #63	; 0x3f
 8002502:	409a      	lsls	r2, r3
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0216 	orr.w	r2, r2, #22
 8002516:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	2b00      	cmp	r3, #0
 800251e:	d007      	beq.n	8002530 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0208 	orr.w	r2, r2, #8
 800252e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0201 	orr.w	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	e005      	b.n	800254e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800254a:	2302      	movs	r3, #2
 800254c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800254e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d004      	beq.n	8002576 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2280      	movs	r2, #128	; 0x80
 8002570:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e00c      	b.n	8002590 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2205      	movs	r2, #5
 800257a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0201 	bic.w	r2, r2, #1
 800258c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025a8:	4b92      	ldr	r3, [pc, #584]	; (80027f4 <HAL_DMA_IRQHandler+0x258>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a92      	ldr	r2, [pc, #584]	; (80027f8 <HAL_DMA_IRQHandler+0x25c>)
 80025ae:	fba2 2303 	umull	r2, r3, r2, r3
 80025b2:	0a9b      	lsrs	r3, r3, #10
 80025b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c6:	2208      	movs	r2, #8
 80025c8:	409a      	lsls	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d01a      	beq.n	8002608 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d013      	beq.n	8002608 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0204 	bic.w	r2, r2, #4
 80025ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f4:	2208      	movs	r2, #8
 80025f6:	409a      	lsls	r2, r3
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002600:	f043 0201 	orr.w	r2, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260c:	2201      	movs	r2, #1
 800260e:	409a      	lsls	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4013      	ands	r3, r2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d012      	beq.n	800263e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00b      	beq.n	800263e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262a:	2201      	movs	r2, #1
 800262c:	409a      	lsls	r2, r3
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002636:	f043 0202 	orr.w	r2, r3, #2
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002642:	2204      	movs	r2, #4
 8002644:	409a      	lsls	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4013      	ands	r3, r2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d012      	beq.n	8002674 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00b      	beq.n	8002674 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002660:	2204      	movs	r2, #4
 8002662:	409a      	lsls	r2, r3
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266c:	f043 0204 	orr.w	r2, r3, #4
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002678:	2210      	movs	r2, #16
 800267a:	409a      	lsls	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d043      	beq.n	800270c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d03c      	beq.n	800270c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002696:	2210      	movs	r2, #16
 8002698:	409a      	lsls	r2, r3
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d018      	beq.n	80026de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d108      	bne.n	80026cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d024      	beq.n	800270c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	4798      	blx	r3
 80026ca:	e01f      	b.n	800270c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01b      	beq.n	800270c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	4798      	blx	r3
 80026dc:	e016      	b.n	800270c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d107      	bne.n	80026fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0208 	bic.w	r2, r2, #8
 80026fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002710:	2220      	movs	r2, #32
 8002712:	409a      	lsls	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4013      	ands	r3, r2
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 808e 	beq.w	800283a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0310 	and.w	r3, r3, #16
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 8086 	beq.w	800283a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002732:	2220      	movs	r2, #32
 8002734:	409a      	lsls	r2, r3
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b05      	cmp	r3, #5
 8002744:	d136      	bne.n	80027b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0216 	bic.w	r2, r2, #22
 8002754:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695a      	ldr	r2, [r3, #20]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002764:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	2b00      	cmp	r3, #0
 800276c:	d103      	bne.n	8002776 <HAL_DMA_IRQHandler+0x1da>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002772:	2b00      	cmp	r3, #0
 8002774:	d007      	beq.n	8002786 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 0208 	bic.w	r2, r2, #8
 8002784:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278a:	223f      	movs	r2, #63	; 0x3f
 800278c:	409a      	lsls	r2, r3
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d07d      	beq.n	80028a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	4798      	blx	r3
        }
        return;
 80027b2:	e078      	b.n	80028a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d01c      	beq.n	80027fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d108      	bne.n	80027e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d030      	beq.n	800283a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	4798      	blx	r3
 80027e0:	e02b      	b.n	800283a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d027      	beq.n	800283a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	4798      	blx	r3
 80027f2:	e022      	b.n	800283a <HAL_DMA_IRQHandler+0x29e>
 80027f4:	20000008 	.word	0x20000008
 80027f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10f      	bne.n	800282a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0210 	bic.w	r2, r2, #16
 8002818:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283e:	2b00      	cmp	r3, #0
 8002840:	d032      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d022      	beq.n	8002894 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2205      	movs	r2, #5
 8002852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0201 	bic.w	r2, r2, #1
 8002864:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	3301      	adds	r3, #1
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	429a      	cmp	r2, r3
 8002870:	d307      	bcc.n	8002882 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1f2      	bne.n	8002866 <HAL_DMA_IRQHandler+0x2ca>
 8002880:	e000      	b.n	8002884 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002882:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	4798      	blx	r3
 80028a4:	e000      	b.n	80028a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80028a6:	bf00      	nop
    }
  }
}
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop

080028b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b40      	cmp	r3, #64	; 0x40
 80028dc:	d108      	bne.n	80028f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028ee:	e007      	b.n	8002900 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	60da      	str	r2, [r3, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	3b10      	subs	r3, #16
 800291c:	4a14      	ldr	r2, [pc, #80]	; (8002970 <DMA_CalcBaseAndBitshift+0x64>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	091b      	lsrs	r3, r3, #4
 8002924:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002926:	4a13      	ldr	r2, [pc, #76]	; (8002974 <DMA_CalcBaseAndBitshift+0x68>)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2b03      	cmp	r3, #3
 8002938:	d909      	bls.n	800294e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002942:	f023 0303 	bic.w	r3, r3, #3
 8002946:	1d1a      	adds	r2, r3, #4
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	659a      	str	r2, [r3, #88]	; 0x58
 800294c:	e007      	b.n	800295e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002956:	f023 0303 	bic.w	r3, r3, #3
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002962:	4618      	mov	r0, r3
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	aaaaaaab 	.word	0xaaaaaaab
 8002974:	0800c644 	.word	0x0800c644

08002978 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002988:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d11f      	bne.n	80029d2 <DMA_CheckFifoParam+0x5a>
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2b03      	cmp	r3, #3
 8002996:	d856      	bhi.n	8002a46 <DMA_CheckFifoParam+0xce>
 8002998:	a201      	add	r2, pc, #4	; (adr r2, 80029a0 <DMA_CheckFifoParam+0x28>)
 800299a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299e:	bf00      	nop
 80029a0:	080029b1 	.word	0x080029b1
 80029a4:	080029c3 	.word	0x080029c3
 80029a8:	080029b1 	.word	0x080029b1
 80029ac:	08002a47 	.word	0x08002a47
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d046      	beq.n	8002a4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c0:	e043      	b.n	8002a4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029ca:	d140      	bne.n	8002a4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d0:	e03d      	b.n	8002a4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029da:	d121      	bne.n	8002a20 <DMA_CheckFifoParam+0xa8>
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d837      	bhi.n	8002a52 <DMA_CheckFifoParam+0xda>
 80029e2:	a201      	add	r2, pc, #4	; (adr r2, 80029e8 <DMA_CheckFifoParam+0x70>)
 80029e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e8:	080029f9 	.word	0x080029f9
 80029ec:	080029ff 	.word	0x080029ff
 80029f0:	080029f9 	.word	0x080029f9
 80029f4:	08002a11 	.word	0x08002a11
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
      break;
 80029fc:	e030      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d025      	beq.n	8002a56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a0e:	e022      	b.n	8002a56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a18:	d11f      	bne.n	8002a5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a1e:	e01c      	b.n	8002a5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d903      	bls.n	8002a2e <DMA_CheckFifoParam+0xb6>
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d003      	beq.n	8002a34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a2c:	e018      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	73fb      	strb	r3, [r7, #15]
      break;
 8002a32:	e015      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00e      	beq.n	8002a5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
      break;
 8002a44:	e00b      	b.n	8002a5e <DMA_CheckFifoParam+0xe6>
      break;
 8002a46:	bf00      	nop
 8002a48:	e00a      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;
 8002a4a:	bf00      	nop
 8002a4c:	e008      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;
 8002a4e:	bf00      	nop
 8002a50:	e006      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;
 8002a52:	bf00      	nop
 8002a54:	e004      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;
 8002a56:	bf00      	nop
 8002a58:	e002      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a5a:	bf00      	nop
 8002a5c:	e000      	b.n	8002a60 <DMA_CheckFifoParam+0xe8>
      break;
 8002a5e:	bf00      	nop
    }
  } 
  
  return status; 
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop

08002a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b089      	sub	sp, #36	; 0x24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
 8002a8a:	e159      	b.n	8002d40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	f040 8148 	bne.w	8002d3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d005      	beq.n	8002ac2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d130      	bne.n	8002b24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	2203      	movs	r2, #3
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002af8:	2201      	movs	r2, #1
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	091b      	lsrs	r3, r3, #4
 8002b0e:	f003 0201 	and.w	r2, r3, #1
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d017      	beq.n	8002b60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d123      	bne.n	8002bb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	08da      	lsrs	r2, r3, #3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3208      	adds	r2, #8
 8002b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	220f      	movs	r2, #15
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	08da      	lsrs	r2, r3, #3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3208      	adds	r2, #8
 8002bae:	69b9      	ldr	r1, [r7, #24]
 8002bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0203 	and.w	r2, r3, #3
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 80a2 	beq.w	8002d3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	4b57      	ldr	r3, [pc, #348]	; (8002d58 <HAL_GPIO_Init+0x2e8>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	4a56      	ldr	r2, [pc, #344]	; (8002d58 <HAL_GPIO_Init+0x2e8>)
 8002c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c04:	6453      	str	r3, [r2, #68]	; 0x44
 8002c06:	4b54      	ldr	r3, [pc, #336]	; (8002d58 <HAL_GPIO_Init+0x2e8>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c12:	4a52      	ldr	r2, [pc, #328]	; (8002d5c <HAL_GPIO_Init+0x2ec>)
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	089b      	lsrs	r3, r3, #2
 8002c18:	3302      	adds	r3, #2
 8002c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	220f      	movs	r2, #15
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a49      	ldr	r2, [pc, #292]	; (8002d60 <HAL_GPIO_Init+0x2f0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d019      	beq.n	8002c72 <HAL_GPIO_Init+0x202>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a48      	ldr	r2, [pc, #288]	; (8002d64 <HAL_GPIO_Init+0x2f4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d013      	beq.n	8002c6e <HAL_GPIO_Init+0x1fe>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a47      	ldr	r2, [pc, #284]	; (8002d68 <HAL_GPIO_Init+0x2f8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00d      	beq.n	8002c6a <HAL_GPIO_Init+0x1fa>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a46      	ldr	r2, [pc, #280]	; (8002d6c <HAL_GPIO_Init+0x2fc>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d007      	beq.n	8002c66 <HAL_GPIO_Init+0x1f6>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a45      	ldr	r2, [pc, #276]	; (8002d70 <HAL_GPIO_Init+0x300>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d101      	bne.n	8002c62 <HAL_GPIO_Init+0x1f2>
 8002c5e:	2304      	movs	r3, #4
 8002c60:	e008      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c62:	2307      	movs	r3, #7
 8002c64:	e006      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c66:	2303      	movs	r3, #3
 8002c68:	e004      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e002      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c72:	2300      	movs	r3, #0
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	f002 0203 	and.w	r2, r2, #3
 8002c7a:	0092      	lsls	r2, r2, #2
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c84:	4935      	ldr	r1, [pc, #212]	; (8002d5c <HAL_GPIO_Init+0x2ec>)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	089b      	lsrs	r3, r3, #2
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c92:	4b38      	ldr	r3, [pc, #224]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cb6:	4a2f      	ldr	r2, [pc, #188]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cbc:	4b2d      	ldr	r3, [pc, #180]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ce0:	4a24      	ldr	r2, [pc, #144]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ce6:	4b23      	ldr	r3, [pc, #140]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d0a:	4a1a      	ldr	r2, [pc, #104]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d10:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d34:	4a0f      	ldr	r2, [pc, #60]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	2b0f      	cmp	r3, #15
 8002d44:	f67f aea2 	bls.w	8002a8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	3724      	adds	r7, #36	; 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40013800 	.word	0x40013800
 8002d60:	40020000 	.word	0x40020000
 8002d64:	40020400 	.word	0x40020400
 8002d68:	40020800 	.word	0x40020800
 8002d6c:	40020c00 	.word	0x40020c00
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40013c00 	.word	0x40013c00

08002d78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e12b      	b.n	8002fe2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7fe ffa6 	bl	8001cf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2224      	movs	r2, #36	; 0x24
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0201 	bic.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ddc:	f002 f9ca 	bl	8005174 <HAL_RCC_GetPCLK1Freq>
 8002de0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4a81      	ldr	r2, [pc, #516]	; (8002fec <HAL_I2C_Init+0x274>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d807      	bhi.n	8002dfc <HAL_I2C_Init+0x84>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4a80      	ldr	r2, [pc, #512]	; (8002ff0 <HAL_I2C_Init+0x278>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	bf94      	ite	ls
 8002df4:	2301      	movls	r3, #1
 8002df6:	2300      	movhi	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	e006      	b.n	8002e0a <HAL_I2C_Init+0x92>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4a7d      	ldr	r2, [pc, #500]	; (8002ff4 <HAL_I2C_Init+0x27c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	bf94      	ite	ls
 8002e04:	2301      	movls	r3, #1
 8002e06:	2300      	movhi	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e0e7      	b.n	8002fe2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4a78      	ldr	r2, [pc, #480]	; (8002ff8 <HAL_I2C_Init+0x280>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	0c9b      	lsrs	r3, r3, #18
 8002e1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	4a6a      	ldr	r2, [pc, #424]	; (8002fec <HAL_I2C_Init+0x274>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d802      	bhi.n	8002e4c <HAL_I2C_Init+0xd4>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	e009      	b.n	8002e60 <HAL_I2C_Init+0xe8>
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e52:	fb02 f303 	mul.w	r3, r2, r3
 8002e56:	4a69      	ldr	r2, [pc, #420]	; (8002ffc <HAL_I2C_Init+0x284>)
 8002e58:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5c:	099b      	lsrs	r3, r3, #6
 8002e5e:	3301      	adds	r3, #1
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	430b      	orrs	r3, r1
 8002e66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	495c      	ldr	r1, [pc, #368]	; (8002fec <HAL_I2C_Init+0x274>)
 8002e7c:	428b      	cmp	r3, r1
 8002e7e:	d819      	bhi.n	8002eb4 <HAL_I2C_Init+0x13c>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	1e59      	subs	r1, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e8e:	1c59      	adds	r1, r3, #1
 8002e90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e94:	400b      	ands	r3, r1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <HAL_I2C_Init+0x138>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1e59      	subs	r1, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eae:	e051      	b.n	8002f54 <HAL_I2C_Init+0x1dc>
 8002eb0:	2304      	movs	r3, #4
 8002eb2:	e04f      	b.n	8002f54 <HAL_I2C_Init+0x1dc>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d111      	bne.n	8002ee0 <HAL_I2C_Init+0x168>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	1e58      	subs	r0, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6859      	ldr	r1, [r3, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	440b      	add	r3, r1
 8002eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ece:	3301      	adds	r3, #1
 8002ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bf0c      	ite	eq
 8002ed8:	2301      	moveq	r3, #1
 8002eda:	2300      	movne	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	e012      	b.n	8002f06 <HAL_I2C_Init+0x18e>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1e58      	subs	r0, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	0099      	lsls	r1, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	bf0c      	ite	eq
 8002f00:	2301      	moveq	r3, #1
 8002f02:	2300      	movne	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_I2C_Init+0x196>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e022      	b.n	8002f54 <HAL_I2C_Init+0x1dc>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10e      	bne.n	8002f34 <HAL_I2C_Init+0x1bc>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	1e58      	subs	r0, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6859      	ldr	r1, [r3, #4]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	440b      	add	r3, r1
 8002f24:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f28:	3301      	adds	r3, #1
 8002f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f32:	e00f      	b.n	8002f54 <HAL_I2C_Init+0x1dc>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	1e58      	subs	r0, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	0099      	lsls	r1, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	6809      	ldr	r1, [r1, #0]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69da      	ldr	r2, [r3, #28]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6911      	ldr	r1, [r2, #16]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68d2      	ldr	r2, [r2, #12]
 8002f8e:	4311      	orrs	r1, r2
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	430b      	orrs	r3, r1
 8002f96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695a      	ldr	r2, [r3, #20]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0201 	orr.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	000186a0 	.word	0x000186a0
 8002ff0:	001e847f 	.word	0x001e847f
 8002ff4:	003d08ff 	.word	0x003d08ff
 8002ff8:	431bde83 	.word	0x431bde83
 8002ffc:	10624dd3 	.word	0x10624dd3

08003000 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af02      	add	r7, sp, #8
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	4608      	mov	r0, r1
 800300a:	4611      	mov	r1, r2
 800300c:	461a      	mov	r2, r3
 800300e:	4603      	mov	r3, r0
 8003010:	817b      	strh	r3, [r7, #10]
 8003012:	460b      	mov	r3, r1
 8003014:	813b      	strh	r3, [r7, #8]
 8003016:	4613      	mov	r3, r2
 8003018:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800301a:	f7ff f855 	bl	80020c8 <HAL_GetTick>
 800301e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b20      	cmp	r3, #32
 800302a:	f040 80d9 	bne.w	80031e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	2319      	movs	r3, #25
 8003034:	2201      	movs	r2, #1
 8003036:	496d      	ldr	r1, [pc, #436]	; (80031ec <HAL_I2C_Mem_Write+0x1ec>)
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 f971 	bl	8003320 <I2C_WaitOnFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003044:	2302      	movs	r3, #2
 8003046:	e0cc      	b.n	80031e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_I2C_Mem_Write+0x56>
 8003052:	2302      	movs	r3, #2
 8003054:	e0c5      	b.n	80031e2 <HAL_I2C_Mem_Write+0x1e2>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b01      	cmp	r3, #1
 800306a:	d007      	beq.n	800307c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0201 	orr.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800308a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2221      	movs	r2, #33	; 0x21
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2240      	movs	r2, #64	; 0x40
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a3a      	ldr	r2, [r7, #32]
 80030a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4a4d      	ldr	r2, [pc, #308]	; (80031f0 <HAL_I2C_Mem_Write+0x1f0>)
 80030bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030be:	88f8      	ldrh	r0, [r7, #6]
 80030c0:	893a      	ldrh	r2, [r7, #8]
 80030c2:	8979      	ldrh	r1, [r7, #10]
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	9301      	str	r3, [sp, #4]
 80030c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	4603      	mov	r3, r0
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f890 	bl	80031f4 <I2C_RequestMemoryWrite>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d052      	beq.n	8003180 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e081      	b.n	80031e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f9f2 	bl	80034cc <I2C_WaitOnTXEFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00d      	beq.n	800310a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d107      	bne.n	8003106 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003104:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e06b      	b.n	80031e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	781a      	ldrb	r2, [r3, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003130:	b29b      	uxth	r3, r3
 8003132:	3b01      	subs	r3, #1
 8003134:	b29a      	uxth	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b04      	cmp	r3, #4
 8003146:	d11b      	bne.n	8003180 <HAL_I2C_Mem_Write+0x180>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314c:	2b00      	cmp	r3, #0
 800314e:	d017      	beq.n	8003180 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	781a      	ldrb	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003176:	b29b      	uxth	r3, r3
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1aa      	bne.n	80030de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 f9de 	bl	800354e <I2C_WaitOnBTFFlagUntilTimeout>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00d      	beq.n	80031b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	2b04      	cmp	r3, #4
 800319e:	d107      	bne.n	80031b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e016      	b.n	80031e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	e000      	b.n	80031e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031e0:	2302      	movs	r3, #2
  }
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	00100002 	.word	0x00100002
 80031f0:	ffff0000 	.word	0xffff0000

080031f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b088      	sub	sp, #32
 80031f8:	af02      	add	r7, sp, #8
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	4608      	mov	r0, r1
 80031fe:	4611      	mov	r1, r2
 8003200:	461a      	mov	r2, r3
 8003202:	4603      	mov	r3, r0
 8003204:	817b      	strh	r3, [r7, #10]
 8003206:	460b      	mov	r3, r1
 8003208:	813b      	strh	r3, [r7, #8]
 800320a:	4613      	mov	r3, r2
 800320c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800321c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	2200      	movs	r2, #0
 8003226:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 f878 	bl	8003320 <I2C_WaitOnFlagUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00d      	beq.n	8003252 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003244:	d103      	bne.n	800324e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800324c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e05f      	b.n	8003312 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003252:	897b      	ldrh	r3, [r7, #10]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	461a      	mov	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003260:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	6a3a      	ldr	r2, [r7, #32]
 8003266:	492d      	ldr	r1, [pc, #180]	; (800331c <I2C_RequestMemoryWrite+0x128>)
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 f8b0 	bl	80033ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e04c      	b.n	8003312 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003278:	2300      	movs	r3, #0
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800328e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003290:	6a39      	ldr	r1, [r7, #32]
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f91a 	bl	80034cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00d      	beq.n	80032ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d107      	bne.n	80032b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e02b      	b.n	8003312 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032ba:	88fb      	ldrh	r3, [r7, #6]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d105      	bne.n	80032cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032c0:	893b      	ldrh	r3, [r7, #8]
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	611a      	str	r2, [r3, #16]
 80032ca:	e021      	b.n	8003310 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032cc:	893b      	ldrh	r3, [r7, #8]
 80032ce:	0a1b      	lsrs	r3, r3, #8
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032dc:	6a39      	ldr	r1, [r7, #32]
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 f8f4 	bl	80034cc <I2C_WaitOnTXEFlagUntilTimeout>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00d      	beq.n	8003306 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d107      	bne.n	8003302 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003300:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e005      	b.n	8003312 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003306:	893b      	ldrh	r3, [r7, #8]
 8003308:	b2da      	uxtb	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	00010002 	.word	0x00010002

08003320 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	4613      	mov	r3, r2
 800332e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003330:	e025      	b.n	800337e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003338:	d021      	beq.n	800337e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333a:	f7fe fec5 	bl	80020c8 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d302      	bcc.n	8003350 <I2C_WaitOnFlagUntilTimeout+0x30>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d116      	bne.n	800337e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2220      	movs	r2, #32
 800335a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f043 0220 	orr.w	r2, r3, #32
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e023      	b.n	80033c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	0c1b      	lsrs	r3, r3, #16
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b01      	cmp	r3, #1
 8003386:	d10d      	bne.n	80033a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	43da      	mvns	r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	4013      	ands	r3, r2
 8003394:	b29b      	uxth	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	bf0c      	ite	eq
 800339a:	2301      	moveq	r3, #1
 800339c:	2300      	movne	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	461a      	mov	r2, r3
 80033a2:	e00c      	b.n	80033be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	43da      	mvns	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	4013      	ands	r3, r2
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	bf0c      	ite	eq
 80033b6:	2301      	moveq	r3, #1
 80033b8:	2300      	movne	r3, #0
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d0b6      	beq.n	8003332 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b084      	sub	sp, #16
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033dc:	e051      	b.n	8003482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ec:	d123      	bne.n	8003436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003406:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2220      	movs	r2, #32
 8003412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	f043 0204 	orr.w	r2, r3, #4
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e046      	b.n	80034c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800343c:	d021      	beq.n	8003482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800343e:	f7fe fe43 	bl	80020c8 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	429a      	cmp	r2, r3
 800344c:	d302      	bcc.n	8003454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d116      	bne.n	8003482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2220      	movs	r2, #32
 800345e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	f043 0220 	orr.w	r2, r3, #32
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e020      	b.n	80034c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	0c1b      	lsrs	r3, r3, #16
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b01      	cmp	r3, #1
 800348a:	d10c      	bne.n	80034a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	43da      	mvns	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	4013      	ands	r3, r2
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	bf14      	ite	ne
 800349e:	2301      	movne	r3, #1
 80034a0:	2300      	moveq	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	e00b      	b.n	80034be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	43da      	mvns	r2, r3
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	4013      	ands	r3, r2
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	bf14      	ite	ne
 80034b8:	2301      	movne	r3, #1
 80034ba:	2300      	moveq	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d18d      	bne.n	80033de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034d8:	e02d      	b.n	8003536 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f878 	bl	80035d0 <I2C_IsAcknowledgeFailed>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e02d      	b.n	8003546 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034f0:	d021      	beq.n	8003536 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f2:	f7fe fde9 	bl	80020c8 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d302      	bcc.n	8003508 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d116      	bne.n	8003536 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	f043 0220 	orr.w	r2, r3, #32
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e007      	b.n	8003546 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003540:	2b80      	cmp	r3, #128	; 0x80
 8003542:	d1ca      	bne.n	80034da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800355a:	e02d      	b.n	80035b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 f837 	bl	80035d0 <I2C_IsAcknowledgeFailed>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e02d      	b.n	80035c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003572:	d021      	beq.n	80035b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003574:	f7fe fda8 	bl	80020c8 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	429a      	cmp	r2, r3
 8003582:	d302      	bcc.n	800358a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d116      	bne.n	80035b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	f043 0220 	orr.w	r2, r3, #32
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e007      	b.n	80035c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d1ca      	bne.n	800355c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e6:	d11b      	bne.n	8003620 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f043 0204 	orr.w	r2, r3, #4
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e000      	b.n	8003622 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800362e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003630:	b08f      	sub	sp, #60	; 0x3c
 8003632:	af0a      	add	r7, sp, #40	; 0x28
 8003634:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e10f      	b.n	8003860 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f006 f92c 	bl	80098b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2203      	movs	r2, #3
 8003664:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d102      	bne.n	800367a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f002 ffb9 	bl	80065f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	603b      	str	r3, [r7, #0]
 800368a:	687e      	ldr	r6, [r7, #4]
 800368c:	466d      	mov	r5, sp
 800368e:	f106 0410 	add.w	r4, r6, #16
 8003692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800369a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800369e:	e885 0003 	stmia.w	r5, {r0, r1}
 80036a2:	1d33      	adds	r3, r6, #4
 80036a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036a6:	6838      	ldr	r0, [r7, #0]
 80036a8:	f002 fe90 	bl	80063cc <USB_CoreInit>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d005      	beq.n	80036be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2202      	movs	r2, #2
 80036b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e0d0      	b.n	8003860 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2100      	movs	r1, #0
 80036c4:	4618      	mov	r0, r3
 80036c6:	f002 ffa7 	bl	8006618 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ca:	2300      	movs	r3, #0
 80036cc:	73fb      	strb	r3, [r7, #15]
 80036ce:	e04a      	b.n	8003766 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036d0:	7bfa      	ldrb	r2, [r7, #15]
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	1a9b      	subs	r3, r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	333d      	adds	r3, #61	; 0x3d
 80036e0:	2201      	movs	r2, #1
 80036e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036e4:	7bfa      	ldrb	r2, [r7, #15]
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	333c      	adds	r3, #60	; 0x3c
 80036f4:	7bfa      	ldrb	r2, [r7, #15]
 80036f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036f8:	7bfa      	ldrb	r2, [r7, #15]
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
 80036fc:	b298      	uxth	r0, r3
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	4613      	mov	r3, r2
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	1a9b      	subs	r3, r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	3342      	adds	r3, #66	; 0x42
 800370c:	4602      	mov	r2, r0
 800370e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003710:	7bfa      	ldrb	r2, [r7, #15]
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	4613      	mov	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	333f      	adds	r3, #63	; 0x3f
 8003720:	2200      	movs	r2, #0
 8003722:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003724:	7bfa      	ldrb	r2, [r7, #15]
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	4613      	mov	r3, r2
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	1a9b      	subs	r3, r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	3344      	adds	r3, #68	; 0x44
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003738:	7bfa      	ldrb	r2, [r7, #15]
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	4613      	mov	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	3348      	adds	r3, #72	; 0x48
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800374c:	7bfa      	ldrb	r2, [r7, #15]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	3350      	adds	r3, #80	; 0x50
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	3301      	adds	r3, #1
 8003764:	73fb      	strb	r3, [r7, #15]
 8003766:	7bfa      	ldrb	r2, [r7, #15]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	429a      	cmp	r2, r3
 800376e:	d3af      	bcc.n	80036d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003770:	2300      	movs	r3, #0
 8003772:	73fb      	strb	r3, [r7, #15]
 8003774:	e044      	b.n	8003800 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003776:	7bfa      	ldrb	r2, [r7, #15]
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	4613      	mov	r3, r2
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	1a9b      	subs	r3, r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003788:	2200      	movs	r2, #0
 800378a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800378c:	7bfa      	ldrb	r2, [r7, #15]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	1a9b      	subs	r3, r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800379e:	7bfa      	ldrb	r2, [r7, #15]
 80037a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037a2:	7bfa      	ldrb	r2, [r7, #15]
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80037b4:	2200      	movs	r2, #0
 80037b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037b8:	7bfa      	ldrb	r2, [r7, #15]
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037ca:	2200      	movs	r2, #0
 80037cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037ce:	7bfa      	ldrb	r2, [r7, #15]
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	1a9b      	subs	r3, r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037e4:	7bfa      	ldrb	r2, [r7, #15]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
 80037fc:	3301      	adds	r3, #1
 80037fe:	73fb      	strb	r3, [r7, #15]
 8003800:	7bfa      	ldrb	r2, [r7, #15]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	429a      	cmp	r2, r3
 8003808:	d3b5      	bcc.n	8003776 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	687e      	ldr	r6, [r7, #4]
 8003812:	466d      	mov	r5, sp
 8003814:	f106 0410 	add.w	r4, r6, #16
 8003818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800381a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800381c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800381e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003820:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003824:	e885 0003 	stmia.w	r5, {r0, r1}
 8003828:	1d33      	adds	r3, r6, #4
 800382a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800382c:	6838      	ldr	r0, [r7, #0]
 800382e:	f002 ff3f 	bl	80066b0 <USB_DevInit>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e00d      	b.n	8003860 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f003 ffbb 	bl	80077d4 <USB_DevDisconnect>

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003868 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_PCD_Start+0x1c>
 8003880:	2302      	movs	r3, #2
 8003882:	e020      	b.n	80038c6 <HAL_PCD_Start+0x5e>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003890:	2b01      	cmp	r3, #1
 8003892:	d109      	bne.n	80038a8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003898:	2b01      	cmp	r3, #1
 800389a:	d005      	beq.n	80038a8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f002 fe91 	bl	80065d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f003 ff6b 	bl	8007792 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038ce:	b590      	push	{r4, r7, lr}
 80038d0:	b08d      	sub	sp, #52	; 0x34
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f004 f829 	bl	800793c <USB_GetMode>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f040 839d 	bne.w	800402c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f003 ff8d 	bl	8007816 <USB_ReadInterrupts>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 8393 	beq.w	800402a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f003 ff84 	bl	8007816 <USB_ReadInterrupts>
 800390e:	4603      	mov	r3, r0
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b02      	cmp	r3, #2
 8003916:	d107      	bne.n	8003928 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695a      	ldr	r2, [r3, #20]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f002 0202 	and.w	r2, r2, #2
 8003926:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f003 ff72 	bl	8007816 <USB_ReadInterrupts>
 8003932:	4603      	mov	r3, r0
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b10      	cmp	r3, #16
 800393a:	d161      	bne.n	8003a00 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699a      	ldr	r2, [r3, #24]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0210 	bic.w	r2, r2, #16
 800394a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	f003 020f 	and.w	r2, r3, #15
 8003958:	4613      	mov	r3, r2
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	1a9b      	subs	r3, r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	4413      	add	r3, r2
 8003968:	3304      	adds	r3, #4
 800396a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	0c5b      	lsrs	r3, r3, #17
 8003970:	f003 030f 	and.w	r3, r3, #15
 8003974:	2b02      	cmp	r3, #2
 8003976:	d124      	bne.n	80039c2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800397e:	4013      	ands	r3, r2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d035      	beq.n	80039f0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	091b      	lsrs	r3, r3, #4
 800398c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800398e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003992:	b29b      	uxth	r3, r3
 8003994:	461a      	mov	r2, r3
 8003996:	6a38      	ldr	r0, [r7, #32]
 8003998:	f003 fda9 	bl	80074ee <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	091b      	lsrs	r3, r3, #4
 80039a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039a8:	441a      	add	r2, r3
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	699a      	ldr	r2, [r3, #24]
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039ba:	441a      	add	r2, r3
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	619a      	str	r2, [r3, #24]
 80039c0:	e016      	b.n	80039f0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	0c5b      	lsrs	r3, r3, #17
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	2b06      	cmp	r3, #6
 80039cc:	d110      	bne.n	80039f0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039d4:	2208      	movs	r2, #8
 80039d6:	4619      	mov	r1, r3
 80039d8:	6a38      	ldr	r0, [r7, #32]
 80039da:	f003 fd88 	bl	80074ee <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	699a      	ldr	r2, [r3, #24]
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039ea:	441a      	add	r2, r3
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699a      	ldr	r2, [r3, #24]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0210 	orr.w	r2, r2, #16
 80039fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f003 ff06 	bl	8007816 <USB_ReadInterrupts>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a10:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a14:	d16e      	bne.n	8003af4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f003 ff0c 	bl	800783c <USB_ReadDevAllOutEpInterrupt>
 8003a24:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003a26:	e062      	b.n	8003aee <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d057      	beq.n	8003ae2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f003 ff31 	bl	80078a4 <USB_ReadDevOutEPInterrupt>
 8003a42:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00c      	beq.n	8003a68 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fdb0 	bl	80045c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00c      	beq.n	8003a8c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7e:	461a      	mov	r2, r3
 8003a80:	2308      	movs	r3, #8
 8003a82:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 feaa 	bl	80047e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f003 0310 	and.w	r3, r3, #16
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d008      	beq.n	8003aa8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d008      	beq.n	8003ac4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003abe:	461a      	mov	r2, r3
 8003ac0:	2320      	movs	r3, #32
 8003ac2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d009      	beq.n	8003ae2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ada:	461a      	mov	r2, r3
 8003adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ae0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aea:	085b      	lsrs	r3, r3, #1
 8003aec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d199      	bne.n	8003a28 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f003 fe8c 	bl	8007816 <USB_ReadInterrupts>
 8003afe:	4603      	mov	r3, r0
 8003b00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b08:	f040 80c0 	bne.w	8003c8c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f003 fead 	bl	8007870 <USB_ReadDevAllInEpInterrupt>
 8003b16:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003b1c:	e0b2      	b.n	8003c84 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80a7 	beq.w	8003c78 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	4611      	mov	r1, r2
 8003b34:	4618      	mov	r0, r3
 8003b36:	f003 fed3 	bl	80078e0 <USB_ReadDevInEPInterrupt>
 8003b3a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d057      	beq.n	8003bf6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	f003 030f 	and.w	r3, r3, #15
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	69f9      	ldr	r1, [r7, #28]
 8003b62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b66:	4013      	ands	r3, r2
 8003b68:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b76:	461a      	mov	r2, r3
 8003b78:	2301      	movs	r3, #1
 8003b7a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d132      	bne.n	8003bea <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b88:	4613      	mov	r3, r2
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	1a9b      	subs	r3, r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	3348      	adds	r3, #72	; 0x48
 8003b94:	6819      	ldr	r1, [r3, #0]
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	1a9b      	subs	r3, r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4403      	add	r3, r0
 8003ba4:	3344      	adds	r3, #68	; 0x44
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4419      	add	r1, r3
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bae:	4613      	mov	r3, r2
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4403      	add	r3, r0
 8003bb8:	3348      	adds	r3, #72	; 0x48
 8003bba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d113      	bne.n	8003bea <HAL_PCD_IRQHandler+0x31c>
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	1a9b      	subs	r3, r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	3350      	adds	r3, #80	; 0x50
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d108      	bne.n	8003bea <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6818      	ldr	r0, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003be2:	461a      	mov	r2, r3
 8003be4:	2101      	movs	r1, #1
 8003be6:	f003 fedb 	bl	80079a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	4619      	mov	r1, r3
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f005 fee2 	bl	80099ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d008      	beq.n	8003c12 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	2308      	movs	r3, #8
 8003c10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f003 0310 	and.w	r3, r3, #16
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c28:	461a      	mov	r2, r3
 8003c2a:	2310      	movs	r3, #16
 8003c2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d008      	beq.n	8003c4a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c44:	461a      	mov	r2, r3
 8003c46:	2340      	movs	r3, #64	; 0x40
 8003c48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d008      	beq.n	8003c66 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c60:	461a      	mov	r2, r3
 8003c62:	2302      	movs	r3, #2
 8003c64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003c70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fc1b 	bl	80044ae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c80:	085b      	lsrs	r3, r3, #1
 8003c82:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f47f af49 	bne.w	8003b1e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f003 fdc0 	bl	8007816 <USB_ReadInterrupts>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ca0:	d122      	bne.n	8003ce8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	69fa      	ldr	r2, [r7, #28]
 8003cac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cb0:	f023 0301 	bic.w	r3, r3, #1
 8003cb4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d108      	bne.n	8003cd2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003cc8:	2100      	movs	r1, #0
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fe26 	bl	800491c <HAL_PCDEx_LPM_Callback>
 8003cd0:	e002      	b.n	8003cd8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f005 fede 	bl	8009a94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695a      	ldr	r2, [r3, #20]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003ce6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f003 fd92 	bl	8007816 <USB_ReadInterrupts>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cfc:	d112      	bne.n	8003d24 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d102      	bne.n	8003d14 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f005 fe9a 	bl	8009a48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695a      	ldr	r2, [r3, #20]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003d22:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f003 fd74 	bl	8007816 <USB_ReadInterrupts>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d38:	f040 80c7 	bne.w	8003eca <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	69fa      	ldr	r2, [r7, #28]
 8003d46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d4a:	f023 0301 	bic.w	r3, r3, #1
 8003d4e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2110      	movs	r1, #16
 8003d56:	4618      	mov	r0, r3
 8003d58:	f002 fe0e 	bl	8006978 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d60:	e056      	b.n	8003e10 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d64:	015a      	lsls	r2, r3, #5
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d6e:	461a      	mov	r2, r3
 8003d70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d74:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d86:	0151      	lsls	r1, r2, #5
 8003d88:	69fa      	ldr	r2, [r7, #28]
 8003d8a:	440a      	add	r2, r1
 8003d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d94:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d98:	015a      	lsls	r2, r3, #5
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003da6:	0151      	lsls	r1, r2, #5
 8003da8:	69fa      	ldr	r2, [r7, #28]
 8003daa:	440a      	add	r2, r1
 8003dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003db0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003db4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003dc8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dda:	0151      	lsls	r1, r2, #5
 8003ddc:	69fa      	ldr	r2, [r7, #28]
 8003dde:	440a      	add	r2, r1
 8003de0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003de4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003de8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dfa:	0151      	lsls	r1, r2, #5
 8003dfc:	69fa      	ldr	r2, [r7, #28]
 8003dfe:	440a      	add	r2, r1
 8003e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e08:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d3a3      	bcc.n	8003d62 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	69fa      	ldr	r2, [r7, #28]
 8003e24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e28:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003e2c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d016      	beq.n	8003e64 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e40:	69fa      	ldr	r2, [r7, #28]
 8003e42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e46:	f043 030b 	orr.w	r3, r3, #11
 8003e4a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e56:	69fa      	ldr	r2, [r7, #28]
 8003e58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e5c:	f043 030b 	orr.w	r3, r3, #11
 8003e60:	6453      	str	r3, [r2, #68]	; 0x44
 8003e62:	e015      	b.n	8003e90 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	69fa      	ldr	r2, [r7, #28]
 8003e6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e76:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003e7a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	69fa      	ldr	r2, [r7, #28]
 8003e86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e8a:	f043 030b 	orr.w	r3, r3, #11
 8003e8e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	69fa      	ldr	r2, [r7, #28]
 8003e9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e9e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003ea2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	f003 fd73 	bl	80079a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695a      	ldr	r2, [r3, #20]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003ec8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f003 fca1 	bl	8007816 <USB_ReadInterrupts>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ede:	d124      	bne.n	8003f2a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f003 fd37 	bl	8007958 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f002 fd9f 	bl	8006a32 <USB_GetDevSpeed>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681c      	ldr	r4, [r3, #0]
 8003f00:	f001 f92c 	bl	800515c <HAL_RCC_GetHCLKFreq>
 8003f04:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4620      	mov	r0, r4
 8003f10:	f002 fabe 	bl	8006490 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f005 fd78 	bl	8009a0a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695a      	ldr	r2, [r3, #20]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003f28:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f003 fc71 	bl	8007816 <USB_ReadInterrupts>
 8003f34:	4603      	mov	r3, r0
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d10a      	bne.n	8003f54 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f005 fd55 	bl	80099ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695a      	ldr	r2, [r3, #20]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f002 0208 	and.w	r2, r2, #8
 8003f52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f003 fc5c 	bl	8007816 <USB_ReadInterrupts>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f68:	d10f      	bne.n	8003f8a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	4619      	mov	r1, r3
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f005 fdad 	bl	8009ad4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695a      	ldr	r2, [r3, #20]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003f88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f003 fc41 	bl	8007816 <USB_ReadInterrupts>
 8003f94:	4603      	mov	r3, r0
 8003f96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f9e:	d10f      	bne.n	8003fc0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	4619      	mov	r1, r3
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f005 fd80 	bl	8009ab0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695a      	ldr	r2, [r3, #20]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003fbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f003 fc26 	bl	8007816 <USB_ReadInterrupts>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd4:	d10a      	bne.n	8003fec <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f005 fd8e 	bl	8009af8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003fea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f003 fc10 	bl	8007816 <USB_ReadInterrupts>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	d115      	bne.n	800402c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f005 fd7e 	bl	8009b14 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6859      	ldr	r1, [r3, #4]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	430a      	orrs	r2, r1
 8004026:	605a      	str	r2, [r3, #4]
 8004028:	e000      	b.n	800402c <HAL_PCD_IRQHandler+0x75e>
      return;
 800402a:	bf00      	nop
    }
  }
}
 800402c:	3734      	adds	r7, #52	; 0x34
 800402e:	46bd      	mov	sp, r7
 8004030:	bd90      	pop	{r4, r7, pc}

08004032 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b082      	sub	sp, #8
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
 800403a:	460b      	mov	r3, r1
 800403c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_PCD_SetAddress+0x1a>
 8004048:	2302      	movs	r3, #2
 800404a:	e013      	b.n	8004074 <HAL_PCD_SetAddress+0x42>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	78fa      	ldrb	r2, [r7, #3]
 8004058:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	78fa      	ldrb	r2, [r7, #3]
 8004062:	4611      	mov	r1, r2
 8004064:	4618      	mov	r0, r3
 8004066:	f003 fb6e 	bl	8007746 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	4608      	mov	r0, r1
 8004086:	4611      	mov	r1, r2
 8004088:	461a      	mov	r2, r3
 800408a:	4603      	mov	r3, r0
 800408c:	70fb      	strb	r3, [r7, #3]
 800408e:	460b      	mov	r3, r1
 8004090:	803b      	strh	r3, [r7, #0]
 8004092:	4613      	mov	r3, r2
 8004094:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800409a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	da0f      	bge.n	80040c2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040a2:	78fb      	ldrb	r3, [r7, #3]
 80040a4:	f003 020f 	and.w	r2, r3, #15
 80040a8:	4613      	mov	r3, r2
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	1a9b      	subs	r3, r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	3338      	adds	r3, #56	; 0x38
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	4413      	add	r3, r2
 80040b6:	3304      	adds	r3, #4
 80040b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	705a      	strb	r2, [r3, #1]
 80040c0:	e00f      	b.n	80040e2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040c2:	78fb      	ldrb	r3, [r7, #3]
 80040c4:	f003 020f 	and.w	r2, r3, #15
 80040c8:	4613      	mov	r3, r2
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	4413      	add	r3, r2
 80040d8:	3304      	adds	r3, #4
 80040da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	f003 030f 	and.w	r3, r3, #15
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80040ee:	883a      	ldrh	r2, [r7, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	78ba      	ldrb	r2, [r7, #2]
 80040f8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	785b      	ldrb	r3, [r3, #1]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d004      	beq.n	800410c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800410c:	78bb      	ldrb	r3, [r7, #2]
 800410e:	2b02      	cmp	r3, #2
 8004110:	d102      	bne.n	8004118 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800411e:	2b01      	cmp	r3, #1
 8004120:	d101      	bne.n	8004126 <HAL_PCD_EP_Open+0xaa>
 8004122:	2302      	movs	r3, #2
 8004124:	e00e      	b.n	8004144 <HAL_PCD_EP_Open+0xc8>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68f9      	ldr	r1, [r7, #12]
 8004134:	4618      	mov	r0, r3
 8004136:	f002 fca1 	bl	8006a7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004142:	7afb      	ldrb	r3, [r7, #11]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800415c:	2b00      	cmp	r3, #0
 800415e:	da0f      	bge.n	8004180 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004160:	78fb      	ldrb	r3, [r7, #3]
 8004162:	f003 020f 	and.w	r2, r3, #15
 8004166:	4613      	mov	r3, r2
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	1a9b      	subs	r3, r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	3338      	adds	r3, #56	; 0x38
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	4413      	add	r3, r2
 8004174:	3304      	adds	r3, #4
 8004176:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2201      	movs	r2, #1
 800417c:	705a      	strb	r2, [r3, #1]
 800417e:	e00f      	b.n	80041a0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	f003 020f 	and.w	r2, r3, #15
 8004186:	4613      	mov	r3, r2
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	1a9b      	subs	r3, r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	4413      	add	r3, r2
 8004196:	3304      	adds	r3, #4
 8004198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d101      	bne.n	80041ba <HAL_PCD_EP_Close+0x6e>
 80041b6:	2302      	movs	r3, #2
 80041b8:	e00e      	b.n	80041d8 <HAL_PCD_EP_Close+0x8c>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68f9      	ldr	r1, [r7, #12]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f002 fcdf 	bl	8006b8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	607a      	str	r2, [r7, #4]
 80041ea:	603b      	str	r3, [r7, #0]
 80041ec:	460b      	mov	r3, r1
 80041ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041f0:	7afb      	ldrb	r3, [r7, #11]
 80041f2:	f003 020f 	and.w	r2, r3, #15
 80041f6:	4613      	mov	r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	1a9b      	subs	r3, r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	4413      	add	r3, r2
 8004206:	3304      	adds	r3, #4
 8004208:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2200      	movs	r2, #0
 800421a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	2200      	movs	r2, #0
 8004220:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004222:	7afb      	ldrb	r3, [r7, #11]
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	b2da      	uxtb	r2, r3
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d102      	bne.n	800423c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800423c:	7afb      	ldrb	r3, [r7, #11]
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	2b00      	cmp	r3, #0
 8004244:	d109      	bne.n	800425a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6818      	ldr	r0, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	461a      	mov	r2, r3
 8004252:	6979      	ldr	r1, [r7, #20]
 8004254:	f002 ffba 	bl	80071cc <USB_EP0StartXfer>
 8004258:	e008      	b.n	800426c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6818      	ldr	r0, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	461a      	mov	r2, r3
 8004266:	6979      	ldr	r1, [r7, #20]
 8004268:	f002 fd6c 	bl	8006d44 <USB_EPStartXfer>
  }

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	460b      	mov	r3, r1
 8004280:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004282:	78fb      	ldrb	r3, [r7, #3]
 8004284:	f003 020f 	and.w	r2, r3, #15
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	4613      	mov	r3, r2
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	1a9b      	subs	r3, r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	440b      	add	r3, r1
 8004294:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004298:	681b      	ldr	r3, [r3, #0]
}
 800429a:	4618      	mov	r0, r3
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b086      	sub	sp, #24
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	60f8      	str	r0, [r7, #12]
 80042ae:	607a      	str	r2, [r7, #4]
 80042b0:	603b      	str	r3, [r7, #0]
 80042b2:	460b      	mov	r3, r1
 80042b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042b6:	7afb      	ldrb	r3, [r7, #11]
 80042b8:	f003 020f 	and.w	r2, r3, #15
 80042bc:	4613      	mov	r3, r2
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	1a9b      	subs	r3, r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	3338      	adds	r3, #56	; 0x38
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	4413      	add	r3, r2
 80042ca:	3304      	adds	r3, #4
 80042cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2200      	movs	r2, #0
 80042de:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2201      	movs	r2, #1
 80042e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042e6:	7afb      	ldrb	r3, [r7, #11]
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d102      	bne.n	8004300 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004300:	7afb      	ldrb	r3, [r7, #11]
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6818      	ldr	r0, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	461a      	mov	r2, r3
 8004316:	6979      	ldr	r1, [r7, #20]
 8004318:	f002 ff58 	bl	80071cc <USB_EP0StartXfer>
 800431c:	e008      	b.n	8004330 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	b2db      	uxtb	r3, r3
 8004328:	461a      	mov	r2, r3
 800432a:	6979      	ldr	r1, [r7, #20]
 800432c:	f002 fd0a 	bl	8006d44 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b084      	sub	sp, #16
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	460b      	mov	r3, r1
 8004344:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004346:	78fb      	ldrb	r3, [r7, #3]
 8004348:	f003 020f 	and.w	r2, r3, #15
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	429a      	cmp	r2, r3
 8004352:	d901      	bls.n	8004358 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e050      	b.n	80043fa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004358:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800435c:	2b00      	cmp	r3, #0
 800435e:	da0f      	bge.n	8004380 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004360:	78fb      	ldrb	r3, [r7, #3]
 8004362:	f003 020f 	and.w	r2, r3, #15
 8004366:	4613      	mov	r3, r2
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	1a9b      	subs	r3, r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	3338      	adds	r3, #56	; 0x38
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	4413      	add	r3, r2
 8004374:	3304      	adds	r3, #4
 8004376:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2201      	movs	r2, #1
 800437c:	705a      	strb	r2, [r3, #1]
 800437e:	e00d      	b.n	800439c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004380:	78fa      	ldrb	r2, [r7, #3]
 8004382:	4613      	mov	r3, r2
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	1a9b      	subs	r3, r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	4413      	add	r3, r2
 8004392:	3304      	adds	r3, #4
 8004394:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	f003 030f 	and.w	r3, r3, #15
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_PCD_EP_SetStall+0x82>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e01e      	b.n	80043fa <HAL_PCD_EP_SetStall+0xc0>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68f9      	ldr	r1, [r7, #12]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f003 f8e7 	bl	800759e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043d0:	78fb      	ldrb	r3, [r7, #3]
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10a      	bne.n	80043f0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	b2d9      	uxtb	r1, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80043ea:	461a      	mov	r2, r3
 80043ec:	f003 fad8 	bl	80079a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b084      	sub	sp, #16
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
 800440a:	460b      	mov	r3, r1
 800440c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800440e:	78fb      	ldrb	r3, [r7, #3]
 8004410:	f003 020f 	and.w	r2, r3, #15
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	429a      	cmp	r2, r3
 800441a:	d901      	bls.n	8004420 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e042      	b.n	80044a6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004420:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004424:	2b00      	cmp	r3, #0
 8004426:	da0f      	bge.n	8004448 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	f003 020f 	and.w	r2, r3, #15
 800442e:	4613      	mov	r3, r2
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	1a9b      	subs	r3, r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	3338      	adds	r3, #56	; 0x38
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	4413      	add	r3, r2
 800443c:	3304      	adds	r3, #4
 800443e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2201      	movs	r2, #1
 8004444:	705a      	strb	r2, [r3, #1]
 8004446:	e00f      	b.n	8004468 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	f003 020f 	and.w	r2, r3, #15
 800444e:	4613      	mov	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	1a9b      	subs	r3, r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	4413      	add	r3, r2
 800445e:	3304      	adds	r3, #4
 8004460:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800446e:	78fb      	ldrb	r3, [r7, #3]
 8004470:	f003 030f 	and.w	r3, r3, #15
 8004474:	b2da      	uxtb	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004480:	2b01      	cmp	r3, #1
 8004482:	d101      	bne.n	8004488 <HAL_PCD_EP_ClrStall+0x86>
 8004484:	2302      	movs	r3, #2
 8004486:	e00e      	b.n	80044a6 <HAL_PCD_EP_ClrStall+0xa4>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68f9      	ldr	r1, [r7, #12]
 8004496:	4618      	mov	r0, r3
 8004498:	f003 f8ef 	bl	800767a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b08a      	sub	sp, #40	; 0x28
 80044b2:	af02      	add	r7, sp, #8
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	4613      	mov	r3, r2
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	1a9b      	subs	r3, r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	3338      	adds	r3, #56	; 0x38
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	4413      	add	r3, r2
 80044d2:	3304      	adds	r3, #4
 80044d4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d901      	bls.n	80044e6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e06c      	b.n	80045c0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	695a      	ldr	r2, [r3, #20]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d902      	bls.n	8004502 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	3303      	adds	r3, #3
 8004506:	089b      	lsrs	r3, r3, #2
 8004508:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800450a:	e02b      	b.n	8004564 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	695a      	ldr	r2, [r3, #20]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	69fa      	ldr	r2, [r7, #28]
 800451e:	429a      	cmp	r2, r3
 8004520:	d902      	bls.n	8004528 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	3303      	adds	r3, #3
 800452c:	089b      	lsrs	r3, r3, #2
 800452e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	68d9      	ldr	r1, [r3, #12]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	b2da      	uxtb	r2, r3
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004540:	b2db      	uxtb	r3, r3
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	4603      	mov	r3, r0
 8004546:	6978      	ldr	r0, [r7, #20]
 8004548:	f002 ff93 	bl	8007472 <USB_WritePacket>

    ep->xfer_buff  += len;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	441a      	add	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	699a      	ldr	r2, [r3, #24]
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	441a      	add	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	4413      	add	r3, r2
 800456c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	b29b      	uxth	r3, r3
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	429a      	cmp	r2, r3
 8004578:	d809      	bhi.n	800458e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	699a      	ldr	r2, [r3, #24]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004582:	429a      	cmp	r2, r3
 8004584:	d203      	bcs.n	800458e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1be      	bne.n	800450c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	695a      	ldr	r2, [r3, #20]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	429a      	cmp	r2, r3
 8004598:	d811      	bhi.n	80045be <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	f003 030f 	and.w	r3, r3, #15
 80045a0:	2201      	movs	r2, #1
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	43db      	mvns	r3, r3
 80045b4:	6939      	ldr	r1, [r7, #16]
 80045b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045ba:	4013      	ands	r3, r2
 80045bc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3720      	adds	r7, #32
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	333c      	adds	r3, #60	; 0x3c
 80045e0:	3304      	adds	r3, #4
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	f040 80a0 	bne.w	8004740 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	2b00      	cmp	r3, #0
 8004608:	d015      	beq.n	8004636 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4a72      	ldr	r2, [pc, #456]	; (80047d8 <PCD_EP_OutXfrComplete_int+0x210>)
 800460e:	4293      	cmp	r3, r2
 8004610:	f240 80dd 	bls.w	80047ce <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 80d7 	beq.w	80047ce <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4413      	add	r3, r2
 8004628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462c:	461a      	mov	r2, r3
 800462e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004632:	6093      	str	r3, [r2, #8]
 8004634:	e0cb      	b.n	80047ce <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f003 0320 	and.w	r3, r3, #32
 800463c:	2b00      	cmp	r3, #0
 800463e:	d009      	beq.n	8004654 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	4413      	add	r3, r2
 8004648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464c:	461a      	mov	r2, r3
 800464e:	2320      	movs	r3, #32
 8004650:	6093      	str	r3, [r2, #8]
 8004652:	e0bc      	b.n	80047ce <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800465a:	2b00      	cmp	r3, #0
 800465c:	f040 80b7 	bne.w	80047ce <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4a5d      	ldr	r2, [pc, #372]	; (80047d8 <PCD_EP_OutXfrComplete_int+0x210>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d90f      	bls.n	8004688 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00a      	beq.n	8004688 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	4413      	add	r3, r2
 800467a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467e:	461a      	mov	r2, r3
 8004680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004684:	6093      	str	r3, [r2, #8]
 8004686:	e0a2      	b.n	80047ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	4613      	mov	r3, r2
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	1a9b      	subs	r3, r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800469a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	0159      	lsls	r1, r3, #5
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	440b      	add	r3, r1
 80046a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80046ae:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	4613      	mov	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	1a9b      	subs	r3, r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4403      	add	r3, r0
 80046be:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80046c2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	4613      	mov	r3, r2
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	1a9b      	subs	r3, r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80046d6:	6819      	ldr	r1, [r3, #0]
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	4613      	mov	r3, r2
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	1a9b      	subs	r3, r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4403      	add	r3, r0
 80046e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4419      	add	r1, r3
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	4613      	mov	r3, r2
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	1a9b      	subs	r3, r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4403      	add	r3, r0
 80046fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004700:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d114      	bne.n	8004732 <PCD_EP_OutXfrComplete_int+0x16a>
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	4613      	mov	r3, r2
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	1a9b      	subs	r3, r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d108      	bne.n	8004732 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6818      	ldr	r0, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800472a:	461a      	mov	r2, r3
 800472c:	2101      	movs	r1, #1
 800472e:	f003 f937 	bl	80079a0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	b2db      	uxtb	r3, r3
 8004736:	4619      	mov	r1, r3
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f005 f923 	bl	8009984 <HAL_PCD_DataOutStageCallback>
 800473e:	e046      	b.n	80047ce <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4a26      	ldr	r2, [pc, #152]	; (80047dc <PCD_EP_OutXfrComplete_int+0x214>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d124      	bne.n	8004792 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475e:	461a      	mov	r2, r3
 8004760:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004764:	6093      	str	r3, [r2, #8]
 8004766:	e032      	b.n	80047ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f003 0320 	and.w	r3, r3, #32
 800476e:	2b00      	cmp	r3, #0
 8004770:	d008      	beq.n	8004784 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477e:	461a      	mov	r2, r3
 8004780:	2320      	movs	r3, #32
 8004782:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	b2db      	uxtb	r3, r3
 8004788:	4619      	mov	r1, r3
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f005 f8fa 	bl	8009984 <HAL_PCD_DataOutStageCallback>
 8004790:	e01d      	b.n	80047ce <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d114      	bne.n	80047c2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	4613      	mov	r3, r2
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	1a9b      	subs	r3, r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d108      	bne.n	80047c2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6818      	ldr	r0, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80047ba:	461a      	mov	r2, r3
 80047bc:	2100      	movs	r1, #0
 80047be:	f003 f8ef 	bl	80079a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	4619      	mov	r1, r3
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f005 f8db 	bl	8009984 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	4f54300a 	.word	0x4f54300a
 80047dc:	4f54310a 	.word	0x4f54310a

080047e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	333c      	adds	r3, #60	; 0x3c
 80047f8:	3304      	adds	r3, #4
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4a15      	ldr	r2, [pc, #84]	; (8004868 <PCD_EP_OutSetupPacket_int+0x88>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d90e      	bls.n	8004834 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800481c:	2b00      	cmp	r3, #0
 800481e:	d009      	beq.n	8004834 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482c:	461a      	mov	r2, r3
 800482e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004832:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f005 f893 	bl	8009960 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4a0a      	ldr	r2, [pc, #40]	; (8004868 <PCD_EP_OutSetupPacket_int+0x88>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d90c      	bls.n	800485c <PCD_EP_OutSetupPacket_int+0x7c>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d108      	bne.n	800485c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004854:	461a      	mov	r2, r3
 8004856:	2101      	movs	r1, #1
 8004858:	f003 f8a2 	bl	80079a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	4f54300a 	.word	0x4f54300a

0800486c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	70fb      	strb	r3, [r7, #3]
 8004878:	4613      	mov	r3, r2
 800487a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d107      	bne.n	800489a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800488a:	883b      	ldrh	r3, [r7, #0]
 800488c:	0419      	lsls	r1, r3, #16
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	430a      	orrs	r2, r1
 8004896:	629a      	str	r2, [r3, #40]	; 0x28
 8004898:	e028      	b.n	80048ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a0:	0c1b      	lsrs	r3, r3, #16
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	4413      	add	r3, r2
 80048a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048a8:	2300      	movs	r3, #0
 80048aa:	73fb      	strb	r3, [r7, #15]
 80048ac:	e00d      	b.n	80048ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
 80048b4:	3340      	adds	r3, #64	; 0x40
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	0c1b      	lsrs	r3, r3, #16
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	4413      	add	r3, r2
 80048c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	3301      	adds	r3, #1
 80048c8:	73fb      	strb	r3, [r7, #15]
 80048ca:	7bfa      	ldrb	r2, [r7, #15]
 80048cc:	78fb      	ldrb	r3, [r7, #3]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d3ec      	bcc.n	80048ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80048d4:	883b      	ldrh	r3, [r7, #0]
 80048d6:	0418      	lsls	r0, r3, #16
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6819      	ldr	r1, [r3, #0]
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	3b01      	subs	r3, #1
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	4302      	orrs	r2, r0
 80048e4:	3340      	adds	r3, #64	; 0x40
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	440b      	add	r3, r1
 80048ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
 8004902:	460b      	mov	r3, r1
 8004904:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	887a      	ldrh	r2, [r7, #2]
 800490c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	460b      	mov	r3, r1
 8004926:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e264      	b.n	8004e10 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d075      	beq.n	8004a3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004952:	4ba3      	ldr	r3, [pc, #652]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 030c 	and.w	r3, r3, #12
 800495a:	2b04      	cmp	r3, #4
 800495c:	d00c      	beq.n	8004978 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800495e:	4ba0      	ldr	r3, [pc, #640]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004966:	2b08      	cmp	r3, #8
 8004968:	d112      	bne.n	8004990 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800496a:	4b9d      	ldr	r3, [pc, #628]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004976:	d10b      	bne.n	8004990 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004978:	4b99      	ldr	r3, [pc, #612]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d05b      	beq.n	8004a3c <HAL_RCC_OscConfig+0x108>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d157      	bne.n	8004a3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e23f      	b.n	8004e10 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004998:	d106      	bne.n	80049a8 <HAL_RCC_OscConfig+0x74>
 800499a:	4b91      	ldr	r3, [pc, #580]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a90      	ldr	r2, [pc, #576]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 80049a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a4:	6013      	str	r3, [r2, #0]
 80049a6:	e01d      	b.n	80049e4 <HAL_RCC_OscConfig+0xb0>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049b0:	d10c      	bne.n	80049cc <HAL_RCC_OscConfig+0x98>
 80049b2:	4b8b      	ldr	r3, [pc, #556]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a8a      	ldr	r2, [pc, #552]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 80049b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	4b88      	ldr	r3, [pc, #544]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a87      	ldr	r2, [pc, #540]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 80049c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	e00b      	b.n	80049e4 <HAL_RCC_OscConfig+0xb0>
 80049cc:	4b84      	ldr	r3, [pc, #528]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a83      	ldr	r2, [pc, #524]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 80049d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	4b81      	ldr	r3, [pc, #516]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a80      	ldr	r2, [pc, #512]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 80049de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d013      	beq.n	8004a14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ec:	f7fd fb6c 	bl	80020c8 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049f4:	f7fd fb68 	bl	80020c8 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b64      	cmp	r3, #100	; 0x64
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e204      	b.n	8004e10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a06:	4b76      	ldr	r3, [pc, #472]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0f0      	beq.n	80049f4 <HAL_RCC_OscConfig+0xc0>
 8004a12:	e014      	b.n	8004a3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a14:	f7fd fb58 	bl	80020c8 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a1c:	f7fd fb54 	bl	80020c8 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b64      	cmp	r3, #100	; 0x64
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e1f0      	b.n	8004e10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a2e:	4b6c      	ldr	r3, [pc, #432]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f0      	bne.n	8004a1c <HAL_RCC_OscConfig+0xe8>
 8004a3a:	e000      	b.n	8004a3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d063      	beq.n	8004b12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a4a:	4b65      	ldr	r3, [pc, #404]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 030c 	and.w	r3, r3, #12
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00b      	beq.n	8004a6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a56:	4b62      	ldr	r3, [pc, #392]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a5e:	2b08      	cmp	r3, #8
 8004a60:	d11c      	bne.n	8004a9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a62:	4b5f      	ldr	r3, [pc, #380]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d116      	bne.n	8004a9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a6e:	4b5c      	ldr	r3, [pc, #368]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d005      	beq.n	8004a86 <HAL_RCC_OscConfig+0x152>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d001      	beq.n	8004a86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e1c4      	b.n	8004e10 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a86:	4b56      	ldr	r3, [pc, #344]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	4952      	ldr	r1, [pc, #328]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a9a:	e03a      	b.n	8004b12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d020      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aa4:	4b4f      	ldr	r3, [pc, #316]	; (8004be4 <HAL_RCC_OscConfig+0x2b0>)
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aaa:	f7fd fb0d 	bl	80020c8 <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ab2:	f7fd fb09 	bl	80020c8 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e1a5      	b.n	8004e10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac4:	4b46      	ldr	r3, [pc, #280]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0f0      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad0:	4b43      	ldr	r3, [pc, #268]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	00db      	lsls	r3, r3, #3
 8004ade:	4940      	ldr	r1, [pc, #256]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	600b      	str	r3, [r1, #0]
 8004ae4:	e015      	b.n	8004b12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ae6:	4b3f      	ldr	r3, [pc, #252]	; (8004be4 <HAL_RCC_OscConfig+0x2b0>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aec:	f7fd faec 	bl	80020c8 <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004af4:	f7fd fae8 	bl	80020c8 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e184      	b.n	8004e10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b06:	4b36      	ldr	r3, [pc, #216]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1f0      	bne.n	8004af4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d030      	beq.n	8004b80 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d016      	beq.n	8004b54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b26:	4b30      	ldr	r3, [pc, #192]	; (8004be8 <HAL_RCC_OscConfig+0x2b4>)
 8004b28:	2201      	movs	r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b2c:	f7fd facc 	bl	80020c8 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b34:	f7fd fac8 	bl	80020c8 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e164      	b.n	8004e10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b46:	4b26      	ldr	r3, [pc, #152]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 8004b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0f0      	beq.n	8004b34 <HAL_RCC_OscConfig+0x200>
 8004b52:	e015      	b.n	8004b80 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b54:	4b24      	ldr	r3, [pc, #144]	; (8004be8 <HAL_RCC_OscConfig+0x2b4>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b5a:	f7fd fab5 	bl	80020c8 <HAL_GetTick>
 8004b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b60:	e008      	b.n	8004b74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b62:	f7fd fab1 	bl	80020c8 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e14d      	b.n	8004e10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b74:	4b1a      	ldr	r3, [pc, #104]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 8004b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1f0      	bne.n	8004b62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0304 	and.w	r3, r3, #4
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 80a0 	beq.w	8004cce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b92:	4b13      	ldr	r3, [pc, #76]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10f      	bne.n	8004bbe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60bb      	str	r3, [r7, #8]
 8004ba2:	4b0f      	ldr	r3, [pc, #60]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	4a0e      	ldr	r2, [pc, #56]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 8004ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bac:	6413      	str	r3, [r2, #64]	; 0x40
 8004bae:	4b0c      	ldr	r3, [pc, #48]	; (8004be0 <HAL_RCC_OscConfig+0x2ac>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb6:	60bb      	str	r3, [r7, #8]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bbe:	4b0b      	ldr	r3, [pc, #44]	; (8004bec <HAL_RCC_OscConfig+0x2b8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d121      	bne.n	8004c0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bca:	4b08      	ldr	r3, [pc, #32]	; (8004bec <HAL_RCC_OscConfig+0x2b8>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a07      	ldr	r2, [pc, #28]	; (8004bec <HAL_RCC_OscConfig+0x2b8>)
 8004bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bd6:	f7fd fa77 	bl	80020c8 <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bdc:	e011      	b.n	8004c02 <HAL_RCC_OscConfig+0x2ce>
 8004bde:	bf00      	nop
 8004be0:	40023800 	.word	0x40023800
 8004be4:	42470000 	.word	0x42470000
 8004be8:	42470e80 	.word	0x42470e80
 8004bec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf0:	f7fd fa6a 	bl	80020c8 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e106      	b.n	8004e10 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c02:	4b85      	ldr	r3, [pc, #532]	; (8004e18 <HAL_RCC_OscConfig+0x4e4>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0f0      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d106      	bne.n	8004c24 <HAL_RCC_OscConfig+0x2f0>
 8004c16:	4b81      	ldr	r3, [pc, #516]	; (8004e1c <HAL_RCC_OscConfig+0x4e8>)
 8004c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1a:	4a80      	ldr	r2, [pc, #512]	; (8004e1c <HAL_RCC_OscConfig+0x4e8>)
 8004c1c:	f043 0301 	orr.w	r3, r3, #1
 8004c20:	6713      	str	r3, [r2, #112]	; 0x70
 8004c22:	e01c      	b.n	8004c5e <HAL_RCC_OscConfig+0x32a>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	2b05      	cmp	r3, #5
 8004c2a:	d10c      	bne.n	8004c46 <HAL_RCC_OscConfig+0x312>
 8004c2c:	4b7b      	ldr	r3, [pc, #492]	; (8004e1c <HAL_RCC_OscConfig+0x4e8>)
 8004c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c30:	4a7a      	ldr	r2, [pc, #488]	; (8004e1c <HAL_RCC_OscConfig+0x4e8>)
 8004c32:	f043 0304 	orr.w	r3, r3, #4
 8004c36:	6713      	str	r3, [r2, #112]	; 0x70
 8004c38:	4b78      	ldr	r3, [pc, #480]	; (8004e1c <HAL_RCC_OscConfig+0x4e8>)
 8004c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3c:	4a77      	ldr	r2, [pc, #476]	; (8004e1c <HAL_RCC_OscConfig+0x4e8>)
 8004c3e:	f043 0301 	orr.w	r3, r3, #1
 8004c42:	6713      	str	r3, [r2, #112]	; 0x70
 8004c44:	e00b      	b.n	8004c5e <HAL_RCC_OscConfig+0x32a>
 8004c46:	4b75      	ldr	r3, [pc, #468]	; (8004e1c <HAL_RCC_OscConfig+0x4e8>)
 8004c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4a:	4a74      	ldr	r2, [pc, #464]	; (8004e1c <HAL_RCC_OscConfig+0x4e8>)
 8004c4c:	f023 0301 	bic.w	r3, r3, #1
 8004c50:	6713      	str	r3, [r2, #112]	; 0x70
 8004c52:	4b72      	ldr	r3, [pc, #456]	; (8004e1c <HAL_RCC_OscConfig+0x4e8>)
 8004c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c56:	4a71      	ldr	r2, [pc, #452]	; (8004e1c <HAL_RCC_OscConfig+0x4e8>)
 8004c58:	f023 0304 	bic.w	r3, r3, #4
 8004c5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d015      	beq.n	8004c92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c66:	f7fd fa2f 	bl	80020c8 <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c6c:	e00a      	b.n	8004c84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c6e:	f7fd fa2b 	bl	80020c8 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e0c5      	b.n	8004e10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c84:	4b65      	ldr	r3, [pc, #404]	; (8004e1c <HAL_RCC_OscConfig+0x4e8>)
 8004c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0ee      	beq.n	8004c6e <HAL_RCC_OscConfig+0x33a>
 8004c90:	e014      	b.n	8004cbc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c92:	f7fd fa19 	bl	80020c8 <HAL_GetTick>
 8004c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c98:	e00a      	b.n	8004cb0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c9a:	f7fd fa15 	bl	80020c8 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e0af      	b.n	8004e10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cb0:	4b5a      	ldr	r3, [pc, #360]	; (8004e1c <HAL_RCC_OscConfig+0x4e8>)
 8004cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1ee      	bne.n	8004c9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cbc:	7dfb      	ldrb	r3, [r7, #23]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d105      	bne.n	8004cce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cc2:	4b56      	ldr	r3, [pc, #344]	; (8004e1c <HAL_RCC_OscConfig+0x4e8>)
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	4a55      	ldr	r2, [pc, #340]	; (8004e1c <HAL_RCC_OscConfig+0x4e8>)
 8004cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ccc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 809b 	beq.w	8004e0e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cd8:	4b50      	ldr	r3, [pc, #320]	; (8004e1c <HAL_RCC_OscConfig+0x4e8>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f003 030c 	and.w	r3, r3, #12
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d05c      	beq.n	8004d9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d141      	bne.n	8004d70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cec:	4b4c      	ldr	r3, [pc, #304]	; (8004e20 <HAL_RCC_OscConfig+0x4ec>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf2:	f7fd f9e9 	bl	80020c8 <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf8:	e008      	b.n	8004d0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cfa:	f7fd f9e5 	bl	80020c8 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e081      	b.n	8004e10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d0c:	4b43      	ldr	r3, [pc, #268]	; (8004e1c <HAL_RCC_OscConfig+0x4e8>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1f0      	bne.n	8004cfa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	69da      	ldr	r2, [r3, #28]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	431a      	orrs	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	019b      	lsls	r3, r3, #6
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2e:	085b      	lsrs	r3, r3, #1
 8004d30:	3b01      	subs	r3, #1
 8004d32:	041b      	lsls	r3, r3, #16
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3a:	061b      	lsls	r3, r3, #24
 8004d3c:	4937      	ldr	r1, [pc, #220]	; (8004e1c <HAL_RCC_OscConfig+0x4e8>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d42:	4b37      	ldr	r3, [pc, #220]	; (8004e20 <HAL_RCC_OscConfig+0x4ec>)
 8004d44:	2201      	movs	r2, #1
 8004d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d48:	f7fd f9be 	bl	80020c8 <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d50:	f7fd f9ba 	bl	80020c8 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e056      	b.n	8004e10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d62:	4b2e      	ldr	r3, [pc, #184]	; (8004e1c <HAL_RCC_OscConfig+0x4e8>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0f0      	beq.n	8004d50 <HAL_RCC_OscConfig+0x41c>
 8004d6e:	e04e      	b.n	8004e0e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d70:	4b2b      	ldr	r3, [pc, #172]	; (8004e20 <HAL_RCC_OscConfig+0x4ec>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d76:	f7fd f9a7 	bl	80020c8 <HAL_GetTick>
 8004d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d7c:	e008      	b.n	8004d90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d7e:	f7fd f9a3 	bl	80020c8 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e03f      	b.n	8004e10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d90:	4b22      	ldr	r3, [pc, #136]	; (8004e1c <HAL_RCC_OscConfig+0x4e8>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1f0      	bne.n	8004d7e <HAL_RCC_OscConfig+0x44a>
 8004d9c:	e037      	b.n	8004e0e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d101      	bne.n	8004daa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e032      	b.n	8004e10 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004daa:	4b1c      	ldr	r3, [pc, #112]	; (8004e1c <HAL_RCC_OscConfig+0x4e8>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d028      	beq.n	8004e0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d121      	bne.n	8004e0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d11a      	bne.n	8004e0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dda:	4013      	ands	r3, r2
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004de0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d111      	bne.n	8004e0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df0:	085b      	lsrs	r3, r3, #1
 8004df2:	3b01      	subs	r3, #1
 8004df4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d107      	bne.n	8004e0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d001      	beq.n	8004e0e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e000      	b.n	8004e10 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3718      	adds	r7, #24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	40007000 	.word	0x40007000
 8004e1c:	40023800 	.word	0x40023800
 8004e20:	42470060 	.word	0x42470060

08004e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e0cc      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e38:	4b68      	ldr	r3, [pc, #416]	; (8004fdc <HAL_RCC_ClockConfig+0x1b8>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d90c      	bls.n	8004e60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e46:	4b65      	ldr	r3, [pc, #404]	; (8004fdc <HAL_RCC_ClockConfig+0x1b8>)
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	b2d2      	uxtb	r2, r2
 8004e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e4e:	4b63      	ldr	r3, [pc, #396]	; (8004fdc <HAL_RCC_ClockConfig+0x1b8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d001      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e0b8      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d020      	beq.n	8004eae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d005      	beq.n	8004e84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e78:	4b59      	ldr	r3, [pc, #356]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	4a58      	ldr	r2, [pc, #352]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e90:	4b53      	ldr	r3, [pc, #332]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	4a52      	ldr	r2, [pc, #328]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e9c:	4b50      	ldr	r3, [pc, #320]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	494d      	ldr	r1, [pc, #308]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d044      	beq.n	8004f44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d107      	bne.n	8004ed2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec2:	4b47      	ldr	r3, [pc, #284]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d119      	bne.n	8004f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e07f      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d003      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	d107      	bne.n	8004ef2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ee2:	4b3f      	ldr	r3, [pc, #252]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d109      	bne.n	8004f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e06f      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ef2:	4b3b      	ldr	r3, [pc, #236]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e067      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f02:	4b37      	ldr	r3, [pc, #220]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f023 0203 	bic.w	r2, r3, #3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	4934      	ldr	r1, [pc, #208]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f14:	f7fd f8d8 	bl	80020c8 <HAL_GetTick>
 8004f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f1a:	e00a      	b.n	8004f32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f1c:	f7fd f8d4 	bl	80020c8 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e04f      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f32:	4b2b      	ldr	r3, [pc, #172]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 020c 	and.w	r2, r3, #12
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d1eb      	bne.n	8004f1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f44:	4b25      	ldr	r3, [pc, #148]	; (8004fdc <HAL_RCC_ClockConfig+0x1b8>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d20c      	bcs.n	8004f6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f52:	4b22      	ldr	r3, [pc, #136]	; (8004fdc <HAL_RCC_ClockConfig+0x1b8>)
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5a:	4b20      	ldr	r3, [pc, #128]	; (8004fdc <HAL_RCC_ClockConfig+0x1b8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d001      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e032      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d008      	beq.n	8004f8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f78:	4b19      	ldr	r3, [pc, #100]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	4916      	ldr	r1, [pc, #88]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d009      	beq.n	8004faa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f96:	4b12      	ldr	r3, [pc, #72]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	490e      	ldr	r1, [pc, #56]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004faa:	f000 f821 	bl	8004ff0 <HAL_RCC_GetSysClockFreq>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	091b      	lsrs	r3, r3, #4
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	490a      	ldr	r1, [pc, #40]	; (8004fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8004fbc:	5ccb      	ldrb	r3, [r1, r3]
 8004fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc2:	4a09      	ldr	r2, [pc, #36]	; (8004fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fc6:	4b09      	ldr	r3, [pc, #36]	; (8004fec <HAL_RCC_ClockConfig+0x1c8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fd f838 	bl	8002040 <HAL_InitTick>

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40023c00 	.word	0x40023c00
 8004fe0:	40023800 	.word	0x40023800
 8004fe4:	0800c62c 	.word	0x0800c62c
 8004fe8:	20000008 	.word	0x20000008
 8004fec:	2000000c 	.word	0x2000000c

08004ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ff0:	b5b0      	push	{r4, r5, r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	6079      	str	r1, [r7, #4]
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	60f9      	str	r1, [r7, #12]
 8004ffe:	2100      	movs	r1, #0
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005002:	2100      	movs	r1, #0
 8005004:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005006:	4952      	ldr	r1, [pc, #328]	; (8005150 <HAL_RCC_GetSysClockFreq+0x160>)
 8005008:	6889      	ldr	r1, [r1, #8]
 800500a:	f001 010c 	and.w	r1, r1, #12
 800500e:	2908      	cmp	r1, #8
 8005010:	d00d      	beq.n	800502e <HAL_RCC_GetSysClockFreq+0x3e>
 8005012:	2908      	cmp	r1, #8
 8005014:	f200 8094 	bhi.w	8005140 <HAL_RCC_GetSysClockFreq+0x150>
 8005018:	2900      	cmp	r1, #0
 800501a:	d002      	beq.n	8005022 <HAL_RCC_GetSysClockFreq+0x32>
 800501c:	2904      	cmp	r1, #4
 800501e:	d003      	beq.n	8005028 <HAL_RCC_GetSysClockFreq+0x38>
 8005020:	e08e      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005022:	4b4c      	ldr	r3, [pc, #304]	; (8005154 <HAL_RCC_GetSysClockFreq+0x164>)
 8005024:	60bb      	str	r3, [r7, #8]
       break;
 8005026:	e08e      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005028:	4b4b      	ldr	r3, [pc, #300]	; (8005158 <HAL_RCC_GetSysClockFreq+0x168>)
 800502a:	60bb      	str	r3, [r7, #8]
      break;
 800502c:	e08b      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800502e:	4948      	ldr	r1, [pc, #288]	; (8005150 <HAL_RCC_GetSysClockFreq+0x160>)
 8005030:	6849      	ldr	r1, [r1, #4]
 8005032:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005036:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005038:	4945      	ldr	r1, [pc, #276]	; (8005150 <HAL_RCC_GetSysClockFreq+0x160>)
 800503a:	6849      	ldr	r1, [r1, #4]
 800503c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005040:	2900      	cmp	r1, #0
 8005042:	d024      	beq.n	800508e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005044:	4942      	ldr	r1, [pc, #264]	; (8005150 <HAL_RCC_GetSysClockFreq+0x160>)
 8005046:	6849      	ldr	r1, [r1, #4]
 8005048:	0989      	lsrs	r1, r1, #6
 800504a:	4608      	mov	r0, r1
 800504c:	f04f 0100 	mov.w	r1, #0
 8005050:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005054:	f04f 0500 	mov.w	r5, #0
 8005058:	ea00 0204 	and.w	r2, r0, r4
 800505c:	ea01 0305 	and.w	r3, r1, r5
 8005060:	493d      	ldr	r1, [pc, #244]	; (8005158 <HAL_RCC_GetSysClockFreq+0x168>)
 8005062:	fb01 f003 	mul.w	r0, r1, r3
 8005066:	2100      	movs	r1, #0
 8005068:	fb01 f102 	mul.w	r1, r1, r2
 800506c:	1844      	adds	r4, r0, r1
 800506e:	493a      	ldr	r1, [pc, #232]	; (8005158 <HAL_RCC_GetSysClockFreq+0x168>)
 8005070:	fba2 0101 	umull	r0, r1, r2, r1
 8005074:	1863      	adds	r3, r4, r1
 8005076:	4619      	mov	r1, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	461a      	mov	r2, r3
 800507c:	f04f 0300 	mov.w	r3, #0
 8005080:	f7fb fdec 	bl	8000c5c <__aeabi_uldivmod>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4613      	mov	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	e04a      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800508e:	4b30      	ldr	r3, [pc, #192]	; (8005150 <HAL_RCC_GetSysClockFreq+0x160>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	099b      	lsrs	r3, r3, #6
 8005094:	461a      	mov	r2, r3
 8005096:	f04f 0300 	mov.w	r3, #0
 800509a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800509e:	f04f 0100 	mov.w	r1, #0
 80050a2:	ea02 0400 	and.w	r4, r2, r0
 80050a6:	ea03 0501 	and.w	r5, r3, r1
 80050aa:	4620      	mov	r0, r4
 80050ac:	4629      	mov	r1, r5
 80050ae:	f04f 0200 	mov.w	r2, #0
 80050b2:	f04f 0300 	mov.w	r3, #0
 80050b6:	014b      	lsls	r3, r1, #5
 80050b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80050bc:	0142      	lsls	r2, r0, #5
 80050be:	4610      	mov	r0, r2
 80050c0:	4619      	mov	r1, r3
 80050c2:	1b00      	subs	r0, r0, r4
 80050c4:	eb61 0105 	sbc.w	r1, r1, r5
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	018b      	lsls	r3, r1, #6
 80050d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80050d6:	0182      	lsls	r2, r0, #6
 80050d8:	1a12      	subs	r2, r2, r0
 80050da:	eb63 0301 	sbc.w	r3, r3, r1
 80050de:	f04f 0000 	mov.w	r0, #0
 80050e2:	f04f 0100 	mov.w	r1, #0
 80050e6:	00d9      	lsls	r1, r3, #3
 80050e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050ec:	00d0      	lsls	r0, r2, #3
 80050ee:	4602      	mov	r2, r0
 80050f0:	460b      	mov	r3, r1
 80050f2:	1912      	adds	r2, r2, r4
 80050f4:	eb45 0303 	adc.w	r3, r5, r3
 80050f8:	f04f 0000 	mov.w	r0, #0
 80050fc:	f04f 0100 	mov.w	r1, #0
 8005100:	0299      	lsls	r1, r3, #10
 8005102:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005106:	0290      	lsls	r0, r2, #10
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4610      	mov	r0, r2
 800510e:	4619      	mov	r1, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	461a      	mov	r2, r3
 8005114:	f04f 0300 	mov.w	r3, #0
 8005118:	f7fb fda0 	bl	8000c5c <__aeabi_uldivmod>
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	4613      	mov	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005124:	4b0a      	ldr	r3, [pc, #40]	; (8005150 <HAL_RCC_GetSysClockFreq+0x160>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	0c1b      	lsrs	r3, r3, #16
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	3301      	adds	r3, #1
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	fbb2 f3f3 	udiv	r3, r2, r3
 800513c:	60bb      	str	r3, [r7, #8]
      break;
 800513e:	e002      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005140:	4b04      	ldr	r3, [pc, #16]	; (8005154 <HAL_RCC_GetSysClockFreq+0x164>)
 8005142:	60bb      	str	r3, [r7, #8]
      break;
 8005144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005146:	68bb      	ldr	r3, [r7, #8]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bdb0      	pop	{r4, r5, r7, pc}
 8005150:	40023800 	.word	0x40023800
 8005154:	00f42400 	.word	0x00f42400
 8005158:	017d7840 	.word	0x017d7840

0800515c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005160:	4b03      	ldr	r3, [pc, #12]	; (8005170 <HAL_RCC_GetHCLKFreq+0x14>)
 8005162:	681b      	ldr	r3, [r3, #0]
}
 8005164:	4618      	mov	r0, r3
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	20000008 	.word	0x20000008

08005174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005178:	f7ff fff0 	bl	800515c <HAL_RCC_GetHCLKFreq>
 800517c:	4602      	mov	r2, r0
 800517e:	4b05      	ldr	r3, [pc, #20]	; (8005194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	0a9b      	lsrs	r3, r3, #10
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	4903      	ldr	r1, [pc, #12]	; (8005198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800518a:	5ccb      	ldrb	r3, [r1, r3]
 800518c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005190:	4618      	mov	r0, r3
 8005192:	bd80      	pop	{r7, pc}
 8005194:	40023800 	.word	0x40023800
 8005198:	0800c63c 	.word	0x0800c63c

0800519c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e041      	b.n	8005232 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d106      	bne.n	80051c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7fc fddc 	bl	8001d80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3304      	adds	r3, #4
 80051d8:	4619      	mov	r1, r3
 80051da:	4610      	mov	r0, r2
 80051dc:	f000 fd6a 	bl	8005cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b082      	sub	sp, #8
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e041      	b.n	80052d0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	d106      	bne.n	8005266 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f839 	bl	80052d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2202      	movs	r2, #2
 800526a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	3304      	adds	r3, #4
 8005276:	4619      	mov	r1, r3
 8005278:	4610      	mov	r0, r2
 800527a:	f000 fd1b 	bl	8005cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d109      	bne.n	8005318 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	bf0c      	ite	eq
 8005310:	2301      	moveq	r3, #1
 8005312:	2300      	movne	r3, #0
 8005314:	b2db      	uxtb	r3, r3
 8005316:	e022      	b.n	800535e <HAL_TIM_PWM_Start_DMA+0x72>
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2b04      	cmp	r3, #4
 800531c:	d109      	bne.n	8005332 <HAL_TIM_PWM_Start_DMA+0x46>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	bf0c      	ite	eq
 800532a:	2301      	moveq	r3, #1
 800532c:	2300      	movne	r3, #0
 800532e:	b2db      	uxtb	r3, r3
 8005330:	e015      	b.n	800535e <HAL_TIM_PWM_Start_DMA+0x72>
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2b08      	cmp	r3, #8
 8005336:	d109      	bne.n	800534c <HAL_TIM_PWM_Start_DMA+0x60>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	bf0c      	ite	eq
 8005344:	2301      	moveq	r3, #1
 8005346:	2300      	movne	r3, #0
 8005348:	b2db      	uxtb	r3, r3
 800534a:	e008      	b.n	800535e <HAL_TIM_PWM_Start_DMA+0x72>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	bf0c      	ite	eq
 8005358:	2301      	moveq	r3, #1
 800535a:	2300      	movne	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005362:	2302      	movs	r3, #2
 8005364:	e15d      	b.n	8005622 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d109      	bne.n	8005380 <HAL_TIM_PWM_Start_DMA+0x94>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b01      	cmp	r3, #1
 8005376:	bf0c      	ite	eq
 8005378:	2301      	moveq	r3, #1
 800537a:	2300      	movne	r3, #0
 800537c:	b2db      	uxtb	r3, r3
 800537e:	e022      	b.n	80053c6 <HAL_TIM_PWM_Start_DMA+0xda>
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b04      	cmp	r3, #4
 8005384:	d109      	bne.n	800539a <HAL_TIM_PWM_Start_DMA+0xae>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b01      	cmp	r3, #1
 8005390:	bf0c      	ite	eq
 8005392:	2301      	moveq	r3, #1
 8005394:	2300      	movne	r3, #0
 8005396:	b2db      	uxtb	r3, r3
 8005398:	e015      	b.n	80053c6 <HAL_TIM_PWM_Start_DMA+0xda>
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2b08      	cmp	r3, #8
 800539e:	d109      	bne.n	80053b4 <HAL_TIM_PWM_Start_DMA+0xc8>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	bf0c      	ite	eq
 80053ac:	2301      	moveq	r3, #1
 80053ae:	2300      	movne	r3, #0
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	e008      	b.n	80053c6 <HAL_TIM_PWM_Start_DMA+0xda>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b01      	cmp	r3, #1
 80053be:	bf0c      	ite	eq
 80053c0:	2301      	moveq	r3, #1
 80053c2:	2300      	movne	r3, #0
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d024      	beq.n	8005414 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d104      	bne.n	80053da <HAL_TIM_PWM_Start_DMA+0xee>
 80053d0:	887b      	ldrh	r3, [r7, #2]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e123      	b.n	8005622 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d104      	bne.n	80053ea <HAL_TIM_PWM_Start_DMA+0xfe>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053e8:	e016      	b.n	8005418 <HAL_TIM_PWM_Start_DMA+0x12c>
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2b04      	cmp	r3, #4
 80053ee:	d104      	bne.n	80053fa <HAL_TIM_PWM_Start_DMA+0x10e>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2202      	movs	r2, #2
 80053f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053f8:	e00e      	b.n	8005418 <HAL_TIM_PWM_Start_DMA+0x12c>
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d104      	bne.n	800540a <HAL_TIM_PWM_Start_DMA+0x11e>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005408:	e006      	b.n	8005418 <HAL_TIM_PWM_Start_DMA+0x12c>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2202      	movs	r2, #2
 800540e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005412:	e001      	b.n	8005418 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e104      	b.n	8005622 <HAL_TIM_PWM_Start_DMA+0x336>
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2b0c      	cmp	r3, #12
 800541c:	f200 80ae 	bhi.w	800557c <HAL_TIM_PWM_Start_DMA+0x290>
 8005420:	a201      	add	r2, pc, #4	; (adr r2, 8005428 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005426:	bf00      	nop
 8005428:	0800545d 	.word	0x0800545d
 800542c:	0800557d 	.word	0x0800557d
 8005430:	0800557d 	.word	0x0800557d
 8005434:	0800557d 	.word	0x0800557d
 8005438:	080054a5 	.word	0x080054a5
 800543c:	0800557d 	.word	0x0800557d
 8005440:	0800557d 	.word	0x0800557d
 8005444:	0800557d 	.word	0x0800557d
 8005448:	080054ed 	.word	0x080054ed
 800544c:	0800557d 	.word	0x0800557d
 8005450:	0800557d 	.word	0x0800557d
 8005454:	0800557d 	.word	0x0800557d
 8005458:	08005535 	.word	0x08005535
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	4a72      	ldr	r2, [pc, #456]	; (800562c <HAL_TIM_PWM_Start_DMA+0x340>)
 8005462:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	4a71      	ldr	r2, [pc, #452]	; (8005630 <HAL_TIM_PWM_Start_DMA+0x344>)
 800546a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	4a70      	ldr	r2, [pc, #448]	; (8005634 <HAL_TIM_PWM_Start_DMA+0x348>)
 8005472:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005478:	6879      	ldr	r1, [r7, #4]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3334      	adds	r3, #52	; 0x34
 8005480:	461a      	mov	r2, r3
 8005482:	887b      	ldrh	r3, [r7, #2]
 8005484:	f7fd f810 	bl	80024a8 <HAL_DMA_Start_IT>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e0c7      	b.n	8005622 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68da      	ldr	r2, [r3, #12]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054a0:	60da      	str	r2, [r3, #12]
      break;
 80054a2:	e06e      	b.n	8005582 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a8:	4a60      	ldr	r2, [pc, #384]	; (800562c <HAL_TIM_PWM_Start_DMA+0x340>)
 80054aa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b0:	4a5f      	ldr	r2, [pc, #380]	; (8005630 <HAL_TIM_PWM_Start_DMA+0x344>)
 80054b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b8:	4a5e      	ldr	r2, [pc, #376]	; (8005634 <HAL_TIM_PWM_Start_DMA+0x348>)
 80054ba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	3338      	adds	r3, #56	; 0x38
 80054c8:	461a      	mov	r2, r3
 80054ca:	887b      	ldrh	r3, [r7, #2]
 80054cc:	f7fc ffec 	bl	80024a8 <HAL_DMA_Start_IT>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e0a3      	b.n	8005622 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68da      	ldr	r2, [r3, #12]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054e8:	60da      	str	r2, [r3, #12]
      break;
 80054ea:	e04a      	b.n	8005582 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f0:	4a4e      	ldr	r2, [pc, #312]	; (800562c <HAL_TIM_PWM_Start_DMA+0x340>)
 80054f2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f8:	4a4d      	ldr	r2, [pc, #308]	; (8005630 <HAL_TIM_PWM_Start_DMA+0x344>)
 80054fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005500:	4a4c      	ldr	r2, [pc, #304]	; (8005634 <HAL_TIM_PWM_Start_DMA+0x348>)
 8005502:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	333c      	adds	r3, #60	; 0x3c
 8005510:	461a      	mov	r2, r3
 8005512:	887b      	ldrh	r3, [r7, #2]
 8005514:	f7fc ffc8 	bl	80024a8 <HAL_DMA_Start_IT>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e07f      	b.n	8005622 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68da      	ldr	r2, [r3, #12]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005530:	60da      	str	r2, [r3, #12]
      break;
 8005532:	e026      	b.n	8005582 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005538:	4a3c      	ldr	r2, [pc, #240]	; (800562c <HAL_TIM_PWM_Start_DMA+0x340>)
 800553a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005540:	4a3b      	ldr	r2, [pc, #236]	; (8005630 <HAL_TIM_PWM_Start_DMA+0x344>)
 8005542:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005548:	4a3a      	ldr	r2, [pc, #232]	; (8005634 <HAL_TIM_PWM_Start_DMA+0x348>)
 800554a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005550:	6879      	ldr	r1, [r7, #4]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3340      	adds	r3, #64	; 0x40
 8005558:	461a      	mov	r2, r3
 800555a:	887b      	ldrh	r3, [r7, #2]
 800555c:	f7fc ffa4 	bl	80024a8 <HAL_DMA_Start_IT>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e05b      	b.n	8005622 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68da      	ldr	r2, [r3, #12]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005578:	60da      	str	r2, [r3, #12]
      break;
 800557a:	e002      	b.n	8005582 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	75fb      	strb	r3, [r7, #23]
      break;
 8005580:	bf00      	nop
  }

  if (status == HAL_OK)
 8005582:	7dfb      	ldrb	r3, [r7, #23]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d14b      	bne.n	8005620 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2201      	movs	r2, #1
 800558e:	68b9      	ldr	r1, [r7, #8]
 8005590:	4618      	mov	r0, r3
 8005592:	f000 fe35 	bl	8006200 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a27      	ldr	r2, [pc, #156]	; (8005638 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d107      	bne.n	80055b0 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055ae:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a20      	ldr	r2, [pc, #128]	; (8005638 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d018      	beq.n	80055ec <HAL_TIM_PWM_Start_DMA+0x300>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c2:	d013      	beq.n	80055ec <HAL_TIM_PWM_Start_DMA+0x300>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a1c      	ldr	r2, [pc, #112]	; (800563c <HAL_TIM_PWM_Start_DMA+0x350>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00e      	beq.n	80055ec <HAL_TIM_PWM_Start_DMA+0x300>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a1b      	ldr	r2, [pc, #108]	; (8005640 <HAL_TIM_PWM_Start_DMA+0x354>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d009      	beq.n	80055ec <HAL_TIM_PWM_Start_DMA+0x300>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a19      	ldr	r2, [pc, #100]	; (8005644 <HAL_TIM_PWM_Start_DMA+0x358>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d004      	beq.n	80055ec <HAL_TIM_PWM_Start_DMA+0x300>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a18      	ldr	r2, [pc, #96]	; (8005648 <HAL_TIM_PWM_Start_DMA+0x35c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d111      	bne.n	8005610 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	2b06      	cmp	r3, #6
 80055fc:	d010      	beq.n	8005620 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f042 0201 	orr.w	r2, r2, #1
 800560c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800560e:	e007      	b.n	8005620 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0201 	orr.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005620:	7dfb      	ldrb	r3, [r7, #23]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	08005ba5 	.word	0x08005ba5
 8005630:	08005c4d 	.word	0x08005c4d
 8005634:	08005b13 	.word	0x08005b13
 8005638:	40010000 	.word	0x40010000
 800563c:	40000400 	.word	0x40000400
 8005640:	40000800 	.word	0x40000800
 8005644:	40000c00 	.word	0x40000c00
 8005648:	40014000 	.word	0x40014000

0800564c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005656:	2300      	movs	r3, #0
 8005658:	73fb      	strb	r3, [r7, #15]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b0c      	cmp	r3, #12
 800565e:	d855      	bhi.n	800570c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005660:	a201      	add	r2, pc, #4	; (adr r2, 8005668 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005666:	bf00      	nop
 8005668:	0800569d 	.word	0x0800569d
 800566c:	0800570d 	.word	0x0800570d
 8005670:	0800570d 	.word	0x0800570d
 8005674:	0800570d 	.word	0x0800570d
 8005678:	080056b9 	.word	0x080056b9
 800567c:	0800570d 	.word	0x0800570d
 8005680:	0800570d 	.word	0x0800570d
 8005684:	0800570d 	.word	0x0800570d
 8005688:	080056d5 	.word	0x080056d5
 800568c:	0800570d 	.word	0x0800570d
 8005690:	0800570d 	.word	0x0800570d
 8005694:	0800570d 	.word	0x0800570d
 8005698:	080056f1 	.word	0x080056f1
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80056aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7fc ff51 	bl	8002558 <HAL_DMA_Abort_IT>
      break;
 80056b6:	e02c      	b.n	8005712 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68da      	ldr	r2, [r3, #12]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7fc ff43 	bl	8002558 <HAL_DMA_Abort_IT>
      break;
 80056d2:	e01e      	b.n	8005712 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7fc ff35 	bl	8002558 <HAL_DMA_Abort_IT>
      break;
 80056ee:	e010      	b.n	8005712 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68da      	ldr	r2, [r3, #12]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005704:	4618      	mov	r0, r3
 8005706:	f7fc ff27 	bl	8002558 <HAL_DMA_Abort_IT>
      break;
 800570a:	e002      	b.n	8005712 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	73fb      	strb	r3, [r7, #15]
      break;
 8005710:	bf00      	nop
  }

  if (status == HAL_OK)
 8005712:	7bfb      	ldrb	r3, [r7, #15]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d157      	bne.n	80057c8 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2200      	movs	r2, #0
 800571e:	6839      	ldr	r1, [r7, #0]
 8005720:	4618      	mov	r0, r3
 8005722:	f000 fd6d 	bl	8006200 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a2a      	ldr	r2, [pc, #168]	; (80057d4 <HAL_TIM_PWM_Stop_DMA+0x188>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d117      	bne.n	8005760 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6a1a      	ldr	r2, [r3, #32]
 8005736:	f241 1311 	movw	r3, #4369	; 0x1111
 800573a:	4013      	ands	r3, r2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10f      	bne.n	8005760 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6a1a      	ldr	r2, [r3, #32]
 8005746:	f240 4344 	movw	r3, #1092	; 0x444
 800574a:	4013      	ands	r3, r2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d107      	bne.n	8005760 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800575e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6a1a      	ldr	r2, [r3, #32]
 8005766:	f241 1311 	movw	r3, #4369	; 0x1111
 800576a:	4013      	ands	r3, r2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10f      	bne.n	8005790 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6a1a      	ldr	r2, [r3, #32]
 8005776:	f240 4344 	movw	r3, #1092	; 0x444
 800577a:	4013      	ands	r3, r2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d107      	bne.n	8005790 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 0201 	bic.w	r2, r2, #1
 800578e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d104      	bne.n	80057a0 <HAL_TIM_PWM_Stop_DMA+0x154>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800579e:	e013      	b.n	80057c8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d104      	bne.n	80057b0 <HAL_TIM_PWM_Stop_DMA+0x164>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057ae:	e00b      	b.n	80057c8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	2b08      	cmp	r3, #8
 80057b4:	d104      	bne.n	80057c0 <HAL_TIM_PWM_Stop_DMA+0x174>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057be:	e003      	b.n	80057c8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	40010000 	.word	0x40010000

080057d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057e4:	2300      	movs	r3, #0
 80057e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d101      	bne.n	80057f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057f2:	2302      	movs	r3, #2
 80057f4:	e0ae      	b.n	8005954 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b0c      	cmp	r3, #12
 8005802:	f200 809f 	bhi.w	8005944 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005806:	a201      	add	r2, pc, #4	; (adr r2, 800580c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580c:	08005841 	.word	0x08005841
 8005810:	08005945 	.word	0x08005945
 8005814:	08005945 	.word	0x08005945
 8005818:	08005945 	.word	0x08005945
 800581c:	08005881 	.word	0x08005881
 8005820:	08005945 	.word	0x08005945
 8005824:	08005945 	.word	0x08005945
 8005828:	08005945 	.word	0x08005945
 800582c:	080058c3 	.word	0x080058c3
 8005830:	08005945 	.word	0x08005945
 8005834:	08005945 	.word	0x08005945
 8005838:	08005945 	.word	0x08005945
 800583c:	08005903 	.word	0x08005903
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68b9      	ldr	r1, [r7, #8]
 8005846:	4618      	mov	r0, r3
 8005848:	f000 fab4 	bl	8005db4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699a      	ldr	r2, [r3, #24]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0208 	orr.w	r2, r2, #8
 800585a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	699a      	ldr	r2, [r3, #24]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f022 0204 	bic.w	r2, r2, #4
 800586a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6999      	ldr	r1, [r3, #24]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	691a      	ldr	r2, [r3, #16]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	619a      	str	r2, [r3, #24]
      break;
 800587e:	e064      	b.n	800594a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68b9      	ldr	r1, [r7, #8]
 8005886:	4618      	mov	r0, r3
 8005888:	f000 fafa 	bl	8005e80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	699a      	ldr	r2, [r3, #24]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800589a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699a      	ldr	r2, [r3, #24]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6999      	ldr	r1, [r3, #24]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	021a      	lsls	r2, r3, #8
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	619a      	str	r2, [r3, #24]
      break;
 80058c0:	e043      	b.n	800594a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68b9      	ldr	r1, [r7, #8]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f000 fb45 	bl	8005f58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69da      	ldr	r2, [r3, #28]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f042 0208 	orr.w	r2, r2, #8
 80058dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69da      	ldr	r2, [r3, #28]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 0204 	bic.w	r2, r2, #4
 80058ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	69d9      	ldr	r1, [r3, #28]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	691a      	ldr	r2, [r3, #16]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	61da      	str	r2, [r3, #28]
      break;
 8005900:	e023      	b.n	800594a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68b9      	ldr	r1, [r7, #8]
 8005908:	4618      	mov	r0, r3
 800590a:	f000 fb8f 	bl	800602c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	69da      	ldr	r2, [r3, #28]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800591c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	69da      	ldr	r2, [r3, #28]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800592c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	69d9      	ldr	r1, [r3, #28]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	021a      	lsls	r2, r3, #8
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	61da      	str	r2, [r3, #28]
      break;
 8005942:	e002      	b.n	800594a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	75fb      	strb	r3, [r7, #23]
      break;
 8005948:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005952:	7dfb      	ldrb	r3, [r7, #23]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3718      	adds	r7, #24
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005966:	2300      	movs	r3, #0
 8005968:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005970:	2b01      	cmp	r3, #1
 8005972:	d101      	bne.n	8005978 <HAL_TIM_ConfigClockSource+0x1c>
 8005974:	2302      	movs	r3, #2
 8005976:	e0b4      	b.n	8005ae2 <HAL_TIM_ConfigClockSource+0x186>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005996:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800599e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059b0:	d03e      	beq.n	8005a30 <HAL_TIM_ConfigClockSource+0xd4>
 80059b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059b6:	f200 8087 	bhi.w	8005ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80059ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059be:	f000 8086 	beq.w	8005ace <HAL_TIM_ConfigClockSource+0x172>
 80059c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c6:	d87f      	bhi.n	8005ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80059c8:	2b70      	cmp	r3, #112	; 0x70
 80059ca:	d01a      	beq.n	8005a02 <HAL_TIM_ConfigClockSource+0xa6>
 80059cc:	2b70      	cmp	r3, #112	; 0x70
 80059ce:	d87b      	bhi.n	8005ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80059d0:	2b60      	cmp	r3, #96	; 0x60
 80059d2:	d050      	beq.n	8005a76 <HAL_TIM_ConfigClockSource+0x11a>
 80059d4:	2b60      	cmp	r3, #96	; 0x60
 80059d6:	d877      	bhi.n	8005ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80059d8:	2b50      	cmp	r3, #80	; 0x50
 80059da:	d03c      	beq.n	8005a56 <HAL_TIM_ConfigClockSource+0xfa>
 80059dc:	2b50      	cmp	r3, #80	; 0x50
 80059de:	d873      	bhi.n	8005ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80059e0:	2b40      	cmp	r3, #64	; 0x40
 80059e2:	d058      	beq.n	8005a96 <HAL_TIM_ConfigClockSource+0x13a>
 80059e4:	2b40      	cmp	r3, #64	; 0x40
 80059e6:	d86f      	bhi.n	8005ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80059e8:	2b30      	cmp	r3, #48	; 0x30
 80059ea:	d064      	beq.n	8005ab6 <HAL_TIM_ConfigClockSource+0x15a>
 80059ec:	2b30      	cmp	r3, #48	; 0x30
 80059ee:	d86b      	bhi.n	8005ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80059f0:	2b20      	cmp	r3, #32
 80059f2:	d060      	beq.n	8005ab6 <HAL_TIM_ConfigClockSource+0x15a>
 80059f4:	2b20      	cmp	r3, #32
 80059f6:	d867      	bhi.n	8005ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d05c      	beq.n	8005ab6 <HAL_TIM_ConfigClockSource+0x15a>
 80059fc:	2b10      	cmp	r3, #16
 80059fe:	d05a      	beq.n	8005ab6 <HAL_TIM_ConfigClockSource+0x15a>
 8005a00:	e062      	b.n	8005ac8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6818      	ldr	r0, [r3, #0]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	6899      	ldr	r1, [r3, #8]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f000 fbd5 	bl	80061c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	609a      	str	r2, [r3, #8]
      break;
 8005a2e:	e04f      	b.n	8005ad0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6818      	ldr	r0, [r3, #0]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	6899      	ldr	r1, [r3, #8]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f000 fbbe 	bl	80061c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a52:	609a      	str	r2, [r3, #8]
      break;
 8005a54:	e03c      	b.n	8005ad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6818      	ldr	r0, [r3, #0]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	6859      	ldr	r1, [r3, #4]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	461a      	mov	r2, r3
 8005a64:	f000 fb32 	bl	80060cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2150      	movs	r1, #80	; 0x50
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 fb8b 	bl	800618a <TIM_ITRx_SetConfig>
      break;
 8005a74:	e02c      	b.n	8005ad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6818      	ldr	r0, [r3, #0]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	6859      	ldr	r1, [r3, #4]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	461a      	mov	r2, r3
 8005a84:	f000 fb51 	bl	800612a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2160      	movs	r1, #96	; 0x60
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 fb7b 	bl	800618a <TIM_ITRx_SetConfig>
      break;
 8005a94:	e01c      	b.n	8005ad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6818      	ldr	r0, [r3, #0]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	6859      	ldr	r1, [r3, #4]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f000 fb12 	bl	80060cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2140      	movs	r1, #64	; 0x40
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 fb6b 	bl	800618a <TIM_ITRx_SetConfig>
      break;
 8005ab4:	e00c      	b.n	8005ad0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4619      	mov	r1, r3
 8005ac0:	4610      	mov	r0, r2
 8005ac2:	f000 fb62 	bl	800618a <TIM_ITRx_SetConfig>
      break;
 8005ac6:	e003      	b.n	8005ad0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	73fb      	strb	r3, [r7, #15]
      break;
 8005acc:	e000      	b.n	8005ad0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ace:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b084      	sub	sp, #16
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d107      	bne.n	8005b3a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b38:	e02a      	b.n	8005b90 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d107      	bne.n	8005b54 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2202      	movs	r2, #2
 8005b48:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b52:	e01d      	b.n	8005b90 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d107      	bne.n	8005b6e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2204      	movs	r2, #4
 8005b62:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b6c:	e010      	b.n	8005b90 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d107      	bne.n	8005b88 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2208      	movs	r2, #8
 8005b7c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b86:	e003      	b.n	8005b90 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f7ff ffb4 	bl	8005afe <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	771a      	strb	r2, [r3, #28]
}
 8005b9c:	bf00      	nop
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d10b      	bne.n	8005bd4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d136      	bne.n	8005c38 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bd2:	e031      	b.n	8005c38 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d10b      	bne.n	8005bf6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2202      	movs	r2, #2
 8005be2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d125      	bne.n	8005c38 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bf4:	e020      	b.n	8005c38 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d10b      	bne.n	8005c18 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2204      	movs	r2, #4
 8005c04:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d114      	bne.n	8005c38 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c16:	e00f      	b.n	8005c38 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d10a      	bne.n	8005c38 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2208      	movs	r2, #8
 8005c26:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d103      	bne.n	8005c38 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f7fb fadd 	bl	80011f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	771a      	strb	r2, [r3, #28]
}
 8005c44:	bf00      	nop
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d103      	bne.n	8005c6c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2201      	movs	r2, #1
 8005c68:	771a      	strb	r2, [r3, #28]
 8005c6a:	e019      	b.n	8005ca0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d103      	bne.n	8005c7e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2202      	movs	r2, #2
 8005c7a:	771a      	strb	r2, [r3, #28]
 8005c7c:	e010      	b.n	8005ca0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d103      	bne.n	8005c90 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2204      	movs	r2, #4
 8005c8c:	771a      	strb	r2, [r3, #28]
 8005c8e:	e007      	b.n	8005ca0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d102      	bne.n	8005ca0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2208      	movs	r2, #8
 8005c9e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f7ff ff22 	bl	8005aea <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	771a      	strb	r2, [r3, #28]
}
 8005cac:	bf00      	nop
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a34      	ldr	r2, [pc, #208]	; (8005d98 <TIM_Base_SetConfig+0xe4>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d00f      	beq.n	8005cec <TIM_Base_SetConfig+0x38>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd2:	d00b      	beq.n	8005cec <TIM_Base_SetConfig+0x38>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a31      	ldr	r2, [pc, #196]	; (8005d9c <TIM_Base_SetConfig+0xe8>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d007      	beq.n	8005cec <TIM_Base_SetConfig+0x38>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a30      	ldr	r2, [pc, #192]	; (8005da0 <TIM_Base_SetConfig+0xec>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d003      	beq.n	8005cec <TIM_Base_SetConfig+0x38>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a2f      	ldr	r2, [pc, #188]	; (8005da4 <TIM_Base_SetConfig+0xf0>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d108      	bne.n	8005cfe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a25      	ldr	r2, [pc, #148]	; (8005d98 <TIM_Base_SetConfig+0xe4>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d01b      	beq.n	8005d3e <TIM_Base_SetConfig+0x8a>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d0c:	d017      	beq.n	8005d3e <TIM_Base_SetConfig+0x8a>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a22      	ldr	r2, [pc, #136]	; (8005d9c <TIM_Base_SetConfig+0xe8>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d013      	beq.n	8005d3e <TIM_Base_SetConfig+0x8a>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a21      	ldr	r2, [pc, #132]	; (8005da0 <TIM_Base_SetConfig+0xec>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d00f      	beq.n	8005d3e <TIM_Base_SetConfig+0x8a>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a20      	ldr	r2, [pc, #128]	; (8005da4 <TIM_Base_SetConfig+0xf0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d00b      	beq.n	8005d3e <TIM_Base_SetConfig+0x8a>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a1f      	ldr	r2, [pc, #124]	; (8005da8 <TIM_Base_SetConfig+0xf4>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d007      	beq.n	8005d3e <TIM_Base_SetConfig+0x8a>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a1e      	ldr	r2, [pc, #120]	; (8005dac <TIM_Base_SetConfig+0xf8>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d003      	beq.n	8005d3e <TIM_Base_SetConfig+0x8a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a1d      	ldr	r2, [pc, #116]	; (8005db0 <TIM_Base_SetConfig+0xfc>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d108      	bne.n	8005d50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a08      	ldr	r2, [pc, #32]	; (8005d98 <TIM_Base_SetConfig+0xe4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d103      	bne.n	8005d84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	691a      	ldr	r2, [r3, #16]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	615a      	str	r2, [r3, #20]
}
 8005d8a:	bf00      	nop
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	40010000 	.word	0x40010000
 8005d9c:	40000400 	.word	0x40000400
 8005da0:	40000800 	.word	0x40000800
 8005da4:	40000c00 	.word	0x40000c00
 8005da8:	40014000 	.word	0x40014000
 8005dac:	40014400 	.word	0x40014400
 8005db0:	40014800 	.word	0x40014800

08005db4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	f023 0201 	bic.w	r2, r3, #1
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0303 	bic.w	r3, r3, #3
 8005dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f023 0302 	bic.w	r3, r3, #2
 8005dfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a1c      	ldr	r2, [pc, #112]	; (8005e7c <TIM_OC1_SetConfig+0xc8>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d10c      	bne.n	8005e2a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f023 0308 	bic.w	r3, r3, #8
 8005e16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f023 0304 	bic.w	r3, r3, #4
 8005e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a13      	ldr	r2, [pc, #76]	; (8005e7c <TIM_OC1_SetConfig+0xc8>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d111      	bne.n	8005e56 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	621a      	str	r2, [r3, #32]
}
 8005e70:	bf00      	nop
 8005e72:	371c      	adds	r7, #28
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr
 8005e7c:	40010000 	.word	0x40010000

08005e80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	f023 0210 	bic.w	r2, r3, #16
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	021b      	lsls	r3, r3, #8
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f023 0320 	bic.w	r3, r3, #32
 8005eca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	011b      	lsls	r3, r3, #4
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a1e      	ldr	r2, [pc, #120]	; (8005f54 <TIM_OC2_SetConfig+0xd4>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d10d      	bne.n	8005efc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	011b      	lsls	r3, r3, #4
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005efa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a15      	ldr	r2, [pc, #84]	; (8005f54 <TIM_OC2_SetConfig+0xd4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d113      	bne.n	8005f2c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	621a      	str	r2, [r3, #32]
}
 8005f46:	bf00      	nop
 8005f48:	371c      	adds	r7, #28
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	40010000 	.word	0x40010000

08005f58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f023 0303 	bic.w	r3, r3, #3
 8005f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	021b      	lsls	r3, r3, #8
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a1d      	ldr	r2, [pc, #116]	; (8006028 <TIM_OC3_SetConfig+0xd0>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d10d      	bne.n	8005fd2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	021b      	lsls	r3, r3, #8
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a14      	ldr	r2, [pc, #80]	; (8006028 <TIM_OC3_SetConfig+0xd0>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d113      	bne.n	8006002 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	011b      	lsls	r3, r3, #4
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	011b      	lsls	r3, r3, #4
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	685a      	ldr	r2, [r3, #4]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	621a      	str	r2, [r3, #32]
}
 800601c:	bf00      	nop
 800601e:	371c      	adds	r7, #28
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr
 8006028:	40010000 	.word	0x40010000

0800602c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800605a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	021b      	lsls	r3, r3, #8
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	4313      	orrs	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	031b      	lsls	r3, r3, #12
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	4313      	orrs	r3, r2
 8006082:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a10      	ldr	r2, [pc, #64]	; (80060c8 <TIM_OC4_SetConfig+0x9c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d109      	bne.n	80060a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006092:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	019b      	lsls	r3, r3, #6
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	4313      	orrs	r3, r2
 800609e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	621a      	str	r2, [r3, #32]
}
 80060ba:	bf00      	nop
 80060bc:	371c      	adds	r7, #28
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	40010000 	.word	0x40010000

080060cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b087      	sub	sp, #28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	f023 0201 	bic.w	r2, r3, #1
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	011b      	lsls	r3, r3, #4
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	4313      	orrs	r3, r2
 8006100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f023 030a 	bic.w	r3, r3, #10
 8006108:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	4313      	orrs	r3, r2
 8006110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	621a      	str	r2, [r3, #32]
}
 800611e:	bf00      	nop
 8006120:	371c      	adds	r7, #28
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800612a:	b480      	push	{r7}
 800612c:	b087      	sub	sp, #28
 800612e:	af00      	add	r7, sp, #0
 8006130:	60f8      	str	r0, [r7, #12]
 8006132:	60b9      	str	r1, [r7, #8]
 8006134:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	f023 0210 	bic.w	r2, r3, #16
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006154:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	031b      	lsls	r3, r3, #12
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	4313      	orrs	r3, r2
 800615e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006166:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	011b      	lsls	r3, r3, #4
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	4313      	orrs	r3, r2
 8006170:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	621a      	str	r2, [r3, #32]
}
 800617e:	bf00      	nop
 8006180:	371c      	adds	r7, #28
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800618a:	b480      	push	{r7}
 800618c:	b085      	sub	sp, #20
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
 8006192:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	f043 0307 	orr.w	r3, r3, #7
 80061ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	609a      	str	r2, [r3, #8]
}
 80061b4:	bf00      	nop
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	021a      	lsls	r2, r3, #8
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	431a      	orrs	r2, r3
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	609a      	str	r2, [r3, #8]
}
 80061f4:	bf00      	nop
 80061f6:	371c      	adds	r7, #28
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f003 031f 	and.w	r3, r3, #31
 8006212:	2201      	movs	r2, #1
 8006214:	fa02 f303 	lsl.w	r3, r2, r3
 8006218:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6a1a      	ldr	r2, [r3, #32]
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	43db      	mvns	r3, r3
 8006222:	401a      	ands	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6a1a      	ldr	r2, [r3, #32]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f003 031f 	and.w	r3, r3, #31
 8006232:	6879      	ldr	r1, [r7, #4]
 8006234:	fa01 f303 	lsl.w	r3, r1, r3
 8006238:	431a      	orrs	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	621a      	str	r2, [r3, #32]
}
 800623e:	bf00      	nop
 8006240:	371c      	adds	r7, #28
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
	...

0800624c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006260:	2302      	movs	r3, #2
 8006262:	e050      	b.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	4313      	orrs	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a1c      	ldr	r2, [pc, #112]	; (8006314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d018      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b0:	d013      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a18      	ldr	r2, [pc, #96]	; (8006318 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d00e      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a16      	ldr	r2, [pc, #88]	; (800631c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d009      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a15      	ldr	r2, [pc, #84]	; (8006320 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d004      	beq.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a13      	ldr	r2, [pc, #76]	; (8006324 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d10c      	bne.n	80062f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	40010000 	.word	0x40010000
 8006318:	40000400 	.word	0x40000400
 800631c:	40000800 	.word	0x40000800
 8006320:	40000c00 	.word	0x40000c00
 8006324:	40014000 	.word	0x40014000

08006328 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800633c:	2b01      	cmp	r3, #1
 800633e:	d101      	bne.n	8006344 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006340:	2302      	movs	r3, #2
 8006342:	e03d      	b.n	80063c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	4313      	orrs	r3, r2
 8006358:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	4313      	orrs	r3, r2
 8006366:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	4313      	orrs	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4313      	orrs	r3, r2
 8006382:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	4313      	orrs	r3, r2
 8006390:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	4313      	orrs	r3, r2
 800639e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063cc:	b084      	sub	sp, #16
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b084      	sub	sp, #16
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
 80063d6:	f107 001c 	add.w	r0, r7, #28
 80063da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d122      	bne.n	800642a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80063f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800640c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800640e:	2b01      	cmp	r3, #1
 8006410:	d105      	bne.n	800641e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f001 fb1c 	bl	8007a5c <USB_CoreReset>
 8006424:	4603      	mov	r3, r0
 8006426:	73fb      	strb	r3, [r7, #15]
 8006428:	e01a      	b.n	8006460 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f001 fb10 	bl	8007a5c <USB_CoreReset>
 800643c:	4603      	mov	r3, r0
 800643e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006442:	2b00      	cmp	r3, #0
 8006444:	d106      	bne.n	8006454 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	639a      	str	r2, [r3, #56]	; 0x38
 8006452:	e005      	b.n	8006460 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006458:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006462:	2b01      	cmp	r3, #1
 8006464:	d10b      	bne.n	800647e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f043 0206 	orr.w	r2, r3, #6
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f043 0220 	orr.w	r2, r3, #32
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800647e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800648a:	b004      	add	sp, #16
 800648c:	4770      	bx	lr
	...

08006490 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006490:	b480      	push	{r7}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	4613      	mov	r3, r2
 800649c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d165      	bne.n	8006570 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	4a41      	ldr	r2, [pc, #260]	; (80065ac <USB_SetTurnaroundTime+0x11c>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d906      	bls.n	80064ba <USB_SetTurnaroundTime+0x2a>
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	4a40      	ldr	r2, [pc, #256]	; (80065b0 <USB_SetTurnaroundTime+0x120>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d202      	bcs.n	80064ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80064b4:	230f      	movs	r3, #15
 80064b6:	617b      	str	r3, [r7, #20]
 80064b8:	e062      	b.n	8006580 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	4a3c      	ldr	r2, [pc, #240]	; (80065b0 <USB_SetTurnaroundTime+0x120>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d306      	bcc.n	80064d0 <USB_SetTurnaroundTime+0x40>
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	4a3b      	ldr	r2, [pc, #236]	; (80065b4 <USB_SetTurnaroundTime+0x124>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d202      	bcs.n	80064d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80064ca:	230e      	movs	r3, #14
 80064cc:	617b      	str	r3, [r7, #20]
 80064ce:	e057      	b.n	8006580 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	4a38      	ldr	r2, [pc, #224]	; (80065b4 <USB_SetTurnaroundTime+0x124>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d306      	bcc.n	80064e6 <USB_SetTurnaroundTime+0x56>
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4a37      	ldr	r2, [pc, #220]	; (80065b8 <USB_SetTurnaroundTime+0x128>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d202      	bcs.n	80064e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80064e0:	230d      	movs	r3, #13
 80064e2:	617b      	str	r3, [r7, #20]
 80064e4:	e04c      	b.n	8006580 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	4a33      	ldr	r2, [pc, #204]	; (80065b8 <USB_SetTurnaroundTime+0x128>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d306      	bcc.n	80064fc <USB_SetTurnaroundTime+0x6c>
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	4a32      	ldr	r2, [pc, #200]	; (80065bc <USB_SetTurnaroundTime+0x12c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d802      	bhi.n	80064fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80064f6:	230c      	movs	r3, #12
 80064f8:	617b      	str	r3, [r7, #20]
 80064fa:	e041      	b.n	8006580 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	4a2f      	ldr	r2, [pc, #188]	; (80065bc <USB_SetTurnaroundTime+0x12c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d906      	bls.n	8006512 <USB_SetTurnaroundTime+0x82>
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	4a2e      	ldr	r2, [pc, #184]	; (80065c0 <USB_SetTurnaroundTime+0x130>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d802      	bhi.n	8006512 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800650c:	230b      	movs	r3, #11
 800650e:	617b      	str	r3, [r7, #20]
 8006510:	e036      	b.n	8006580 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	4a2a      	ldr	r2, [pc, #168]	; (80065c0 <USB_SetTurnaroundTime+0x130>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d906      	bls.n	8006528 <USB_SetTurnaroundTime+0x98>
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	4a29      	ldr	r2, [pc, #164]	; (80065c4 <USB_SetTurnaroundTime+0x134>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d802      	bhi.n	8006528 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006522:	230a      	movs	r3, #10
 8006524:	617b      	str	r3, [r7, #20]
 8006526:	e02b      	b.n	8006580 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	4a26      	ldr	r2, [pc, #152]	; (80065c4 <USB_SetTurnaroundTime+0x134>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d906      	bls.n	800653e <USB_SetTurnaroundTime+0xae>
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	4a25      	ldr	r2, [pc, #148]	; (80065c8 <USB_SetTurnaroundTime+0x138>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d202      	bcs.n	800653e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006538:	2309      	movs	r3, #9
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	e020      	b.n	8006580 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	4a21      	ldr	r2, [pc, #132]	; (80065c8 <USB_SetTurnaroundTime+0x138>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d306      	bcc.n	8006554 <USB_SetTurnaroundTime+0xc4>
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	4a20      	ldr	r2, [pc, #128]	; (80065cc <USB_SetTurnaroundTime+0x13c>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d802      	bhi.n	8006554 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800654e:	2308      	movs	r3, #8
 8006550:	617b      	str	r3, [r7, #20]
 8006552:	e015      	b.n	8006580 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	4a1d      	ldr	r2, [pc, #116]	; (80065cc <USB_SetTurnaroundTime+0x13c>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d906      	bls.n	800656a <USB_SetTurnaroundTime+0xda>
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	4a1c      	ldr	r2, [pc, #112]	; (80065d0 <USB_SetTurnaroundTime+0x140>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d202      	bcs.n	800656a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006564:	2307      	movs	r3, #7
 8006566:	617b      	str	r3, [r7, #20]
 8006568:	e00a      	b.n	8006580 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800656a:	2306      	movs	r3, #6
 800656c:	617b      	str	r3, [r7, #20]
 800656e:	e007      	b.n	8006580 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006570:	79fb      	ldrb	r3, [r7, #7]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d102      	bne.n	800657c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006576:	2309      	movs	r3, #9
 8006578:	617b      	str	r3, [r7, #20]
 800657a:	e001      	b.n	8006580 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800657c:	2309      	movs	r3, #9
 800657e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	68da      	ldr	r2, [r3, #12]
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	029b      	lsls	r3, r3, #10
 8006594:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006598:	431a      	orrs	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	371c      	adds	r7, #28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	00d8acbf 	.word	0x00d8acbf
 80065b0:	00e4e1c0 	.word	0x00e4e1c0
 80065b4:	00f42400 	.word	0x00f42400
 80065b8:	01067380 	.word	0x01067380
 80065bc:	011a499f 	.word	0x011a499f
 80065c0:	01312cff 	.word	0x01312cff
 80065c4:	014ca43f 	.word	0x014ca43f
 80065c8:	016e3600 	.word	0x016e3600
 80065cc:	01a6ab1f 	.word	0x01a6ab1f
 80065d0:	01e84800 	.word	0x01e84800

080065d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f043 0201 	orr.w	r2, r3, #1
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b083      	sub	sp, #12
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f023 0201 	bic.w	r2, r3, #1
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	460b      	mov	r3, r1
 8006622:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006624:	2300      	movs	r3, #0
 8006626:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006634:	78fb      	ldrb	r3, [r7, #3]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d115      	bne.n	8006666 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006646:	2001      	movs	r0, #1
 8006648:	f7fb fd4a 	bl	80020e0 <HAL_Delay>
      ms++;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	3301      	adds	r3, #1
 8006650:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f001 f972 	bl	800793c <USB_GetMode>
 8006658:	4603      	mov	r3, r0
 800665a:	2b01      	cmp	r3, #1
 800665c:	d01e      	beq.n	800669c <USB_SetCurrentMode+0x84>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2b31      	cmp	r3, #49	; 0x31
 8006662:	d9f0      	bls.n	8006646 <USB_SetCurrentMode+0x2e>
 8006664:	e01a      	b.n	800669c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006666:	78fb      	ldrb	r3, [r7, #3]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d115      	bne.n	8006698 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006678:	2001      	movs	r0, #1
 800667a:	f7fb fd31 	bl	80020e0 <HAL_Delay>
      ms++;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	3301      	adds	r3, #1
 8006682:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f001 f959 	bl	800793c <USB_GetMode>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d005      	beq.n	800669c <USB_SetCurrentMode+0x84>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2b31      	cmp	r3, #49	; 0x31
 8006694:	d9f0      	bls.n	8006678 <USB_SetCurrentMode+0x60>
 8006696:	e001      	b.n	800669c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e005      	b.n	80066a8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2b32      	cmp	r3, #50	; 0x32
 80066a0:	d101      	bne.n	80066a6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e000      	b.n	80066a8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066b0:	b084      	sub	sp, #16
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b086      	sub	sp, #24
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80066be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80066ca:	2300      	movs	r3, #0
 80066cc:	613b      	str	r3, [r7, #16]
 80066ce:	e009      	b.n	80066e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	3340      	adds	r3, #64	; 0x40
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	2200      	movs	r2, #0
 80066dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	3301      	adds	r3, #1
 80066e2:	613b      	str	r3, [r7, #16]
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	2b0e      	cmp	r3, #14
 80066e8:	d9f2      	bls.n	80066d0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80066ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d11c      	bne.n	800672a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066fe:	f043 0302 	orr.w	r3, r3, #2
 8006702:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006708:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006714:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006720:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	639a      	str	r2, [r3, #56]	; 0x38
 8006728:	e00b      	b.n	8006742 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006748:	461a      	mov	r2, r3
 800674a:	2300      	movs	r3, #0
 800674c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006754:	4619      	mov	r1, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800675c:	461a      	mov	r2, r3
 800675e:	680b      	ldr	r3, [r1, #0]
 8006760:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006764:	2b01      	cmp	r3, #1
 8006766:	d10c      	bne.n	8006782 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676a:	2b00      	cmp	r3, #0
 800676c:	d104      	bne.n	8006778 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800676e:	2100      	movs	r1, #0
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 f945 	bl	8006a00 <USB_SetDevSpeed>
 8006776:	e008      	b.n	800678a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006778:	2101      	movs	r1, #1
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f940 	bl	8006a00 <USB_SetDevSpeed>
 8006780:	e003      	b.n	800678a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006782:	2103      	movs	r1, #3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f93b 	bl	8006a00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800678a:	2110      	movs	r1, #16
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f8f3 	bl	8006978 <USB_FlushTxFifo>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d001      	beq.n	800679c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f90f 	bl	80069c0 <USB_FlushRxFifo>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d001      	beq.n	80067ac <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b2:	461a      	mov	r2, r3
 80067b4:	2300      	movs	r3, #0
 80067b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067be:	461a      	mov	r2, r3
 80067c0:	2300      	movs	r3, #0
 80067c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ca:	461a      	mov	r2, r3
 80067cc:	2300      	movs	r3, #0
 80067ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067d0:	2300      	movs	r3, #0
 80067d2:	613b      	str	r3, [r7, #16]
 80067d4:	e043      	b.n	800685e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067ec:	d118      	bne.n	8006820 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10a      	bne.n	800680a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006800:	461a      	mov	r2, r3
 8006802:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006806:	6013      	str	r3, [r2, #0]
 8006808:	e013      	b.n	8006832 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006816:	461a      	mov	r2, r3
 8006818:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800681c:	6013      	str	r3, [r2, #0]
 800681e:	e008      	b.n	8006832 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	4413      	add	r3, r2
 8006828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800682c:	461a      	mov	r2, r3
 800682e:	2300      	movs	r3, #0
 8006830:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683e:	461a      	mov	r2, r3
 8006840:	2300      	movs	r3, #0
 8006842:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006850:	461a      	mov	r2, r3
 8006852:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006856:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	3301      	adds	r3, #1
 800685c:	613b      	str	r3, [r7, #16]
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	429a      	cmp	r2, r3
 8006864:	d3b7      	bcc.n	80067d6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006866:	2300      	movs	r3, #0
 8006868:	613b      	str	r3, [r7, #16]
 800686a:	e043      	b.n	80068f4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4413      	add	r3, r2
 8006874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800687e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006882:	d118      	bne.n	80068b6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10a      	bne.n	80068a0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006896:	461a      	mov	r2, r3
 8006898:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800689c:	6013      	str	r3, [r2, #0]
 800689e:	e013      	b.n	80068c8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ac:	461a      	mov	r2, r3
 80068ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80068b2:	6013      	str	r3, [r2, #0]
 80068b4:	e008      	b.n	80068c8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c2:	461a      	mov	r2, r3
 80068c4:	2300      	movs	r3, #0
 80068c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d4:	461a      	mov	r2, r3
 80068d6:	2300      	movs	r3, #0
 80068d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e6:	461a      	mov	r2, r3
 80068e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	3301      	adds	r3, #1
 80068f2:	613b      	str	r3, [r7, #16]
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d3b7      	bcc.n	800686c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800690a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800690e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800691c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800691e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006920:	2b00      	cmp	r3, #0
 8006922:	d105      	bne.n	8006930 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	f043 0210 	orr.w	r2, r3, #16
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	699a      	ldr	r2, [r3, #24]
 8006934:	4b0f      	ldr	r3, [pc, #60]	; (8006974 <USB_DevInit+0x2c4>)
 8006936:	4313      	orrs	r3, r2
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800693c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800693e:	2b00      	cmp	r3, #0
 8006940:	d005      	beq.n	800694e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	f043 0208 	orr.w	r2, r3, #8
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800694e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006950:	2b01      	cmp	r3, #1
 8006952:	d107      	bne.n	8006964 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800695c:	f043 0304 	orr.w	r3, r3, #4
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006964:	7dfb      	ldrb	r3, [r7, #23]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006970:	b004      	add	sp, #16
 8006972:	4770      	bx	lr
 8006974:	803c3800 	.word	0x803c3800

08006978 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	019b      	lsls	r3, r3, #6
 800698a:	f043 0220 	orr.w	r2, r3, #32
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	3301      	adds	r3, #1
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	4a08      	ldr	r2, [pc, #32]	; (80069bc <USB_FlushTxFifo+0x44>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d901      	bls.n	80069a2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e006      	b.n	80069b0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	f003 0320 	and.w	r3, r3, #32
 80069aa:	2b20      	cmp	r3, #32
 80069ac:	d0f1      	beq.n	8006992 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	00030d40 	.word	0x00030d40

080069c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2210      	movs	r2, #16
 80069d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	3301      	adds	r3, #1
 80069d6:	60fb      	str	r3, [r7, #12]
 80069d8:	4a08      	ldr	r2, [pc, #32]	; (80069fc <USB_FlushRxFifo+0x3c>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d901      	bls.n	80069e2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e006      	b.n	80069f0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	f003 0310 	and.w	r3, r3, #16
 80069ea:	2b10      	cmp	r3, #16
 80069ec:	d0f1      	beq.n	80069d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3714      	adds	r7, #20
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr
 80069fc:	00030d40 	.word	0x00030d40

08006a00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	78fb      	ldrb	r3, [r7, #3]
 8006a1a:	68f9      	ldr	r1, [r7, #12]
 8006a1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a20:	4313      	orrs	r3, r2
 8006a22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b087      	sub	sp, #28
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f003 0306 	and.w	r3, r3, #6
 8006a4a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d102      	bne.n	8006a58 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006a52:	2300      	movs	r3, #0
 8006a54:	75fb      	strb	r3, [r7, #23]
 8006a56:	e00a      	b.n	8006a6e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d002      	beq.n	8006a64 <USB_GetDevSpeed+0x32>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b06      	cmp	r3, #6
 8006a62:	d102      	bne.n	8006a6a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006a64:	2302      	movs	r3, #2
 8006a66:	75fb      	strb	r3, [r7, #23]
 8006a68:	e001      	b.n	8006a6e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006a6a:	230f      	movs	r3, #15
 8006a6c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	371c      	adds	r7, #28
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	785b      	ldrb	r3, [r3, #1]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d13a      	bne.n	8006b0e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a9e:	69da      	ldr	r2, [r3, #28]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	f003 030f 	and.w	r3, r3, #15
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	68f9      	ldr	r1, [r7, #12]
 8006ab2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	015a      	lsls	r2, r3, #5
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d155      	bne.n	8006b7c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	78db      	ldrb	r3, [r3, #3]
 8006aea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006aec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	059b      	lsls	r3, r3, #22
 8006af2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006af4:	4313      	orrs	r3, r2
 8006af6:	68ba      	ldr	r2, [r7, #8]
 8006af8:	0151      	lsls	r1, r2, #5
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	440a      	add	r2, r1
 8006afe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b0a:	6013      	str	r3, [r2, #0]
 8006b0c:	e036      	b.n	8006b7c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b14:	69da      	ldr	r2, [r3, #28]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	f003 030f 	and.w	r3, r3, #15
 8006b1e:	2101      	movs	r1, #1
 8006b20:	fa01 f303 	lsl.w	r3, r1, r3
 8006b24:	041b      	lsls	r3, r3, #16
 8006b26:	68f9      	ldr	r1, [r7, #12]
 8006b28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	015a      	lsls	r2, r3, #5
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4413      	add	r3, r2
 8006b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d11a      	bne.n	8006b7c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	78db      	ldrb	r3, [r3, #3]
 8006b60:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b62:	430b      	orrs	r3, r1
 8006b64:	4313      	orrs	r3, r2
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	0151      	lsls	r1, r2, #5
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	440a      	add	r2, r1
 8006b6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b7a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
	...

08006b8c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	785b      	ldrb	r3, [r3, #1]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d161      	bne.n	8006c6c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bbe:	d11f      	bne.n	8006c00 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	0151      	lsls	r1, r2, #5
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	440a      	add	r2, r1
 8006bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006bde:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	0151      	lsls	r1, r2, #5
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	440a      	add	r2, r1
 8006bf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bfa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bfe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	f003 030f 	and.w	r3, r3, #15
 8006c10:	2101      	movs	r1, #1
 8006c12:	fa01 f303 	lsl.w	r3, r1, r3
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	43db      	mvns	r3, r3
 8006c1a:	68f9      	ldr	r1, [r7, #12]
 8006c1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c20:	4013      	ands	r3, r2
 8006c22:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c2a:	69da      	ldr	r2, [r3, #28]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	f003 030f 	and.w	r3, r3, #15
 8006c34:	2101      	movs	r1, #1
 8006c36:	fa01 f303 	lsl.w	r3, r1, r3
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	43db      	mvns	r3, r3
 8006c3e:	68f9      	ldr	r1, [r7, #12]
 8006c40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c44:	4013      	ands	r3, r2
 8006c46:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	0159      	lsls	r1, r3, #5
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	440b      	add	r3, r1
 8006c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c62:	4619      	mov	r1, r3
 8006c64:	4b35      	ldr	r3, [pc, #212]	; (8006d3c <USB_DeactivateEndpoint+0x1b0>)
 8006c66:	4013      	ands	r3, r2
 8006c68:	600b      	str	r3, [r1, #0]
 8006c6a:	e060      	b.n	8006d2e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c82:	d11f      	bne.n	8006cc4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	0151      	lsls	r1, r2, #5
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	440a      	add	r2, r1
 8006c9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ca2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	015a      	lsls	r2, r3, #5
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	4413      	add	r3, r2
 8006cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	0151      	lsls	r1, r2, #5
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	440a      	add	r2, r1
 8006cba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cc2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	f003 030f 	and.w	r3, r3, #15
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8006cda:	041b      	lsls	r3, r3, #16
 8006cdc:	43db      	mvns	r3, r3
 8006cde:	68f9      	ldr	r1, [r7, #12]
 8006ce0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cee:	69da      	ldr	r2, [r3, #28]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	f003 030f 	and.w	r3, r3, #15
 8006cf8:	2101      	movs	r1, #1
 8006cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8006cfe:	041b      	lsls	r3, r3, #16
 8006d00:	43db      	mvns	r3, r3
 8006d02:	68f9      	ldr	r1, [r7, #12]
 8006d04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d08:	4013      	ands	r3, r2
 8006d0a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	0159      	lsls	r1, r3, #5
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	440b      	add	r3, r1
 8006d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d26:	4619      	mov	r1, r3
 8006d28:	4b05      	ldr	r3, [pc, #20]	; (8006d40 <USB_DeactivateEndpoint+0x1b4>)
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	ec337800 	.word	0xec337800
 8006d40:	eff37800 	.word	0xeff37800

08006d44 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08a      	sub	sp, #40	; 0x28
 8006d48:	af02      	add	r7, sp, #8
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	785b      	ldrb	r3, [r3, #1]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	f040 815c 	bne.w	800701e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d132      	bne.n	8006dd4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	0151      	lsls	r1, r2, #5
 8006d80:	69fa      	ldr	r2, [r7, #28]
 8006d82:	440a      	add	r2, r1
 8006d84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	0151      	lsls	r1, r2, #5
 8006da4:	69fa      	ldr	r2, [r7, #28]
 8006da6:	440a      	add	r2, r1
 8006da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006db0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	0151      	lsls	r1, r2, #5
 8006dc4:	69fa      	ldr	r2, [r7, #28]
 8006dc6:	440a      	add	r2, r1
 8006dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dcc:	0cdb      	lsrs	r3, r3, #19
 8006dce:	04db      	lsls	r3, r3, #19
 8006dd0:	6113      	str	r3, [r2, #16]
 8006dd2:	e074      	b.n	8006ebe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	0151      	lsls	r1, r2, #5
 8006de6:	69fa      	ldr	r2, [r7, #28]
 8006de8:	440a      	add	r2, r1
 8006dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dee:	0cdb      	lsrs	r3, r3, #19
 8006df0:	04db      	lsls	r3, r3, #19
 8006df2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	69ba      	ldr	r2, [r7, #24]
 8006e04:	0151      	lsls	r1, r2, #5
 8006e06:	69fa      	ldr	r2, [r7, #28]
 8006e08:	440a      	add	r2, r1
 8006e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e0e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e12:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e24:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	6959      	ldr	r1, [r3, #20]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	440b      	add	r3, r1
 8006e30:	1e59      	subs	r1, r3, #1
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e3a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006e3c:	4b9d      	ldr	r3, [pc, #628]	; (80070b4 <USB_EPStartXfer+0x370>)
 8006e3e:	400b      	ands	r3, r1
 8006e40:	69b9      	ldr	r1, [r7, #24]
 8006e42:	0148      	lsls	r0, r1, #5
 8006e44:	69f9      	ldr	r1, [r7, #28]
 8006e46:	4401      	add	r1, r0
 8006e48:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	015a      	lsls	r2, r3, #5
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	4413      	add	r3, r2
 8006e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e5c:	691a      	ldr	r2, [r3, #16]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e66:	69b9      	ldr	r1, [r7, #24]
 8006e68:	0148      	lsls	r0, r1, #5
 8006e6a:	69f9      	ldr	r1, [r7, #28]
 8006e6c:	4401      	add	r1, r0
 8006e6e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e72:	4313      	orrs	r3, r2
 8006e74:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	78db      	ldrb	r3, [r3, #3]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d11f      	bne.n	8006ebe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	015a      	lsls	r2, r3, #5
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	4413      	add	r3, r2
 8006e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	0151      	lsls	r1, r2, #5
 8006e90:	69fa      	ldr	r2, [r7, #28]
 8006e92:	440a      	add	r2, r1
 8006e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e98:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006e9c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	69ba      	ldr	r2, [r7, #24]
 8006eae:	0151      	lsls	r1, r2, #5
 8006eb0:	69fa      	ldr	r2, [r7, #28]
 8006eb2:	440a      	add	r2, r1
 8006eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ebc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006ebe:	79fb      	ldrb	r3, [r7, #7]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d14b      	bne.n	8006f5c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d009      	beq.n	8006ee0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed8:	461a      	mov	r2, r3
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	78db      	ldrb	r3, [r3, #3]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d128      	bne.n	8006f3a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d110      	bne.n	8006f1a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	69ba      	ldr	r2, [r7, #24]
 8006f08:	0151      	lsls	r1, r2, #5
 8006f0a:	69fa      	ldr	r2, [r7, #28]
 8006f0c:	440a      	add	r2, r1
 8006f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f16:	6013      	str	r3, [r2, #0]
 8006f18:	e00f      	b.n	8006f3a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	0151      	lsls	r1, r2, #5
 8006f2c:	69fa      	ldr	r2, [r7, #28]
 8006f2e:	440a      	add	r2, r1
 8006f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f38:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	0151      	lsls	r1, r2, #5
 8006f4c:	69fa      	ldr	r2, [r7, #28]
 8006f4e:	440a      	add	r2, r1
 8006f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f58:	6013      	str	r3, [r2, #0]
 8006f5a:	e12f      	b.n	80071bc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	015a      	lsls	r2, r3, #5
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	4413      	add	r3, r2
 8006f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	69ba      	ldr	r2, [r7, #24]
 8006f6c:	0151      	lsls	r1, r2, #5
 8006f6e:	69fa      	ldr	r2, [r7, #28]
 8006f70:	440a      	add	r2, r1
 8006f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f7a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	78db      	ldrb	r3, [r3, #3]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d015      	beq.n	8006fb0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 8117 	beq.w	80071bc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	f003 030f 	and.w	r3, r3, #15
 8006f9e:	2101      	movs	r1, #1
 8006fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8006fa4:	69f9      	ldr	r1, [r7, #28]
 8006fa6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006faa:	4313      	orrs	r3, r2
 8006fac:	634b      	str	r3, [r1, #52]	; 0x34
 8006fae:	e105      	b.n	80071bc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d110      	bne.n	8006fe2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	015a      	lsls	r2, r3, #5
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	0151      	lsls	r1, r2, #5
 8006fd2:	69fa      	ldr	r2, [r7, #28]
 8006fd4:	440a      	add	r2, r1
 8006fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006fde:	6013      	str	r3, [r2, #0]
 8006fe0:	e00f      	b.n	8007002 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	69ba      	ldr	r2, [r7, #24]
 8006ff2:	0151      	lsls	r1, r2, #5
 8006ff4:	69fa      	ldr	r2, [r7, #28]
 8006ff6:	440a      	add	r2, r1
 8006ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007000:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	68d9      	ldr	r1, [r3, #12]
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	781a      	ldrb	r2, [r3, #0]
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	b298      	uxth	r0, r3
 8007010:	79fb      	ldrb	r3, [r7, #7]
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	4603      	mov	r3, r0
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f000 fa2b 	bl	8007472 <USB_WritePacket>
 800701c:	e0ce      	b.n	80071bc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	015a      	lsls	r2, r3, #5
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	4413      	add	r3, r2
 8007026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	69ba      	ldr	r2, [r7, #24]
 800702e:	0151      	lsls	r1, r2, #5
 8007030:	69fa      	ldr	r2, [r7, #28]
 8007032:	440a      	add	r2, r1
 8007034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007038:	0cdb      	lsrs	r3, r3, #19
 800703a:	04db      	lsls	r3, r3, #19
 800703c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	015a      	lsls	r2, r3, #5
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	4413      	add	r3, r2
 8007046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	69ba      	ldr	r2, [r7, #24]
 800704e:	0151      	lsls	r1, r2, #5
 8007050:	69fa      	ldr	r2, [r7, #28]
 8007052:	440a      	add	r2, r1
 8007054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007058:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800705c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007060:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d126      	bne.n	80070b8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	4413      	add	r3, r2
 8007072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007076:	691a      	ldr	r2, [r3, #16]
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007080:	69b9      	ldr	r1, [r7, #24]
 8007082:	0148      	lsls	r0, r1, #5
 8007084:	69f9      	ldr	r1, [r7, #28]
 8007086:	4401      	add	r1, r0
 8007088:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800708c:	4313      	orrs	r3, r2
 800708e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	4413      	add	r3, r2
 8007098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	69ba      	ldr	r2, [r7, #24]
 80070a0:	0151      	lsls	r1, r2, #5
 80070a2:	69fa      	ldr	r2, [r7, #28]
 80070a4:	440a      	add	r2, r1
 80070a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070ae:	6113      	str	r3, [r2, #16]
 80070b0:	e036      	b.n	8007120 <USB_EPStartXfer+0x3dc>
 80070b2:	bf00      	nop
 80070b4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	695a      	ldr	r2, [r3, #20]
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	4413      	add	r3, r2
 80070c2:	1e5a      	subs	r2, r3, #1
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070cc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070da:	691a      	ldr	r2, [r3, #16]
 80070dc:	8afb      	ldrh	r3, [r7, #22]
 80070de:	04d9      	lsls	r1, r3, #19
 80070e0:	4b39      	ldr	r3, [pc, #228]	; (80071c8 <USB_EPStartXfer+0x484>)
 80070e2:	400b      	ands	r3, r1
 80070e4:	69b9      	ldr	r1, [r7, #24]
 80070e6:	0148      	lsls	r0, r1, #5
 80070e8:	69f9      	ldr	r1, [r7, #28]
 80070ea:	4401      	add	r1, r0
 80070ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070f0:	4313      	orrs	r3, r2
 80070f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	015a      	lsls	r2, r3, #5
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007100:	691a      	ldr	r2, [r3, #16]
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	8af9      	ldrh	r1, [r7, #22]
 8007108:	fb01 f303 	mul.w	r3, r1, r3
 800710c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007110:	69b9      	ldr	r1, [r7, #24]
 8007112:	0148      	lsls	r0, r1, #5
 8007114:	69f9      	ldr	r1, [r7, #28]
 8007116:	4401      	add	r1, r0
 8007118:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800711c:	4313      	orrs	r3, r2
 800711e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007120:	79fb      	ldrb	r3, [r7, #7]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d10d      	bne.n	8007142 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d009      	beq.n	8007142 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	68d9      	ldr	r1, [r3, #12]
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	015a      	lsls	r2, r3, #5
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	4413      	add	r3, r2
 800713a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713e:	460a      	mov	r2, r1
 8007140:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	78db      	ldrb	r3, [r3, #3]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d128      	bne.n	800719c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007156:	2b00      	cmp	r3, #0
 8007158:	d110      	bne.n	800717c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	4413      	add	r3, r2
 8007162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	69ba      	ldr	r2, [r7, #24]
 800716a:	0151      	lsls	r1, r2, #5
 800716c:	69fa      	ldr	r2, [r7, #28]
 800716e:	440a      	add	r2, r1
 8007170:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007174:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007178:	6013      	str	r3, [r2, #0]
 800717a:	e00f      	b.n	800719c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	015a      	lsls	r2, r3, #5
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	4413      	add	r3, r2
 8007184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	69ba      	ldr	r2, [r7, #24]
 800718c:	0151      	lsls	r1, r2, #5
 800718e:	69fa      	ldr	r2, [r7, #28]
 8007190:	440a      	add	r2, r1
 8007192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800719a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	69ba      	ldr	r2, [r7, #24]
 80071ac:	0151      	lsls	r1, r2, #5
 80071ae:	69fa      	ldr	r2, [r7, #28]
 80071b0:	440a      	add	r2, r1
 80071b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3720      	adds	r7, #32
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	1ff80000 	.word	0x1ff80000

080071cc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	4613      	mov	r3, r2
 80071d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	785b      	ldrb	r3, [r3, #1]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	f040 80cd 	bne.w	8007388 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d132      	bne.n	800725c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	015a      	lsls	r2, r3, #5
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	4413      	add	r3, r2
 80071fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	0151      	lsls	r1, r2, #5
 8007208:	697a      	ldr	r2, [r7, #20]
 800720a:	440a      	add	r2, r1
 800720c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007210:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007214:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007218:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	015a      	lsls	r2, r3, #5
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	4413      	add	r3, r2
 8007222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	0151      	lsls	r1, r2, #5
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	440a      	add	r2, r1
 8007230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007234:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007238:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	015a      	lsls	r2, r3, #5
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	4413      	add	r3, r2
 8007242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	0151      	lsls	r1, r2, #5
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	440a      	add	r2, r1
 8007250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007254:	0cdb      	lsrs	r3, r3, #19
 8007256:	04db      	lsls	r3, r3, #19
 8007258:	6113      	str	r3, [r2, #16]
 800725a:	e04e      	b.n	80072fa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	0151      	lsls	r1, r2, #5
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	440a      	add	r2, r1
 8007272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007276:	0cdb      	lsrs	r3, r3, #19
 8007278:	04db      	lsls	r3, r3, #19
 800727a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	0151      	lsls	r1, r2, #5
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	440a      	add	r2, r1
 8007292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007296:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800729a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800729e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	695a      	ldr	r2, [r3, #20]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d903      	bls.n	80072b4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	689a      	ldr	r2, [r3, #8]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	015a      	lsls	r2, r3, #5
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	0151      	lsls	r1, r2, #5
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	440a      	add	r2, r1
 80072ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	015a      	lsls	r2, r3, #5
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	4413      	add	r3, r2
 80072dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e0:	691a      	ldr	r2, [r3, #16]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072ea:	6939      	ldr	r1, [r7, #16]
 80072ec:	0148      	lsls	r0, r1, #5
 80072ee:	6979      	ldr	r1, [r7, #20]
 80072f0:	4401      	add	r1, r0
 80072f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80072f6:	4313      	orrs	r3, r2
 80072f8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80072fa:	79fb      	ldrb	r3, [r7, #7]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d11e      	bne.n	800733e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d009      	beq.n	800731c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007314:	461a      	mov	r2, r3
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	4413      	add	r3, r2
 8007324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	693a      	ldr	r2, [r7, #16]
 800732c:	0151      	lsls	r1, r2, #5
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	440a      	add	r2, r1
 8007332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007336:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800733a:	6013      	str	r3, [r2, #0]
 800733c:	e092      	b.n	8007464 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	015a      	lsls	r2, r3, #5
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	4413      	add	r3, r2
 8007346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	0151      	lsls	r1, r2, #5
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	440a      	add	r2, r1
 8007354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007358:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800735c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d07e      	beq.n	8007464 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800736c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	f003 030f 	and.w	r3, r3, #15
 8007376:	2101      	movs	r1, #1
 8007378:	fa01 f303 	lsl.w	r3, r1, r3
 800737c:	6979      	ldr	r1, [r7, #20]
 800737e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007382:	4313      	orrs	r3, r2
 8007384:	634b      	str	r3, [r1, #52]	; 0x34
 8007386:	e06d      	b.n	8007464 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	015a      	lsls	r2, r3, #5
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	4413      	add	r3, r2
 8007390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	0151      	lsls	r1, r2, #5
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	440a      	add	r2, r1
 800739e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073a2:	0cdb      	lsrs	r3, r3, #19
 80073a4:	04db      	lsls	r3, r3, #19
 80073a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	015a      	lsls	r2, r3, #5
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	4413      	add	r3, r2
 80073b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	0151      	lsls	r1, r2, #5
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	440a      	add	r2, r1
 80073be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073ca:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	689a      	ldr	r2, [r3, #8]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	693a      	ldr	r2, [r7, #16]
 80073ec:	0151      	lsls	r1, r2, #5
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	440a      	add	r2, r1
 80073f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	015a      	lsls	r2, r3, #5
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	4413      	add	r3, r2
 8007404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007408:	691a      	ldr	r2, [r3, #16]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007412:	6939      	ldr	r1, [r7, #16]
 8007414:	0148      	lsls	r0, r1, #5
 8007416:	6979      	ldr	r1, [r7, #20]
 8007418:	4401      	add	r1, r0
 800741a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800741e:	4313      	orrs	r3, r2
 8007420:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007422:	79fb      	ldrb	r3, [r7, #7]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d10d      	bne.n	8007444 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d009      	beq.n	8007444 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	68d9      	ldr	r1, [r3, #12]
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	015a      	lsls	r2, r3, #5
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	4413      	add	r3, r2
 800743c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007440:	460a      	mov	r2, r1
 8007442:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	4413      	add	r3, r2
 800744c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	693a      	ldr	r2, [r7, #16]
 8007454:	0151      	lsls	r1, r2, #5
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	440a      	add	r2, r1
 800745a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800745e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007462:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	371c      	adds	r7, #28
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007472:	b480      	push	{r7}
 8007474:	b089      	sub	sp, #36	; 0x24
 8007476:	af00      	add	r7, sp, #0
 8007478:	60f8      	str	r0, [r7, #12]
 800747a:	60b9      	str	r1, [r7, #8]
 800747c:	4611      	mov	r1, r2
 800747e:	461a      	mov	r2, r3
 8007480:	460b      	mov	r3, r1
 8007482:	71fb      	strb	r3, [r7, #7]
 8007484:	4613      	mov	r3, r2
 8007486:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007490:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007494:	2b00      	cmp	r3, #0
 8007496:	d123      	bne.n	80074e0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007498:	88bb      	ldrh	r3, [r7, #4]
 800749a:	3303      	adds	r3, #3
 800749c:	089b      	lsrs	r3, r3, #2
 800749e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80074a0:	2300      	movs	r3, #0
 80074a2:	61bb      	str	r3, [r7, #24]
 80074a4:	e018      	b.n	80074d8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80074a6:	79fb      	ldrb	r3, [r7, #7]
 80074a8:	031a      	lsls	r2, r3, #12
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	4413      	add	r3, r2
 80074ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074b2:	461a      	mov	r2, r3
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	3301      	adds	r3, #1
 80074be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	3301      	adds	r3, #1
 80074c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	3301      	adds	r3, #1
 80074ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	3301      	adds	r3, #1
 80074d0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	3301      	adds	r3, #1
 80074d6:	61bb      	str	r3, [r7, #24]
 80074d8:	69ba      	ldr	r2, [r7, #24]
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d3e2      	bcc.n	80074a6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3724      	adds	r7, #36	; 0x24
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b08b      	sub	sp, #44	; 0x2c
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	60f8      	str	r0, [r7, #12]
 80074f6:	60b9      	str	r1, [r7, #8]
 80074f8:	4613      	mov	r3, r2
 80074fa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007504:	88fb      	ldrh	r3, [r7, #6]
 8007506:	089b      	lsrs	r3, r3, #2
 8007508:	b29b      	uxth	r3, r3
 800750a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800750c:	88fb      	ldrh	r3, [r7, #6]
 800750e:	f003 0303 	and.w	r3, r3, #3
 8007512:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007514:	2300      	movs	r3, #0
 8007516:	623b      	str	r3, [r7, #32]
 8007518:	e014      	b.n	8007544 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007524:	601a      	str	r2, [r3, #0]
    pDest++;
 8007526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007528:	3301      	adds	r3, #1
 800752a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752e:	3301      	adds	r3, #1
 8007530:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	3301      	adds	r3, #1
 8007536:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753a:	3301      	adds	r3, #1
 800753c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800753e:	6a3b      	ldr	r3, [r7, #32]
 8007540:	3301      	adds	r3, #1
 8007542:	623b      	str	r3, [r7, #32]
 8007544:	6a3a      	ldr	r2, [r7, #32]
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	429a      	cmp	r2, r3
 800754a:	d3e6      	bcc.n	800751a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800754c:	8bfb      	ldrh	r3, [r7, #30]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d01e      	beq.n	8007590 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007552:	2300      	movs	r3, #0
 8007554:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800755c:	461a      	mov	r2, r3
 800755e:	f107 0310 	add.w	r3, r7, #16
 8007562:	6812      	ldr	r2, [r2, #0]
 8007564:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007566:	693a      	ldr	r2, [r7, #16]
 8007568:	6a3b      	ldr	r3, [r7, #32]
 800756a:	b2db      	uxtb	r3, r3
 800756c:	00db      	lsls	r3, r3, #3
 800756e:	fa22 f303 	lsr.w	r3, r2, r3
 8007572:	b2da      	uxtb	r2, r3
 8007574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007576:	701a      	strb	r2, [r3, #0]
      i++;
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	3301      	adds	r3, #1
 800757c:	623b      	str	r3, [r7, #32]
      pDest++;
 800757e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007580:	3301      	adds	r3, #1
 8007582:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007584:	8bfb      	ldrh	r3, [r7, #30]
 8007586:	3b01      	subs	r3, #1
 8007588:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800758a:	8bfb      	ldrh	r3, [r7, #30]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1ea      	bne.n	8007566 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007592:	4618      	mov	r0, r3
 8007594:	372c      	adds	r7, #44	; 0x2c
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr

0800759e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800759e:	b480      	push	{r7}
 80075a0:	b085      	sub	sp, #20
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
 80075a6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	785b      	ldrb	r3, [r3, #1]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d12c      	bne.n	8007614 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	015a      	lsls	r2, r3, #5
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	4413      	add	r3, r2
 80075c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	db12      	blt.n	80075f2 <USB_EPSetStall+0x54>
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00f      	beq.n	80075f2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	015a      	lsls	r2, r3, #5
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	4413      	add	r3, r2
 80075da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	0151      	lsls	r1, r2, #5
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	440a      	add	r2, r1
 80075e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80075f0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	015a      	lsls	r2, r3, #5
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	4413      	add	r3, r2
 80075fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	0151      	lsls	r1, r2, #5
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	440a      	add	r2, r1
 8007608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800760c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007610:	6013      	str	r3, [r2, #0]
 8007612:	e02b      	b.n	800766c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	4413      	add	r3, r2
 800761c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	db12      	blt.n	800764c <USB_EPSetStall+0xae>
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00f      	beq.n	800764c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4413      	add	r3, r2
 8007634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68ba      	ldr	r2, [r7, #8]
 800763c:	0151      	lsls	r1, r2, #5
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	440a      	add	r2, r1
 8007642:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007646:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800764a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	015a      	lsls	r2, r3, #5
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	4413      	add	r3, r2
 8007654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	0151      	lsls	r1, r2, #5
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	440a      	add	r2, r1
 8007662:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007666:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800766a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800767a:	b480      	push	{r7}
 800767c:	b085      	sub	sp, #20
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	785b      	ldrb	r3, [r3, #1]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d128      	bne.n	80076e8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	015a      	lsls	r2, r3, #5
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	4413      	add	r3, r2
 800769e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	0151      	lsls	r1, r2, #5
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	440a      	add	r2, r1
 80076ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	78db      	ldrb	r3, [r3, #3]
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d003      	beq.n	80076c6 <USB_EPClearStall+0x4c>
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	78db      	ldrb	r3, [r3, #3]
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d138      	bne.n	8007738 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	015a      	lsls	r2, r3, #5
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	4413      	add	r3, r2
 80076ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	0151      	lsls	r1, r2, #5
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	440a      	add	r2, r1
 80076dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076e4:	6013      	str	r3, [r2, #0]
 80076e6:	e027      	b.n	8007738 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	015a      	lsls	r2, r3, #5
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	4413      	add	r3, r2
 80076f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	0151      	lsls	r1, r2, #5
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	440a      	add	r2, r1
 80076fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007702:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007706:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	78db      	ldrb	r3, [r3, #3]
 800770c:	2b03      	cmp	r3, #3
 800770e:	d003      	beq.n	8007718 <USB_EPClearStall+0x9e>
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	78db      	ldrb	r3, [r3, #3]
 8007714:	2b02      	cmp	r3, #2
 8007716:	d10f      	bne.n	8007738 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	015a      	lsls	r2, r3, #5
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4413      	add	r3, r2
 8007720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	0151      	lsls	r1, r2, #5
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	440a      	add	r2, r1
 800772e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007736:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3714      	adds	r7, #20
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007746:	b480      	push	{r7}
 8007748:	b085      	sub	sp, #20
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
 800774e:	460b      	mov	r3, r1
 8007750:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007764:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007768:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	78fb      	ldrb	r3, [r7, #3]
 8007774:	011b      	lsls	r3, r3, #4
 8007776:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800777a:	68f9      	ldr	r1, [r7, #12]
 800777c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007780:	4313      	orrs	r3, r2
 8007782:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007792:	b480      	push	{r7}
 8007794:	b085      	sub	sp, #20
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077ac:	f023 0303 	bic.w	r3, r3, #3
 80077b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077c0:	f023 0302 	bic.w	r3, r3, #2
 80077c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077ee:	f023 0303 	bic.w	r3, r3, #3
 80077f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007802:	f043 0302 	orr.w	r3, r3, #2
 8007806:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3714      	adds	r7, #20
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007816:	b480      	push	{r7}
 8007818:	b085      	sub	sp, #20
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	4013      	ands	r3, r2
 800782c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800782e:	68fb      	ldr	r3, [r7, #12]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	4013      	ands	r3, r2
 800785e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	0c1b      	lsrs	r3, r3, #16
}
 8007864:	4618      	mov	r0, r3
 8007866:	3714      	adds	r7, #20
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	4013      	ands	r3, r2
 8007892:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	b29b      	uxth	r3, r3
}
 8007898:	4618      	mov	r0, r3
 800789a:	3714      	adds	r7, #20
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	460b      	mov	r3, r1
 80078ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80078b4:	78fb      	ldrb	r3, [r7, #3]
 80078b6:	015a      	lsls	r2, r3, #5
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ca:	695b      	ldr	r3, [r3, #20]
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	4013      	ands	r3, r2
 80078d0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078d2:	68bb      	ldr	r3, [r7, #8]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	460b      	mov	r3, r1
 80078ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007902:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007904:	78fb      	ldrb	r3, [r7, #3]
 8007906:	f003 030f 	and.w	r3, r3, #15
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	fa22 f303 	lsr.w	r3, r2, r3
 8007910:	01db      	lsls	r3, r3, #7
 8007912:	b2db      	uxtb	r3, r3
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	4313      	orrs	r3, r2
 8007918:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800791a:	78fb      	ldrb	r3, [r7, #3]
 800791c:	015a      	lsls	r2, r3, #5
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	4413      	add	r3, r2
 8007922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	693a      	ldr	r2, [r7, #16]
 800792a:	4013      	ands	r3, r2
 800792c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800792e:	68bb      	ldr	r3, [r7, #8]
}
 8007930:	4618      	mov	r0, r3
 8007932:	371c      	adds	r7, #28
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	695b      	ldr	r3, [r3, #20]
 8007948:	f003 0301 	and.w	r3, r3, #1
}
 800794c:	4618      	mov	r0, r3
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007972:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007976:	f023 0307 	bic.w	r3, r3, #7
 800797a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800798a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800798e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
	...

080079a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b087      	sub	sp, #28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	460b      	mov	r3, r1
 80079aa:	607a      	str	r2, [r7, #4]
 80079ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	333c      	adds	r3, #60	; 0x3c
 80079b6:	3304      	adds	r3, #4
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	4a26      	ldr	r2, [pc, #152]	; (8007a58 <USB_EP0_OutStart+0xb8>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d90a      	bls.n	80079da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079d4:	d101      	bne.n	80079da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80079d6:	2300      	movs	r3, #0
 80079d8:	e037      	b.n	8007a4a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e0:	461a      	mov	r2, r3
 80079e2:	2300      	movs	r3, #0
 80079e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a08:	f043 0318 	orr.w	r3, r3, #24
 8007a0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a1c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007a20:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007a22:	7afb      	ldrb	r3, [r7, #11]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d10f      	bne.n	8007a48 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a2e:	461a      	mov	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	697a      	ldr	r2, [r7, #20]
 8007a3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a42:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007a46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	371c      	adds	r7, #28
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	4f54300a 	.word	0x4f54300a

08007a5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a64:	2300      	movs	r3, #0
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	60fb      	str	r3, [r7, #12]
 8007a6e:	4a13      	ldr	r2, [pc, #76]	; (8007abc <USB_CoreReset+0x60>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d901      	bls.n	8007a78 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e01a      	b.n	8007aae <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	daf3      	bge.n	8007a68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a80:	2300      	movs	r3, #0
 8007a82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	f043 0201 	orr.w	r2, r3, #1
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3301      	adds	r3, #1
 8007a94:	60fb      	str	r3, [r7, #12]
 8007a96:	4a09      	ldr	r2, [pc, #36]	; (8007abc <USB_CoreReset+0x60>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d901      	bls.n	8007aa0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e006      	b.n	8007aae <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d0f1      	beq.n	8007a90 <USB_CoreReset+0x34>

  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3714      	adds	r7, #20
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	00030d40 	.word	0x00030d40

08007ac0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007acc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007ad0:	f002 f9b8 	bl	8009e44 <USBD_static_malloc>
 8007ad4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d105      	bne.n	8007ae8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	e066      	b.n	8007bb6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	7c1b      	ldrb	r3, [r3, #16]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d119      	bne.n	8007b2c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007af8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007afc:	2202      	movs	r2, #2
 8007afe:	2181      	movs	r1, #129	; 0x81
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f002 f87c 	bl	8009bfe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b10:	2202      	movs	r2, #2
 8007b12:	2101      	movs	r1, #1
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f002 f872 	bl	8009bfe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2210      	movs	r2, #16
 8007b26:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007b2a:	e016      	b.n	8007b5a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b2c:	2340      	movs	r3, #64	; 0x40
 8007b2e:	2202      	movs	r2, #2
 8007b30:	2181      	movs	r1, #129	; 0x81
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f002 f863 	bl	8009bfe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b3e:	2340      	movs	r3, #64	; 0x40
 8007b40:	2202      	movs	r2, #2
 8007b42:	2101      	movs	r1, #1
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f002 f85a 	bl	8009bfe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2210      	movs	r2, #16
 8007b56:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007b5a:	2308      	movs	r3, #8
 8007b5c:	2203      	movs	r2, #3
 8007b5e:	2182      	movs	r1, #130	; 0x82
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f002 f84c 	bl	8009bfe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	7c1b      	ldrb	r3, [r3, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d109      	bne.n	8007ba4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b9a:	2101      	movs	r1, #1
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f002 f91d 	bl	8009ddc <USBD_LL_PrepareReceive>
 8007ba2:	e007      	b.n	8007bb4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007baa:	2340      	movs	r3, #64	; 0x40
 8007bac:	2101      	movs	r1, #1
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f002 f914 	bl	8009ddc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b082      	sub	sp, #8
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007bca:	2181      	movs	r1, #129	; 0x81
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f002 f83c 	bl	8009c4a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007bd8:	2101      	movs	r1, #1
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f002 f835 	bl	8009c4a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007be8:	2182      	movs	r1, #130	; 0x82
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f002 f82d 	bl	8009c4a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00e      	beq.n	8007c28 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f002 f920 	bl	8009e60 <USBD_static_free>
    pdev->pClassData = NULL;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
	...

08007c34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c44:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007c46:	2300      	movs	r3, #0
 8007c48:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d101      	bne.n	8007c5c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e0af      	b.n	8007dbc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d03f      	beq.n	8007ce8 <USBD_CDC_Setup+0xb4>
 8007c68:	2b20      	cmp	r3, #32
 8007c6a:	f040 809f 	bne.w	8007dac <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	88db      	ldrh	r3, [r3, #6]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d02e      	beq.n	8007cd4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	b25b      	sxtb	r3, r3
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	da16      	bge.n	8007cae <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	683a      	ldr	r2, [r7, #0]
 8007c8a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007c8c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	88d2      	ldrh	r2, [r2, #6]
 8007c92:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	88db      	ldrh	r3, [r3, #6]
 8007c98:	2b07      	cmp	r3, #7
 8007c9a:	bf28      	it	cs
 8007c9c:	2307      	movcs	r3, #7
 8007c9e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	89fa      	ldrh	r2, [r7, #14]
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f001 fae9 	bl	800927e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007cac:	e085      	b.n	8007dba <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	785a      	ldrb	r2, [r3, #1]
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	88db      	ldrh	r3, [r3, #6]
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007cc4:	6939      	ldr	r1, [r7, #16]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	88db      	ldrh	r3, [r3, #6]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f001 fb02 	bl	80092d6 <USBD_CtlPrepareRx>
      break;
 8007cd2:	e072      	b.n	8007dba <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	7850      	ldrb	r0, [r2, #1]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	6839      	ldr	r1, [r7, #0]
 8007ce4:	4798      	blx	r3
      break;
 8007ce6:	e068      	b.n	8007dba <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	785b      	ldrb	r3, [r3, #1]
 8007cec:	2b0b      	cmp	r3, #11
 8007cee:	d852      	bhi.n	8007d96 <USBD_CDC_Setup+0x162>
 8007cf0:	a201      	add	r2, pc, #4	; (adr r2, 8007cf8 <USBD_CDC_Setup+0xc4>)
 8007cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf6:	bf00      	nop
 8007cf8:	08007d29 	.word	0x08007d29
 8007cfc:	08007da5 	.word	0x08007da5
 8007d00:	08007d97 	.word	0x08007d97
 8007d04:	08007d97 	.word	0x08007d97
 8007d08:	08007d97 	.word	0x08007d97
 8007d0c:	08007d97 	.word	0x08007d97
 8007d10:	08007d97 	.word	0x08007d97
 8007d14:	08007d97 	.word	0x08007d97
 8007d18:	08007d97 	.word	0x08007d97
 8007d1c:	08007d97 	.word	0x08007d97
 8007d20:	08007d53 	.word	0x08007d53
 8007d24:	08007d7d 	.word	0x08007d7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	2b03      	cmp	r3, #3
 8007d32:	d107      	bne.n	8007d44 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007d34:	f107 030a 	add.w	r3, r7, #10
 8007d38:	2202      	movs	r2, #2
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f001 fa9e 	bl	800927e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d42:	e032      	b.n	8007daa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f001 fa28 	bl	800919c <USBD_CtlError>
            ret = USBD_FAIL;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	75fb      	strb	r3, [r7, #23]
          break;
 8007d50:	e02b      	b.n	8007daa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	2b03      	cmp	r3, #3
 8007d5c:	d107      	bne.n	8007d6e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007d5e:	f107 030d 	add.w	r3, r7, #13
 8007d62:	2201      	movs	r2, #1
 8007d64:	4619      	mov	r1, r3
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f001 fa89 	bl	800927e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d6c:	e01d      	b.n	8007daa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007d6e:	6839      	ldr	r1, [r7, #0]
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f001 fa13 	bl	800919c <USBD_CtlError>
            ret = USBD_FAIL;
 8007d76:	2303      	movs	r3, #3
 8007d78:	75fb      	strb	r3, [r7, #23]
          break;
 8007d7a:	e016      	b.n	8007daa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	2b03      	cmp	r3, #3
 8007d86:	d00f      	beq.n	8007da8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007d88:	6839      	ldr	r1, [r7, #0]
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f001 fa06 	bl	800919c <USBD_CtlError>
            ret = USBD_FAIL;
 8007d90:	2303      	movs	r3, #3
 8007d92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007d94:	e008      	b.n	8007da8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007d96:	6839      	ldr	r1, [r7, #0]
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f001 f9ff 	bl	800919c <USBD_CtlError>
          ret = USBD_FAIL;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	75fb      	strb	r3, [r7, #23]
          break;
 8007da2:	e002      	b.n	8007daa <USBD_CDC_Setup+0x176>
          break;
 8007da4:	bf00      	nop
 8007da6:	e008      	b.n	8007dba <USBD_CDC_Setup+0x186>
          break;
 8007da8:	bf00      	nop
      }
      break;
 8007daa:	e006      	b.n	8007dba <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f001 f9f4 	bl	800919c <USBD_CtlError>
      ret = USBD_FAIL;
 8007db4:	2303      	movs	r3, #3
 8007db6:	75fb      	strb	r3, [r7, #23]
      break;
 8007db8:	bf00      	nop
  }

  return (uint8_t)ret;
 8007dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3718      	adds	r7, #24
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	460b      	mov	r3, r1
 8007dce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007dd6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d101      	bne.n	8007de6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e04f      	b.n	8007e86 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007dee:	78fa      	ldrb	r2, [r7, #3]
 8007df0:	6879      	ldr	r1, [r7, #4]
 8007df2:	4613      	mov	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4413      	add	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	440b      	add	r3, r1
 8007dfc:	3318      	adds	r3, #24
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d029      	beq.n	8007e58 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007e04:	78fa      	ldrb	r2, [r7, #3]
 8007e06:	6879      	ldr	r1, [r7, #4]
 8007e08:	4613      	mov	r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	4413      	add	r3, r2
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	440b      	add	r3, r1
 8007e12:	3318      	adds	r3, #24
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	78f9      	ldrb	r1, [r7, #3]
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	00db      	lsls	r3, r3, #3
 8007e1e:	1a5b      	subs	r3, r3, r1
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4403      	add	r3, r0
 8007e24:	3344      	adds	r3, #68	; 0x44
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	fbb2 f1f3 	udiv	r1, r2, r3
 8007e2c:	fb03 f301 	mul.w	r3, r3, r1
 8007e30:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d110      	bne.n	8007e58 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007e36:	78fa      	ldrb	r2, [r7, #3]
 8007e38:	6879      	ldr	r1, [r7, #4]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4413      	add	r3, r2
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	440b      	add	r3, r1
 8007e44:	3318      	adds	r3, #24
 8007e46:	2200      	movs	r2, #0
 8007e48:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007e4a:	78f9      	ldrb	r1, [r7, #3]
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	2200      	movs	r2, #0
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f001 ffa2 	bl	8009d9a <USBD_LL_Transmit>
 8007e56:	e015      	b.n	8007e84 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00b      	beq.n	8007e84 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007e80:	78fa      	ldrb	r2, [r7, #3]
 8007e82:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b084      	sub	sp, #16
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	460b      	mov	r3, r1
 8007e98:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ea0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e015      	b.n	8007edc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007eb0:	78fb      	ldrb	r3, [r7, #3]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f001 ffb2 	bl	8009e1e <USBD_LL_GetRxDataSize>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007ed6:	4611      	mov	r1, r2
 8007ed8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ef2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e01b      	b.n	8007f36 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d015      	beq.n	8007f34 <USBD_CDC_EP0_RxReady+0x50>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007f0e:	2bff      	cmp	r3, #255	; 0xff
 8007f10:	d010      	beq.n	8007f34 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007f20:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f28:	b292      	uxth	r2, r2
 8007f2a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	22ff      	movs	r2, #255	; 0xff
 8007f30:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2243      	movs	r2, #67	; 0x43
 8007f4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007f4e:	4b03      	ldr	r3, [pc, #12]	; (8007f5c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr
 8007f5c:	2000009c 	.word	0x2000009c

08007f60 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2243      	movs	r2, #67	; 0x43
 8007f6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007f6e:	4b03      	ldr	r3, [pc, #12]	; (8007f7c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	20000058 	.word	0x20000058

08007f80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2243      	movs	r2, #67	; 0x43
 8007f8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007f8e:	4b03      	ldr	r3, [pc, #12]	; (8007f9c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr
 8007f9c:	200000e0 	.word	0x200000e0

08007fa0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	220a      	movs	r2, #10
 8007fac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007fae:	4b03      	ldr	r3, [pc, #12]	; (8007fbc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	20000014 	.word	0x20000014

08007fc0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d101      	bne.n	8007fd4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e004      	b.n	8007fde <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	683a      	ldr	r2, [r7, #0]
 8007fd8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	370c      	adds	r7, #12
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b087      	sub	sp, #28
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	60f8      	str	r0, [r7, #12]
 8007ff2:	60b9      	str	r1, [r7, #8]
 8007ff4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ffc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d101      	bne.n	8008008 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008004:	2303      	movs	r3, #3
 8008006:	e008      	b.n	800801a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	68ba      	ldr	r2, [r7, #8]
 800800c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	371c      	adds	r7, #28
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008026:	b480      	push	{r7}
 8008028:	b085      	sub	sp, #20
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
 800802e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008036:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d101      	bne.n	8008042 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800803e:	2303      	movs	r3, #3
 8008040:	e004      	b.n	800804c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	683a      	ldr	r2, [r7, #0]
 8008046:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3714      	adds	r7, #20
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008066:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800806e:	2b00      	cmp	r3, #0
 8008070:	d101      	bne.n	8008076 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008072:	2303      	movs	r3, #3
 8008074:	e016      	b.n	80080a4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	7c1b      	ldrb	r3, [r3, #16]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d109      	bne.n	8008092 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008084:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008088:	2101      	movs	r1, #1
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f001 fea6 	bl	8009ddc <USBD_LL_PrepareReceive>
 8008090:	e007      	b.n	80080a2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008098:	2340      	movs	r3, #64	; 0x40
 800809a:	2101      	movs	r1, #1
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f001 fe9d 	bl	8009ddc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b086      	sub	sp, #24
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	4613      	mov	r3, r2
 80080b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d101      	bne.n	80080c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e01f      	b.n	8008104 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d003      	beq.n	80080ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2201      	movs	r2, #1
 80080ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	79fa      	ldrb	r2, [r7, #7]
 80080f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f001 fd19 	bl	8009b30 <USBD_LL_Init>
 80080fe:	4603      	mov	r3, r0
 8008100:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008102:	7dfb      	ldrb	r3, [r7, #23]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3718      	adds	r7, #24
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008116:	2300      	movs	r3, #0
 8008118:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d101      	bne.n	8008124 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008120:	2303      	movs	r3, #3
 8008122:	e016      	b.n	8008152 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00b      	beq.n	8008150 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800813e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008140:	f107 020e 	add.w	r2, r7, #14
 8008144:	4610      	mov	r0, r2
 8008146:	4798      	blx	r3
 8008148:	4602      	mov	r2, r0
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b082      	sub	sp, #8
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f001 fd30 	bl	8009bc8 <USBD_LL_Start>
 8008168:	4603      	mov	r3, r0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008172:	b480      	push	{r7}
 8008174:	b083      	sub	sp, #12
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	460b      	mov	r3, r1
 8008192:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008194:	2303      	movs	r3, #3
 8008196:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d009      	beq.n	80081b6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	78fa      	ldrb	r2, [r7, #3]
 80081ac:	4611      	mov	r1, r2
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	4798      	blx	r3
 80081b2:	4603      	mov	r3, r0
 80081b4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80081b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	460b      	mov	r3, r1
 80081ca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d007      	beq.n	80081e6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	78fa      	ldrb	r2, [r7, #3]
 80081e0:	4611      	mov	r1, r2
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	4798      	blx	r3
  }

  return USBD_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008200:	6839      	ldr	r1, [r7, #0]
 8008202:	4618      	mov	r0, r3
 8008204:	f000 ff90 	bl	8009128 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008216:	461a      	mov	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008224:	f003 031f 	and.w	r3, r3, #31
 8008228:	2b02      	cmp	r3, #2
 800822a:	d01a      	beq.n	8008262 <USBD_LL_SetupStage+0x72>
 800822c:	2b02      	cmp	r3, #2
 800822e:	d822      	bhi.n	8008276 <USBD_LL_SetupStage+0x86>
 8008230:	2b00      	cmp	r3, #0
 8008232:	d002      	beq.n	800823a <USBD_LL_SetupStage+0x4a>
 8008234:	2b01      	cmp	r3, #1
 8008236:	d00a      	beq.n	800824e <USBD_LL_SetupStage+0x5e>
 8008238:	e01d      	b.n	8008276 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008240:	4619      	mov	r1, r3
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fa62 	bl	800870c <USBD_StdDevReq>
 8008248:	4603      	mov	r3, r0
 800824a:	73fb      	strb	r3, [r7, #15]
      break;
 800824c:	e020      	b.n	8008290 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008254:	4619      	mov	r1, r3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fac6 	bl	80087e8 <USBD_StdItfReq>
 800825c:	4603      	mov	r3, r0
 800825e:	73fb      	strb	r3, [r7, #15]
      break;
 8008260:	e016      	b.n	8008290 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008268:	4619      	mov	r1, r3
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fb05 	bl	800887a <USBD_StdEPReq>
 8008270:	4603      	mov	r3, r0
 8008272:	73fb      	strb	r3, [r7, #15]
      break;
 8008274:	e00c      	b.n	8008290 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800827c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008280:	b2db      	uxtb	r3, r3
 8008282:	4619      	mov	r1, r3
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f001 fcff 	bl	8009c88 <USBD_LL_StallEP>
 800828a:	4603      	mov	r3, r0
 800828c:	73fb      	strb	r3, [r7, #15]
      break;
 800828e:	bf00      	nop
  }

  return ret;
 8008290:	7bfb      	ldrb	r3, [r7, #15]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b086      	sub	sp, #24
 800829e:	af00      	add	r7, sp, #0
 80082a0:	60f8      	str	r0, [r7, #12]
 80082a2:	460b      	mov	r3, r1
 80082a4:	607a      	str	r2, [r7, #4]
 80082a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80082a8:	7afb      	ldrb	r3, [r7, #11]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d138      	bne.n	8008320 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80082b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082bc:	2b03      	cmp	r3, #3
 80082be:	d14a      	bne.n	8008356 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	689a      	ldr	r2, [r3, #8]
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d913      	bls.n	80082f4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	689a      	ldr	r2, [r3, #8]
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	1ad2      	subs	r2, r2, r3
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	68da      	ldr	r2, [r3, #12]
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	4293      	cmp	r3, r2
 80082e4:	bf28      	it	cs
 80082e6:	4613      	movcs	r3, r2
 80082e8:	461a      	mov	r2, r3
 80082ea:	6879      	ldr	r1, [r7, #4]
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f001 f80f 	bl	8009310 <USBD_CtlContinueRx>
 80082f2:	e030      	b.n	8008356 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	2b03      	cmp	r3, #3
 80082fe:	d10b      	bne.n	8008318 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d005      	beq.n	8008318 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f001 f80a 	bl	8009332 <USBD_CtlSendStatus>
 800831e:	e01a      	b.n	8008356 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008326:	b2db      	uxtb	r3, r3
 8008328:	2b03      	cmp	r3, #3
 800832a:	d114      	bne.n	8008356 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00e      	beq.n	8008356 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	7afa      	ldrb	r2, [r7, #11]
 8008342:	4611      	mov	r1, r2
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	4798      	blx	r3
 8008348:	4603      	mov	r3, r0
 800834a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800834c:	7dfb      	ldrb	r3, [r7, #23]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d001      	beq.n	8008356 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008352:	7dfb      	ldrb	r3, [r7, #23]
 8008354:	e000      	b.n	8008358 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3718      	adds	r7, #24
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	460b      	mov	r3, r1
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800836e:	7afb      	ldrb	r3, [r7, #11]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d16b      	bne.n	800844c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	3314      	adds	r3, #20
 8008378:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008380:	2b02      	cmp	r3, #2
 8008382:	d156      	bne.n	8008432 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	689a      	ldr	r2, [r3, #8]
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	429a      	cmp	r2, r3
 800838e:	d914      	bls.n	80083ba <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	689a      	ldr	r2, [r3, #8]
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	1ad2      	subs	r2, r2, r3
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	461a      	mov	r2, r3
 80083a4:	6879      	ldr	r1, [r7, #4]
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f000 ff84 	bl	80092b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083ac:	2300      	movs	r3, #0
 80083ae:	2200      	movs	r2, #0
 80083b0:	2100      	movs	r1, #0
 80083b2:	68f8      	ldr	r0, [r7, #12]
 80083b4:	f001 fd12 	bl	8009ddc <USBD_LL_PrepareReceive>
 80083b8:	e03b      	b.n	8008432 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	68da      	ldr	r2, [r3, #12]
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d11c      	bne.n	8008400 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	685a      	ldr	r2, [r3, #4]
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d316      	bcc.n	8008400 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	685a      	ldr	r2, [r3, #4]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80083dc:	429a      	cmp	r2, r3
 80083de:	d20f      	bcs.n	8008400 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80083e0:	2200      	movs	r2, #0
 80083e2:	2100      	movs	r1, #0
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f000 ff65 	bl	80092b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083f2:	2300      	movs	r3, #0
 80083f4:	2200      	movs	r2, #0
 80083f6:	2100      	movs	r1, #0
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f001 fcef 	bl	8009ddc <USBD_LL_PrepareReceive>
 80083fe:	e018      	b.n	8008432 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008406:	b2db      	uxtb	r3, r3
 8008408:	2b03      	cmp	r3, #3
 800840a:	d10b      	bne.n	8008424 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d005      	beq.n	8008424 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008424:	2180      	movs	r1, #128	; 0x80
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f001 fc2e 	bl	8009c88 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f000 ff93 	bl	8009358 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008438:	2b01      	cmp	r3, #1
 800843a:	d122      	bne.n	8008482 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f7ff fe98 	bl	8008172 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800844a:	e01a      	b.n	8008482 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008452:	b2db      	uxtb	r3, r3
 8008454:	2b03      	cmp	r3, #3
 8008456:	d114      	bne.n	8008482 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800845e:	695b      	ldr	r3, [r3, #20]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00e      	beq.n	8008482 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800846a:	695b      	ldr	r3, [r3, #20]
 800846c:	7afa      	ldrb	r2, [r7, #11]
 800846e:	4611      	mov	r1, r2
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	4798      	blx	r3
 8008474:	4603      	mov	r3, r0
 8008476:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008478:	7dfb      	ldrb	r3, [r7, #23]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d001      	beq.n	8008482 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800847e:	7dfb      	ldrb	r3, [r7, #23]
 8008480:	e000      	b.n	8008484 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3718      	adds	r7, #24
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d101      	bne.n	80084c0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80084bc:	2303      	movs	r3, #3
 80084be:	e02f      	b.n	8008520 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00f      	beq.n	80084ea <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d009      	beq.n	80084ea <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	6852      	ldr	r2, [r2, #4]
 80084e2:	b2d2      	uxtb	r2, r2
 80084e4:	4611      	mov	r1, r2
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084ea:	2340      	movs	r3, #64	; 0x40
 80084ec:	2200      	movs	r2, #0
 80084ee:	2100      	movs	r1, #0
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f001 fb84 	bl	8009bfe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2240      	movs	r2, #64	; 0x40
 8008502:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008506:	2340      	movs	r3, #64	; 0x40
 8008508:	2200      	movs	r2, #0
 800850a:	2180      	movs	r1, #128	; 0x80
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f001 fb76 	bl	8009bfe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2201      	movs	r2, #1
 8008516:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2240      	movs	r2, #64	; 0x40
 800851c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3708      	adds	r7, #8
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	460b      	mov	r3, r1
 8008532:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	78fa      	ldrb	r2, [r7, #3]
 8008538:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008556:	b2da      	uxtb	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2204      	movs	r2, #4
 8008562:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008582:	b2db      	uxtb	r3, r3
 8008584:	2b04      	cmp	r3, #4
 8008586:	d106      	bne.n	8008596 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800858e:	b2da      	uxtb	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d101      	bne.n	80085ba <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80085b6:	2303      	movs	r3, #3
 80085b8:	e012      	b.n	80085e0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b03      	cmp	r3, #3
 80085c4:	d10b      	bne.n	80085de <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085cc:	69db      	ldr	r3, [r3, #28]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d005      	beq.n	80085de <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085d8:	69db      	ldr	r3, [r3, #28]
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	460b      	mov	r3, r1
 80085f2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d101      	bne.n	8008602 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80085fe:	2303      	movs	r3, #3
 8008600:	e014      	b.n	800862c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b03      	cmp	r3, #3
 800860c:	d10d      	bne.n	800862a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d007      	beq.n	800862a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	78fa      	ldrb	r2, [r7, #3]
 8008624:	4611      	mov	r1, r2
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3708      	adds	r7, #8
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	460b      	mov	r3, r1
 800863e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008646:	2b00      	cmp	r3, #0
 8008648:	d101      	bne.n	800864e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800864a:	2303      	movs	r3, #3
 800864c:	e014      	b.n	8008678 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b03      	cmp	r3, #3
 8008658:	d10d      	bne.n	8008676 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008662:	2b00      	cmp	r3, #0
 8008664:	d007      	beq.n	8008676 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800866c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866e:	78fa      	ldrb	r2, [r7, #3]
 8008670:	4611      	mov	r1, r2
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	370c      	adds	r7, #12
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr

08008696 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b082      	sub	sp, #8
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2201      	movs	r2, #1
 80086a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d009      	beq.n	80086c4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	6852      	ldr	r2, [r2, #4]
 80086bc:	b2d2      	uxtb	r2, r2
 80086be:	4611      	mov	r1, r2
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	4798      	blx	r3
  }

  return USBD_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b087      	sub	sp, #28
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	3301      	adds	r3, #1
 80086e4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80086ec:	8a3b      	ldrh	r3, [r7, #16]
 80086ee:	021b      	lsls	r3, r3, #8
 80086f0:	b21a      	sxth	r2, r3
 80086f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	b21b      	sxth	r3, r3
 80086fa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80086fc:	89fb      	ldrh	r3, [r7, #14]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	371c      	adds	r7, #28
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
	...

0800870c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008716:	2300      	movs	r3, #0
 8008718:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008722:	2b40      	cmp	r3, #64	; 0x40
 8008724:	d005      	beq.n	8008732 <USBD_StdDevReq+0x26>
 8008726:	2b40      	cmp	r3, #64	; 0x40
 8008728:	d853      	bhi.n	80087d2 <USBD_StdDevReq+0xc6>
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00b      	beq.n	8008746 <USBD_StdDevReq+0x3a>
 800872e:	2b20      	cmp	r3, #32
 8008730:	d14f      	bne.n	80087d2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	6839      	ldr	r1, [r7, #0]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	4798      	blx	r3
 8008740:	4603      	mov	r3, r0
 8008742:	73fb      	strb	r3, [r7, #15]
      break;
 8008744:	e04a      	b.n	80087dc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	785b      	ldrb	r3, [r3, #1]
 800874a:	2b09      	cmp	r3, #9
 800874c:	d83b      	bhi.n	80087c6 <USBD_StdDevReq+0xba>
 800874e:	a201      	add	r2, pc, #4	; (adr r2, 8008754 <USBD_StdDevReq+0x48>)
 8008750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008754:	080087a9 	.word	0x080087a9
 8008758:	080087bd 	.word	0x080087bd
 800875c:	080087c7 	.word	0x080087c7
 8008760:	080087b3 	.word	0x080087b3
 8008764:	080087c7 	.word	0x080087c7
 8008768:	08008787 	.word	0x08008787
 800876c:	0800877d 	.word	0x0800877d
 8008770:	080087c7 	.word	0x080087c7
 8008774:	0800879f 	.word	0x0800879f
 8008778:	08008791 	.word	0x08008791
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800877c:	6839      	ldr	r1, [r7, #0]
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f9de 	bl	8008b40 <USBD_GetDescriptor>
          break;
 8008784:	e024      	b.n	80087d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008786:	6839      	ldr	r1, [r7, #0]
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fb43 	bl	8008e14 <USBD_SetAddress>
          break;
 800878e:	e01f      	b.n	80087d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008790:	6839      	ldr	r1, [r7, #0]
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fb82 	bl	8008e9c <USBD_SetConfig>
 8008798:	4603      	mov	r3, r0
 800879a:	73fb      	strb	r3, [r7, #15]
          break;
 800879c:	e018      	b.n	80087d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800879e:	6839      	ldr	r1, [r7, #0]
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 fc21 	bl	8008fe8 <USBD_GetConfig>
          break;
 80087a6:	e013      	b.n	80087d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fc52 	bl	8009054 <USBD_GetStatus>
          break;
 80087b0:	e00e      	b.n	80087d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80087b2:	6839      	ldr	r1, [r7, #0]
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 fc81 	bl	80090bc <USBD_SetFeature>
          break;
 80087ba:	e009      	b.n	80087d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80087bc:	6839      	ldr	r1, [r7, #0]
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fc90 	bl	80090e4 <USBD_ClrFeature>
          break;
 80087c4:	e004      	b.n	80087d0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80087c6:	6839      	ldr	r1, [r7, #0]
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 fce7 	bl	800919c <USBD_CtlError>
          break;
 80087ce:	bf00      	nop
      }
      break;
 80087d0:	e004      	b.n	80087dc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80087d2:	6839      	ldr	r1, [r7, #0]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fce1 	bl	800919c <USBD_CtlError>
      break;
 80087da:	bf00      	nop
  }

  return ret;
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop

080087e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087f2:	2300      	movs	r3, #0
 80087f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087fe:	2b40      	cmp	r3, #64	; 0x40
 8008800:	d005      	beq.n	800880e <USBD_StdItfReq+0x26>
 8008802:	2b40      	cmp	r3, #64	; 0x40
 8008804:	d82f      	bhi.n	8008866 <USBD_StdItfReq+0x7e>
 8008806:	2b00      	cmp	r3, #0
 8008808:	d001      	beq.n	800880e <USBD_StdItfReq+0x26>
 800880a:	2b20      	cmp	r3, #32
 800880c:	d12b      	bne.n	8008866 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008814:	b2db      	uxtb	r3, r3
 8008816:	3b01      	subs	r3, #1
 8008818:	2b02      	cmp	r3, #2
 800881a:	d81d      	bhi.n	8008858 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	889b      	ldrh	r3, [r3, #4]
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b01      	cmp	r3, #1
 8008824:	d813      	bhi.n	800884e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	6839      	ldr	r1, [r7, #0]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	4798      	blx	r3
 8008834:	4603      	mov	r3, r0
 8008836:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	88db      	ldrh	r3, [r3, #6]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d110      	bne.n	8008862 <USBD_StdItfReq+0x7a>
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10d      	bne.n	8008862 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fd73 	bl	8009332 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800884c:	e009      	b.n	8008862 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fca3 	bl	800919c <USBD_CtlError>
          break;
 8008856:	e004      	b.n	8008862 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008858:	6839      	ldr	r1, [r7, #0]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fc9e 	bl	800919c <USBD_CtlError>
          break;
 8008860:	e000      	b.n	8008864 <USBD_StdItfReq+0x7c>
          break;
 8008862:	bf00      	nop
      }
      break;
 8008864:	e004      	b.n	8008870 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008866:	6839      	ldr	r1, [r7, #0]
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 fc97 	bl	800919c <USBD_CtlError>
      break;
 800886e:	bf00      	nop
  }

  return ret;
 8008870:	7bfb      	ldrb	r3, [r7, #15]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b084      	sub	sp, #16
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008884:	2300      	movs	r3, #0
 8008886:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	889b      	ldrh	r3, [r3, #4]
 800888c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008896:	2b40      	cmp	r3, #64	; 0x40
 8008898:	d007      	beq.n	80088aa <USBD_StdEPReq+0x30>
 800889a:	2b40      	cmp	r3, #64	; 0x40
 800889c:	f200 8145 	bhi.w	8008b2a <USBD_StdEPReq+0x2b0>
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00c      	beq.n	80088be <USBD_StdEPReq+0x44>
 80088a4:	2b20      	cmp	r3, #32
 80088a6:	f040 8140 	bne.w	8008b2a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	6839      	ldr	r1, [r7, #0]
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	4798      	blx	r3
 80088b8:	4603      	mov	r3, r0
 80088ba:	73fb      	strb	r3, [r7, #15]
      break;
 80088bc:	e13a      	b.n	8008b34 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	785b      	ldrb	r3, [r3, #1]
 80088c2:	2b03      	cmp	r3, #3
 80088c4:	d007      	beq.n	80088d6 <USBD_StdEPReq+0x5c>
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	f300 8129 	bgt.w	8008b1e <USBD_StdEPReq+0x2a4>
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d07f      	beq.n	80089d0 <USBD_StdEPReq+0x156>
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d03c      	beq.n	800894e <USBD_StdEPReq+0xd4>
 80088d4:	e123      	b.n	8008b1e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d002      	beq.n	80088e8 <USBD_StdEPReq+0x6e>
 80088e2:	2b03      	cmp	r3, #3
 80088e4:	d016      	beq.n	8008914 <USBD_StdEPReq+0x9a>
 80088e6:	e02c      	b.n	8008942 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088e8:	7bbb      	ldrb	r3, [r7, #14]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00d      	beq.n	800890a <USBD_StdEPReq+0x90>
 80088ee:	7bbb      	ldrb	r3, [r7, #14]
 80088f0:	2b80      	cmp	r3, #128	; 0x80
 80088f2:	d00a      	beq.n	800890a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80088f4:	7bbb      	ldrb	r3, [r7, #14]
 80088f6:	4619      	mov	r1, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f001 f9c5 	bl	8009c88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80088fe:	2180      	movs	r1, #128	; 0x80
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f001 f9c1 	bl	8009c88 <USBD_LL_StallEP>
 8008906:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008908:	e020      	b.n	800894c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 fc45 	bl	800919c <USBD_CtlError>
              break;
 8008912:	e01b      	b.n	800894c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	885b      	ldrh	r3, [r3, #2]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d10e      	bne.n	800893a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800891c:	7bbb      	ldrb	r3, [r7, #14]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00b      	beq.n	800893a <USBD_StdEPReq+0xc0>
 8008922:	7bbb      	ldrb	r3, [r7, #14]
 8008924:	2b80      	cmp	r3, #128	; 0x80
 8008926:	d008      	beq.n	800893a <USBD_StdEPReq+0xc0>
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	88db      	ldrh	r3, [r3, #6]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d104      	bne.n	800893a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008930:	7bbb      	ldrb	r3, [r7, #14]
 8008932:	4619      	mov	r1, r3
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f001 f9a7 	bl	8009c88 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fcf9 	bl	8009332 <USBD_CtlSendStatus>

              break;
 8008940:	e004      	b.n	800894c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008942:	6839      	ldr	r1, [r7, #0]
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fc29 	bl	800919c <USBD_CtlError>
              break;
 800894a:	bf00      	nop
          }
          break;
 800894c:	e0ec      	b.n	8008b28 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008954:	b2db      	uxtb	r3, r3
 8008956:	2b02      	cmp	r3, #2
 8008958:	d002      	beq.n	8008960 <USBD_StdEPReq+0xe6>
 800895a:	2b03      	cmp	r3, #3
 800895c:	d016      	beq.n	800898c <USBD_StdEPReq+0x112>
 800895e:	e030      	b.n	80089c2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008960:	7bbb      	ldrb	r3, [r7, #14]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00d      	beq.n	8008982 <USBD_StdEPReq+0x108>
 8008966:	7bbb      	ldrb	r3, [r7, #14]
 8008968:	2b80      	cmp	r3, #128	; 0x80
 800896a:	d00a      	beq.n	8008982 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800896c:	7bbb      	ldrb	r3, [r7, #14]
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f001 f989 	bl	8009c88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008976:	2180      	movs	r1, #128	; 0x80
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f001 f985 	bl	8009c88 <USBD_LL_StallEP>
 800897e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008980:	e025      	b.n	80089ce <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008982:	6839      	ldr	r1, [r7, #0]
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 fc09 	bl	800919c <USBD_CtlError>
              break;
 800898a:	e020      	b.n	80089ce <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	885b      	ldrh	r3, [r3, #2]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d11b      	bne.n	80089cc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008994:	7bbb      	ldrb	r3, [r7, #14]
 8008996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800899a:	2b00      	cmp	r3, #0
 800899c:	d004      	beq.n	80089a8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800899e:	7bbb      	ldrb	r3, [r7, #14]
 80089a0:	4619      	mov	r1, r3
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f001 f98f 	bl	8009cc6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fcc2 	bl	8009332 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	6839      	ldr	r1, [r7, #0]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	4798      	blx	r3
 80089bc:	4603      	mov	r3, r0
 80089be:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80089c0:	e004      	b.n	80089cc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80089c2:	6839      	ldr	r1, [r7, #0]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 fbe9 	bl	800919c <USBD_CtlError>
              break;
 80089ca:	e000      	b.n	80089ce <USBD_StdEPReq+0x154>
              break;
 80089cc:	bf00      	nop
          }
          break;
 80089ce:	e0ab      	b.n	8008b28 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d002      	beq.n	80089e2 <USBD_StdEPReq+0x168>
 80089dc:	2b03      	cmp	r3, #3
 80089de:	d032      	beq.n	8008a46 <USBD_StdEPReq+0x1cc>
 80089e0:	e097      	b.n	8008b12 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089e2:	7bbb      	ldrb	r3, [r7, #14]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d007      	beq.n	80089f8 <USBD_StdEPReq+0x17e>
 80089e8:	7bbb      	ldrb	r3, [r7, #14]
 80089ea:	2b80      	cmp	r3, #128	; 0x80
 80089ec:	d004      	beq.n	80089f8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 fbd3 	bl	800919c <USBD_CtlError>
                break;
 80089f6:	e091      	b.n	8008b1c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	da0b      	bge.n	8008a18 <USBD_StdEPReq+0x19e>
 8008a00:	7bbb      	ldrb	r3, [r7, #14]
 8008a02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a06:	4613      	mov	r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	4413      	add	r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	3310      	adds	r3, #16
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	4413      	add	r3, r2
 8008a14:	3304      	adds	r3, #4
 8008a16:	e00b      	b.n	8008a30 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a18:	7bbb      	ldrb	r3, [r7, #14]
 8008a1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a1e:	4613      	mov	r3, r2
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	4413      	add	r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	3304      	adds	r3, #4
 8008a30:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	2200      	movs	r2, #0
 8008a36:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 fc1d 	bl	800927e <USBD_CtlSendData>
              break;
 8008a44:	e06a      	b.n	8008b1c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	da11      	bge.n	8008a72 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a4e:	7bbb      	ldrb	r3, [r7, #14]
 8008a50:	f003 020f 	and.w	r2, r3, #15
 8008a54:	6879      	ldr	r1, [r7, #4]
 8008a56:	4613      	mov	r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	4413      	add	r3, r2
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	440b      	add	r3, r1
 8008a60:	3324      	adds	r3, #36	; 0x24
 8008a62:	881b      	ldrh	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d117      	bne.n	8008a98 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fb96 	bl	800919c <USBD_CtlError>
                  break;
 8008a70:	e054      	b.n	8008b1c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a72:	7bbb      	ldrb	r3, [r7, #14]
 8008a74:	f003 020f 	and.w	r2, r3, #15
 8008a78:	6879      	ldr	r1, [r7, #4]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	4413      	add	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	440b      	add	r3, r1
 8008a84:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a88:	881b      	ldrh	r3, [r3, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d104      	bne.n	8008a98 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fb83 	bl	800919c <USBD_CtlError>
                  break;
 8008a96:	e041      	b.n	8008b1c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	da0b      	bge.n	8008ab8 <USBD_StdEPReq+0x23e>
 8008aa0:	7bbb      	ldrb	r3, [r7, #14]
 8008aa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	4413      	add	r3, r2
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	3310      	adds	r3, #16
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	e00b      	b.n	8008ad0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ab8:	7bbb      	ldrb	r3, [r7, #14]
 8008aba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008abe:	4613      	mov	r3, r2
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	4413      	add	r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	4413      	add	r3, r2
 8008ace:	3304      	adds	r3, #4
 8008ad0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ad2:	7bbb      	ldrb	r3, [r7, #14]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d002      	beq.n	8008ade <USBD_StdEPReq+0x264>
 8008ad8:	7bbb      	ldrb	r3, [r7, #14]
 8008ada:	2b80      	cmp	r3, #128	; 0x80
 8008adc:	d103      	bne.n	8008ae6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	601a      	str	r2, [r3, #0]
 8008ae4:	e00e      	b.n	8008b04 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ae6:	7bbb      	ldrb	r3, [r7, #14]
 8008ae8:	4619      	mov	r1, r3
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f001 f90a 	bl	8009d04 <USBD_LL_IsStallEP>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d003      	beq.n	8008afe <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	2201      	movs	r2, #1
 8008afa:	601a      	str	r2, [r3, #0]
 8008afc:	e002      	b.n	8008b04 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	2200      	movs	r2, #0
 8008b02:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	2202      	movs	r2, #2
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fbb7 	bl	800927e <USBD_CtlSendData>
              break;
 8008b10:	e004      	b.n	8008b1c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 fb41 	bl	800919c <USBD_CtlError>
              break;
 8008b1a:	bf00      	nop
          }
          break;
 8008b1c:	e004      	b.n	8008b28 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008b1e:	6839      	ldr	r1, [r7, #0]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fb3b 	bl	800919c <USBD_CtlError>
          break;
 8008b26:	bf00      	nop
      }
      break;
 8008b28:	e004      	b.n	8008b34 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 fb35 	bl	800919c <USBD_CtlError>
      break;
 8008b32:	bf00      	nop
  }

  return ret;
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
	...

08008b40 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b52:	2300      	movs	r3, #0
 8008b54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	885b      	ldrh	r3, [r3, #2]
 8008b5a:	0a1b      	lsrs	r3, r3, #8
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	2b06      	cmp	r3, #6
 8008b62:	f200 8128 	bhi.w	8008db6 <USBD_GetDescriptor+0x276>
 8008b66:	a201      	add	r2, pc, #4	; (adr r2, 8008b6c <USBD_GetDescriptor+0x2c>)
 8008b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6c:	08008b89 	.word	0x08008b89
 8008b70:	08008ba1 	.word	0x08008ba1
 8008b74:	08008be1 	.word	0x08008be1
 8008b78:	08008db7 	.word	0x08008db7
 8008b7c:	08008db7 	.word	0x08008db7
 8008b80:	08008d57 	.word	0x08008d57
 8008b84:	08008d83 	.word	0x08008d83
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	7c12      	ldrb	r2, [r2, #16]
 8008b94:	f107 0108 	add.w	r1, r7, #8
 8008b98:	4610      	mov	r0, r2
 8008b9a:	4798      	blx	r3
 8008b9c:	60f8      	str	r0, [r7, #12]
      break;
 8008b9e:	e112      	b.n	8008dc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	7c1b      	ldrb	r3, [r3, #16]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10d      	bne.n	8008bc4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb0:	f107 0208 	add.w	r2, r7, #8
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	4798      	blx	r3
 8008bb8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	2202      	movs	r2, #2
 8008bc0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008bc2:	e100      	b.n	8008dc6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bcc:	f107 0208 	add.w	r2, r7, #8
 8008bd0:	4610      	mov	r0, r2
 8008bd2:	4798      	blx	r3
 8008bd4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	2202      	movs	r2, #2
 8008bdc:	701a      	strb	r2, [r3, #0]
      break;
 8008bde:	e0f2      	b.n	8008dc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	885b      	ldrh	r3, [r3, #2]
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	2b05      	cmp	r3, #5
 8008be8:	f200 80ac 	bhi.w	8008d44 <USBD_GetDescriptor+0x204>
 8008bec:	a201      	add	r2, pc, #4	; (adr r2, 8008bf4 <USBD_GetDescriptor+0xb4>)
 8008bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf2:	bf00      	nop
 8008bf4:	08008c0d 	.word	0x08008c0d
 8008bf8:	08008c41 	.word	0x08008c41
 8008bfc:	08008c75 	.word	0x08008c75
 8008c00:	08008ca9 	.word	0x08008ca9
 8008c04:	08008cdd 	.word	0x08008cdd
 8008c08:	08008d11 	.word	0x08008d11
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d00b      	beq.n	8008c30 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	7c12      	ldrb	r2, [r2, #16]
 8008c24:	f107 0108 	add.w	r1, r7, #8
 8008c28:	4610      	mov	r0, r2
 8008c2a:	4798      	blx	r3
 8008c2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c2e:	e091      	b.n	8008d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c30:	6839      	ldr	r1, [r7, #0]
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 fab2 	bl	800919c <USBD_CtlError>
            err++;
 8008c38:	7afb      	ldrb	r3, [r7, #11]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c3e:	e089      	b.n	8008d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00b      	beq.n	8008c64 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	7c12      	ldrb	r2, [r2, #16]
 8008c58:	f107 0108 	add.w	r1, r7, #8
 8008c5c:	4610      	mov	r0, r2
 8008c5e:	4798      	blx	r3
 8008c60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c62:	e077      	b.n	8008d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c64:	6839      	ldr	r1, [r7, #0]
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fa98 	bl	800919c <USBD_CtlError>
            err++;
 8008c6c:	7afb      	ldrb	r3, [r7, #11]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	72fb      	strb	r3, [r7, #11]
          break;
 8008c72:	e06f      	b.n	8008d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00b      	beq.n	8008c98 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	7c12      	ldrb	r2, [r2, #16]
 8008c8c:	f107 0108 	add.w	r1, r7, #8
 8008c90:	4610      	mov	r0, r2
 8008c92:	4798      	blx	r3
 8008c94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c96:	e05d      	b.n	8008d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c98:	6839      	ldr	r1, [r7, #0]
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 fa7e 	bl	800919c <USBD_CtlError>
            err++;
 8008ca0:	7afb      	ldrb	r3, [r7, #11]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ca6:	e055      	b.n	8008d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00b      	beq.n	8008ccc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	7c12      	ldrb	r2, [r2, #16]
 8008cc0:	f107 0108 	add.w	r1, r7, #8
 8008cc4:	4610      	mov	r0, r2
 8008cc6:	4798      	blx	r3
 8008cc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cca:	e043      	b.n	8008d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ccc:	6839      	ldr	r1, [r7, #0]
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 fa64 	bl	800919c <USBD_CtlError>
            err++;
 8008cd4:	7afb      	ldrb	r3, [r7, #11]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	72fb      	strb	r3, [r7, #11]
          break;
 8008cda:	e03b      	b.n	8008d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ce2:	695b      	ldr	r3, [r3, #20]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00b      	beq.n	8008d00 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cee:	695b      	ldr	r3, [r3, #20]
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	7c12      	ldrb	r2, [r2, #16]
 8008cf4:	f107 0108 	add.w	r1, r7, #8
 8008cf8:	4610      	mov	r0, r2
 8008cfa:	4798      	blx	r3
 8008cfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cfe:	e029      	b.n	8008d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d00:	6839      	ldr	r1, [r7, #0]
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 fa4a 	bl	800919c <USBD_CtlError>
            err++;
 8008d08:	7afb      	ldrb	r3, [r7, #11]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d0e:	e021      	b.n	8008d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d00b      	beq.n	8008d34 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d22:	699b      	ldr	r3, [r3, #24]
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	7c12      	ldrb	r2, [r2, #16]
 8008d28:	f107 0108 	add.w	r1, r7, #8
 8008d2c:	4610      	mov	r0, r2
 8008d2e:	4798      	blx	r3
 8008d30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d32:	e00f      	b.n	8008d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d34:	6839      	ldr	r1, [r7, #0]
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fa30 	bl	800919c <USBD_CtlError>
            err++;
 8008d3c:	7afb      	ldrb	r3, [r7, #11]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	72fb      	strb	r3, [r7, #11]
          break;
 8008d42:	e007      	b.n	8008d54 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008d44:	6839      	ldr	r1, [r7, #0]
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fa28 	bl	800919c <USBD_CtlError>
          err++;
 8008d4c:	7afb      	ldrb	r3, [r7, #11]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008d52:	bf00      	nop
      }
      break;
 8008d54:	e037      	b.n	8008dc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	7c1b      	ldrb	r3, [r3, #16]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d109      	bne.n	8008d72 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d66:	f107 0208 	add.w	r2, r7, #8
 8008d6a:	4610      	mov	r0, r2
 8008d6c:	4798      	blx	r3
 8008d6e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d70:	e029      	b.n	8008dc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fa11 	bl	800919c <USBD_CtlError>
        err++;
 8008d7a:	7afb      	ldrb	r3, [r7, #11]
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	72fb      	strb	r3, [r7, #11]
      break;
 8008d80:	e021      	b.n	8008dc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	7c1b      	ldrb	r3, [r3, #16]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10d      	bne.n	8008da6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d92:	f107 0208 	add.w	r2, r7, #8
 8008d96:	4610      	mov	r0, r2
 8008d98:	4798      	blx	r3
 8008d9a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	2207      	movs	r2, #7
 8008da2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008da4:	e00f      	b.n	8008dc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008da6:	6839      	ldr	r1, [r7, #0]
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 f9f7 	bl	800919c <USBD_CtlError>
        err++;
 8008dae:	7afb      	ldrb	r3, [r7, #11]
 8008db0:	3301      	adds	r3, #1
 8008db2:	72fb      	strb	r3, [r7, #11]
      break;
 8008db4:	e007      	b.n	8008dc6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008db6:	6839      	ldr	r1, [r7, #0]
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 f9ef 	bl	800919c <USBD_CtlError>
      err++;
 8008dbe:	7afb      	ldrb	r3, [r7, #11]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	72fb      	strb	r3, [r7, #11]
      break;
 8008dc4:	bf00      	nop
  }

  if (err != 0U)
 8008dc6:	7afb      	ldrb	r3, [r7, #11]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d11e      	bne.n	8008e0a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	88db      	ldrh	r3, [r3, #6]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d016      	beq.n	8008e02 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008dd4:	893b      	ldrh	r3, [r7, #8]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00e      	beq.n	8008df8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	88da      	ldrh	r2, [r3, #6]
 8008dde:	893b      	ldrh	r3, [r7, #8]
 8008de0:	4293      	cmp	r3, r2
 8008de2:	bf28      	it	cs
 8008de4:	4613      	movcs	r3, r2
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008dea:	893b      	ldrh	r3, [r7, #8]
 8008dec:	461a      	mov	r2, r3
 8008dee:	68f9      	ldr	r1, [r7, #12]
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 fa44 	bl	800927e <USBD_CtlSendData>
 8008df6:	e009      	b.n	8008e0c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008df8:	6839      	ldr	r1, [r7, #0]
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f9ce 	bl	800919c <USBD_CtlError>
 8008e00:	e004      	b.n	8008e0c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 fa95 	bl	8009332 <USBD_CtlSendStatus>
 8008e08:	e000      	b.n	8008e0c <USBD_GetDescriptor+0x2cc>
    return;
 8008e0a:	bf00      	nop
  }
}
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop

08008e14 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	889b      	ldrh	r3, [r3, #4]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d131      	bne.n	8008e8a <USBD_SetAddress+0x76>
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	88db      	ldrh	r3, [r3, #6]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d12d      	bne.n	8008e8a <USBD_SetAddress+0x76>
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	885b      	ldrh	r3, [r3, #2]
 8008e32:	2b7f      	cmp	r3, #127	; 0x7f
 8008e34:	d829      	bhi.n	8008e8a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	885b      	ldrh	r3, [r3, #2]
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b03      	cmp	r3, #3
 8008e4c:	d104      	bne.n	8008e58 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008e4e:	6839      	ldr	r1, [r7, #0]
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 f9a3 	bl	800919c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e56:	e01d      	b.n	8008e94 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	7bfa      	ldrb	r2, [r7, #15]
 8008e5c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e60:	7bfb      	ldrb	r3, [r7, #15]
 8008e62:	4619      	mov	r1, r3
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 ff79 	bl	8009d5c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 fa61 	bl	8009332 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e70:	7bfb      	ldrb	r3, [r7, #15]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d004      	beq.n	8008e80 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2202      	movs	r2, #2
 8008e7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e7e:	e009      	b.n	8008e94 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e88:	e004      	b.n	8008e94 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e8a:	6839      	ldr	r1, [r7, #0]
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f985 	bl	800919c <USBD_CtlError>
  }
}
 8008e92:	bf00      	nop
 8008e94:	bf00      	nop
 8008e96:	3710      	adds	r7, #16
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	885b      	ldrh	r3, [r3, #2]
 8008eae:	b2da      	uxtb	r2, r3
 8008eb0:	4b4c      	ldr	r3, [pc, #304]	; (8008fe4 <USBD_SetConfig+0x148>)
 8008eb2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008eb4:	4b4b      	ldr	r3, [pc, #300]	; (8008fe4 <USBD_SetConfig+0x148>)
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d905      	bls.n	8008ec8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008ebc:	6839      	ldr	r1, [r7, #0]
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 f96c 	bl	800919c <USBD_CtlError>
    return USBD_FAIL;
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	e088      	b.n	8008fda <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d002      	beq.n	8008eda <USBD_SetConfig+0x3e>
 8008ed4:	2b03      	cmp	r3, #3
 8008ed6:	d025      	beq.n	8008f24 <USBD_SetConfig+0x88>
 8008ed8:	e071      	b.n	8008fbe <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008eda:	4b42      	ldr	r3, [pc, #264]	; (8008fe4 <USBD_SetConfig+0x148>)
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d01c      	beq.n	8008f1c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008ee2:	4b40      	ldr	r3, [pc, #256]	; (8008fe4 <USBD_SetConfig+0x148>)
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008eec:	4b3d      	ldr	r3, [pc, #244]	; (8008fe4 <USBD_SetConfig+0x148>)
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f7ff f948 	bl	8008188 <USBD_SetClassConfig>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008efc:	7bfb      	ldrb	r3, [r7, #15]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d004      	beq.n	8008f0c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008f02:	6839      	ldr	r1, [r7, #0]
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 f949 	bl	800919c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f0a:	e065      	b.n	8008fd8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fa10 	bl	8009332 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2203      	movs	r2, #3
 8008f16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008f1a:	e05d      	b.n	8008fd8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fa08 	bl	8009332 <USBD_CtlSendStatus>
      break;
 8008f22:	e059      	b.n	8008fd8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008f24:	4b2f      	ldr	r3, [pc, #188]	; (8008fe4 <USBD_SetConfig+0x148>)
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d112      	bne.n	8008f52 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2202      	movs	r2, #2
 8008f30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008f34:	4b2b      	ldr	r3, [pc, #172]	; (8008fe4 <USBD_SetConfig+0x148>)
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	461a      	mov	r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f3e:	4b29      	ldr	r3, [pc, #164]	; (8008fe4 <USBD_SetConfig+0x148>)
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	4619      	mov	r1, r3
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7ff f93b 	bl	80081c0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f9f1 	bl	8009332 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f50:	e042      	b.n	8008fd8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008f52:	4b24      	ldr	r3, [pc, #144]	; (8008fe4 <USBD_SetConfig+0x148>)
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	461a      	mov	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d02a      	beq.n	8008fb6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	4619      	mov	r1, r3
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f7ff f929 	bl	80081c0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008f6e:	4b1d      	ldr	r3, [pc, #116]	; (8008fe4 <USBD_SetConfig+0x148>)
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	461a      	mov	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f78:	4b1a      	ldr	r3, [pc, #104]	; (8008fe4 <USBD_SetConfig+0x148>)
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f7ff f902 	bl	8008188 <USBD_SetClassConfig>
 8008f84:	4603      	mov	r3, r0
 8008f86:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008f88:	7bfb      	ldrb	r3, [r7, #15]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00f      	beq.n	8008fae <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008f8e:	6839      	ldr	r1, [r7, #0]
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f903 	bl	800919c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7ff f90e 	bl	80081c0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008fac:	e014      	b.n	8008fd8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f9bf 	bl	8009332 <USBD_CtlSendStatus>
      break;
 8008fb4:	e010      	b.n	8008fd8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f9bb 	bl	8009332 <USBD_CtlSendStatus>
      break;
 8008fbc:	e00c      	b.n	8008fd8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008fbe:	6839      	ldr	r1, [r7, #0]
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 f8eb 	bl	800919c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008fc6:	4b07      	ldr	r3, [pc, #28]	; (8008fe4 <USBD_SetConfig+0x148>)
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	4619      	mov	r1, r3
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f7ff f8f7 	bl	80081c0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008fd2:	2303      	movs	r3, #3
 8008fd4:	73fb      	strb	r3, [r7, #15]
      break;
 8008fd6:	bf00      	nop
  }

  return ret;
 8008fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	20000618 	.word	0x20000618

08008fe8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	88db      	ldrh	r3, [r3, #6]
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d004      	beq.n	8009004 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f8cd 	bl	800919c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009002:	e023      	b.n	800904c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800900a:	b2db      	uxtb	r3, r3
 800900c:	2b02      	cmp	r3, #2
 800900e:	dc02      	bgt.n	8009016 <USBD_GetConfig+0x2e>
 8009010:	2b00      	cmp	r3, #0
 8009012:	dc03      	bgt.n	800901c <USBD_GetConfig+0x34>
 8009014:	e015      	b.n	8009042 <USBD_GetConfig+0x5a>
 8009016:	2b03      	cmp	r3, #3
 8009018:	d00b      	beq.n	8009032 <USBD_GetConfig+0x4a>
 800901a:	e012      	b.n	8009042 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	3308      	adds	r3, #8
 8009026:	2201      	movs	r2, #1
 8009028:	4619      	mov	r1, r3
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f927 	bl	800927e <USBD_CtlSendData>
        break;
 8009030:	e00c      	b.n	800904c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	3304      	adds	r3, #4
 8009036:	2201      	movs	r2, #1
 8009038:	4619      	mov	r1, r3
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 f91f 	bl	800927e <USBD_CtlSendData>
        break;
 8009040:	e004      	b.n	800904c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009042:	6839      	ldr	r1, [r7, #0]
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 f8a9 	bl	800919c <USBD_CtlError>
        break;
 800904a:	bf00      	nop
}
 800904c:	bf00      	nop
 800904e:	3708      	adds	r7, #8
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009064:	b2db      	uxtb	r3, r3
 8009066:	3b01      	subs	r3, #1
 8009068:	2b02      	cmp	r3, #2
 800906a:	d81e      	bhi.n	80090aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	88db      	ldrh	r3, [r3, #6]
 8009070:	2b02      	cmp	r3, #2
 8009072:	d004      	beq.n	800907e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f890 	bl	800919c <USBD_CtlError>
        break;
 800907c:	e01a      	b.n	80090b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2201      	movs	r2, #1
 8009082:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800908a:	2b00      	cmp	r3, #0
 800908c:	d005      	beq.n	800909a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	f043 0202 	orr.w	r2, r3, #2
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	330c      	adds	r3, #12
 800909e:	2202      	movs	r2, #2
 80090a0:	4619      	mov	r1, r3
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 f8eb 	bl	800927e <USBD_CtlSendData>
      break;
 80090a8:	e004      	b.n	80090b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80090aa:	6839      	ldr	r1, [r7, #0]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 f875 	bl	800919c <USBD_CtlError>
      break;
 80090b2:	bf00      	nop
  }
}
 80090b4:	bf00      	nop
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	885b      	ldrh	r3, [r3, #2]
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d106      	bne.n	80090dc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2201      	movs	r2, #1
 80090d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f92b 	bl	8009332 <USBD_CtlSendStatus>
  }
}
 80090dc:	bf00      	nop
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	3b01      	subs	r3, #1
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d80b      	bhi.n	8009114 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	885b      	ldrh	r3, [r3, #2]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d10c      	bne.n	800911e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 f910 	bl	8009332 <USBD_CtlSendStatus>
      }
      break;
 8009112:	e004      	b.n	800911e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009114:	6839      	ldr	r1, [r7, #0]
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f840 	bl	800919c <USBD_CtlError>
      break;
 800911c:	e000      	b.n	8009120 <USBD_ClrFeature+0x3c>
      break;
 800911e:	bf00      	nop
  }
}
 8009120:	bf00      	nop
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	781a      	ldrb	r2, [r3, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	3301      	adds	r3, #1
 8009142:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	781a      	ldrb	r2, [r3, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	3301      	adds	r3, #1
 8009150:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f7ff fabb 	bl	80086ce <SWAPBYTE>
 8009158:	4603      	mov	r3, r0
 800915a:	461a      	mov	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	3301      	adds	r3, #1
 8009164:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	3301      	adds	r3, #1
 800916a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f7ff faae 	bl	80086ce <SWAPBYTE>
 8009172:	4603      	mov	r3, r0
 8009174:	461a      	mov	r2, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	3301      	adds	r3, #1
 800917e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	3301      	adds	r3, #1
 8009184:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f7ff faa1 	bl	80086ce <SWAPBYTE>
 800918c:	4603      	mov	r3, r0
 800918e:	461a      	mov	r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	80da      	strh	r2, [r3, #6]
}
 8009194:	bf00      	nop
 8009196:	3710      	adds	r7, #16
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80091a6:	2180      	movs	r1, #128	; 0x80
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 fd6d 	bl	8009c88 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80091ae:	2100      	movs	r1, #0
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fd69 	bl	8009c88 <USBD_LL_StallEP>
}
 80091b6:	bf00      	nop
 80091b8:	3708      	adds	r7, #8
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b086      	sub	sp, #24
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	60f8      	str	r0, [r7, #12]
 80091c6:	60b9      	str	r1, [r7, #8]
 80091c8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80091ca:	2300      	movs	r3, #0
 80091cc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d036      	beq.n	8009242 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80091d8:	6938      	ldr	r0, [r7, #16]
 80091da:	f000 f836 	bl	800924a <USBD_GetLen>
 80091de:	4603      	mov	r3, r0
 80091e0:	3301      	adds	r3, #1
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	005b      	lsls	r3, r3, #1
 80091e6:	b29a      	uxth	r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80091ec:	7dfb      	ldrb	r3, [r7, #23]
 80091ee:	68ba      	ldr	r2, [r7, #8]
 80091f0:	4413      	add	r3, r2
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	7812      	ldrb	r2, [r2, #0]
 80091f6:	701a      	strb	r2, [r3, #0]
  idx++;
 80091f8:	7dfb      	ldrb	r3, [r7, #23]
 80091fa:	3301      	adds	r3, #1
 80091fc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80091fe:	7dfb      	ldrb	r3, [r7, #23]
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	4413      	add	r3, r2
 8009204:	2203      	movs	r2, #3
 8009206:	701a      	strb	r2, [r3, #0]
  idx++;
 8009208:	7dfb      	ldrb	r3, [r7, #23]
 800920a:	3301      	adds	r3, #1
 800920c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800920e:	e013      	b.n	8009238 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009210:	7dfb      	ldrb	r3, [r7, #23]
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	4413      	add	r3, r2
 8009216:	693a      	ldr	r2, [r7, #16]
 8009218:	7812      	ldrb	r2, [r2, #0]
 800921a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	3301      	adds	r3, #1
 8009220:	613b      	str	r3, [r7, #16]
    idx++;
 8009222:	7dfb      	ldrb	r3, [r7, #23]
 8009224:	3301      	adds	r3, #1
 8009226:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009228:	7dfb      	ldrb	r3, [r7, #23]
 800922a:	68ba      	ldr	r2, [r7, #8]
 800922c:	4413      	add	r3, r2
 800922e:	2200      	movs	r2, #0
 8009230:	701a      	strb	r2, [r3, #0]
    idx++;
 8009232:	7dfb      	ldrb	r3, [r7, #23]
 8009234:	3301      	adds	r3, #1
 8009236:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1e7      	bne.n	8009210 <USBD_GetString+0x52>
 8009240:	e000      	b.n	8009244 <USBD_GetString+0x86>
    return;
 8009242:	bf00      	nop
  }
}
 8009244:	3718      	adds	r7, #24
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800924a:	b480      	push	{r7}
 800924c:	b085      	sub	sp, #20
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009252:	2300      	movs	r3, #0
 8009254:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800925a:	e005      	b.n	8009268 <USBD_GetLen+0x1e>
  {
    len++;
 800925c:	7bfb      	ldrb	r3, [r7, #15]
 800925e:	3301      	adds	r3, #1
 8009260:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	3301      	adds	r3, #1
 8009266:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1f5      	bne.n	800925c <USBD_GetLen+0x12>
  }

  return len;
 8009270:	7bfb      	ldrb	r3, [r7, #15]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b084      	sub	sp, #16
 8009282:	af00      	add	r7, sp, #0
 8009284:	60f8      	str	r0, [r7, #12]
 8009286:	60b9      	str	r1, [r7, #8]
 8009288:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2202      	movs	r2, #2
 800928e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	68ba      	ldr	r2, [r7, #8]
 80092a2:	2100      	movs	r1, #0
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f000 fd78 	bl	8009d9a <USBD_LL_Transmit>

  return USBD_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	68ba      	ldr	r2, [r7, #8]
 80092c4:	2100      	movs	r1, #0
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	f000 fd67 	bl	8009d9a <USBD_LL_Transmit>

  return USBD_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3710      	adds	r7, #16
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b084      	sub	sp, #16
 80092da:	af00      	add	r7, sp, #0
 80092dc:	60f8      	str	r0, [r7, #12]
 80092de:	60b9      	str	r1, [r7, #8]
 80092e0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2203      	movs	r2, #3
 80092e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	68ba      	ldr	r2, [r7, #8]
 80092fe:	2100      	movs	r1, #0
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f000 fd6b 	bl	8009ddc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	2100      	movs	r1, #0
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f000 fd5a 	bl	8009ddc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b082      	sub	sp, #8
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2204      	movs	r2, #4
 800933e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009342:	2300      	movs	r3, #0
 8009344:	2200      	movs	r2, #0
 8009346:	2100      	movs	r1, #0
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fd26 	bl	8009d9a <USBD_LL_Transmit>

  return USBD_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2205      	movs	r2, #5
 8009364:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009368:	2300      	movs	r3, #0
 800936a:	2200      	movs	r2, #0
 800936c:	2100      	movs	r1, #0
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 fd34 	bl	8009ddc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
	...

08009380 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009384:	2200      	movs	r2, #0
 8009386:	4912      	ldr	r1, [pc, #72]	; (80093d0 <MX_USB_DEVICE_Init+0x50>)
 8009388:	4812      	ldr	r0, [pc, #72]	; (80093d4 <MX_USB_DEVICE_Init+0x54>)
 800938a:	f7fe fe8f 	bl	80080ac <USBD_Init>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d001      	beq.n	8009398 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009394:	f7f8 f9d4 	bl	8001740 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009398:	490f      	ldr	r1, [pc, #60]	; (80093d8 <MX_USB_DEVICE_Init+0x58>)
 800939a:	480e      	ldr	r0, [pc, #56]	; (80093d4 <MX_USB_DEVICE_Init+0x54>)
 800939c:	f7fe feb6 	bl	800810c <USBD_RegisterClass>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80093a6:	f7f8 f9cb 	bl	8001740 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80093aa:	490c      	ldr	r1, [pc, #48]	; (80093dc <MX_USB_DEVICE_Init+0x5c>)
 80093ac:	4809      	ldr	r0, [pc, #36]	; (80093d4 <MX_USB_DEVICE_Init+0x54>)
 80093ae:	f7fe fe07 	bl	8007fc0 <USBD_CDC_RegisterInterface>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d001      	beq.n	80093bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80093b8:	f7f8 f9c2 	bl	8001740 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80093bc:	4805      	ldr	r0, [pc, #20]	; (80093d4 <MX_USB_DEVICE_Init+0x54>)
 80093be:	f7fe fecc 	bl	800815a <USBD_Start>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d001      	beq.n	80093cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80093c8:	f7f8 f9ba 	bl	8001740 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80093cc:	bf00      	nop
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	20000138 	.word	0x20000138
 80093d4:	20000c48 	.word	0x20000c48
 80093d8:	20000020 	.word	0x20000020
 80093dc:	20000124 	.word	0x20000124

080093e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80093e6:	2200      	movs	r2, #0
 80093e8:	4915      	ldr	r1, [pc, #84]	; (8009440 <CDC_Init_FS+0x60>)
 80093ea:	4816      	ldr	r0, [pc, #88]	; (8009444 <CDC_Init_FS+0x64>)
 80093ec:	f7fe fdfd 	bl	8007fea <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80093f0:	4915      	ldr	r1, [pc, #84]	; (8009448 <CDC_Init_FS+0x68>)
 80093f2:	4814      	ldr	r0, [pc, #80]	; (8009444 <CDC_Init_FS+0x64>)
 80093f4:	f7fe fe17 	bl	8008026 <USBD_CDC_SetRxBuffer>

	// https://stackoverflow.com/a/26925578
	uint32_t baudrate = 9600;
 80093f8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80093fc:	607b      	str	r3, [r7, #4]
	lcBuffer[0] = (uint8_t) (baudrate);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	b2da      	uxtb	r2, r3
 8009402:	4b12      	ldr	r3, [pc, #72]	; (800944c <CDC_Init_FS+0x6c>)
 8009404:	701a      	strb	r2, [r3, #0]
	lcBuffer[1] = (uint8_t) (baudrate >> 8);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	0a1b      	lsrs	r3, r3, #8
 800940a:	b2da      	uxtb	r2, r3
 800940c:	4b0f      	ldr	r3, [pc, #60]	; (800944c <CDC_Init_FS+0x6c>)
 800940e:	705a      	strb	r2, [r3, #1]
	lcBuffer[2] = (uint8_t) (baudrate >> 16);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	0c1b      	lsrs	r3, r3, #16
 8009414:	b2da      	uxtb	r2, r3
 8009416:	4b0d      	ldr	r3, [pc, #52]	; (800944c <CDC_Init_FS+0x6c>)
 8009418:	709a      	strb	r2, [r3, #2]
	lcBuffer[3] = (uint8_t) (baudrate >> 24);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	0e1b      	lsrs	r3, r3, #24
 800941e:	b2da      	uxtb	r2, r3
 8009420:	4b0a      	ldr	r3, [pc, #40]	; (800944c <CDC_Init_FS+0x6c>)
 8009422:	70da      	strb	r2, [r3, #3]
	lcBuffer[4] = 0; // 1 Stop bit
 8009424:	4b09      	ldr	r3, [pc, #36]	; (800944c <CDC_Init_FS+0x6c>)
 8009426:	2200      	movs	r2, #0
 8009428:	711a      	strb	r2, [r3, #4]
	lcBuffer[5] = 0; // No parity
 800942a:	4b08      	ldr	r3, [pc, #32]	; (800944c <CDC_Init_FS+0x6c>)
 800942c:	2200      	movs	r2, #0
 800942e:	715a      	strb	r2, [r3, #5]
	lcBuffer[6] = 8; // 8 data bits
 8009430:	4b06      	ldr	r3, [pc, #24]	; (800944c <CDC_Init_FS+0x6c>)
 8009432:	2208      	movs	r2, #8
 8009434:	719a      	strb	r2, [r3, #6]

	return (USBD_OK);
 8009436:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009438:	4618      	mov	r0, r3
 800943a:	3708      	adds	r7, #8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}
 8009440:	20001718 	.word	0x20001718
 8009444:	20000c48 	.word	0x20000c48
 8009448:	20000f18 	.word	0x20000f18
 800944c:	20002018 	.word	0x20002018

08009450 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009450:	b480      	push	{r7}
 8009452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8009454:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009456:	4618      	mov	r0, r3
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	4603      	mov	r3, r0
 8009468:	6039      	str	r1, [r7, #0]
 800946a:	71fb      	strb	r3, [r7, #7]
 800946c:	4613      	mov	r3, r2
 800946e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 8009470:	79fb      	ldrb	r3, [r7, #7]
 8009472:	2b23      	cmp	r3, #35	; 0x23
 8009474:	f200 808e 	bhi.w	8009594 <CDC_Control_FS+0x134>
 8009478:	a201      	add	r2, pc, #4	; (adr r2, 8009480 <CDC_Control_FS+0x20>)
 800947a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947e:	bf00      	nop
 8009480:	08009595 	.word	0x08009595
 8009484:	08009595 	.word	0x08009595
 8009488:	08009595 	.word	0x08009595
 800948c:	08009595 	.word	0x08009595
 8009490:	08009595 	.word	0x08009595
 8009494:	08009595 	.word	0x08009595
 8009498:	08009595 	.word	0x08009595
 800949c:	08009595 	.word	0x08009595
 80094a0:	08009595 	.word	0x08009595
 80094a4:	08009595 	.word	0x08009595
 80094a8:	08009595 	.word	0x08009595
 80094ac:	08009595 	.word	0x08009595
 80094b0:	08009595 	.word	0x08009595
 80094b4:	08009595 	.word	0x08009595
 80094b8:	08009595 	.word	0x08009595
 80094bc:	08009595 	.word	0x08009595
 80094c0:	08009595 	.word	0x08009595
 80094c4:	08009595 	.word	0x08009595
 80094c8:	08009595 	.word	0x08009595
 80094cc:	08009595 	.word	0x08009595
 80094d0:	08009595 	.word	0x08009595
 80094d4:	08009595 	.word	0x08009595
 80094d8:	08009595 	.word	0x08009595
 80094dc:	08009595 	.word	0x08009595
 80094e0:	08009595 	.word	0x08009595
 80094e4:	08009595 	.word	0x08009595
 80094e8:	08009595 	.word	0x08009595
 80094ec:	08009595 	.word	0x08009595
 80094f0:	08009595 	.word	0x08009595
 80094f4:	08009595 	.word	0x08009595
 80094f8:	08009595 	.word	0x08009595
 80094fc:	08009595 	.word	0x08009595
 8009500:	08009511 	.word	0x08009511
 8009504:	0800954b 	.word	0x0800954b
 8009508:	08009595 	.word	0x08009595
 800950c:	08009595 	.word	0x08009595
		/* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
		/*******************************************************************************/

		// https://github.com/philrawlings/bluepill-usb-cdc-test/blob/main/USB_DEVICE/App/usbd_cdc_if.c
	case CDC_SET_LINE_CODING:
		lcBuffer[0] = pbuf[0];
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	781a      	ldrb	r2, [r3, #0]
 8009514:	4b22      	ldr	r3, [pc, #136]	; (80095a0 <CDC_Control_FS+0x140>)
 8009516:	701a      	strb	r2, [r3, #0]
		lcBuffer[1] = pbuf[1];
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	785a      	ldrb	r2, [r3, #1]
 800951c:	4b20      	ldr	r3, [pc, #128]	; (80095a0 <CDC_Control_FS+0x140>)
 800951e:	705a      	strb	r2, [r3, #1]
		lcBuffer[2] = pbuf[2];
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	789a      	ldrb	r2, [r3, #2]
 8009524:	4b1e      	ldr	r3, [pc, #120]	; (80095a0 <CDC_Control_FS+0x140>)
 8009526:	709a      	strb	r2, [r3, #2]
		lcBuffer[3] = pbuf[3];
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	78da      	ldrb	r2, [r3, #3]
 800952c:	4b1c      	ldr	r3, [pc, #112]	; (80095a0 <CDC_Control_FS+0x140>)
 800952e:	70da      	strb	r2, [r3, #3]
		lcBuffer[4] = pbuf[4];
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	791a      	ldrb	r2, [r3, #4]
 8009534:	4b1a      	ldr	r3, [pc, #104]	; (80095a0 <CDC_Control_FS+0x140>)
 8009536:	711a      	strb	r2, [r3, #4]
		lcBuffer[5] = pbuf[5];
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	795a      	ldrb	r2, [r3, #5]
 800953c:	4b18      	ldr	r3, [pc, #96]	; (80095a0 <CDC_Control_FS+0x140>)
 800953e:	715a      	strb	r2, [r3, #5]
		lcBuffer[6] = pbuf[6];
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	799a      	ldrb	r2, [r3, #6]
 8009544:	4b16      	ldr	r3, [pc, #88]	; (80095a0 <CDC_Control_FS+0x140>)
 8009546:	719a      	strb	r2, [r3, #6]
		break;
 8009548:	e025      	b.n	8009596 <CDC_Control_FS+0x136>

	case CDC_GET_LINE_CODING:
		pbuf[0] = lcBuffer[0];
 800954a:	4b15      	ldr	r3, [pc, #84]	; (80095a0 <CDC_Control_FS+0x140>)
 800954c:	781a      	ldrb	r2, [r3, #0]
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	701a      	strb	r2, [r3, #0]
		pbuf[1] = lcBuffer[1];
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	3301      	adds	r3, #1
 8009556:	4a12      	ldr	r2, [pc, #72]	; (80095a0 <CDC_Control_FS+0x140>)
 8009558:	7852      	ldrb	r2, [r2, #1]
 800955a:	701a      	strb	r2, [r3, #0]
		pbuf[2] = lcBuffer[2];
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	3302      	adds	r3, #2
 8009560:	4a0f      	ldr	r2, [pc, #60]	; (80095a0 <CDC_Control_FS+0x140>)
 8009562:	7892      	ldrb	r2, [r2, #2]
 8009564:	701a      	strb	r2, [r3, #0]
		pbuf[3] = lcBuffer[3];
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	3303      	adds	r3, #3
 800956a:	4a0d      	ldr	r2, [pc, #52]	; (80095a0 <CDC_Control_FS+0x140>)
 800956c:	78d2      	ldrb	r2, [r2, #3]
 800956e:	701a      	strb	r2, [r3, #0]
		pbuf[4] = lcBuffer[4];
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	3304      	adds	r3, #4
 8009574:	4a0a      	ldr	r2, [pc, #40]	; (80095a0 <CDC_Control_FS+0x140>)
 8009576:	7912      	ldrb	r2, [r2, #4]
 8009578:	701a      	strb	r2, [r3, #0]
		pbuf[5] = lcBuffer[5];
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	3305      	adds	r3, #5
 800957e:	4a08      	ldr	r2, [pc, #32]	; (80095a0 <CDC_Control_FS+0x140>)
 8009580:	7952      	ldrb	r2, [r2, #5]
 8009582:	701a      	strb	r2, [r3, #0]
		pbuf[6] = lcBuffer[6];
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	3306      	adds	r3, #6
 8009588:	4a05      	ldr	r2, [pc, #20]	; (80095a0 <CDC_Control_FS+0x140>)
 800958a:	7992      	ldrb	r2, [r2, #6]
 800958c:	701a      	strb	r2, [r3, #0]

		// Get line coding is invoked when the host connects, clear the RxBuffer when this occurs
		CDC_FlushRxBuffer_FS();
 800958e:	f000 f877 	bl	8009680 <CDC_FlushRxBuffer_FS>

	case CDC_SET_CONTROL_LINE_STATE:

		break;
 8009592:	e000      	b.n	8009596 <CDC_Control_FS+0x136>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8009594:	bf00      	nop
	}

	return (USBD_OK);
 8009596:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009598:	4618      	mov	r0, r3
 800959a:	3708      	adds	r7, #8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	20002018 	.word	0x20002018

080095a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80095ae:	6879      	ldr	r1, [r7, #4]
 80095b0:	480e      	ldr	r0, [pc, #56]	; (80095ec <CDC_Receive_FS+0x48>)
 80095b2:	f7fe fd38 	bl	8008026 <USBD_CDC_SetRxBuffer>

	uint8_t len = (uint8_t) *Len; // Get length
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	73fb      	strb	r3, [r7, #15]

	memset(rxBuffer, 0, HL_RX_BUFFER_SIZE);  // clear the buffer
 80095bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80095c0:	2100      	movs	r1, #0
 80095c2:	480b      	ldr	r0, [pc, #44]	; (80095f0 <CDC_Receive_FS+0x4c>)
 80095c4:	f000 fcba 	bl	8009f3c <memset>
	memcpy(rxBuffer, Buf, len);  // copy the data to the buffer
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
 80095ca:	461a      	mov	r2, r3
 80095cc:	6879      	ldr	r1, [r7, #4]
 80095ce:	4808      	ldr	r0, [pc, #32]	; (80095f0 <CDC_Receive_FS+0x4c>)
 80095d0:	f000 fca6 	bl	8009f20 <memcpy>
	memset(Buf, 0, len);   // clear the Buf also
 80095d4:	7bfb      	ldrb	r3, [r7, #15]
 80095d6:	461a      	mov	r2, r3
 80095d8:	2100      	movs	r1, #0
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 fcae 	bl	8009f3c <memset>



	return (USBD_OK);
 80095e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	20000c48 	.word	0x20000c48
 80095f0:	20001f18 	.word	0x20001f18

080095f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b087      	sub	sp, #28
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	4613      	mov	r3, r2
 8009600:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009606:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800960a:	4618      	mov	r0, r3
 800960c:	371c      	adds	r7, #28
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr
	...

08009618 <CDC_ReadRxBuffer_FS>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void CDC_ReadRxBuffer_FS(uint8_t *Buf, uint8_t Len) {
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	460b      	mov	r3, r1
 8009622:	70fb      	strb	r3, [r7, #3]
	memcpy(Buf, rxBuffer, Len);  // copy the data to the buffer
 8009624:	78fb      	ldrb	r3, [r7, #3]
 8009626:	461a      	mov	r2, r3
 8009628:	4903      	ldr	r1, [pc, #12]	; (8009638 <CDC_ReadRxBuffer_FS+0x20>)
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fc78 	bl	8009f20 <memcpy>
}
 8009630:	bf00      	nop
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	20001f18 	.word	0x20001f18

0800963c <CDC_GetRxBufferBytesAvailable_FS>:

uint8_t CDC_GetRxBufferBytesAvailable_FS(void) {
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0

	uint8_t index = 0;
 8009642:	2300      	movs	r3, #0
 8009644:	71fb      	strb	r3, [r7, #7]
	while (rxBuffer[index] != 0) {
 8009646:	e002      	b.n	800964e <CDC_GetRxBufferBytesAvailable_FS+0x12>
		index++;
 8009648:	79fb      	ldrb	r3, [r7, #7]
 800964a:	3301      	adds	r3, #1
 800964c:	71fb      	strb	r3, [r7, #7]
	while (rxBuffer[index] != 0) {
 800964e:	79fb      	ldrb	r3, [r7, #7]
 8009650:	4a05      	ldr	r2, [pc, #20]	; (8009668 <CDC_GetRxBufferBytesAvailable_FS+0x2c>)
 8009652:	5cd3      	ldrb	r3, [r2, r3]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1f7      	bne.n	8009648 <CDC_GetRxBufferBytesAvailable_FS+0xc>
	}
	return index;
 8009658:	79fb      	ldrb	r3, [r7, #7]

}
 800965a:	4618      	mov	r0, r3
 800965c:	370c      	adds	r7, #12
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr
 8009666:	bf00      	nop
 8009668:	20001f18 	.word	0x20001f18

0800966c <CDC_Read_Next>:

void CDC_Read_Next() {
 800966c:	b580      	push	{r7, lr}
 800966e:	af00      	add	r7, sp, #0
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009670:	4802      	ldr	r0, [pc, #8]	; (800967c <CDC_Read_Next+0x10>)
 8009672:	f7fe fcf1 	bl	8008058 <USBD_CDC_ReceivePacket>
}
 8009676:	bf00      	nop
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	20000c48 	.word	0x20000c48

08009680 <CDC_FlushRxBuffer_FS>:

void CDC_FlushRxBuffer_FS() {
 8009680:	b580      	push	{r7, lr}
 8009682:	af00      	add	r7, sp, #0
	memset(rxBuffer, 0, HL_RX_BUFFER_SIZE);
 8009684:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009688:	2100      	movs	r1, #0
 800968a:	4802      	ldr	r0, [pc, #8]	; (8009694 <CDC_FlushRxBuffer_FS+0x14>)
 800968c:	f000 fc56 	bl	8009f3c <memset>
}
 8009690:	bf00      	nop
 8009692:	bd80      	pop	{r7, pc}
 8009694:	20001f18 	.word	0x20001f18

08009698 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	4603      	mov	r3, r0
 80096a0:	6039      	str	r1, [r7, #0]
 80096a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	2212      	movs	r2, #18
 80096a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80096aa:	4b03      	ldr	r3, [pc, #12]	; (80096b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr
 80096b8:	20000154 	.word	0x20000154

080096bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	4603      	mov	r3, r0
 80096c4:	6039      	str	r1, [r7, #0]
 80096c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	2204      	movs	r2, #4
 80096cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80096ce:	4b03      	ldr	r3, [pc, #12]	; (80096dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr
 80096dc:	20000168 	.word	0x20000168

080096e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	4603      	mov	r3, r0
 80096e8:	6039      	str	r1, [r7, #0]
 80096ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80096ec:	79fb      	ldrb	r3, [r7, #7]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d105      	bne.n	80096fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80096f2:	683a      	ldr	r2, [r7, #0]
 80096f4:	4907      	ldr	r1, [pc, #28]	; (8009714 <USBD_FS_ProductStrDescriptor+0x34>)
 80096f6:	4808      	ldr	r0, [pc, #32]	; (8009718 <USBD_FS_ProductStrDescriptor+0x38>)
 80096f8:	f7ff fd61 	bl	80091be <USBD_GetString>
 80096fc:	e004      	b.n	8009708 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80096fe:	683a      	ldr	r2, [r7, #0]
 8009700:	4904      	ldr	r1, [pc, #16]	; (8009714 <USBD_FS_ProductStrDescriptor+0x34>)
 8009702:	4805      	ldr	r0, [pc, #20]	; (8009718 <USBD_FS_ProductStrDescriptor+0x38>)
 8009704:	f7ff fd5b 	bl	80091be <USBD_GetString>
  }
  return USBD_StrDesc;
 8009708:	4b02      	ldr	r3, [pc, #8]	; (8009714 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800970a:	4618      	mov	r0, r3
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	20002020 	.word	0x20002020
 8009718:	0800b888 	.word	0x0800b888

0800971c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	4603      	mov	r3, r0
 8009724:	6039      	str	r1, [r7, #0]
 8009726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009728:	683a      	ldr	r2, [r7, #0]
 800972a:	4904      	ldr	r1, [pc, #16]	; (800973c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800972c:	4804      	ldr	r0, [pc, #16]	; (8009740 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800972e:	f7ff fd46 	bl	80091be <USBD_GetString>
  return USBD_StrDesc;
 8009732:	4b02      	ldr	r3, [pc, #8]	; (800973c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009734:	4618      	mov	r0, r3
 8009736:	3708      	adds	r7, #8
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}
 800973c:	20002020 	.word	0x20002020
 8009740:	0800b8a0 	.word	0x0800b8a0

08009744 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	4603      	mov	r3, r0
 800974c:	6039      	str	r1, [r7, #0]
 800974e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	221a      	movs	r2, #26
 8009754:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009756:	f000 f843 	bl	80097e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800975a:	4b02      	ldr	r3, [pc, #8]	; (8009764 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800975c:	4618      	mov	r0, r3
 800975e:	3708      	adds	r7, #8
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	2000016c 	.word	0x2000016c

08009768 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	4603      	mov	r3, r0
 8009770:	6039      	str	r1, [r7, #0]
 8009772:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009774:	79fb      	ldrb	r3, [r7, #7]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d105      	bne.n	8009786 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800977a:	683a      	ldr	r2, [r7, #0]
 800977c:	4907      	ldr	r1, [pc, #28]	; (800979c <USBD_FS_ConfigStrDescriptor+0x34>)
 800977e:	4808      	ldr	r0, [pc, #32]	; (80097a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009780:	f7ff fd1d 	bl	80091be <USBD_GetString>
 8009784:	e004      	b.n	8009790 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009786:	683a      	ldr	r2, [r7, #0]
 8009788:	4904      	ldr	r1, [pc, #16]	; (800979c <USBD_FS_ConfigStrDescriptor+0x34>)
 800978a:	4805      	ldr	r0, [pc, #20]	; (80097a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800978c:	f7ff fd17 	bl	80091be <USBD_GetString>
  }
  return USBD_StrDesc;
 8009790:	4b02      	ldr	r3, [pc, #8]	; (800979c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009792:	4618      	mov	r0, r3
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	20002020 	.word	0x20002020
 80097a0:	0800b8b4 	.word	0x0800b8b4

080097a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	6039      	str	r1, [r7, #0]
 80097ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80097b0:	79fb      	ldrb	r3, [r7, #7]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d105      	bne.n	80097c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80097b6:	683a      	ldr	r2, [r7, #0]
 80097b8:	4907      	ldr	r1, [pc, #28]	; (80097d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80097ba:	4808      	ldr	r0, [pc, #32]	; (80097dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80097bc:	f7ff fcff 	bl	80091be <USBD_GetString>
 80097c0:	e004      	b.n	80097cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80097c2:	683a      	ldr	r2, [r7, #0]
 80097c4:	4904      	ldr	r1, [pc, #16]	; (80097d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80097c6:	4805      	ldr	r0, [pc, #20]	; (80097dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80097c8:	f7ff fcf9 	bl	80091be <USBD_GetString>
  }
  return USBD_StrDesc;
 80097cc:	4b02      	ldr	r3, [pc, #8]	; (80097d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3708      	adds	r7, #8
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	20002020 	.word	0x20002020
 80097dc:	0800b8c0 	.word	0x0800b8c0

080097e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80097e6:	4b0f      	ldr	r3, [pc, #60]	; (8009824 <Get_SerialNum+0x44>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80097ec:	4b0e      	ldr	r3, [pc, #56]	; (8009828 <Get_SerialNum+0x48>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80097f2:	4b0e      	ldr	r3, [pc, #56]	; (800982c <Get_SerialNum+0x4c>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4413      	add	r3, r2
 80097fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d009      	beq.n	800981a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009806:	2208      	movs	r2, #8
 8009808:	4909      	ldr	r1, [pc, #36]	; (8009830 <Get_SerialNum+0x50>)
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	f000 f814 	bl	8009838 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009810:	2204      	movs	r2, #4
 8009812:	4908      	ldr	r1, [pc, #32]	; (8009834 <Get_SerialNum+0x54>)
 8009814:	68b8      	ldr	r0, [r7, #8]
 8009816:	f000 f80f 	bl	8009838 <IntToUnicode>
  }
}
 800981a:	bf00      	nop
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	1fff7a10 	.word	0x1fff7a10
 8009828:	1fff7a14 	.word	0x1fff7a14
 800982c:	1fff7a18 	.word	0x1fff7a18
 8009830:	2000016e 	.word	0x2000016e
 8009834:	2000017e 	.word	0x2000017e

08009838 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009838:	b480      	push	{r7}
 800983a:	b087      	sub	sp, #28
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	4613      	mov	r3, r2
 8009844:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009846:	2300      	movs	r3, #0
 8009848:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800984a:	2300      	movs	r3, #0
 800984c:	75fb      	strb	r3, [r7, #23]
 800984e:	e027      	b.n	80098a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	0f1b      	lsrs	r3, r3, #28
 8009854:	2b09      	cmp	r3, #9
 8009856:	d80b      	bhi.n	8009870 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	0f1b      	lsrs	r3, r3, #28
 800985c:	b2da      	uxtb	r2, r3
 800985e:	7dfb      	ldrb	r3, [r7, #23]
 8009860:	005b      	lsls	r3, r3, #1
 8009862:	4619      	mov	r1, r3
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	440b      	add	r3, r1
 8009868:	3230      	adds	r2, #48	; 0x30
 800986a:	b2d2      	uxtb	r2, r2
 800986c:	701a      	strb	r2, [r3, #0]
 800986e:	e00a      	b.n	8009886 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	0f1b      	lsrs	r3, r3, #28
 8009874:	b2da      	uxtb	r2, r3
 8009876:	7dfb      	ldrb	r3, [r7, #23]
 8009878:	005b      	lsls	r3, r3, #1
 800987a:	4619      	mov	r1, r3
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	440b      	add	r3, r1
 8009880:	3237      	adds	r2, #55	; 0x37
 8009882:	b2d2      	uxtb	r2, r2
 8009884:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	011b      	lsls	r3, r3, #4
 800988a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800988c:	7dfb      	ldrb	r3, [r7, #23]
 800988e:	005b      	lsls	r3, r3, #1
 8009890:	3301      	adds	r3, #1
 8009892:	68ba      	ldr	r2, [r7, #8]
 8009894:	4413      	add	r3, r2
 8009896:	2200      	movs	r2, #0
 8009898:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800989a:	7dfb      	ldrb	r3, [r7, #23]
 800989c:	3301      	adds	r3, #1
 800989e:	75fb      	strb	r3, [r7, #23]
 80098a0:	7dfa      	ldrb	r2, [r7, #23]
 80098a2:	79fb      	ldrb	r3, [r7, #7]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d3d3      	bcc.n	8009850 <IntToUnicode+0x18>
  }
}
 80098a8:	bf00      	nop
 80098aa:	bf00      	nop
 80098ac:	371c      	adds	r7, #28
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr
	...

080098b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b08a      	sub	sp, #40	; 0x28
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098c0:	f107 0314 	add.w	r3, r7, #20
 80098c4:	2200      	movs	r2, #0
 80098c6:	601a      	str	r2, [r3, #0]
 80098c8:	605a      	str	r2, [r3, #4]
 80098ca:	609a      	str	r2, [r3, #8]
 80098cc:	60da      	str	r2, [r3, #12]
 80098ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098d8:	d13a      	bne.n	8009950 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098da:	2300      	movs	r3, #0
 80098dc:	613b      	str	r3, [r7, #16]
 80098de:	4b1e      	ldr	r3, [pc, #120]	; (8009958 <HAL_PCD_MspInit+0xa0>)
 80098e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e2:	4a1d      	ldr	r2, [pc, #116]	; (8009958 <HAL_PCD_MspInit+0xa0>)
 80098e4:	f043 0301 	orr.w	r3, r3, #1
 80098e8:	6313      	str	r3, [r2, #48]	; 0x30
 80098ea:	4b1b      	ldr	r3, [pc, #108]	; (8009958 <HAL_PCD_MspInit+0xa0>)
 80098ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ee:	f003 0301 	and.w	r3, r3, #1
 80098f2:	613b      	str	r3, [r7, #16]
 80098f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80098f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80098fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098fc:	2302      	movs	r3, #2
 80098fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009900:	2300      	movs	r3, #0
 8009902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009904:	2303      	movs	r3, #3
 8009906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009908:	230a      	movs	r3, #10
 800990a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800990c:	f107 0314 	add.w	r3, r7, #20
 8009910:	4619      	mov	r1, r3
 8009912:	4812      	ldr	r0, [pc, #72]	; (800995c <HAL_PCD_MspInit+0xa4>)
 8009914:	f7f9 f8ac 	bl	8002a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009918:	4b0f      	ldr	r3, [pc, #60]	; (8009958 <HAL_PCD_MspInit+0xa0>)
 800991a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800991c:	4a0e      	ldr	r2, [pc, #56]	; (8009958 <HAL_PCD_MspInit+0xa0>)
 800991e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009922:	6353      	str	r3, [r2, #52]	; 0x34
 8009924:	2300      	movs	r3, #0
 8009926:	60fb      	str	r3, [r7, #12]
 8009928:	4b0b      	ldr	r3, [pc, #44]	; (8009958 <HAL_PCD_MspInit+0xa0>)
 800992a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800992c:	4a0a      	ldr	r2, [pc, #40]	; (8009958 <HAL_PCD_MspInit+0xa0>)
 800992e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009932:	6453      	str	r3, [r2, #68]	; 0x44
 8009934:	4b08      	ldr	r3, [pc, #32]	; (8009958 <HAL_PCD_MspInit+0xa0>)
 8009936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800993c:	60fb      	str	r3, [r7, #12]
 800993e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009940:	2200      	movs	r2, #0
 8009942:	2100      	movs	r1, #0
 8009944:	2043      	movs	r0, #67	; 0x43
 8009946:	f7f8 fcca 	bl	80022de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800994a:	2043      	movs	r0, #67	; 0x43
 800994c:	f7f8 fce3 	bl	8002316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009950:	bf00      	nop
 8009952:	3728      	adds	r7, #40	; 0x28
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	40023800 	.word	0x40023800
 800995c:	40020000 	.word	0x40020000

08009960 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009974:	4619      	mov	r1, r3
 8009976:	4610      	mov	r0, r2
 8009978:	f7fe fc3a 	bl	80081f0 <USBD_LL_SetupStage>
}
 800997c:	bf00      	nop
 800997e:	3708      	adds	r7, #8
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	460b      	mov	r3, r1
 800998e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009996:	78fa      	ldrb	r2, [r7, #3]
 8009998:	6879      	ldr	r1, [r7, #4]
 800999a:	4613      	mov	r3, r2
 800999c:	00db      	lsls	r3, r3, #3
 800999e:	1a9b      	subs	r3, r3, r2
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	440b      	add	r3, r1
 80099a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	78fb      	ldrb	r3, [r7, #3]
 80099ac:	4619      	mov	r1, r3
 80099ae:	f7fe fc74 	bl	800829a <USBD_LL_DataOutStage>
}
 80099b2:	bf00      	nop
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b082      	sub	sp, #8
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	460b      	mov	r3, r1
 80099c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80099cc:	78fa      	ldrb	r2, [r7, #3]
 80099ce:	6879      	ldr	r1, [r7, #4]
 80099d0:	4613      	mov	r3, r2
 80099d2:	00db      	lsls	r3, r3, #3
 80099d4:	1a9b      	subs	r3, r3, r2
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	440b      	add	r3, r1
 80099da:	3348      	adds	r3, #72	; 0x48
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	78fb      	ldrb	r3, [r7, #3]
 80099e0:	4619      	mov	r1, r3
 80099e2:	f7fe fcbd 	bl	8008360 <USBD_LL_DataInStage>
}
 80099e6:	bf00      	nop
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b082      	sub	sp, #8
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7fe fdd1 	bl	80085a4 <USBD_LL_SOF>
}
 8009a02:	bf00      	nop
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b084      	sub	sp, #16
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009a12:	2301      	movs	r3, #1
 8009a14:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d001      	beq.n	8009a22 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009a1e:	f7f7 fe8f 	bl	8001740 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a28:	7bfa      	ldrb	r2, [r7, #15]
 8009a2a:	4611      	mov	r1, r2
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7fe fd7b 	bl	8008528 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7fe fd27 	bl	800848c <USBD_LL_Reset>
}
 8009a3e:	bf00      	nop
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
	...

08009a48 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7fe fd76 	bl	8008548 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	6812      	ldr	r2, [r2, #0]
 8009a6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009a6e:	f043 0301 	orr.w	r3, r3, #1
 8009a72:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a1b      	ldr	r3, [r3, #32]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d005      	beq.n	8009a88 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a7c:	4b04      	ldr	r3, [pc, #16]	; (8009a90 <HAL_PCD_SuspendCallback+0x48>)
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	4a03      	ldr	r2, [pc, #12]	; (8009a90 <HAL_PCD_SuspendCallback+0x48>)
 8009a82:	f043 0306 	orr.w	r3, r3, #6
 8009a86:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009a88:	bf00      	nop
 8009a8a:	3708      	adds	r7, #8
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	e000ed00 	.word	0xe000ed00

08009a94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7fe fd66 	bl	8008574 <USBD_LL_Resume>
}
 8009aa8:	bf00      	nop
 8009aaa:	3708      	adds	r7, #8
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	460b      	mov	r3, r1
 8009aba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ac2:	78fa      	ldrb	r2, [r7, #3]
 8009ac4:	4611      	mov	r1, r2
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7fe fdb4 	bl	8008634 <USBD_LL_IsoOUTIncomplete>
}
 8009acc:	bf00      	nop
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	460b      	mov	r3, r1
 8009ade:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ae6:	78fa      	ldrb	r2, [r7, #3]
 8009ae8:	4611      	mov	r1, r2
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fe fd7c 	bl	80085e8 <USBD_LL_IsoINIncomplete>
}
 8009af0:	bf00      	nop
 8009af2:	3708      	adds	r7, #8
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fe fdba 	bl	8008680 <USBD_LL_DevConnected>
}
 8009b0c:	bf00      	nop
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7fe fdb7 	bl	8008696 <USBD_LL_DevDisconnected>
}
 8009b28:	bf00      	nop
 8009b2a:	3708      	adds	r7, #8
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d13c      	bne.n	8009bba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009b40:	4a20      	ldr	r2, [pc, #128]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a1e      	ldr	r2, [pc, #120]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009b4c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009b50:	4b1c      	ldr	r3, [pc, #112]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009b52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009b56:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009b58:	4b1a      	ldr	r3, [pc, #104]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009b5a:	2204      	movs	r2, #4
 8009b5c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009b5e:	4b19      	ldr	r3, [pc, #100]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009b60:	2202      	movs	r2, #2
 8009b62:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009b64:	4b17      	ldr	r3, [pc, #92]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009b66:	2200      	movs	r2, #0
 8009b68:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009b6a:	4b16      	ldr	r3, [pc, #88]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009b6c:	2202      	movs	r2, #2
 8009b6e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009b70:	4b14      	ldr	r3, [pc, #80]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009b72:	2200      	movs	r2, #0
 8009b74:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009b76:	4b13      	ldr	r3, [pc, #76]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009b78:	2200      	movs	r2, #0
 8009b7a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009b7c:	4b11      	ldr	r3, [pc, #68]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009b7e:	2200      	movs	r2, #0
 8009b80:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009b82:	4b10      	ldr	r3, [pc, #64]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009b84:	2200      	movs	r2, #0
 8009b86:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009b88:	4b0e      	ldr	r3, [pc, #56]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009b8e:	480d      	ldr	r0, [pc, #52]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009b90:	f7f9 fd4d 	bl	800362e <HAL_PCD_Init>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d001      	beq.n	8009b9e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009b9a:	f7f7 fdd1 	bl	8001740 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009b9e:	2180      	movs	r1, #128	; 0x80
 8009ba0:	4808      	ldr	r0, [pc, #32]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009ba2:	f7fa feaa 	bl	80048fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009ba6:	2240      	movs	r2, #64	; 0x40
 8009ba8:	2100      	movs	r1, #0
 8009baa:	4806      	ldr	r0, [pc, #24]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009bac:	f7fa fe5e 	bl	800486c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009bb0:	2280      	movs	r2, #128	; 0x80
 8009bb2:	2101      	movs	r1, #1
 8009bb4:	4803      	ldr	r0, [pc, #12]	; (8009bc4 <USBD_LL_Init+0x94>)
 8009bb6:	f7fa fe59 	bl	800486c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009bba:	2300      	movs	r3, #0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	20002220 	.word	0x20002220

08009bc8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7f9 fe42 	bl	8003868 <HAL_PCD_Start>
 8009be4:	4603      	mov	r3, r0
 8009be6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009be8:	7bfb      	ldrb	r3, [r7, #15]
 8009bea:	4618      	mov	r0, r3
 8009bec:	f000 f942 	bl	8009e74 <USBD_Get_USB_Status>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3710      	adds	r7, #16
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b084      	sub	sp, #16
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	4608      	mov	r0, r1
 8009c08:	4611      	mov	r1, r2
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	70fb      	strb	r3, [r7, #3]
 8009c10:	460b      	mov	r3, r1
 8009c12:	70bb      	strb	r3, [r7, #2]
 8009c14:	4613      	mov	r3, r2
 8009c16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c26:	78bb      	ldrb	r3, [r7, #2]
 8009c28:	883a      	ldrh	r2, [r7, #0]
 8009c2a:	78f9      	ldrb	r1, [r7, #3]
 8009c2c:	f7fa fa26 	bl	800407c <HAL_PCD_EP_Open>
 8009c30:	4603      	mov	r3, r0
 8009c32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c34:	7bfb      	ldrb	r3, [r7, #15]
 8009c36:	4618      	mov	r0, r3
 8009c38:	f000 f91c 	bl	8009e74 <USBD_Get_USB_Status>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c40:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}

08009c4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b084      	sub	sp, #16
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
 8009c52:	460b      	mov	r3, r1
 8009c54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c56:	2300      	movs	r3, #0
 8009c58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c64:	78fa      	ldrb	r2, [r7, #3]
 8009c66:	4611      	mov	r1, r2
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7fa fa6f 	bl	800414c <HAL_PCD_EP_Close>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c72:	7bfb      	ldrb	r3, [r7, #15]
 8009c74:	4618      	mov	r0, r3
 8009c76:	f000 f8fd 	bl	8009e74 <USBD_Get_USB_Status>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	460b      	mov	r3, r1
 8009c92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c94:	2300      	movs	r3, #0
 8009c96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ca2:	78fa      	ldrb	r2, [r7, #3]
 8009ca4:	4611      	mov	r1, r2
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7fa fb47 	bl	800433a <HAL_PCD_EP_SetStall>
 8009cac:	4603      	mov	r3, r0
 8009cae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cb0:	7bfb      	ldrb	r3, [r7, #15]
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f000 f8de 	bl	8009e74 <USBD_Get_USB_Status>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b084      	sub	sp, #16
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
 8009cce:	460b      	mov	r3, r1
 8009cd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ce0:	78fa      	ldrb	r2, [r7, #3]
 8009ce2:	4611      	mov	r1, r2
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7fa fb8c 	bl	8004402 <HAL_PCD_EP_ClrStall>
 8009cea:	4603      	mov	r3, r0
 8009cec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cee:	7bfb      	ldrb	r3, [r7, #15]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f000 f8bf 	bl	8009e74 <USBD_Get_USB_Status>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009d18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	da0b      	bge.n	8009d38 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009d20:	78fb      	ldrb	r3, [r7, #3]
 8009d22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d26:	68f9      	ldr	r1, [r7, #12]
 8009d28:	4613      	mov	r3, r2
 8009d2a:	00db      	lsls	r3, r3, #3
 8009d2c:	1a9b      	subs	r3, r3, r2
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	440b      	add	r3, r1
 8009d32:	333e      	adds	r3, #62	; 0x3e
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	e00b      	b.n	8009d50 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009d38:	78fb      	ldrb	r3, [r7, #3]
 8009d3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d3e:	68f9      	ldr	r1, [r7, #12]
 8009d40:	4613      	mov	r3, r2
 8009d42:	00db      	lsls	r3, r3, #3
 8009d44:	1a9b      	subs	r3, r3, r2
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	440b      	add	r3, r1
 8009d4a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009d4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3714      	adds	r7, #20
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	460b      	mov	r3, r1
 8009d66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d76:	78fa      	ldrb	r2, [r7, #3]
 8009d78:	4611      	mov	r1, r2
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7fa f959 	bl	8004032 <HAL_PCD_SetAddress>
 8009d80:	4603      	mov	r3, r0
 8009d82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d84:	7bfb      	ldrb	r3, [r7, #15]
 8009d86:	4618      	mov	r0, r3
 8009d88:	f000 f874 	bl	8009e74 <USBD_Get_USB_Status>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d90:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3710      	adds	r7, #16
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b086      	sub	sp, #24
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	60f8      	str	r0, [r7, #12]
 8009da2:	607a      	str	r2, [r7, #4]
 8009da4:	603b      	str	r3, [r7, #0]
 8009da6:	460b      	mov	r3, r1
 8009da8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dae:	2300      	movs	r3, #0
 8009db0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009db8:	7af9      	ldrb	r1, [r7, #11]
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	f7fa fa72 	bl	80042a6 <HAL_PCD_EP_Transmit>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dc6:	7dfb      	ldrb	r3, [r7, #23]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f000 f853 	bl	8009e74 <USBD_Get_USB_Status>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009dd2:	7dbb      	ldrb	r3, [r7, #22]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3718      	adds	r7, #24
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b086      	sub	sp, #24
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	607a      	str	r2, [r7, #4]
 8009de6:	603b      	str	r3, [r7, #0]
 8009de8:	460b      	mov	r3, r1
 8009dea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dec:	2300      	movs	r3, #0
 8009dee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009df0:	2300      	movs	r3, #0
 8009df2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009dfa:	7af9      	ldrb	r1, [r7, #11]
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	f7fa f9ee 	bl	80041e0 <HAL_PCD_EP_Receive>
 8009e04:	4603      	mov	r3, r0
 8009e06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e08:	7dfb      	ldrb	r3, [r7, #23]
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f000 f832 	bl	8009e74 <USBD_Get_USB_Status>
 8009e10:	4603      	mov	r3, r0
 8009e12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e14:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3718      	adds	r7, #24
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b082      	sub	sp, #8
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
 8009e26:	460b      	mov	r3, r1
 8009e28:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e30:	78fa      	ldrb	r2, [r7, #3]
 8009e32:	4611      	mov	r1, r2
 8009e34:	4618      	mov	r0, r3
 8009e36:	f7fa fa1e 	bl	8004276 <HAL_PCD_EP_GetRxCount>
 8009e3a:	4603      	mov	r3, r0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3708      	adds	r7, #8
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009e4c:	4b03      	ldr	r3, [pc, #12]	; (8009e5c <USBD_static_malloc+0x18>)
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	370c      	adds	r7, #12
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop
 8009e5c:	2000061c 	.word	0x2000061c

08009e60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]

}
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e82:	79fb      	ldrb	r3, [r7, #7]
 8009e84:	2b03      	cmp	r3, #3
 8009e86:	d817      	bhi.n	8009eb8 <USBD_Get_USB_Status+0x44>
 8009e88:	a201      	add	r2, pc, #4	; (adr r2, 8009e90 <USBD_Get_USB_Status+0x1c>)
 8009e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8e:	bf00      	nop
 8009e90:	08009ea1 	.word	0x08009ea1
 8009e94:	08009ea7 	.word	0x08009ea7
 8009e98:	08009ead 	.word	0x08009ead
 8009e9c:	08009eb3 	.word	0x08009eb3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ea4:	e00b      	b.n	8009ebe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ea6:	2303      	movs	r3, #3
 8009ea8:	73fb      	strb	r3, [r7, #15]
    break;
 8009eaa:	e008      	b.n	8009ebe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009eac:	2301      	movs	r3, #1
 8009eae:	73fb      	strb	r3, [r7, #15]
    break;
 8009eb0:	e005      	b.n	8009ebe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	73fb      	strb	r3, [r7, #15]
    break;
 8009eb6:	e002      	b.n	8009ebe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	73fb      	strb	r3, [r7, #15]
    break;
 8009ebc:	bf00      	nop
  }
  return usb_status;
 8009ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3714      	adds	r7, #20
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <__errno>:
 8009ecc:	4b01      	ldr	r3, [pc, #4]	; (8009ed4 <__errno+0x8>)
 8009ece:	6818      	ldr	r0, [r3, #0]
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	20000188 	.word	0x20000188

08009ed8 <__libc_init_array>:
 8009ed8:	b570      	push	{r4, r5, r6, lr}
 8009eda:	4d0d      	ldr	r5, [pc, #52]	; (8009f10 <__libc_init_array+0x38>)
 8009edc:	4c0d      	ldr	r4, [pc, #52]	; (8009f14 <__libc_init_array+0x3c>)
 8009ede:	1b64      	subs	r4, r4, r5
 8009ee0:	10a4      	asrs	r4, r4, #2
 8009ee2:	2600      	movs	r6, #0
 8009ee4:	42a6      	cmp	r6, r4
 8009ee6:	d109      	bne.n	8009efc <__libc_init_array+0x24>
 8009ee8:	4d0b      	ldr	r5, [pc, #44]	; (8009f18 <__libc_init_array+0x40>)
 8009eea:	4c0c      	ldr	r4, [pc, #48]	; (8009f1c <__libc_init_array+0x44>)
 8009eec:	f001 fcb2 	bl	800b854 <_init>
 8009ef0:	1b64      	subs	r4, r4, r5
 8009ef2:	10a4      	asrs	r4, r4, #2
 8009ef4:	2600      	movs	r6, #0
 8009ef6:	42a6      	cmp	r6, r4
 8009ef8:	d105      	bne.n	8009f06 <__libc_init_array+0x2e>
 8009efa:	bd70      	pop	{r4, r5, r6, pc}
 8009efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f00:	4798      	blx	r3
 8009f02:	3601      	adds	r6, #1
 8009f04:	e7ee      	b.n	8009ee4 <__libc_init_array+0xc>
 8009f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f0a:	4798      	blx	r3
 8009f0c:	3601      	adds	r6, #1
 8009f0e:	e7f2      	b.n	8009ef6 <__libc_init_array+0x1e>
 8009f10:	0800c860 	.word	0x0800c860
 8009f14:	0800c860 	.word	0x0800c860
 8009f18:	0800c860 	.word	0x0800c860
 8009f1c:	0800c864 	.word	0x0800c864

08009f20 <memcpy>:
 8009f20:	440a      	add	r2, r1
 8009f22:	4291      	cmp	r1, r2
 8009f24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009f28:	d100      	bne.n	8009f2c <memcpy+0xc>
 8009f2a:	4770      	bx	lr
 8009f2c:	b510      	push	{r4, lr}
 8009f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f36:	4291      	cmp	r1, r2
 8009f38:	d1f9      	bne.n	8009f2e <memcpy+0xe>
 8009f3a:	bd10      	pop	{r4, pc}

08009f3c <memset>:
 8009f3c:	4402      	add	r2, r0
 8009f3e:	4603      	mov	r3, r0
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d100      	bne.n	8009f46 <memset+0xa>
 8009f44:	4770      	bx	lr
 8009f46:	f803 1b01 	strb.w	r1, [r3], #1
 8009f4a:	e7f9      	b.n	8009f40 <memset+0x4>

08009f4c <siprintf>:
 8009f4c:	b40e      	push	{r1, r2, r3}
 8009f4e:	b500      	push	{lr}
 8009f50:	b09c      	sub	sp, #112	; 0x70
 8009f52:	ab1d      	add	r3, sp, #116	; 0x74
 8009f54:	9002      	str	r0, [sp, #8]
 8009f56:	9006      	str	r0, [sp, #24]
 8009f58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f5c:	4809      	ldr	r0, [pc, #36]	; (8009f84 <siprintf+0x38>)
 8009f5e:	9107      	str	r1, [sp, #28]
 8009f60:	9104      	str	r1, [sp, #16]
 8009f62:	4909      	ldr	r1, [pc, #36]	; (8009f88 <siprintf+0x3c>)
 8009f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f68:	9105      	str	r1, [sp, #20]
 8009f6a:	6800      	ldr	r0, [r0, #0]
 8009f6c:	9301      	str	r3, [sp, #4]
 8009f6e:	a902      	add	r1, sp, #8
 8009f70:	f000 f868 	bl	800a044 <_svfiprintf_r>
 8009f74:	9b02      	ldr	r3, [sp, #8]
 8009f76:	2200      	movs	r2, #0
 8009f78:	701a      	strb	r2, [r3, #0]
 8009f7a:	b01c      	add	sp, #112	; 0x70
 8009f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f80:	b003      	add	sp, #12
 8009f82:	4770      	bx	lr
 8009f84:	20000188 	.word	0x20000188
 8009f88:	ffff0208 	.word	0xffff0208

08009f8c <__ssputs_r>:
 8009f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f90:	688e      	ldr	r6, [r1, #8]
 8009f92:	429e      	cmp	r6, r3
 8009f94:	4682      	mov	sl, r0
 8009f96:	460c      	mov	r4, r1
 8009f98:	4690      	mov	r8, r2
 8009f9a:	461f      	mov	r7, r3
 8009f9c:	d838      	bhi.n	800a010 <__ssputs_r+0x84>
 8009f9e:	898a      	ldrh	r2, [r1, #12]
 8009fa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fa4:	d032      	beq.n	800a00c <__ssputs_r+0x80>
 8009fa6:	6825      	ldr	r5, [r4, #0]
 8009fa8:	6909      	ldr	r1, [r1, #16]
 8009faa:	eba5 0901 	sub.w	r9, r5, r1
 8009fae:	6965      	ldr	r5, [r4, #20]
 8009fb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fb8:	3301      	adds	r3, #1
 8009fba:	444b      	add	r3, r9
 8009fbc:	106d      	asrs	r5, r5, #1
 8009fbe:	429d      	cmp	r5, r3
 8009fc0:	bf38      	it	cc
 8009fc2:	461d      	movcc	r5, r3
 8009fc4:	0553      	lsls	r3, r2, #21
 8009fc6:	d531      	bpl.n	800a02c <__ssputs_r+0xa0>
 8009fc8:	4629      	mov	r1, r5
 8009fca:	f000 fb39 	bl	800a640 <_malloc_r>
 8009fce:	4606      	mov	r6, r0
 8009fd0:	b950      	cbnz	r0, 8009fe8 <__ssputs_r+0x5c>
 8009fd2:	230c      	movs	r3, #12
 8009fd4:	f8ca 3000 	str.w	r3, [sl]
 8009fd8:	89a3      	ldrh	r3, [r4, #12]
 8009fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fde:	81a3      	strh	r3, [r4, #12]
 8009fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fe8:	6921      	ldr	r1, [r4, #16]
 8009fea:	464a      	mov	r2, r9
 8009fec:	f7ff ff98 	bl	8009f20 <memcpy>
 8009ff0:	89a3      	ldrh	r3, [r4, #12]
 8009ff2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ffa:	81a3      	strh	r3, [r4, #12]
 8009ffc:	6126      	str	r6, [r4, #16]
 8009ffe:	6165      	str	r5, [r4, #20]
 800a000:	444e      	add	r6, r9
 800a002:	eba5 0509 	sub.w	r5, r5, r9
 800a006:	6026      	str	r6, [r4, #0]
 800a008:	60a5      	str	r5, [r4, #8]
 800a00a:	463e      	mov	r6, r7
 800a00c:	42be      	cmp	r6, r7
 800a00e:	d900      	bls.n	800a012 <__ssputs_r+0x86>
 800a010:	463e      	mov	r6, r7
 800a012:	4632      	mov	r2, r6
 800a014:	6820      	ldr	r0, [r4, #0]
 800a016:	4641      	mov	r1, r8
 800a018:	f000 faa8 	bl	800a56c <memmove>
 800a01c:	68a3      	ldr	r3, [r4, #8]
 800a01e:	6822      	ldr	r2, [r4, #0]
 800a020:	1b9b      	subs	r3, r3, r6
 800a022:	4432      	add	r2, r6
 800a024:	60a3      	str	r3, [r4, #8]
 800a026:	6022      	str	r2, [r4, #0]
 800a028:	2000      	movs	r0, #0
 800a02a:	e7db      	b.n	8009fe4 <__ssputs_r+0x58>
 800a02c:	462a      	mov	r2, r5
 800a02e:	f000 fb61 	bl	800a6f4 <_realloc_r>
 800a032:	4606      	mov	r6, r0
 800a034:	2800      	cmp	r0, #0
 800a036:	d1e1      	bne.n	8009ffc <__ssputs_r+0x70>
 800a038:	6921      	ldr	r1, [r4, #16]
 800a03a:	4650      	mov	r0, sl
 800a03c:	f000 fab0 	bl	800a5a0 <_free_r>
 800a040:	e7c7      	b.n	8009fd2 <__ssputs_r+0x46>
	...

0800a044 <_svfiprintf_r>:
 800a044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a048:	4698      	mov	r8, r3
 800a04a:	898b      	ldrh	r3, [r1, #12]
 800a04c:	061b      	lsls	r3, r3, #24
 800a04e:	b09d      	sub	sp, #116	; 0x74
 800a050:	4607      	mov	r7, r0
 800a052:	460d      	mov	r5, r1
 800a054:	4614      	mov	r4, r2
 800a056:	d50e      	bpl.n	800a076 <_svfiprintf_r+0x32>
 800a058:	690b      	ldr	r3, [r1, #16]
 800a05a:	b963      	cbnz	r3, 800a076 <_svfiprintf_r+0x32>
 800a05c:	2140      	movs	r1, #64	; 0x40
 800a05e:	f000 faef 	bl	800a640 <_malloc_r>
 800a062:	6028      	str	r0, [r5, #0]
 800a064:	6128      	str	r0, [r5, #16]
 800a066:	b920      	cbnz	r0, 800a072 <_svfiprintf_r+0x2e>
 800a068:	230c      	movs	r3, #12
 800a06a:	603b      	str	r3, [r7, #0]
 800a06c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a070:	e0d1      	b.n	800a216 <_svfiprintf_r+0x1d2>
 800a072:	2340      	movs	r3, #64	; 0x40
 800a074:	616b      	str	r3, [r5, #20]
 800a076:	2300      	movs	r3, #0
 800a078:	9309      	str	r3, [sp, #36]	; 0x24
 800a07a:	2320      	movs	r3, #32
 800a07c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a080:	f8cd 800c 	str.w	r8, [sp, #12]
 800a084:	2330      	movs	r3, #48	; 0x30
 800a086:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a230 <_svfiprintf_r+0x1ec>
 800a08a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a08e:	f04f 0901 	mov.w	r9, #1
 800a092:	4623      	mov	r3, r4
 800a094:	469a      	mov	sl, r3
 800a096:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a09a:	b10a      	cbz	r2, 800a0a0 <_svfiprintf_r+0x5c>
 800a09c:	2a25      	cmp	r2, #37	; 0x25
 800a09e:	d1f9      	bne.n	800a094 <_svfiprintf_r+0x50>
 800a0a0:	ebba 0b04 	subs.w	fp, sl, r4
 800a0a4:	d00b      	beq.n	800a0be <_svfiprintf_r+0x7a>
 800a0a6:	465b      	mov	r3, fp
 800a0a8:	4622      	mov	r2, r4
 800a0aa:	4629      	mov	r1, r5
 800a0ac:	4638      	mov	r0, r7
 800a0ae:	f7ff ff6d 	bl	8009f8c <__ssputs_r>
 800a0b2:	3001      	adds	r0, #1
 800a0b4:	f000 80aa 	beq.w	800a20c <_svfiprintf_r+0x1c8>
 800a0b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0ba:	445a      	add	r2, fp
 800a0bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a0be:	f89a 3000 	ldrb.w	r3, [sl]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	f000 80a2 	beq.w	800a20c <_svfiprintf_r+0x1c8>
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0d2:	f10a 0a01 	add.w	sl, sl, #1
 800a0d6:	9304      	str	r3, [sp, #16]
 800a0d8:	9307      	str	r3, [sp, #28]
 800a0da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0de:	931a      	str	r3, [sp, #104]	; 0x68
 800a0e0:	4654      	mov	r4, sl
 800a0e2:	2205      	movs	r2, #5
 800a0e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0e8:	4851      	ldr	r0, [pc, #324]	; (800a230 <_svfiprintf_r+0x1ec>)
 800a0ea:	f7f6 f879 	bl	80001e0 <memchr>
 800a0ee:	9a04      	ldr	r2, [sp, #16]
 800a0f0:	b9d8      	cbnz	r0, 800a12a <_svfiprintf_r+0xe6>
 800a0f2:	06d0      	lsls	r0, r2, #27
 800a0f4:	bf44      	itt	mi
 800a0f6:	2320      	movmi	r3, #32
 800a0f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0fc:	0711      	lsls	r1, r2, #28
 800a0fe:	bf44      	itt	mi
 800a100:	232b      	movmi	r3, #43	; 0x2b
 800a102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a106:	f89a 3000 	ldrb.w	r3, [sl]
 800a10a:	2b2a      	cmp	r3, #42	; 0x2a
 800a10c:	d015      	beq.n	800a13a <_svfiprintf_r+0xf6>
 800a10e:	9a07      	ldr	r2, [sp, #28]
 800a110:	4654      	mov	r4, sl
 800a112:	2000      	movs	r0, #0
 800a114:	f04f 0c0a 	mov.w	ip, #10
 800a118:	4621      	mov	r1, r4
 800a11a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a11e:	3b30      	subs	r3, #48	; 0x30
 800a120:	2b09      	cmp	r3, #9
 800a122:	d94e      	bls.n	800a1c2 <_svfiprintf_r+0x17e>
 800a124:	b1b0      	cbz	r0, 800a154 <_svfiprintf_r+0x110>
 800a126:	9207      	str	r2, [sp, #28]
 800a128:	e014      	b.n	800a154 <_svfiprintf_r+0x110>
 800a12a:	eba0 0308 	sub.w	r3, r0, r8
 800a12e:	fa09 f303 	lsl.w	r3, r9, r3
 800a132:	4313      	orrs	r3, r2
 800a134:	9304      	str	r3, [sp, #16]
 800a136:	46a2      	mov	sl, r4
 800a138:	e7d2      	b.n	800a0e0 <_svfiprintf_r+0x9c>
 800a13a:	9b03      	ldr	r3, [sp, #12]
 800a13c:	1d19      	adds	r1, r3, #4
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	9103      	str	r1, [sp, #12]
 800a142:	2b00      	cmp	r3, #0
 800a144:	bfbb      	ittet	lt
 800a146:	425b      	neglt	r3, r3
 800a148:	f042 0202 	orrlt.w	r2, r2, #2
 800a14c:	9307      	strge	r3, [sp, #28]
 800a14e:	9307      	strlt	r3, [sp, #28]
 800a150:	bfb8      	it	lt
 800a152:	9204      	strlt	r2, [sp, #16]
 800a154:	7823      	ldrb	r3, [r4, #0]
 800a156:	2b2e      	cmp	r3, #46	; 0x2e
 800a158:	d10c      	bne.n	800a174 <_svfiprintf_r+0x130>
 800a15a:	7863      	ldrb	r3, [r4, #1]
 800a15c:	2b2a      	cmp	r3, #42	; 0x2a
 800a15e:	d135      	bne.n	800a1cc <_svfiprintf_r+0x188>
 800a160:	9b03      	ldr	r3, [sp, #12]
 800a162:	1d1a      	adds	r2, r3, #4
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	9203      	str	r2, [sp, #12]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	bfb8      	it	lt
 800a16c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a170:	3402      	adds	r4, #2
 800a172:	9305      	str	r3, [sp, #20]
 800a174:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a240 <_svfiprintf_r+0x1fc>
 800a178:	7821      	ldrb	r1, [r4, #0]
 800a17a:	2203      	movs	r2, #3
 800a17c:	4650      	mov	r0, sl
 800a17e:	f7f6 f82f 	bl	80001e0 <memchr>
 800a182:	b140      	cbz	r0, 800a196 <_svfiprintf_r+0x152>
 800a184:	2340      	movs	r3, #64	; 0x40
 800a186:	eba0 000a 	sub.w	r0, r0, sl
 800a18a:	fa03 f000 	lsl.w	r0, r3, r0
 800a18e:	9b04      	ldr	r3, [sp, #16]
 800a190:	4303      	orrs	r3, r0
 800a192:	3401      	adds	r4, #1
 800a194:	9304      	str	r3, [sp, #16]
 800a196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a19a:	4826      	ldr	r0, [pc, #152]	; (800a234 <_svfiprintf_r+0x1f0>)
 800a19c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1a0:	2206      	movs	r2, #6
 800a1a2:	f7f6 f81d 	bl	80001e0 <memchr>
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	d038      	beq.n	800a21c <_svfiprintf_r+0x1d8>
 800a1aa:	4b23      	ldr	r3, [pc, #140]	; (800a238 <_svfiprintf_r+0x1f4>)
 800a1ac:	bb1b      	cbnz	r3, 800a1f6 <_svfiprintf_r+0x1b2>
 800a1ae:	9b03      	ldr	r3, [sp, #12]
 800a1b0:	3307      	adds	r3, #7
 800a1b2:	f023 0307 	bic.w	r3, r3, #7
 800a1b6:	3308      	adds	r3, #8
 800a1b8:	9303      	str	r3, [sp, #12]
 800a1ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1bc:	4433      	add	r3, r6
 800a1be:	9309      	str	r3, [sp, #36]	; 0x24
 800a1c0:	e767      	b.n	800a092 <_svfiprintf_r+0x4e>
 800a1c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1c6:	460c      	mov	r4, r1
 800a1c8:	2001      	movs	r0, #1
 800a1ca:	e7a5      	b.n	800a118 <_svfiprintf_r+0xd4>
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	3401      	adds	r4, #1
 800a1d0:	9305      	str	r3, [sp, #20]
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	f04f 0c0a 	mov.w	ip, #10
 800a1d8:	4620      	mov	r0, r4
 800a1da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1de:	3a30      	subs	r2, #48	; 0x30
 800a1e0:	2a09      	cmp	r2, #9
 800a1e2:	d903      	bls.n	800a1ec <_svfiprintf_r+0x1a8>
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d0c5      	beq.n	800a174 <_svfiprintf_r+0x130>
 800a1e8:	9105      	str	r1, [sp, #20]
 800a1ea:	e7c3      	b.n	800a174 <_svfiprintf_r+0x130>
 800a1ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e7f0      	b.n	800a1d8 <_svfiprintf_r+0x194>
 800a1f6:	ab03      	add	r3, sp, #12
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	462a      	mov	r2, r5
 800a1fc:	4b0f      	ldr	r3, [pc, #60]	; (800a23c <_svfiprintf_r+0x1f8>)
 800a1fe:	a904      	add	r1, sp, #16
 800a200:	4638      	mov	r0, r7
 800a202:	f3af 8000 	nop.w
 800a206:	1c42      	adds	r2, r0, #1
 800a208:	4606      	mov	r6, r0
 800a20a:	d1d6      	bne.n	800a1ba <_svfiprintf_r+0x176>
 800a20c:	89ab      	ldrh	r3, [r5, #12]
 800a20e:	065b      	lsls	r3, r3, #25
 800a210:	f53f af2c 	bmi.w	800a06c <_svfiprintf_r+0x28>
 800a214:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a216:	b01d      	add	sp, #116	; 0x74
 800a218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a21c:	ab03      	add	r3, sp, #12
 800a21e:	9300      	str	r3, [sp, #0]
 800a220:	462a      	mov	r2, r5
 800a222:	4b06      	ldr	r3, [pc, #24]	; (800a23c <_svfiprintf_r+0x1f8>)
 800a224:	a904      	add	r1, sp, #16
 800a226:	4638      	mov	r0, r7
 800a228:	f000 f87a 	bl	800a320 <_printf_i>
 800a22c:	e7eb      	b.n	800a206 <_svfiprintf_r+0x1c2>
 800a22e:	bf00      	nop
 800a230:	0800c64c 	.word	0x0800c64c
 800a234:	0800c656 	.word	0x0800c656
 800a238:	00000000 	.word	0x00000000
 800a23c:	08009f8d 	.word	0x08009f8d
 800a240:	0800c652 	.word	0x0800c652

0800a244 <_printf_common>:
 800a244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a248:	4616      	mov	r6, r2
 800a24a:	4699      	mov	r9, r3
 800a24c:	688a      	ldr	r2, [r1, #8]
 800a24e:	690b      	ldr	r3, [r1, #16]
 800a250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a254:	4293      	cmp	r3, r2
 800a256:	bfb8      	it	lt
 800a258:	4613      	movlt	r3, r2
 800a25a:	6033      	str	r3, [r6, #0]
 800a25c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a260:	4607      	mov	r7, r0
 800a262:	460c      	mov	r4, r1
 800a264:	b10a      	cbz	r2, 800a26a <_printf_common+0x26>
 800a266:	3301      	adds	r3, #1
 800a268:	6033      	str	r3, [r6, #0]
 800a26a:	6823      	ldr	r3, [r4, #0]
 800a26c:	0699      	lsls	r1, r3, #26
 800a26e:	bf42      	ittt	mi
 800a270:	6833      	ldrmi	r3, [r6, #0]
 800a272:	3302      	addmi	r3, #2
 800a274:	6033      	strmi	r3, [r6, #0]
 800a276:	6825      	ldr	r5, [r4, #0]
 800a278:	f015 0506 	ands.w	r5, r5, #6
 800a27c:	d106      	bne.n	800a28c <_printf_common+0x48>
 800a27e:	f104 0a19 	add.w	sl, r4, #25
 800a282:	68e3      	ldr	r3, [r4, #12]
 800a284:	6832      	ldr	r2, [r6, #0]
 800a286:	1a9b      	subs	r3, r3, r2
 800a288:	42ab      	cmp	r3, r5
 800a28a:	dc26      	bgt.n	800a2da <_printf_common+0x96>
 800a28c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a290:	1e13      	subs	r3, r2, #0
 800a292:	6822      	ldr	r2, [r4, #0]
 800a294:	bf18      	it	ne
 800a296:	2301      	movne	r3, #1
 800a298:	0692      	lsls	r2, r2, #26
 800a29a:	d42b      	bmi.n	800a2f4 <_printf_common+0xb0>
 800a29c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2a0:	4649      	mov	r1, r9
 800a2a2:	4638      	mov	r0, r7
 800a2a4:	47c0      	blx	r8
 800a2a6:	3001      	adds	r0, #1
 800a2a8:	d01e      	beq.n	800a2e8 <_printf_common+0xa4>
 800a2aa:	6823      	ldr	r3, [r4, #0]
 800a2ac:	68e5      	ldr	r5, [r4, #12]
 800a2ae:	6832      	ldr	r2, [r6, #0]
 800a2b0:	f003 0306 	and.w	r3, r3, #6
 800a2b4:	2b04      	cmp	r3, #4
 800a2b6:	bf08      	it	eq
 800a2b8:	1aad      	subeq	r5, r5, r2
 800a2ba:	68a3      	ldr	r3, [r4, #8]
 800a2bc:	6922      	ldr	r2, [r4, #16]
 800a2be:	bf0c      	ite	eq
 800a2c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2c4:	2500      	movne	r5, #0
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	bfc4      	itt	gt
 800a2ca:	1a9b      	subgt	r3, r3, r2
 800a2cc:	18ed      	addgt	r5, r5, r3
 800a2ce:	2600      	movs	r6, #0
 800a2d0:	341a      	adds	r4, #26
 800a2d2:	42b5      	cmp	r5, r6
 800a2d4:	d11a      	bne.n	800a30c <_printf_common+0xc8>
 800a2d6:	2000      	movs	r0, #0
 800a2d8:	e008      	b.n	800a2ec <_printf_common+0xa8>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	4652      	mov	r2, sl
 800a2de:	4649      	mov	r1, r9
 800a2e0:	4638      	mov	r0, r7
 800a2e2:	47c0      	blx	r8
 800a2e4:	3001      	adds	r0, #1
 800a2e6:	d103      	bne.n	800a2f0 <_printf_common+0xac>
 800a2e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2f0:	3501      	adds	r5, #1
 800a2f2:	e7c6      	b.n	800a282 <_printf_common+0x3e>
 800a2f4:	18e1      	adds	r1, r4, r3
 800a2f6:	1c5a      	adds	r2, r3, #1
 800a2f8:	2030      	movs	r0, #48	; 0x30
 800a2fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2fe:	4422      	add	r2, r4
 800a300:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a304:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a308:	3302      	adds	r3, #2
 800a30a:	e7c7      	b.n	800a29c <_printf_common+0x58>
 800a30c:	2301      	movs	r3, #1
 800a30e:	4622      	mov	r2, r4
 800a310:	4649      	mov	r1, r9
 800a312:	4638      	mov	r0, r7
 800a314:	47c0      	blx	r8
 800a316:	3001      	adds	r0, #1
 800a318:	d0e6      	beq.n	800a2e8 <_printf_common+0xa4>
 800a31a:	3601      	adds	r6, #1
 800a31c:	e7d9      	b.n	800a2d2 <_printf_common+0x8e>
	...

0800a320 <_printf_i>:
 800a320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a324:	460c      	mov	r4, r1
 800a326:	4691      	mov	r9, r2
 800a328:	7e27      	ldrb	r7, [r4, #24]
 800a32a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a32c:	2f78      	cmp	r7, #120	; 0x78
 800a32e:	4680      	mov	r8, r0
 800a330:	469a      	mov	sl, r3
 800a332:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a336:	d807      	bhi.n	800a348 <_printf_i+0x28>
 800a338:	2f62      	cmp	r7, #98	; 0x62
 800a33a:	d80a      	bhi.n	800a352 <_printf_i+0x32>
 800a33c:	2f00      	cmp	r7, #0
 800a33e:	f000 80d8 	beq.w	800a4f2 <_printf_i+0x1d2>
 800a342:	2f58      	cmp	r7, #88	; 0x58
 800a344:	f000 80a3 	beq.w	800a48e <_printf_i+0x16e>
 800a348:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a34c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a350:	e03a      	b.n	800a3c8 <_printf_i+0xa8>
 800a352:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a356:	2b15      	cmp	r3, #21
 800a358:	d8f6      	bhi.n	800a348 <_printf_i+0x28>
 800a35a:	a001      	add	r0, pc, #4	; (adr r0, 800a360 <_printf_i+0x40>)
 800a35c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a360:	0800a3b9 	.word	0x0800a3b9
 800a364:	0800a3cd 	.word	0x0800a3cd
 800a368:	0800a349 	.word	0x0800a349
 800a36c:	0800a349 	.word	0x0800a349
 800a370:	0800a349 	.word	0x0800a349
 800a374:	0800a349 	.word	0x0800a349
 800a378:	0800a3cd 	.word	0x0800a3cd
 800a37c:	0800a349 	.word	0x0800a349
 800a380:	0800a349 	.word	0x0800a349
 800a384:	0800a349 	.word	0x0800a349
 800a388:	0800a349 	.word	0x0800a349
 800a38c:	0800a4d9 	.word	0x0800a4d9
 800a390:	0800a3fd 	.word	0x0800a3fd
 800a394:	0800a4bb 	.word	0x0800a4bb
 800a398:	0800a349 	.word	0x0800a349
 800a39c:	0800a349 	.word	0x0800a349
 800a3a0:	0800a4fb 	.word	0x0800a4fb
 800a3a4:	0800a349 	.word	0x0800a349
 800a3a8:	0800a3fd 	.word	0x0800a3fd
 800a3ac:	0800a349 	.word	0x0800a349
 800a3b0:	0800a349 	.word	0x0800a349
 800a3b4:	0800a4c3 	.word	0x0800a4c3
 800a3b8:	680b      	ldr	r3, [r1, #0]
 800a3ba:	1d1a      	adds	r2, r3, #4
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	600a      	str	r2, [r1, #0]
 800a3c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a3c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e0a3      	b.n	800a514 <_printf_i+0x1f4>
 800a3cc:	6825      	ldr	r5, [r4, #0]
 800a3ce:	6808      	ldr	r0, [r1, #0]
 800a3d0:	062e      	lsls	r6, r5, #24
 800a3d2:	f100 0304 	add.w	r3, r0, #4
 800a3d6:	d50a      	bpl.n	800a3ee <_printf_i+0xce>
 800a3d8:	6805      	ldr	r5, [r0, #0]
 800a3da:	600b      	str	r3, [r1, #0]
 800a3dc:	2d00      	cmp	r5, #0
 800a3de:	da03      	bge.n	800a3e8 <_printf_i+0xc8>
 800a3e0:	232d      	movs	r3, #45	; 0x2d
 800a3e2:	426d      	negs	r5, r5
 800a3e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3e8:	485e      	ldr	r0, [pc, #376]	; (800a564 <_printf_i+0x244>)
 800a3ea:	230a      	movs	r3, #10
 800a3ec:	e019      	b.n	800a422 <_printf_i+0x102>
 800a3ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a3f2:	6805      	ldr	r5, [r0, #0]
 800a3f4:	600b      	str	r3, [r1, #0]
 800a3f6:	bf18      	it	ne
 800a3f8:	b22d      	sxthne	r5, r5
 800a3fa:	e7ef      	b.n	800a3dc <_printf_i+0xbc>
 800a3fc:	680b      	ldr	r3, [r1, #0]
 800a3fe:	6825      	ldr	r5, [r4, #0]
 800a400:	1d18      	adds	r0, r3, #4
 800a402:	6008      	str	r0, [r1, #0]
 800a404:	0628      	lsls	r0, r5, #24
 800a406:	d501      	bpl.n	800a40c <_printf_i+0xec>
 800a408:	681d      	ldr	r5, [r3, #0]
 800a40a:	e002      	b.n	800a412 <_printf_i+0xf2>
 800a40c:	0669      	lsls	r1, r5, #25
 800a40e:	d5fb      	bpl.n	800a408 <_printf_i+0xe8>
 800a410:	881d      	ldrh	r5, [r3, #0]
 800a412:	4854      	ldr	r0, [pc, #336]	; (800a564 <_printf_i+0x244>)
 800a414:	2f6f      	cmp	r7, #111	; 0x6f
 800a416:	bf0c      	ite	eq
 800a418:	2308      	moveq	r3, #8
 800a41a:	230a      	movne	r3, #10
 800a41c:	2100      	movs	r1, #0
 800a41e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a422:	6866      	ldr	r6, [r4, #4]
 800a424:	60a6      	str	r6, [r4, #8]
 800a426:	2e00      	cmp	r6, #0
 800a428:	bfa2      	ittt	ge
 800a42a:	6821      	ldrge	r1, [r4, #0]
 800a42c:	f021 0104 	bicge.w	r1, r1, #4
 800a430:	6021      	strge	r1, [r4, #0]
 800a432:	b90d      	cbnz	r5, 800a438 <_printf_i+0x118>
 800a434:	2e00      	cmp	r6, #0
 800a436:	d04d      	beq.n	800a4d4 <_printf_i+0x1b4>
 800a438:	4616      	mov	r6, r2
 800a43a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a43e:	fb03 5711 	mls	r7, r3, r1, r5
 800a442:	5dc7      	ldrb	r7, [r0, r7]
 800a444:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a448:	462f      	mov	r7, r5
 800a44a:	42bb      	cmp	r3, r7
 800a44c:	460d      	mov	r5, r1
 800a44e:	d9f4      	bls.n	800a43a <_printf_i+0x11a>
 800a450:	2b08      	cmp	r3, #8
 800a452:	d10b      	bne.n	800a46c <_printf_i+0x14c>
 800a454:	6823      	ldr	r3, [r4, #0]
 800a456:	07df      	lsls	r7, r3, #31
 800a458:	d508      	bpl.n	800a46c <_printf_i+0x14c>
 800a45a:	6923      	ldr	r3, [r4, #16]
 800a45c:	6861      	ldr	r1, [r4, #4]
 800a45e:	4299      	cmp	r1, r3
 800a460:	bfde      	ittt	le
 800a462:	2330      	movle	r3, #48	; 0x30
 800a464:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a468:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a46c:	1b92      	subs	r2, r2, r6
 800a46e:	6122      	str	r2, [r4, #16]
 800a470:	f8cd a000 	str.w	sl, [sp]
 800a474:	464b      	mov	r3, r9
 800a476:	aa03      	add	r2, sp, #12
 800a478:	4621      	mov	r1, r4
 800a47a:	4640      	mov	r0, r8
 800a47c:	f7ff fee2 	bl	800a244 <_printf_common>
 800a480:	3001      	adds	r0, #1
 800a482:	d14c      	bne.n	800a51e <_printf_i+0x1fe>
 800a484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a488:	b004      	add	sp, #16
 800a48a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a48e:	4835      	ldr	r0, [pc, #212]	; (800a564 <_printf_i+0x244>)
 800a490:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a494:	6823      	ldr	r3, [r4, #0]
 800a496:	680e      	ldr	r6, [r1, #0]
 800a498:	061f      	lsls	r7, r3, #24
 800a49a:	f856 5b04 	ldr.w	r5, [r6], #4
 800a49e:	600e      	str	r6, [r1, #0]
 800a4a0:	d514      	bpl.n	800a4cc <_printf_i+0x1ac>
 800a4a2:	07d9      	lsls	r1, r3, #31
 800a4a4:	bf44      	itt	mi
 800a4a6:	f043 0320 	orrmi.w	r3, r3, #32
 800a4aa:	6023      	strmi	r3, [r4, #0]
 800a4ac:	b91d      	cbnz	r5, 800a4b6 <_printf_i+0x196>
 800a4ae:	6823      	ldr	r3, [r4, #0]
 800a4b0:	f023 0320 	bic.w	r3, r3, #32
 800a4b4:	6023      	str	r3, [r4, #0]
 800a4b6:	2310      	movs	r3, #16
 800a4b8:	e7b0      	b.n	800a41c <_printf_i+0xfc>
 800a4ba:	6823      	ldr	r3, [r4, #0]
 800a4bc:	f043 0320 	orr.w	r3, r3, #32
 800a4c0:	6023      	str	r3, [r4, #0]
 800a4c2:	2378      	movs	r3, #120	; 0x78
 800a4c4:	4828      	ldr	r0, [pc, #160]	; (800a568 <_printf_i+0x248>)
 800a4c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a4ca:	e7e3      	b.n	800a494 <_printf_i+0x174>
 800a4cc:	065e      	lsls	r6, r3, #25
 800a4ce:	bf48      	it	mi
 800a4d0:	b2ad      	uxthmi	r5, r5
 800a4d2:	e7e6      	b.n	800a4a2 <_printf_i+0x182>
 800a4d4:	4616      	mov	r6, r2
 800a4d6:	e7bb      	b.n	800a450 <_printf_i+0x130>
 800a4d8:	680b      	ldr	r3, [r1, #0]
 800a4da:	6826      	ldr	r6, [r4, #0]
 800a4dc:	6960      	ldr	r0, [r4, #20]
 800a4de:	1d1d      	adds	r5, r3, #4
 800a4e0:	600d      	str	r5, [r1, #0]
 800a4e2:	0635      	lsls	r5, r6, #24
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	d501      	bpl.n	800a4ec <_printf_i+0x1cc>
 800a4e8:	6018      	str	r0, [r3, #0]
 800a4ea:	e002      	b.n	800a4f2 <_printf_i+0x1d2>
 800a4ec:	0671      	lsls	r1, r6, #25
 800a4ee:	d5fb      	bpl.n	800a4e8 <_printf_i+0x1c8>
 800a4f0:	8018      	strh	r0, [r3, #0]
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	6123      	str	r3, [r4, #16]
 800a4f6:	4616      	mov	r6, r2
 800a4f8:	e7ba      	b.n	800a470 <_printf_i+0x150>
 800a4fa:	680b      	ldr	r3, [r1, #0]
 800a4fc:	1d1a      	adds	r2, r3, #4
 800a4fe:	600a      	str	r2, [r1, #0]
 800a500:	681e      	ldr	r6, [r3, #0]
 800a502:	6862      	ldr	r2, [r4, #4]
 800a504:	2100      	movs	r1, #0
 800a506:	4630      	mov	r0, r6
 800a508:	f7f5 fe6a 	bl	80001e0 <memchr>
 800a50c:	b108      	cbz	r0, 800a512 <_printf_i+0x1f2>
 800a50e:	1b80      	subs	r0, r0, r6
 800a510:	6060      	str	r0, [r4, #4]
 800a512:	6863      	ldr	r3, [r4, #4]
 800a514:	6123      	str	r3, [r4, #16]
 800a516:	2300      	movs	r3, #0
 800a518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a51c:	e7a8      	b.n	800a470 <_printf_i+0x150>
 800a51e:	6923      	ldr	r3, [r4, #16]
 800a520:	4632      	mov	r2, r6
 800a522:	4649      	mov	r1, r9
 800a524:	4640      	mov	r0, r8
 800a526:	47d0      	blx	sl
 800a528:	3001      	adds	r0, #1
 800a52a:	d0ab      	beq.n	800a484 <_printf_i+0x164>
 800a52c:	6823      	ldr	r3, [r4, #0]
 800a52e:	079b      	lsls	r3, r3, #30
 800a530:	d413      	bmi.n	800a55a <_printf_i+0x23a>
 800a532:	68e0      	ldr	r0, [r4, #12]
 800a534:	9b03      	ldr	r3, [sp, #12]
 800a536:	4298      	cmp	r0, r3
 800a538:	bfb8      	it	lt
 800a53a:	4618      	movlt	r0, r3
 800a53c:	e7a4      	b.n	800a488 <_printf_i+0x168>
 800a53e:	2301      	movs	r3, #1
 800a540:	4632      	mov	r2, r6
 800a542:	4649      	mov	r1, r9
 800a544:	4640      	mov	r0, r8
 800a546:	47d0      	blx	sl
 800a548:	3001      	adds	r0, #1
 800a54a:	d09b      	beq.n	800a484 <_printf_i+0x164>
 800a54c:	3501      	adds	r5, #1
 800a54e:	68e3      	ldr	r3, [r4, #12]
 800a550:	9903      	ldr	r1, [sp, #12]
 800a552:	1a5b      	subs	r3, r3, r1
 800a554:	42ab      	cmp	r3, r5
 800a556:	dcf2      	bgt.n	800a53e <_printf_i+0x21e>
 800a558:	e7eb      	b.n	800a532 <_printf_i+0x212>
 800a55a:	2500      	movs	r5, #0
 800a55c:	f104 0619 	add.w	r6, r4, #25
 800a560:	e7f5      	b.n	800a54e <_printf_i+0x22e>
 800a562:	bf00      	nop
 800a564:	0800c65d 	.word	0x0800c65d
 800a568:	0800c66e 	.word	0x0800c66e

0800a56c <memmove>:
 800a56c:	4288      	cmp	r0, r1
 800a56e:	b510      	push	{r4, lr}
 800a570:	eb01 0402 	add.w	r4, r1, r2
 800a574:	d902      	bls.n	800a57c <memmove+0x10>
 800a576:	4284      	cmp	r4, r0
 800a578:	4623      	mov	r3, r4
 800a57a:	d807      	bhi.n	800a58c <memmove+0x20>
 800a57c:	1e43      	subs	r3, r0, #1
 800a57e:	42a1      	cmp	r1, r4
 800a580:	d008      	beq.n	800a594 <memmove+0x28>
 800a582:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a586:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a58a:	e7f8      	b.n	800a57e <memmove+0x12>
 800a58c:	4402      	add	r2, r0
 800a58e:	4601      	mov	r1, r0
 800a590:	428a      	cmp	r2, r1
 800a592:	d100      	bne.n	800a596 <memmove+0x2a>
 800a594:	bd10      	pop	{r4, pc}
 800a596:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a59a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a59e:	e7f7      	b.n	800a590 <memmove+0x24>

0800a5a0 <_free_r>:
 800a5a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5a2:	2900      	cmp	r1, #0
 800a5a4:	d048      	beq.n	800a638 <_free_r+0x98>
 800a5a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5aa:	9001      	str	r0, [sp, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f1a1 0404 	sub.w	r4, r1, #4
 800a5b2:	bfb8      	it	lt
 800a5b4:	18e4      	addlt	r4, r4, r3
 800a5b6:	f000 f8d3 	bl	800a760 <__malloc_lock>
 800a5ba:	4a20      	ldr	r2, [pc, #128]	; (800a63c <_free_r+0x9c>)
 800a5bc:	9801      	ldr	r0, [sp, #4]
 800a5be:	6813      	ldr	r3, [r2, #0]
 800a5c0:	4615      	mov	r5, r2
 800a5c2:	b933      	cbnz	r3, 800a5d2 <_free_r+0x32>
 800a5c4:	6063      	str	r3, [r4, #4]
 800a5c6:	6014      	str	r4, [r2, #0]
 800a5c8:	b003      	add	sp, #12
 800a5ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5ce:	f000 b8cd 	b.w	800a76c <__malloc_unlock>
 800a5d2:	42a3      	cmp	r3, r4
 800a5d4:	d90b      	bls.n	800a5ee <_free_r+0x4e>
 800a5d6:	6821      	ldr	r1, [r4, #0]
 800a5d8:	1862      	adds	r2, r4, r1
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	bf04      	itt	eq
 800a5de:	681a      	ldreq	r2, [r3, #0]
 800a5e0:	685b      	ldreq	r3, [r3, #4]
 800a5e2:	6063      	str	r3, [r4, #4]
 800a5e4:	bf04      	itt	eq
 800a5e6:	1852      	addeq	r2, r2, r1
 800a5e8:	6022      	streq	r2, [r4, #0]
 800a5ea:	602c      	str	r4, [r5, #0]
 800a5ec:	e7ec      	b.n	800a5c8 <_free_r+0x28>
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	b10b      	cbz	r3, 800a5f8 <_free_r+0x58>
 800a5f4:	42a3      	cmp	r3, r4
 800a5f6:	d9fa      	bls.n	800a5ee <_free_r+0x4e>
 800a5f8:	6811      	ldr	r1, [r2, #0]
 800a5fa:	1855      	adds	r5, r2, r1
 800a5fc:	42a5      	cmp	r5, r4
 800a5fe:	d10b      	bne.n	800a618 <_free_r+0x78>
 800a600:	6824      	ldr	r4, [r4, #0]
 800a602:	4421      	add	r1, r4
 800a604:	1854      	adds	r4, r2, r1
 800a606:	42a3      	cmp	r3, r4
 800a608:	6011      	str	r1, [r2, #0]
 800a60a:	d1dd      	bne.n	800a5c8 <_free_r+0x28>
 800a60c:	681c      	ldr	r4, [r3, #0]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	6053      	str	r3, [r2, #4]
 800a612:	4421      	add	r1, r4
 800a614:	6011      	str	r1, [r2, #0]
 800a616:	e7d7      	b.n	800a5c8 <_free_r+0x28>
 800a618:	d902      	bls.n	800a620 <_free_r+0x80>
 800a61a:	230c      	movs	r3, #12
 800a61c:	6003      	str	r3, [r0, #0]
 800a61e:	e7d3      	b.n	800a5c8 <_free_r+0x28>
 800a620:	6825      	ldr	r5, [r4, #0]
 800a622:	1961      	adds	r1, r4, r5
 800a624:	428b      	cmp	r3, r1
 800a626:	bf04      	itt	eq
 800a628:	6819      	ldreq	r1, [r3, #0]
 800a62a:	685b      	ldreq	r3, [r3, #4]
 800a62c:	6063      	str	r3, [r4, #4]
 800a62e:	bf04      	itt	eq
 800a630:	1949      	addeq	r1, r1, r5
 800a632:	6021      	streq	r1, [r4, #0]
 800a634:	6054      	str	r4, [r2, #4]
 800a636:	e7c7      	b.n	800a5c8 <_free_r+0x28>
 800a638:	b003      	add	sp, #12
 800a63a:	bd30      	pop	{r4, r5, pc}
 800a63c:	2000083c 	.word	0x2000083c

0800a640 <_malloc_r>:
 800a640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a642:	1ccd      	adds	r5, r1, #3
 800a644:	f025 0503 	bic.w	r5, r5, #3
 800a648:	3508      	adds	r5, #8
 800a64a:	2d0c      	cmp	r5, #12
 800a64c:	bf38      	it	cc
 800a64e:	250c      	movcc	r5, #12
 800a650:	2d00      	cmp	r5, #0
 800a652:	4606      	mov	r6, r0
 800a654:	db01      	blt.n	800a65a <_malloc_r+0x1a>
 800a656:	42a9      	cmp	r1, r5
 800a658:	d903      	bls.n	800a662 <_malloc_r+0x22>
 800a65a:	230c      	movs	r3, #12
 800a65c:	6033      	str	r3, [r6, #0]
 800a65e:	2000      	movs	r0, #0
 800a660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a662:	f000 f87d 	bl	800a760 <__malloc_lock>
 800a666:	4921      	ldr	r1, [pc, #132]	; (800a6ec <_malloc_r+0xac>)
 800a668:	680a      	ldr	r2, [r1, #0]
 800a66a:	4614      	mov	r4, r2
 800a66c:	b99c      	cbnz	r4, 800a696 <_malloc_r+0x56>
 800a66e:	4f20      	ldr	r7, [pc, #128]	; (800a6f0 <_malloc_r+0xb0>)
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	b923      	cbnz	r3, 800a67e <_malloc_r+0x3e>
 800a674:	4621      	mov	r1, r4
 800a676:	4630      	mov	r0, r6
 800a678:	f000 f862 	bl	800a740 <_sbrk_r>
 800a67c:	6038      	str	r0, [r7, #0]
 800a67e:	4629      	mov	r1, r5
 800a680:	4630      	mov	r0, r6
 800a682:	f000 f85d 	bl	800a740 <_sbrk_r>
 800a686:	1c43      	adds	r3, r0, #1
 800a688:	d123      	bne.n	800a6d2 <_malloc_r+0x92>
 800a68a:	230c      	movs	r3, #12
 800a68c:	6033      	str	r3, [r6, #0]
 800a68e:	4630      	mov	r0, r6
 800a690:	f000 f86c 	bl	800a76c <__malloc_unlock>
 800a694:	e7e3      	b.n	800a65e <_malloc_r+0x1e>
 800a696:	6823      	ldr	r3, [r4, #0]
 800a698:	1b5b      	subs	r3, r3, r5
 800a69a:	d417      	bmi.n	800a6cc <_malloc_r+0x8c>
 800a69c:	2b0b      	cmp	r3, #11
 800a69e:	d903      	bls.n	800a6a8 <_malloc_r+0x68>
 800a6a0:	6023      	str	r3, [r4, #0]
 800a6a2:	441c      	add	r4, r3
 800a6a4:	6025      	str	r5, [r4, #0]
 800a6a6:	e004      	b.n	800a6b2 <_malloc_r+0x72>
 800a6a8:	6863      	ldr	r3, [r4, #4]
 800a6aa:	42a2      	cmp	r2, r4
 800a6ac:	bf0c      	ite	eq
 800a6ae:	600b      	streq	r3, [r1, #0]
 800a6b0:	6053      	strne	r3, [r2, #4]
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	f000 f85a 	bl	800a76c <__malloc_unlock>
 800a6b8:	f104 000b 	add.w	r0, r4, #11
 800a6bc:	1d23      	adds	r3, r4, #4
 800a6be:	f020 0007 	bic.w	r0, r0, #7
 800a6c2:	1ac2      	subs	r2, r0, r3
 800a6c4:	d0cc      	beq.n	800a660 <_malloc_r+0x20>
 800a6c6:	1a1b      	subs	r3, r3, r0
 800a6c8:	50a3      	str	r3, [r4, r2]
 800a6ca:	e7c9      	b.n	800a660 <_malloc_r+0x20>
 800a6cc:	4622      	mov	r2, r4
 800a6ce:	6864      	ldr	r4, [r4, #4]
 800a6d0:	e7cc      	b.n	800a66c <_malloc_r+0x2c>
 800a6d2:	1cc4      	adds	r4, r0, #3
 800a6d4:	f024 0403 	bic.w	r4, r4, #3
 800a6d8:	42a0      	cmp	r0, r4
 800a6da:	d0e3      	beq.n	800a6a4 <_malloc_r+0x64>
 800a6dc:	1a21      	subs	r1, r4, r0
 800a6de:	4630      	mov	r0, r6
 800a6e0:	f000 f82e 	bl	800a740 <_sbrk_r>
 800a6e4:	3001      	adds	r0, #1
 800a6e6:	d1dd      	bne.n	800a6a4 <_malloc_r+0x64>
 800a6e8:	e7cf      	b.n	800a68a <_malloc_r+0x4a>
 800a6ea:	bf00      	nop
 800a6ec:	2000083c 	.word	0x2000083c
 800a6f0:	20000840 	.word	0x20000840

0800a6f4 <_realloc_r>:
 800a6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6f6:	4607      	mov	r7, r0
 800a6f8:	4614      	mov	r4, r2
 800a6fa:	460e      	mov	r6, r1
 800a6fc:	b921      	cbnz	r1, 800a708 <_realloc_r+0x14>
 800a6fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a702:	4611      	mov	r1, r2
 800a704:	f7ff bf9c 	b.w	800a640 <_malloc_r>
 800a708:	b922      	cbnz	r2, 800a714 <_realloc_r+0x20>
 800a70a:	f7ff ff49 	bl	800a5a0 <_free_r>
 800a70e:	4625      	mov	r5, r4
 800a710:	4628      	mov	r0, r5
 800a712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a714:	f000 f830 	bl	800a778 <_malloc_usable_size_r>
 800a718:	42a0      	cmp	r0, r4
 800a71a:	d20f      	bcs.n	800a73c <_realloc_r+0x48>
 800a71c:	4621      	mov	r1, r4
 800a71e:	4638      	mov	r0, r7
 800a720:	f7ff ff8e 	bl	800a640 <_malloc_r>
 800a724:	4605      	mov	r5, r0
 800a726:	2800      	cmp	r0, #0
 800a728:	d0f2      	beq.n	800a710 <_realloc_r+0x1c>
 800a72a:	4631      	mov	r1, r6
 800a72c:	4622      	mov	r2, r4
 800a72e:	f7ff fbf7 	bl	8009f20 <memcpy>
 800a732:	4631      	mov	r1, r6
 800a734:	4638      	mov	r0, r7
 800a736:	f7ff ff33 	bl	800a5a0 <_free_r>
 800a73a:	e7e9      	b.n	800a710 <_realloc_r+0x1c>
 800a73c:	4635      	mov	r5, r6
 800a73e:	e7e7      	b.n	800a710 <_realloc_r+0x1c>

0800a740 <_sbrk_r>:
 800a740:	b538      	push	{r3, r4, r5, lr}
 800a742:	4d06      	ldr	r5, [pc, #24]	; (800a75c <_sbrk_r+0x1c>)
 800a744:	2300      	movs	r3, #0
 800a746:	4604      	mov	r4, r0
 800a748:	4608      	mov	r0, r1
 800a74a:	602b      	str	r3, [r5, #0]
 800a74c:	f7f7 fbe4 	bl	8001f18 <_sbrk>
 800a750:	1c43      	adds	r3, r0, #1
 800a752:	d102      	bne.n	800a75a <_sbrk_r+0x1a>
 800a754:	682b      	ldr	r3, [r5, #0]
 800a756:	b103      	cbz	r3, 800a75a <_sbrk_r+0x1a>
 800a758:	6023      	str	r3, [r4, #0]
 800a75a:	bd38      	pop	{r3, r4, r5, pc}
 800a75c:	20002628 	.word	0x20002628

0800a760 <__malloc_lock>:
 800a760:	4801      	ldr	r0, [pc, #4]	; (800a768 <__malloc_lock+0x8>)
 800a762:	f000 b811 	b.w	800a788 <__retarget_lock_acquire_recursive>
 800a766:	bf00      	nop
 800a768:	20002630 	.word	0x20002630

0800a76c <__malloc_unlock>:
 800a76c:	4801      	ldr	r0, [pc, #4]	; (800a774 <__malloc_unlock+0x8>)
 800a76e:	f000 b80c 	b.w	800a78a <__retarget_lock_release_recursive>
 800a772:	bf00      	nop
 800a774:	20002630 	.word	0x20002630

0800a778 <_malloc_usable_size_r>:
 800a778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a77c:	1f18      	subs	r0, r3, #4
 800a77e:	2b00      	cmp	r3, #0
 800a780:	bfbc      	itt	lt
 800a782:	580b      	ldrlt	r3, [r1, r0]
 800a784:	18c0      	addlt	r0, r0, r3
 800a786:	4770      	bx	lr

0800a788 <__retarget_lock_acquire_recursive>:
 800a788:	4770      	bx	lr

0800a78a <__retarget_lock_release_recursive>:
 800a78a:	4770      	bx	lr
 800a78c:	0000      	movs	r0, r0
	...

0800a790 <tan>:
 800a790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a792:	ec53 2b10 	vmov	r2, r3, d0
 800a796:	4814      	ldr	r0, [pc, #80]	; (800a7e8 <tan+0x58>)
 800a798:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a79c:	4281      	cmp	r1, r0
 800a79e:	dc05      	bgt.n	800a7ac <tan+0x1c>
 800a7a0:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 800a7e0 <tan+0x50>
 800a7a4:	2001      	movs	r0, #1
 800a7a6:	f000 fd6f 	bl	800b288 <__kernel_tan>
 800a7aa:	e009      	b.n	800a7c0 <tan+0x30>
 800a7ac:	480f      	ldr	r0, [pc, #60]	; (800a7ec <tan+0x5c>)
 800a7ae:	4281      	cmp	r1, r0
 800a7b0:	dd09      	ble.n	800a7c6 <tan+0x36>
 800a7b2:	ee10 0a10 	vmov	r0, s0
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	f7f5 fd66 	bl	8000288 <__aeabi_dsub>
 800a7bc:	ec41 0b10 	vmov	d0, r0, r1
 800a7c0:	b005      	add	sp, #20
 800a7c2:	f85d fb04 	ldr.w	pc, [sp], #4
 800a7c6:	4668      	mov	r0, sp
 800a7c8:	f000 f812 	bl	800a7f0 <__ieee754_rem_pio2>
 800a7cc:	0040      	lsls	r0, r0, #1
 800a7ce:	f000 0002 	and.w	r0, r0, #2
 800a7d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7d6:	ed9d 0b00 	vldr	d0, [sp]
 800a7da:	f1c0 0001 	rsb	r0, r0, #1
 800a7de:	e7e2      	b.n	800a7a6 <tan+0x16>
	...
 800a7e8:	3fe921fb 	.word	0x3fe921fb
 800a7ec:	7fefffff 	.word	0x7fefffff

0800a7f0 <__ieee754_rem_pio2>:
 800a7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f4:	ed2d 8b02 	vpush	{d8}
 800a7f8:	ec55 4b10 	vmov	r4, r5, d0
 800a7fc:	4bca      	ldr	r3, [pc, #808]	; (800ab28 <__ieee754_rem_pio2+0x338>)
 800a7fe:	b08b      	sub	sp, #44	; 0x2c
 800a800:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a804:	4598      	cmp	r8, r3
 800a806:	4682      	mov	sl, r0
 800a808:	9502      	str	r5, [sp, #8]
 800a80a:	dc08      	bgt.n	800a81e <__ieee754_rem_pio2+0x2e>
 800a80c:	2200      	movs	r2, #0
 800a80e:	2300      	movs	r3, #0
 800a810:	ed80 0b00 	vstr	d0, [r0]
 800a814:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a818:	f04f 0b00 	mov.w	fp, #0
 800a81c:	e028      	b.n	800a870 <__ieee754_rem_pio2+0x80>
 800a81e:	4bc3      	ldr	r3, [pc, #780]	; (800ab2c <__ieee754_rem_pio2+0x33c>)
 800a820:	4598      	cmp	r8, r3
 800a822:	dc78      	bgt.n	800a916 <__ieee754_rem_pio2+0x126>
 800a824:	9b02      	ldr	r3, [sp, #8]
 800a826:	4ec2      	ldr	r6, [pc, #776]	; (800ab30 <__ieee754_rem_pio2+0x340>)
 800a828:	2b00      	cmp	r3, #0
 800a82a:	ee10 0a10 	vmov	r0, s0
 800a82e:	a3b0      	add	r3, pc, #704	; (adr r3, 800aaf0 <__ieee754_rem_pio2+0x300>)
 800a830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a834:	4629      	mov	r1, r5
 800a836:	dd39      	ble.n	800a8ac <__ieee754_rem_pio2+0xbc>
 800a838:	f7f5 fd26 	bl	8000288 <__aeabi_dsub>
 800a83c:	45b0      	cmp	r8, r6
 800a83e:	4604      	mov	r4, r0
 800a840:	460d      	mov	r5, r1
 800a842:	d01b      	beq.n	800a87c <__ieee754_rem_pio2+0x8c>
 800a844:	a3ac      	add	r3, pc, #688	; (adr r3, 800aaf8 <__ieee754_rem_pio2+0x308>)
 800a846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84a:	f7f5 fd1d 	bl	8000288 <__aeabi_dsub>
 800a84e:	4602      	mov	r2, r0
 800a850:	460b      	mov	r3, r1
 800a852:	e9ca 2300 	strd	r2, r3, [sl]
 800a856:	4620      	mov	r0, r4
 800a858:	4629      	mov	r1, r5
 800a85a:	f7f5 fd15 	bl	8000288 <__aeabi_dsub>
 800a85e:	a3a6      	add	r3, pc, #664	; (adr r3, 800aaf8 <__ieee754_rem_pio2+0x308>)
 800a860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a864:	f7f5 fd10 	bl	8000288 <__aeabi_dsub>
 800a868:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a86c:	f04f 0b01 	mov.w	fp, #1
 800a870:	4658      	mov	r0, fp
 800a872:	b00b      	add	sp, #44	; 0x2c
 800a874:	ecbd 8b02 	vpop	{d8}
 800a878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a87c:	a3a0      	add	r3, pc, #640	; (adr r3, 800ab00 <__ieee754_rem_pio2+0x310>)
 800a87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a882:	f7f5 fd01 	bl	8000288 <__aeabi_dsub>
 800a886:	a3a0      	add	r3, pc, #640	; (adr r3, 800ab08 <__ieee754_rem_pio2+0x318>)
 800a888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88c:	4604      	mov	r4, r0
 800a88e:	460d      	mov	r5, r1
 800a890:	f7f5 fcfa 	bl	8000288 <__aeabi_dsub>
 800a894:	4602      	mov	r2, r0
 800a896:	460b      	mov	r3, r1
 800a898:	e9ca 2300 	strd	r2, r3, [sl]
 800a89c:	4620      	mov	r0, r4
 800a89e:	4629      	mov	r1, r5
 800a8a0:	f7f5 fcf2 	bl	8000288 <__aeabi_dsub>
 800a8a4:	a398      	add	r3, pc, #608	; (adr r3, 800ab08 <__ieee754_rem_pio2+0x318>)
 800a8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8aa:	e7db      	b.n	800a864 <__ieee754_rem_pio2+0x74>
 800a8ac:	f7f5 fcee 	bl	800028c <__adddf3>
 800a8b0:	45b0      	cmp	r8, r6
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	460d      	mov	r5, r1
 800a8b6:	d016      	beq.n	800a8e6 <__ieee754_rem_pio2+0xf6>
 800a8b8:	a38f      	add	r3, pc, #572	; (adr r3, 800aaf8 <__ieee754_rem_pio2+0x308>)
 800a8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8be:	f7f5 fce5 	bl	800028c <__adddf3>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	e9ca 2300 	strd	r2, r3, [sl]
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	4629      	mov	r1, r5
 800a8ce:	f7f5 fcdb 	bl	8000288 <__aeabi_dsub>
 800a8d2:	a389      	add	r3, pc, #548	; (adr r3, 800aaf8 <__ieee754_rem_pio2+0x308>)
 800a8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d8:	f7f5 fcd8 	bl	800028c <__adddf3>
 800a8dc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800a8e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a8e4:	e7c4      	b.n	800a870 <__ieee754_rem_pio2+0x80>
 800a8e6:	a386      	add	r3, pc, #536	; (adr r3, 800ab00 <__ieee754_rem_pio2+0x310>)
 800a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ec:	f7f5 fcce 	bl	800028c <__adddf3>
 800a8f0:	a385      	add	r3, pc, #532	; (adr r3, 800ab08 <__ieee754_rem_pio2+0x318>)
 800a8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	460d      	mov	r5, r1
 800a8fa:	f7f5 fcc7 	bl	800028c <__adddf3>
 800a8fe:	4602      	mov	r2, r0
 800a900:	460b      	mov	r3, r1
 800a902:	e9ca 2300 	strd	r2, r3, [sl]
 800a906:	4620      	mov	r0, r4
 800a908:	4629      	mov	r1, r5
 800a90a:	f7f5 fcbd 	bl	8000288 <__aeabi_dsub>
 800a90e:	a37e      	add	r3, pc, #504	; (adr r3, 800ab08 <__ieee754_rem_pio2+0x318>)
 800a910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a914:	e7e0      	b.n	800a8d8 <__ieee754_rem_pio2+0xe8>
 800a916:	4b87      	ldr	r3, [pc, #540]	; (800ab34 <__ieee754_rem_pio2+0x344>)
 800a918:	4598      	cmp	r8, r3
 800a91a:	f300 80d9 	bgt.w	800aad0 <__ieee754_rem_pio2+0x2e0>
 800a91e:	f000 fe87 	bl	800b630 <fabs>
 800a922:	ec55 4b10 	vmov	r4, r5, d0
 800a926:	ee10 0a10 	vmov	r0, s0
 800a92a:	a379      	add	r3, pc, #484	; (adr r3, 800ab10 <__ieee754_rem_pio2+0x320>)
 800a92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a930:	4629      	mov	r1, r5
 800a932:	f7f5 fe61 	bl	80005f8 <__aeabi_dmul>
 800a936:	4b80      	ldr	r3, [pc, #512]	; (800ab38 <__ieee754_rem_pio2+0x348>)
 800a938:	2200      	movs	r2, #0
 800a93a:	f7f5 fca7 	bl	800028c <__adddf3>
 800a93e:	f7f6 f8f5 	bl	8000b2c <__aeabi_d2iz>
 800a942:	4683      	mov	fp, r0
 800a944:	f7f5 fdee 	bl	8000524 <__aeabi_i2d>
 800a948:	4602      	mov	r2, r0
 800a94a:	460b      	mov	r3, r1
 800a94c:	ec43 2b18 	vmov	d8, r2, r3
 800a950:	a367      	add	r3, pc, #412	; (adr r3, 800aaf0 <__ieee754_rem_pio2+0x300>)
 800a952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a956:	f7f5 fe4f 	bl	80005f8 <__aeabi_dmul>
 800a95a:	4602      	mov	r2, r0
 800a95c:	460b      	mov	r3, r1
 800a95e:	4620      	mov	r0, r4
 800a960:	4629      	mov	r1, r5
 800a962:	f7f5 fc91 	bl	8000288 <__aeabi_dsub>
 800a966:	a364      	add	r3, pc, #400	; (adr r3, 800aaf8 <__ieee754_rem_pio2+0x308>)
 800a968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96c:	4606      	mov	r6, r0
 800a96e:	460f      	mov	r7, r1
 800a970:	ec51 0b18 	vmov	r0, r1, d8
 800a974:	f7f5 fe40 	bl	80005f8 <__aeabi_dmul>
 800a978:	f1bb 0f1f 	cmp.w	fp, #31
 800a97c:	4604      	mov	r4, r0
 800a97e:	460d      	mov	r5, r1
 800a980:	dc0d      	bgt.n	800a99e <__ieee754_rem_pio2+0x1ae>
 800a982:	4b6e      	ldr	r3, [pc, #440]	; (800ab3c <__ieee754_rem_pio2+0x34c>)
 800a984:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800a988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a98c:	4543      	cmp	r3, r8
 800a98e:	d006      	beq.n	800a99e <__ieee754_rem_pio2+0x1ae>
 800a990:	4622      	mov	r2, r4
 800a992:	462b      	mov	r3, r5
 800a994:	4630      	mov	r0, r6
 800a996:	4639      	mov	r1, r7
 800a998:	f7f5 fc76 	bl	8000288 <__aeabi_dsub>
 800a99c:	e00f      	b.n	800a9be <__ieee754_rem_pio2+0x1ce>
 800a99e:	462b      	mov	r3, r5
 800a9a0:	4622      	mov	r2, r4
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	4639      	mov	r1, r7
 800a9a6:	f7f5 fc6f 	bl	8000288 <__aeabi_dsub>
 800a9aa:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a9ae:	9303      	str	r3, [sp, #12]
 800a9b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a9b4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a9b8:	f1b8 0f10 	cmp.w	r8, #16
 800a9bc:	dc02      	bgt.n	800a9c4 <__ieee754_rem_pio2+0x1d4>
 800a9be:	e9ca 0100 	strd	r0, r1, [sl]
 800a9c2:	e039      	b.n	800aa38 <__ieee754_rem_pio2+0x248>
 800a9c4:	a34e      	add	r3, pc, #312	; (adr r3, 800ab00 <__ieee754_rem_pio2+0x310>)
 800a9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ca:	ec51 0b18 	vmov	r0, r1, d8
 800a9ce:	f7f5 fe13 	bl	80005f8 <__aeabi_dmul>
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	460d      	mov	r5, r1
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	460b      	mov	r3, r1
 800a9da:	4630      	mov	r0, r6
 800a9dc:	4639      	mov	r1, r7
 800a9de:	f7f5 fc53 	bl	8000288 <__aeabi_dsub>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	4680      	mov	r8, r0
 800a9e8:	4689      	mov	r9, r1
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	4639      	mov	r1, r7
 800a9ee:	f7f5 fc4b 	bl	8000288 <__aeabi_dsub>
 800a9f2:	4622      	mov	r2, r4
 800a9f4:	462b      	mov	r3, r5
 800a9f6:	f7f5 fc47 	bl	8000288 <__aeabi_dsub>
 800a9fa:	a343      	add	r3, pc, #268	; (adr r3, 800ab08 <__ieee754_rem_pio2+0x318>)
 800a9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa00:	4604      	mov	r4, r0
 800aa02:	460d      	mov	r5, r1
 800aa04:	ec51 0b18 	vmov	r0, r1, d8
 800aa08:	f7f5 fdf6 	bl	80005f8 <__aeabi_dmul>
 800aa0c:	4622      	mov	r2, r4
 800aa0e:	462b      	mov	r3, r5
 800aa10:	f7f5 fc3a 	bl	8000288 <__aeabi_dsub>
 800aa14:	4602      	mov	r2, r0
 800aa16:	460b      	mov	r3, r1
 800aa18:	4604      	mov	r4, r0
 800aa1a:	460d      	mov	r5, r1
 800aa1c:	4640      	mov	r0, r8
 800aa1e:	4649      	mov	r1, r9
 800aa20:	f7f5 fc32 	bl	8000288 <__aeabi_dsub>
 800aa24:	9a03      	ldr	r2, [sp, #12]
 800aa26:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aa2a:	1ad3      	subs	r3, r2, r3
 800aa2c:	2b31      	cmp	r3, #49	; 0x31
 800aa2e:	dc24      	bgt.n	800aa7a <__ieee754_rem_pio2+0x28a>
 800aa30:	e9ca 0100 	strd	r0, r1, [sl]
 800aa34:	4646      	mov	r6, r8
 800aa36:	464f      	mov	r7, r9
 800aa38:	e9da 8900 	ldrd	r8, r9, [sl]
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	4642      	mov	r2, r8
 800aa40:	464b      	mov	r3, r9
 800aa42:	4639      	mov	r1, r7
 800aa44:	f7f5 fc20 	bl	8000288 <__aeabi_dsub>
 800aa48:	462b      	mov	r3, r5
 800aa4a:	4622      	mov	r2, r4
 800aa4c:	f7f5 fc1c 	bl	8000288 <__aeabi_dsub>
 800aa50:	9b02      	ldr	r3, [sp, #8]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aa58:	f6bf af0a 	bge.w	800a870 <__ieee754_rem_pio2+0x80>
 800aa5c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aa60:	f8ca 3004 	str.w	r3, [sl, #4]
 800aa64:	f8ca 8000 	str.w	r8, [sl]
 800aa68:	f8ca 0008 	str.w	r0, [sl, #8]
 800aa6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa70:	f8ca 300c 	str.w	r3, [sl, #12]
 800aa74:	f1cb 0b00 	rsb	fp, fp, #0
 800aa78:	e6fa      	b.n	800a870 <__ieee754_rem_pio2+0x80>
 800aa7a:	a327      	add	r3, pc, #156	; (adr r3, 800ab18 <__ieee754_rem_pio2+0x328>)
 800aa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa80:	ec51 0b18 	vmov	r0, r1, d8
 800aa84:	f7f5 fdb8 	bl	80005f8 <__aeabi_dmul>
 800aa88:	4604      	mov	r4, r0
 800aa8a:	460d      	mov	r5, r1
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	460b      	mov	r3, r1
 800aa90:	4640      	mov	r0, r8
 800aa92:	4649      	mov	r1, r9
 800aa94:	f7f5 fbf8 	bl	8000288 <__aeabi_dsub>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	4606      	mov	r6, r0
 800aa9e:	460f      	mov	r7, r1
 800aaa0:	4640      	mov	r0, r8
 800aaa2:	4649      	mov	r1, r9
 800aaa4:	f7f5 fbf0 	bl	8000288 <__aeabi_dsub>
 800aaa8:	4622      	mov	r2, r4
 800aaaa:	462b      	mov	r3, r5
 800aaac:	f7f5 fbec 	bl	8000288 <__aeabi_dsub>
 800aab0:	a31b      	add	r3, pc, #108	; (adr r3, 800ab20 <__ieee754_rem_pio2+0x330>)
 800aab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab6:	4604      	mov	r4, r0
 800aab8:	460d      	mov	r5, r1
 800aaba:	ec51 0b18 	vmov	r0, r1, d8
 800aabe:	f7f5 fd9b 	bl	80005f8 <__aeabi_dmul>
 800aac2:	4622      	mov	r2, r4
 800aac4:	462b      	mov	r3, r5
 800aac6:	f7f5 fbdf 	bl	8000288 <__aeabi_dsub>
 800aaca:	4604      	mov	r4, r0
 800aacc:	460d      	mov	r5, r1
 800aace:	e75f      	b.n	800a990 <__ieee754_rem_pio2+0x1a0>
 800aad0:	4b1b      	ldr	r3, [pc, #108]	; (800ab40 <__ieee754_rem_pio2+0x350>)
 800aad2:	4598      	cmp	r8, r3
 800aad4:	dd36      	ble.n	800ab44 <__ieee754_rem_pio2+0x354>
 800aad6:	ee10 2a10 	vmov	r2, s0
 800aada:	462b      	mov	r3, r5
 800aadc:	4620      	mov	r0, r4
 800aade:	4629      	mov	r1, r5
 800aae0:	f7f5 fbd2 	bl	8000288 <__aeabi_dsub>
 800aae4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aae8:	e9ca 0100 	strd	r0, r1, [sl]
 800aaec:	e694      	b.n	800a818 <__ieee754_rem_pio2+0x28>
 800aaee:	bf00      	nop
 800aaf0:	54400000 	.word	0x54400000
 800aaf4:	3ff921fb 	.word	0x3ff921fb
 800aaf8:	1a626331 	.word	0x1a626331
 800aafc:	3dd0b461 	.word	0x3dd0b461
 800ab00:	1a600000 	.word	0x1a600000
 800ab04:	3dd0b461 	.word	0x3dd0b461
 800ab08:	2e037073 	.word	0x2e037073
 800ab0c:	3ba3198a 	.word	0x3ba3198a
 800ab10:	6dc9c883 	.word	0x6dc9c883
 800ab14:	3fe45f30 	.word	0x3fe45f30
 800ab18:	2e000000 	.word	0x2e000000
 800ab1c:	3ba3198a 	.word	0x3ba3198a
 800ab20:	252049c1 	.word	0x252049c1
 800ab24:	397b839a 	.word	0x397b839a
 800ab28:	3fe921fb 	.word	0x3fe921fb
 800ab2c:	4002d97b 	.word	0x4002d97b
 800ab30:	3ff921fb 	.word	0x3ff921fb
 800ab34:	413921fb 	.word	0x413921fb
 800ab38:	3fe00000 	.word	0x3fe00000
 800ab3c:	0800c680 	.word	0x0800c680
 800ab40:	7fefffff 	.word	0x7fefffff
 800ab44:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ab48:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ab4c:	ee10 0a10 	vmov	r0, s0
 800ab50:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ab54:	ee10 6a10 	vmov	r6, s0
 800ab58:	460f      	mov	r7, r1
 800ab5a:	f7f5 ffe7 	bl	8000b2c <__aeabi_d2iz>
 800ab5e:	f7f5 fce1 	bl	8000524 <__aeabi_i2d>
 800ab62:	4602      	mov	r2, r0
 800ab64:	460b      	mov	r3, r1
 800ab66:	4630      	mov	r0, r6
 800ab68:	4639      	mov	r1, r7
 800ab6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab6e:	f7f5 fb8b 	bl	8000288 <__aeabi_dsub>
 800ab72:	4b22      	ldr	r3, [pc, #136]	; (800abfc <__ieee754_rem_pio2+0x40c>)
 800ab74:	2200      	movs	r2, #0
 800ab76:	f7f5 fd3f 	bl	80005f8 <__aeabi_dmul>
 800ab7a:	460f      	mov	r7, r1
 800ab7c:	4606      	mov	r6, r0
 800ab7e:	f7f5 ffd5 	bl	8000b2c <__aeabi_d2iz>
 800ab82:	f7f5 fccf 	bl	8000524 <__aeabi_i2d>
 800ab86:	4602      	mov	r2, r0
 800ab88:	460b      	mov	r3, r1
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	4639      	mov	r1, r7
 800ab8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ab92:	f7f5 fb79 	bl	8000288 <__aeabi_dsub>
 800ab96:	4b19      	ldr	r3, [pc, #100]	; (800abfc <__ieee754_rem_pio2+0x40c>)
 800ab98:	2200      	movs	r2, #0
 800ab9a:	f7f5 fd2d 	bl	80005f8 <__aeabi_dmul>
 800ab9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aba2:	ad04      	add	r5, sp, #16
 800aba4:	f04f 0803 	mov.w	r8, #3
 800aba8:	46a9      	mov	r9, r5
 800abaa:	2600      	movs	r6, #0
 800abac:	2700      	movs	r7, #0
 800abae:	4632      	mov	r2, r6
 800abb0:	463b      	mov	r3, r7
 800abb2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800abb6:	46c3      	mov	fp, r8
 800abb8:	3d08      	subs	r5, #8
 800abba:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800abbe:	f7f5 ff83 	bl	8000ac8 <__aeabi_dcmpeq>
 800abc2:	2800      	cmp	r0, #0
 800abc4:	d1f3      	bne.n	800abae <__ieee754_rem_pio2+0x3be>
 800abc6:	4b0e      	ldr	r3, [pc, #56]	; (800ac00 <__ieee754_rem_pio2+0x410>)
 800abc8:	9301      	str	r3, [sp, #4]
 800abca:	2302      	movs	r3, #2
 800abcc:	9300      	str	r3, [sp, #0]
 800abce:	4622      	mov	r2, r4
 800abd0:	465b      	mov	r3, fp
 800abd2:	4651      	mov	r1, sl
 800abd4:	4648      	mov	r0, r9
 800abd6:	f000 f817 	bl	800ac08 <__kernel_rem_pio2>
 800abda:	9b02      	ldr	r3, [sp, #8]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	4683      	mov	fp, r0
 800abe0:	f6bf ae46 	bge.w	800a870 <__ieee754_rem_pio2+0x80>
 800abe4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800abe8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800abec:	f8ca 3004 	str.w	r3, [sl, #4]
 800abf0:	f8da 300c 	ldr.w	r3, [sl, #12]
 800abf4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800abf8:	e73a      	b.n	800aa70 <__ieee754_rem_pio2+0x280>
 800abfa:	bf00      	nop
 800abfc:	41700000 	.word	0x41700000
 800ac00:	0800c700 	.word	0x0800c700
 800ac04:	00000000 	.word	0x00000000

0800ac08 <__kernel_rem_pio2>:
 800ac08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac0c:	ed2d 8b02 	vpush	{d8}
 800ac10:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ac14:	f112 0f14 	cmn.w	r2, #20
 800ac18:	9308      	str	r3, [sp, #32]
 800ac1a:	9101      	str	r1, [sp, #4]
 800ac1c:	4bc6      	ldr	r3, [pc, #792]	; (800af38 <__kernel_rem_pio2+0x330>)
 800ac1e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800ac20:	9009      	str	r0, [sp, #36]	; 0x24
 800ac22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ac26:	9304      	str	r3, [sp, #16]
 800ac28:	9b08      	ldr	r3, [sp, #32]
 800ac2a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ac2e:	bfa8      	it	ge
 800ac30:	1ed4      	subge	r4, r2, #3
 800ac32:	9306      	str	r3, [sp, #24]
 800ac34:	bfb2      	itee	lt
 800ac36:	2400      	movlt	r4, #0
 800ac38:	2318      	movge	r3, #24
 800ac3a:	fb94 f4f3 	sdivge	r4, r4, r3
 800ac3e:	f06f 0317 	mvn.w	r3, #23
 800ac42:	fb04 3303 	mla	r3, r4, r3, r3
 800ac46:	eb03 0a02 	add.w	sl, r3, r2
 800ac4a:	9b04      	ldr	r3, [sp, #16]
 800ac4c:	9a06      	ldr	r2, [sp, #24]
 800ac4e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800af28 <__kernel_rem_pio2+0x320>
 800ac52:	eb03 0802 	add.w	r8, r3, r2
 800ac56:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ac58:	1aa7      	subs	r7, r4, r2
 800ac5a:	ae20      	add	r6, sp, #128	; 0x80
 800ac5c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ac60:	2500      	movs	r5, #0
 800ac62:	4545      	cmp	r5, r8
 800ac64:	dd18      	ble.n	800ac98 <__kernel_rem_pio2+0x90>
 800ac66:	9b08      	ldr	r3, [sp, #32]
 800ac68:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ac6c:	aa20      	add	r2, sp, #128	; 0x80
 800ac6e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800af28 <__kernel_rem_pio2+0x320>
 800ac72:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ac76:	f1c3 0301 	rsb	r3, r3, #1
 800ac7a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800ac7e:	9307      	str	r3, [sp, #28]
 800ac80:	9b07      	ldr	r3, [sp, #28]
 800ac82:	9a04      	ldr	r2, [sp, #16]
 800ac84:	4443      	add	r3, r8
 800ac86:	429a      	cmp	r2, r3
 800ac88:	db2f      	blt.n	800acea <__kernel_rem_pio2+0xe2>
 800ac8a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ac8e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ac92:	462f      	mov	r7, r5
 800ac94:	2600      	movs	r6, #0
 800ac96:	e01b      	b.n	800acd0 <__kernel_rem_pio2+0xc8>
 800ac98:	42ef      	cmn	r7, r5
 800ac9a:	d407      	bmi.n	800acac <__kernel_rem_pio2+0xa4>
 800ac9c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800aca0:	f7f5 fc40 	bl	8000524 <__aeabi_i2d>
 800aca4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800aca8:	3501      	adds	r5, #1
 800acaa:	e7da      	b.n	800ac62 <__kernel_rem_pio2+0x5a>
 800acac:	ec51 0b18 	vmov	r0, r1, d8
 800acb0:	e7f8      	b.n	800aca4 <__kernel_rem_pio2+0x9c>
 800acb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acb6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800acba:	f7f5 fc9d 	bl	80005f8 <__aeabi_dmul>
 800acbe:	4602      	mov	r2, r0
 800acc0:	460b      	mov	r3, r1
 800acc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acc6:	f7f5 fae1 	bl	800028c <__adddf3>
 800acca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acce:	3601      	adds	r6, #1
 800acd0:	9b06      	ldr	r3, [sp, #24]
 800acd2:	429e      	cmp	r6, r3
 800acd4:	f1a7 0708 	sub.w	r7, r7, #8
 800acd8:	ddeb      	ble.n	800acb2 <__kernel_rem_pio2+0xaa>
 800acda:	ed9d 7b02 	vldr	d7, [sp, #8]
 800acde:	3508      	adds	r5, #8
 800ace0:	ecab 7b02 	vstmia	fp!, {d7}
 800ace4:	f108 0801 	add.w	r8, r8, #1
 800ace8:	e7ca      	b.n	800ac80 <__kernel_rem_pio2+0x78>
 800acea:	9b04      	ldr	r3, [sp, #16]
 800acec:	aa0c      	add	r2, sp, #48	; 0x30
 800acee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800acf2:	930b      	str	r3, [sp, #44]	; 0x2c
 800acf4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800acf6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800acfa:	9c04      	ldr	r4, [sp, #16]
 800acfc:	930a      	str	r3, [sp, #40]	; 0x28
 800acfe:	ab98      	add	r3, sp, #608	; 0x260
 800ad00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad04:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ad08:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800ad0c:	f8cd b008 	str.w	fp, [sp, #8]
 800ad10:	4625      	mov	r5, r4
 800ad12:	2d00      	cmp	r5, #0
 800ad14:	dc78      	bgt.n	800ae08 <__kernel_rem_pio2+0x200>
 800ad16:	ec47 6b10 	vmov	d0, r6, r7
 800ad1a:	4650      	mov	r0, sl
 800ad1c:	f000 fd14 	bl	800b748 <scalbn>
 800ad20:	ec57 6b10 	vmov	r6, r7, d0
 800ad24:	2200      	movs	r2, #0
 800ad26:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ad2a:	ee10 0a10 	vmov	r0, s0
 800ad2e:	4639      	mov	r1, r7
 800ad30:	f7f5 fc62 	bl	80005f8 <__aeabi_dmul>
 800ad34:	ec41 0b10 	vmov	d0, r0, r1
 800ad38:	f000 fc86 	bl	800b648 <floor>
 800ad3c:	4b7f      	ldr	r3, [pc, #508]	; (800af3c <__kernel_rem_pio2+0x334>)
 800ad3e:	ec51 0b10 	vmov	r0, r1, d0
 800ad42:	2200      	movs	r2, #0
 800ad44:	f7f5 fc58 	bl	80005f8 <__aeabi_dmul>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	4630      	mov	r0, r6
 800ad4e:	4639      	mov	r1, r7
 800ad50:	f7f5 fa9a 	bl	8000288 <__aeabi_dsub>
 800ad54:	460f      	mov	r7, r1
 800ad56:	4606      	mov	r6, r0
 800ad58:	f7f5 fee8 	bl	8000b2c <__aeabi_d2iz>
 800ad5c:	9007      	str	r0, [sp, #28]
 800ad5e:	f7f5 fbe1 	bl	8000524 <__aeabi_i2d>
 800ad62:	4602      	mov	r2, r0
 800ad64:	460b      	mov	r3, r1
 800ad66:	4630      	mov	r0, r6
 800ad68:	4639      	mov	r1, r7
 800ad6a:	f7f5 fa8d 	bl	8000288 <__aeabi_dsub>
 800ad6e:	f1ba 0f00 	cmp.w	sl, #0
 800ad72:	4606      	mov	r6, r0
 800ad74:	460f      	mov	r7, r1
 800ad76:	dd70      	ble.n	800ae5a <__kernel_rem_pio2+0x252>
 800ad78:	1e62      	subs	r2, r4, #1
 800ad7a:	ab0c      	add	r3, sp, #48	; 0x30
 800ad7c:	9d07      	ldr	r5, [sp, #28]
 800ad7e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ad82:	f1ca 0118 	rsb	r1, sl, #24
 800ad86:	fa40 f301 	asr.w	r3, r0, r1
 800ad8a:	441d      	add	r5, r3
 800ad8c:	408b      	lsls	r3, r1
 800ad8e:	1ac0      	subs	r0, r0, r3
 800ad90:	ab0c      	add	r3, sp, #48	; 0x30
 800ad92:	9507      	str	r5, [sp, #28]
 800ad94:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ad98:	f1ca 0317 	rsb	r3, sl, #23
 800ad9c:	fa40 f303 	asr.w	r3, r0, r3
 800ada0:	9302      	str	r3, [sp, #8]
 800ada2:	9b02      	ldr	r3, [sp, #8]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	dd66      	ble.n	800ae76 <__kernel_rem_pio2+0x26e>
 800ada8:	9b07      	ldr	r3, [sp, #28]
 800adaa:	2200      	movs	r2, #0
 800adac:	3301      	adds	r3, #1
 800adae:	9307      	str	r3, [sp, #28]
 800adb0:	4615      	mov	r5, r2
 800adb2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800adb6:	4294      	cmp	r4, r2
 800adb8:	f300 8099 	bgt.w	800aeee <__kernel_rem_pio2+0x2e6>
 800adbc:	f1ba 0f00 	cmp.w	sl, #0
 800adc0:	dd07      	ble.n	800add2 <__kernel_rem_pio2+0x1ca>
 800adc2:	f1ba 0f01 	cmp.w	sl, #1
 800adc6:	f000 80a5 	beq.w	800af14 <__kernel_rem_pio2+0x30c>
 800adca:	f1ba 0f02 	cmp.w	sl, #2
 800adce:	f000 80c1 	beq.w	800af54 <__kernel_rem_pio2+0x34c>
 800add2:	9b02      	ldr	r3, [sp, #8]
 800add4:	2b02      	cmp	r3, #2
 800add6:	d14e      	bne.n	800ae76 <__kernel_rem_pio2+0x26e>
 800add8:	4632      	mov	r2, r6
 800adda:	463b      	mov	r3, r7
 800addc:	4958      	ldr	r1, [pc, #352]	; (800af40 <__kernel_rem_pio2+0x338>)
 800adde:	2000      	movs	r0, #0
 800ade0:	f7f5 fa52 	bl	8000288 <__aeabi_dsub>
 800ade4:	4606      	mov	r6, r0
 800ade6:	460f      	mov	r7, r1
 800ade8:	2d00      	cmp	r5, #0
 800adea:	d044      	beq.n	800ae76 <__kernel_rem_pio2+0x26e>
 800adec:	4650      	mov	r0, sl
 800adee:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800af30 <__kernel_rem_pio2+0x328>
 800adf2:	f000 fca9 	bl	800b748 <scalbn>
 800adf6:	4630      	mov	r0, r6
 800adf8:	4639      	mov	r1, r7
 800adfa:	ec53 2b10 	vmov	r2, r3, d0
 800adfe:	f7f5 fa43 	bl	8000288 <__aeabi_dsub>
 800ae02:	4606      	mov	r6, r0
 800ae04:	460f      	mov	r7, r1
 800ae06:	e036      	b.n	800ae76 <__kernel_rem_pio2+0x26e>
 800ae08:	4b4e      	ldr	r3, [pc, #312]	; (800af44 <__kernel_rem_pio2+0x33c>)
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	4630      	mov	r0, r6
 800ae0e:	4639      	mov	r1, r7
 800ae10:	f7f5 fbf2 	bl	80005f8 <__aeabi_dmul>
 800ae14:	f7f5 fe8a 	bl	8000b2c <__aeabi_d2iz>
 800ae18:	f7f5 fb84 	bl	8000524 <__aeabi_i2d>
 800ae1c:	4b4a      	ldr	r3, [pc, #296]	; (800af48 <__kernel_rem_pio2+0x340>)
 800ae1e:	2200      	movs	r2, #0
 800ae20:	4680      	mov	r8, r0
 800ae22:	4689      	mov	r9, r1
 800ae24:	f7f5 fbe8 	bl	80005f8 <__aeabi_dmul>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	460b      	mov	r3, r1
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	4639      	mov	r1, r7
 800ae30:	f7f5 fa2a 	bl	8000288 <__aeabi_dsub>
 800ae34:	f7f5 fe7a 	bl	8000b2c <__aeabi_d2iz>
 800ae38:	9b02      	ldr	r3, [sp, #8]
 800ae3a:	f843 0b04 	str.w	r0, [r3], #4
 800ae3e:	3d01      	subs	r5, #1
 800ae40:	9302      	str	r3, [sp, #8]
 800ae42:	ab70      	add	r3, sp, #448	; 0x1c0
 800ae44:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ae48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4c:	4640      	mov	r0, r8
 800ae4e:	4649      	mov	r1, r9
 800ae50:	f7f5 fa1c 	bl	800028c <__adddf3>
 800ae54:	4606      	mov	r6, r0
 800ae56:	460f      	mov	r7, r1
 800ae58:	e75b      	b.n	800ad12 <__kernel_rem_pio2+0x10a>
 800ae5a:	d105      	bne.n	800ae68 <__kernel_rem_pio2+0x260>
 800ae5c:	1e63      	subs	r3, r4, #1
 800ae5e:	aa0c      	add	r2, sp, #48	; 0x30
 800ae60:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ae64:	15c3      	asrs	r3, r0, #23
 800ae66:	e79b      	b.n	800ada0 <__kernel_rem_pio2+0x198>
 800ae68:	4b38      	ldr	r3, [pc, #224]	; (800af4c <__kernel_rem_pio2+0x344>)
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f7f5 fe4a 	bl	8000b04 <__aeabi_dcmpge>
 800ae70:	2800      	cmp	r0, #0
 800ae72:	d139      	bne.n	800aee8 <__kernel_rem_pio2+0x2e0>
 800ae74:	9002      	str	r0, [sp, #8]
 800ae76:	2200      	movs	r2, #0
 800ae78:	2300      	movs	r3, #0
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	4639      	mov	r1, r7
 800ae7e:	f7f5 fe23 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae82:	2800      	cmp	r0, #0
 800ae84:	f000 80b4 	beq.w	800aff0 <__kernel_rem_pio2+0x3e8>
 800ae88:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800ae8c:	465b      	mov	r3, fp
 800ae8e:	2200      	movs	r2, #0
 800ae90:	9904      	ldr	r1, [sp, #16]
 800ae92:	428b      	cmp	r3, r1
 800ae94:	da65      	bge.n	800af62 <__kernel_rem_pio2+0x35a>
 800ae96:	2a00      	cmp	r2, #0
 800ae98:	d07b      	beq.n	800af92 <__kernel_rem_pio2+0x38a>
 800ae9a:	ab0c      	add	r3, sp, #48	; 0x30
 800ae9c:	f1aa 0a18 	sub.w	sl, sl, #24
 800aea0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f000 80a0 	beq.w	800afea <__kernel_rem_pio2+0x3e2>
 800aeaa:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800af30 <__kernel_rem_pio2+0x328>
 800aeae:	4650      	mov	r0, sl
 800aeb0:	f000 fc4a 	bl	800b748 <scalbn>
 800aeb4:	4f23      	ldr	r7, [pc, #140]	; (800af44 <__kernel_rem_pio2+0x33c>)
 800aeb6:	ec55 4b10 	vmov	r4, r5, d0
 800aeba:	46d8      	mov	r8, fp
 800aebc:	2600      	movs	r6, #0
 800aebe:	f1b8 0f00 	cmp.w	r8, #0
 800aec2:	f280 80cf 	bge.w	800b064 <__kernel_rem_pio2+0x45c>
 800aec6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800af28 <__kernel_rem_pio2+0x320>
 800aeca:	465f      	mov	r7, fp
 800aecc:	f04f 0800 	mov.w	r8, #0
 800aed0:	2f00      	cmp	r7, #0
 800aed2:	f2c0 80fd 	blt.w	800b0d0 <__kernel_rem_pio2+0x4c8>
 800aed6:	ab70      	add	r3, sp, #448	; 0x1c0
 800aed8:	f8df a074 	ldr.w	sl, [pc, #116]	; 800af50 <__kernel_rem_pio2+0x348>
 800aedc:	ec55 4b18 	vmov	r4, r5, d8
 800aee0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800aee4:	2600      	movs	r6, #0
 800aee6:	e0e5      	b.n	800b0b4 <__kernel_rem_pio2+0x4ac>
 800aee8:	2302      	movs	r3, #2
 800aeea:	9302      	str	r3, [sp, #8]
 800aeec:	e75c      	b.n	800ada8 <__kernel_rem_pio2+0x1a0>
 800aeee:	f8db 3000 	ldr.w	r3, [fp]
 800aef2:	b955      	cbnz	r5, 800af0a <__kernel_rem_pio2+0x302>
 800aef4:	b123      	cbz	r3, 800af00 <__kernel_rem_pio2+0x2f8>
 800aef6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800aefa:	f8cb 3000 	str.w	r3, [fp]
 800aefe:	2301      	movs	r3, #1
 800af00:	3201      	adds	r2, #1
 800af02:	f10b 0b04 	add.w	fp, fp, #4
 800af06:	461d      	mov	r5, r3
 800af08:	e755      	b.n	800adb6 <__kernel_rem_pio2+0x1ae>
 800af0a:	1acb      	subs	r3, r1, r3
 800af0c:	f8cb 3000 	str.w	r3, [fp]
 800af10:	462b      	mov	r3, r5
 800af12:	e7f5      	b.n	800af00 <__kernel_rem_pio2+0x2f8>
 800af14:	1e62      	subs	r2, r4, #1
 800af16:	ab0c      	add	r3, sp, #48	; 0x30
 800af18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af1c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800af20:	a90c      	add	r1, sp, #48	; 0x30
 800af22:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800af26:	e754      	b.n	800add2 <__kernel_rem_pio2+0x1ca>
	...
 800af34:	3ff00000 	.word	0x3ff00000
 800af38:	0800c848 	.word	0x0800c848
 800af3c:	40200000 	.word	0x40200000
 800af40:	3ff00000 	.word	0x3ff00000
 800af44:	3e700000 	.word	0x3e700000
 800af48:	41700000 	.word	0x41700000
 800af4c:	3fe00000 	.word	0x3fe00000
 800af50:	0800c808 	.word	0x0800c808
 800af54:	1e62      	subs	r2, r4, #1
 800af56:	ab0c      	add	r3, sp, #48	; 0x30
 800af58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af5c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800af60:	e7de      	b.n	800af20 <__kernel_rem_pio2+0x318>
 800af62:	a90c      	add	r1, sp, #48	; 0x30
 800af64:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800af68:	3b01      	subs	r3, #1
 800af6a:	430a      	orrs	r2, r1
 800af6c:	e790      	b.n	800ae90 <__kernel_rem_pio2+0x288>
 800af6e:	3301      	adds	r3, #1
 800af70:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800af74:	2900      	cmp	r1, #0
 800af76:	d0fa      	beq.n	800af6e <__kernel_rem_pio2+0x366>
 800af78:	9a08      	ldr	r2, [sp, #32]
 800af7a:	18e3      	adds	r3, r4, r3
 800af7c:	18a6      	adds	r6, r4, r2
 800af7e:	aa20      	add	r2, sp, #128	; 0x80
 800af80:	1c65      	adds	r5, r4, #1
 800af82:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800af86:	9302      	str	r3, [sp, #8]
 800af88:	9b02      	ldr	r3, [sp, #8]
 800af8a:	42ab      	cmp	r3, r5
 800af8c:	da04      	bge.n	800af98 <__kernel_rem_pio2+0x390>
 800af8e:	461c      	mov	r4, r3
 800af90:	e6b5      	b.n	800acfe <__kernel_rem_pio2+0xf6>
 800af92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af94:	2301      	movs	r3, #1
 800af96:	e7eb      	b.n	800af70 <__kernel_rem_pio2+0x368>
 800af98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af9e:	f7f5 fac1 	bl	8000524 <__aeabi_i2d>
 800afa2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800afa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afa8:	46b3      	mov	fp, r6
 800afaa:	461c      	mov	r4, r3
 800afac:	2700      	movs	r7, #0
 800afae:	f04f 0800 	mov.w	r8, #0
 800afb2:	f04f 0900 	mov.w	r9, #0
 800afb6:	9b06      	ldr	r3, [sp, #24]
 800afb8:	429f      	cmp	r7, r3
 800afba:	dd06      	ble.n	800afca <__kernel_rem_pio2+0x3c2>
 800afbc:	ab70      	add	r3, sp, #448	; 0x1c0
 800afbe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800afc2:	e9c3 8900 	strd	r8, r9, [r3]
 800afc6:	3501      	adds	r5, #1
 800afc8:	e7de      	b.n	800af88 <__kernel_rem_pio2+0x380>
 800afca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800afce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800afd2:	f7f5 fb11 	bl	80005f8 <__aeabi_dmul>
 800afd6:	4602      	mov	r2, r0
 800afd8:	460b      	mov	r3, r1
 800afda:	4640      	mov	r0, r8
 800afdc:	4649      	mov	r1, r9
 800afde:	f7f5 f955 	bl	800028c <__adddf3>
 800afe2:	3701      	adds	r7, #1
 800afe4:	4680      	mov	r8, r0
 800afe6:	4689      	mov	r9, r1
 800afe8:	e7e5      	b.n	800afb6 <__kernel_rem_pio2+0x3ae>
 800afea:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800afee:	e754      	b.n	800ae9a <__kernel_rem_pio2+0x292>
 800aff0:	ec47 6b10 	vmov	d0, r6, r7
 800aff4:	f1ca 0000 	rsb	r0, sl, #0
 800aff8:	f000 fba6 	bl	800b748 <scalbn>
 800affc:	ec57 6b10 	vmov	r6, r7, d0
 800b000:	4b9f      	ldr	r3, [pc, #636]	; (800b280 <__kernel_rem_pio2+0x678>)
 800b002:	ee10 0a10 	vmov	r0, s0
 800b006:	2200      	movs	r2, #0
 800b008:	4639      	mov	r1, r7
 800b00a:	f7f5 fd7b 	bl	8000b04 <__aeabi_dcmpge>
 800b00e:	b300      	cbz	r0, 800b052 <__kernel_rem_pio2+0x44a>
 800b010:	4b9c      	ldr	r3, [pc, #624]	; (800b284 <__kernel_rem_pio2+0x67c>)
 800b012:	2200      	movs	r2, #0
 800b014:	4630      	mov	r0, r6
 800b016:	4639      	mov	r1, r7
 800b018:	f7f5 faee 	bl	80005f8 <__aeabi_dmul>
 800b01c:	f7f5 fd86 	bl	8000b2c <__aeabi_d2iz>
 800b020:	4605      	mov	r5, r0
 800b022:	f7f5 fa7f 	bl	8000524 <__aeabi_i2d>
 800b026:	4b96      	ldr	r3, [pc, #600]	; (800b280 <__kernel_rem_pio2+0x678>)
 800b028:	2200      	movs	r2, #0
 800b02a:	f7f5 fae5 	bl	80005f8 <__aeabi_dmul>
 800b02e:	460b      	mov	r3, r1
 800b030:	4602      	mov	r2, r0
 800b032:	4639      	mov	r1, r7
 800b034:	4630      	mov	r0, r6
 800b036:	f7f5 f927 	bl	8000288 <__aeabi_dsub>
 800b03a:	f7f5 fd77 	bl	8000b2c <__aeabi_d2iz>
 800b03e:	f104 0b01 	add.w	fp, r4, #1
 800b042:	ab0c      	add	r3, sp, #48	; 0x30
 800b044:	f10a 0a18 	add.w	sl, sl, #24
 800b048:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b04c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800b050:	e72b      	b.n	800aeaa <__kernel_rem_pio2+0x2a2>
 800b052:	4630      	mov	r0, r6
 800b054:	4639      	mov	r1, r7
 800b056:	f7f5 fd69 	bl	8000b2c <__aeabi_d2iz>
 800b05a:	ab0c      	add	r3, sp, #48	; 0x30
 800b05c:	46a3      	mov	fp, r4
 800b05e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b062:	e722      	b.n	800aeaa <__kernel_rem_pio2+0x2a2>
 800b064:	ab70      	add	r3, sp, #448	; 0x1c0
 800b066:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800b06a:	ab0c      	add	r3, sp, #48	; 0x30
 800b06c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b070:	f7f5 fa58 	bl	8000524 <__aeabi_i2d>
 800b074:	4622      	mov	r2, r4
 800b076:	462b      	mov	r3, r5
 800b078:	f7f5 fabe 	bl	80005f8 <__aeabi_dmul>
 800b07c:	4632      	mov	r2, r6
 800b07e:	e9c9 0100 	strd	r0, r1, [r9]
 800b082:	463b      	mov	r3, r7
 800b084:	4620      	mov	r0, r4
 800b086:	4629      	mov	r1, r5
 800b088:	f7f5 fab6 	bl	80005f8 <__aeabi_dmul>
 800b08c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b090:	4604      	mov	r4, r0
 800b092:	460d      	mov	r5, r1
 800b094:	e713      	b.n	800aebe <__kernel_rem_pio2+0x2b6>
 800b096:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b09a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b09e:	f7f5 faab 	bl	80005f8 <__aeabi_dmul>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	4629      	mov	r1, r5
 800b0aa:	f7f5 f8ef 	bl	800028c <__adddf3>
 800b0ae:	3601      	adds	r6, #1
 800b0b0:	4604      	mov	r4, r0
 800b0b2:	460d      	mov	r5, r1
 800b0b4:	9b04      	ldr	r3, [sp, #16]
 800b0b6:	429e      	cmp	r6, r3
 800b0b8:	dc01      	bgt.n	800b0be <__kernel_rem_pio2+0x4b6>
 800b0ba:	45b0      	cmp	r8, r6
 800b0bc:	daeb      	bge.n	800b096 <__kernel_rem_pio2+0x48e>
 800b0be:	ab48      	add	r3, sp, #288	; 0x120
 800b0c0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b0c4:	e9c3 4500 	strd	r4, r5, [r3]
 800b0c8:	3f01      	subs	r7, #1
 800b0ca:	f108 0801 	add.w	r8, r8, #1
 800b0ce:	e6ff      	b.n	800aed0 <__kernel_rem_pio2+0x2c8>
 800b0d0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b0d2:	2b02      	cmp	r3, #2
 800b0d4:	dc0b      	bgt.n	800b0ee <__kernel_rem_pio2+0x4e6>
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	dc6e      	bgt.n	800b1b8 <__kernel_rem_pio2+0x5b0>
 800b0da:	d045      	beq.n	800b168 <__kernel_rem_pio2+0x560>
 800b0dc:	9b07      	ldr	r3, [sp, #28]
 800b0de:	f003 0007 	and.w	r0, r3, #7
 800b0e2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b0e6:	ecbd 8b02 	vpop	{d8}
 800b0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ee:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b0f0:	2b03      	cmp	r3, #3
 800b0f2:	d1f3      	bne.n	800b0dc <__kernel_rem_pio2+0x4d4>
 800b0f4:	ab48      	add	r3, sp, #288	; 0x120
 800b0f6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800b0fa:	46d0      	mov	r8, sl
 800b0fc:	46d9      	mov	r9, fp
 800b0fe:	f1b9 0f00 	cmp.w	r9, #0
 800b102:	f1a8 0808 	sub.w	r8, r8, #8
 800b106:	dc64      	bgt.n	800b1d2 <__kernel_rem_pio2+0x5ca>
 800b108:	465c      	mov	r4, fp
 800b10a:	2c01      	cmp	r4, #1
 800b10c:	f1aa 0a08 	sub.w	sl, sl, #8
 800b110:	dc7e      	bgt.n	800b210 <__kernel_rem_pio2+0x608>
 800b112:	2000      	movs	r0, #0
 800b114:	2100      	movs	r1, #0
 800b116:	f1bb 0f01 	cmp.w	fp, #1
 800b11a:	f300 8097 	bgt.w	800b24c <__kernel_rem_pio2+0x644>
 800b11e:	9b02      	ldr	r3, [sp, #8]
 800b120:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800b124:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800b128:	2b00      	cmp	r3, #0
 800b12a:	f040 8099 	bne.w	800b260 <__kernel_rem_pio2+0x658>
 800b12e:	9b01      	ldr	r3, [sp, #4]
 800b130:	e9c3 5600 	strd	r5, r6, [r3]
 800b134:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b138:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b13c:	e7ce      	b.n	800b0dc <__kernel_rem_pio2+0x4d4>
 800b13e:	ab48      	add	r3, sp, #288	; 0x120
 800b140:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b148:	f7f5 f8a0 	bl	800028c <__adddf3>
 800b14c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b150:	f1bb 0f00 	cmp.w	fp, #0
 800b154:	daf3      	bge.n	800b13e <__kernel_rem_pio2+0x536>
 800b156:	9b02      	ldr	r3, [sp, #8]
 800b158:	b113      	cbz	r3, 800b160 <__kernel_rem_pio2+0x558>
 800b15a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b15e:	4619      	mov	r1, r3
 800b160:	9b01      	ldr	r3, [sp, #4]
 800b162:	e9c3 0100 	strd	r0, r1, [r3]
 800b166:	e7b9      	b.n	800b0dc <__kernel_rem_pio2+0x4d4>
 800b168:	2000      	movs	r0, #0
 800b16a:	2100      	movs	r1, #0
 800b16c:	e7f0      	b.n	800b150 <__kernel_rem_pio2+0x548>
 800b16e:	ab48      	add	r3, sp, #288	; 0x120
 800b170:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b178:	f7f5 f888 	bl	800028c <__adddf3>
 800b17c:	3c01      	subs	r4, #1
 800b17e:	2c00      	cmp	r4, #0
 800b180:	daf5      	bge.n	800b16e <__kernel_rem_pio2+0x566>
 800b182:	9b02      	ldr	r3, [sp, #8]
 800b184:	b1e3      	cbz	r3, 800b1c0 <__kernel_rem_pio2+0x5b8>
 800b186:	4602      	mov	r2, r0
 800b188:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b18c:	9c01      	ldr	r4, [sp, #4]
 800b18e:	e9c4 2300 	strd	r2, r3, [r4]
 800b192:	4602      	mov	r2, r0
 800b194:	460b      	mov	r3, r1
 800b196:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b19a:	f7f5 f875 	bl	8000288 <__aeabi_dsub>
 800b19e:	ad4a      	add	r5, sp, #296	; 0x128
 800b1a0:	2401      	movs	r4, #1
 800b1a2:	45a3      	cmp	fp, r4
 800b1a4:	da0f      	bge.n	800b1c6 <__kernel_rem_pio2+0x5be>
 800b1a6:	9b02      	ldr	r3, [sp, #8]
 800b1a8:	b113      	cbz	r3, 800b1b0 <__kernel_rem_pio2+0x5a8>
 800b1aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	9b01      	ldr	r3, [sp, #4]
 800b1b2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b1b6:	e791      	b.n	800b0dc <__kernel_rem_pio2+0x4d4>
 800b1b8:	465c      	mov	r4, fp
 800b1ba:	2000      	movs	r0, #0
 800b1bc:	2100      	movs	r1, #0
 800b1be:	e7de      	b.n	800b17e <__kernel_rem_pio2+0x576>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	e7e2      	b.n	800b18c <__kernel_rem_pio2+0x584>
 800b1c6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b1ca:	f7f5 f85f 	bl	800028c <__adddf3>
 800b1ce:	3401      	adds	r4, #1
 800b1d0:	e7e7      	b.n	800b1a2 <__kernel_rem_pio2+0x59a>
 800b1d2:	e9d8 4500 	ldrd	r4, r5, [r8]
 800b1d6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800b1da:	4620      	mov	r0, r4
 800b1dc:	4632      	mov	r2, r6
 800b1de:	463b      	mov	r3, r7
 800b1e0:	4629      	mov	r1, r5
 800b1e2:	f7f5 f853 	bl	800028c <__adddf3>
 800b1e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	4629      	mov	r1, r5
 800b1f2:	f7f5 f849 	bl	8000288 <__aeabi_dsub>
 800b1f6:	4632      	mov	r2, r6
 800b1f8:	463b      	mov	r3, r7
 800b1fa:	f7f5 f847 	bl	800028c <__adddf3>
 800b1fe:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b202:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800b206:	ed88 7b00 	vstr	d7, [r8]
 800b20a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b20e:	e776      	b.n	800b0fe <__kernel_rem_pio2+0x4f6>
 800b210:	e9da 8900 	ldrd	r8, r9, [sl]
 800b214:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b218:	4640      	mov	r0, r8
 800b21a:	4632      	mov	r2, r6
 800b21c:	463b      	mov	r3, r7
 800b21e:	4649      	mov	r1, r9
 800b220:	f7f5 f834 	bl	800028c <__adddf3>
 800b224:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b228:	4602      	mov	r2, r0
 800b22a:	460b      	mov	r3, r1
 800b22c:	4640      	mov	r0, r8
 800b22e:	4649      	mov	r1, r9
 800b230:	f7f5 f82a 	bl	8000288 <__aeabi_dsub>
 800b234:	4632      	mov	r2, r6
 800b236:	463b      	mov	r3, r7
 800b238:	f7f5 f828 	bl	800028c <__adddf3>
 800b23c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b240:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b244:	ed8a 7b00 	vstr	d7, [sl]
 800b248:	3c01      	subs	r4, #1
 800b24a:	e75e      	b.n	800b10a <__kernel_rem_pio2+0x502>
 800b24c:	ab48      	add	r3, sp, #288	; 0x120
 800b24e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b256:	f7f5 f819 	bl	800028c <__adddf3>
 800b25a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b25e:	e75a      	b.n	800b116 <__kernel_rem_pio2+0x50e>
 800b260:	9b01      	ldr	r3, [sp, #4]
 800b262:	9a01      	ldr	r2, [sp, #4]
 800b264:	601d      	str	r5, [r3, #0]
 800b266:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b26a:	605c      	str	r4, [r3, #4]
 800b26c:	609f      	str	r7, [r3, #8]
 800b26e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b272:	60d3      	str	r3, [r2, #12]
 800b274:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b278:	6110      	str	r0, [r2, #16]
 800b27a:	6153      	str	r3, [r2, #20]
 800b27c:	e72e      	b.n	800b0dc <__kernel_rem_pio2+0x4d4>
 800b27e:	bf00      	nop
 800b280:	41700000 	.word	0x41700000
 800b284:	3e700000 	.word	0x3e700000

0800b288 <__kernel_tan>:
 800b288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b28c:	ed2d 8b04 	vpush	{d8-d9}
 800b290:	ec5b ab10 	vmov	sl, fp, d0
 800b294:	4be2      	ldr	r3, [pc, #904]	; (800b620 <__kernel_tan+0x398>)
 800b296:	b085      	sub	sp, #20
 800b298:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800b29c:	429f      	cmp	r7, r3
 800b29e:	ed8d 1b00 	vstr	d1, [sp]
 800b2a2:	4606      	mov	r6, r0
 800b2a4:	f8cd b00c 	str.w	fp, [sp, #12]
 800b2a8:	dc24      	bgt.n	800b2f4 <__kernel_tan+0x6c>
 800b2aa:	ee10 0a10 	vmov	r0, s0
 800b2ae:	4659      	mov	r1, fp
 800b2b0:	f7f5 fc3c 	bl	8000b2c <__aeabi_d2iz>
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	d148      	bne.n	800b34a <__kernel_tan+0xc2>
 800b2b8:	1c73      	adds	r3, r6, #1
 800b2ba:	4652      	mov	r2, sl
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	433b      	orrs	r3, r7
 800b2c0:	d112      	bne.n	800b2e8 <__kernel_tan+0x60>
 800b2c2:	ec4b ab10 	vmov	d0, sl, fp
 800b2c6:	f000 f9b3 	bl	800b630 <fabs>
 800b2ca:	49d6      	ldr	r1, [pc, #856]	; (800b624 <__kernel_tan+0x39c>)
 800b2cc:	ec53 2b10 	vmov	r2, r3, d0
 800b2d0:	2000      	movs	r0, #0
 800b2d2:	f7f5 fabb 	bl	800084c <__aeabi_ddiv>
 800b2d6:	4682      	mov	sl, r0
 800b2d8:	468b      	mov	fp, r1
 800b2da:	ec4b ab10 	vmov	d0, sl, fp
 800b2de:	b005      	add	sp, #20
 800b2e0:	ecbd 8b04 	vpop	{d8-d9}
 800b2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2e8:	2e01      	cmp	r6, #1
 800b2ea:	d0f6      	beq.n	800b2da <__kernel_tan+0x52>
 800b2ec:	49ce      	ldr	r1, [pc, #824]	; (800b628 <__kernel_tan+0x3a0>)
 800b2ee:	465b      	mov	r3, fp
 800b2f0:	2000      	movs	r0, #0
 800b2f2:	e7ee      	b.n	800b2d2 <__kernel_tan+0x4a>
 800b2f4:	4bcd      	ldr	r3, [pc, #820]	; (800b62c <__kernel_tan+0x3a4>)
 800b2f6:	429f      	cmp	r7, r3
 800b2f8:	dd27      	ble.n	800b34a <__kernel_tan+0xc2>
 800b2fa:	9b03      	ldr	r3, [sp, #12]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	da0a      	bge.n	800b316 <__kernel_tan+0x8e>
 800b300:	e9dd 2100 	ldrd	r2, r1, [sp]
 800b304:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b308:	469b      	mov	fp, r3
 800b30a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b30e:	e9cd 2300 	strd	r2, r3, [sp]
 800b312:	ee10 aa10 	vmov	sl, s0
 800b316:	4652      	mov	r2, sl
 800b318:	465b      	mov	r3, fp
 800b31a:	a1a1      	add	r1, pc, #644	; (adr r1, 800b5a0 <__kernel_tan+0x318>)
 800b31c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b320:	f7f4 ffb2 	bl	8000288 <__aeabi_dsub>
 800b324:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b328:	4604      	mov	r4, r0
 800b32a:	460d      	mov	r5, r1
 800b32c:	a19e      	add	r1, pc, #632	; (adr r1, 800b5a8 <__kernel_tan+0x320>)
 800b32e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b332:	f7f4 ffa9 	bl	8000288 <__aeabi_dsub>
 800b336:	4622      	mov	r2, r4
 800b338:	462b      	mov	r3, r5
 800b33a:	f7f4 ffa7 	bl	800028c <__adddf3>
 800b33e:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 800b5b0 <__kernel_tan+0x328>
 800b342:	ed8d 7b00 	vstr	d7, [sp]
 800b346:	4682      	mov	sl, r0
 800b348:	468b      	mov	fp, r1
 800b34a:	4652      	mov	r2, sl
 800b34c:	465b      	mov	r3, fp
 800b34e:	4650      	mov	r0, sl
 800b350:	4659      	mov	r1, fp
 800b352:	f7f5 f951 	bl	80005f8 <__aeabi_dmul>
 800b356:	4602      	mov	r2, r0
 800b358:	460b      	mov	r3, r1
 800b35a:	4680      	mov	r8, r0
 800b35c:	4689      	mov	r9, r1
 800b35e:	f7f5 f94b 	bl	80005f8 <__aeabi_dmul>
 800b362:	4642      	mov	r2, r8
 800b364:	4604      	mov	r4, r0
 800b366:	460d      	mov	r5, r1
 800b368:	464b      	mov	r3, r9
 800b36a:	4650      	mov	r0, sl
 800b36c:	4659      	mov	r1, fp
 800b36e:	f7f5 f943 	bl	80005f8 <__aeabi_dmul>
 800b372:	a391      	add	r3, pc, #580	; (adr r3, 800b5b8 <__kernel_tan+0x330>)
 800b374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b378:	ec41 0b18 	vmov	d8, r0, r1
 800b37c:	4620      	mov	r0, r4
 800b37e:	4629      	mov	r1, r5
 800b380:	f7f5 f93a 	bl	80005f8 <__aeabi_dmul>
 800b384:	a38e      	add	r3, pc, #568	; (adr r3, 800b5c0 <__kernel_tan+0x338>)
 800b386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38a:	f7f4 ff7f 	bl	800028c <__adddf3>
 800b38e:	4622      	mov	r2, r4
 800b390:	462b      	mov	r3, r5
 800b392:	f7f5 f931 	bl	80005f8 <__aeabi_dmul>
 800b396:	a38c      	add	r3, pc, #560	; (adr r3, 800b5c8 <__kernel_tan+0x340>)
 800b398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39c:	f7f4 ff76 	bl	800028c <__adddf3>
 800b3a0:	4622      	mov	r2, r4
 800b3a2:	462b      	mov	r3, r5
 800b3a4:	f7f5 f928 	bl	80005f8 <__aeabi_dmul>
 800b3a8:	a389      	add	r3, pc, #548	; (adr r3, 800b5d0 <__kernel_tan+0x348>)
 800b3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ae:	f7f4 ff6d 	bl	800028c <__adddf3>
 800b3b2:	4622      	mov	r2, r4
 800b3b4:	462b      	mov	r3, r5
 800b3b6:	f7f5 f91f 	bl	80005f8 <__aeabi_dmul>
 800b3ba:	a387      	add	r3, pc, #540	; (adr r3, 800b5d8 <__kernel_tan+0x350>)
 800b3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c0:	f7f4 ff64 	bl	800028c <__adddf3>
 800b3c4:	4622      	mov	r2, r4
 800b3c6:	462b      	mov	r3, r5
 800b3c8:	f7f5 f916 	bl	80005f8 <__aeabi_dmul>
 800b3cc:	a384      	add	r3, pc, #528	; (adr r3, 800b5e0 <__kernel_tan+0x358>)
 800b3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d2:	f7f4 ff5b 	bl	800028c <__adddf3>
 800b3d6:	4642      	mov	r2, r8
 800b3d8:	464b      	mov	r3, r9
 800b3da:	f7f5 f90d 	bl	80005f8 <__aeabi_dmul>
 800b3de:	a382      	add	r3, pc, #520	; (adr r3, 800b5e8 <__kernel_tan+0x360>)
 800b3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e4:	ec41 0b19 	vmov	d9, r0, r1
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	4629      	mov	r1, r5
 800b3ec:	f7f5 f904 	bl	80005f8 <__aeabi_dmul>
 800b3f0:	a37f      	add	r3, pc, #508	; (adr r3, 800b5f0 <__kernel_tan+0x368>)
 800b3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f6:	f7f4 ff49 	bl	800028c <__adddf3>
 800b3fa:	4622      	mov	r2, r4
 800b3fc:	462b      	mov	r3, r5
 800b3fe:	f7f5 f8fb 	bl	80005f8 <__aeabi_dmul>
 800b402:	a37d      	add	r3, pc, #500	; (adr r3, 800b5f8 <__kernel_tan+0x370>)
 800b404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b408:	f7f4 ff40 	bl	800028c <__adddf3>
 800b40c:	4622      	mov	r2, r4
 800b40e:	462b      	mov	r3, r5
 800b410:	f7f5 f8f2 	bl	80005f8 <__aeabi_dmul>
 800b414:	a37a      	add	r3, pc, #488	; (adr r3, 800b600 <__kernel_tan+0x378>)
 800b416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41a:	f7f4 ff37 	bl	800028c <__adddf3>
 800b41e:	4622      	mov	r2, r4
 800b420:	462b      	mov	r3, r5
 800b422:	f7f5 f8e9 	bl	80005f8 <__aeabi_dmul>
 800b426:	a378      	add	r3, pc, #480	; (adr r3, 800b608 <__kernel_tan+0x380>)
 800b428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42c:	f7f4 ff2e 	bl	800028c <__adddf3>
 800b430:	4622      	mov	r2, r4
 800b432:	462b      	mov	r3, r5
 800b434:	f7f5 f8e0 	bl	80005f8 <__aeabi_dmul>
 800b438:	a375      	add	r3, pc, #468	; (adr r3, 800b610 <__kernel_tan+0x388>)
 800b43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43e:	f7f4 ff25 	bl	800028c <__adddf3>
 800b442:	4602      	mov	r2, r0
 800b444:	460b      	mov	r3, r1
 800b446:	ec51 0b19 	vmov	r0, r1, d9
 800b44a:	f7f4 ff1f 	bl	800028c <__adddf3>
 800b44e:	ec53 2b18 	vmov	r2, r3, d8
 800b452:	f7f5 f8d1 	bl	80005f8 <__aeabi_dmul>
 800b456:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b45a:	f7f4 ff17 	bl	800028c <__adddf3>
 800b45e:	4642      	mov	r2, r8
 800b460:	464b      	mov	r3, r9
 800b462:	f7f5 f8c9 	bl	80005f8 <__aeabi_dmul>
 800b466:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b46a:	f7f4 ff0f 	bl	800028c <__adddf3>
 800b46e:	a36a      	add	r3, pc, #424	; (adr r3, 800b618 <__kernel_tan+0x390>)
 800b470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b474:	4604      	mov	r4, r0
 800b476:	460d      	mov	r5, r1
 800b478:	ec51 0b18 	vmov	r0, r1, d8
 800b47c:	f7f5 f8bc 	bl	80005f8 <__aeabi_dmul>
 800b480:	4622      	mov	r2, r4
 800b482:	462b      	mov	r3, r5
 800b484:	f7f4 ff02 	bl	800028c <__adddf3>
 800b488:	460b      	mov	r3, r1
 800b48a:	ec41 0b18 	vmov	d8, r0, r1
 800b48e:	4602      	mov	r2, r0
 800b490:	4659      	mov	r1, fp
 800b492:	4650      	mov	r0, sl
 800b494:	f7f4 fefa 	bl	800028c <__adddf3>
 800b498:	4b64      	ldr	r3, [pc, #400]	; (800b62c <__kernel_tan+0x3a4>)
 800b49a:	429f      	cmp	r7, r3
 800b49c:	4604      	mov	r4, r0
 800b49e:	460d      	mov	r5, r1
 800b4a0:	dd3e      	ble.n	800b520 <__kernel_tan+0x298>
 800b4a2:	4630      	mov	r0, r6
 800b4a4:	f7f5 f83e 	bl	8000524 <__aeabi_i2d>
 800b4a8:	4622      	mov	r2, r4
 800b4aa:	4680      	mov	r8, r0
 800b4ac:	4689      	mov	r9, r1
 800b4ae:	462b      	mov	r3, r5
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	4629      	mov	r1, r5
 800b4b4:	f7f5 f8a0 	bl	80005f8 <__aeabi_dmul>
 800b4b8:	4642      	mov	r2, r8
 800b4ba:	4606      	mov	r6, r0
 800b4bc:	460f      	mov	r7, r1
 800b4be:	464b      	mov	r3, r9
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	4629      	mov	r1, r5
 800b4c4:	f7f4 fee2 	bl	800028c <__adddf3>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	4630      	mov	r0, r6
 800b4ce:	4639      	mov	r1, r7
 800b4d0:	f7f5 f9bc 	bl	800084c <__aeabi_ddiv>
 800b4d4:	ec53 2b18 	vmov	r2, r3, d8
 800b4d8:	f7f4 fed6 	bl	8000288 <__aeabi_dsub>
 800b4dc:	4602      	mov	r2, r0
 800b4de:	460b      	mov	r3, r1
 800b4e0:	4650      	mov	r0, sl
 800b4e2:	4659      	mov	r1, fp
 800b4e4:	f7f4 fed0 	bl	8000288 <__aeabi_dsub>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	f7f4 fece 	bl	800028c <__adddf3>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	4640      	mov	r0, r8
 800b4f6:	4649      	mov	r1, r9
 800b4f8:	f7f4 fec6 	bl	8000288 <__aeabi_dsub>
 800b4fc:	9b03      	ldr	r3, [sp, #12]
 800b4fe:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800b502:	f00a 0a02 	and.w	sl, sl, #2
 800b506:	4604      	mov	r4, r0
 800b508:	f1ca 0001 	rsb	r0, sl, #1
 800b50c:	460d      	mov	r5, r1
 800b50e:	f7f5 f809 	bl	8000524 <__aeabi_i2d>
 800b512:	4602      	mov	r2, r0
 800b514:	460b      	mov	r3, r1
 800b516:	4620      	mov	r0, r4
 800b518:	4629      	mov	r1, r5
 800b51a:	f7f5 f86d 	bl	80005f8 <__aeabi_dmul>
 800b51e:	e6da      	b.n	800b2d6 <__kernel_tan+0x4e>
 800b520:	2e01      	cmp	r6, #1
 800b522:	d038      	beq.n	800b596 <__kernel_tan+0x30e>
 800b524:	460f      	mov	r7, r1
 800b526:	4689      	mov	r9, r1
 800b528:	4602      	mov	r2, r0
 800b52a:	460b      	mov	r3, r1
 800b52c:	2000      	movs	r0, #0
 800b52e:	493e      	ldr	r1, [pc, #248]	; (800b628 <__kernel_tan+0x3a0>)
 800b530:	f7f5 f98c 	bl	800084c <__aeabi_ddiv>
 800b534:	2600      	movs	r6, #0
 800b536:	e9cd 0100 	strd	r0, r1, [sp]
 800b53a:	4652      	mov	r2, sl
 800b53c:	465b      	mov	r3, fp
 800b53e:	4630      	mov	r0, r6
 800b540:	4639      	mov	r1, r7
 800b542:	f7f4 fea1 	bl	8000288 <__aeabi_dsub>
 800b546:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b54a:	4602      	mov	r2, r0
 800b54c:	460b      	mov	r3, r1
 800b54e:	ec51 0b18 	vmov	r0, r1, d8
 800b552:	f7f4 fe99 	bl	8000288 <__aeabi_dsub>
 800b556:	4632      	mov	r2, r6
 800b558:	462b      	mov	r3, r5
 800b55a:	f7f5 f84d 	bl	80005f8 <__aeabi_dmul>
 800b55e:	46b0      	mov	r8, r6
 800b560:	460f      	mov	r7, r1
 800b562:	4606      	mov	r6, r0
 800b564:	4642      	mov	r2, r8
 800b566:	462b      	mov	r3, r5
 800b568:	4640      	mov	r0, r8
 800b56a:	4649      	mov	r1, r9
 800b56c:	f7f5 f844 	bl	80005f8 <__aeabi_dmul>
 800b570:	4b2c      	ldr	r3, [pc, #176]	; (800b624 <__kernel_tan+0x39c>)
 800b572:	2200      	movs	r2, #0
 800b574:	f7f4 fe8a 	bl	800028c <__adddf3>
 800b578:	4602      	mov	r2, r0
 800b57a:	460b      	mov	r3, r1
 800b57c:	4630      	mov	r0, r6
 800b57e:	4639      	mov	r1, r7
 800b580:	f7f4 fe84 	bl	800028c <__adddf3>
 800b584:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b588:	f7f5 f836 	bl	80005f8 <__aeabi_dmul>
 800b58c:	4642      	mov	r2, r8
 800b58e:	462b      	mov	r3, r5
 800b590:	f7f4 fe7c 	bl	800028c <__adddf3>
 800b594:	e69f      	b.n	800b2d6 <__kernel_tan+0x4e>
 800b596:	4682      	mov	sl, r0
 800b598:	468b      	mov	fp, r1
 800b59a:	e69e      	b.n	800b2da <__kernel_tan+0x52>
 800b59c:	f3af 8000 	nop.w
 800b5a0:	54442d18 	.word	0x54442d18
 800b5a4:	3fe921fb 	.word	0x3fe921fb
 800b5a8:	33145c07 	.word	0x33145c07
 800b5ac:	3c81a626 	.word	0x3c81a626
	...
 800b5b8:	74bf7ad4 	.word	0x74bf7ad4
 800b5bc:	3efb2a70 	.word	0x3efb2a70
 800b5c0:	32f0a7e9 	.word	0x32f0a7e9
 800b5c4:	3f12b80f 	.word	0x3f12b80f
 800b5c8:	1a8d1068 	.word	0x1a8d1068
 800b5cc:	3f3026f7 	.word	0x3f3026f7
 800b5d0:	fee08315 	.word	0xfee08315
 800b5d4:	3f57dbc8 	.word	0x3f57dbc8
 800b5d8:	e96e8493 	.word	0xe96e8493
 800b5dc:	3f8226e3 	.word	0x3f8226e3
 800b5e0:	1bb341fe 	.word	0x1bb341fe
 800b5e4:	3faba1ba 	.word	0x3faba1ba
 800b5e8:	db605373 	.word	0xdb605373
 800b5ec:	bef375cb 	.word	0xbef375cb
 800b5f0:	a03792a6 	.word	0xa03792a6
 800b5f4:	3f147e88 	.word	0x3f147e88
 800b5f8:	f2f26501 	.word	0xf2f26501
 800b5fc:	3f4344d8 	.word	0x3f4344d8
 800b600:	c9560328 	.word	0xc9560328
 800b604:	3f6d6d22 	.word	0x3f6d6d22
 800b608:	8406d637 	.word	0x8406d637
 800b60c:	3f9664f4 	.word	0x3f9664f4
 800b610:	1110fe7a 	.word	0x1110fe7a
 800b614:	3fc11111 	.word	0x3fc11111
 800b618:	55555563 	.word	0x55555563
 800b61c:	3fd55555 	.word	0x3fd55555
 800b620:	3e2fffff 	.word	0x3e2fffff
 800b624:	3ff00000 	.word	0x3ff00000
 800b628:	bff00000 	.word	0xbff00000
 800b62c:	3fe59427 	.word	0x3fe59427

0800b630 <fabs>:
 800b630:	ec51 0b10 	vmov	r0, r1, d0
 800b634:	ee10 2a10 	vmov	r2, s0
 800b638:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b63c:	ec43 2b10 	vmov	d0, r2, r3
 800b640:	4770      	bx	lr
 800b642:	0000      	movs	r0, r0
 800b644:	0000      	movs	r0, r0
	...

0800b648 <floor>:
 800b648:	ec51 0b10 	vmov	r0, r1, d0
 800b64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b650:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b654:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b658:	2e13      	cmp	r6, #19
 800b65a:	ee10 5a10 	vmov	r5, s0
 800b65e:	ee10 8a10 	vmov	r8, s0
 800b662:	460c      	mov	r4, r1
 800b664:	dc32      	bgt.n	800b6cc <floor+0x84>
 800b666:	2e00      	cmp	r6, #0
 800b668:	da14      	bge.n	800b694 <floor+0x4c>
 800b66a:	a333      	add	r3, pc, #204	; (adr r3, 800b738 <floor+0xf0>)
 800b66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b670:	f7f4 fe0c 	bl	800028c <__adddf3>
 800b674:	2200      	movs	r2, #0
 800b676:	2300      	movs	r3, #0
 800b678:	f7f5 fa4e 	bl	8000b18 <__aeabi_dcmpgt>
 800b67c:	b138      	cbz	r0, 800b68e <floor+0x46>
 800b67e:	2c00      	cmp	r4, #0
 800b680:	da57      	bge.n	800b732 <floor+0xea>
 800b682:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b686:	431d      	orrs	r5, r3
 800b688:	d001      	beq.n	800b68e <floor+0x46>
 800b68a:	4c2d      	ldr	r4, [pc, #180]	; (800b740 <floor+0xf8>)
 800b68c:	2500      	movs	r5, #0
 800b68e:	4621      	mov	r1, r4
 800b690:	4628      	mov	r0, r5
 800b692:	e025      	b.n	800b6e0 <floor+0x98>
 800b694:	4f2b      	ldr	r7, [pc, #172]	; (800b744 <floor+0xfc>)
 800b696:	4137      	asrs	r7, r6
 800b698:	ea01 0307 	and.w	r3, r1, r7
 800b69c:	4303      	orrs	r3, r0
 800b69e:	d01f      	beq.n	800b6e0 <floor+0x98>
 800b6a0:	a325      	add	r3, pc, #148	; (adr r3, 800b738 <floor+0xf0>)
 800b6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a6:	f7f4 fdf1 	bl	800028c <__adddf3>
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	f7f5 fa33 	bl	8000b18 <__aeabi_dcmpgt>
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	d0eb      	beq.n	800b68e <floor+0x46>
 800b6b6:	2c00      	cmp	r4, #0
 800b6b8:	bfbe      	ittt	lt
 800b6ba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b6be:	fa43 f606 	asrlt.w	r6, r3, r6
 800b6c2:	19a4      	addlt	r4, r4, r6
 800b6c4:	ea24 0407 	bic.w	r4, r4, r7
 800b6c8:	2500      	movs	r5, #0
 800b6ca:	e7e0      	b.n	800b68e <floor+0x46>
 800b6cc:	2e33      	cmp	r6, #51	; 0x33
 800b6ce:	dd0b      	ble.n	800b6e8 <floor+0xa0>
 800b6d0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b6d4:	d104      	bne.n	800b6e0 <floor+0x98>
 800b6d6:	ee10 2a10 	vmov	r2, s0
 800b6da:	460b      	mov	r3, r1
 800b6dc:	f7f4 fdd6 	bl	800028c <__adddf3>
 800b6e0:	ec41 0b10 	vmov	d0, r0, r1
 800b6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6e8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b6ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b6f0:	fa23 f707 	lsr.w	r7, r3, r7
 800b6f4:	4207      	tst	r7, r0
 800b6f6:	d0f3      	beq.n	800b6e0 <floor+0x98>
 800b6f8:	a30f      	add	r3, pc, #60	; (adr r3, 800b738 <floor+0xf0>)
 800b6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fe:	f7f4 fdc5 	bl	800028c <__adddf3>
 800b702:	2200      	movs	r2, #0
 800b704:	2300      	movs	r3, #0
 800b706:	f7f5 fa07 	bl	8000b18 <__aeabi_dcmpgt>
 800b70a:	2800      	cmp	r0, #0
 800b70c:	d0bf      	beq.n	800b68e <floor+0x46>
 800b70e:	2c00      	cmp	r4, #0
 800b710:	da02      	bge.n	800b718 <floor+0xd0>
 800b712:	2e14      	cmp	r6, #20
 800b714:	d103      	bne.n	800b71e <floor+0xd6>
 800b716:	3401      	adds	r4, #1
 800b718:	ea25 0507 	bic.w	r5, r5, r7
 800b71c:	e7b7      	b.n	800b68e <floor+0x46>
 800b71e:	2301      	movs	r3, #1
 800b720:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b724:	fa03 f606 	lsl.w	r6, r3, r6
 800b728:	4435      	add	r5, r6
 800b72a:	4545      	cmp	r5, r8
 800b72c:	bf38      	it	cc
 800b72e:	18e4      	addcc	r4, r4, r3
 800b730:	e7f2      	b.n	800b718 <floor+0xd0>
 800b732:	2500      	movs	r5, #0
 800b734:	462c      	mov	r4, r5
 800b736:	e7aa      	b.n	800b68e <floor+0x46>
 800b738:	8800759c 	.word	0x8800759c
 800b73c:	7e37e43c 	.word	0x7e37e43c
 800b740:	bff00000 	.word	0xbff00000
 800b744:	000fffff 	.word	0x000fffff

0800b748 <scalbn>:
 800b748:	b570      	push	{r4, r5, r6, lr}
 800b74a:	ec55 4b10 	vmov	r4, r5, d0
 800b74e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b752:	4606      	mov	r6, r0
 800b754:	462b      	mov	r3, r5
 800b756:	b99a      	cbnz	r2, 800b780 <scalbn+0x38>
 800b758:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b75c:	4323      	orrs	r3, r4
 800b75e:	d036      	beq.n	800b7ce <scalbn+0x86>
 800b760:	4b39      	ldr	r3, [pc, #228]	; (800b848 <scalbn+0x100>)
 800b762:	4629      	mov	r1, r5
 800b764:	ee10 0a10 	vmov	r0, s0
 800b768:	2200      	movs	r2, #0
 800b76a:	f7f4 ff45 	bl	80005f8 <__aeabi_dmul>
 800b76e:	4b37      	ldr	r3, [pc, #220]	; (800b84c <scalbn+0x104>)
 800b770:	429e      	cmp	r6, r3
 800b772:	4604      	mov	r4, r0
 800b774:	460d      	mov	r5, r1
 800b776:	da10      	bge.n	800b79a <scalbn+0x52>
 800b778:	a32b      	add	r3, pc, #172	; (adr r3, 800b828 <scalbn+0xe0>)
 800b77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77e:	e03a      	b.n	800b7f6 <scalbn+0xae>
 800b780:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b784:	428a      	cmp	r2, r1
 800b786:	d10c      	bne.n	800b7a2 <scalbn+0x5a>
 800b788:	ee10 2a10 	vmov	r2, s0
 800b78c:	4620      	mov	r0, r4
 800b78e:	4629      	mov	r1, r5
 800b790:	f7f4 fd7c 	bl	800028c <__adddf3>
 800b794:	4604      	mov	r4, r0
 800b796:	460d      	mov	r5, r1
 800b798:	e019      	b.n	800b7ce <scalbn+0x86>
 800b79a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b79e:	460b      	mov	r3, r1
 800b7a0:	3a36      	subs	r2, #54	; 0x36
 800b7a2:	4432      	add	r2, r6
 800b7a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b7a8:	428a      	cmp	r2, r1
 800b7aa:	dd08      	ble.n	800b7be <scalbn+0x76>
 800b7ac:	2d00      	cmp	r5, #0
 800b7ae:	a120      	add	r1, pc, #128	; (adr r1, 800b830 <scalbn+0xe8>)
 800b7b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7b4:	da1c      	bge.n	800b7f0 <scalbn+0xa8>
 800b7b6:	a120      	add	r1, pc, #128	; (adr r1, 800b838 <scalbn+0xf0>)
 800b7b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7bc:	e018      	b.n	800b7f0 <scalbn+0xa8>
 800b7be:	2a00      	cmp	r2, #0
 800b7c0:	dd08      	ble.n	800b7d4 <scalbn+0x8c>
 800b7c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b7c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b7ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b7ce:	ec45 4b10 	vmov	d0, r4, r5
 800b7d2:	bd70      	pop	{r4, r5, r6, pc}
 800b7d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b7d8:	da19      	bge.n	800b80e <scalbn+0xc6>
 800b7da:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b7de:	429e      	cmp	r6, r3
 800b7e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b7e4:	dd0a      	ble.n	800b7fc <scalbn+0xb4>
 800b7e6:	a112      	add	r1, pc, #72	; (adr r1, 800b830 <scalbn+0xe8>)
 800b7e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d1e2      	bne.n	800b7b6 <scalbn+0x6e>
 800b7f0:	a30f      	add	r3, pc, #60	; (adr r3, 800b830 <scalbn+0xe8>)
 800b7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f6:	f7f4 feff 	bl	80005f8 <__aeabi_dmul>
 800b7fa:	e7cb      	b.n	800b794 <scalbn+0x4c>
 800b7fc:	a10a      	add	r1, pc, #40	; (adr r1, 800b828 <scalbn+0xe0>)
 800b7fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d0b8      	beq.n	800b778 <scalbn+0x30>
 800b806:	a10e      	add	r1, pc, #56	; (adr r1, 800b840 <scalbn+0xf8>)
 800b808:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b80c:	e7b4      	b.n	800b778 <scalbn+0x30>
 800b80e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b812:	3236      	adds	r2, #54	; 0x36
 800b814:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b818:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b81c:	4620      	mov	r0, r4
 800b81e:	4b0c      	ldr	r3, [pc, #48]	; (800b850 <scalbn+0x108>)
 800b820:	2200      	movs	r2, #0
 800b822:	e7e8      	b.n	800b7f6 <scalbn+0xae>
 800b824:	f3af 8000 	nop.w
 800b828:	c2f8f359 	.word	0xc2f8f359
 800b82c:	01a56e1f 	.word	0x01a56e1f
 800b830:	8800759c 	.word	0x8800759c
 800b834:	7e37e43c 	.word	0x7e37e43c
 800b838:	8800759c 	.word	0x8800759c
 800b83c:	fe37e43c 	.word	0xfe37e43c
 800b840:	c2f8f359 	.word	0xc2f8f359
 800b844:	81a56e1f 	.word	0x81a56e1f
 800b848:	43500000 	.word	0x43500000
 800b84c:	ffff3cb0 	.word	0xffff3cb0
 800b850:	3c900000 	.word	0x3c900000

0800b854 <_init>:
 800b854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b856:	bf00      	nop
 800b858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b85a:	bc08      	pop	{r3}
 800b85c:	469e      	mov	lr, r3
 800b85e:	4770      	bx	lr

0800b860 <_fini>:
 800b860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b862:	bf00      	nop
 800b864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b866:	bc08      	pop	{r3}
 800b868:	469e      	mov	lr, r3
 800b86a:	4770      	bx	lr
