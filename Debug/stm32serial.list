
stm32serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001770  0800bb98  0800bb98  0001bb98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d308  0800d308  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d308  0800d308  0001d308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d310  0800d310  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d310  0800d310  0001d310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d314  0800d314  0001d314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800d318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026dc  200001f8  0800d510  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200028d4  0800d510  000228d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb84  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003da4  00000000  00000000  0003cdac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  00040b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001a0f1  00000000  00000000  00042000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00019a5c  00000000  00000000  0005c0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00093347  00000000  00000000  00075b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00108e94  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001328  00000000  00000000  00108ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e6c  00000000  00000000  0010a210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bb7c 	.word	0x0800bb7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800bb7c 	.word	0x0800bb7c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c70:	f000 b96e 	b.w	8000f50 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	4604      	mov	r4, r0
 8000c94:	468c      	mov	ip, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f040 8083 	bne.w	8000da2 <__udivmoddi4+0x116>
 8000c9c:	428a      	cmp	r2, r1
 8000c9e:	4617      	mov	r7, r2
 8000ca0:	d947      	bls.n	8000d32 <__udivmoddi4+0xa6>
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	b142      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca8:	f1c2 0020 	rsb	r0, r2, #32
 8000cac:	fa24 f000 	lsr.w	r0, r4, r0
 8000cb0:	4091      	lsls	r1, r2
 8000cb2:	4097      	lsls	r7, r2
 8000cb4:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb8:	4094      	lsls	r4, r2
 8000cba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc4:	fa1f fe87 	uxth.w	lr, r7
 8000cc8:	fb08 c116 	mls	r1, r8, r6, ip
 8000ccc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd0:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	d909      	bls.n	8000cec <__udivmoddi4+0x60>
 8000cd8:	18fb      	adds	r3, r7, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cde:	f080 8119 	bcs.w	8000f14 <__udivmoddi4+0x288>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 8116 	bls.w	8000f14 <__udivmoddi4+0x288>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	443b      	add	r3, r7
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x8c>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0a:	f080 8105 	bcs.w	8000f18 <__udivmoddi4+0x28c>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f240 8102 	bls.w	8000f18 <__udivmoddi4+0x28c>
 8000d14:	3802      	subs	r0, #2
 8000d16:	443c      	add	r4, r7
 8000d18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1c:	eba4 040e 	sub.w	r4, r4, lr
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa0>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	b902      	cbnz	r2, 8000d36 <__udivmoddi4+0xaa>
 8000d34:	deff      	udf	#255	; 0xff
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	2a00      	cmp	r2, #0
 8000d3c:	d150      	bne.n	8000de0 <__udivmoddi4+0x154>
 8000d3e:	1bcb      	subs	r3, r1, r7
 8000d40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d44:	fa1f f887 	uxth.w	r8, r7
 8000d48:	2601      	movs	r6, #1
 8000d4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4e:	0c21      	lsrs	r1, r4, #16
 8000d50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d58:	fb08 f30c 	mul.w	r3, r8, ip
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	d907      	bls.n	8000d70 <__udivmoddi4+0xe4>
 8000d60:	1879      	adds	r1, r7, r1
 8000d62:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0xe2>
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	f200 80e9 	bhi.w	8000f40 <__udivmoddi4+0x2b4>
 8000d6e:	4684      	mov	ip, r0
 8000d70:	1ac9      	subs	r1, r1, r3
 8000d72:	b2a3      	uxth	r3, r4
 8000d74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d80:	fb08 f800 	mul.w	r8, r8, r0
 8000d84:	45a0      	cmp	r8, r4
 8000d86:	d907      	bls.n	8000d98 <__udivmoddi4+0x10c>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x10a>
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	f200 80d9 	bhi.w	8000f48 <__udivmoddi4+0x2bc>
 8000d96:	4618      	mov	r0, r3
 8000d98:	eba4 0408 	sub.w	r4, r4, r8
 8000d9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000da0:	e7bf      	b.n	8000d22 <__udivmoddi4+0x96>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0x12e>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80b1 	beq.w	8000f0e <__udivmoddi4+0x282>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x1cc>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0x140>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80b8 	bhi.w	8000f3c <__udivmoddi4+0x2b0>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0103 	sbc.w	r1, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	468c      	mov	ip, r1
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0a8      	beq.n	8000d2c <__udivmoddi4+0xa0>
 8000dda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dde:	e7a5      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f603 	lsr.w	r6, r0, r3
 8000de8:	4097      	lsls	r7, r2
 8000dea:	fa01 f002 	lsl.w	r0, r1, r2
 8000dee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df2:	40d9      	lsrs	r1, r3
 8000df4:	4330      	orrs	r0, r6
 8000df6:	0c03      	lsrs	r3, r0, #16
 8000df8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e08:	fb06 f108 	mul.w	r1, r6, r8
 8000e0c:	4299      	cmp	r1, r3
 8000e0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x19c>
 8000e14:	18fb      	adds	r3, r7, r3
 8000e16:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e1a:	f080 808d 	bcs.w	8000f38 <__udivmoddi4+0x2ac>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 808a 	bls.w	8000f38 <__udivmoddi4+0x2ac>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	443b      	add	r3, r7
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b281      	uxth	r1, r0
 8000e2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e38:	fb00 f308 	mul.w	r3, r0, r8
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x1c4>
 8000e40:	1879      	adds	r1, r7, r1
 8000e42:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e46:	d273      	bcs.n	8000f30 <__udivmoddi4+0x2a4>
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d971      	bls.n	8000f30 <__udivmoddi4+0x2a4>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4439      	add	r1, r7
 8000e50:	1acb      	subs	r3, r1, r3
 8000e52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e56:	e778      	b.n	8000d4a <__udivmoddi4+0xbe>
 8000e58:	f1c6 0c20 	rsb	ip, r6, #32
 8000e5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e64:	431c      	orrs	r4, r3
 8000e66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e76:	431f      	orrs	r7, r3
 8000e78:	0c3b      	lsrs	r3, r7, #16
 8000e7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7e:	fa1f f884 	uxth.w	r8, r4
 8000e82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	fa02 f206 	lsl.w	r2, r2, r6
 8000e94:	fa00 f306 	lsl.w	r3, r0, r6
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x220>
 8000e9a:	1861      	adds	r1, r4, r1
 8000e9c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ea0:	d248      	bcs.n	8000f34 <__udivmoddi4+0x2a8>
 8000ea2:	458a      	cmp	sl, r1
 8000ea4:	d946      	bls.n	8000f34 <__udivmoddi4+0x2a8>
 8000ea6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eaa:	4421      	add	r1, r4
 8000eac:	eba1 010a 	sub.w	r1, r1, sl
 8000eb0:	b2bf      	uxth	r7, r7
 8000eb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ebe:	fb00 f808 	mul.w	r8, r0, r8
 8000ec2:	45b8      	cmp	r8, r7
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x24a>
 8000ec6:	19e7      	adds	r7, r4, r7
 8000ec8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ecc:	d22e      	bcs.n	8000f2c <__udivmoddi4+0x2a0>
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d92c      	bls.n	8000f2c <__udivmoddi4+0x2a0>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4427      	add	r7, r4
 8000ed6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eda:	eba7 0708 	sub.w	r7, r7, r8
 8000ede:	fba0 8902 	umull	r8, r9, r0, r2
 8000ee2:	454f      	cmp	r7, r9
 8000ee4:	46c6      	mov	lr, r8
 8000ee6:	4649      	mov	r1, r9
 8000ee8:	d31a      	bcc.n	8000f20 <__udivmoddi4+0x294>
 8000eea:	d017      	beq.n	8000f1c <__udivmoddi4+0x290>
 8000eec:	b15d      	cbz	r5, 8000f06 <__udivmoddi4+0x27a>
 8000eee:	ebb3 020e 	subs.w	r2, r3, lr
 8000ef2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000efa:	40f2      	lsrs	r2, r6
 8000efc:	ea4c 0202 	orr.w	r2, ip, r2
 8000f00:	40f7      	lsrs	r7, r6
 8000f02:	e9c5 2700 	strd	r2, r7, [r5]
 8000f06:	2600      	movs	r6, #0
 8000f08:	4631      	mov	r1, r6
 8000f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0e:	462e      	mov	r6, r5
 8000f10:	4628      	mov	r0, r5
 8000f12:	e70b      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000f14:	4606      	mov	r6, r0
 8000f16:	e6e9      	b.n	8000cec <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fd      	b.n	8000d18 <__udivmoddi4+0x8c>
 8000f1c:	4543      	cmp	r3, r8
 8000f1e:	d2e5      	bcs.n	8000eec <__udivmoddi4+0x260>
 8000f20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f24:	eb69 0104 	sbc.w	r1, r9, r4
 8000f28:	3801      	subs	r0, #1
 8000f2a:	e7df      	b.n	8000eec <__udivmoddi4+0x260>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	e7d2      	b.n	8000ed6 <__udivmoddi4+0x24a>
 8000f30:	4660      	mov	r0, ip
 8000f32:	e78d      	b.n	8000e50 <__udivmoddi4+0x1c4>
 8000f34:	4681      	mov	r9, r0
 8000f36:	e7b9      	b.n	8000eac <__udivmoddi4+0x220>
 8000f38:	4666      	mov	r6, ip
 8000f3a:	e775      	b.n	8000e28 <__udivmoddi4+0x19c>
 8000f3c:	4630      	mov	r0, r6
 8000f3e:	e74a      	b.n	8000dd6 <__udivmoddi4+0x14a>
 8000f40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f44:	4439      	add	r1, r7
 8000f46:	e713      	b.n	8000d70 <__udivmoddi4+0xe4>
 8000f48:	3802      	subs	r0, #2
 8000f4a:	443c      	add	r4, r7
 8000f4c:	e724      	b.n	8000d98 <__udivmoddi4+0x10c>
 8000f4e:	bf00      	nop

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <drawCircle>:

}

// From Adafruit GFX Library
// https://github.com/adafruit/Adafruit-GFX-Library/blob/0b6068e833b050fa83ed90558c54f3389d26bc5b/Adafruit_GFX.cpp#L357
void drawCircle(int x0, int y0, int r){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]

  int16_t f = 1 - r;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	f1c3 0301 	rsb	r3, r3, #1
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	83fb      	strh	r3, [r7, #30]
  int16_t ddF_x = 1;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	83bb      	strh	r3, [r7, #28]
  int16_t ddF_y = -2 * r;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	461a      	mov	r2, r3
 8000f76:	03d2      	lsls	r2, r2, #15
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	837b      	strh	r3, [r7, #26]
  int16_t x = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	833b      	strh	r3, [r7, #24]
  int16_t y = r;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	82fb      	strh	r3, [r7, #22]


  ssd1306_DrawPixel(x0, y0 + r, White);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	b2d8      	uxtb	r0, r3
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	4413      	add	r3, r2
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f000 fe9e 	bl	8001cdc <ssd1306_DrawPixel>
  ssd1306_DrawPixel(x0, y0 - r, White);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	b2d8      	uxtb	r0, r3
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f000 fe92 	bl	8001cdc <ssd1306_DrawPixel>
  ssd1306_DrawPixel(x0 + r, y0, White);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	b2d1      	uxtb	r1, r2
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 fe86 	bl	8001cdc <ssd1306_DrawPixel>
  ssd1306_DrawPixel(x0 - r, y0, White);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	68ba      	ldr	r2, [r7, #8]
 8000fde:	b2d1      	uxtb	r1, r2
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 fe7a 	bl	8001cdc <ssd1306_DrawPixel>

  while (x < y) {
 8000fe8:	e0a1      	b.n	800112e <drawCircle+0x1da>
    if (f >= 0) {
 8000fea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	db0e      	blt.n	8001010 <drawCircle+0xbc>
      y--;
 8000ff2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	82fb      	strh	r3, [r7, #22]
      ddF_y += 2;
 8000ffe:	8b7b      	ldrh	r3, [r7, #26]
 8001000:	3302      	adds	r3, #2
 8001002:	b29b      	uxth	r3, r3
 8001004:	837b      	strh	r3, [r7, #26]
      f += ddF_y;
 8001006:	8bfa      	ldrh	r2, [r7, #30]
 8001008:	8b7b      	ldrh	r3, [r7, #26]
 800100a:	4413      	add	r3, r2
 800100c:	b29b      	uxth	r3, r3
 800100e:	83fb      	strh	r3, [r7, #30]
    }
    x++;
 8001010:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001014:	b29b      	uxth	r3, r3
 8001016:	3301      	adds	r3, #1
 8001018:	b29b      	uxth	r3, r3
 800101a:	833b      	strh	r3, [r7, #24]
    ddF_x += 2;
 800101c:	8bbb      	ldrh	r3, [r7, #28]
 800101e:	3302      	adds	r3, #2
 8001020:	b29b      	uxth	r3, r3
 8001022:	83bb      	strh	r3, [r7, #28]
    f += ddF_x;
 8001024:	8bfa      	ldrh	r2, [r7, #30]
 8001026:	8bbb      	ldrh	r3, [r7, #28]
 8001028:	4413      	add	r3, r2
 800102a:	b29b      	uxth	r3, r3
 800102c:	83fb      	strh	r3, [r7, #30]

    ssd1306_DrawPixel(x0 + x, y0 + y, White);
 800102e:	8b3b      	ldrh	r3, [r7, #24]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	4413      	add	r3, r2
 8001038:	b2d8      	uxtb	r0, r3
 800103a:	8afb      	ldrh	r3, [r7, #22]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	4413      	add	r3, r2
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2201      	movs	r2, #1
 8001048:	4619      	mov	r1, r3
 800104a:	f000 fe47 	bl	8001cdc <ssd1306_DrawPixel>
    ssd1306_DrawPixel(x0 - x, y0 + y, White);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	b2da      	uxtb	r2, r3
 8001052:	8b3b      	ldrh	r3, [r7, #24]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	b2d8      	uxtb	r0, r3
 800105a:	8afb      	ldrh	r3, [r7, #22]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	4413      	add	r3, r2
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2201      	movs	r2, #1
 8001068:	4619      	mov	r1, r3
 800106a:	f000 fe37 	bl	8001cdc <ssd1306_DrawPixel>
    ssd1306_DrawPixel(x0 + x, y0 - y, White);
 800106e:	8b3b      	ldrh	r3, [r7, #24]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	4413      	add	r3, r2
 8001078:	b2d8      	uxtb	r0, r3
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	8afb      	ldrh	r3, [r7, #22]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2201      	movs	r2, #1
 8001088:	4619      	mov	r1, r3
 800108a:	f000 fe27 	bl	8001cdc <ssd1306_DrawPixel>
    ssd1306_DrawPixel(x0 - x, y0 - y, White);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	b2da      	uxtb	r2, r3
 8001092:	8b3b      	ldrh	r3, [r7, #24]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	b2d8      	uxtb	r0, r3
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	8afb      	ldrh	r3, [r7, #22]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2201      	movs	r2, #1
 80010a8:	4619      	mov	r1, r3
 80010aa:	f000 fe17 	bl	8001cdc <ssd1306_DrawPixel>
    ssd1306_DrawPixel(x0 + y, y0 + x, White);
 80010ae:	8afb      	ldrh	r3, [r7, #22]
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4413      	add	r3, r2
 80010b8:	b2d8      	uxtb	r0, r3
 80010ba:	8b3b      	ldrh	r3, [r7, #24]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	4413      	add	r3, r2
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2201      	movs	r2, #1
 80010c8:	4619      	mov	r1, r3
 80010ca:	f000 fe07 	bl	8001cdc <ssd1306_DrawPixel>
    ssd1306_DrawPixel(x0 - y, y0 + x, White);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	8afb      	ldrh	r3, [r7, #22]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	b2d8      	uxtb	r0, r3
 80010da:	8b3b      	ldrh	r3, [r7, #24]
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	4413      	add	r3, r2
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2201      	movs	r2, #1
 80010e8:	4619      	mov	r1, r3
 80010ea:	f000 fdf7 	bl	8001cdc <ssd1306_DrawPixel>
    ssd1306_DrawPixel(x0 + y, y0 - x, White);
 80010ee:	8afb      	ldrh	r3, [r7, #22]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	4413      	add	r3, r2
 80010f8:	b2d8      	uxtb	r0, r3
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	8b3b      	ldrh	r3, [r7, #24]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2201      	movs	r2, #1
 8001108:	4619      	mov	r1, r3
 800110a:	f000 fde7 	bl	8001cdc <ssd1306_DrawPixel>
    ssd1306_DrawPixel(x0 - y, y0 - x, White);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	8afb      	ldrh	r3, [r7, #22]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	b2d8      	uxtb	r0, r3
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	8b3b      	ldrh	r3, [r7, #24]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2201      	movs	r2, #1
 8001128:	4619      	mov	r1, r3
 800112a:	f000 fdd7 	bl	8001cdc <ssd1306_DrawPixel>
  while (x < y) {
 800112e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001132:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001136:	429a      	cmp	r2, r3
 8001138:	f6ff af57 	blt.w	8000fea <drawCircle+0x96>
  }

}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3720      	adds	r7, #32
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <updateDisplay>:

void updateDisplay(struct System *system) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b094      	sub	sp, #80	; 0x50
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

	// ssd1306_Fill(Black);
	ssd1306_UpdateScreen(&hi2c1);
 8001150:	4845      	ldr	r0, [pc, #276]	; (8001268 <updateDisplay+0x120>)
 8001152:	f000 fd91 	bl	8001c78 <ssd1306_UpdateScreen>

	char cpu_text[20] = { 0 };
 8001156:	2300      	movs	r3, #0
 8001158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800115a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
	char ram_text[20] = { 0 };
 8001168:	2300      	movs	r3, #0
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
 800116c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
	char gpu_text[20] = { 0 };
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	f107 0318 	add.w	r3, r7, #24
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]

	//sprintf(cpu_text, "CPU %d%% %d C", system->cpu_util, system->cpu_temp);
	sprintf(cpu_text, "CPU %d ", system->cpu_frequency);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001194:	4935      	ldr	r1, [pc, #212]	; (800126c <updateDisplay+0x124>)
 8001196:	4618      	mov	r0, r3
 8001198:	f009 f860 	bl	800a25c <siprintf>
	sprintf(ram_text, "RAM: %d%%", system->ram_util);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80011a2:	461a      	mov	r2, r3
 80011a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a8:	4931      	ldr	r1, [pc, #196]	; (8001270 <updateDisplay+0x128>)
 80011aa:	4618      	mov	r0, r3
 80011ac:	f009 f856 	bl	800a25c <siprintf>
	sprintf(gpu_text, "GPU %d%% %d C", system->gpu_util, system->gpu_temp);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 80011b6:	461a      	mov	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 80011be:	f107 0014 	add.w	r0, r7, #20
 80011c2:	492c      	ldr	r1, [pc, #176]	; (8001274 <updateDisplay+0x12c>)
 80011c4:	f009 f84a 	bl	800a25c <siprintf>

	// Write data to local screenbuffer
	ssd1306_SetCursor(0, 0);
 80011c8:	2100      	movs	r1, #0
 80011ca:	2000      	movs	r0, #0
 80011cc:	f000 fe8c 	bl	8001ee8 <ssd1306_SetCursor>
	ssd1306_WriteString(ram_text, Font_7x10, White);
 80011d0:	4a29      	ldr	r2, [pc, #164]	; (8001278 <updateDisplay+0x130>)
 80011d2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80011d6:	2301      	movs	r3, #1
 80011d8:	ca06      	ldmia	r2, {r1, r2}
 80011da:	f000 fe5f 	bl	8001e9c <ssd1306_WriteString>

	ssd1306_SetCursor(0, 15);
 80011de:	210f      	movs	r1, #15
 80011e0:	2000      	movs	r0, #0
 80011e2:	f000 fe81 	bl	8001ee8 <ssd1306_SetCursor>
	ssd1306_WriteString(cpu_text, Font_11x18, White);
 80011e6:	4a25      	ldr	r2, [pc, #148]	; (800127c <updateDisplay+0x134>)
 80011e8:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80011ec:	2301      	movs	r3, #1
 80011ee:	ca06      	ldmia	r2, {r1, r2}
 80011f0:	f000 fe54 	bl	8001e9c <ssd1306_WriteString>
	ssd1306_SetCursor(90, 16);
 80011f4:	2110      	movs	r1, #16
 80011f6:	205a      	movs	r0, #90	; 0x5a
 80011f8:	f000 fe76 	bl	8001ee8 <ssd1306_SetCursor>
	char mhz_text[] = {'M', 'H','z','\0'};
 80011fc:	4b20      	ldr	r3, [pc, #128]	; (8001280 <updateDisplay+0x138>)
 80011fe:	613b      	str	r3, [r7, #16]
	ssd1306_WriteString(mhz_text, Font_7x10, White);
 8001200:	4a1d      	ldr	r2, [pc, #116]	; (8001278 <updateDisplay+0x130>)
 8001202:	f107 0010 	add.w	r0, r7, #16
 8001206:	2301      	movs	r3, #1
 8001208:	ca06      	ldmia	r2, {r1, r2}
 800120a:	f000 fe47 	bl	8001e9c <ssd1306_WriteString>

	char cpu_temp_text[4] = {0};
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
	sprintf(cpu_temp_text, "%d", system->cpu_temp);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	799b      	ldrb	r3, [r3, #6]
 8001216:	461a      	mov	r2, r3
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	4919      	ldr	r1, [pc, #100]	; (8001284 <updateDisplay+0x13c>)
 800121e:	4618      	mov	r0, r3
 8001220:	f009 f81c 	bl	800a25c <siprintf>
	ssd1306_SetCursor(95, 0);
 8001224:	2100      	movs	r1, #0
 8001226:	205f      	movs	r0, #95	; 0x5f
 8001228:	f000 fe5e 	bl	8001ee8 <ssd1306_SetCursor>
	ssd1306_WriteString(cpu_temp_text, Font_7x10, White);
 800122c:	4a12      	ldr	r2, [pc, #72]	; (8001278 <updateDisplay+0x130>)
 800122e:	f107 000c 	add.w	r0, r7, #12
 8001232:	2301      	movs	r3, #1
 8001234:	ca06      	ldmia	r2, {r1, r2}
 8001236:	f000 fe31 	bl	8001e9c <ssd1306_WriteString>
	drawCircle(115, 2, 2);
 800123a:	2202      	movs	r2, #2
 800123c:	2102      	movs	r1, #2
 800123e:	2073      	movs	r0, #115	; 0x73
 8001240:	f7ff fe88 	bl	8000f54 <drawCircle>





	ssd1306_SetCursor(0, 40);
 8001244:	2128      	movs	r1, #40	; 0x28
 8001246:	2000      	movs	r0, #0
 8001248:	f000 fe4e 	bl	8001ee8 <ssd1306_SetCursor>
	ssd1306_WriteString(gpu_text, Font_11x18, White);
 800124c:	4a0b      	ldr	r2, [pc, #44]	; (800127c <updateDisplay+0x134>)
 800124e:	f107 0014 	add.w	r0, r7, #20
 8001252:	2301      	movs	r3, #1
 8001254:	ca06      	ldmia	r2, {r1, r2}
 8001256:	f000 fe21 	bl	8001e9c <ssd1306_WriteString>

// Copy all data from local screenbuffer to the screen
	ssd1306_UpdateScreen(&hi2c1);
 800125a:	4803      	ldr	r0, [pc, #12]	; (8001268 <updateDisplay+0x120>)
 800125c:	f000 fd0c 	bl	8001c78 <ssd1306_UpdateScreen>

}
 8001260:	bf00      	nop
 8001262:	3750      	adds	r7, #80	; 0x50
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000b6c 	.word	0x20000b6c
 800126c:	0800bb98 	.word	0x0800bb98
 8001270:	0800bba0 	.word	0x0800bba0
 8001274:	0800bbac 	.word	0x0800bbac
 8001278:	20000000 	.word	0x20000000
 800127c:	20000008 	.word	0x20000008
 8001280:	007a484d 	.word	0x007a484d
 8001284:	0800bbbc 	.word	0x0800bbbc

08001288 <Set_LED>:

void Set_LED(int LEDnum, int Red, int Green, int Blue) {
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
 8001294:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	b2d9      	uxtb	r1, r3
 800129a:	4a11      	ldr	r2, [pc, #68]	; (80012e0 <Set_LED+0x58>)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	b2d9      	uxtb	r1, r3
 80012a6:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <Set_LED+0x58>)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	460a      	mov	r2, r1
 80012b0:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	b2d9      	uxtb	r1, r3
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <Set_LED+0x58>)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	460a      	mov	r2, r1
 80012c0:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	b2d9      	uxtb	r1, r3
 80012c6:	4a06      	ldr	r2, [pc, #24]	; (80012e0 <Set_LED+0x58>)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	460a      	mov	r2, r1
 80012d0:	70da      	strb	r2, [r3, #3]
}
 80012d2:	bf00      	nop
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000b3c 	.word	0x20000b3c
 80012e4:	00000000 	.word	0x00000000

080012e8 <Set_Brightness>:

void Set_Brightness(int brightness)  // 0-45
{
 80012e8:	b5b0      	push	{r4, r5, r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b2d      	cmp	r3, #45	; 0x2d
 80012f4:	dd01      	ble.n	80012fa <Set_Brightness+0x12>
		brightness = 45;
 80012f6:	232d      	movs	r3, #45	; 0x2d
 80012f8:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < MAX_LED; i++) {
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	e060      	b.n	80013c2 <Set_Brightness+0xda>
		LED_Mod[i][0] = LED_Data[i][0];
 8001300:	4a37      	ldr	r2, [pc, #220]	; (80013e0 <Set_Brightness+0xf8>)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8001308:	4a36      	ldr	r2, [pc, #216]	; (80013e4 <Set_Brightness+0xfc>)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; j++) {
 8001310:	2301      	movs	r3, #1
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	e04f      	b.n	80013b6 <Set_Brightness+0xce>
			float angle = 90 - brightness;  // in degrees
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800131c:	ee07 3a90 	vmov	s15, r3
 8001320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001324:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle * PI / 180;  // in rad
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f7ff f90d 	bl	8000548 <__aeabi_f2d>
 800132e:	a32a      	add	r3, pc, #168	; (adr r3, 80013d8 <Set_Brightness+0xf0>)
 8001330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001334:	f7ff f960 	bl	80005f8 <__aeabi_dmul>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4610      	mov	r0, r2
 800133e:	4619      	mov	r1, r3
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <Set_Brightness+0x100>)
 8001346:	f7ff fa81 	bl	800084c <__aeabi_ddiv>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4610      	mov	r0, r2
 8001350:	4619      	mov	r1, r3
 8001352:	f7ff fc33 	bl	8000bbc <__aeabi_d2f>
 8001356:	4603      	mov	r3, r0
 8001358:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j]) / (tan(angle));
 800135a:	4a21      	ldr	r2, [pc, #132]	; (80013e0 <Set_Brightness+0xf8>)
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	441a      	add	r2, r3
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4413      	add	r3, r2
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f8db 	bl	8000524 <__aeabi_i2d>
 800136e:	4604      	mov	r4, r0
 8001370:	460d      	mov	r5, r1
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f7ff f8e8 	bl	8000548 <__aeabi_f2d>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	ec43 2b10 	vmov	d0, r2, r3
 8001380:	f009 fb9a 	bl	800aab8 <tan>
 8001384:	ec53 2b10 	vmov	r2, r3, d0
 8001388:	4620      	mov	r0, r4
 800138a:	4629      	mov	r1, r5
 800138c:	f7ff fa5e 	bl	800084c <__aeabi_ddiv>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff fbf0 	bl	8000b7c <__aeabi_d2uiz>
 800139c:	4603      	mov	r3, r0
 800139e:	b2d9      	uxtb	r1, r3
 80013a0:	4a10      	ldr	r2, [pc, #64]	; (80013e4 <Set_Brightness+0xfc>)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	441a      	add	r2, r3
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4413      	add	r3, r2
 80013ac:	460a      	mov	r2, r1
 80013ae:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; j++) {
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	3301      	adds	r3, #1
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	ddac      	ble.n	8001316 <Set_Brightness+0x2e>
	for (int i = 0; i < MAX_LED; i++) {
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	3301      	adds	r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	2b0b      	cmp	r3, #11
 80013c6:	dd9b      	ble.n	8001300 <Set_Brightness+0x18>
		}
	}

#endif

}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bdb0      	pop	{r4, r5, r7, pc}
 80013d2:	bf00      	nop
 80013d4:	f3af 8000 	nop.w
 80013d8:	53c8d4f1 	.word	0x53c8d4f1
 80013dc:	400921fb 	.word	0x400921fb
 80013e0:	20000b3c 	.word	0x20000b3c
 80013e4:	20000bc0 	.word	0x20000bc0
 80013e8:	40668000 	.word	0x40668000

080013ec <WS2812_Send>:

//https://controllerstech.com/interface-ws2812-with-stm32/
void WS2812_Send(void) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
	uint32_t indx = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; i++) {
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	e036      	b.n	800146a <WS2812_Send+0x7e>
#if USE_BRIGHTNESS
		color =
				((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 80013fc:	4a2e      	ldr	r2, [pc, #184]	; (80014b8 <WS2812_Send+0xcc>)
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	785b      	ldrb	r3, [r3, #1]
 8001406:	041a      	lsls	r2, r3, #16
 8001408:	492b      	ldr	r1, [pc, #172]	; (80014b8 <WS2812_Send+0xcc>)
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	440b      	add	r3, r1
 8001410:	789b      	ldrb	r3, [r3, #2]
 8001412:	021b      	lsls	r3, r3, #8
 8001414:	431a      	orrs	r2, r3
 8001416:	4928      	ldr	r1, [pc, #160]	; (80014b8 <WS2812_Send+0xcc>)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	440b      	add	r3, r1
 800141e:	78db      	ldrb	r3, [r3, #3]
 8001420:	4313      	orrs	r3, r2
		color =
 8001422:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i = 23; i >= 0; i--) {
 8001424:	2317      	movs	r3, #23
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	e019      	b.n	800145e <WS2812_Send+0x72>
			if (color & (1 << i)) {
 800142a:	2201      	movs	r2, #1
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	461a      	mov	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4013      	ands	r3, r2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <WS2812_Send+0x5c>
				pwmData[indx] = 80;  // 2/3 of 120
 800143c:	4a1f      	ldr	r2, [pc, #124]	; (80014bc <WS2812_Send+0xd0>)
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	2150      	movs	r1, #80	; 0x50
 8001442:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001446:	e004      	b.n	8001452 <WS2812_Send+0x66>
			}

			else
				pwmData[indx] = 40;  // 1/3 of 120
 8001448:	4a1c      	ldr	r2, [pc, #112]	; (80014bc <WS2812_Send+0xd0>)
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	2128      	movs	r1, #40	; 0x28
 800144e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	3301      	adds	r3, #1
 8001456:	617b      	str	r3, [r7, #20]
		for (int i = 23; i >= 0; i--) {
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	3b01      	subs	r3, #1
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2b00      	cmp	r3, #0
 8001462:	dae2      	bge.n	800142a <WS2812_Send+0x3e>
	for (int i = 0; i < MAX_LED; i++) {
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	3301      	adds	r3, #1
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	2b0b      	cmp	r3, #11
 800146e:	ddc5      	ble.n	80013fc <WS2812_Send+0x10>
		}

	}

	for (int i = 0; i < 50; i++) {
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	e00a      	b.n	800148c <WS2812_Send+0xa0>
		pwmData[indx] = 0;
 8001476:	4a11      	ldr	r2, [pc, #68]	; (80014bc <WS2812_Send+0xd0>)
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	2100      	movs	r1, #0
 800147c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	3301      	adds	r3, #1
 8001484:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; i++) {
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	3301      	adds	r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	2b31      	cmp	r3, #49	; 0x31
 8001490:	ddf1      	ble.n	8001476 <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*) pwmData, indx);
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	b29b      	uxth	r3, r3
 8001496:	4a09      	ldr	r2, [pc, #36]	; (80014bc <WS2812_Send+0xd0>)
 8001498:	2100      	movs	r1, #0
 800149a:	4809      	ldr	r0, [pc, #36]	; (80014c0 <WS2812_Send+0xd4>)
 800149c:	f004 f862 	bl	8005564 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag) {
 80014a0:	bf00      	nop
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <WS2812_Send+0xd8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0fb      	beq.n	80014a2 <WS2812_Send+0xb6>
	};
	datasentflag = 0;
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <WS2812_Send+0xd8>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
}
 80014b0:	bf00      	nop
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000bc0 	.word	0x20000bc0
 80014bc:	20000bf0 	.word	0x20000bf0
 80014c0:	20000e94 	.word	0x20000e94
 80014c4:	20000214 	.word	0x20000214

080014c8 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80014d0:	2100      	movs	r1, #0
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80014d4:	f004 f9f6 	bl	80058c4 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80014da:	2201      	movs	r2, #1
 80014dc:	601a      	str	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000e94 	.word	0x20000e94
 80014ec:	20000214 	.word	0x20000214

080014f0 <updateWheel>:

void updateWheel(uint8_t num_leds) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]

	for (uint8_t i = 0; i < MAX_LED; i++) {
 80014fa:	2300      	movs	r3, #0
 80014fc:	73fb      	strb	r3, [r7, #15]
 80014fe:	e018      	b.n	8001532 <updateWheel+0x42>
		Set_Brightness(25);
 8001500:	2019      	movs	r0, #25
 8001502:	f7ff fef1 	bl	80012e8 <Set_Brightness>
		if (i < num_leds) {
 8001506:	7bfa      	ldrb	r2, [r7, #15]
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	429a      	cmp	r2, r3
 800150c:	d206      	bcs.n	800151c <updateWheel+0x2c>
			Set_LED(i, 0, 0, 255);
 800150e:	7bf8      	ldrb	r0, [r7, #15]
 8001510:	23ff      	movs	r3, #255	; 0xff
 8001512:	2200      	movs	r2, #0
 8001514:	2100      	movs	r1, #0
 8001516:	f7ff feb7 	bl	8001288 <Set_LED>
 800151a:	e005      	b.n	8001528 <updateWheel+0x38>
		} else {
			Set_LED(i, 0, 0, 0);
 800151c:	7bf8      	ldrb	r0, [r7, #15]
 800151e:	2300      	movs	r3, #0
 8001520:	2200      	movs	r2, #0
 8001522:	2100      	movs	r1, #0
 8001524:	f7ff feb0 	bl	8001288 <Set_LED>
		}
		WS2812_Send();
 8001528:	f7ff ff60 	bl	80013ec <WS2812_Send>
	for (uint8_t i = 0; i < MAX_LED; i++) {
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	3301      	adds	r3, #1
 8001530:	73fb      	strb	r3, [r7, #15]
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	2b0b      	cmp	r3, #11
 8001536:	d9e3      	bls.n	8001500 <updateWheel+0x10>
	}

}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b0f0      	sub	sp, #448	; 0x1c0
 8001548:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char msg[11] = "No Data";
 800154a:	4a4a      	ldr	r2, [pc, #296]	; (8001674 <main+0x130>)
 800154c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001550:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001554:	e883 0003 	stmia.w	r3, {r0, r1}
 8001558:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800155c:	2100      	movs	r1, #0
 800155e:	460a      	mov	r2, r1
 8001560:	801a      	strh	r2, [r3, #0]
 8001562:	460a      	mov	r2, r1
 8001564:	709a      	strb	r2, [r3, #2]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001566:	f000 fe85 	bl	8002274 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800156a:	f000 f889 	bl	8001680 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800156e:	f000 f9df 	bl	8001930 <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 8001572:	f008 f841 	bl	80095f8 <MX_USB_DEVICE_Init>
	MX_I2C1_Init();
 8001576:	f000 f8ed 	bl	8001754 <MX_I2C1_Init>
	MX_DMA_Init();
 800157a:	f000 f9b9 	bl	80018f0 <MX_DMA_Init>
	MX_TIM1_Init();
 800157e:	f000 f917 	bl	80017b0 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */

	// Init lcd using one of the stm32HAL i2c typedefs
	if (ssd1306_Init(&hi2c1) != 0) {
 8001582:	483d      	ldr	r0, [pc, #244]	; (8001678 <main+0x134>)
 8001584:	f000 fa34 	bl	80019f0 <ssd1306_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <main+0x4e>
		Error_Handler();
 800158e:	f000 fa13 	bl	80019b8 <Error_Handler>
//	writeToDisplay(msg);
	struct System system;

	DataHeaders headers;

	uint8_t data_frame_buffer[255] = { 0 };
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	3304      	adds	r3, #4
 800159a:	22fb      	movs	r2, #251	; 0xfb
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f008 fe54 	bl	800a24c <memset>

	system.cpu_frequency = 4700;
 80015a4:	f241 235c 	movw	r3, #4700	; 0x125c
 80015a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (!isBufferEmpty()) {
 80015ac:	f008 f9f6 	bl	800999c <isBufferEmpty>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1fa      	bne.n	80015ac <main+0x68>
			get_data_frame(data_frame_buffer);
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	4618      	mov	r0, r3
 80015ba:	f008 f997 	bl	80098ec <get_data_frame>
			DataHeaders data_head = (DataHeaders) data_frame_buffer[0];
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	f887 31bb 	strb.w	r3, [r7, #443]	; 0x1bb

			switch (data_head) {
 80015c6:	f897 31bb 	ldrb.w	r3, [r7, #443]	; 0x1bb
 80015ca:	3b02      	subs	r3, #2
 80015cc:	2b0b      	cmp	r3, #11
 80015ce:	d84a      	bhi.n	8001666 <main+0x122>
 80015d0:	a201      	add	r2, pc, #4	; (adr r2, 80015d8 <main+0x94>)
 80015d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d6:	bf00      	nop
 80015d8:	08001609 	.word	0x08001609
 80015dc:	08001667 	.word	0x08001667
 80015e0:	0800163f 	.word	0x0800163f
 80015e4:	08001667 	.word	0x08001667
 80015e8:	08001649 	.word	0x08001649
 80015ec:	08001667 	.word	0x08001667
 80015f0:	08001667 	.word	0x08001667
 80015f4:	08001667 	.word	0x08001667
 80015f8:	08001667 	.word	0x08001667
 80015fc:	08001667 	.word	0x08001667
 8001600:	08001653 	.word	0x08001653
 8001604:	0800165d 	.word	0x0800165d
			case CPU_UTIL: {
				system.cpu_util = data_frame_buffer[1];
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	785b      	ldrb	r3, [r3, #1]
 800160c:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
				int leds = system.cpu_util / (9);
 8001610:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8001614:	4a19      	ldr	r2, [pc, #100]	; (800167c <main+0x138>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	085b      	lsrs	r3, r3, #1
 800161c:	b2db      	uxtb	r3, r3
 800161e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
				if (leds < 1) {
 8001622:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001626:	2b00      	cmp	r3, #0
 8001628:	dc02      	bgt.n	8001630 <main+0xec>
					leds = 1;
 800162a:	2301      	movs	r3, #1
 800162c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
				}
				updateWheel(leds);
 8001630:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001634:	b2db      	uxtb	r3, r3
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff ff5a 	bl	80014f0 <updateWheel>
				break;
 800163c:	e014      	b.n	8001668 <main+0x124>
			}
			case CPU_TEMP: {
				system.cpu_temp = data_frame_buffer[1];
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	785b      	ldrb	r3, [r3, #1]
 8001642:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
				break;
 8001646:	e00f      	b.n	8001668 <main+0x124>
			}
			case RAM: {
				system.ram_util = data_frame_buffer[1];
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	785b      	ldrb	r3, [r3, #1]
 800164c:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
				break;
 8001650:	e00a      	b.n	8001668 <main+0x124>
			}
			case GPU_UTIL: {
				system.gpu_util = data_frame_buffer[1];
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	785b      	ldrb	r3, [r3, #1]
 8001656:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				break;
 800165a:	e005      	b.n	8001668 <main+0x124>
			}
			case GPU_TEMP: {
				system.gpu_temp = data_frame_buffer[1];
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	785b      	ldrb	r3, [r3, #1]
 8001660:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
				break;
 8001664:	e000      	b.n	8001668 <main+0x124>
			}
			default: {
				break;
 8001666:	bf00      	nop
			}
			}

			updateDisplay(&system);
 8001668:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fd6b 	bl	8001148 <updateDisplay>
		if (!isBufferEmpty()) {
 8001672:	e79b      	b.n	80015ac <main+0x68>
 8001674:	0800bbc0 	.word	0x0800bbc0
 8001678:	20000b6c 	.word	0x20000b6c
 800167c:	38e38e39 	.word	0x38e38e39

08001680 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b094      	sub	sp, #80	; 0x50
 8001684:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001686:	f107 0320 	add.w	r3, r7, #32
 800168a:	2230      	movs	r2, #48	; 0x30
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f008 fddc 	bl	800a24c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80016a4:	2300      	movs	r3, #0
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	4b28      	ldr	r3, [pc, #160]	; (800174c <SystemClock_Config+0xcc>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	4a27      	ldr	r2, [pc, #156]	; (800174c <SystemClock_Config+0xcc>)
 80016ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b2:	6413      	str	r3, [r2, #64]	; 0x40
 80016b4:	4b25      	ldr	r3, [pc, #148]	; (800174c <SystemClock_Config+0xcc>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016c0:	2300      	movs	r3, #0
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	4b22      	ldr	r3, [pc, #136]	; (8001750 <SystemClock_Config+0xd0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a21      	ldr	r2, [pc, #132]	; (8001750 <SystemClock_Config+0xd0>)
 80016ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <SystemClock_Config+0xd0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016dc:	2301      	movs	r3, #1
 80016de:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e6:	2302      	movs	r3, #2
 80016e8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 80016f0:	2319      	movs	r3, #25
 80016f2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 80016f4:	23c0      	movs	r3, #192	; 0xc0
 80016f6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016f8:	2302      	movs	r3, #2
 80016fa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80016fc:	2304      	movs	r3, #4
 80016fe:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001700:	f107 0320 	add.w	r3, r7, #32
 8001704:	4618      	mov	r0, r3
 8001706:	f003 fa51 	bl	8004bac <HAL_RCC_OscConfig>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <SystemClock_Config+0x94>
		Error_Handler();
 8001710:	f000 f952 	bl	80019b8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001714:	230f      	movs	r3, #15
 8001716:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001718:	2302      	movs	r3, #2
 800171a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001724:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	2103      	movs	r1, #3
 8001732:	4618      	mov	r0, r3
 8001734:	f003 fcb2 	bl	800509c <HAL_RCC_ClockConfig>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <SystemClock_Config+0xc2>
		Error_Handler();
 800173e:	f000 f93b 	bl	80019b8 <Error_Handler>
	}
}
 8001742:	bf00      	nop
 8001744:	3750      	adds	r7, #80	; 0x50
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800
 8001750:	40007000 	.word	0x40007000

08001754 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <MX_I2C1_Init+0x50>)
 800175a:	4a13      	ldr	r2, [pc, #76]	; (80017a8 <MX_I2C1_Init+0x54>)
 800175c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <MX_I2C1_Init+0x50>)
 8001760:	4a12      	ldr	r2, [pc, #72]	; (80017ac <MX_I2C1_Init+0x58>)
 8001762:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <MX_I2C1_Init+0x50>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <MX_I2C1_Init+0x50>)
 800176c:	2200      	movs	r2, #0
 800176e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <MX_I2C1_Init+0x50>)
 8001772:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001776:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <MX_I2C1_Init+0x50>)
 800177a:	2200      	movs	r2, #0
 800177c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <MX_I2C1_Init+0x50>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <MX_I2C1_Init+0x50>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <MX_I2C1_Init+0x50>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001790:	4804      	ldr	r0, [pc, #16]	; (80017a4 <MX_I2C1_Init+0x50>)
 8001792:	f001 fc2d 	bl	8002ff0 <HAL_I2C_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800179c:	f000 f90c 	bl	80019b8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000b6c 	.word	0x20000b6c
 80017a8:	40005400 	.word	0x40005400
 80017ac:	00061a80 	.word	0x00061a80

080017b0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b096      	sub	sp, #88	; 0x58
 80017b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80017b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80017c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80017ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	611a      	str	r2, [r3, #16]
 80017de:	615a      	str	r2, [r3, #20]
 80017e0:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	2220      	movs	r2, #32
 80017e6:	2100      	movs	r1, #0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f008 fd2f 	bl	800a24c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80017ee:	4b3e      	ldr	r3, [pc, #248]	; (80018e8 <MX_TIM1_Init+0x138>)
 80017f0:	4a3e      	ldr	r2, [pc, #248]	; (80018ec <MX_TIM1_Init+0x13c>)
 80017f2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80017f4:	4b3c      	ldr	r3, [pc, #240]	; (80018e8 <MX_TIM1_Init+0x138>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fa:	4b3b      	ldr	r3, [pc, #236]	; (80018e8 <MX_TIM1_Init+0x138>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 120 - 1;
 8001800:	4b39      	ldr	r3, [pc, #228]	; (80018e8 <MX_TIM1_Init+0x138>)
 8001802:	2277      	movs	r2, #119	; 0x77
 8001804:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001806:	4b38      	ldr	r3, [pc, #224]	; (80018e8 <MX_TIM1_Init+0x138>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800180c:	4b36      	ldr	r3, [pc, #216]	; (80018e8 <MX_TIM1_Init+0x138>)
 800180e:	2200      	movs	r2, #0
 8001810:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001812:	4b35      	ldr	r3, [pc, #212]	; (80018e8 <MX_TIM1_Init+0x138>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001818:	4833      	ldr	r0, [pc, #204]	; (80018e8 <MX_TIM1_Init+0x138>)
 800181a:	f003 fdfb 	bl	8005414 <HAL_TIM_Base_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM1_Init+0x78>
		Error_Handler();
 8001824:	f000 f8c8 	bl	80019b8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800182c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800182e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001832:	4619      	mov	r1, r3
 8001834:	482c      	ldr	r0, [pc, #176]	; (80018e8 <MX_TIM1_Init+0x138>)
 8001836:	f004 f9cd 	bl	8005bd4 <HAL_TIM_ConfigClockSource>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM1_Init+0x94>
		Error_Handler();
 8001840:	f000 f8ba 	bl	80019b8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001844:	4828      	ldr	r0, [pc, #160]	; (80018e8 <MX_TIM1_Init+0x138>)
 8001846:	f003 fe34 	bl	80054b2 <HAL_TIM_PWM_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM1_Init+0xa4>
		Error_Handler();
 8001850:	f000 f8b2 	bl	80019b8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001854:	2300      	movs	r3, #0
 8001856:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800185c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001860:	4619      	mov	r1, r3
 8001862:	4821      	ldr	r0, [pc, #132]	; (80018e8 <MX_TIM1_Init+0x138>)
 8001864:	f004 fe2e 	bl	80064c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM1_Init+0xc2>
			!= HAL_OK) {
		Error_Handler();
 800186e:	f000 f8a3 	bl	80019b8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001872:	2360      	movs	r3, #96	; 0x60
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800187a:	2300      	movs	r3, #0
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800187e:	2300      	movs	r3, #0
 8001880:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001886:	2300      	movs	r3, #0
 8001888:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800188a:	2300      	movs	r3, #0
 800188c:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 800188e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001892:	2200      	movs	r2, #0
 8001894:	4619      	mov	r1, r3
 8001896:	4814      	ldr	r0, [pc, #80]	; (80018e8 <MX_TIM1_Init+0x138>)
 8001898:	f004 f8da 	bl	8005a50 <HAL_TIM_PWM_ConfigChannel>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM1_Init+0xf6>
			!= HAL_OK) {
		Error_Handler();
 80018a2:	f000 f889 	bl	80019b8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018be:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	4619      	mov	r1, r3
 80018c8:	4807      	ldr	r0, [pc, #28]	; (80018e8 <MX_TIM1_Init+0x138>)
 80018ca:	f004 fe69 	bl	80065a0 <HAL_TIMEx_ConfigBreakDeadTime>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM1_Init+0x128>
			!= HAL_OK) {
		Error_Handler();
 80018d4:	f000 f870 	bl	80019b8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80018d8:	4803      	ldr	r0, [pc, #12]	; (80018e8 <MX_TIM1_Init+0x138>)
 80018da:	f000 fbe1 	bl	80020a0 <HAL_TIM_MspPostInit>

}
 80018de:	bf00      	nop
 80018e0:	3758      	adds	r7, #88	; 0x58
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000e94 	.word	0x20000e94
 80018ec:	40010000 	.word	0x40010000

080018f0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <MX_DMA_Init+0x3c>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a0b      	ldr	r2, [pc, #44]	; (800192c <MX_DMA_Init+0x3c>)
 8001900:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <MX_DMA_Init+0x3c>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2100      	movs	r1, #0
 8001916:	2039      	movs	r0, #57	; 0x39
 8001918:	f000 fe1d 	bl	8002556 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800191c:	2039      	movs	r0, #57	; 0x39
 800191e:	f000 fe36 	bl	800258e <HAL_NVIC_EnableIRQ>

}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800

08001930 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b1e      	ldr	r3, [pc, #120]	; (80019b4 <MX_GPIO_Init+0x84>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <MX_GPIO_Init+0x84>)
 8001940:	f043 0304 	orr.w	r3, r3, #4
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <MX_GPIO_Init+0x84>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <MX_GPIO_Init+0x84>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a16      	ldr	r2, [pc, #88]	; (80019b4 <MX_GPIO_Init+0x84>)
 800195c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <MX_GPIO_Init+0x84>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <MX_GPIO_Init+0x84>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a0f      	ldr	r2, [pc, #60]	; (80019b4 <MX_GPIO_Init+0x84>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <MX_GPIO_Init+0x84>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	603b      	str	r3, [r7, #0]
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <MX_GPIO_Init+0x84>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <MX_GPIO_Init+0x84>)
 8001994:	f043 0302 	orr.w	r3, r3, #2
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <MX_GPIO_Init+0x84>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]

}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800

080019b8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019bc:	b672      	cpsid	i
}
 80019be:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80019c0:	e7fe      	b.n	80019c0 <Error_Handler+0x8>

080019c2 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af04      	add	r7, sp, #16
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	460b      	mov	r3, r1
 80019cc:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80019ce:	230a      	movs	r3, #10
 80019d0:	9302      	str	r3, [sp, #8]
 80019d2:	2301      	movs	r3, #1
 80019d4:	9301      	str	r3, [sp, #4]
 80019d6:	1cfb      	adds	r3, r7, #3
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2301      	movs	r3, #1
 80019dc:	2200      	movs	r2, #0
 80019de:	2178      	movs	r1, #120	; 0x78
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f001 fc49 	bl	8003278 <HAL_I2C_Mem_Write>
 80019e6:	4603      	mov	r3, r0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 80019f8:	2064      	movs	r0, #100	; 0x64
 80019fa:	f000 fcad 	bl	8002358 <HAL_Delay>
    int status = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8001a02:	21ae      	movs	r1, #174	; 0xae
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ffdc 	bl	80019c2 <ssd1306_WriteCommand>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4413      	add	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8001a14:	2120      	movs	r1, #32
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ffd3 	bl	80019c2 <ssd1306_WriteCommand>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	461a      	mov	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4413      	add	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001a26:	2110      	movs	r1, #16
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ffca 	bl	80019c2 <ssd1306_WriteCommand>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	461a      	mov	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	4413      	add	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8001a38:	21b0      	movs	r1, #176	; 0xb0
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ffc1 	bl	80019c2 <ssd1306_WriteCommand>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4413      	add	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8001a4a:	21c8      	movs	r1, #200	; 0xc8
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ffb8 	bl	80019c2 <ssd1306_WriteCommand>
 8001a52:	4603      	mov	r3, r0
 8001a54:	461a      	mov	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4413      	add	r3, r2
 8001a5a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ffaf 	bl	80019c2 <ssd1306_WriteCommand>
 8001a64:	4603      	mov	r3, r0
 8001a66:	461a      	mov	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8001a6e:	2110      	movs	r1, #16
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ffa6 	bl	80019c2 <ssd1306_WriteCommand>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001a80:	2140      	movs	r1, #64	; 0x40
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ff9d 	bl	80019c2 <ssd1306_WriteCommand>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8001a92:	2181      	movs	r1, #129	; 0x81
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ff94 	bl	80019c2 <ssd1306_WriteCommand>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8001aa4:	21ff      	movs	r1, #255	; 0xff
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ff8b 	bl	80019c2 <ssd1306_WriteCommand>
 8001aac:	4603      	mov	r3, r0
 8001aae:	461a      	mov	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8001ab6:	21a1      	movs	r1, #161	; 0xa1
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ff82 	bl	80019c2 <ssd1306_WriteCommand>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8001ac8:	21a6      	movs	r1, #166	; 0xa6
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff ff79 	bl	80019c2 <ssd1306_WriteCommand>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8001ada:	21a8      	movs	r1, #168	; 0xa8
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ff70 	bl	80019c2 <ssd1306_WriteCommand>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4413      	add	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8001aec:	213f      	movs	r1, #63	; 0x3f
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ff67 	bl	80019c2 <ssd1306_WriteCommand>
 8001af4:	4603      	mov	r3, r0
 8001af6:	461a      	mov	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4413      	add	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001afe:	21a4      	movs	r1, #164	; 0xa4
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ff5e 	bl	80019c2 <ssd1306_WriteCommand>
 8001b06:	4603      	mov	r3, r0
 8001b08:	461a      	mov	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8001b10:	21d3      	movs	r1, #211	; 0xd3
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ff55 	bl	80019c2 <ssd1306_WriteCommand>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4413      	add	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8001b22:	2100      	movs	r1, #0
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ff4c 	bl	80019c2 <ssd1306_WriteCommand>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4413      	add	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8001b34:	21d5      	movs	r1, #213	; 0xd5
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff ff43 	bl	80019c2 <ssd1306_WriteCommand>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4413      	add	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8001b46:	21f0      	movs	r1, #240	; 0xf0
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ff3a 	bl	80019c2 <ssd1306_WriteCommand>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	461a      	mov	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4413      	add	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8001b58:	21d9      	movs	r1, #217	; 0xd9
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff ff31 	bl	80019c2 <ssd1306_WriteCommand>
 8001b60:	4603      	mov	r3, r0
 8001b62:	461a      	mov	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8001b6a:	2122      	movs	r1, #34	; 0x22
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ff28 	bl	80019c2 <ssd1306_WriteCommand>
 8001b72:	4603      	mov	r3, r0
 8001b74:	461a      	mov	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8001b7c:	21da      	movs	r1, #218	; 0xda
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ff1f 	bl	80019c2 <ssd1306_WriteCommand>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8001b8e:	2112      	movs	r1, #18
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ff16 	bl	80019c2 <ssd1306_WriteCommand>
 8001b96:	4603      	mov	r3, r0
 8001b98:	461a      	mov	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001ba0:	21db      	movs	r1, #219	; 0xdb
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ff0d 	bl	80019c2 <ssd1306_WriteCommand>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	461a      	mov	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4413      	add	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001bb2:	2120      	movs	r1, #32
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ff04 	bl	80019c2 <ssd1306_WriteCommand>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8001bc4:	218d      	movs	r1, #141	; 0x8d
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff fefb 	bl	80019c2 <ssd1306_WriteCommand>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8001bd6:	2114      	movs	r1, #20
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff fef2 	bl	80019c2 <ssd1306_WriteCommand>
 8001bde:	4603      	mov	r3, r0
 8001be0:	461a      	mov	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4413      	add	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8001be8:	21af      	movs	r1, #175	; 0xaf
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff fee9 	bl	80019c2 <ssd1306_WriteCommand>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <ssd1306_Init+0x214>
        return 1;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e00f      	b.n	8001c24 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001c04:	2000      	movs	r0, #0
 8001c06:	f000 f813 	bl	8001c30 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f834 	bl	8001c78 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <ssd1306_Init+0x23c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <ssd1306_Init+0x23c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001c1c:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <ssd1306_Init+0x23c>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	715a      	strb	r2, [r3, #5]

    return 0;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000618 	.word	0x20000618

08001c30 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	e00d      	b.n	8001c5c <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <ssd1306_Fill+0x1a>
 8001c46:	2100      	movs	r1, #0
 8001c48:	e000      	b.n	8001c4c <ssd1306_Fill+0x1c>
 8001c4a:	21ff      	movs	r1, #255	; 0xff
 8001c4c:	4a09      	ldr	r2, [pc, #36]	; (8001c74 <ssd1306_Fill+0x44>)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4413      	add	r3, r2
 8001c52:	460a      	mov	r2, r1
 8001c54:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c62:	d3ed      	bcc.n	8001c40 <ssd1306_Fill+0x10>
    }
}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000218 	.word	0x20000218

08001c78 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af04      	add	r7, sp, #16
 8001c7e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8001c80:	2300      	movs	r3, #0
 8001c82:	73fb      	strb	r3, [r7, #15]
 8001c84:	e020      	b.n	8001cc8 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	3b50      	subs	r3, #80	; 0x50
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff fe97 	bl	80019c2 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001c94:	2100      	movs	r1, #0
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff fe93 	bl	80019c2 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001c9c:	2110      	movs	r1, #16
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff fe8f 	bl	80019c2 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	01db      	lsls	r3, r3, #7
 8001ca8:	4a0b      	ldr	r2, [pc, #44]	; (8001cd8 <ssd1306_UpdateScreen+0x60>)
 8001caa:	4413      	add	r3, r2
 8001cac:	2264      	movs	r2, #100	; 0x64
 8001cae:	9202      	str	r2, [sp, #8]
 8001cb0:	2280      	movs	r2, #128	; 0x80
 8001cb2:	9201      	str	r2, [sp, #4]
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	2240      	movs	r2, #64	; 0x40
 8001cba:	2178      	movs	r1, #120	; 0x78
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f001 fadb 	bl	8003278 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	2b07      	cmp	r3, #7
 8001ccc:	d9db      	bls.n	8001c86 <ssd1306_UpdateScreen+0xe>
    }
}
 8001cce:	bf00      	nop
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000218 	.word	0x20000218

08001cdc <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	71bb      	strb	r3, [r7, #6]
 8001cea:	4613      	mov	r3, r2
 8001cec:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	db48      	blt.n	8001d88 <ssd1306_DrawPixel+0xac>
 8001cf6:	79bb      	ldrb	r3, [r7, #6]
 8001cf8:	2b3f      	cmp	r3, #63	; 0x3f
 8001cfa:	d845      	bhi.n	8001d88 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8001cfc:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <ssd1306_DrawPixel+0xb8>)
 8001cfe:	791b      	ldrb	r3, [r3, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d006      	beq.n	8001d12 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8001d04:	797b      	ldrb	r3, [r7, #5]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	bf0c      	ite	eq
 8001d0a:	2301      	moveq	r3, #1
 8001d0c:	2300      	movne	r3, #0
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8001d12:	797b      	ldrb	r3, [r7, #5]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d11a      	bne.n	8001d4e <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001d18:	79fa      	ldrb	r2, [r7, #7]
 8001d1a:	79bb      	ldrb	r3, [r7, #6]
 8001d1c:	08db      	lsrs	r3, r3, #3
 8001d1e:	b2d8      	uxtb	r0, r3
 8001d20:	4603      	mov	r3, r0
 8001d22:	01db      	lsls	r3, r3, #7
 8001d24:	4413      	add	r3, r2
 8001d26:	4a1c      	ldr	r2, [pc, #112]	; (8001d98 <ssd1306_DrawPixel+0xbc>)
 8001d28:	5cd3      	ldrb	r3, [r2, r3]
 8001d2a:	b25a      	sxtb	r2, r3
 8001d2c:	79bb      	ldrb	r3, [r7, #6]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	2101      	movs	r1, #1
 8001d34:	fa01 f303 	lsl.w	r3, r1, r3
 8001d38:	b25b      	sxtb	r3, r3
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	b259      	sxtb	r1, r3
 8001d3e:	79fa      	ldrb	r2, [r7, #7]
 8001d40:	4603      	mov	r3, r0
 8001d42:	01db      	lsls	r3, r3, #7
 8001d44:	4413      	add	r3, r2
 8001d46:	b2c9      	uxtb	r1, r1
 8001d48:	4a13      	ldr	r2, [pc, #76]	; (8001d98 <ssd1306_DrawPixel+0xbc>)
 8001d4a:	54d1      	strb	r1, [r2, r3]
 8001d4c:	e01d      	b.n	8001d8a <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001d4e:	79fa      	ldrb	r2, [r7, #7]
 8001d50:	79bb      	ldrb	r3, [r7, #6]
 8001d52:	08db      	lsrs	r3, r3, #3
 8001d54:	b2d8      	uxtb	r0, r3
 8001d56:	4603      	mov	r3, r0
 8001d58:	01db      	lsls	r3, r3, #7
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4a0e      	ldr	r2, [pc, #56]	; (8001d98 <ssd1306_DrawPixel+0xbc>)
 8001d5e:	5cd3      	ldrb	r3, [r2, r3]
 8001d60:	b25a      	sxtb	r2, r3
 8001d62:	79bb      	ldrb	r3, [r7, #6]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	2101      	movs	r1, #1
 8001d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6e:	b25b      	sxtb	r3, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	b25b      	sxtb	r3, r3
 8001d74:	4013      	ands	r3, r2
 8001d76:	b259      	sxtb	r1, r3
 8001d78:	79fa      	ldrb	r2, [r7, #7]
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	01db      	lsls	r3, r3, #7
 8001d7e:	4413      	add	r3, r2
 8001d80:	b2c9      	uxtb	r1, r1
 8001d82:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <ssd1306_DrawPixel+0xbc>)
 8001d84:	54d1      	strb	r1, [r2, r3]
 8001d86:	e000      	b.n	8001d8a <ssd1306_DrawPixel+0xae>
        return;
 8001d88:	bf00      	nop
    }
}
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	20000618 	.word	0x20000618
 8001d98:	20000218 	.word	0x20000218

08001d9c <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b089      	sub	sp, #36	; 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4604      	mov	r4, r0
 8001da4:	1d38      	adds	r0, r7, #4
 8001da6:	e880 0006 	stmia.w	r0, {r1, r2}
 8001daa:	461a      	mov	r2, r3
 8001dac:	4623      	mov	r3, r4
 8001dae:	73fb      	strb	r3, [r7, #15]
 8001db0:	4613      	mov	r3, r2
 8001db2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001db4:	4b38      	ldr	r3, [pc, #224]	; (8001e98 <ssd1306_WriteChar+0xfc>)
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	793b      	ldrb	r3, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	2b7f      	cmp	r3, #127	; 0x7f
 8001dc0:	dc06      	bgt.n	8001dd0 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001dc2:	4b35      	ldr	r3, [pc, #212]	; (8001e98 <ssd1306_WriteChar+0xfc>)
 8001dc4:	885b      	ldrh	r3, [r3, #2]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	797b      	ldrb	r3, [r7, #5]
 8001dca:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001dcc:	2b3f      	cmp	r3, #63	; 0x3f
 8001dce:	dd01      	ble.n	8001dd4 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	e05d      	b.n	8001e90 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61fb      	str	r3, [r7, #28]
 8001dd8:	e04c      	b.n	8001e74 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	3b20      	subs	r3, #32
 8001de0:	7979      	ldrb	r1, [r7, #5]
 8001de2:	fb01 f303 	mul.w	r3, r1, r3
 8001de6:	4619      	mov	r1, r3
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	440b      	add	r3, r1
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	4413      	add	r3, r2
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001df4:	2300      	movs	r3, #0
 8001df6:	61bb      	str	r3, [r7, #24]
 8001df8:	e034      	b.n	8001e64 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d012      	beq.n	8001e30 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001e0a:	4b23      	ldr	r3, [pc, #140]	; (8001e98 <ssd1306_WriteChar+0xfc>)
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	4413      	add	r3, r2
 8001e16:	b2d8      	uxtb	r0, r3
 8001e18:	4b1f      	ldr	r3, [pc, #124]	; (8001e98 <ssd1306_WriteChar+0xfc>)
 8001e1a:	885b      	ldrh	r3, [r3, #2]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	4413      	add	r3, r2
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	7bba      	ldrb	r2, [r7, #14]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f7ff ff57 	bl	8001cdc <ssd1306_DrawPixel>
 8001e2e:	e016      	b.n	8001e5e <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001e30:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <ssd1306_WriteChar+0xfc>)
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	4413      	add	r3, r2
 8001e3c:	b2d8      	uxtb	r0, r3
 8001e3e:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <ssd1306_WriteChar+0xfc>)
 8001e40:	885b      	ldrh	r3, [r3, #2]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	4413      	add	r3, r2
 8001e4a:	b2d9      	uxtb	r1, r3
 8001e4c:	7bbb      	ldrb	r3, [r7, #14]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	bf0c      	ite	eq
 8001e52:	2301      	moveq	r3, #1
 8001e54:	2300      	movne	r3, #0
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	461a      	mov	r2, r3
 8001e5a:	f7ff ff3f 	bl	8001cdc <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	3301      	adds	r3, #1
 8001e62:	61bb      	str	r3, [r7, #24]
 8001e64:	793b      	ldrb	r3, [r7, #4]
 8001e66:	461a      	mov	r2, r3
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d3c5      	bcc.n	8001dfa <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3301      	adds	r3, #1
 8001e72:	61fb      	str	r3, [r7, #28]
 8001e74:	797b      	ldrb	r3, [r7, #5]
 8001e76:	461a      	mov	r2, r3
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d3ad      	bcc.n	8001dda <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <ssd1306_WriteChar+0xfc>)
 8001e80:	881a      	ldrh	r2, [r3, #0]
 8001e82:	793b      	ldrb	r3, [r7, #4]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	4413      	add	r3, r2
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <ssd1306_WriteChar+0xfc>)
 8001e8c:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3724      	adds	r7, #36	; 0x24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd90      	pop	{r4, r7, pc}
 8001e98:	20000618 	.word	0x20000618

08001e9c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	1d38      	adds	r0, r7, #4
 8001ea6:	e880 0006 	stmia.w	r0, {r1, r2}
 8001eaa:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8001eac:	e012      	b.n	8001ed4 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	7818      	ldrb	r0, [r3, #0]
 8001eb2:	78fb      	ldrb	r3, [r7, #3]
 8001eb4:	1d3a      	adds	r2, r7, #4
 8001eb6:	ca06      	ldmia	r2, {r1, r2}
 8001eb8:	f7ff ff70 	bl	8001d9c <ssd1306_WriteChar>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d002      	beq.n	8001ece <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	e008      	b.n	8001ee0 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
    while (*str)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1e8      	bne.n	8001eae <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	781b      	ldrb	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	460a      	mov	r2, r1
 8001ef2:	71fb      	strb	r3, [r7, #7]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <ssd1306_SetCursor+0x2c>)
 8001efe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001f00:	79bb      	ldrb	r3, [r7, #6]
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	4b03      	ldr	r3, [pc, #12]	; (8001f14 <ssd1306_SetCursor+0x2c>)
 8001f06:	805a      	strh	r2, [r3, #2]
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	20000618 	.word	0x20000618

08001f18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	607b      	str	r3, [r7, #4]
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_MspInit+0x4c>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	4a0f      	ldr	r2, [pc, #60]	; (8001f64 <HAL_MspInit+0x4c>)
 8001f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <HAL_MspInit+0x4c>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	603b      	str	r3, [r7, #0]
 8001f3e:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <HAL_MspInit+0x4c>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	4a08      	ldr	r2, [pc, #32]	; (8001f64 <HAL_MspInit+0x4c>)
 8001f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f48:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_MspInit+0x4c>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800

08001f68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08a      	sub	sp, #40	; 0x28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a19      	ldr	r2, [pc, #100]	; (8001fec <HAL_I2C_MspInit+0x84>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d12c      	bne.n	8001fe4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <HAL_I2C_MspInit+0x88>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4a17      	ldr	r2, [pc, #92]	; (8001ff0 <HAL_I2C_MspInit+0x88>)
 8001f94:	f043 0302 	orr.w	r3, r3, #2
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <HAL_I2C_MspInit+0x88>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fa6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fac:	2312      	movs	r3, #18
 8001fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fb8:	2304      	movs	r3, #4
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	480c      	ldr	r0, [pc, #48]	; (8001ff4 <HAL_I2C_MspInit+0x8c>)
 8001fc4:	f000 fe90 	bl	8002ce8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <HAL_I2C_MspInit+0x88>)
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	4a07      	ldr	r2, [pc, #28]	; (8001ff0 <HAL_I2C_MspInit+0x88>)
 8001fd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_I2C_MspInit+0x88>)
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fe4:	bf00      	nop
 8001fe6:	3728      	adds	r7, #40	; 0x28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40005400 	.word	0x40005400
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40020400 	.word	0x40020400

08001ff8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a22      	ldr	r2, [pc, #136]	; (8002090 <HAL_TIM_Base_MspInit+0x98>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d13d      	bne.n	8002086 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	4b21      	ldr	r3, [pc, #132]	; (8002094 <HAL_TIM_Base_MspInit+0x9c>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	4a20      	ldr	r2, [pc, #128]	; (8002094 <HAL_TIM_Base_MspInit+0x9c>)
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	6453      	str	r3, [r2, #68]	; 0x44
 800201a:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <HAL_TIM_Base_MspInit+0x9c>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8002026:	4b1c      	ldr	r3, [pc, #112]	; (8002098 <HAL_TIM_Base_MspInit+0xa0>)
 8002028:	4a1c      	ldr	r2, [pc, #112]	; (800209c <HAL_TIM_Base_MspInit+0xa4>)
 800202a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 800202c:	4b1a      	ldr	r3, [pc, #104]	; (8002098 <HAL_TIM_Base_MspInit+0xa0>)
 800202e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002032:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002034:	4b18      	ldr	r3, [pc, #96]	; (8002098 <HAL_TIM_Base_MspInit+0xa0>)
 8002036:	2240      	movs	r2, #64	; 0x40
 8002038:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800203a:	4b17      	ldr	r3, [pc, #92]	; (8002098 <HAL_TIM_Base_MspInit+0xa0>)
 800203c:	2200      	movs	r2, #0
 800203e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002040:	4b15      	ldr	r3, [pc, #84]	; (8002098 <HAL_TIM_Base_MspInit+0xa0>)
 8002042:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002046:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002048:	4b13      	ldr	r3, [pc, #76]	; (8002098 <HAL_TIM_Base_MspInit+0xa0>)
 800204a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800204e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002050:	4b11      	ldr	r3, [pc, #68]	; (8002098 <HAL_TIM_Base_MspInit+0xa0>)
 8002052:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002056:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8002058:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <HAL_TIM_Base_MspInit+0xa0>)
 800205a:	2200      	movs	r2, #0
 800205c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <HAL_TIM_Base_MspInit+0xa0>)
 8002060:	2200      	movs	r2, #0
 8002062:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <HAL_TIM_Base_MspInit+0xa0>)
 8002066:	2200      	movs	r2, #0
 8002068:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800206a:	480b      	ldr	r0, [pc, #44]	; (8002098 <HAL_TIM_Base_MspInit+0xa0>)
 800206c:	f000 faaa 	bl	80025c4 <HAL_DMA_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8002076:	f7ff fc9f 	bl	80019b8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a06      	ldr	r2, [pc, #24]	; (8002098 <HAL_TIM_Base_MspInit+0xa0>)
 800207e:	625a      	str	r2, [r3, #36]	; 0x24
 8002080:	4a05      	ldr	r2, [pc, #20]	; (8002098 <HAL_TIM_Base_MspInit+0xa0>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40010000 	.word	0x40010000
 8002094:	40023800 	.word	0x40023800
 8002098:	20000adc 	.word	0x20000adc
 800209c:	40026428 	.word	0x40026428

080020a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 030c 	add.w	r3, r7, #12
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a12      	ldr	r2, [pc, #72]	; (8002108 <HAL_TIM_MspPostInit+0x68>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d11e      	bne.n	8002100 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	4b11      	ldr	r3, [pc, #68]	; (800210c <HAL_TIM_MspPostInit+0x6c>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	4a10      	ldr	r2, [pc, #64]	; (800210c <HAL_TIM_MspPostInit+0x6c>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6313      	str	r3, [r2, #48]	; 0x30
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <HAL_TIM_MspPostInit+0x6c>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e4:	2302      	movs	r3, #2
 80020e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020f0:	2301      	movs	r3, #1
 80020f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f4:	f107 030c 	add.w	r3, r7, #12
 80020f8:	4619      	mov	r1, r3
 80020fa:	4805      	ldr	r0, [pc, #20]	; (8002110 <HAL_TIM_MspPostInit+0x70>)
 80020fc:	f000 fdf4 	bl	8002ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002100:	bf00      	nop
 8002102:	3720      	adds	r7, #32
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40010000 	.word	0x40010000
 800210c:	40023800 	.word	0x40023800
 8002110:	40020000 	.word	0x40020000

08002114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002118:	e7fe      	b.n	8002118 <NMI_Handler+0x4>

0800211a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800211a:	b480      	push	{r7}
 800211c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800211e:	e7fe      	b.n	800211e <HardFault_Handler+0x4>

08002120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002124:	e7fe      	b.n	8002124 <MemManage_Handler+0x4>

08002126 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800212a:	e7fe      	b.n	800212a <BusFault_Handler+0x4>

0800212c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002130:	e7fe      	b.n	8002130 <UsageFault_Handler+0x4>

08002132 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002160:	f000 f8da 	bl	8002318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002164:	bf00      	nop
 8002166:	bd80      	pop	{r7, pc}

08002168 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800216c:	4802      	ldr	r0, [pc, #8]	; (8002178 <DMA2_Stream1_IRQHandler+0x10>)
 800216e:	f000 fb51 	bl	8002814 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000adc 	.word	0x20000adc

0800217c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002180:	4802      	ldr	r0, [pc, #8]	; (800218c <OTG_FS_IRQHandler+0x10>)
 8002182:	f001 fce0 	bl	8003b46 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200024bc 	.word	0x200024bc

08002190 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002198:	4a14      	ldr	r2, [pc, #80]	; (80021ec <_sbrk+0x5c>)
 800219a:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <_sbrk+0x60>)
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021a4:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <_sbrk+0x64>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d102      	bne.n	80021b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <_sbrk+0x64>)
 80021ae:	4a12      	ldr	r2, [pc, #72]	; (80021f8 <_sbrk+0x68>)
 80021b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021b2:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <_sbrk+0x64>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d207      	bcs.n	80021d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021c0:	f008 f81a 	bl	800a1f8 <__errno>
 80021c4:	4603      	mov	r3, r0
 80021c6:	220c      	movs	r2, #12
 80021c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021ce:	e009      	b.n	80021e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021d0:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <_sbrk+0x64>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021d6:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <_sbrk+0x64>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4413      	add	r3, r2
 80021de:	4a05      	ldr	r2, [pc, #20]	; (80021f4 <_sbrk+0x64>)
 80021e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021e2:	68fb      	ldr	r3, [r7, #12]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20020000 	.word	0x20020000
 80021f0:	00000400 	.word	0x00000400
 80021f4:	20000620 	.word	0x20000620
 80021f8:	200028d8 	.word	0x200028d8

080021fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <SystemInit+0x20>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002206:	4a05      	ldr	r2, [pc, #20]	; (800221c <SystemInit+0x20>)
 8002208:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800220c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002220:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002258 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002224:	480d      	ldr	r0, [pc, #52]	; (800225c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002226:	490e      	ldr	r1, [pc, #56]	; (8002260 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002228:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800222c:	e002      	b.n	8002234 <LoopCopyDataInit>

0800222e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002232:	3304      	adds	r3, #4

08002234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002238:	d3f9      	bcc.n	800222e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223a:	4a0b      	ldr	r2, [pc, #44]	; (8002268 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800223c:	4c0b      	ldr	r4, [pc, #44]	; (800226c <LoopFillZerobss+0x26>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002240:	e001      	b.n	8002246 <LoopFillZerobss>

08002242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002244:	3204      	adds	r2, #4

08002246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002248:	d3fb      	bcc.n	8002242 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800224a:	f7ff ffd7 	bl	80021fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800224e:	f007 ffd9 	bl	800a204 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002252:	f7ff f977 	bl	8001544 <main>
  bx  lr    
 8002256:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002258:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800225c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002260:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002264:	0800d318 	.word	0x0800d318
  ldr r2, =_sbss
 8002268:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800226c:	200028d4 	.word	0x200028d4

08002270 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002270:	e7fe      	b.n	8002270 <ADC_IRQHandler>
	...

08002274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002278:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <HAL_Init+0x40>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0d      	ldr	r2, [pc, #52]	; (80022b4 <HAL_Init+0x40>)
 800227e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002282:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002284:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_Init+0x40>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <HAL_Init+0x40>)
 800228a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800228e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <HAL_Init+0x40>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a07      	ldr	r2, [pc, #28]	; (80022b4 <HAL_Init+0x40>)
 8002296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800229c:	2003      	movs	r0, #3
 800229e:	f000 f94f 	bl	8002540 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022a2:	200f      	movs	r0, #15
 80022a4:	f000 f808 	bl	80022b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022a8:	f7ff fe36 	bl	8001f18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40023c00 	.word	0x40023c00

080022b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c0:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_InitTick+0x54>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_InitTick+0x58>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	4619      	mov	r1, r3
 80022ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80022d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 f967 	bl	80025aa <HAL_SYSTICK_Config>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e00e      	b.n	8002304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b0f      	cmp	r3, #15
 80022ea:	d80a      	bhi.n	8002302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ec:	2200      	movs	r2, #0
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022f4:	f000 f92f 	bl	8002556 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022f8:	4a06      	ldr	r2, [pc, #24]	; (8002314 <HAL_InitTick+0x5c>)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	e000      	b.n	8002304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
}
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20000010 	.word	0x20000010
 8002310:	20000018 	.word	0x20000018
 8002314:	20000014 	.word	0x20000014

08002318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_IncTick+0x20>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_IncTick+0x24>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4413      	add	r3, r2
 8002328:	4a04      	ldr	r2, [pc, #16]	; (800233c <HAL_IncTick+0x24>)
 800232a:	6013      	str	r3, [r2, #0]
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20000018 	.word	0x20000018
 800233c:	20000edc 	.word	0x20000edc

08002340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return uwTick;
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <HAL_GetTick+0x14>)
 8002346:	681b      	ldr	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000edc 	.word	0x20000edc

08002358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002360:	f7ff ffee 	bl	8002340 <HAL_GetTick>
 8002364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002370:	d005      	beq.n	800237e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <HAL_Delay+0x44>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4413      	add	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800237e:	bf00      	nop
 8002380:	f7ff ffde 	bl	8002340 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	429a      	cmp	r2, r3
 800238e:	d8f7      	bhi.n	8002380 <HAL_Delay+0x28>
  {
  }
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000018 	.word	0x20000018

080023a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023bc:	4013      	ands	r3, r2
 80023be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023d2:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	60d3      	str	r3, [r2, #12]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <__NVIC_GetPriorityGrouping+0x18>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	0a1b      	lsrs	r3, r3, #8
 80023f2:	f003 0307 	and.w	r3, r3, #7
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	2b00      	cmp	r3, #0
 8002414:	db0b      	blt.n	800242e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	f003 021f 	and.w	r2, r3, #31
 800241c:	4907      	ldr	r1, [pc, #28]	; (800243c <__NVIC_EnableIRQ+0x38>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	2001      	movs	r0, #1
 8002426:	fa00 f202 	lsl.w	r2, r0, r2
 800242a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000e100 	.word	0xe000e100

08002440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	6039      	str	r1, [r7, #0]
 800244a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002450:	2b00      	cmp	r3, #0
 8002452:	db0a      	blt.n	800246a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	b2da      	uxtb	r2, r3
 8002458:	490c      	ldr	r1, [pc, #48]	; (800248c <__NVIC_SetPriority+0x4c>)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	0112      	lsls	r2, r2, #4
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	440b      	add	r3, r1
 8002464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002468:	e00a      	b.n	8002480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4908      	ldr	r1, [pc, #32]	; (8002490 <__NVIC_SetPriority+0x50>)
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	3b04      	subs	r3, #4
 8002478:	0112      	lsls	r2, r2, #4
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	440b      	add	r3, r1
 800247e:	761a      	strb	r2, [r3, #24]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000e100 	.word	0xe000e100
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	; 0x24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f1c3 0307 	rsb	r3, r3, #7
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	bf28      	it	cs
 80024b2:	2304      	movcs	r3, #4
 80024b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3304      	adds	r3, #4
 80024ba:	2b06      	cmp	r3, #6
 80024bc:	d902      	bls.n	80024c4 <NVIC_EncodePriority+0x30>
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3b03      	subs	r3, #3
 80024c2:	e000      	b.n	80024c6 <NVIC_EncodePriority+0x32>
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43da      	mvns	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	401a      	ands	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	fa01 f303 	lsl.w	r3, r1, r3
 80024e6:	43d9      	mvns	r1, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ec:	4313      	orrs	r3, r2
         );
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3724      	adds	r7, #36	; 0x24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800250c:	d301      	bcc.n	8002512 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800250e:	2301      	movs	r3, #1
 8002510:	e00f      	b.n	8002532 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002512:	4a0a      	ldr	r2, [pc, #40]	; (800253c <SysTick_Config+0x40>)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3b01      	subs	r3, #1
 8002518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800251a:	210f      	movs	r1, #15
 800251c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002520:	f7ff ff8e 	bl	8002440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002524:	4b05      	ldr	r3, [pc, #20]	; (800253c <SysTick_Config+0x40>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800252a:	4b04      	ldr	r3, [pc, #16]	; (800253c <SysTick_Config+0x40>)
 800252c:	2207      	movs	r2, #7
 800252e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	e000e010 	.word	0xe000e010

08002540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ff29 	bl	80023a0 <__NVIC_SetPriorityGrouping>
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002556:	b580      	push	{r7, lr}
 8002558:	b086      	sub	sp, #24
 800255a:	af00      	add	r7, sp, #0
 800255c:	4603      	mov	r3, r0
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	607a      	str	r2, [r7, #4]
 8002562:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002568:	f7ff ff3e 	bl	80023e8 <__NVIC_GetPriorityGrouping>
 800256c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68b9      	ldr	r1, [r7, #8]
 8002572:	6978      	ldr	r0, [r7, #20]
 8002574:	f7ff ff8e 	bl	8002494 <NVIC_EncodePriority>
 8002578:	4602      	mov	r2, r0
 800257a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff5d 	bl	8002440 <__NVIC_SetPriority>
}
 8002586:	bf00      	nop
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	4603      	mov	r3, r0
 8002596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff31 	bl	8002404 <__NVIC_EnableIRQ>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff ffa2 	bl	80024fc <SysTick_Config>
 80025b8:	4603      	mov	r3, r0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025d0:	f7ff feb6 	bl	8002340 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e099      	b.n	8002714 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0201 	bic.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002600:	e00f      	b.n	8002622 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002602:	f7ff fe9d 	bl	8002340 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b05      	cmp	r3, #5
 800260e:	d908      	bls.n	8002622 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2220      	movs	r2, #32
 8002614:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2203      	movs	r2, #3
 800261a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e078      	b.n	8002714 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1e8      	bne.n	8002602 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	4b38      	ldr	r3, [pc, #224]	; (800271c <HAL_DMA_Init+0x158>)
 800263c:	4013      	ands	r3, r2
 800263e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800264e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800265a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002666:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4313      	orrs	r3, r2
 8002672:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	2b04      	cmp	r3, #4
 800267a:	d107      	bne.n	800268c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	4313      	orrs	r3, r2
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	4313      	orrs	r3, r2
 800268a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f023 0307 	bic.w	r3, r3, #7
 80026a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d117      	bne.n	80026e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	4313      	orrs	r3, r2
 80026be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00e      	beq.n	80026e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 fa91 	bl	8002bf0 <DMA_CheckFifoParam>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d008      	beq.n	80026e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2240      	movs	r2, #64	; 0x40
 80026d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026e2:	2301      	movs	r3, #1
 80026e4:	e016      	b.n	8002714 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 fa48 	bl	8002b84 <DMA_CalcBaseAndBitshift>
 80026f4:	4603      	mov	r3, r0
 80026f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fc:	223f      	movs	r2, #63	; 0x3f
 80026fe:	409a      	lsls	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	f010803f 	.word	0xf010803f

08002720 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
 800272c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002736:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_DMA_Start_IT+0x26>
 8002742:	2302      	movs	r3, #2
 8002744:	e040      	b.n	80027c8 <HAL_DMA_Start_IT+0xa8>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b01      	cmp	r3, #1
 8002758:	d12f      	bne.n	80027ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2202      	movs	r2, #2
 800275e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 f9da 	bl	8002b28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002778:	223f      	movs	r2, #63	; 0x3f
 800277a:	409a      	lsls	r2, r3
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0216 	orr.w	r2, r2, #22
 800278e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	2b00      	cmp	r3, #0
 8002796:	d007      	beq.n	80027a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0208 	orr.w	r2, r2, #8
 80027a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	e005      	b.n	80027c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027c2:	2302      	movs	r3, #2
 80027c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d004      	beq.n	80027ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2280      	movs	r2, #128	; 0x80
 80027e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e00c      	b.n	8002808 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2205      	movs	r2, #5
 80027f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0201 	bic.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002820:	4b92      	ldr	r3, [pc, #584]	; (8002a6c <HAL_DMA_IRQHandler+0x258>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a92      	ldr	r2, [pc, #584]	; (8002a70 <HAL_DMA_IRQHandler+0x25c>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	0a9b      	lsrs	r3, r3, #10
 800282c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283e:	2208      	movs	r2, #8
 8002840:	409a      	lsls	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4013      	ands	r3, r2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d01a      	beq.n	8002880 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d013      	beq.n	8002880 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0204 	bic.w	r2, r2, #4
 8002866:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286c:	2208      	movs	r2, #8
 800286e:	409a      	lsls	r2, r3
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002878:	f043 0201 	orr.w	r2, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002884:	2201      	movs	r2, #1
 8002886:	409a      	lsls	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4013      	ands	r3, r2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d012      	beq.n	80028b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00b      	beq.n	80028b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a2:	2201      	movs	r2, #1
 80028a4:	409a      	lsls	r2, r3
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ae:	f043 0202 	orr.w	r2, r3, #2
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ba:	2204      	movs	r2, #4
 80028bc:	409a      	lsls	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d012      	beq.n	80028ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00b      	beq.n	80028ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d8:	2204      	movs	r2, #4
 80028da:	409a      	lsls	r2, r3
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e4:	f043 0204 	orr.w	r2, r3, #4
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f0:	2210      	movs	r2, #16
 80028f2:	409a      	lsls	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d043      	beq.n	8002984 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d03c      	beq.n	8002984 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290e:	2210      	movs	r2, #16
 8002910:	409a      	lsls	r2, r3
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d018      	beq.n	8002956 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d108      	bne.n	8002944 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	d024      	beq.n	8002984 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	4798      	blx	r3
 8002942:	e01f      	b.n	8002984 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002948:	2b00      	cmp	r3, #0
 800294a:	d01b      	beq.n	8002984 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	4798      	blx	r3
 8002954:	e016      	b.n	8002984 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002960:	2b00      	cmp	r3, #0
 8002962:	d107      	bne.n	8002974 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0208 	bic.w	r2, r2, #8
 8002972:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002988:	2220      	movs	r2, #32
 800298a:	409a      	lsls	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 808e 	beq.w	8002ab2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 8086 	beq.w	8002ab2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029aa:	2220      	movs	r2, #32
 80029ac:	409a      	lsls	r2, r3
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b05      	cmp	r3, #5
 80029bc:	d136      	bne.n	8002a2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0216 	bic.w	r2, r2, #22
 80029cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695a      	ldr	r2, [r3, #20]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d103      	bne.n	80029ee <HAL_DMA_IRQHandler+0x1da>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d007      	beq.n	80029fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0208 	bic.w	r2, r2, #8
 80029fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a02:	223f      	movs	r2, #63	; 0x3f
 8002a04:	409a      	lsls	r2, r3
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d07d      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	4798      	blx	r3
        }
        return;
 8002a2a:	e078      	b.n	8002b1e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d01c      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d108      	bne.n	8002a5a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d030      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	4798      	blx	r3
 8002a58:	e02b      	b.n	8002ab2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d027      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	4798      	blx	r3
 8002a6a:	e022      	b.n	8002ab2 <HAL_DMA_IRQHandler+0x29e>
 8002a6c:	20000010 	.word	0x20000010
 8002a70:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10f      	bne.n	8002aa2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0210 	bic.w	r2, r2, #16
 8002a90:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d032      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d022      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2205      	movs	r2, #5
 8002aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0201 	bic.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d307      	bcc.n	8002afa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1f2      	bne.n	8002ade <HAL_DMA_IRQHandler+0x2ca>
 8002af8:	e000      	b.n	8002afc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002afa:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	4798      	blx	r3
 8002b1c:	e000      	b.n	8002b20 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b1e:	bf00      	nop
    }
  }
}
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop

08002b28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
 8002b34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b40      	cmp	r3, #64	; 0x40
 8002b54:	d108      	bne.n	8002b68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b66:	e007      	b.n	8002b78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	60da      	str	r2, [r3, #12]
}
 8002b78:	bf00      	nop
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	3b10      	subs	r3, #16
 8002b94:	4a14      	ldr	r2, [pc, #80]	; (8002be8 <DMA_CalcBaseAndBitshift+0x64>)
 8002b96:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9a:	091b      	lsrs	r3, r3, #4
 8002b9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b9e:	4a13      	ldr	r2, [pc, #76]	; (8002bec <DMA_CalcBaseAndBitshift+0x68>)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	d909      	bls.n	8002bc6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bba:	f023 0303 	bic.w	r3, r3, #3
 8002bbe:	1d1a      	adds	r2, r3, #4
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	659a      	str	r2, [r3, #88]	; 0x58
 8002bc4:	e007      	b.n	8002bd6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bce:	f023 0303 	bic.w	r3, r3, #3
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	aaaaaaab 	.word	0xaaaaaaab
 8002bec:	0800d0f4 	.word	0x0800d0f4

08002bf0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d11f      	bne.n	8002c4a <DMA_CheckFifoParam+0x5a>
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d856      	bhi.n	8002cbe <DMA_CheckFifoParam+0xce>
 8002c10:	a201      	add	r2, pc, #4	; (adr r2, 8002c18 <DMA_CheckFifoParam+0x28>)
 8002c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c16:	bf00      	nop
 8002c18:	08002c29 	.word	0x08002c29
 8002c1c:	08002c3b 	.word	0x08002c3b
 8002c20:	08002c29 	.word	0x08002c29
 8002c24:	08002cbf 	.word	0x08002cbf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d046      	beq.n	8002cc2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c38:	e043      	b.n	8002cc2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c42:	d140      	bne.n	8002cc6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c48:	e03d      	b.n	8002cc6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c52:	d121      	bne.n	8002c98 <DMA_CheckFifoParam+0xa8>
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d837      	bhi.n	8002cca <DMA_CheckFifoParam+0xda>
 8002c5a:	a201      	add	r2, pc, #4	; (adr r2, 8002c60 <DMA_CheckFifoParam+0x70>)
 8002c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c60:	08002c71 	.word	0x08002c71
 8002c64:	08002c77 	.word	0x08002c77
 8002c68:	08002c71 	.word	0x08002c71
 8002c6c:	08002c89 	.word	0x08002c89
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	73fb      	strb	r3, [r7, #15]
      break;
 8002c74:	e030      	b.n	8002cd8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d025      	beq.n	8002cce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c86:	e022      	b.n	8002cce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c90:	d11f      	bne.n	8002cd2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c96:	e01c      	b.n	8002cd2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d903      	bls.n	8002ca6 <DMA_CheckFifoParam+0xb6>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d003      	beq.n	8002cac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ca4:	e018      	b.n	8002cd8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	73fb      	strb	r3, [r7, #15]
      break;
 8002caa:	e015      	b.n	8002cd8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00e      	beq.n	8002cd6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
      break;
 8002cbc:	e00b      	b.n	8002cd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002cbe:	bf00      	nop
 8002cc0:	e00a      	b.n	8002cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cc2:	bf00      	nop
 8002cc4:	e008      	b.n	8002cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cc6:	bf00      	nop
 8002cc8:	e006      	b.n	8002cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cca:	bf00      	nop
 8002ccc:	e004      	b.n	8002cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cce:	bf00      	nop
 8002cd0:	e002      	b.n	8002cd8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cd2:	bf00      	nop
 8002cd4:	e000      	b.n	8002cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cd6:	bf00      	nop
    }
  } 
  
  return status; 
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop

08002ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b089      	sub	sp, #36	; 0x24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
 8002d02:	e159      	b.n	8002fb8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d04:	2201      	movs	r2, #1
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4013      	ands	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	f040 8148 	bne.w	8002fb2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d005      	beq.n	8002d3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d130      	bne.n	8002d9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	2203      	movs	r2, #3
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d70:	2201      	movs	r2, #1
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	091b      	lsrs	r3, r3, #4
 8002d86:	f003 0201 	and.w	r2, r3, #1
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d017      	beq.n	8002dd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	2203      	movs	r2, #3
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d123      	bne.n	8002e2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	08da      	lsrs	r2, r3, #3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3208      	adds	r2, #8
 8002dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	220f      	movs	r2, #15
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	08da      	lsrs	r2, r3, #3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3208      	adds	r2, #8
 8002e26:	69b9      	ldr	r1, [r7, #24]
 8002e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	2203      	movs	r2, #3
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 0203 	and.w	r2, r3, #3
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 80a2 	beq.w	8002fb2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	4b57      	ldr	r3, [pc, #348]	; (8002fd0 <HAL_GPIO_Init+0x2e8>)
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	4a56      	ldr	r2, [pc, #344]	; (8002fd0 <HAL_GPIO_Init+0x2e8>)
 8002e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e7e:	4b54      	ldr	r3, [pc, #336]	; (8002fd0 <HAL_GPIO_Init+0x2e8>)
 8002e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e8a:	4a52      	ldr	r2, [pc, #328]	; (8002fd4 <HAL_GPIO_Init+0x2ec>)
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	089b      	lsrs	r3, r3, #2
 8002e90:	3302      	adds	r3, #2
 8002e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	220f      	movs	r2, #15
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a49      	ldr	r2, [pc, #292]	; (8002fd8 <HAL_GPIO_Init+0x2f0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d019      	beq.n	8002eea <HAL_GPIO_Init+0x202>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a48      	ldr	r2, [pc, #288]	; (8002fdc <HAL_GPIO_Init+0x2f4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d013      	beq.n	8002ee6 <HAL_GPIO_Init+0x1fe>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a47      	ldr	r2, [pc, #284]	; (8002fe0 <HAL_GPIO_Init+0x2f8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00d      	beq.n	8002ee2 <HAL_GPIO_Init+0x1fa>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a46      	ldr	r2, [pc, #280]	; (8002fe4 <HAL_GPIO_Init+0x2fc>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d007      	beq.n	8002ede <HAL_GPIO_Init+0x1f6>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a45      	ldr	r2, [pc, #276]	; (8002fe8 <HAL_GPIO_Init+0x300>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d101      	bne.n	8002eda <HAL_GPIO_Init+0x1f2>
 8002ed6:	2304      	movs	r3, #4
 8002ed8:	e008      	b.n	8002eec <HAL_GPIO_Init+0x204>
 8002eda:	2307      	movs	r3, #7
 8002edc:	e006      	b.n	8002eec <HAL_GPIO_Init+0x204>
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e004      	b.n	8002eec <HAL_GPIO_Init+0x204>
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	e002      	b.n	8002eec <HAL_GPIO_Init+0x204>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <HAL_GPIO_Init+0x204>
 8002eea:	2300      	movs	r3, #0
 8002eec:	69fa      	ldr	r2, [r7, #28]
 8002eee:	f002 0203 	and.w	r2, r2, #3
 8002ef2:	0092      	lsls	r2, r2, #2
 8002ef4:	4093      	lsls	r3, r2
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002efc:	4935      	ldr	r1, [pc, #212]	; (8002fd4 <HAL_GPIO_Init+0x2ec>)
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	089b      	lsrs	r3, r3, #2
 8002f02:	3302      	adds	r3, #2
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f0a:	4b38      	ldr	r3, [pc, #224]	; (8002fec <HAL_GPIO_Init+0x304>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	43db      	mvns	r3, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4013      	ands	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f2e:	4a2f      	ldr	r2, [pc, #188]	; (8002fec <HAL_GPIO_Init+0x304>)
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f34:	4b2d      	ldr	r3, [pc, #180]	; (8002fec <HAL_GPIO_Init+0x304>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4013      	ands	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f58:	4a24      	ldr	r2, [pc, #144]	; (8002fec <HAL_GPIO_Init+0x304>)
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f5e:	4b23      	ldr	r3, [pc, #140]	; (8002fec <HAL_GPIO_Init+0x304>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	43db      	mvns	r3, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f82:	4a1a      	ldr	r2, [pc, #104]	; (8002fec <HAL_GPIO_Init+0x304>)
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f88:	4b18      	ldr	r3, [pc, #96]	; (8002fec <HAL_GPIO_Init+0x304>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fac:	4a0f      	ldr	r2, [pc, #60]	; (8002fec <HAL_GPIO_Init+0x304>)
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	61fb      	str	r3, [r7, #28]
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	2b0f      	cmp	r3, #15
 8002fbc:	f67f aea2 	bls.w	8002d04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fc0:	bf00      	nop
 8002fc2:	bf00      	nop
 8002fc4:	3724      	adds	r7, #36	; 0x24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	40013800 	.word	0x40013800
 8002fd8:	40020000 	.word	0x40020000
 8002fdc:	40020400 	.word	0x40020400
 8002fe0:	40020800 	.word	0x40020800
 8002fe4:	40020c00 	.word	0x40020c00
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	40013c00 	.word	0x40013c00

08002ff0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e12b      	b.n	800325a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d106      	bne.n	800301c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fe ffa6 	bl	8001f68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2224      	movs	r2, #36	; 0x24
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0201 	bic.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003042:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003052:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003054:	f002 f9ca 	bl	80053ec <HAL_RCC_GetPCLK1Freq>
 8003058:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4a81      	ldr	r2, [pc, #516]	; (8003264 <HAL_I2C_Init+0x274>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d807      	bhi.n	8003074 <HAL_I2C_Init+0x84>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4a80      	ldr	r2, [pc, #512]	; (8003268 <HAL_I2C_Init+0x278>)
 8003068:	4293      	cmp	r3, r2
 800306a:	bf94      	ite	ls
 800306c:	2301      	movls	r3, #1
 800306e:	2300      	movhi	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	e006      	b.n	8003082 <HAL_I2C_Init+0x92>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4a7d      	ldr	r2, [pc, #500]	; (800326c <HAL_I2C_Init+0x27c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	bf94      	ite	ls
 800307c:	2301      	movls	r3, #1
 800307e:	2300      	movhi	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e0e7      	b.n	800325a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4a78      	ldr	r2, [pc, #480]	; (8003270 <HAL_I2C_Init+0x280>)
 800308e:	fba2 2303 	umull	r2, r3, r2, r3
 8003092:	0c9b      	lsrs	r3, r3, #18
 8003094:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	4a6a      	ldr	r2, [pc, #424]	; (8003264 <HAL_I2C_Init+0x274>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d802      	bhi.n	80030c4 <HAL_I2C_Init+0xd4>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	3301      	adds	r3, #1
 80030c2:	e009      	b.n	80030d8 <HAL_I2C_Init+0xe8>
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030ca:	fb02 f303 	mul.w	r3, r2, r3
 80030ce:	4a69      	ldr	r2, [pc, #420]	; (8003274 <HAL_I2C_Init+0x284>)
 80030d0:	fba2 2303 	umull	r2, r3, r2, r3
 80030d4:	099b      	lsrs	r3, r3, #6
 80030d6:	3301      	adds	r3, #1
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	430b      	orrs	r3, r1
 80030de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	495c      	ldr	r1, [pc, #368]	; (8003264 <HAL_I2C_Init+0x274>)
 80030f4:	428b      	cmp	r3, r1
 80030f6:	d819      	bhi.n	800312c <HAL_I2C_Init+0x13c>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	1e59      	subs	r1, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	fbb1 f3f3 	udiv	r3, r1, r3
 8003106:	1c59      	adds	r1, r3, #1
 8003108:	f640 73fc 	movw	r3, #4092	; 0xffc
 800310c:	400b      	ands	r3, r1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <HAL_I2C_Init+0x138>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1e59      	subs	r1, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003120:	3301      	adds	r3, #1
 8003122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003126:	e051      	b.n	80031cc <HAL_I2C_Init+0x1dc>
 8003128:	2304      	movs	r3, #4
 800312a:	e04f      	b.n	80031cc <HAL_I2C_Init+0x1dc>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d111      	bne.n	8003158 <HAL_I2C_Init+0x168>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	1e58      	subs	r0, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6859      	ldr	r1, [r3, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	440b      	add	r3, r1
 8003142:	fbb0 f3f3 	udiv	r3, r0, r3
 8003146:	3301      	adds	r3, #1
 8003148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf0c      	ite	eq
 8003150:	2301      	moveq	r3, #1
 8003152:	2300      	movne	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	e012      	b.n	800317e <HAL_I2C_Init+0x18e>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	1e58      	subs	r0, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6859      	ldr	r1, [r3, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	0099      	lsls	r1, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	fbb0 f3f3 	udiv	r3, r0, r3
 800316e:	3301      	adds	r3, #1
 8003170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003174:	2b00      	cmp	r3, #0
 8003176:	bf0c      	ite	eq
 8003178:	2301      	moveq	r3, #1
 800317a:	2300      	movne	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_I2C_Init+0x196>
 8003182:	2301      	movs	r3, #1
 8003184:	e022      	b.n	80031cc <HAL_I2C_Init+0x1dc>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10e      	bne.n	80031ac <HAL_I2C_Init+0x1bc>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1e58      	subs	r0, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6859      	ldr	r1, [r3, #4]
 8003196:	460b      	mov	r3, r1
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	440b      	add	r3, r1
 800319c:	fbb0 f3f3 	udiv	r3, r0, r3
 80031a0:	3301      	adds	r3, #1
 80031a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031aa:	e00f      	b.n	80031cc <HAL_I2C_Init+0x1dc>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1e58      	subs	r0, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6859      	ldr	r1, [r3, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	0099      	lsls	r1, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	fbb0 f3f3 	udiv	r3, r0, r3
 80031c2:	3301      	adds	r3, #1
 80031c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	6809      	ldr	r1, [r1, #0]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69da      	ldr	r2, [r3, #28]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6911      	ldr	r1, [r2, #16]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68d2      	ldr	r2, [r2, #12]
 8003206:	4311      	orrs	r1, r2
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	430b      	orrs	r3, r1
 800320e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695a      	ldr	r2, [r3, #20]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0201 	orr.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2220      	movs	r2, #32
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	000186a0 	.word	0x000186a0
 8003268:	001e847f 	.word	0x001e847f
 800326c:	003d08ff 	.word	0x003d08ff
 8003270:	431bde83 	.word	0x431bde83
 8003274:	10624dd3 	.word	0x10624dd3

08003278 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af02      	add	r7, sp, #8
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	4608      	mov	r0, r1
 8003282:	4611      	mov	r1, r2
 8003284:	461a      	mov	r2, r3
 8003286:	4603      	mov	r3, r0
 8003288:	817b      	strh	r3, [r7, #10]
 800328a:	460b      	mov	r3, r1
 800328c:	813b      	strh	r3, [r7, #8]
 800328e:	4613      	mov	r3, r2
 8003290:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003292:	f7ff f855 	bl	8002340 <HAL_GetTick>
 8003296:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b20      	cmp	r3, #32
 80032a2:	f040 80d9 	bne.w	8003458 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	2319      	movs	r3, #25
 80032ac:	2201      	movs	r2, #1
 80032ae:	496d      	ldr	r1, [pc, #436]	; (8003464 <HAL_I2C_Mem_Write+0x1ec>)
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 f971 	bl	8003598 <I2C_WaitOnFlagUntilTimeout>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80032bc:	2302      	movs	r3, #2
 80032be:	e0cc      	b.n	800345a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_I2C_Mem_Write+0x56>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e0c5      	b.n	800345a <HAL_I2C_Mem_Write+0x1e2>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d007      	beq.n	80032f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003302:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2221      	movs	r2, #33	; 0x21
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2240      	movs	r2, #64	; 0x40
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6a3a      	ldr	r2, [r7, #32]
 800331e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003324:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4a4d      	ldr	r2, [pc, #308]	; (8003468 <HAL_I2C_Mem_Write+0x1f0>)
 8003334:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003336:	88f8      	ldrh	r0, [r7, #6]
 8003338:	893a      	ldrh	r2, [r7, #8]
 800333a:	8979      	ldrh	r1, [r7, #10]
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	9301      	str	r3, [sp, #4]
 8003340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	4603      	mov	r3, r0
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f890 	bl	800346c <I2C_RequestMemoryWrite>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d052      	beq.n	80033f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e081      	b.n	800345a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 f9f2 	bl	8003744 <I2C_WaitOnTXEFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00d      	beq.n	8003382 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	2b04      	cmp	r3, #4
 800336c:	d107      	bne.n	800337e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800337c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e06b      	b.n	800345a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	781a      	ldrb	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d11b      	bne.n	80033f8 <HAL_I2C_Mem_Write+0x180>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d017      	beq.n	80033f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	781a      	ldrb	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1aa      	bne.n	8003356 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 f9de 	bl	80037c6 <I2C_WaitOnBTFFlagUntilTimeout>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00d      	beq.n	800342c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	2b04      	cmp	r3, #4
 8003416:	d107      	bne.n	8003428 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003426:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e016      	b.n	800345a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800343a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	e000      	b.n	800345a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003458:	2302      	movs	r3, #2
  }
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	00100002 	.word	0x00100002
 8003468:	ffff0000 	.word	0xffff0000

0800346c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b088      	sub	sp, #32
 8003470:	af02      	add	r7, sp, #8
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	4608      	mov	r0, r1
 8003476:	4611      	mov	r1, r2
 8003478:	461a      	mov	r2, r3
 800347a:	4603      	mov	r3, r0
 800347c:	817b      	strh	r3, [r7, #10]
 800347e:	460b      	mov	r3, r1
 8003480:	813b      	strh	r3, [r7, #8]
 8003482:	4613      	mov	r3, r2
 8003484:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003494:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	2200      	movs	r2, #0
 800349e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 f878 	bl	8003598 <I2C_WaitOnFlagUntilTimeout>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00d      	beq.n	80034ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034bc:	d103      	bne.n	80034c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e05f      	b.n	800358a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034ca:	897b      	ldrh	r3, [r7, #10]
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	461a      	mov	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	6a3a      	ldr	r2, [r7, #32]
 80034de:	492d      	ldr	r1, [pc, #180]	; (8003594 <I2C_RequestMemoryWrite+0x128>)
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f8b0 	bl	8003646 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e04c      	b.n	800358a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003508:	6a39      	ldr	r1, [r7, #32]
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f91a 	bl	8003744 <I2C_WaitOnTXEFlagUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00d      	beq.n	8003532 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	2b04      	cmp	r3, #4
 800351c:	d107      	bne.n	800352e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800352c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e02b      	b.n	800358a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003532:	88fb      	ldrh	r3, [r7, #6]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d105      	bne.n	8003544 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003538:	893b      	ldrh	r3, [r7, #8]
 800353a:	b2da      	uxtb	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	611a      	str	r2, [r3, #16]
 8003542:	e021      	b.n	8003588 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003544:	893b      	ldrh	r3, [r7, #8]
 8003546:	0a1b      	lsrs	r3, r3, #8
 8003548:	b29b      	uxth	r3, r3
 800354a:	b2da      	uxtb	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003554:	6a39      	ldr	r1, [r7, #32]
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f8f4 	bl	8003744 <I2C_WaitOnTXEFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00d      	beq.n	800357e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	2b04      	cmp	r3, #4
 8003568:	d107      	bne.n	800357a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003578:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e005      	b.n	800358a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800357e:	893b      	ldrh	r3, [r7, #8]
 8003580:	b2da      	uxtb	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	00010002 	.word	0x00010002

08003598 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	603b      	str	r3, [r7, #0]
 80035a4:	4613      	mov	r3, r2
 80035a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035a8:	e025      	b.n	80035f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035b0:	d021      	beq.n	80035f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b2:	f7fe fec5 	bl	8002340 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d302      	bcc.n	80035c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d116      	bne.n	80035f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f043 0220 	orr.w	r2, r3, #32
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e023      	b.n	800363e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	0c1b      	lsrs	r3, r3, #16
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d10d      	bne.n	800361c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	43da      	mvns	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4013      	ands	r3, r2
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	bf0c      	ite	eq
 8003612:	2301      	moveq	r3, #1
 8003614:	2300      	movne	r3, #0
 8003616:	b2db      	uxtb	r3, r3
 8003618:	461a      	mov	r2, r3
 800361a:	e00c      	b.n	8003636 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	43da      	mvns	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4013      	ands	r3, r2
 8003628:	b29b      	uxth	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	bf0c      	ite	eq
 800362e:	2301      	moveq	r3, #1
 8003630:	2300      	movne	r3, #0
 8003632:	b2db      	uxtb	r3, r3
 8003634:	461a      	mov	r2, r3
 8003636:	79fb      	ldrb	r3, [r7, #7]
 8003638:	429a      	cmp	r2, r3
 800363a:	d0b6      	beq.n	80035aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b084      	sub	sp, #16
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
 8003652:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003654:	e051      	b.n	80036fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003664:	d123      	bne.n	80036ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003674:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800367e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2220      	movs	r2, #32
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	f043 0204 	orr.w	r2, r3, #4
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e046      	b.n	800373c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036b4:	d021      	beq.n	80036fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b6:	f7fe fe43 	bl	8002340 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d302      	bcc.n	80036cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d116      	bne.n	80036fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f043 0220 	orr.w	r2, r3, #32
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e020      	b.n	800373c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	0c1b      	lsrs	r3, r3, #16
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b01      	cmp	r3, #1
 8003702:	d10c      	bne.n	800371e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	43da      	mvns	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4013      	ands	r3, r2
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	bf14      	ite	ne
 8003716:	2301      	movne	r3, #1
 8003718:	2300      	moveq	r3, #0
 800371a:	b2db      	uxtb	r3, r3
 800371c:	e00b      	b.n	8003736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	43da      	mvns	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	4013      	ands	r3, r2
 800372a:	b29b      	uxth	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	bf14      	ite	ne
 8003730:	2301      	movne	r3, #1
 8003732:	2300      	moveq	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d18d      	bne.n	8003656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003750:	e02d      	b.n	80037ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f878 	bl	8003848 <I2C_IsAcknowledgeFailed>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e02d      	b.n	80037be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003768:	d021      	beq.n	80037ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376a:	f7fe fde9 	bl	8002340 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	429a      	cmp	r2, r3
 8003778:	d302      	bcc.n	8003780 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d116      	bne.n	80037ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f043 0220 	orr.w	r2, r3, #32
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e007      	b.n	80037be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b8:	2b80      	cmp	r3, #128	; 0x80
 80037ba:	d1ca      	bne.n	8003752 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b084      	sub	sp, #16
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	60f8      	str	r0, [r7, #12]
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037d2:	e02d      	b.n	8003830 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f837 	bl	8003848 <I2C_IsAcknowledgeFailed>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e02d      	b.n	8003840 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037ea:	d021      	beq.n	8003830 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ec:	f7fe fda8 	bl	8002340 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d302      	bcc.n	8003802 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d116      	bne.n	8003830 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	f043 0220 	orr.w	r2, r3, #32
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e007      	b.n	8003840 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b04      	cmp	r3, #4
 800383c:	d1ca      	bne.n	80037d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800385a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385e:	d11b      	bne.n	8003898 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003868:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	f043 0204 	orr.w	r2, r3, #4
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e000      	b.n	800389a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038a8:	b08f      	sub	sp, #60	; 0x3c
 80038aa:	af0a      	add	r7, sp, #40	; 0x28
 80038ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e10f      	b.n	8003ad8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d106      	bne.n	80038d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f006 f986 	bl	8009be4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2203      	movs	r2, #3
 80038dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d102      	bne.n	80038f2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f002 ffb9 	bl	800686e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	603b      	str	r3, [r7, #0]
 8003902:	687e      	ldr	r6, [r7, #4]
 8003904:	466d      	mov	r5, sp
 8003906:	f106 0410 	add.w	r4, r6, #16
 800390a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800390c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800390e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003910:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003912:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003916:	e885 0003 	stmia.w	r5, {r0, r1}
 800391a:	1d33      	adds	r3, r6, #4
 800391c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800391e:	6838      	ldr	r0, [r7, #0]
 8003920:	f002 fe90 	bl	8006644 <USB_CoreInit>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d005      	beq.n	8003936 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2202      	movs	r2, #2
 800392e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e0d0      	b.n	8003ad8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2100      	movs	r1, #0
 800393c:	4618      	mov	r0, r3
 800393e:	f002 ffa7 	bl	8006890 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003942:	2300      	movs	r3, #0
 8003944:	73fb      	strb	r3, [r7, #15]
 8003946:	e04a      	b.n	80039de <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003948:	7bfa      	ldrb	r2, [r7, #15]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	1a9b      	subs	r3, r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	333d      	adds	r3, #61	; 0x3d
 8003958:	2201      	movs	r2, #1
 800395a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800395c:	7bfa      	ldrb	r2, [r7, #15]
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	1a9b      	subs	r3, r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	333c      	adds	r3, #60	; 0x3c
 800396c:	7bfa      	ldrb	r2, [r7, #15]
 800396e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003970:	7bfa      	ldrb	r2, [r7, #15]
 8003972:	7bfb      	ldrb	r3, [r7, #15]
 8003974:	b298      	uxth	r0, r3
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	1a9b      	subs	r3, r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	3342      	adds	r3, #66	; 0x42
 8003984:	4602      	mov	r2, r0
 8003986:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003988:	7bfa      	ldrb	r2, [r7, #15]
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	4613      	mov	r3, r2
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	1a9b      	subs	r3, r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	333f      	adds	r3, #63	; 0x3f
 8003998:	2200      	movs	r2, #0
 800399a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800399c:	7bfa      	ldrb	r2, [r7, #15]
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	1a9b      	subs	r3, r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	3344      	adds	r3, #68	; 0x44
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039b0:	7bfa      	ldrb	r2, [r7, #15]
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	3348      	adds	r3, #72	; 0x48
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039c4:	7bfa      	ldrb	r2, [r7, #15]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	3350      	adds	r3, #80	; 0x50
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	3301      	adds	r3, #1
 80039dc:	73fb      	strb	r3, [r7, #15]
 80039de:	7bfa      	ldrb	r2, [r7, #15]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d3af      	bcc.n	8003948 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039e8:	2300      	movs	r3, #0
 80039ea:	73fb      	strb	r3, [r7, #15]
 80039ec:	e044      	b.n	8003a78 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039ee:	7bfa      	ldrb	r2, [r7, #15]
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	1a9b      	subs	r3, r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003a00:	2200      	movs	r2, #0
 8003a02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a04:	7bfa      	ldrb	r2, [r7, #15]
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003a16:	7bfa      	ldrb	r2, [r7, #15]
 8003a18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a1a:	7bfa      	ldrb	r2, [r7, #15]
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	1a9b      	subs	r3, r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a30:	7bfa      	ldrb	r2, [r7, #15]
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a46:	7bfa      	ldrb	r2, [r7, #15]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a5c:	7bfa      	ldrb	r2, [r7, #15]
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	3301      	adds	r3, #1
 8003a76:	73fb      	strb	r3, [r7, #15]
 8003a78:	7bfa      	ldrb	r2, [r7, #15]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d3b5      	bcc.n	80039ee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	687e      	ldr	r6, [r7, #4]
 8003a8a:	466d      	mov	r5, sp
 8003a8c:	f106 0410 	add.w	r4, r6, #16
 8003a90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003aa0:	1d33      	adds	r3, r6, #4
 8003aa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003aa4:	6838      	ldr	r0, [r7, #0]
 8003aa6:	f002 ff3f 	bl	8006928 <USB_DevInit>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e00d      	b.n	8003ad8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f003 ffbb 	bl	8007a4c <USB_DevDisconnect>

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ae0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_PCD_Start+0x1c>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e020      	b.n	8003b3e <HAL_PCD_Start+0x5e>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d109      	bne.n	8003b20 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d005      	beq.n	8003b20 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f002 fe91 	bl	800684c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f003 ff6b 	bl	8007a0a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b46:	b590      	push	{r4, r7, lr}
 8003b48:	b08d      	sub	sp, #52	; 0x34
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f004 f829 	bl	8007bb4 <USB_GetMode>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f040 839d 	bne.w	80042a4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f003 ff8d 	bl	8007a8e <USB_ReadInterrupts>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 8393 	beq.w	80042a2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f003 ff84 	bl	8007a8e <USB_ReadInterrupts>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d107      	bne.n	8003ba0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695a      	ldr	r2, [r3, #20]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f002 0202 	and.w	r2, r2, #2
 8003b9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f003 ff72 	bl	8007a8e <USB_ReadInterrupts>
 8003baa:	4603      	mov	r3, r0
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b10      	cmp	r3, #16
 8003bb2:	d161      	bne.n	8003c78 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699a      	ldr	r2, [r3, #24]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0210 	bic.w	r2, r2, #16
 8003bc2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	f003 020f 	and.w	r2, r3, #15
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	1a9b      	subs	r3, r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	4413      	add	r3, r2
 8003be0:	3304      	adds	r3, #4
 8003be2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	0c5b      	lsrs	r3, r3, #17
 8003be8:	f003 030f 	and.w	r3, r3, #15
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d124      	bne.n	8003c3a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d035      	beq.n	8003c68 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	091b      	lsrs	r3, r3, #4
 8003c04:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	6a38      	ldr	r0, [r7, #32]
 8003c10:	f003 fda9 	bl	8007766 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	091b      	lsrs	r3, r3, #4
 8003c1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c20:	441a      	add	r2, r3
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	699a      	ldr	r2, [r3, #24]
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	091b      	lsrs	r3, r3, #4
 8003c2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c32:	441a      	add	r2, r3
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	619a      	str	r2, [r3, #24]
 8003c38:	e016      	b.n	8003c68 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	0c5b      	lsrs	r3, r3, #17
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	2b06      	cmp	r3, #6
 8003c44:	d110      	bne.n	8003c68 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c4c:	2208      	movs	r2, #8
 8003c4e:	4619      	mov	r1, r3
 8003c50:	6a38      	ldr	r0, [r7, #32]
 8003c52:	f003 fd88 	bl	8007766 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	091b      	lsrs	r3, r3, #4
 8003c5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c62:	441a      	add	r2, r3
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0210 	orr.w	r2, r2, #16
 8003c76:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f003 ff06 	bl	8007a8e <USB_ReadInterrupts>
 8003c82:	4603      	mov	r3, r0
 8003c84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c8c:	d16e      	bne.n	8003d6c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f003 ff0c 	bl	8007ab4 <USB_ReadDevAllOutEpInterrupt>
 8003c9c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003c9e:	e062      	b.n	8003d66 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d057      	beq.n	8003d5a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f003 ff31 	bl	8007b1c <USB_ReadDevOutEPInterrupt>
 8003cba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00c      	beq.n	8003ce0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003cd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 fdb0 	bl	8004840 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00c      	beq.n	8003d04 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	015a      	lsls	r2, r3, #5
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	2308      	movs	r3, #8
 8003cfa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003cfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 feaa 	bl	8004a58 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f003 0310 	and.w	r3, r3, #16
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d008      	beq.n	8003d20 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	2310      	movs	r3, #16
 8003d1e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d008      	beq.n	8003d3c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d36:	461a      	mov	r2, r3
 8003d38:	2320      	movs	r3, #32
 8003d3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d009      	beq.n	8003d5a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d52:	461a      	mov	r2, r3
 8003d54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d58:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d62:	085b      	lsrs	r3, r3, #1
 8003d64:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d199      	bne.n	8003ca0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f003 fe8c 	bl	8007a8e <USB_ReadInterrupts>
 8003d76:	4603      	mov	r3, r0
 8003d78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d80:	f040 80c0 	bne.w	8003f04 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f003 fead 	bl	8007ae8 <USB_ReadDevAllInEpInterrupt>
 8003d8e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003d94:	e0b2      	b.n	8003efc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 80a7 	beq.w	8003ef0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da8:	b2d2      	uxtb	r2, r2
 8003daa:	4611      	mov	r1, r2
 8003dac:	4618      	mov	r0, r3
 8003dae:	f003 fed3 	bl	8007b58 <USB_ReadDevInEPInterrupt>
 8003db2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d057      	beq.n	8003e6e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	f003 030f 	and.w	r3, r3, #15
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	43db      	mvns	r3, r3
 8003dd8:	69f9      	ldr	r1, [r7, #28]
 8003dda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dde:	4013      	ands	r3, r2
 8003de0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dee:	461a      	mov	r2, r3
 8003df0:	2301      	movs	r3, #1
 8003df2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d132      	bne.n	8003e62 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e00:	4613      	mov	r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	1a9b      	subs	r3, r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	3348      	adds	r3, #72	; 0x48
 8003e0c:	6819      	ldr	r1, [r3, #0]
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e12:	4613      	mov	r3, r2
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	1a9b      	subs	r3, r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4403      	add	r3, r0
 8003e1c:	3344      	adds	r3, #68	; 0x44
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4419      	add	r1, r3
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e26:	4613      	mov	r3, r2
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4403      	add	r3, r0
 8003e30:	3348      	adds	r3, #72	; 0x48
 8003e32:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d113      	bne.n	8003e62 <HAL_PCD_IRQHandler+0x31c>
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e3e:	4613      	mov	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	1a9b      	subs	r3, r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	440b      	add	r3, r1
 8003e48:	3350      	adds	r3, #80	; 0x50
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d108      	bne.n	8003e62 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	f003 fedb 	bl	8007c18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	4619      	mov	r1, r3
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f005 ff3c 	bl	8009ce6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d008      	beq.n	8003e8a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e84:	461a      	mov	r2, r3
 8003e86:	2308      	movs	r3, #8
 8003e88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f003 0310 	and.w	r3, r3, #16
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d008      	beq.n	8003ea6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2310      	movs	r3, #16
 8003ea4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d008      	beq.n	8003ec2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	2340      	movs	r3, #64	; 0x40
 8003ec0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d008      	beq.n	8003ede <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed8:	461a      	mov	r2, r3
 8003eda:	2302      	movs	r3, #2
 8003edc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003ee8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 fc1b 	bl	8004726 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef8:	085b      	lsrs	r3, r3, #1
 8003efa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f47f af49 	bne.w	8003d96 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f003 fdc0 	bl	8007a8e <USB_ReadInterrupts>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f18:	d122      	bne.n	8003f60 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	69fa      	ldr	r2, [r7, #28]
 8003f24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f28:	f023 0301 	bic.w	r3, r3, #1
 8003f2c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d108      	bne.n	8003f4a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f40:	2100      	movs	r1, #0
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fe26 	bl	8004b94 <HAL_PCDEx_LPM_Callback>
 8003f48:	e002      	b.n	8003f50 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f005 ff38 	bl	8009dc0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	695a      	ldr	r2, [r3, #20]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003f5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f003 fd92 	bl	8007a8e <USB_ReadInterrupts>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f74:	d112      	bne.n	8003f9c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d102      	bne.n	8003f8c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f005 fef4 	bl	8009d74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695a      	ldr	r2, [r3, #20]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003f9a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f003 fd74 	bl	8007a8e <USB_ReadInterrupts>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb0:	f040 80c7 	bne.w	8004142 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	69fa      	ldr	r2, [r7, #28]
 8003fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fc2:	f023 0301 	bic.w	r3, r3, #1
 8003fc6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2110      	movs	r1, #16
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f002 fe0e 	bl	8006bf0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fd8:	e056      	b.n	8004088 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ffe:	0151      	lsls	r1, r2, #5
 8004000:	69fa      	ldr	r2, [r7, #28]
 8004002:	440a      	add	r2, r1
 8004004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004008:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800400c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800400e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800401e:	0151      	lsls	r1, r2, #5
 8004020:	69fa      	ldr	r2, [r7, #28]
 8004022:	440a      	add	r2, r1
 8004024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004028:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800402c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800402e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	4413      	add	r3, r2
 8004036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403a:	461a      	mov	r2, r3
 800403c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004040:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	4413      	add	r3, r2
 800404a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004052:	0151      	lsls	r1, r2, #5
 8004054:	69fa      	ldr	r2, [r7, #28]
 8004056:	440a      	add	r2, r1
 8004058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800405c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004060:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004064:	015a      	lsls	r2, r3, #5
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	4413      	add	r3, r2
 800406a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004072:	0151      	lsls	r1, r2, #5
 8004074:	69fa      	ldr	r2, [r7, #28]
 8004076:	440a      	add	r2, r1
 8004078:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800407c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004080:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004084:	3301      	adds	r3, #1
 8004086:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800408e:	429a      	cmp	r2, r3
 8004090:	d3a3      	bcc.n	8003fda <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	69fa      	ldr	r2, [r7, #28]
 800409c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040a0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80040a4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d016      	beq.n	80040dc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040b8:	69fa      	ldr	r2, [r7, #28]
 80040ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040be:	f043 030b 	orr.w	r3, r3, #11
 80040c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ce:	69fa      	ldr	r2, [r7, #28]
 80040d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040d4:	f043 030b 	orr.w	r3, r3, #11
 80040d8:	6453      	str	r3, [r2, #68]	; 0x44
 80040da:	e015      	b.n	8004108 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80040ee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80040f2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	69fa      	ldr	r2, [r7, #28]
 80040fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004102:	f043 030b 	orr.w	r3, r3, #11
 8004106:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	69fa      	ldr	r2, [r7, #28]
 8004112:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004116:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800411a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6818      	ldr	r0, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800412c:	461a      	mov	r2, r3
 800412e:	f003 fd73 	bl	8007c18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695a      	ldr	r2, [r3, #20]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004140:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f003 fca1 	bl	8007a8e <USB_ReadInterrupts>
 800414c:	4603      	mov	r3, r0
 800414e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004156:	d124      	bne.n	80041a2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4618      	mov	r0, r3
 800415e:	f003 fd37 	bl	8007bd0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f002 fd9f 	bl	8006caa <USB_GetDevSpeed>
 800416c:	4603      	mov	r3, r0
 800416e:	461a      	mov	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681c      	ldr	r4, [r3, #0]
 8004178:	f001 f92c 	bl	80053d4 <HAL_RCC_GetHCLKFreq>
 800417c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004182:	b2db      	uxtb	r3, r3
 8004184:	461a      	mov	r2, r3
 8004186:	4620      	mov	r0, r4
 8004188:	f002 fabe 	bl	8006708 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f005 fdd2 	bl	8009d36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695a      	ldr	r2, [r3, #20]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80041a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f003 fc71 	bl	8007a8e <USB_ReadInterrupts>
 80041ac:	4603      	mov	r3, r0
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d10a      	bne.n	80041cc <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f005 fdaf 	bl	8009d1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695a      	ldr	r2, [r3, #20]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f002 0208 	and.w	r2, r2, #8
 80041ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f003 fc5c 	bl	8007a8e <USB_ReadInterrupts>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041e0:	d10f      	bne.n	8004202 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	4619      	mov	r1, r3
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f005 fe07 	bl	8009e00 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695a      	ldr	r2, [r3, #20]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004200:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f003 fc41 	bl	8007a8e <USB_ReadInterrupts>
 800420c:	4603      	mov	r3, r0
 800420e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004212:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004216:	d10f      	bne.n	8004238 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	b2db      	uxtb	r3, r3
 8004220:	4619      	mov	r1, r3
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f005 fdda 	bl	8009ddc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695a      	ldr	r2, [r3, #20]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004236:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4618      	mov	r0, r3
 800423e:	f003 fc26 	bl	8007a8e <USB_ReadInterrupts>
 8004242:	4603      	mov	r3, r0
 8004244:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424c:	d10a      	bne.n	8004264 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f005 fde8 	bl	8009e24 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695a      	ldr	r2, [r3, #20]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004262:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f003 fc10 	bl	8007a8e <USB_ReadInterrupts>
 800426e:	4603      	mov	r3, r0
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b04      	cmp	r3, #4
 8004276:	d115      	bne.n	80042a4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f005 fdd8 	bl	8009e40 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6859      	ldr	r1, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	430a      	orrs	r2, r1
 800429e:	605a      	str	r2, [r3, #4]
 80042a0:	e000      	b.n	80042a4 <HAL_PCD_IRQHandler+0x75e>
      return;
 80042a2:	bf00      	nop
    }
  }
}
 80042a4:	3734      	adds	r7, #52	; 0x34
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd90      	pop	{r4, r7, pc}

080042aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b082      	sub	sp, #8
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	460b      	mov	r3, r1
 80042b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_PCD_SetAddress+0x1a>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e013      	b.n	80042ec <HAL_PCD_SetAddress+0x42>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	78fa      	ldrb	r2, [r7, #3]
 80042d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	78fa      	ldrb	r2, [r7, #3]
 80042da:	4611      	mov	r1, r2
 80042dc:	4618      	mov	r0, r3
 80042de:	f003 fb6e 	bl	80079be <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	4608      	mov	r0, r1
 80042fe:	4611      	mov	r1, r2
 8004300:	461a      	mov	r2, r3
 8004302:	4603      	mov	r3, r0
 8004304:	70fb      	strb	r3, [r7, #3]
 8004306:	460b      	mov	r3, r1
 8004308:	803b      	strh	r3, [r7, #0]
 800430a:	4613      	mov	r3, r2
 800430c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004312:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004316:	2b00      	cmp	r3, #0
 8004318:	da0f      	bge.n	800433a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	f003 020f 	and.w	r2, r3, #15
 8004320:	4613      	mov	r3, r2
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	1a9b      	subs	r3, r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	3338      	adds	r3, #56	; 0x38
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	4413      	add	r3, r2
 800432e:	3304      	adds	r3, #4
 8004330:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2201      	movs	r2, #1
 8004336:	705a      	strb	r2, [r3, #1]
 8004338:	e00f      	b.n	800435a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800433a:	78fb      	ldrb	r3, [r7, #3]
 800433c:	f003 020f 	and.w	r2, r3, #15
 8004340:	4613      	mov	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	1a9b      	subs	r3, r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	4413      	add	r3, r2
 8004350:	3304      	adds	r3, #4
 8004352:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800435a:	78fb      	ldrb	r3, [r7, #3]
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	b2da      	uxtb	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004366:	883a      	ldrh	r2, [r7, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	78ba      	ldrb	r2, [r7, #2]
 8004370:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	785b      	ldrb	r3, [r3, #1]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d004      	beq.n	8004384 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004384:	78bb      	ldrb	r3, [r7, #2]
 8004386:	2b02      	cmp	r3, #2
 8004388:	d102      	bne.n	8004390 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004396:	2b01      	cmp	r3, #1
 8004398:	d101      	bne.n	800439e <HAL_PCD_EP_Open+0xaa>
 800439a:	2302      	movs	r3, #2
 800439c:	e00e      	b.n	80043bc <HAL_PCD_EP_Open+0xc8>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68f9      	ldr	r1, [r7, #12]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f002 fca1 	bl	8006cf4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80043ba:	7afb      	ldrb	r3, [r7, #11]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	460b      	mov	r3, r1
 80043ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	da0f      	bge.n	80043f8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043d8:	78fb      	ldrb	r3, [r7, #3]
 80043da:	f003 020f 	and.w	r2, r3, #15
 80043de:	4613      	mov	r3, r2
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	1a9b      	subs	r3, r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	3338      	adds	r3, #56	; 0x38
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	4413      	add	r3, r2
 80043ec:	3304      	adds	r3, #4
 80043ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2201      	movs	r2, #1
 80043f4:	705a      	strb	r2, [r3, #1]
 80043f6:	e00f      	b.n	8004418 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	f003 020f 	and.w	r2, r3, #15
 80043fe:	4613      	mov	r3, r2
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	4413      	add	r3, r2
 800440e:	3304      	adds	r3, #4
 8004410:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004418:	78fb      	ldrb	r3, [r7, #3]
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	b2da      	uxtb	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <HAL_PCD_EP_Close+0x6e>
 800442e:	2302      	movs	r3, #2
 8004430:	e00e      	b.n	8004450 <HAL_PCD_EP_Close+0x8c>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68f9      	ldr	r1, [r7, #12]
 8004440:	4618      	mov	r0, r3
 8004442:	f002 fcdf 	bl	8006e04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	607a      	str	r2, [r7, #4]
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	460b      	mov	r3, r1
 8004466:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004468:	7afb      	ldrb	r3, [r7, #11]
 800446a:	f003 020f 	and.w	r2, r3, #15
 800446e:	4613      	mov	r3, r2
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	1a9b      	subs	r3, r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	4413      	add	r3, r2
 800447e:	3304      	adds	r3, #4
 8004480:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2200      	movs	r2, #0
 8004492:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	2200      	movs	r2, #0
 8004498:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800449a:	7afb      	ldrb	r3, [r7, #11]
 800449c:	f003 030f 	and.w	r3, r3, #15
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d102      	bne.n	80044b4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044b4:	7afb      	ldrb	r3, [r7, #11]
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d109      	bne.n	80044d2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	461a      	mov	r2, r3
 80044ca:	6979      	ldr	r1, [r7, #20]
 80044cc:	f002 ffba 	bl	8007444 <USB_EP0StartXfer>
 80044d0:	e008      	b.n	80044e4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6818      	ldr	r0, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	461a      	mov	r2, r3
 80044de:	6979      	ldr	r1, [r7, #20]
 80044e0:	f002 fd6c 	bl	8006fbc <USB_EPStartXfer>
  }

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3718      	adds	r7, #24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
 80044f6:	460b      	mov	r3, r1
 80044f8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80044fa:	78fb      	ldrb	r3, [r7, #3]
 80044fc:	f003 020f 	and.w	r2, r3, #15
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	4613      	mov	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	1a9b      	subs	r3, r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	440b      	add	r3, r1
 800450c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004510:	681b      	ldr	r3, [r3, #0]
}
 8004512:	4618      	mov	r0, r3
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b086      	sub	sp, #24
 8004522:	af00      	add	r7, sp, #0
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	607a      	str	r2, [r7, #4]
 8004528:	603b      	str	r3, [r7, #0]
 800452a:	460b      	mov	r3, r1
 800452c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800452e:	7afb      	ldrb	r3, [r7, #11]
 8004530:	f003 020f 	and.w	r2, r3, #15
 8004534:	4613      	mov	r3, r2
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	1a9b      	subs	r3, r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	3338      	adds	r3, #56	; 0x38
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	4413      	add	r3, r2
 8004542:	3304      	adds	r3, #4
 8004544:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2200      	movs	r2, #0
 8004556:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2201      	movs	r2, #1
 800455c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800455e:	7afb      	ldrb	r3, [r7, #11]
 8004560:	f003 030f 	and.w	r3, r3, #15
 8004564:	b2da      	uxtb	r2, r3
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d102      	bne.n	8004578 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004578:	7afb      	ldrb	r3, [r7, #11]
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	2b00      	cmp	r3, #0
 8004580:	d109      	bne.n	8004596 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	461a      	mov	r2, r3
 800458e:	6979      	ldr	r1, [r7, #20]
 8004590:	f002 ff58 	bl	8007444 <USB_EP0StartXfer>
 8004594:	e008      	b.n	80045a8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	461a      	mov	r2, r3
 80045a2:	6979      	ldr	r1, [r7, #20]
 80045a4:	f002 fd0a 	bl	8006fbc <USB_EPStartXfer>
  }

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	460b      	mov	r3, r1
 80045bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80045be:	78fb      	ldrb	r3, [r7, #3]
 80045c0:	f003 020f 	and.w	r2, r3, #15
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d901      	bls.n	80045d0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e050      	b.n	8004672 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	da0f      	bge.n	80045f8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045d8:	78fb      	ldrb	r3, [r7, #3]
 80045da:	f003 020f 	and.w	r2, r3, #15
 80045de:	4613      	mov	r3, r2
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	1a9b      	subs	r3, r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	3338      	adds	r3, #56	; 0x38
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	4413      	add	r3, r2
 80045ec:	3304      	adds	r3, #4
 80045ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2201      	movs	r2, #1
 80045f4:	705a      	strb	r2, [r3, #1]
 80045f6:	e00d      	b.n	8004614 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045f8:	78fa      	ldrb	r2, [r7, #3]
 80045fa:	4613      	mov	r3, r2
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	1a9b      	subs	r3, r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	4413      	add	r3, r2
 800460a:	3304      	adds	r3, #4
 800460c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2201      	movs	r2, #1
 8004618:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800461a:	78fb      	ldrb	r3, [r7, #3]
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	b2da      	uxtb	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800462c:	2b01      	cmp	r3, #1
 800462e:	d101      	bne.n	8004634 <HAL_PCD_EP_SetStall+0x82>
 8004630:	2302      	movs	r3, #2
 8004632:	e01e      	b.n	8004672 <HAL_PCD_EP_SetStall+0xc0>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68f9      	ldr	r1, [r7, #12]
 8004642:	4618      	mov	r0, r3
 8004644:	f003 f8e7 	bl	8007816 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004648:	78fb      	ldrb	r3, [r7, #3]
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10a      	bne.n	8004668 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6818      	ldr	r0, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	b2d9      	uxtb	r1, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004662:	461a      	mov	r2, r3
 8004664:	f003 fad8 	bl	8007c18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b084      	sub	sp, #16
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	460b      	mov	r3, r1
 8004684:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004686:	78fb      	ldrb	r3, [r7, #3]
 8004688:	f003 020f 	and.w	r2, r3, #15
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	429a      	cmp	r2, r3
 8004692:	d901      	bls.n	8004698 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e042      	b.n	800471e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004698:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800469c:	2b00      	cmp	r3, #0
 800469e:	da0f      	bge.n	80046c0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046a0:	78fb      	ldrb	r3, [r7, #3]
 80046a2:	f003 020f 	and.w	r2, r3, #15
 80046a6:	4613      	mov	r3, r2
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	1a9b      	subs	r3, r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	3338      	adds	r3, #56	; 0x38
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	4413      	add	r3, r2
 80046b4:	3304      	adds	r3, #4
 80046b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2201      	movs	r2, #1
 80046bc:	705a      	strb	r2, [r3, #1]
 80046be:	e00f      	b.n	80046e0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	f003 020f 	and.w	r2, r3, #15
 80046c6:	4613      	mov	r3, r2
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	1a9b      	subs	r3, r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	4413      	add	r3, r2
 80046d6:	3304      	adds	r3, #4
 80046d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046e6:	78fb      	ldrb	r3, [r7, #3]
 80046e8:	f003 030f 	and.w	r3, r3, #15
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d101      	bne.n	8004700 <HAL_PCD_EP_ClrStall+0x86>
 80046fc:	2302      	movs	r3, #2
 80046fe:	e00e      	b.n	800471e <HAL_PCD_EP_ClrStall+0xa4>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68f9      	ldr	r1, [r7, #12]
 800470e:	4618      	mov	r0, r3
 8004710:	f003 f8ef 	bl	80078f2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b08a      	sub	sp, #40	; 0x28
 800472a:	af02      	add	r7, sp, #8
 800472c:	6078      	str	r0, [r7, #4]
 800472e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	4613      	mov	r3, r2
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	1a9b      	subs	r3, r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	3338      	adds	r3, #56	; 0x38
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	4413      	add	r3, r2
 800474a:	3304      	adds	r3, #4
 800474c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	699a      	ldr	r2, [r3, #24]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	429a      	cmp	r2, r3
 8004758:	d901      	bls.n	800475e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e06c      	b.n	8004838 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	695a      	ldr	r2, [r3, #20]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	69fa      	ldr	r2, [r7, #28]
 8004770:	429a      	cmp	r2, r3
 8004772:	d902      	bls.n	800477a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	3303      	adds	r3, #3
 800477e:	089b      	lsrs	r3, r3, #2
 8004780:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004782:	e02b      	b.n	80047dc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	695a      	ldr	r2, [r3, #20]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	69fa      	ldr	r2, [r7, #28]
 8004796:	429a      	cmp	r2, r3
 8004798:	d902      	bls.n	80047a0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	3303      	adds	r3, #3
 80047a4:	089b      	lsrs	r3, r3, #2
 80047a6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	68d9      	ldr	r1, [r3, #12]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	4603      	mov	r3, r0
 80047be:	6978      	ldr	r0, [r7, #20]
 80047c0:	f002 ff93 	bl	80076ea <USB_WritePacket>

    ep->xfer_buff  += len;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	441a      	add	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	699a      	ldr	r2, [r3, #24]
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	441a      	add	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d809      	bhi.n	8004806 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d203      	bcs.n	8004806 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1be      	bne.n	8004784 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	695a      	ldr	r2, [r3, #20]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	429a      	cmp	r2, r3
 8004810:	d811      	bhi.n	8004836 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	f003 030f 	and.w	r3, r3, #15
 8004818:	2201      	movs	r2, #1
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	43db      	mvns	r3, r3
 800482c:	6939      	ldr	r1, [r7, #16]
 800482e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004832:	4013      	ands	r3, r2
 8004834:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3720      	adds	r7, #32
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	333c      	adds	r3, #60	; 0x3c
 8004858:	3304      	adds	r3, #4
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	2b01      	cmp	r3, #1
 8004874:	f040 80a0 	bne.w	80049b8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b00      	cmp	r3, #0
 8004880:	d015      	beq.n	80048ae <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4a72      	ldr	r2, [pc, #456]	; (8004a50 <PCD_EP_OutXfrComplete_int+0x210>)
 8004886:	4293      	cmp	r3, r2
 8004888:	f240 80dd 	bls.w	8004a46 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 80d7 	beq.w	8004a46 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a4:	461a      	mov	r2, r3
 80048a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048aa:	6093      	str	r3, [r2, #8]
 80048ac:	e0cb      	b.n	8004a46 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f003 0320 	and.w	r3, r3, #32
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d009      	beq.n	80048cc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c4:	461a      	mov	r2, r3
 80048c6:	2320      	movs	r3, #32
 80048c8:	6093      	str	r3, [r2, #8]
 80048ca:	e0bc      	b.n	8004a46 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f040 80b7 	bne.w	8004a46 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4a5d      	ldr	r2, [pc, #372]	; (8004a50 <PCD_EP_OutXfrComplete_int+0x210>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d90f      	bls.n	8004900 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f6:	461a      	mov	r2, r3
 80048f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048fc:	6093      	str	r3, [r2, #8]
 80048fe:	e0a2      	b.n	8004a46 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004900:	6879      	ldr	r1, [r7, #4]
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	4613      	mov	r3, r2
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	1a9b      	subs	r3, r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	440b      	add	r3, r1
 800490e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004912:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	0159      	lsls	r1, r3, #5
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	440b      	add	r3, r1
 800491c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004926:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	4613      	mov	r3, r2
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	1a9b      	subs	r3, r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4403      	add	r3, r0
 8004936:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800493a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	4613      	mov	r3, r2
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	1a9b      	subs	r3, r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	440b      	add	r3, r1
 800494a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800494e:	6819      	ldr	r1, [r3, #0]
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	4613      	mov	r3, r2
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	1a9b      	subs	r3, r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4403      	add	r3, r0
 800495e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4419      	add	r1, r3
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	4613      	mov	r3, r2
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	1a9b      	subs	r3, r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4403      	add	r3, r0
 8004974:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004978:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d114      	bne.n	80049aa <PCD_EP_OutXfrComplete_int+0x16a>
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	4613      	mov	r3, r2
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	1a9b      	subs	r3, r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	440b      	add	r3, r1
 800498e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d108      	bne.n	80049aa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6818      	ldr	r0, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80049a2:	461a      	mov	r2, r3
 80049a4:	2101      	movs	r1, #1
 80049a6:	f003 f937 	bl	8007c18 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	4619      	mov	r1, r3
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f005 f97d 	bl	8009cb0 <HAL_PCD_DataOutStageCallback>
 80049b6:	e046      	b.n	8004a46 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4a26      	ldr	r2, [pc, #152]	; (8004a54 <PCD_EP_OutXfrComplete_int+0x214>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d124      	bne.n	8004a0a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d6:	461a      	mov	r2, r3
 80049d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049dc:	6093      	str	r3, [r2, #8]
 80049de:	e032      	b.n	8004a46 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f003 0320 	and.w	r3, r3, #32
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d008      	beq.n	80049fc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f6:	461a      	mov	r2, r3
 80049f8:	2320      	movs	r3, #32
 80049fa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	4619      	mov	r1, r3
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f005 f954 	bl	8009cb0 <HAL_PCD_DataOutStageCallback>
 8004a08:	e01d      	b.n	8004a46 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d114      	bne.n	8004a3a <PCD_EP_OutXfrComplete_int+0x1fa>
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	4613      	mov	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	1a9b      	subs	r3, r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d108      	bne.n	8004a3a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6818      	ldr	r0, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a32:	461a      	mov	r2, r3
 8004a34:	2100      	movs	r1, #0
 8004a36:	f003 f8ef 	bl	8007c18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	4619      	mov	r1, r3
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f005 f935 	bl	8009cb0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	4f54300a 	.word	0x4f54300a
 8004a54:	4f54310a 	.word	0x4f54310a

08004a58 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	333c      	adds	r3, #60	; 0x3c
 8004a70:	3304      	adds	r3, #4
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	015a      	lsls	r2, r3, #5
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4a15      	ldr	r2, [pc, #84]	; (8004ae0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d90e      	bls.n	8004aac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d009      	beq.n	8004aac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aaa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f005 f8ed 	bl	8009c8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4a0a      	ldr	r2, [pc, #40]	; (8004ae0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d90c      	bls.n	8004ad4 <PCD_EP_OutSetupPacket_int+0x7c>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d108      	bne.n	8004ad4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6818      	ldr	r0, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004acc:	461a      	mov	r2, r3
 8004ace:	2101      	movs	r1, #1
 8004ad0:	f003 f8a2 	bl	8007c18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3718      	adds	r7, #24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	4f54300a 	.word	0x4f54300a

08004ae4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	70fb      	strb	r3, [r7, #3]
 8004af0:	4613      	mov	r3, r2
 8004af2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004afc:	78fb      	ldrb	r3, [r7, #3]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d107      	bne.n	8004b12 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004b02:	883b      	ldrh	r3, [r7, #0]
 8004b04:	0419      	lsls	r1, r3, #16
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	629a      	str	r2, [r3, #40]	; 0x28
 8004b10:	e028      	b.n	8004b64 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b18:	0c1b      	lsrs	r3, r3, #16
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b20:	2300      	movs	r3, #0
 8004b22:	73fb      	strb	r3, [r7, #15]
 8004b24:	e00d      	b.n	8004b42 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
 8004b2c:	3340      	adds	r3, #64	; 0x40
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	0c1b      	lsrs	r3, r3, #16
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	4413      	add	r3, r2
 8004b3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	73fb      	strb	r3, [r7, #15]
 8004b42:	7bfa      	ldrb	r2, [r7, #15]
 8004b44:	78fb      	ldrb	r3, [r7, #3]
 8004b46:	3b01      	subs	r3, #1
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d3ec      	bcc.n	8004b26 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004b4c:	883b      	ldrh	r3, [r7, #0]
 8004b4e:	0418      	lsls	r0, r3, #16
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6819      	ldr	r1, [r3, #0]
 8004b54:	78fb      	ldrb	r3, [r7, #3]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	4302      	orrs	r2, r0
 8004b5c:	3340      	adds	r3, #64	; 0x40
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	887a      	ldrh	r2, [r7, #2]
 8004b84:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e264      	b.n	8005088 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d075      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bca:	4ba3      	ldr	r3, [pc, #652]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 030c 	and.w	r3, r3, #12
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d00c      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bd6:	4ba0      	ldr	r3, [pc, #640]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d112      	bne.n	8004c08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004be2:	4b9d      	ldr	r3, [pc, #628]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bee:	d10b      	bne.n	8004c08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf0:	4b99      	ldr	r3, [pc, #612]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d05b      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x108>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d157      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e23f      	b.n	8005088 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c10:	d106      	bne.n	8004c20 <HAL_RCC_OscConfig+0x74>
 8004c12:	4b91      	ldr	r3, [pc, #580]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a90      	ldr	r2, [pc, #576]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	e01d      	b.n	8004c5c <HAL_RCC_OscConfig+0xb0>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c28:	d10c      	bne.n	8004c44 <HAL_RCC_OscConfig+0x98>
 8004c2a:	4b8b      	ldr	r3, [pc, #556]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a8a      	ldr	r2, [pc, #552]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	4b88      	ldr	r3, [pc, #544]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a87      	ldr	r2, [pc, #540]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	e00b      	b.n	8004c5c <HAL_RCC_OscConfig+0xb0>
 8004c44:	4b84      	ldr	r3, [pc, #528]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a83      	ldr	r2, [pc, #524]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	4b81      	ldr	r3, [pc, #516]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a80      	ldr	r2, [pc, #512]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d013      	beq.n	8004c8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c64:	f7fd fb6c 	bl	8002340 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c6c:	f7fd fb68 	bl	8002340 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b64      	cmp	r3, #100	; 0x64
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e204      	b.n	8005088 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7e:	4b76      	ldr	r3, [pc, #472]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0f0      	beq.n	8004c6c <HAL_RCC_OscConfig+0xc0>
 8004c8a:	e014      	b.n	8004cb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8c:	f7fd fb58 	bl	8002340 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c94:	f7fd fb54 	bl	8002340 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b64      	cmp	r3, #100	; 0x64
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e1f0      	b.n	8005088 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ca6:	4b6c      	ldr	r3, [pc, #432]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f0      	bne.n	8004c94 <HAL_RCC_OscConfig+0xe8>
 8004cb2:	e000      	b.n	8004cb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d063      	beq.n	8004d8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cc2:	4b65      	ldr	r3, [pc, #404]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 030c 	and.w	r3, r3, #12
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00b      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cce:	4b62      	ldr	r3, [pc, #392]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d11c      	bne.n	8004d14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cda:	4b5f      	ldr	r3, [pc, #380]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d116      	bne.n	8004d14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ce6:	4b5c      	ldr	r3, [pc, #368]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d005      	beq.n	8004cfe <HAL_RCC_OscConfig+0x152>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d001      	beq.n	8004cfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e1c4      	b.n	8005088 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cfe:	4b56      	ldr	r3, [pc, #344]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	4952      	ldr	r1, [pc, #328]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d12:	e03a      	b.n	8004d8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d020      	beq.n	8004d5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d1c:	4b4f      	ldr	r3, [pc, #316]	; (8004e5c <HAL_RCC_OscConfig+0x2b0>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d22:	f7fd fb0d 	bl	8002340 <HAL_GetTick>
 8004d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d28:	e008      	b.n	8004d3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d2a:	f7fd fb09 	bl	8002340 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e1a5      	b.n	8005088 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d3c:	4b46      	ldr	r3, [pc, #280]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0f0      	beq.n	8004d2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d48:	4b43      	ldr	r3, [pc, #268]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	4940      	ldr	r1, [pc, #256]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	600b      	str	r3, [r1, #0]
 8004d5c:	e015      	b.n	8004d8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d5e:	4b3f      	ldr	r3, [pc, #252]	; (8004e5c <HAL_RCC_OscConfig+0x2b0>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d64:	f7fd faec 	bl	8002340 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d6c:	f7fd fae8 	bl	8002340 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e184      	b.n	8005088 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d7e:	4b36      	ldr	r3, [pc, #216]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f0      	bne.n	8004d6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0308 	and.w	r3, r3, #8
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d030      	beq.n	8004df8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d016      	beq.n	8004dcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d9e:	4b30      	ldr	r3, [pc, #192]	; (8004e60 <HAL_RCC_OscConfig+0x2b4>)
 8004da0:	2201      	movs	r2, #1
 8004da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da4:	f7fd facc 	bl	8002340 <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dac:	f7fd fac8 	bl	8002340 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e164      	b.n	8005088 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dbe:	4b26      	ldr	r3, [pc, #152]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0f0      	beq.n	8004dac <HAL_RCC_OscConfig+0x200>
 8004dca:	e015      	b.n	8004df8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dcc:	4b24      	ldr	r3, [pc, #144]	; (8004e60 <HAL_RCC_OscConfig+0x2b4>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd2:	f7fd fab5 	bl	8002340 <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dd8:	e008      	b.n	8004dec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dda:	f7fd fab1 	bl	8002340 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d901      	bls.n	8004dec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e14d      	b.n	8005088 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dec:	4b1a      	ldr	r3, [pc, #104]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1f0      	bne.n	8004dda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 80a0 	beq.w	8004f46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e06:	2300      	movs	r3, #0
 8004e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e0a:	4b13      	ldr	r3, [pc, #76]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10f      	bne.n	8004e36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e16:	2300      	movs	r3, #0
 8004e18:	60bb      	str	r3, [r7, #8]
 8004e1a:	4b0f      	ldr	r3, [pc, #60]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	4a0e      	ldr	r2, [pc, #56]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e24:	6413      	str	r3, [r2, #64]	; 0x40
 8004e26:	4b0c      	ldr	r3, [pc, #48]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e2e:	60bb      	str	r3, [r7, #8]
 8004e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e32:	2301      	movs	r3, #1
 8004e34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e36:	4b0b      	ldr	r3, [pc, #44]	; (8004e64 <HAL_RCC_OscConfig+0x2b8>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d121      	bne.n	8004e86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e42:	4b08      	ldr	r3, [pc, #32]	; (8004e64 <HAL_RCC_OscConfig+0x2b8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a07      	ldr	r2, [pc, #28]	; (8004e64 <HAL_RCC_OscConfig+0x2b8>)
 8004e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e4e:	f7fd fa77 	bl	8002340 <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e54:	e011      	b.n	8004e7a <HAL_RCC_OscConfig+0x2ce>
 8004e56:	bf00      	nop
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	42470000 	.word	0x42470000
 8004e60:	42470e80 	.word	0x42470e80
 8004e64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e68:	f7fd fa6a 	bl	8002340 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e106      	b.n	8005088 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e7a:	4b85      	ldr	r3, [pc, #532]	; (8005090 <HAL_RCC_OscConfig+0x4e4>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f0      	beq.n	8004e68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d106      	bne.n	8004e9c <HAL_RCC_OscConfig+0x2f0>
 8004e8e:	4b81      	ldr	r3, [pc, #516]	; (8005094 <HAL_RCC_OscConfig+0x4e8>)
 8004e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e92:	4a80      	ldr	r2, [pc, #512]	; (8005094 <HAL_RCC_OscConfig+0x4e8>)
 8004e94:	f043 0301 	orr.w	r3, r3, #1
 8004e98:	6713      	str	r3, [r2, #112]	; 0x70
 8004e9a:	e01c      	b.n	8004ed6 <HAL_RCC_OscConfig+0x32a>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	2b05      	cmp	r3, #5
 8004ea2:	d10c      	bne.n	8004ebe <HAL_RCC_OscConfig+0x312>
 8004ea4:	4b7b      	ldr	r3, [pc, #492]	; (8005094 <HAL_RCC_OscConfig+0x4e8>)
 8004ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea8:	4a7a      	ldr	r2, [pc, #488]	; (8005094 <HAL_RCC_OscConfig+0x4e8>)
 8004eaa:	f043 0304 	orr.w	r3, r3, #4
 8004eae:	6713      	str	r3, [r2, #112]	; 0x70
 8004eb0:	4b78      	ldr	r3, [pc, #480]	; (8005094 <HAL_RCC_OscConfig+0x4e8>)
 8004eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb4:	4a77      	ldr	r2, [pc, #476]	; (8005094 <HAL_RCC_OscConfig+0x4e8>)
 8004eb6:	f043 0301 	orr.w	r3, r3, #1
 8004eba:	6713      	str	r3, [r2, #112]	; 0x70
 8004ebc:	e00b      	b.n	8004ed6 <HAL_RCC_OscConfig+0x32a>
 8004ebe:	4b75      	ldr	r3, [pc, #468]	; (8005094 <HAL_RCC_OscConfig+0x4e8>)
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec2:	4a74      	ldr	r2, [pc, #464]	; (8005094 <HAL_RCC_OscConfig+0x4e8>)
 8004ec4:	f023 0301 	bic.w	r3, r3, #1
 8004ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8004eca:	4b72      	ldr	r3, [pc, #456]	; (8005094 <HAL_RCC_OscConfig+0x4e8>)
 8004ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ece:	4a71      	ldr	r2, [pc, #452]	; (8005094 <HAL_RCC_OscConfig+0x4e8>)
 8004ed0:	f023 0304 	bic.w	r3, r3, #4
 8004ed4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d015      	beq.n	8004f0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ede:	f7fd fa2f 	bl	8002340 <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee4:	e00a      	b.n	8004efc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ee6:	f7fd fa2b 	bl	8002340 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d901      	bls.n	8004efc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e0c5      	b.n	8005088 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004efc:	4b65      	ldr	r3, [pc, #404]	; (8005094 <HAL_RCC_OscConfig+0x4e8>)
 8004efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0ee      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x33a>
 8004f08:	e014      	b.n	8004f34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f0a:	f7fd fa19 	bl	8002340 <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f10:	e00a      	b.n	8004f28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f12:	f7fd fa15 	bl	8002340 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e0af      	b.n	8005088 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f28:	4b5a      	ldr	r3, [pc, #360]	; (8005094 <HAL_RCC_OscConfig+0x4e8>)
 8004f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1ee      	bne.n	8004f12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f34:	7dfb      	ldrb	r3, [r7, #23]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d105      	bne.n	8004f46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f3a:	4b56      	ldr	r3, [pc, #344]	; (8005094 <HAL_RCC_OscConfig+0x4e8>)
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	4a55      	ldr	r2, [pc, #340]	; (8005094 <HAL_RCC_OscConfig+0x4e8>)
 8004f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 809b 	beq.w	8005086 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f50:	4b50      	ldr	r3, [pc, #320]	; (8005094 <HAL_RCC_OscConfig+0x4e8>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f003 030c 	and.w	r3, r3, #12
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d05c      	beq.n	8005016 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d141      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f64:	4b4c      	ldr	r3, [pc, #304]	; (8005098 <HAL_RCC_OscConfig+0x4ec>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f6a:	f7fd f9e9 	bl	8002340 <HAL_GetTick>
 8004f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f70:	e008      	b.n	8004f84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f72:	f7fd f9e5 	bl	8002340 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e081      	b.n	8005088 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f84:	4b43      	ldr	r3, [pc, #268]	; (8005094 <HAL_RCC_OscConfig+0x4e8>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1f0      	bne.n	8004f72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	69da      	ldr	r2, [r3, #28]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	019b      	lsls	r3, r3, #6
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa6:	085b      	lsrs	r3, r3, #1
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	041b      	lsls	r3, r3, #16
 8004fac:	431a      	orrs	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb2:	061b      	lsls	r3, r3, #24
 8004fb4:	4937      	ldr	r1, [pc, #220]	; (8005094 <HAL_RCC_OscConfig+0x4e8>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fba:	4b37      	ldr	r3, [pc, #220]	; (8005098 <HAL_RCC_OscConfig+0x4ec>)
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc0:	f7fd f9be 	bl	8002340 <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fc8:	f7fd f9ba 	bl	8002340 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e056      	b.n	8005088 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fda:	4b2e      	ldr	r3, [pc, #184]	; (8005094 <HAL_RCC_OscConfig+0x4e8>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d0f0      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x41c>
 8004fe6:	e04e      	b.n	8005086 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fe8:	4b2b      	ldr	r3, [pc, #172]	; (8005098 <HAL_RCC_OscConfig+0x4ec>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fee:	f7fd f9a7 	bl	8002340 <HAL_GetTick>
 8004ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ff4:	e008      	b.n	8005008 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ff6:	f7fd f9a3 	bl	8002340 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e03f      	b.n	8005088 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005008:	4b22      	ldr	r3, [pc, #136]	; (8005094 <HAL_RCC_OscConfig+0x4e8>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1f0      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x44a>
 8005014:	e037      	b.n	8005086 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d101      	bne.n	8005022 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e032      	b.n	8005088 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005022:	4b1c      	ldr	r3, [pc, #112]	; (8005094 <HAL_RCC_OscConfig+0x4e8>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d028      	beq.n	8005082 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800503a:	429a      	cmp	r2, r3
 800503c:	d121      	bne.n	8005082 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005048:	429a      	cmp	r2, r3
 800504a:	d11a      	bne.n	8005082 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005052:	4013      	ands	r3, r2
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005058:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800505a:	4293      	cmp	r3, r2
 800505c:	d111      	bne.n	8005082 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005068:	085b      	lsrs	r3, r3, #1
 800506a:	3b01      	subs	r3, #1
 800506c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800506e:	429a      	cmp	r2, r3
 8005070:	d107      	bne.n	8005082 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800507e:	429a      	cmp	r2, r3
 8005080:	d001      	beq.n	8005086 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	40007000 	.word	0x40007000
 8005094:	40023800 	.word	0x40023800
 8005098:	42470060 	.word	0x42470060

0800509c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e0cc      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050b0:	4b68      	ldr	r3, [pc, #416]	; (8005254 <HAL_RCC_ClockConfig+0x1b8>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d90c      	bls.n	80050d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050be:	4b65      	ldr	r3, [pc, #404]	; (8005254 <HAL_RCC_ClockConfig+0x1b8>)
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c6:	4b63      	ldr	r3, [pc, #396]	; (8005254 <HAL_RCC_ClockConfig+0x1b8>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0307 	and.w	r3, r3, #7
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d001      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e0b8      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d020      	beq.n	8005126 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d005      	beq.n	80050fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050f0:	4b59      	ldr	r3, [pc, #356]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	4a58      	ldr	r2, [pc, #352]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 80050f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0308 	and.w	r3, r3, #8
 8005104:	2b00      	cmp	r3, #0
 8005106:	d005      	beq.n	8005114 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005108:	4b53      	ldr	r3, [pc, #332]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	4a52      	ldr	r2, [pc, #328]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005112:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005114:	4b50      	ldr	r3, [pc, #320]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	494d      	ldr	r1, [pc, #308]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 8005122:	4313      	orrs	r3, r2
 8005124:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d044      	beq.n	80051bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d107      	bne.n	800514a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800513a:	4b47      	ldr	r3, [pc, #284]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d119      	bne.n	800517a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e07f      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2b02      	cmp	r3, #2
 8005150:	d003      	beq.n	800515a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005156:	2b03      	cmp	r3, #3
 8005158:	d107      	bne.n	800516a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800515a:	4b3f      	ldr	r3, [pc, #252]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d109      	bne.n	800517a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e06f      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800516a:	4b3b      	ldr	r3, [pc, #236]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e067      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800517a:	4b37      	ldr	r3, [pc, #220]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f023 0203 	bic.w	r2, r3, #3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	4934      	ldr	r1, [pc, #208]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 8005188:	4313      	orrs	r3, r2
 800518a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800518c:	f7fd f8d8 	bl	8002340 <HAL_GetTick>
 8005190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005192:	e00a      	b.n	80051aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005194:	f7fd f8d4 	bl	8002340 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e04f      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051aa:	4b2b      	ldr	r3, [pc, #172]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 020c 	and.w	r2, r3, #12
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d1eb      	bne.n	8005194 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051bc:	4b25      	ldr	r3, [pc, #148]	; (8005254 <HAL_RCC_ClockConfig+0x1b8>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d20c      	bcs.n	80051e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ca:	4b22      	ldr	r3, [pc, #136]	; (8005254 <HAL_RCC_ClockConfig+0x1b8>)
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051d2:	4b20      	ldr	r3, [pc, #128]	; (8005254 <HAL_RCC_ClockConfig+0x1b8>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d001      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e032      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d008      	beq.n	8005202 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051f0:	4b19      	ldr	r3, [pc, #100]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	4916      	ldr	r1, [pc, #88]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0308 	and.w	r3, r3, #8
 800520a:	2b00      	cmp	r3, #0
 800520c:	d009      	beq.n	8005222 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800520e:	4b12      	ldr	r3, [pc, #72]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	490e      	ldr	r1, [pc, #56]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800521e:	4313      	orrs	r3, r2
 8005220:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005222:	f000 f821 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 8005226:	4602      	mov	r2, r0
 8005228:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	091b      	lsrs	r3, r3, #4
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	490a      	ldr	r1, [pc, #40]	; (800525c <HAL_RCC_ClockConfig+0x1c0>)
 8005234:	5ccb      	ldrb	r3, [r1, r3]
 8005236:	fa22 f303 	lsr.w	r3, r2, r3
 800523a:	4a09      	ldr	r2, [pc, #36]	; (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 800523c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800523e:	4b09      	ldr	r3, [pc, #36]	; (8005264 <HAL_RCC_ClockConfig+0x1c8>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4618      	mov	r0, r3
 8005244:	f7fd f838 	bl	80022b8 <HAL_InitTick>

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40023c00 	.word	0x40023c00
 8005258:	40023800 	.word	0x40023800
 800525c:	0800d0dc 	.word	0x0800d0dc
 8005260:	20000010 	.word	0x20000010
 8005264:	20000014 	.word	0x20000014

08005268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005268:	b5b0      	push	{r4, r5, r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800526e:	2100      	movs	r1, #0
 8005270:	6079      	str	r1, [r7, #4]
 8005272:	2100      	movs	r1, #0
 8005274:	60f9      	str	r1, [r7, #12]
 8005276:	2100      	movs	r1, #0
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800527a:	2100      	movs	r1, #0
 800527c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800527e:	4952      	ldr	r1, [pc, #328]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005280:	6889      	ldr	r1, [r1, #8]
 8005282:	f001 010c 	and.w	r1, r1, #12
 8005286:	2908      	cmp	r1, #8
 8005288:	d00d      	beq.n	80052a6 <HAL_RCC_GetSysClockFreq+0x3e>
 800528a:	2908      	cmp	r1, #8
 800528c:	f200 8094 	bhi.w	80053b8 <HAL_RCC_GetSysClockFreq+0x150>
 8005290:	2900      	cmp	r1, #0
 8005292:	d002      	beq.n	800529a <HAL_RCC_GetSysClockFreq+0x32>
 8005294:	2904      	cmp	r1, #4
 8005296:	d003      	beq.n	80052a0 <HAL_RCC_GetSysClockFreq+0x38>
 8005298:	e08e      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800529a:	4b4c      	ldr	r3, [pc, #304]	; (80053cc <HAL_RCC_GetSysClockFreq+0x164>)
 800529c:	60bb      	str	r3, [r7, #8]
       break;
 800529e:	e08e      	b.n	80053be <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052a0:	4b4b      	ldr	r3, [pc, #300]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x168>)
 80052a2:	60bb      	str	r3, [r7, #8]
      break;
 80052a4:	e08b      	b.n	80053be <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052a6:	4948      	ldr	r1, [pc, #288]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80052a8:	6849      	ldr	r1, [r1, #4]
 80052aa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80052ae:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052b0:	4945      	ldr	r1, [pc, #276]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80052b2:	6849      	ldr	r1, [r1, #4]
 80052b4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80052b8:	2900      	cmp	r1, #0
 80052ba:	d024      	beq.n	8005306 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052bc:	4942      	ldr	r1, [pc, #264]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80052be:	6849      	ldr	r1, [r1, #4]
 80052c0:	0989      	lsrs	r1, r1, #6
 80052c2:	4608      	mov	r0, r1
 80052c4:	f04f 0100 	mov.w	r1, #0
 80052c8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80052cc:	f04f 0500 	mov.w	r5, #0
 80052d0:	ea00 0204 	and.w	r2, r0, r4
 80052d4:	ea01 0305 	and.w	r3, r1, r5
 80052d8:	493d      	ldr	r1, [pc, #244]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x168>)
 80052da:	fb01 f003 	mul.w	r0, r1, r3
 80052de:	2100      	movs	r1, #0
 80052e0:	fb01 f102 	mul.w	r1, r1, r2
 80052e4:	1844      	adds	r4, r0, r1
 80052e6:	493a      	ldr	r1, [pc, #232]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x168>)
 80052e8:	fba2 0101 	umull	r0, r1, r2, r1
 80052ec:	1863      	adds	r3, r4, r1
 80052ee:	4619      	mov	r1, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	461a      	mov	r2, r3
 80052f4:	f04f 0300 	mov.w	r3, #0
 80052f8:	f7fb fcb0 	bl	8000c5c <__aeabi_uldivmod>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	4613      	mov	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	e04a      	b.n	800539c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005306:	4b30      	ldr	r3, [pc, #192]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	099b      	lsrs	r3, r3, #6
 800530c:	461a      	mov	r2, r3
 800530e:	f04f 0300 	mov.w	r3, #0
 8005312:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005316:	f04f 0100 	mov.w	r1, #0
 800531a:	ea02 0400 	and.w	r4, r2, r0
 800531e:	ea03 0501 	and.w	r5, r3, r1
 8005322:	4620      	mov	r0, r4
 8005324:	4629      	mov	r1, r5
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	f04f 0300 	mov.w	r3, #0
 800532e:	014b      	lsls	r3, r1, #5
 8005330:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005334:	0142      	lsls	r2, r0, #5
 8005336:	4610      	mov	r0, r2
 8005338:	4619      	mov	r1, r3
 800533a:	1b00      	subs	r0, r0, r4
 800533c:	eb61 0105 	sbc.w	r1, r1, r5
 8005340:	f04f 0200 	mov.w	r2, #0
 8005344:	f04f 0300 	mov.w	r3, #0
 8005348:	018b      	lsls	r3, r1, #6
 800534a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800534e:	0182      	lsls	r2, r0, #6
 8005350:	1a12      	subs	r2, r2, r0
 8005352:	eb63 0301 	sbc.w	r3, r3, r1
 8005356:	f04f 0000 	mov.w	r0, #0
 800535a:	f04f 0100 	mov.w	r1, #0
 800535e:	00d9      	lsls	r1, r3, #3
 8005360:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005364:	00d0      	lsls	r0, r2, #3
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	1912      	adds	r2, r2, r4
 800536c:	eb45 0303 	adc.w	r3, r5, r3
 8005370:	f04f 0000 	mov.w	r0, #0
 8005374:	f04f 0100 	mov.w	r1, #0
 8005378:	0299      	lsls	r1, r3, #10
 800537a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800537e:	0290      	lsls	r0, r2, #10
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	4610      	mov	r0, r2
 8005386:	4619      	mov	r1, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	461a      	mov	r2, r3
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	f7fb fc64 	bl	8000c5c <__aeabi_uldivmod>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4613      	mov	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800539c:	4b0a      	ldr	r3, [pc, #40]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x160>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	0c1b      	lsrs	r3, r3, #16
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	3301      	adds	r3, #1
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b4:	60bb      	str	r3, [r7, #8]
      break;
 80053b6:	e002      	b.n	80053be <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053b8:	4b04      	ldr	r3, [pc, #16]	; (80053cc <HAL_RCC_GetSysClockFreq+0x164>)
 80053ba:	60bb      	str	r3, [r7, #8]
      break;
 80053bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053be:	68bb      	ldr	r3, [r7, #8]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bdb0      	pop	{r4, r5, r7, pc}
 80053c8:	40023800 	.word	0x40023800
 80053cc:	00f42400 	.word	0x00f42400
 80053d0:	017d7840 	.word	0x017d7840

080053d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053d8:	4b03      	ldr	r3, [pc, #12]	; (80053e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80053da:	681b      	ldr	r3, [r3, #0]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	20000010 	.word	0x20000010

080053ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053f0:	f7ff fff0 	bl	80053d4 <HAL_RCC_GetHCLKFreq>
 80053f4:	4602      	mov	r2, r0
 80053f6:	4b05      	ldr	r3, [pc, #20]	; (800540c <HAL_RCC_GetPCLK1Freq+0x20>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	0a9b      	lsrs	r3, r3, #10
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	4903      	ldr	r1, [pc, #12]	; (8005410 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005402:	5ccb      	ldrb	r3, [r1, r3]
 8005404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005408:	4618      	mov	r0, r3
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40023800 	.word	0x40023800
 8005410:	0800d0ec 	.word	0x0800d0ec

08005414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e041      	b.n	80054aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d106      	bne.n	8005440 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7fc fddc 	bl	8001ff8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	3304      	adds	r3, #4
 8005450:	4619      	mov	r1, r3
 8005452:	4610      	mov	r0, r2
 8005454:	f000 fd6a 	bl	8005f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b082      	sub	sp, #8
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e041      	b.n	8005548 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d106      	bne.n	80054de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f839 	bl	8005550 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2202      	movs	r2, #2
 80054e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	3304      	adds	r3, #4
 80054ee:	4619      	mov	r1, r3
 80054f0:	4610      	mov	r0, r2
 80054f2:	f000 fd1b 	bl	8005f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3708      	adds	r7, #8
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d109      	bne.n	8005590 <HAL_TIM_PWM_Start_DMA+0x2c>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	bf0c      	ite	eq
 8005588:	2301      	moveq	r3, #1
 800558a:	2300      	movne	r3, #0
 800558c:	b2db      	uxtb	r3, r3
 800558e:	e022      	b.n	80055d6 <HAL_TIM_PWM_Start_DMA+0x72>
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b04      	cmp	r3, #4
 8005594:	d109      	bne.n	80055aa <HAL_TIM_PWM_Start_DMA+0x46>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	bf0c      	ite	eq
 80055a2:	2301      	moveq	r3, #1
 80055a4:	2300      	movne	r3, #0
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	e015      	b.n	80055d6 <HAL_TIM_PWM_Start_DMA+0x72>
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	d109      	bne.n	80055c4 <HAL_TIM_PWM_Start_DMA+0x60>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	bf0c      	ite	eq
 80055bc:	2301      	moveq	r3, #1
 80055be:	2300      	movne	r3, #0
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	e008      	b.n	80055d6 <HAL_TIM_PWM_Start_DMA+0x72>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	bf0c      	ite	eq
 80055d0:	2301      	moveq	r3, #1
 80055d2:	2300      	movne	r3, #0
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80055da:	2302      	movs	r3, #2
 80055dc:	e15d      	b.n	800589a <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d109      	bne.n	80055f8 <HAL_TIM_PWM_Start_DMA+0x94>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	bf0c      	ite	eq
 80055f0:	2301      	moveq	r3, #1
 80055f2:	2300      	movne	r3, #0
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	e022      	b.n	800563e <HAL_TIM_PWM_Start_DMA+0xda>
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2b04      	cmp	r3, #4
 80055fc:	d109      	bne.n	8005612 <HAL_TIM_PWM_Start_DMA+0xae>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b01      	cmp	r3, #1
 8005608:	bf0c      	ite	eq
 800560a:	2301      	moveq	r3, #1
 800560c:	2300      	movne	r3, #0
 800560e:	b2db      	uxtb	r3, r3
 8005610:	e015      	b.n	800563e <HAL_TIM_PWM_Start_DMA+0xda>
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b08      	cmp	r3, #8
 8005616:	d109      	bne.n	800562c <HAL_TIM_PWM_Start_DMA+0xc8>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b01      	cmp	r3, #1
 8005622:	bf0c      	ite	eq
 8005624:	2301      	moveq	r3, #1
 8005626:	2300      	movne	r3, #0
 8005628:	b2db      	uxtb	r3, r3
 800562a:	e008      	b.n	800563e <HAL_TIM_PWM_Start_DMA+0xda>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b01      	cmp	r3, #1
 8005636:	bf0c      	ite	eq
 8005638:	2301      	moveq	r3, #1
 800563a:	2300      	movne	r3, #0
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d024      	beq.n	800568c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d104      	bne.n	8005652 <HAL_TIM_PWM_Start_DMA+0xee>
 8005648:	887b      	ldrh	r3, [r7, #2]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e123      	b.n	800589a <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d104      	bne.n	8005662 <HAL_TIM_PWM_Start_DMA+0xfe>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005660:	e016      	b.n	8005690 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	2b04      	cmp	r3, #4
 8005666:	d104      	bne.n	8005672 <HAL_TIM_PWM_Start_DMA+0x10e>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005670:	e00e      	b.n	8005690 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b08      	cmp	r3, #8
 8005676:	d104      	bne.n	8005682 <HAL_TIM_PWM_Start_DMA+0x11e>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2202      	movs	r2, #2
 800567c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005680:	e006      	b.n	8005690 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2202      	movs	r2, #2
 8005686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800568a:	e001      	b.n	8005690 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e104      	b.n	800589a <HAL_TIM_PWM_Start_DMA+0x336>
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b0c      	cmp	r3, #12
 8005694:	f200 80ae 	bhi.w	80057f4 <HAL_TIM_PWM_Start_DMA+0x290>
 8005698:	a201      	add	r2, pc, #4	; (adr r2, 80056a0 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800569a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569e:	bf00      	nop
 80056a0:	080056d5 	.word	0x080056d5
 80056a4:	080057f5 	.word	0x080057f5
 80056a8:	080057f5 	.word	0x080057f5
 80056ac:	080057f5 	.word	0x080057f5
 80056b0:	0800571d 	.word	0x0800571d
 80056b4:	080057f5 	.word	0x080057f5
 80056b8:	080057f5 	.word	0x080057f5
 80056bc:	080057f5 	.word	0x080057f5
 80056c0:	08005765 	.word	0x08005765
 80056c4:	080057f5 	.word	0x080057f5
 80056c8:	080057f5 	.word	0x080057f5
 80056cc:	080057f5 	.word	0x080057f5
 80056d0:	080057ad 	.word	0x080057ad
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	4a72      	ldr	r2, [pc, #456]	; (80058a4 <HAL_TIM_PWM_Start_DMA+0x340>)
 80056da:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	4a71      	ldr	r2, [pc, #452]	; (80058a8 <HAL_TIM_PWM_Start_DMA+0x344>)
 80056e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	4a70      	ldr	r2, [pc, #448]	; (80058ac <HAL_TIM_PWM_Start_DMA+0x348>)
 80056ea:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80056f0:	6879      	ldr	r1, [r7, #4]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	3334      	adds	r3, #52	; 0x34
 80056f8:	461a      	mov	r2, r3
 80056fa:	887b      	ldrh	r3, [r7, #2]
 80056fc:	f7fd f810 	bl	8002720 <HAL_DMA_Start_IT>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e0c7      	b.n	800589a <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68da      	ldr	r2, [r3, #12]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005718:	60da      	str	r2, [r3, #12]
      break;
 800571a:	e06e      	b.n	80057fa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005720:	4a60      	ldr	r2, [pc, #384]	; (80058a4 <HAL_TIM_PWM_Start_DMA+0x340>)
 8005722:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005728:	4a5f      	ldr	r2, [pc, #380]	; (80058a8 <HAL_TIM_PWM_Start_DMA+0x344>)
 800572a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005730:	4a5e      	ldr	r2, [pc, #376]	; (80058ac <HAL_TIM_PWM_Start_DMA+0x348>)
 8005732:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3338      	adds	r3, #56	; 0x38
 8005740:	461a      	mov	r2, r3
 8005742:	887b      	ldrh	r3, [r7, #2]
 8005744:	f7fc ffec 	bl	8002720 <HAL_DMA_Start_IT>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e0a3      	b.n	800589a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68da      	ldr	r2, [r3, #12]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005760:	60da      	str	r2, [r3, #12]
      break;
 8005762:	e04a      	b.n	80057fa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	4a4e      	ldr	r2, [pc, #312]	; (80058a4 <HAL_TIM_PWM_Start_DMA+0x340>)
 800576a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005770:	4a4d      	ldr	r2, [pc, #308]	; (80058a8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8005772:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005778:	4a4c      	ldr	r2, [pc, #304]	; (80058ac <HAL_TIM_PWM_Start_DMA+0x348>)
 800577a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005780:	6879      	ldr	r1, [r7, #4]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	333c      	adds	r3, #60	; 0x3c
 8005788:	461a      	mov	r2, r3
 800578a:	887b      	ldrh	r3, [r7, #2]
 800578c:	f7fc ffc8 	bl	8002720 <HAL_DMA_Start_IT>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e07f      	b.n	800589a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68da      	ldr	r2, [r3, #12]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057a8:	60da      	str	r2, [r3, #12]
      break;
 80057aa:	e026      	b.n	80057fa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b0:	4a3c      	ldr	r2, [pc, #240]	; (80058a4 <HAL_TIM_PWM_Start_DMA+0x340>)
 80057b2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b8:	4a3b      	ldr	r2, [pc, #236]	; (80058a8 <HAL_TIM_PWM_Start_DMA+0x344>)
 80057ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c0:	4a3a      	ldr	r2, [pc, #232]	; (80058ac <HAL_TIM_PWM_Start_DMA+0x348>)
 80057c2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3340      	adds	r3, #64	; 0x40
 80057d0:	461a      	mov	r2, r3
 80057d2:	887b      	ldrh	r3, [r7, #2]
 80057d4:	f7fc ffa4 	bl	8002720 <HAL_DMA_Start_IT>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e05b      	b.n	800589a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68da      	ldr	r2, [r3, #12]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057f0:	60da      	str	r2, [r3, #12]
      break;
 80057f2:	e002      	b.n	80057fa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	75fb      	strb	r3, [r7, #23]
      break;
 80057f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80057fa:	7dfb      	ldrb	r3, [r7, #23]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d14b      	bne.n	8005898 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2201      	movs	r2, #1
 8005806:	68b9      	ldr	r1, [r7, #8]
 8005808:	4618      	mov	r0, r3
 800580a:	f000 fe35 	bl	8006478 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a27      	ldr	r2, [pc, #156]	; (80058b0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d107      	bne.n	8005828 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005826:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a20      	ldr	r2, [pc, #128]	; (80058b0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d018      	beq.n	8005864 <HAL_TIM_PWM_Start_DMA+0x300>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800583a:	d013      	beq.n	8005864 <HAL_TIM_PWM_Start_DMA+0x300>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a1c      	ldr	r2, [pc, #112]	; (80058b4 <HAL_TIM_PWM_Start_DMA+0x350>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d00e      	beq.n	8005864 <HAL_TIM_PWM_Start_DMA+0x300>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a1b      	ldr	r2, [pc, #108]	; (80058b8 <HAL_TIM_PWM_Start_DMA+0x354>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d009      	beq.n	8005864 <HAL_TIM_PWM_Start_DMA+0x300>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a19      	ldr	r2, [pc, #100]	; (80058bc <HAL_TIM_PWM_Start_DMA+0x358>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d004      	beq.n	8005864 <HAL_TIM_PWM_Start_DMA+0x300>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a18      	ldr	r2, [pc, #96]	; (80058c0 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d111      	bne.n	8005888 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 0307 	and.w	r3, r3, #7
 800586e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	2b06      	cmp	r3, #6
 8005874:	d010      	beq.n	8005898 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f042 0201 	orr.w	r2, r2, #1
 8005884:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005886:	e007      	b.n	8005898 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f042 0201 	orr.w	r2, r2, #1
 8005896:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005898:	7dfb      	ldrb	r3, [r7, #23]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	08005e1d 	.word	0x08005e1d
 80058a8:	08005ec5 	.word	0x08005ec5
 80058ac:	08005d8b 	.word	0x08005d8b
 80058b0:	40010000 	.word	0x40010000
 80058b4:	40000400 	.word	0x40000400
 80058b8:	40000800 	.word	0x40000800
 80058bc:	40000c00 	.word	0x40000c00
 80058c0:	40014000 	.word	0x40014000

080058c4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058ce:	2300      	movs	r3, #0
 80058d0:	73fb      	strb	r3, [r7, #15]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b0c      	cmp	r3, #12
 80058d6:	d855      	bhi.n	8005984 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80058d8:	a201      	add	r2, pc, #4	; (adr r2, 80058e0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80058da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058de:	bf00      	nop
 80058e0:	08005915 	.word	0x08005915
 80058e4:	08005985 	.word	0x08005985
 80058e8:	08005985 	.word	0x08005985
 80058ec:	08005985 	.word	0x08005985
 80058f0:	08005931 	.word	0x08005931
 80058f4:	08005985 	.word	0x08005985
 80058f8:	08005985 	.word	0x08005985
 80058fc:	08005985 	.word	0x08005985
 8005900:	0800594d 	.word	0x0800594d
 8005904:	08005985 	.word	0x08005985
 8005908:	08005985 	.word	0x08005985
 800590c:	08005985 	.word	0x08005985
 8005910:	08005969 	.word	0x08005969
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005922:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	4618      	mov	r0, r3
 800592a:	f7fc ff51 	bl	80027d0 <HAL_DMA_Abort_IT>
      break;
 800592e:	e02c      	b.n	800598a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800593e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005944:	4618      	mov	r0, r3
 8005946:	f7fc ff43 	bl	80027d0 <HAL_DMA_Abort_IT>
      break;
 800594a:	e01e      	b.n	800598a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800595a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	4618      	mov	r0, r3
 8005962:	f7fc ff35 	bl	80027d0 <HAL_DMA_Abort_IT>
      break;
 8005966:	e010      	b.n	800598a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005976:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597c:	4618      	mov	r0, r3
 800597e:	f7fc ff27 	bl	80027d0 <HAL_DMA_Abort_IT>
      break;
 8005982:	e002      	b.n	800598a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	73fb      	strb	r3, [r7, #15]
      break;
 8005988:	bf00      	nop
  }

  if (status == HAL_OK)
 800598a:	7bfb      	ldrb	r3, [r7, #15]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d157      	bne.n	8005a40 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2200      	movs	r2, #0
 8005996:	6839      	ldr	r1, [r7, #0]
 8005998:	4618      	mov	r0, r3
 800599a:	f000 fd6d 	bl	8006478 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a2a      	ldr	r2, [pc, #168]	; (8005a4c <HAL_TIM_PWM_Stop_DMA+0x188>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d117      	bne.n	80059d8 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6a1a      	ldr	r2, [r3, #32]
 80059ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80059b2:	4013      	ands	r3, r2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10f      	bne.n	80059d8 <HAL_TIM_PWM_Stop_DMA+0x114>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6a1a      	ldr	r2, [r3, #32]
 80059be:	f240 4344 	movw	r3, #1092	; 0x444
 80059c2:	4013      	ands	r3, r2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d107      	bne.n	80059d8 <HAL_TIM_PWM_Stop_DMA+0x114>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059d6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6a1a      	ldr	r2, [r3, #32]
 80059de:	f241 1311 	movw	r3, #4369	; 0x1111
 80059e2:	4013      	ands	r3, r2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10f      	bne.n	8005a08 <HAL_TIM_PWM_Stop_DMA+0x144>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6a1a      	ldr	r2, [r3, #32]
 80059ee:	f240 4344 	movw	r3, #1092	; 0x444
 80059f2:	4013      	ands	r3, r2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d107      	bne.n	8005a08 <HAL_TIM_PWM_Stop_DMA+0x144>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 0201 	bic.w	r2, r2, #1
 8005a06:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d104      	bne.n	8005a18 <HAL_TIM_PWM_Stop_DMA+0x154>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a16:	e013      	b.n	8005a40 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d104      	bne.n	8005a28 <HAL_TIM_PWM_Stop_DMA+0x164>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a26:	e00b      	b.n	8005a40 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	2b08      	cmp	r3, #8
 8005a2c:	d104      	bne.n	8005a38 <HAL_TIM_PWM_Stop_DMA+0x174>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a36:	e003      	b.n	8005a40 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	40010000 	.word	0x40010000

08005a50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d101      	bne.n	8005a6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	e0ae      	b.n	8005bcc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b0c      	cmp	r3, #12
 8005a7a:	f200 809f 	bhi.w	8005bbc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a7e:	a201      	add	r2, pc, #4	; (adr r2, 8005a84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a84:	08005ab9 	.word	0x08005ab9
 8005a88:	08005bbd 	.word	0x08005bbd
 8005a8c:	08005bbd 	.word	0x08005bbd
 8005a90:	08005bbd 	.word	0x08005bbd
 8005a94:	08005af9 	.word	0x08005af9
 8005a98:	08005bbd 	.word	0x08005bbd
 8005a9c:	08005bbd 	.word	0x08005bbd
 8005aa0:	08005bbd 	.word	0x08005bbd
 8005aa4:	08005b3b 	.word	0x08005b3b
 8005aa8:	08005bbd 	.word	0x08005bbd
 8005aac:	08005bbd 	.word	0x08005bbd
 8005ab0:	08005bbd 	.word	0x08005bbd
 8005ab4:	08005b7b 	.word	0x08005b7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68b9      	ldr	r1, [r7, #8]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fab4 	bl	800602c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	699a      	ldr	r2, [r3, #24]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0208 	orr.w	r2, r2, #8
 8005ad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	699a      	ldr	r2, [r3, #24]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 0204 	bic.w	r2, r2, #4
 8005ae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6999      	ldr	r1, [r3, #24]
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	691a      	ldr	r2, [r3, #16]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	619a      	str	r2, [r3, #24]
      break;
 8005af6:	e064      	b.n	8005bc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68b9      	ldr	r1, [r7, #8]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 fafa 	bl	80060f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699a      	ldr	r2, [r3, #24]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699a      	ldr	r2, [r3, #24]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6999      	ldr	r1, [r3, #24]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	021a      	lsls	r2, r3, #8
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	619a      	str	r2, [r3, #24]
      break;
 8005b38:	e043      	b.n	8005bc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68b9      	ldr	r1, [r7, #8]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 fb45 	bl	80061d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	69da      	ldr	r2, [r3, #28]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f042 0208 	orr.w	r2, r2, #8
 8005b54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	69da      	ldr	r2, [r3, #28]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 0204 	bic.w	r2, r2, #4
 8005b64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69d9      	ldr	r1, [r3, #28]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	691a      	ldr	r2, [r3, #16]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	61da      	str	r2, [r3, #28]
      break;
 8005b78:	e023      	b.n	8005bc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68b9      	ldr	r1, [r7, #8]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 fb8f 	bl	80062a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69da      	ldr	r2, [r3, #28]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69da      	ldr	r2, [r3, #28]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69d9      	ldr	r1, [r3, #28]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	021a      	lsls	r2, r3, #8
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	61da      	str	r2, [r3, #28]
      break;
 8005bba:	e002      	b.n	8005bc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8005bc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3718      	adds	r7, #24
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d101      	bne.n	8005bf0 <HAL_TIM_ConfigClockSource+0x1c>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e0b4      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x186>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c28:	d03e      	beq.n	8005ca8 <HAL_TIM_ConfigClockSource+0xd4>
 8005c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c2e:	f200 8087 	bhi.w	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c36:	f000 8086 	beq.w	8005d46 <HAL_TIM_ConfigClockSource+0x172>
 8005c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3e:	d87f      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c40:	2b70      	cmp	r3, #112	; 0x70
 8005c42:	d01a      	beq.n	8005c7a <HAL_TIM_ConfigClockSource+0xa6>
 8005c44:	2b70      	cmp	r3, #112	; 0x70
 8005c46:	d87b      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c48:	2b60      	cmp	r3, #96	; 0x60
 8005c4a:	d050      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0x11a>
 8005c4c:	2b60      	cmp	r3, #96	; 0x60
 8005c4e:	d877      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c50:	2b50      	cmp	r3, #80	; 0x50
 8005c52:	d03c      	beq.n	8005cce <HAL_TIM_ConfigClockSource+0xfa>
 8005c54:	2b50      	cmp	r3, #80	; 0x50
 8005c56:	d873      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c58:	2b40      	cmp	r3, #64	; 0x40
 8005c5a:	d058      	beq.n	8005d0e <HAL_TIM_ConfigClockSource+0x13a>
 8005c5c:	2b40      	cmp	r3, #64	; 0x40
 8005c5e:	d86f      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c60:	2b30      	cmp	r3, #48	; 0x30
 8005c62:	d064      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x15a>
 8005c64:	2b30      	cmp	r3, #48	; 0x30
 8005c66:	d86b      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c68:	2b20      	cmp	r3, #32
 8005c6a:	d060      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x15a>
 8005c6c:	2b20      	cmp	r3, #32
 8005c6e:	d867      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d05c      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x15a>
 8005c74:	2b10      	cmp	r3, #16
 8005c76:	d05a      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x15a>
 8005c78:	e062      	b.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6818      	ldr	r0, [r3, #0]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	6899      	ldr	r1, [r3, #8]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	f000 fbd5 	bl	8006438 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	609a      	str	r2, [r3, #8]
      break;
 8005ca6:	e04f      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6818      	ldr	r0, [r3, #0]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	6899      	ldr	r1, [r3, #8]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f000 fbbe 	bl	8006438 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cca:	609a      	str	r2, [r3, #8]
      break;
 8005ccc:	e03c      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6818      	ldr	r0, [r3, #0]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	6859      	ldr	r1, [r3, #4]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f000 fb32 	bl	8006344 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2150      	movs	r1, #80	; 0x50
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 fb8b 	bl	8006402 <TIM_ITRx_SetConfig>
      break;
 8005cec:	e02c      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	6859      	ldr	r1, [r3, #4]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	f000 fb51 	bl	80063a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2160      	movs	r1, #96	; 0x60
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 fb7b 	bl	8006402 <TIM_ITRx_SetConfig>
      break;
 8005d0c:	e01c      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6818      	ldr	r0, [r3, #0]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	6859      	ldr	r1, [r3, #4]
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f000 fb12 	bl	8006344 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2140      	movs	r1, #64	; 0x40
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 fb6b 	bl	8006402 <TIM_ITRx_SetConfig>
      break;
 8005d2c:	e00c      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4619      	mov	r1, r3
 8005d38:	4610      	mov	r0, r2
 8005d3a:	f000 fb62 	bl	8006402 <TIM_ITRx_SetConfig>
      break;
 8005d3e:	e003      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	73fb      	strb	r3, [r7, #15]
      break;
 8005d44:	e000      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005d6a:	bf00      	nop
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d96:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d107      	bne.n	8005db2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2201      	movs	r2, #1
 8005da6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005db0:	e02a      	b.n	8005e08 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d107      	bne.n	8005dcc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dca:	e01d      	b.n	8005e08 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d107      	bne.n	8005de6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2204      	movs	r2, #4
 8005dda:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005de4:	e010      	b.n	8005e08 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d107      	bne.n	8005e00 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2208      	movs	r2, #8
 8005df4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dfe:	e003      	b.n	8005e08 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f7ff ffb4 	bl	8005d76 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	771a      	strb	r2, [r3, #28]
}
 8005e14:	bf00      	nop
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e28:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d10b      	bne.n	8005e4c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d136      	bne.n	8005eb0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e4a:	e031      	b.n	8005eb0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d10b      	bne.n	8005e6e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2202      	movs	r2, #2
 8005e5a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d125      	bne.n	8005eb0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e6c:	e020      	b.n	8005eb0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d10b      	bne.n	8005e90 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2204      	movs	r2, #4
 8005e7c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d114      	bne.n	8005eb0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e8e:	e00f      	b.n	8005eb0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d10a      	bne.n	8005eb0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2208      	movs	r2, #8
 8005e9e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	69db      	ldr	r3, [r3, #28]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d103      	bne.n	8005eb0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f7fb fb09 	bl	80014c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	771a      	strb	r2, [r3, #28]
}
 8005ebc:	bf00      	nop
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d103      	bne.n	8005ee4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	771a      	strb	r2, [r3, #28]
 8005ee2:	e019      	b.n	8005f18 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d103      	bne.n	8005ef6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	771a      	strb	r2, [r3, #28]
 8005ef4:	e010      	b.n	8005f18 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d103      	bne.n	8005f08 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2204      	movs	r2, #4
 8005f04:	771a      	strb	r2, [r3, #28]
 8005f06:	e007      	b.n	8005f18 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d102      	bne.n	8005f18 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2208      	movs	r2, #8
 8005f16:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f7ff ff22 	bl	8005d62 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	771a      	strb	r2, [r3, #28]
}
 8005f24:	bf00      	nop
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a34      	ldr	r2, [pc, #208]	; (8006010 <TIM_Base_SetConfig+0xe4>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d00f      	beq.n	8005f64 <TIM_Base_SetConfig+0x38>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f4a:	d00b      	beq.n	8005f64 <TIM_Base_SetConfig+0x38>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a31      	ldr	r2, [pc, #196]	; (8006014 <TIM_Base_SetConfig+0xe8>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d007      	beq.n	8005f64 <TIM_Base_SetConfig+0x38>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a30      	ldr	r2, [pc, #192]	; (8006018 <TIM_Base_SetConfig+0xec>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d003      	beq.n	8005f64 <TIM_Base_SetConfig+0x38>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a2f      	ldr	r2, [pc, #188]	; (800601c <TIM_Base_SetConfig+0xf0>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d108      	bne.n	8005f76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a25      	ldr	r2, [pc, #148]	; (8006010 <TIM_Base_SetConfig+0xe4>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d01b      	beq.n	8005fb6 <TIM_Base_SetConfig+0x8a>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f84:	d017      	beq.n	8005fb6 <TIM_Base_SetConfig+0x8a>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a22      	ldr	r2, [pc, #136]	; (8006014 <TIM_Base_SetConfig+0xe8>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d013      	beq.n	8005fb6 <TIM_Base_SetConfig+0x8a>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a21      	ldr	r2, [pc, #132]	; (8006018 <TIM_Base_SetConfig+0xec>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d00f      	beq.n	8005fb6 <TIM_Base_SetConfig+0x8a>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a20      	ldr	r2, [pc, #128]	; (800601c <TIM_Base_SetConfig+0xf0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d00b      	beq.n	8005fb6 <TIM_Base_SetConfig+0x8a>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a1f      	ldr	r2, [pc, #124]	; (8006020 <TIM_Base_SetConfig+0xf4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d007      	beq.n	8005fb6 <TIM_Base_SetConfig+0x8a>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a1e      	ldr	r2, [pc, #120]	; (8006024 <TIM_Base_SetConfig+0xf8>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d003      	beq.n	8005fb6 <TIM_Base_SetConfig+0x8a>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a1d      	ldr	r2, [pc, #116]	; (8006028 <TIM_Base_SetConfig+0xfc>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d108      	bne.n	8005fc8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a08      	ldr	r2, [pc, #32]	; (8006010 <TIM_Base_SetConfig+0xe4>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d103      	bne.n	8005ffc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	691a      	ldr	r2, [r3, #16]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	615a      	str	r2, [r3, #20]
}
 8006002:	bf00      	nop
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	40010000 	.word	0x40010000
 8006014:	40000400 	.word	0x40000400
 8006018:	40000800 	.word	0x40000800
 800601c:	40000c00 	.word	0x40000c00
 8006020:	40014000 	.word	0x40014000
 8006024:	40014400 	.word	0x40014400
 8006028:	40014800 	.word	0x40014800

0800602c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	f023 0201 	bic.w	r2, r3, #1
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800605a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 0303 	bic.w	r3, r3, #3
 8006062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	4313      	orrs	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f023 0302 	bic.w	r3, r3, #2
 8006074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	4313      	orrs	r3, r2
 800607e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a1c      	ldr	r2, [pc, #112]	; (80060f4 <TIM_OC1_SetConfig+0xc8>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d10c      	bne.n	80060a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f023 0308 	bic.w	r3, r3, #8
 800608e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	4313      	orrs	r3, r2
 8006098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f023 0304 	bic.w	r3, r3, #4
 80060a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a13      	ldr	r2, [pc, #76]	; (80060f4 <TIM_OC1_SetConfig+0xc8>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d111      	bne.n	80060ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	621a      	str	r2, [r3, #32]
}
 80060e8:	bf00      	nop
 80060ea:	371c      	adds	r7, #28
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	40010000 	.word	0x40010000

080060f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	f023 0210 	bic.w	r2, r3, #16
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800612e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	021b      	lsls	r3, r3, #8
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	4313      	orrs	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f023 0320 	bic.w	r3, r3, #32
 8006142:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	011b      	lsls	r3, r3, #4
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	4313      	orrs	r3, r2
 800614e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a1e      	ldr	r2, [pc, #120]	; (80061cc <TIM_OC2_SetConfig+0xd4>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d10d      	bne.n	8006174 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800615e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	011b      	lsls	r3, r3, #4
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	4313      	orrs	r3, r2
 800616a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006172:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a15      	ldr	r2, [pc, #84]	; (80061cc <TIM_OC2_SetConfig+0xd4>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d113      	bne.n	80061a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006182:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800618a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	4313      	orrs	r3, r2
 8006196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	621a      	str	r2, [r3, #32]
}
 80061be:	bf00      	nop
 80061c0:	371c      	adds	r7, #28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	40010000 	.word	0x40010000

080061d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b087      	sub	sp, #28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f023 0303 	bic.w	r3, r3, #3
 8006206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	4313      	orrs	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	021b      	lsls	r3, r3, #8
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	4313      	orrs	r3, r2
 8006224:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a1d      	ldr	r2, [pc, #116]	; (80062a0 <TIM_OC3_SetConfig+0xd0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d10d      	bne.n	800624a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006234:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	021b      	lsls	r3, r3, #8
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	4313      	orrs	r3, r2
 8006240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a14      	ldr	r2, [pc, #80]	; (80062a0 <TIM_OC3_SetConfig+0xd0>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d113      	bne.n	800627a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	011b      	lsls	r3, r3, #4
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	4313      	orrs	r3, r2
 800626c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	011b      	lsls	r3, r3, #4
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	4313      	orrs	r3, r2
 8006278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	621a      	str	r2, [r3, #32]
}
 8006294:	bf00      	nop
 8006296:	371c      	adds	r7, #28
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	40010000 	.word	0x40010000

080062a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	021b      	lsls	r3, r3, #8
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	031b      	lsls	r3, r3, #12
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a10      	ldr	r2, [pc, #64]	; (8006340 <TIM_OC4_SetConfig+0x9c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d109      	bne.n	8006318 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800630a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	019b      	lsls	r3, r3, #6
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	4313      	orrs	r3, r2
 8006316:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	621a      	str	r2, [r3, #32]
}
 8006332:	bf00      	nop
 8006334:	371c      	adds	r7, #28
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	40010000 	.word	0x40010000

08006344 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006344:	b480      	push	{r7}
 8006346:	b087      	sub	sp, #28
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	f023 0201 	bic.w	r2, r3, #1
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800636e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	011b      	lsls	r3, r3, #4
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	4313      	orrs	r3, r2
 8006378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f023 030a 	bic.w	r3, r3, #10
 8006380:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	4313      	orrs	r3, r2
 8006388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	621a      	str	r2, [r3, #32]
}
 8006396:	bf00      	nop
 8006398:	371c      	adds	r7, #28
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b087      	sub	sp, #28
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	60f8      	str	r0, [r7, #12]
 80063aa:	60b9      	str	r1, [r7, #8]
 80063ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	f023 0210 	bic.w	r2, r3, #16
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a1b      	ldr	r3, [r3, #32]
 80063c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	031b      	lsls	r3, r3, #12
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	011b      	lsls	r3, r3, #4
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	621a      	str	r2, [r3, #32]
}
 80063f6:	bf00      	nop
 80063f8:	371c      	adds	r7, #28
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006402:	b480      	push	{r7}
 8006404:	b085      	sub	sp, #20
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006418:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	4313      	orrs	r3, r2
 8006420:	f043 0307 	orr.w	r3, r3, #7
 8006424:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	609a      	str	r2, [r3, #8]
}
 800642c:	bf00      	nop
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006438:	b480      	push	{r7}
 800643a:	b087      	sub	sp, #28
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
 8006444:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006452:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	021a      	lsls	r2, r3, #8
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	431a      	orrs	r2, r3
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	4313      	orrs	r3, r2
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	4313      	orrs	r3, r2
 8006464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	609a      	str	r2, [r3, #8]
}
 800646c:	bf00      	nop
 800646e:	371c      	adds	r7, #28
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	f003 031f 	and.w	r3, r3, #31
 800648a:	2201      	movs	r2, #1
 800648c:	fa02 f303 	lsl.w	r3, r2, r3
 8006490:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6a1a      	ldr	r2, [r3, #32]
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	43db      	mvns	r3, r3
 800649a:	401a      	ands	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6a1a      	ldr	r2, [r3, #32]
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	f003 031f 	and.w	r3, r3, #31
 80064aa:	6879      	ldr	r1, [r7, #4]
 80064ac:	fa01 f303 	lsl.w	r3, r1, r3
 80064b0:	431a      	orrs	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	621a      	str	r2, [r3, #32]
}
 80064b6:	bf00      	nop
 80064b8:	371c      	adds	r7, #28
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
	...

080064c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d101      	bne.n	80064dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064d8:	2302      	movs	r3, #2
 80064da:	e050      	b.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006502:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	4313      	orrs	r3, r2
 800650c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a1c      	ldr	r2, [pc, #112]	; (800658c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d018      	beq.n	8006552 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006528:	d013      	beq.n	8006552 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a18      	ldr	r2, [pc, #96]	; (8006590 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d00e      	beq.n	8006552 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a16      	ldr	r2, [pc, #88]	; (8006594 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d009      	beq.n	8006552 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a15      	ldr	r2, [pc, #84]	; (8006598 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d004      	beq.n	8006552 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a13      	ldr	r2, [pc, #76]	; (800659c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d10c      	bne.n	800656c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006558:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	4313      	orrs	r3, r2
 8006562:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	40010000 	.word	0x40010000
 8006590:	40000400 	.word	0x40000400
 8006594:	40000800 	.word	0x40000800
 8006598:	40000c00 	.word	0x40000c00
 800659c:	40014000 	.word	0x40014000

080065a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d101      	bne.n	80065bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065b8:	2302      	movs	r3, #2
 80065ba:	e03d      	b.n	8006638 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	4313      	orrs	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	4313      	orrs	r3, r2
 8006608:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	4313      	orrs	r3, r2
 8006616:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	4313      	orrs	r3, r2
 8006624:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3714      	adds	r7, #20
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006644:	b084      	sub	sp, #16
 8006646:	b580      	push	{r7, lr}
 8006648:	b084      	sub	sp, #16
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	f107 001c 	add.w	r0, r7, #28
 8006652:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006658:	2b01      	cmp	r3, #1
 800665a:	d122      	bne.n	80066a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006660:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006686:	2b01      	cmp	r3, #1
 8006688:	d105      	bne.n	8006696 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f001 fb1c 	bl	8007cd4 <USB_CoreReset>
 800669c:	4603      	mov	r3, r0
 800669e:	73fb      	strb	r3, [r7, #15]
 80066a0:	e01a      	b.n	80066d8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f001 fb10 	bl	8007cd4 <USB_CoreReset>
 80066b4:	4603      	mov	r3, r0
 80066b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80066b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d106      	bne.n	80066cc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	639a      	str	r2, [r3, #56]	; 0x38
 80066ca:	e005      	b.n	80066d8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80066d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d10b      	bne.n	80066f6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f043 0206 	orr.w	r2, r3, #6
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f043 0220 	orr.w	r2, r3, #32
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006702:	b004      	add	sp, #16
 8006704:	4770      	bx	lr
	...

08006708 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006708:	b480      	push	{r7}
 800670a:	b087      	sub	sp, #28
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	4613      	mov	r3, r2
 8006714:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006716:	79fb      	ldrb	r3, [r7, #7]
 8006718:	2b02      	cmp	r3, #2
 800671a:	d165      	bne.n	80067e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	4a41      	ldr	r2, [pc, #260]	; (8006824 <USB_SetTurnaroundTime+0x11c>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d906      	bls.n	8006732 <USB_SetTurnaroundTime+0x2a>
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	4a40      	ldr	r2, [pc, #256]	; (8006828 <USB_SetTurnaroundTime+0x120>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d202      	bcs.n	8006732 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800672c:	230f      	movs	r3, #15
 800672e:	617b      	str	r3, [r7, #20]
 8006730:	e062      	b.n	80067f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	4a3c      	ldr	r2, [pc, #240]	; (8006828 <USB_SetTurnaroundTime+0x120>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d306      	bcc.n	8006748 <USB_SetTurnaroundTime+0x40>
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	4a3b      	ldr	r2, [pc, #236]	; (800682c <USB_SetTurnaroundTime+0x124>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d202      	bcs.n	8006748 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006742:	230e      	movs	r3, #14
 8006744:	617b      	str	r3, [r7, #20]
 8006746:	e057      	b.n	80067f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	4a38      	ldr	r2, [pc, #224]	; (800682c <USB_SetTurnaroundTime+0x124>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d306      	bcc.n	800675e <USB_SetTurnaroundTime+0x56>
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	4a37      	ldr	r2, [pc, #220]	; (8006830 <USB_SetTurnaroundTime+0x128>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d202      	bcs.n	800675e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006758:	230d      	movs	r3, #13
 800675a:	617b      	str	r3, [r7, #20]
 800675c:	e04c      	b.n	80067f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	4a33      	ldr	r2, [pc, #204]	; (8006830 <USB_SetTurnaroundTime+0x128>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d306      	bcc.n	8006774 <USB_SetTurnaroundTime+0x6c>
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	4a32      	ldr	r2, [pc, #200]	; (8006834 <USB_SetTurnaroundTime+0x12c>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d802      	bhi.n	8006774 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800676e:	230c      	movs	r3, #12
 8006770:	617b      	str	r3, [r7, #20]
 8006772:	e041      	b.n	80067f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	4a2f      	ldr	r2, [pc, #188]	; (8006834 <USB_SetTurnaroundTime+0x12c>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d906      	bls.n	800678a <USB_SetTurnaroundTime+0x82>
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	4a2e      	ldr	r2, [pc, #184]	; (8006838 <USB_SetTurnaroundTime+0x130>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d802      	bhi.n	800678a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006784:	230b      	movs	r3, #11
 8006786:	617b      	str	r3, [r7, #20]
 8006788:	e036      	b.n	80067f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	4a2a      	ldr	r2, [pc, #168]	; (8006838 <USB_SetTurnaroundTime+0x130>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d906      	bls.n	80067a0 <USB_SetTurnaroundTime+0x98>
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	4a29      	ldr	r2, [pc, #164]	; (800683c <USB_SetTurnaroundTime+0x134>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d802      	bhi.n	80067a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800679a:	230a      	movs	r3, #10
 800679c:	617b      	str	r3, [r7, #20]
 800679e:	e02b      	b.n	80067f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	4a26      	ldr	r2, [pc, #152]	; (800683c <USB_SetTurnaroundTime+0x134>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d906      	bls.n	80067b6 <USB_SetTurnaroundTime+0xae>
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	4a25      	ldr	r2, [pc, #148]	; (8006840 <USB_SetTurnaroundTime+0x138>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d202      	bcs.n	80067b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80067b0:	2309      	movs	r3, #9
 80067b2:	617b      	str	r3, [r7, #20]
 80067b4:	e020      	b.n	80067f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	4a21      	ldr	r2, [pc, #132]	; (8006840 <USB_SetTurnaroundTime+0x138>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d306      	bcc.n	80067cc <USB_SetTurnaroundTime+0xc4>
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	4a20      	ldr	r2, [pc, #128]	; (8006844 <USB_SetTurnaroundTime+0x13c>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d802      	bhi.n	80067cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80067c6:	2308      	movs	r3, #8
 80067c8:	617b      	str	r3, [r7, #20]
 80067ca:	e015      	b.n	80067f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	4a1d      	ldr	r2, [pc, #116]	; (8006844 <USB_SetTurnaroundTime+0x13c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d906      	bls.n	80067e2 <USB_SetTurnaroundTime+0xda>
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	4a1c      	ldr	r2, [pc, #112]	; (8006848 <USB_SetTurnaroundTime+0x140>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d202      	bcs.n	80067e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80067dc:	2307      	movs	r3, #7
 80067de:	617b      	str	r3, [r7, #20]
 80067e0:	e00a      	b.n	80067f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80067e2:	2306      	movs	r3, #6
 80067e4:	617b      	str	r3, [r7, #20]
 80067e6:	e007      	b.n	80067f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80067e8:	79fb      	ldrb	r3, [r7, #7]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d102      	bne.n	80067f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80067ee:	2309      	movs	r3, #9
 80067f0:	617b      	str	r3, [r7, #20]
 80067f2:	e001      	b.n	80067f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80067f4:	2309      	movs	r3, #9
 80067f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	68da      	ldr	r2, [r3, #12]
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	029b      	lsls	r3, r3, #10
 800680c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006810:	431a      	orrs	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	371c      	adds	r7, #28
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	00d8acbf 	.word	0x00d8acbf
 8006828:	00e4e1c0 	.word	0x00e4e1c0
 800682c:	00f42400 	.word	0x00f42400
 8006830:	01067380 	.word	0x01067380
 8006834:	011a499f 	.word	0x011a499f
 8006838:	01312cff 	.word	0x01312cff
 800683c:	014ca43f 	.word	0x014ca43f
 8006840:	016e3600 	.word	0x016e3600
 8006844:	01a6ab1f 	.word	0x01a6ab1f
 8006848:	01e84800 	.word	0x01e84800

0800684c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f043 0201 	orr.w	r2, r3, #1
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f023 0201 	bic.w	r2, r3, #1
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80068ac:	78fb      	ldrb	r3, [r7, #3]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d115      	bne.n	80068de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80068be:	2001      	movs	r0, #1
 80068c0:	f7fb fd4a 	bl	8002358 <HAL_Delay>
      ms++;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	3301      	adds	r3, #1
 80068c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 f972 	bl	8007bb4 <USB_GetMode>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d01e      	beq.n	8006914 <USB_SetCurrentMode+0x84>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2b31      	cmp	r3, #49	; 0x31
 80068da:	d9f0      	bls.n	80068be <USB_SetCurrentMode+0x2e>
 80068dc:	e01a      	b.n	8006914 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80068de:	78fb      	ldrb	r3, [r7, #3]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d115      	bne.n	8006910 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80068f0:	2001      	movs	r0, #1
 80068f2:	f7fb fd31 	bl	8002358 <HAL_Delay>
      ms++;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	3301      	adds	r3, #1
 80068fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f001 f959 	bl	8007bb4 <USB_GetMode>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d005      	beq.n	8006914 <USB_SetCurrentMode+0x84>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2b31      	cmp	r3, #49	; 0x31
 800690c:	d9f0      	bls.n	80068f0 <USB_SetCurrentMode+0x60>
 800690e:	e001      	b.n	8006914 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e005      	b.n	8006920 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2b32      	cmp	r3, #50	; 0x32
 8006918:	d101      	bne.n	800691e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e000      	b.n	8006920 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006928:	b084      	sub	sp, #16
 800692a:	b580      	push	{r7, lr}
 800692c:	b086      	sub	sp, #24
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006936:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006942:	2300      	movs	r3, #0
 8006944:	613b      	str	r3, [r7, #16]
 8006946:	e009      	b.n	800695c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	3340      	adds	r3, #64	; 0x40
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	2200      	movs	r2, #0
 8006954:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	3301      	adds	r3, #1
 800695a:	613b      	str	r3, [r7, #16]
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	2b0e      	cmp	r3, #14
 8006960:	d9f2      	bls.n	8006948 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006964:	2b00      	cmp	r3, #0
 8006966:	d11c      	bne.n	80069a2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006976:	f043 0302 	orr.w	r3, r3, #2
 800697a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006980:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006998:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	639a      	str	r2, [r3, #56]	; 0x38
 80069a0:	e00b      	b.n	80069ba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069c0:	461a      	mov	r2, r3
 80069c2:	2300      	movs	r3, #0
 80069c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069cc:	4619      	mov	r1, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d4:	461a      	mov	r2, r3
 80069d6:	680b      	ldr	r3, [r1, #0]
 80069d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d10c      	bne.n	80069fa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80069e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d104      	bne.n	80069f0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80069e6:	2100      	movs	r1, #0
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f945 	bl	8006c78 <USB_SetDevSpeed>
 80069ee:	e008      	b.n	8006a02 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80069f0:	2101      	movs	r1, #1
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f940 	bl	8006c78 <USB_SetDevSpeed>
 80069f8:	e003      	b.n	8006a02 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80069fa:	2103      	movs	r1, #3
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 f93b 	bl	8006c78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a02:	2110      	movs	r1, #16
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f8f3 	bl	8006bf0 <USB_FlushTxFifo>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f90f 	bl	8006c38 <USB_FlushRxFifo>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a36:	461a      	mov	r2, r3
 8006a38:	2300      	movs	r3, #0
 8006a3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a42:	461a      	mov	r2, r3
 8006a44:	2300      	movs	r3, #0
 8006a46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a48:	2300      	movs	r3, #0
 8006a4a:	613b      	str	r3, [r7, #16]
 8006a4c:	e043      	b.n	8006ad6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a64:	d118      	bne.n	8006a98 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10a      	bne.n	8006a82 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a78:	461a      	mov	r2, r3
 8006a7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a7e:	6013      	str	r3, [r2, #0]
 8006a80:	e013      	b.n	8006aaa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a8e:	461a      	mov	r2, r3
 8006a90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	e008      	b.n	8006aaa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	015a      	lsls	r2, r3, #5
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	2300      	movs	r3, #0
 8006aba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac8:	461a      	mov	r2, r3
 8006aca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ace:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	613b      	str	r3, [r7, #16]
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d3b7      	bcc.n	8006a4e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ade:	2300      	movs	r3, #0
 8006ae0:	613b      	str	r3, [r7, #16]
 8006ae2:	e043      	b.n	8006b6c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006af6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006afa:	d118      	bne.n	8006b2e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10a      	bne.n	8006b18 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b0e:	461a      	mov	r2, r3
 8006b10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b14:	6013      	str	r3, [r2, #0]
 8006b16:	e013      	b.n	8006b40 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	015a      	lsls	r2, r3, #5
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b24:	461a      	mov	r2, r3
 8006b26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b2a:	6013      	str	r3, [r2, #0]
 8006b2c:	e008      	b.n	8006b40 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	2300      	movs	r3, #0
 8006b50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	015a      	lsls	r2, r3, #5
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5e:	461a      	mov	r2, r3
 8006b60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	613b      	str	r3, [r7, #16]
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d3b7      	bcc.n	8006ae4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006b94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d105      	bne.n	8006ba8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	f043 0210 	orr.w	r2, r3, #16
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	699a      	ldr	r2, [r3, #24]
 8006bac:	4b0f      	ldr	r3, [pc, #60]	; (8006bec <USB_DevInit+0x2c4>)
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d005      	beq.n	8006bc6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	f043 0208 	orr.w	r2, r3, #8
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d107      	bne.n	8006bdc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bd4:	f043 0304 	orr.w	r3, r3, #4
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006be8:	b004      	add	sp, #16
 8006bea:	4770      	bx	lr
 8006bec:	803c3800 	.word	0x803c3800

08006bf0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	019b      	lsls	r3, r3, #6
 8006c02:	f043 0220 	orr.w	r2, r3, #32
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	60fb      	str	r3, [r7, #12]
 8006c10:	4a08      	ldr	r2, [pc, #32]	; (8006c34 <USB_FlushTxFifo+0x44>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d901      	bls.n	8006c1a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e006      	b.n	8006c28 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	f003 0320 	and.w	r3, r3, #32
 8006c22:	2b20      	cmp	r3, #32
 8006c24:	d0f1      	beq.n	8006c0a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3714      	adds	r7, #20
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr
 8006c34:	00030d40 	.word	0x00030d40

08006c38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c40:	2300      	movs	r3, #0
 8006c42:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2210      	movs	r2, #16
 8006c48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	60fb      	str	r3, [r7, #12]
 8006c50:	4a08      	ldr	r2, [pc, #32]	; (8006c74 <USB_FlushRxFifo+0x3c>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d901      	bls.n	8006c5a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e006      	b.n	8006c68 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	f003 0310 	and.w	r3, r3, #16
 8006c62:	2b10      	cmp	r3, #16
 8006c64:	d0f1      	beq.n	8006c4a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	00030d40 	.word	0x00030d40

08006c78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	460b      	mov	r3, r1
 8006c82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	78fb      	ldrb	r3, [r7, #3]
 8006c92:	68f9      	ldr	r1, [r7, #12]
 8006c94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b087      	sub	sp, #28
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f003 0306 	and.w	r3, r3, #6
 8006cc2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d102      	bne.n	8006cd0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	75fb      	strb	r3, [r7, #23]
 8006cce:	e00a      	b.n	8006ce6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d002      	beq.n	8006cdc <USB_GetDevSpeed+0x32>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2b06      	cmp	r3, #6
 8006cda:	d102      	bne.n	8006ce2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006cdc:	2302      	movs	r3, #2
 8006cde:	75fb      	strb	r3, [r7, #23]
 8006ce0:	e001      	b.n	8006ce6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006ce2:	230f      	movs	r3, #15
 8006ce4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	371c      	adds	r7, #28
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	785b      	ldrb	r3, [r3, #1]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d13a      	bne.n	8006d86 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d16:	69da      	ldr	r2, [r3, #28]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	f003 030f 	and.w	r3, r3, #15
 8006d20:	2101      	movs	r1, #1
 8006d22:	fa01 f303 	lsl.w	r3, r1, r3
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	68f9      	ldr	r1, [r7, #12]
 8006d2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	015a      	lsls	r2, r3, #5
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	4413      	add	r3, r2
 8006d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d155      	bne.n	8006df4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	78db      	ldrb	r3, [r3, #3]
 8006d62:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d64:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	059b      	lsls	r3, r3, #22
 8006d6a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	0151      	lsls	r1, r2, #5
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	440a      	add	r2, r1
 8006d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d82:	6013      	str	r3, [r2, #0]
 8006d84:	e036      	b.n	8006df4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d8c:	69da      	ldr	r2, [r3, #28]
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	f003 030f 	and.w	r3, r3, #15
 8006d96:	2101      	movs	r1, #1
 8006d98:	fa01 f303 	lsl.w	r3, r1, r3
 8006d9c:	041b      	lsls	r3, r3, #16
 8006d9e:	68f9      	ldr	r1, [r7, #12]
 8006da0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006da4:	4313      	orrs	r3, r2
 8006da6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	015a      	lsls	r2, r3, #5
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d11a      	bne.n	8006df4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	015a      	lsls	r2, r3, #5
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	78db      	ldrb	r3, [r3, #3]
 8006dd8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006dda:	430b      	orrs	r3, r1
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	0151      	lsls	r1, r2, #5
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	440a      	add	r2, r1
 8006de6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006df2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3714      	adds	r7, #20
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
	...

08006e04 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	785b      	ldrb	r3, [r3, #1]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d161      	bne.n	8006ee4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e36:	d11f      	bne.n	8006e78 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	015a      	lsls	r2, r3, #5
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	0151      	lsls	r1, r2, #5
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	440a      	add	r2, r1
 8006e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e56:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	0151      	lsls	r1, r2, #5
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	440a      	add	r2, r1
 8006e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	f003 030f 	and.w	r3, r3, #15
 8006e88:	2101      	movs	r1, #1
 8006e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	43db      	mvns	r3, r3
 8006e92:	68f9      	ldr	r1, [r7, #12]
 8006e94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e98:	4013      	ands	r3, r2
 8006e9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ea2:	69da      	ldr	r2, [r3, #28]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	f003 030f 	and.w	r3, r3, #15
 8006eac:	2101      	movs	r1, #1
 8006eae:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	43db      	mvns	r3, r3
 8006eb6:	68f9      	ldr	r1, [r7, #12]
 8006eb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	0159      	lsls	r1, r3, #5
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	440b      	add	r3, r1
 8006ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eda:	4619      	mov	r1, r3
 8006edc:	4b35      	ldr	r3, [pc, #212]	; (8006fb4 <USB_DeactivateEndpoint+0x1b0>)
 8006ede:	4013      	ands	r3, r2
 8006ee0:	600b      	str	r3, [r1, #0]
 8006ee2:	e060      	b.n	8006fa6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006efa:	d11f      	bne.n	8006f3c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	015a      	lsls	r2, r3, #5
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	0151      	lsls	r1, r2, #5
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	440a      	add	r2, r1
 8006f12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f1a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	0151      	lsls	r1, r2, #5
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	440a      	add	r2, r1
 8006f32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	f003 030f 	and.w	r3, r3, #15
 8006f4c:	2101      	movs	r1, #1
 8006f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f52:	041b      	lsls	r3, r3, #16
 8006f54:	43db      	mvns	r3, r3
 8006f56:	68f9      	ldr	r1, [r7, #12]
 8006f58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f66:	69da      	ldr	r2, [r3, #28]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	f003 030f 	and.w	r3, r3, #15
 8006f70:	2101      	movs	r1, #1
 8006f72:	fa01 f303 	lsl.w	r3, r1, r3
 8006f76:	041b      	lsls	r3, r3, #16
 8006f78:	43db      	mvns	r3, r3
 8006f7a:	68f9      	ldr	r1, [r7, #12]
 8006f7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f80:	4013      	ands	r3, r2
 8006f82:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	0159      	lsls	r1, r3, #5
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	440b      	add	r3, r1
 8006f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <USB_DeactivateEndpoint+0x1b4>)
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr
 8006fb4:	ec337800 	.word	0xec337800
 8006fb8:	eff37800 	.word	0xeff37800

08006fbc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b08a      	sub	sp, #40	; 0x28
 8006fc0:	af02      	add	r7, sp, #8
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	785b      	ldrb	r3, [r3, #1]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	f040 815c 	bne.w	8007296 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d132      	bne.n	800704c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	0151      	lsls	r1, r2, #5
 8006ff8:	69fa      	ldr	r2, [r7, #28]
 8006ffa:	440a      	add	r2, r1
 8006ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007000:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007004:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007008:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	4413      	add	r3, r2
 8007012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	0151      	lsls	r1, r2, #5
 800701c:	69fa      	ldr	r2, [r7, #28]
 800701e:	440a      	add	r2, r1
 8007020:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007024:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007028:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	015a      	lsls	r2, r3, #5
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	4413      	add	r3, r2
 8007032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	0151      	lsls	r1, r2, #5
 800703c:	69fa      	ldr	r2, [r7, #28]
 800703e:	440a      	add	r2, r1
 8007040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007044:	0cdb      	lsrs	r3, r3, #19
 8007046:	04db      	lsls	r3, r3, #19
 8007048:	6113      	str	r3, [r2, #16]
 800704a:	e074      	b.n	8007136 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	69ba      	ldr	r2, [r7, #24]
 800705c:	0151      	lsls	r1, r2, #5
 800705e:	69fa      	ldr	r2, [r7, #28]
 8007060:	440a      	add	r2, r1
 8007062:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007066:	0cdb      	lsrs	r3, r3, #19
 8007068:	04db      	lsls	r3, r3, #19
 800706a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	4413      	add	r3, r2
 8007074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	69ba      	ldr	r2, [r7, #24]
 800707c:	0151      	lsls	r1, r2, #5
 800707e:	69fa      	ldr	r2, [r7, #28]
 8007080:	440a      	add	r2, r1
 8007082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007086:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800708a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800708e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	4413      	add	r3, r2
 8007098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800709c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	6959      	ldr	r1, [r3, #20]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	440b      	add	r3, r1
 80070a8:	1e59      	subs	r1, r3, #1
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80070b2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80070b4:	4b9d      	ldr	r3, [pc, #628]	; (800732c <USB_EPStartXfer+0x370>)
 80070b6:	400b      	ands	r3, r1
 80070b8:	69b9      	ldr	r1, [r7, #24]
 80070ba:	0148      	lsls	r0, r1, #5
 80070bc:	69f9      	ldr	r1, [r7, #28]
 80070be:	4401      	add	r1, r0
 80070c0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80070c4:	4313      	orrs	r3, r2
 80070c6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d4:	691a      	ldr	r2, [r3, #16]
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070de:	69b9      	ldr	r1, [r7, #24]
 80070e0:	0148      	lsls	r0, r1, #5
 80070e2:	69f9      	ldr	r1, [r7, #28]
 80070e4:	4401      	add	r1, r0
 80070e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80070ea:	4313      	orrs	r3, r2
 80070ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	78db      	ldrb	r3, [r3, #3]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d11f      	bne.n	8007136 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	69ba      	ldr	r2, [r7, #24]
 8007106:	0151      	lsls	r1, r2, #5
 8007108:	69fa      	ldr	r2, [r7, #28]
 800710a:	440a      	add	r2, r1
 800710c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007110:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007114:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	4413      	add	r3, r2
 800711e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	69ba      	ldr	r2, [r7, #24]
 8007126:	0151      	lsls	r1, r2, #5
 8007128:	69fa      	ldr	r2, [r7, #28]
 800712a:	440a      	add	r2, r1
 800712c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007130:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007134:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007136:	79fb      	ldrb	r3, [r7, #7]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d14b      	bne.n	80071d4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d009      	beq.n	8007158 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	015a      	lsls	r2, r3, #5
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	4413      	add	r3, r2
 800714c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007150:	461a      	mov	r2, r3
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	78db      	ldrb	r3, [r3, #3]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d128      	bne.n	80071b2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800716c:	2b00      	cmp	r3, #0
 800716e:	d110      	bne.n	8007192 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	4413      	add	r3, r2
 8007178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	69ba      	ldr	r2, [r7, #24]
 8007180:	0151      	lsls	r1, r2, #5
 8007182:	69fa      	ldr	r2, [r7, #28]
 8007184:	440a      	add	r2, r1
 8007186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800718a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800718e:	6013      	str	r3, [r2, #0]
 8007190:	e00f      	b.n	80071b2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	015a      	lsls	r2, r3, #5
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	4413      	add	r3, r2
 800719a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	69ba      	ldr	r2, [r7, #24]
 80071a2:	0151      	lsls	r1, r2, #5
 80071a4:	69fa      	ldr	r2, [r7, #28]
 80071a6:	440a      	add	r2, r1
 80071a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071b0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	69ba      	ldr	r2, [r7, #24]
 80071c2:	0151      	lsls	r1, r2, #5
 80071c4:	69fa      	ldr	r2, [r7, #28]
 80071c6:	440a      	add	r2, r1
 80071c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071d0:	6013      	str	r3, [r2, #0]
 80071d2:	e12f      	b.n	8007434 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	015a      	lsls	r2, r3, #5
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	4413      	add	r3, r2
 80071dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	69ba      	ldr	r2, [r7, #24]
 80071e4:	0151      	lsls	r1, r2, #5
 80071e6:	69fa      	ldr	r2, [r7, #28]
 80071e8:	440a      	add	r2, r1
 80071ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071f2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	78db      	ldrb	r3, [r3, #3]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d015      	beq.n	8007228 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	2b00      	cmp	r3, #0
 8007202:	f000 8117 	beq.w	8007434 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800720c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	f003 030f 	and.w	r3, r3, #15
 8007216:	2101      	movs	r1, #1
 8007218:	fa01 f303 	lsl.w	r3, r1, r3
 800721c:	69f9      	ldr	r1, [r7, #28]
 800721e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007222:	4313      	orrs	r3, r2
 8007224:	634b      	str	r3, [r1, #52]	; 0x34
 8007226:	e105      	b.n	8007434 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007234:	2b00      	cmp	r3, #0
 8007236:	d110      	bne.n	800725a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	015a      	lsls	r2, r3, #5
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	4413      	add	r3, r2
 8007240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	69ba      	ldr	r2, [r7, #24]
 8007248:	0151      	lsls	r1, r2, #5
 800724a:	69fa      	ldr	r2, [r7, #28]
 800724c:	440a      	add	r2, r1
 800724e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007252:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007256:	6013      	str	r3, [r2, #0]
 8007258:	e00f      	b.n	800727a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	015a      	lsls	r2, r3, #5
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	4413      	add	r3, r2
 8007262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	69ba      	ldr	r2, [r7, #24]
 800726a:	0151      	lsls	r1, r2, #5
 800726c:	69fa      	ldr	r2, [r7, #28]
 800726e:	440a      	add	r2, r1
 8007270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007278:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	68d9      	ldr	r1, [r3, #12]
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	781a      	ldrb	r2, [r3, #0]
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	b298      	uxth	r0, r3
 8007288:	79fb      	ldrb	r3, [r7, #7]
 800728a:	9300      	str	r3, [sp, #0]
 800728c:	4603      	mov	r3, r0
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 fa2b 	bl	80076ea <USB_WritePacket>
 8007294:	e0ce      	b.n	8007434 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	4413      	add	r3, r2
 800729e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	69ba      	ldr	r2, [r7, #24]
 80072a6:	0151      	lsls	r1, r2, #5
 80072a8:	69fa      	ldr	r2, [r7, #28]
 80072aa:	440a      	add	r2, r1
 80072ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072b0:	0cdb      	lsrs	r3, r3, #19
 80072b2:	04db      	lsls	r3, r3, #19
 80072b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	015a      	lsls	r2, r3, #5
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	4413      	add	r3, r2
 80072be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	69ba      	ldr	r2, [r7, #24]
 80072c6:	0151      	lsls	r1, r2, #5
 80072c8:	69fa      	ldr	r2, [r7, #28]
 80072ca:	440a      	add	r2, r1
 80072cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d126      	bne.n	8007330 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ee:	691a      	ldr	r2, [r3, #16]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072f8:	69b9      	ldr	r1, [r7, #24]
 80072fa:	0148      	lsls	r0, r1, #5
 80072fc:	69f9      	ldr	r1, [r7, #28]
 80072fe:	4401      	add	r1, r0
 8007300:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007304:	4313      	orrs	r3, r2
 8007306:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	0151      	lsls	r1, r2, #5
 800731a:	69fa      	ldr	r2, [r7, #28]
 800731c:	440a      	add	r2, r1
 800731e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007322:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007326:	6113      	str	r3, [r2, #16]
 8007328:	e036      	b.n	8007398 <USB_EPStartXfer+0x3dc>
 800732a:	bf00      	nop
 800732c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	695a      	ldr	r2, [r3, #20]
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	4413      	add	r3, r2
 800733a:	1e5a      	subs	r2, r3, #1
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	fbb2 f3f3 	udiv	r3, r2, r3
 8007344:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	015a      	lsls	r2, r3, #5
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	4413      	add	r3, r2
 800734e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007352:	691a      	ldr	r2, [r3, #16]
 8007354:	8afb      	ldrh	r3, [r7, #22]
 8007356:	04d9      	lsls	r1, r3, #19
 8007358:	4b39      	ldr	r3, [pc, #228]	; (8007440 <USB_EPStartXfer+0x484>)
 800735a:	400b      	ands	r3, r1
 800735c:	69b9      	ldr	r1, [r7, #24]
 800735e:	0148      	lsls	r0, r1, #5
 8007360:	69f9      	ldr	r1, [r7, #28]
 8007362:	4401      	add	r1, r0
 8007364:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007368:	4313      	orrs	r3, r2
 800736a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	4413      	add	r3, r2
 8007374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007378:	691a      	ldr	r2, [r3, #16]
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	8af9      	ldrh	r1, [r7, #22]
 8007380:	fb01 f303 	mul.w	r3, r1, r3
 8007384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007388:	69b9      	ldr	r1, [r7, #24]
 800738a:	0148      	lsls	r0, r1, #5
 800738c:	69f9      	ldr	r1, [r7, #28]
 800738e:	4401      	add	r1, r0
 8007390:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007394:	4313      	orrs	r3, r2
 8007396:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007398:	79fb      	ldrb	r3, [r7, #7]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d10d      	bne.n	80073ba <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d009      	beq.n	80073ba <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	68d9      	ldr	r1, [r3, #12]
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	015a      	lsls	r2, r3, #5
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b6:	460a      	mov	r2, r1
 80073b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	78db      	ldrb	r3, [r3, #3]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d128      	bne.n	8007414 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d110      	bne.n	80073f4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	015a      	lsls	r2, r3, #5
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	4413      	add	r3, r2
 80073da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	69ba      	ldr	r2, [r7, #24]
 80073e2:	0151      	lsls	r1, r2, #5
 80073e4:	69fa      	ldr	r2, [r7, #28]
 80073e6:	440a      	add	r2, r1
 80073e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073f0:	6013      	str	r3, [r2, #0]
 80073f2:	e00f      	b.n	8007414 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	69ba      	ldr	r2, [r7, #24]
 8007404:	0151      	lsls	r1, r2, #5
 8007406:	69fa      	ldr	r2, [r7, #28]
 8007408:	440a      	add	r2, r1
 800740a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800740e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007412:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	015a      	lsls	r2, r3, #5
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	4413      	add	r3, r2
 800741c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	69ba      	ldr	r2, [r7, #24]
 8007424:	0151      	lsls	r1, r2, #5
 8007426:	69fa      	ldr	r2, [r7, #28]
 8007428:	440a      	add	r2, r1
 800742a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800742e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007432:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3720      	adds	r7, #32
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	1ff80000 	.word	0x1ff80000

08007444 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007444:	b480      	push	{r7}
 8007446:	b087      	sub	sp, #28
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	4613      	mov	r3, r2
 8007450:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	785b      	ldrb	r3, [r3, #1]
 8007460:	2b01      	cmp	r3, #1
 8007462:	f040 80cd 	bne.w	8007600 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d132      	bne.n	80074d4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	015a      	lsls	r2, r3, #5
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	4413      	add	r3, r2
 8007476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	0151      	lsls	r1, r2, #5
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	440a      	add	r2, r1
 8007484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007488:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800748c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007490:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	4413      	add	r3, r2
 800749a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	0151      	lsls	r1, r2, #5
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	440a      	add	r2, r1
 80074a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	0151      	lsls	r1, r2, #5
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	440a      	add	r2, r1
 80074c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074cc:	0cdb      	lsrs	r3, r3, #19
 80074ce:	04db      	lsls	r3, r3, #19
 80074d0:	6113      	str	r3, [r2, #16]
 80074d2:	e04e      	b.n	8007572 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	015a      	lsls	r2, r3, #5
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	693a      	ldr	r2, [r7, #16]
 80074e4:	0151      	lsls	r1, r2, #5
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	440a      	add	r2, r1
 80074ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ee:	0cdb      	lsrs	r3, r3, #19
 80074f0:	04db      	lsls	r3, r3, #19
 80074f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	0151      	lsls	r1, r2, #5
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	440a      	add	r2, r1
 800750a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800750e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007512:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007516:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	695a      	ldr	r2, [r3, #20]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	429a      	cmp	r2, r3
 8007522:	d903      	bls.n	800752c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	689a      	ldr	r2, [r3, #8]
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	015a      	lsls	r2, r3, #5
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	4413      	add	r3, r2
 8007534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	0151      	lsls	r1, r2, #5
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	440a      	add	r2, r1
 8007542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007546:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800754a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	015a      	lsls	r2, r3, #5
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	4413      	add	r3, r2
 8007554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007558:	691a      	ldr	r2, [r3, #16]
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007562:	6939      	ldr	r1, [r7, #16]
 8007564:	0148      	lsls	r0, r1, #5
 8007566:	6979      	ldr	r1, [r7, #20]
 8007568:	4401      	add	r1, r0
 800756a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800756e:	4313      	orrs	r3, r2
 8007570:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007572:	79fb      	ldrb	r3, [r7, #7]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d11e      	bne.n	80075b6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d009      	beq.n	8007594 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	4413      	add	r3, r2
 8007588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800758c:	461a      	mov	r2, r3
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	015a      	lsls	r2, r3, #5
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	4413      	add	r3, r2
 800759c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	0151      	lsls	r1, r2, #5
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	440a      	add	r2, r1
 80075aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075b2:	6013      	str	r3, [r2, #0]
 80075b4:	e092      	b.n	80076dc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	015a      	lsls	r2, r3, #5
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	4413      	add	r3, r2
 80075be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	693a      	ldr	r2, [r7, #16]
 80075c6:	0151      	lsls	r1, r2, #5
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	440a      	add	r2, r1
 80075cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075d4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d07e      	beq.n	80076dc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	f003 030f 	and.w	r3, r3, #15
 80075ee:	2101      	movs	r1, #1
 80075f0:	fa01 f303 	lsl.w	r3, r1, r3
 80075f4:	6979      	ldr	r1, [r7, #20]
 80075f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075fa:	4313      	orrs	r3, r2
 80075fc:	634b      	str	r3, [r1, #52]	; 0x34
 80075fe:	e06d      	b.n	80076dc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	015a      	lsls	r2, r3, #5
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	4413      	add	r3, r2
 8007608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	693a      	ldr	r2, [r7, #16]
 8007610:	0151      	lsls	r1, r2, #5
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	440a      	add	r2, r1
 8007616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800761a:	0cdb      	lsrs	r3, r3, #19
 800761c:	04db      	lsls	r3, r3, #19
 800761e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	015a      	lsls	r2, r3, #5
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	4413      	add	r3, r2
 8007628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	0151      	lsls	r1, r2, #5
 8007632:	697a      	ldr	r2, [r7, #20]
 8007634:	440a      	add	r2, r1
 8007636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800763a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800763e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007642:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d003      	beq.n	8007654 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	689a      	ldr	r2, [r3, #8]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	4413      	add	r3, r2
 800765c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	0151      	lsls	r1, r2, #5
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	440a      	add	r2, r1
 800766a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800766e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007672:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	015a      	lsls	r2, r3, #5
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	4413      	add	r3, r2
 800767c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007680:	691a      	ldr	r2, [r3, #16]
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800768a:	6939      	ldr	r1, [r7, #16]
 800768c:	0148      	lsls	r0, r1, #5
 800768e:	6979      	ldr	r1, [r7, #20]
 8007690:	4401      	add	r1, r0
 8007692:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007696:	4313      	orrs	r3, r2
 8007698:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800769a:	79fb      	ldrb	r3, [r7, #7]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d10d      	bne.n	80076bc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d009      	beq.n	80076bc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	68d9      	ldr	r1, [r3, #12]
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	015a      	lsls	r2, r3, #5
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	4413      	add	r3, r2
 80076b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b8:	460a      	mov	r2, r1
 80076ba:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	693a      	ldr	r2, [r7, #16]
 80076cc:	0151      	lsls	r1, r2, #5
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	440a      	add	r2, r1
 80076d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80076da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	371c      	adds	r7, #28
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b089      	sub	sp, #36	; 0x24
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	60f8      	str	r0, [r7, #12]
 80076f2:	60b9      	str	r1, [r7, #8]
 80076f4:	4611      	mov	r1, r2
 80076f6:	461a      	mov	r2, r3
 80076f8:	460b      	mov	r3, r1
 80076fa:	71fb      	strb	r3, [r7, #7]
 80076fc:	4613      	mov	r3, r2
 80076fe:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007708:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800770c:	2b00      	cmp	r3, #0
 800770e:	d123      	bne.n	8007758 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007710:	88bb      	ldrh	r3, [r7, #4]
 8007712:	3303      	adds	r3, #3
 8007714:	089b      	lsrs	r3, r3, #2
 8007716:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007718:	2300      	movs	r3, #0
 800771a:	61bb      	str	r3, [r7, #24]
 800771c:	e018      	b.n	8007750 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800771e:	79fb      	ldrb	r3, [r7, #7]
 8007720:	031a      	lsls	r2, r3, #12
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	4413      	add	r3, r2
 8007726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800772a:	461a      	mov	r2, r3
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	3301      	adds	r3, #1
 8007736:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	3301      	adds	r3, #1
 800773c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	3301      	adds	r3, #1
 8007742:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	3301      	adds	r3, #1
 8007748:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	3301      	adds	r3, #1
 800774e:	61bb      	str	r3, [r7, #24]
 8007750:	69ba      	ldr	r2, [r7, #24]
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	429a      	cmp	r2, r3
 8007756:	d3e2      	bcc.n	800771e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3724      	adds	r7, #36	; 0x24
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007766:	b480      	push	{r7}
 8007768:	b08b      	sub	sp, #44	; 0x2c
 800776a:	af00      	add	r7, sp, #0
 800776c:	60f8      	str	r0, [r7, #12]
 800776e:	60b9      	str	r1, [r7, #8]
 8007770:	4613      	mov	r3, r2
 8007772:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800777c:	88fb      	ldrh	r3, [r7, #6]
 800777e:	089b      	lsrs	r3, r3, #2
 8007780:	b29b      	uxth	r3, r3
 8007782:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007784:	88fb      	ldrh	r3, [r7, #6]
 8007786:	f003 0303 	and.w	r3, r3, #3
 800778a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800778c:	2300      	movs	r3, #0
 800778e:	623b      	str	r3, [r7, #32]
 8007790:	e014      	b.n	80077bc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	601a      	str	r2, [r3, #0]
    pDest++;
 800779e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a0:	3301      	adds	r3, #1
 80077a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80077a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a6:	3301      	adds	r3, #1
 80077a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ac:	3301      	adds	r3, #1
 80077ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	3301      	adds	r3, #1
 80077b4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80077b6:	6a3b      	ldr	r3, [r7, #32]
 80077b8:	3301      	adds	r3, #1
 80077ba:	623b      	str	r3, [r7, #32]
 80077bc:	6a3a      	ldr	r2, [r7, #32]
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d3e6      	bcc.n	8007792 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80077c4:	8bfb      	ldrh	r3, [r7, #30]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d01e      	beq.n	8007808 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80077ca:	2300      	movs	r3, #0
 80077cc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077d4:	461a      	mov	r2, r3
 80077d6:	f107 0310 	add.w	r3, r7, #16
 80077da:	6812      	ldr	r2, [r2, #0]
 80077dc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	6a3b      	ldr	r3, [r7, #32]
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	00db      	lsls	r3, r3, #3
 80077e6:	fa22 f303 	lsr.w	r3, r2, r3
 80077ea:	b2da      	uxtb	r2, r3
 80077ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ee:	701a      	strb	r2, [r3, #0]
      i++;
 80077f0:	6a3b      	ldr	r3, [r7, #32]
 80077f2:	3301      	adds	r3, #1
 80077f4:	623b      	str	r3, [r7, #32]
      pDest++;
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	3301      	adds	r3, #1
 80077fa:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80077fc:	8bfb      	ldrh	r3, [r7, #30]
 80077fe:	3b01      	subs	r3, #1
 8007800:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007802:	8bfb      	ldrh	r3, [r7, #30]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1ea      	bne.n	80077de <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800780a:	4618      	mov	r0, r3
 800780c:	372c      	adds	r7, #44	; 0x2c
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007816:	b480      	push	{r7}
 8007818:	b085      	sub	sp, #20
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	785b      	ldrb	r3, [r3, #1]
 800782e:	2b01      	cmp	r3, #1
 8007830:	d12c      	bne.n	800788c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	015a      	lsls	r2, r3, #5
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	4413      	add	r3, r2
 800783a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	db12      	blt.n	800786a <USB_EPSetStall+0x54>
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00f      	beq.n	800786a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	015a      	lsls	r2, r3, #5
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	4413      	add	r3, r2
 8007852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	0151      	lsls	r1, r2, #5
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	440a      	add	r2, r1
 8007860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007864:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007868:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	015a      	lsls	r2, r3, #5
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	4413      	add	r3, r2
 8007872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	0151      	lsls	r1, r2, #5
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	440a      	add	r2, r1
 8007880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007884:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007888:	6013      	str	r3, [r2, #0]
 800788a:	e02b      	b.n	80078e4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4413      	add	r3, r2
 8007894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	db12      	blt.n	80078c4 <USB_EPSetStall+0xae>
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00f      	beq.n	80078c4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	0151      	lsls	r1, r2, #5
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	440a      	add	r2, r1
 80078ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80078c2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	015a      	lsls	r2, r3, #5
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	4413      	add	r3, r2
 80078cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	0151      	lsls	r1, r2, #5
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	440a      	add	r2, r1
 80078da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b085      	sub	sp, #20
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
 80078fa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	785b      	ldrb	r3, [r3, #1]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d128      	bne.n	8007960 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	015a      	lsls	r2, r3, #5
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	4413      	add	r3, r2
 8007916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	0151      	lsls	r1, r2, #5
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	440a      	add	r2, r1
 8007924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007928:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800792c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	78db      	ldrb	r3, [r3, #3]
 8007932:	2b03      	cmp	r3, #3
 8007934:	d003      	beq.n	800793e <USB_EPClearStall+0x4c>
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	78db      	ldrb	r3, [r3, #3]
 800793a:	2b02      	cmp	r3, #2
 800793c:	d138      	bne.n	80079b0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	015a      	lsls	r2, r3, #5
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	4413      	add	r3, r2
 8007946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	0151      	lsls	r1, r2, #5
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	440a      	add	r2, r1
 8007954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800795c:	6013      	str	r3, [r2, #0]
 800795e:	e027      	b.n	80079b0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	4413      	add	r3, r2
 8007968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68ba      	ldr	r2, [r7, #8]
 8007970:	0151      	lsls	r1, r2, #5
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	440a      	add	r2, r1
 8007976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800797a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800797e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	78db      	ldrb	r3, [r3, #3]
 8007984:	2b03      	cmp	r3, #3
 8007986:	d003      	beq.n	8007990 <USB_EPClearStall+0x9e>
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	78db      	ldrb	r3, [r3, #3]
 800798c:	2b02      	cmp	r3, #2
 800798e:	d10f      	bne.n	80079b0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	015a      	lsls	r2, r3, #5
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	4413      	add	r3, r2
 8007998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	0151      	lsls	r1, r2, #5
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	440a      	add	r2, r1
 80079a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079ae:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3714      	adds	r7, #20
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80079be:	b480      	push	{r7}
 80079c0:	b085      	sub	sp, #20
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	460b      	mov	r3, r1
 80079c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079dc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80079e0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	78fb      	ldrb	r3, [r7, #3]
 80079ec:	011b      	lsls	r3, r3, #4
 80079ee:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80079f2:	68f9      	ldr	r1, [r7, #12]
 80079f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079f8:	4313      	orrs	r3, r2
 80079fa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b085      	sub	sp, #20
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a24:	f023 0303 	bic.w	r3, r3, #3
 8007a28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a38:	f023 0302 	bic.w	r3, r3, #2
 8007a3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a66:	f023 0303 	bic.w	r3, r3, #3
 8007a6a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a7a:	f043 0302 	orr.w	r3, r3, #2
 8007a7e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3714      	adds	r7, #20
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b085      	sub	sp, #20
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3714      	adds	r7, #20
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	0c1b      	lsrs	r3, r3, #16
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b04:	69db      	ldr	r3, [r3, #28]
 8007b06:	68ba      	ldr	r2, [r7, #8]
 8007b08:	4013      	ands	r3, r2
 8007b0a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	b29b      	uxth	r3, r3
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	460b      	mov	r3, r1
 8007b26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007b2c:	78fb      	ldrb	r3, [r7, #3]
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b42:	695b      	ldr	r3, [r3, #20]
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	4013      	ands	r3, r2
 8007b48:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007b4a:	68bb      	ldr	r3, [r7, #8]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3714      	adds	r7, #20
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b087      	sub	sp, #28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	460b      	mov	r3, r1
 8007b62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b7a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007b7c:	78fb      	ldrb	r3, [r7, #3]
 8007b7e:	f003 030f 	and.w	r3, r3, #15
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	fa22 f303 	lsr.w	r3, r2, r3
 8007b88:	01db      	lsls	r3, r3, #7
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	693a      	ldr	r2, [r7, #16]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007b92:	78fb      	ldrb	r3, [r7, #3]
 8007b94:	015a      	lsls	r2, r3, #5
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	4413      	add	r3, r2
 8007b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	693a      	ldr	r2, [r7, #16]
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ba6:	68bb      	ldr	r3, [r7, #8]
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	371c      	adds	r7, #28
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	695b      	ldr	r3, [r3, #20]
 8007bc0:	f003 0301 	and.w	r3, r3, #1
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007bee:	f023 0307 	bic.w	r3, r3, #7
 8007bf2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c06:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3714      	adds	r7, #20
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
	...

08007c18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b087      	sub	sp, #28
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	460b      	mov	r3, r1
 8007c22:	607a      	str	r2, [r7, #4]
 8007c24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	333c      	adds	r3, #60	; 0x3c
 8007c2e:	3304      	adds	r3, #4
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	4a26      	ldr	r2, [pc, #152]	; (8007cd0 <USB_EP0_OutStart+0xb8>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d90a      	bls.n	8007c52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c4c:	d101      	bne.n	8007c52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	e037      	b.n	8007cc2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c58:	461a      	mov	r2, r3
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	697a      	ldr	r2, [r7, #20]
 8007c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c80:	f043 0318 	orr.w	r3, r3, #24
 8007c84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c94:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007c98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007c9a:	7afb      	ldrb	r3, [r7, #11]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d10f      	bne.n	8007cc0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007cbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	371c      	adds	r7, #28
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	4f54300a 	.word	0x4f54300a

08007cd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	60fb      	str	r3, [r7, #12]
 8007ce6:	4a13      	ldr	r2, [pc, #76]	; (8007d34 <USB_CoreReset+0x60>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d901      	bls.n	8007cf0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007cec:	2303      	movs	r3, #3
 8007cee:	e01a      	b.n	8007d26 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	daf3      	bge.n	8007ce0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	f043 0201 	orr.w	r2, r3, #1
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	4a09      	ldr	r2, [pc, #36]	; (8007d34 <USB_CoreReset+0x60>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d901      	bls.n	8007d18 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e006      	b.n	8007d26 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	f003 0301 	and.w	r3, r3, #1
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d0f1      	beq.n	8007d08 <USB_CoreReset+0x34>

  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3714      	adds	r7, #20
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	00030d40 	.word	0x00030d40

08007d38 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	460b      	mov	r3, r1
 8007d42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007d44:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007d48:	f002 fa12 	bl	800a170 <USBD_static_malloc>
 8007d4c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d105      	bne.n	8007d60 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	e066      	b.n	8007e2e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	7c1b      	ldrb	r3, [r3, #16]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d119      	bne.n	8007da4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007d70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d74:	2202      	movs	r2, #2
 8007d76:	2181      	movs	r1, #129	; 0x81
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f002 f8d6 	bl	8009f2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007d84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d88:	2202      	movs	r2, #2
 8007d8a:	2101      	movs	r1, #1
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f002 f8cc 	bl	8009f2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2210      	movs	r2, #16
 8007d9e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007da2:	e016      	b.n	8007dd2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007da4:	2340      	movs	r3, #64	; 0x40
 8007da6:	2202      	movs	r2, #2
 8007da8:	2181      	movs	r1, #129	; 0x81
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f002 f8bd 	bl	8009f2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007db6:	2340      	movs	r3, #64	; 0x40
 8007db8:	2202      	movs	r2, #2
 8007dba:	2101      	movs	r1, #1
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f002 f8b4 	bl	8009f2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2210      	movs	r2, #16
 8007dce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007dd2:	2308      	movs	r3, #8
 8007dd4:	2203      	movs	r2, #3
 8007dd6:	2182      	movs	r1, #130	; 0x82
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f002 f8a6 	bl	8009f2a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	7c1b      	ldrb	r3, [r3, #16]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d109      	bne.n	8007e1c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e12:	2101      	movs	r1, #1
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f002 f977 	bl	800a108 <USBD_LL_PrepareReceive>
 8007e1a:	e007      	b.n	8007e2c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e22:	2340      	movs	r3, #64	; 0x40
 8007e24:	2101      	movs	r1, #1
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f002 f96e 	bl	800a108 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b082      	sub	sp, #8
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
 8007e3e:	460b      	mov	r3, r1
 8007e40:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007e42:	2181      	movs	r1, #129	; 0x81
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f002 f896 	bl	8009f76 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007e50:	2101      	movs	r1, #1
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f002 f88f 	bl	8009f76 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007e60:	2182      	movs	r1, #130	; 0x82
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f002 f887 	bl	8009f76 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00e      	beq.n	8007ea0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e92:	4618      	mov	r0, r3
 8007e94:	f002 f97a 	bl	800a18c <USBD_static_free>
    pdev->pClassData = NULL;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
	...

08007eac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ebc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d101      	bne.n	8007ed4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	e0af      	b.n	8008034 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d03f      	beq.n	8007f60 <USBD_CDC_Setup+0xb4>
 8007ee0:	2b20      	cmp	r3, #32
 8007ee2:	f040 809f 	bne.w	8008024 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	88db      	ldrh	r3, [r3, #6]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d02e      	beq.n	8007f4c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	b25b      	sxtb	r3, r3
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	da16      	bge.n	8007f26 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	683a      	ldr	r2, [r7, #0]
 8007f02:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007f04:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f06:	683a      	ldr	r2, [r7, #0]
 8007f08:	88d2      	ldrh	r2, [r2, #6]
 8007f0a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	88db      	ldrh	r3, [r3, #6]
 8007f10:	2b07      	cmp	r3, #7
 8007f12:	bf28      	it	cs
 8007f14:	2307      	movcs	r3, #7
 8007f16:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	89fa      	ldrh	r2, [r7, #14]
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f001 fae9 	bl	80094f6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007f24:	e085      	b.n	8008032 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	785a      	ldrb	r2, [r3, #1]
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	88db      	ldrh	r3, [r3, #6]
 8007f34:	b2da      	uxtb	r2, r3
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007f3c:	6939      	ldr	r1, [r7, #16]
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	88db      	ldrh	r3, [r3, #6]
 8007f42:	461a      	mov	r2, r3
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f001 fb02 	bl	800954e <USBD_CtlPrepareRx>
      break;
 8007f4a:	e072      	b.n	8008032 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	683a      	ldr	r2, [r7, #0]
 8007f56:	7850      	ldrb	r0, [r2, #1]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	4798      	blx	r3
      break;
 8007f5e:	e068      	b.n	8008032 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	785b      	ldrb	r3, [r3, #1]
 8007f64:	2b0b      	cmp	r3, #11
 8007f66:	d852      	bhi.n	800800e <USBD_CDC_Setup+0x162>
 8007f68:	a201      	add	r2, pc, #4	; (adr r2, 8007f70 <USBD_CDC_Setup+0xc4>)
 8007f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6e:	bf00      	nop
 8007f70:	08007fa1 	.word	0x08007fa1
 8007f74:	0800801d 	.word	0x0800801d
 8007f78:	0800800f 	.word	0x0800800f
 8007f7c:	0800800f 	.word	0x0800800f
 8007f80:	0800800f 	.word	0x0800800f
 8007f84:	0800800f 	.word	0x0800800f
 8007f88:	0800800f 	.word	0x0800800f
 8007f8c:	0800800f 	.word	0x0800800f
 8007f90:	0800800f 	.word	0x0800800f
 8007f94:	0800800f 	.word	0x0800800f
 8007f98:	08007fcb 	.word	0x08007fcb
 8007f9c:	08007ff5 	.word	0x08007ff5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b03      	cmp	r3, #3
 8007faa:	d107      	bne.n	8007fbc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007fac:	f107 030a 	add.w	r3, r7, #10
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f001 fa9e 	bl	80094f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fba:	e032      	b.n	8008022 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007fbc:	6839      	ldr	r1, [r7, #0]
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f001 fa28 	bl	8009414 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	75fb      	strb	r3, [r7, #23]
          break;
 8007fc8:	e02b      	b.n	8008022 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b03      	cmp	r3, #3
 8007fd4:	d107      	bne.n	8007fe6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007fd6:	f107 030d 	add.w	r3, r7, #13
 8007fda:	2201      	movs	r2, #1
 8007fdc:	4619      	mov	r1, r3
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f001 fa89 	bl	80094f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fe4:	e01d      	b.n	8008022 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007fe6:	6839      	ldr	r1, [r7, #0]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f001 fa13 	bl	8009414 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	75fb      	strb	r3, [r7, #23]
          break;
 8007ff2:	e016      	b.n	8008022 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	2b03      	cmp	r3, #3
 8007ffe:	d00f      	beq.n	8008020 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f001 fa06 	bl	8009414 <USBD_CtlError>
            ret = USBD_FAIL;
 8008008:	2303      	movs	r3, #3
 800800a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800800c:	e008      	b.n	8008020 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800800e:	6839      	ldr	r1, [r7, #0]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f001 f9ff 	bl	8009414 <USBD_CtlError>
          ret = USBD_FAIL;
 8008016:	2303      	movs	r3, #3
 8008018:	75fb      	strb	r3, [r7, #23]
          break;
 800801a:	e002      	b.n	8008022 <USBD_CDC_Setup+0x176>
          break;
 800801c:	bf00      	nop
 800801e:	e008      	b.n	8008032 <USBD_CDC_Setup+0x186>
          break;
 8008020:	bf00      	nop
      }
      break;
 8008022:	e006      	b.n	8008032 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f001 f9f4 	bl	8009414 <USBD_CtlError>
      ret = USBD_FAIL;
 800802c:	2303      	movs	r3, #3
 800802e:	75fb      	strb	r3, [r7, #23]
      break;
 8008030:	bf00      	nop
  }

  return (uint8_t)ret;
 8008032:	7dfb      	ldrb	r3, [r7, #23]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3718      	adds	r7, #24
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	460b      	mov	r3, r1
 8008046:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800804e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008056:	2b00      	cmp	r3, #0
 8008058:	d101      	bne.n	800805e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800805a:	2303      	movs	r3, #3
 800805c:	e04f      	b.n	80080fe <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008064:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008066:	78fa      	ldrb	r2, [r7, #3]
 8008068:	6879      	ldr	r1, [r7, #4]
 800806a:	4613      	mov	r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	4413      	add	r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	440b      	add	r3, r1
 8008074:	3318      	adds	r3, #24
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d029      	beq.n	80080d0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800807c:	78fa      	ldrb	r2, [r7, #3]
 800807e:	6879      	ldr	r1, [r7, #4]
 8008080:	4613      	mov	r3, r2
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4413      	add	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	440b      	add	r3, r1
 800808a:	3318      	adds	r3, #24
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	78f9      	ldrb	r1, [r7, #3]
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	460b      	mov	r3, r1
 8008094:	00db      	lsls	r3, r3, #3
 8008096:	1a5b      	subs	r3, r3, r1
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4403      	add	r3, r0
 800809c:	3344      	adds	r3, #68	; 0x44
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80080a4:	fb03 f301 	mul.w	r3, r3, r1
 80080a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d110      	bne.n	80080d0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80080ae:	78fa      	ldrb	r2, [r7, #3]
 80080b0:	6879      	ldr	r1, [r7, #4]
 80080b2:	4613      	mov	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4413      	add	r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	440b      	add	r3, r1
 80080bc:	3318      	adds	r3, #24
 80080be:	2200      	movs	r2, #0
 80080c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80080c2:	78f9      	ldrb	r1, [r7, #3]
 80080c4:	2300      	movs	r3, #0
 80080c6:	2200      	movs	r2, #0
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f001 fffc 	bl	800a0c6 <USBD_LL_Transmit>
 80080ce:	e015      	b.n	80080fc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00b      	beq.n	80080fc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80080f8:	78fa      	ldrb	r2, [r7, #3]
 80080fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b084      	sub	sp, #16
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
 800810e:	460b      	mov	r3, r1
 8008110:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008118:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008120:	2b00      	cmp	r3, #0
 8008122:	d101      	bne.n	8008128 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008124:	2303      	movs	r3, #3
 8008126:	e015      	b.n	8008154 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008128:	78fb      	ldrb	r3, [r7, #3]
 800812a:	4619      	mov	r1, r3
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f002 f80c 	bl	800a14a <USBD_LL_GetRxDataSize>
 8008132:	4602      	mov	r2, r0
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800814e:	4611      	mov	r1, r2
 8008150:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800816a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d101      	bne.n	8008176 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008172:	2303      	movs	r3, #3
 8008174:	e01b      	b.n	80081ae <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d015      	beq.n	80081ac <USBD_CDC_EP0_RxReady+0x50>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008186:	2bff      	cmp	r3, #255	; 0xff
 8008188:	d010      	beq.n	80081ac <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008198:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80081a0:	b292      	uxth	r2, r2
 80081a2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	22ff      	movs	r2, #255	; 0xff
 80081a8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
	...

080081b8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2243      	movs	r2, #67	; 0x43
 80081c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80081c6:	4b03      	ldr	r3, [pc, #12]	; (80081d4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr
 80081d4:	200000a4 	.word	0x200000a4

080081d8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2243      	movs	r2, #67	; 0x43
 80081e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80081e6:	4b03      	ldr	r3, [pc, #12]	; (80081f4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr
 80081f4:	20000060 	.word	0x20000060

080081f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2243      	movs	r2, #67	; 0x43
 8008204:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008206:	4b03      	ldr	r3, [pc, #12]	; (8008214 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008208:	4618      	mov	r0, r3
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr
 8008214:	200000e8 	.word	0x200000e8

08008218 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	220a      	movs	r2, #10
 8008224:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008226:	4b03      	ldr	r3, [pc, #12]	; (8008234 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008228:	4618      	mov	r0, r3
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	2000001c 	.word	0x2000001c

08008238 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d101      	bne.n	800824c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008248:	2303      	movs	r3, #3
 800824a:	e004      	b.n	8008256 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	683a      	ldr	r2, [r7, #0]
 8008250:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	370c      	adds	r7, #12
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr

08008262 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008262:	b480      	push	{r7}
 8008264:	b087      	sub	sp, #28
 8008266:	af00      	add	r7, sp, #0
 8008268:	60f8      	str	r0, [r7, #12]
 800826a:	60b9      	str	r1, [r7, #8]
 800826c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008274:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d101      	bne.n	8008280 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800827c:	2303      	movs	r3, #3
 800827e:	e008      	b.n	8008292 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	371c      	adds	r7, #28
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800829e:	b480      	push	{r7}
 80082a0:	b085      	sub	sp, #20
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
 80082a6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082ae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d101      	bne.n	80082ba <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80082b6:	2303      	movs	r3, #3
 80082b8:	e004      	b.n	80082c4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d101      	bne.n	80082ee <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80082ea:	2303      	movs	r3, #3
 80082ec:	e016      	b.n	800831c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	7c1b      	ldrb	r3, [r3, #16]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d109      	bne.n	800830a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80082fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008300:	2101      	movs	r1, #1
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f001 ff00 	bl	800a108 <USBD_LL_PrepareReceive>
 8008308:	e007      	b.n	800831a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008310:	2340      	movs	r3, #64	; 0x40
 8008312:	2101      	movs	r1, #1
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f001 fef7 	bl	800a108 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b086      	sub	sp, #24
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	4613      	mov	r3, r2
 8008330:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d101      	bne.n	800833c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008338:	2303      	movs	r3, #3
 800833a:	e01f      	b.n	800837c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2200      	movs	r2, #0
 8008350:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d003      	beq.n	8008362 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	79fa      	ldrb	r2, [r7, #7]
 800836e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f001 fd73 	bl	8009e5c <USBD_LL_Init>
 8008376:	4603      	mov	r3, r0
 8008378:	75fb      	strb	r3, [r7, #23]

  return ret;
 800837a:	7dfb      	ldrb	r3, [r7, #23]
}
 800837c:	4618      	mov	r0, r3
 800837e:	3718      	adds	r7, #24
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800838e:	2300      	movs	r3, #0
 8008390:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d101      	bne.n	800839c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008398:	2303      	movs	r3, #3
 800839a:	e016      	b.n	80083ca <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00b      	beq.n	80083c8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b8:	f107 020e 	add.w	r2, r7, #14
 80083bc:	4610      	mov	r0, r2
 80083be:	4798      	blx	r3
 80083c0:	4602      	mov	r2, r0
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b082      	sub	sp, #8
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f001 fd8a 	bl	8009ef4 <USBD_LL_Start>
 80083e0:	4603      	mov	r3, r0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80083ea:	b480      	push	{r7}
 80083ec:	b083      	sub	sp, #12
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	460b      	mov	r3, r1
 800840a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800840c:	2303      	movs	r3, #3
 800840e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008416:	2b00      	cmp	r3, #0
 8008418:	d009      	beq.n	800842e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	78fa      	ldrb	r2, [r7, #3]
 8008424:	4611      	mov	r1, r2
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	4798      	blx	r3
 800842a:	4603      	mov	r3, r0
 800842c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800842e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	460b      	mov	r3, r1
 8008442:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800844a:	2b00      	cmp	r3, #0
 800844c:	d007      	beq.n	800845e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	78fa      	ldrb	r2, [r7, #3]
 8008458:	4611      	mov	r1, r2
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	4798      	blx	r3
  }

  return USBD_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	4618      	mov	r0, r3
 800847c:	f000 ff90 	bl	80093a0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800848e:	461a      	mov	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800849c:	f003 031f 	and.w	r3, r3, #31
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d01a      	beq.n	80084da <USBD_LL_SetupStage+0x72>
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d822      	bhi.n	80084ee <USBD_LL_SetupStage+0x86>
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d002      	beq.n	80084b2 <USBD_LL_SetupStage+0x4a>
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d00a      	beq.n	80084c6 <USBD_LL_SetupStage+0x5e>
 80084b0:	e01d      	b.n	80084ee <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084b8:	4619      	mov	r1, r3
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fa62 	bl	8008984 <USBD_StdDevReq>
 80084c0:	4603      	mov	r3, r0
 80084c2:	73fb      	strb	r3, [r7, #15]
      break;
 80084c4:	e020      	b.n	8008508 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084cc:	4619      	mov	r1, r3
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fac6 	bl	8008a60 <USBD_StdItfReq>
 80084d4:	4603      	mov	r3, r0
 80084d6:	73fb      	strb	r3, [r7, #15]
      break;
 80084d8:	e016      	b.n	8008508 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084e0:	4619      	mov	r1, r3
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fb05 	bl	8008af2 <USBD_StdEPReq>
 80084e8:	4603      	mov	r3, r0
 80084ea:	73fb      	strb	r3, [r7, #15]
      break;
 80084ec:	e00c      	b.n	8008508 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80084f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	4619      	mov	r1, r3
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f001 fd59 	bl	8009fb4 <USBD_LL_StallEP>
 8008502:	4603      	mov	r3, r0
 8008504:	73fb      	strb	r3, [r7, #15]
      break;
 8008506:	bf00      	nop
  }

  return ret;
 8008508:	7bfb      	ldrb	r3, [r7, #15]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b086      	sub	sp, #24
 8008516:	af00      	add	r7, sp, #0
 8008518:	60f8      	str	r0, [r7, #12]
 800851a:	460b      	mov	r3, r1
 800851c:	607a      	str	r2, [r7, #4]
 800851e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008520:	7afb      	ldrb	r3, [r7, #11]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d138      	bne.n	8008598 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800852c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008534:	2b03      	cmp	r3, #3
 8008536:	d14a      	bne.n	80085ce <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	689a      	ldr	r2, [r3, #8]
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	429a      	cmp	r2, r3
 8008542:	d913      	bls.n	800856c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	689a      	ldr	r2, [r3, #8]
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	1ad2      	subs	r2, r2, r3
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	68da      	ldr	r2, [r3, #12]
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	4293      	cmp	r3, r2
 800855c:	bf28      	it	cs
 800855e:	4613      	movcs	r3, r2
 8008560:	461a      	mov	r2, r3
 8008562:	6879      	ldr	r1, [r7, #4]
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f001 f80f 	bl	8009588 <USBD_CtlContinueRx>
 800856a:	e030      	b.n	80085ce <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008572:	b2db      	uxtb	r3, r3
 8008574:	2b03      	cmp	r3, #3
 8008576:	d10b      	bne.n	8008590 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d005      	beq.n	8008590 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f001 f80a 	bl	80095aa <USBD_CtlSendStatus>
 8008596:	e01a      	b.n	80085ce <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	2b03      	cmp	r3, #3
 80085a2:	d114      	bne.n	80085ce <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00e      	beq.n	80085ce <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	7afa      	ldrb	r2, [r7, #11]
 80085ba:	4611      	mov	r1, r2
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	4798      	blx	r3
 80085c0:	4603      	mov	r3, r0
 80085c2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80085c4:	7dfb      	ldrb	r3, [r7, #23]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80085ca:	7dfb      	ldrb	r3, [r7, #23]
 80085cc:	e000      	b.n	80085d0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3718      	adds	r7, #24
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	460b      	mov	r3, r1
 80085e2:	607a      	str	r2, [r7, #4]
 80085e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80085e6:	7afb      	ldrb	r3, [r7, #11]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d16b      	bne.n	80086c4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	3314      	adds	r3, #20
 80085f0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d156      	bne.n	80086aa <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	689a      	ldr	r2, [r3, #8]
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	429a      	cmp	r2, r3
 8008606:	d914      	bls.n	8008632 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	689a      	ldr	r2, [r3, #8]
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	1ad2      	subs	r2, r2, r3
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	461a      	mov	r2, r3
 800861c:	6879      	ldr	r1, [r7, #4]
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f000 ff84 	bl	800952c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008624:	2300      	movs	r3, #0
 8008626:	2200      	movs	r2, #0
 8008628:	2100      	movs	r1, #0
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f001 fd6c 	bl	800a108 <USBD_LL_PrepareReceive>
 8008630:	e03b      	b.n	80086aa <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	68da      	ldr	r2, [r3, #12]
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	429a      	cmp	r2, r3
 800863c:	d11c      	bne.n	8008678 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	685a      	ldr	r2, [r3, #4]
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008646:	429a      	cmp	r2, r3
 8008648:	d316      	bcc.n	8008678 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	685a      	ldr	r2, [r3, #4]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008654:	429a      	cmp	r2, r3
 8008656:	d20f      	bcs.n	8008678 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008658:	2200      	movs	r2, #0
 800865a:	2100      	movs	r1, #0
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f000 ff65 	bl	800952c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2200      	movs	r2, #0
 8008666:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800866a:	2300      	movs	r3, #0
 800866c:	2200      	movs	r2, #0
 800866e:	2100      	movs	r1, #0
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	f001 fd49 	bl	800a108 <USBD_LL_PrepareReceive>
 8008676:	e018      	b.n	80086aa <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800867e:	b2db      	uxtb	r3, r3
 8008680:	2b03      	cmp	r3, #3
 8008682:	d10b      	bne.n	800869c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d005      	beq.n	800869c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800869c:	2180      	movs	r1, #128	; 0x80
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f001 fc88 	bl	8009fb4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f000 ff93 	bl	80095d0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d122      	bne.n	80086fa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f7ff fe98 	bl	80083ea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80086c2:	e01a      	b.n	80086fa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	d114      	bne.n	80086fa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086d6:	695b      	ldr	r3, [r3, #20]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00e      	beq.n	80086fa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086e2:	695b      	ldr	r3, [r3, #20]
 80086e4:	7afa      	ldrb	r2, [r7, #11]
 80086e6:	4611      	mov	r1, r2
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	4798      	blx	r3
 80086ec:	4603      	mov	r3, r0
 80086ee:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80086f0:	7dfb      	ldrb	r3, [r7, #23]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d001      	beq.n	80086fa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80086f6:	7dfb      	ldrb	r3, [r7, #23]
 80086f8:	e000      	b.n	80086fc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3718      	adds	r7, #24
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008730:	2b00      	cmp	r3, #0
 8008732:	d101      	bne.n	8008738 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008734:	2303      	movs	r3, #3
 8008736:	e02f      	b.n	8008798 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00f      	beq.n	8008762 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d009      	beq.n	8008762 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	6852      	ldr	r2, [r2, #4]
 800875a:	b2d2      	uxtb	r2, r2
 800875c:	4611      	mov	r1, r2
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008762:	2340      	movs	r3, #64	; 0x40
 8008764:	2200      	movs	r2, #0
 8008766:	2100      	movs	r1, #0
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f001 fbde 	bl	8009f2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2240      	movs	r2, #64	; 0x40
 800877a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800877e:	2340      	movs	r3, #64	; 0x40
 8008780:	2200      	movs	r2, #0
 8008782:	2180      	movs	r1, #128	; 0x80
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f001 fbd0 	bl	8009f2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2201      	movs	r2, #1
 800878e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2240      	movs	r2, #64	; 0x40
 8008794:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	460b      	mov	r3, r1
 80087aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	78fa      	ldrb	r2, [r7, #3]
 80087b0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ce:	b2da      	uxtb	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2204      	movs	r2, #4
 80087da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	2b04      	cmp	r3, #4
 80087fe:	d106      	bne.n	800880e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008806:	b2da      	uxtb	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800882a:	2b00      	cmp	r3, #0
 800882c:	d101      	bne.n	8008832 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800882e:	2303      	movs	r3, #3
 8008830:	e012      	b.n	8008858 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b03      	cmp	r3, #3
 800883c:	d10b      	bne.n	8008856 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008844:	69db      	ldr	r3, [r3, #28]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d005      	beq.n	8008856 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008850:	69db      	ldr	r3, [r3, #28]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3708      	adds	r7, #8
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	460b      	mov	r3, r1
 800886a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008876:	2303      	movs	r3, #3
 8008878:	e014      	b.n	80088a4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008880:	b2db      	uxtb	r3, r3
 8008882:	2b03      	cmp	r3, #3
 8008884:	d10d      	bne.n	80088a2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800888c:	6a1b      	ldr	r3, [r3, #32]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d007      	beq.n	80088a2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008898:	6a1b      	ldr	r3, [r3, #32]
 800889a:	78fa      	ldrb	r2, [r7, #3]
 800889c:	4611      	mov	r1, r2
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	460b      	mov	r3, r1
 80088b6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d101      	bne.n	80088c6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e014      	b.n	80088f0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b03      	cmp	r3, #3
 80088d0:	d10d      	bne.n	80088ee <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d007      	beq.n	80088ee <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e6:	78fa      	ldrb	r2, [r7, #3]
 80088e8:	4611      	mov	r1, r2
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	370c      	adds	r7, #12
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr

0800890e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b082      	sub	sp, #8
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2201      	movs	r2, #1
 800891a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008924:	2b00      	cmp	r3, #0
 8008926:	d009      	beq.n	800893c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	6852      	ldr	r2, [r2, #4]
 8008934:	b2d2      	uxtb	r2, r2
 8008936:	4611      	mov	r1, r2
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	4798      	blx	r3
  }

  return USBD_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008946:	b480      	push	{r7}
 8008948:	b087      	sub	sp, #28
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	3301      	adds	r3, #1
 800895c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008964:	8a3b      	ldrh	r3, [r7, #16]
 8008966:	021b      	lsls	r3, r3, #8
 8008968:	b21a      	sxth	r2, r3
 800896a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800896e:	4313      	orrs	r3, r2
 8008970:	b21b      	sxth	r3, r3
 8008972:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008974:	89fb      	ldrh	r3, [r7, #14]
}
 8008976:	4618      	mov	r0, r3
 8008978:	371c      	adds	r7, #28
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
	...

08008984 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800898e:	2300      	movs	r3, #0
 8008990:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800899a:	2b40      	cmp	r3, #64	; 0x40
 800899c:	d005      	beq.n	80089aa <USBD_StdDevReq+0x26>
 800899e:	2b40      	cmp	r3, #64	; 0x40
 80089a0:	d853      	bhi.n	8008a4a <USBD_StdDevReq+0xc6>
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00b      	beq.n	80089be <USBD_StdDevReq+0x3a>
 80089a6:	2b20      	cmp	r3, #32
 80089a8:	d14f      	bne.n	8008a4a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	6839      	ldr	r1, [r7, #0]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	4798      	blx	r3
 80089b8:	4603      	mov	r3, r0
 80089ba:	73fb      	strb	r3, [r7, #15]
      break;
 80089bc:	e04a      	b.n	8008a54 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	785b      	ldrb	r3, [r3, #1]
 80089c2:	2b09      	cmp	r3, #9
 80089c4:	d83b      	bhi.n	8008a3e <USBD_StdDevReq+0xba>
 80089c6:	a201      	add	r2, pc, #4	; (adr r2, 80089cc <USBD_StdDevReq+0x48>)
 80089c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089cc:	08008a21 	.word	0x08008a21
 80089d0:	08008a35 	.word	0x08008a35
 80089d4:	08008a3f 	.word	0x08008a3f
 80089d8:	08008a2b 	.word	0x08008a2b
 80089dc:	08008a3f 	.word	0x08008a3f
 80089e0:	080089ff 	.word	0x080089ff
 80089e4:	080089f5 	.word	0x080089f5
 80089e8:	08008a3f 	.word	0x08008a3f
 80089ec:	08008a17 	.word	0x08008a17
 80089f0:	08008a09 	.word	0x08008a09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f9de 	bl	8008db8 <USBD_GetDescriptor>
          break;
 80089fc:	e024      	b.n	8008a48 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fb43 	bl	800908c <USBD_SetAddress>
          break;
 8008a06:	e01f      	b.n	8008a48 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fb82 	bl	8009114 <USBD_SetConfig>
 8008a10:	4603      	mov	r3, r0
 8008a12:	73fb      	strb	r3, [r7, #15]
          break;
 8008a14:	e018      	b.n	8008a48 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fc21 	bl	8009260 <USBD_GetConfig>
          break;
 8008a1e:	e013      	b.n	8008a48 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a20:	6839      	ldr	r1, [r7, #0]
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 fc52 	bl	80092cc <USBD_GetStatus>
          break;
 8008a28:	e00e      	b.n	8008a48 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a2a:	6839      	ldr	r1, [r7, #0]
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 fc81 	bl	8009334 <USBD_SetFeature>
          break;
 8008a32:	e009      	b.n	8008a48 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a34:	6839      	ldr	r1, [r7, #0]
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 fc90 	bl	800935c <USBD_ClrFeature>
          break;
 8008a3c:	e004      	b.n	8008a48 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008a3e:	6839      	ldr	r1, [r7, #0]
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 fce7 	bl	8009414 <USBD_CtlError>
          break;
 8008a46:	bf00      	nop
      }
      break;
 8008a48:	e004      	b.n	8008a54 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fce1 	bl	8009414 <USBD_CtlError>
      break;
 8008a52:	bf00      	nop
  }

  return ret;
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop

08008a60 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a76:	2b40      	cmp	r3, #64	; 0x40
 8008a78:	d005      	beq.n	8008a86 <USBD_StdItfReq+0x26>
 8008a7a:	2b40      	cmp	r3, #64	; 0x40
 8008a7c:	d82f      	bhi.n	8008ade <USBD_StdItfReq+0x7e>
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d001      	beq.n	8008a86 <USBD_StdItfReq+0x26>
 8008a82:	2b20      	cmp	r3, #32
 8008a84:	d12b      	bne.n	8008ade <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d81d      	bhi.n	8008ad0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	889b      	ldrh	r3, [r3, #4]
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d813      	bhi.n	8008ac6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	6839      	ldr	r1, [r7, #0]
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	4798      	blx	r3
 8008aac:	4603      	mov	r3, r0
 8008aae:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	88db      	ldrh	r3, [r3, #6]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d110      	bne.n	8008ada <USBD_StdItfReq+0x7a>
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10d      	bne.n	8008ada <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 fd73 	bl	80095aa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008ac4:	e009      	b.n	8008ada <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008ac6:	6839      	ldr	r1, [r7, #0]
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 fca3 	bl	8009414 <USBD_CtlError>
          break;
 8008ace:	e004      	b.n	8008ada <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008ad0:	6839      	ldr	r1, [r7, #0]
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fc9e 	bl	8009414 <USBD_CtlError>
          break;
 8008ad8:	e000      	b.n	8008adc <USBD_StdItfReq+0x7c>
          break;
 8008ada:	bf00      	nop
      }
      break;
 8008adc:	e004      	b.n	8008ae8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008ade:	6839      	ldr	r1, [r7, #0]
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 fc97 	bl	8009414 <USBD_CtlError>
      break;
 8008ae6:	bf00      	nop
  }

  return ret;
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b084      	sub	sp, #16
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008afc:	2300      	movs	r3, #0
 8008afe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	889b      	ldrh	r3, [r3, #4]
 8008b04:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b0e:	2b40      	cmp	r3, #64	; 0x40
 8008b10:	d007      	beq.n	8008b22 <USBD_StdEPReq+0x30>
 8008b12:	2b40      	cmp	r3, #64	; 0x40
 8008b14:	f200 8145 	bhi.w	8008da2 <USBD_StdEPReq+0x2b0>
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00c      	beq.n	8008b36 <USBD_StdEPReq+0x44>
 8008b1c:	2b20      	cmp	r3, #32
 8008b1e:	f040 8140 	bne.w	8008da2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	4798      	blx	r3
 8008b30:	4603      	mov	r3, r0
 8008b32:	73fb      	strb	r3, [r7, #15]
      break;
 8008b34:	e13a      	b.n	8008dac <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	785b      	ldrb	r3, [r3, #1]
 8008b3a:	2b03      	cmp	r3, #3
 8008b3c:	d007      	beq.n	8008b4e <USBD_StdEPReq+0x5c>
 8008b3e:	2b03      	cmp	r3, #3
 8008b40:	f300 8129 	bgt.w	8008d96 <USBD_StdEPReq+0x2a4>
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d07f      	beq.n	8008c48 <USBD_StdEPReq+0x156>
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d03c      	beq.n	8008bc6 <USBD_StdEPReq+0xd4>
 8008b4c:	e123      	b.n	8008d96 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d002      	beq.n	8008b60 <USBD_StdEPReq+0x6e>
 8008b5a:	2b03      	cmp	r3, #3
 8008b5c:	d016      	beq.n	8008b8c <USBD_StdEPReq+0x9a>
 8008b5e:	e02c      	b.n	8008bba <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b60:	7bbb      	ldrb	r3, [r7, #14]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00d      	beq.n	8008b82 <USBD_StdEPReq+0x90>
 8008b66:	7bbb      	ldrb	r3, [r7, #14]
 8008b68:	2b80      	cmp	r3, #128	; 0x80
 8008b6a:	d00a      	beq.n	8008b82 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b6c:	7bbb      	ldrb	r3, [r7, #14]
 8008b6e:	4619      	mov	r1, r3
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f001 fa1f 	bl	8009fb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b76:	2180      	movs	r1, #128	; 0x80
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f001 fa1b 	bl	8009fb4 <USBD_LL_StallEP>
 8008b7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b80:	e020      	b.n	8008bc4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008b82:	6839      	ldr	r1, [r7, #0]
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 fc45 	bl	8009414 <USBD_CtlError>
              break;
 8008b8a:	e01b      	b.n	8008bc4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	885b      	ldrh	r3, [r3, #2]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10e      	bne.n	8008bb2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b94:	7bbb      	ldrb	r3, [r7, #14]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00b      	beq.n	8008bb2 <USBD_StdEPReq+0xc0>
 8008b9a:	7bbb      	ldrb	r3, [r7, #14]
 8008b9c:	2b80      	cmp	r3, #128	; 0x80
 8008b9e:	d008      	beq.n	8008bb2 <USBD_StdEPReq+0xc0>
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	88db      	ldrh	r3, [r3, #6]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d104      	bne.n	8008bb2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ba8:	7bbb      	ldrb	r3, [r7, #14]
 8008baa:	4619      	mov	r1, r3
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f001 fa01 	bl	8009fb4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 fcf9 	bl	80095aa <USBD_CtlSendStatus>

              break;
 8008bb8:	e004      	b.n	8008bc4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008bba:	6839      	ldr	r1, [r7, #0]
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 fc29 	bl	8009414 <USBD_CtlError>
              break;
 8008bc2:	bf00      	nop
          }
          break;
 8008bc4:	e0ec      	b.n	8008da0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d002      	beq.n	8008bd8 <USBD_StdEPReq+0xe6>
 8008bd2:	2b03      	cmp	r3, #3
 8008bd4:	d016      	beq.n	8008c04 <USBD_StdEPReq+0x112>
 8008bd6:	e030      	b.n	8008c3a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bd8:	7bbb      	ldrb	r3, [r7, #14]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00d      	beq.n	8008bfa <USBD_StdEPReq+0x108>
 8008bde:	7bbb      	ldrb	r3, [r7, #14]
 8008be0:	2b80      	cmp	r3, #128	; 0x80
 8008be2:	d00a      	beq.n	8008bfa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008be4:	7bbb      	ldrb	r3, [r7, #14]
 8008be6:	4619      	mov	r1, r3
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f001 f9e3 	bl	8009fb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bee:	2180      	movs	r1, #128	; 0x80
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f001 f9df 	bl	8009fb4 <USBD_LL_StallEP>
 8008bf6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bf8:	e025      	b.n	8008c46 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008bfa:	6839      	ldr	r1, [r7, #0]
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 fc09 	bl	8009414 <USBD_CtlError>
              break;
 8008c02:	e020      	b.n	8008c46 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	885b      	ldrh	r3, [r3, #2]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d11b      	bne.n	8008c44 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008c0c:	7bbb      	ldrb	r3, [r7, #14]
 8008c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d004      	beq.n	8008c20 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008c16:	7bbb      	ldrb	r3, [r7, #14]
 8008c18:	4619      	mov	r1, r3
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f001 f9e9 	bl	8009ff2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fcc2 	bl	80095aa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	6839      	ldr	r1, [r7, #0]
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	4798      	blx	r3
 8008c34:	4603      	mov	r3, r0
 8008c36:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008c38:	e004      	b.n	8008c44 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fbe9 	bl	8009414 <USBD_CtlError>
              break;
 8008c42:	e000      	b.n	8008c46 <USBD_StdEPReq+0x154>
              break;
 8008c44:	bf00      	nop
          }
          break;
 8008c46:	e0ab      	b.n	8008da0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d002      	beq.n	8008c5a <USBD_StdEPReq+0x168>
 8008c54:	2b03      	cmp	r3, #3
 8008c56:	d032      	beq.n	8008cbe <USBD_StdEPReq+0x1cc>
 8008c58:	e097      	b.n	8008d8a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c5a:	7bbb      	ldrb	r3, [r7, #14]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d007      	beq.n	8008c70 <USBD_StdEPReq+0x17e>
 8008c60:	7bbb      	ldrb	r3, [r7, #14]
 8008c62:	2b80      	cmp	r3, #128	; 0x80
 8008c64:	d004      	beq.n	8008c70 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008c66:	6839      	ldr	r1, [r7, #0]
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 fbd3 	bl	8009414 <USBD_CtlError>
                break;
 8008c6e:	e091      	b.n	8008d94 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	da0b      	bge.n	8008c90 <USBD_StdEPReq+0x19e>
 8008c78:	7bbb      	ldrb	r3, [r7, #14]
 8008c7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c7e:	4613      	mov	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4413      	add	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	3310      	adds	r3, #16
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	3304      	adds	r3, #4
 8008c8e:	e00b      	b.n	8008ca8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c90:	7bbb      	ldrb	r3, [r7, #14]
 8008c92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c96:	4613      	mov	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4413      	add	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	3304      	adds	r3, #4
 8008ca8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	2200      	movs	r2, #0
 8008cae:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fc1d 	bl	80094f6 <USBD_CtlSendData>
              break;
 8008cbc:	e06a      	b.n	8008d94 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008cbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	da11      	bge.n	8008cea <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008cc6:	7bbb      	ldrb	r3, [r7, #14]
 8008cc8:	f003 020f 	and.w	r2, r3, #15
 8008ccc:	6879      	ldr	r1, [r7, #4]
 8008cce:	4613      	mov	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4413      	add	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	440b      	add	r3, r1
 8008cd8:	3324      	adds	r3, #36	; 0x24
 8008cda:	881b      	ldrh	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d117      	bne.n	8008d10 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fb96 	bl	8009414 <USBD_CtlError>
                  break;
 8008ce8:	e054      	b.n	8008d94 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008cea:	7bbb      	ldrb	r3, [r7, #14]
 8008cec:	f003 020f 	and.w	r2, r3, #15
 8008cf0:	6879      	ldr	r1, [r7, #4]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4413      	add	r3, r2
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	440b      	add	r3, r1
 8008cfc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d00:	881b      	ldrh	r3, [r3, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d104      	bne.n	8008d10 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008d06:	6839      	ldr	r1, [r7, #0]
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fb83 	bl	8009414 <USBD_CtlError>
                  break;
 8008d0e:	e041      	b.n	8008d94 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	da0b      	bge.n	8008d30 <USBD_StdEPReq+0x23e>
 8008d18:	7bbb      	ldrb	r3, [r7, #14]
 8008d1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d1e:	4613      	mov	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	4413      	add	r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	3310      	adds	r3, #16
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	e00b      	b.n	8008d48 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d30:	7bbb      	ldrb	r3, [r7, #14]
 8008d32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d36:	4613      	mov	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4413      	add	r3, r2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	4413      	add	r3, r2
 8008d46:	3304      	adds	r3, #4
 8008d48:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d4a:	7bbb      	ldrb	r3, [r7, #14]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d002      	beq.n	8008d56 <USBD_StdEPReq+0x264>
 8008d50:	7bbb      	ldrb	r3, [r7, #14]
 8008d52:	2b80      	cmp	r3, #128	; 0x80
 8008d54:	d103      	bne.n	8008d5e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	601a      	str	r2, [r3, #0]
 8008d5c:	e00e      	b.n	8008d7c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008d5e:	7bbb      	ldrb	r3, [r7, #14]
 8008d60:	4619      	mov	r1, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f001 f964 	bl	800a030 <USBD_LL_IsStallEP>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d003      	beq.n	8008d76 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	2201      	movs	r2, #1
 8008d72:	601a      	str	r2, [r3, #0]
 8008d74:	e002      	b.n	8008d7c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	2202      	movs	r2, #2
 8008d80:	4619      	mov	r1, r3
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fbb7 	bl	80094f6 <USBD_CtlSendData>
              break;
 8008d88:	e004      	b.n	8008d94 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fb41 	bl	8009414 <USBD_CtlError>
              break;
 8008d92:	bf00      	nop
          }
          break;
 8008d94:	e004      	b.n	8008da0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008d96:	6839      	ldr	r1, [r7, #0]
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fb3b 	bl	8009414 <USBD_CtlError>
          break;
 8008d9e:	bf00      	nop
      }
      break;
 8008da0:	e004      	b.n	8008dac <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008da2:	6839      	ldr	r1, [r7, #0]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 fb35 	bl	8009414 <USBD_CtlError>
      break;
 8008daa:	bf00      	nop
  }

  return ret;
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
	...

08008db8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	885b      	ldrh	r3, [r3, #2]
 8008dd2:	0a1b      	lsrs	r3, r3, #8
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	2b06      	cmp	r3, #6
 8008dda:	f200 8128 	bhi.w	800902e <USBD_GetDescriptor+0x276>
 8008dde:	a201      	add	r2, pc, #4	; (adr r2, 8008de4 <USBD_GetDescriptor+0x2c>)
 8008de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de4:	08008e01 	.word	0x08008e01
 8008de8:	08008e19 	.word	0x08008e19
 8008dec:	08008e59 	.word	0x08008e59
 8008df0:	0800902f 	.word	0x0800902f
 8008df4:	0800902f 	.word	0x0800902f
 8008df8:	08008fcf 	.word	0x08008fcf
 8008dfc:	08008ffb 	.word	0x08008ffb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	7c12      	ldrb	r2, [r2, #16]
 8008e0c:	f107 0108 	add.w	r1, r7, #8
 8008e10:	4610      	mov	r0, r2
 8008e12:	4798      	blx	r3
 8008e14:	60f8      	str	r0, [r7, #12]
      break;
 8008e16:	e112      	b.n	800903e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	7c1b      	ldrb	r3, [r3, #16]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10d      	bne.n	8008e3c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e28:	f107 0208 	add.w	r2, r7, #8
 8008e2c:	4610      	mov	r0, r2
 8008e2e:	4798      	blx	r3
 8008e30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	3301      	adds	r3, #1
 8008e36:	2202      	movs	r2, #2
 8008e38:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008e3a:	e100      	b.n	800903e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e44:	f107 0208 	add.w	r2, r7, #8
 8008e48:	4610      	mov	r0, r2
 8008e4a:	4798      	blx	r3
 8008e4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	3301      	adds	r3, #1
 8008e52:	2202      	movs	r2, #2
 8008e54:	701a      	strb	r2, [r3, #0]
      break;
 8008e56:	e0f2      	b.n	800903e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	885b      	ldrh	r3, [r3, #2]
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	2b05      	cmp	r3, #5
 8008e60:	f200 80ac 	bhi.w	8008fbc <USBD_GetDescriptor+0x204>
 8008e64:	a201      	add	r2, pc, #4	; (adr r2, 8008e6c <USBD_GetDescriptor+0xb4>)
 8008e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e6a:	bf00      	nop
 8008e6c:	08008e85 	.word	0x08008e85
 8008e70:	08008eb9 	.word	0x08008eb9
 8008e74:	08008eed 	.word	0x08008eed
 8008e78:	08008f21 	.word	0x08008f21
 8008e7c:	08008f55 	.word	0x08008f55
 8008e80:	08008f89 	.word	0x08008f89
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00b      	beq.n	8008ea8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	7c12      	ldrb	r2, [r2, #16]
 8008e9c:	f107 0108 	add.w	r1, r7, #8
 8008ea0:	4610      	mov	r0, r2
 8008ea2:	4798      	blx	r3
 8008ea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ea6:	e091      	b.n	8008fcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fab2 	bl	8009414 <USBD_CtlError>
            err++;
 8008eb0:	7afb      	ldrb	r3, [r7, #11]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	72fb      	strb	r3, [r7, #11]
          break;
 8008eb6:	e089      	b.n	8008fcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00b      	beq.n	8008edc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	7c12      	ldrb	r2, [r2, #16]
 8008ed0:	f107 0108 	add.w	r1, r7, #8
 8008ed4:	4610      	mov	r0, r2
 8008ed6:	4798      	blx	r3
 8008ed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eda:	e077      	b.n	8008fcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fa98 	bl	8009414 <USBD_CtlError>
            err++;
 8008ee4:	7afb      	ldrb	r3, [r7, #11]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	72fb      	strb	r3, [r7, #11]
          break;
 8008eea:	e06f      	b.n	8008fcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00b      	beq.n	8008f10 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	7c12      	ldrb	r2, [r2, #16]
 8008f04:	f107 0108 	add.w	r1, r7, #8
 8008f08:	4610      	mov	r0, r2
 8008f0a:	4798      	blx	r3
 8008f0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f0e:	e05d      	b.n	8008fcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f10:	6839      	ldr	r1, [r7, #0]
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 fa7e 	bl	8009414 <USBD_CtlError>
            err++;
 8008f18:	7afb      	ldrb	r3, [r7, #11]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f1e:	e055      	b.n	8008fcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00b      	beq.n	8008f44 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	7c12      	ldrb	r2, [r2, #16]
 8008f38:	f107 0108 	add.w	r1, r7, #8
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	4798      	blx	r3
 8008f40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f42:	e043      	b.n	8008fcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fa64 	bl	8009414 <USBD_CtlError>
            err++;
 8008f4c:	7afb      	ldrb	r3, [r7, #11]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	72fb      	strb	r3, [r7, #11]
          break;
 8008f52:	e03b      	b.n	8008fcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f5a:	695b      	ldr	r3, [r3, #20]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00b      	beq.n	8008f78 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	7c12      	ldrb	r2, [r2, #16]
 8008f6c:	f107 0108 	add.w	r1, r7, #8
 8008f70:	4610      	mov	r0, r2
 8008f72:	4798      	blx	r3
 8008f74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f76:	e029      	b.n	8008fcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f78:	6839      	ldr	r1, [r7, #0]
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fa4a 	bl	8009414 <USBD_CtlError>
            err++;
 8008f80:	7afb      	ldrb	r3, [r7, #11]
 8008f82:	3301      	adds	r3, #1
 8008f84:	72fb      	strb	r3, [r7, #11]
          break;
 8008f86:	e021      	b.n	8008fcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00b      	beq.n	8008fac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	7c12      	ldrb	r2, [r2, #16]
 8008fa0:	f107 0108 	add.w	r1, r7, #8
 8008fa4:	4610      	mov	r0, r2
 8008fa6:	4798      	blx	r3
 8008fa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008faa:	e00f      	b.n	8008fcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fa30 	bl	8009414 <USBD_CtlError>
            err++;
 8008fb4:	7afb      	ldrb	r3, [r7, #11]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	72fb      	strb	r3, [r7, #11]
          break;
 8008fba:	e007      	b.n	8008fcc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008fbc:	6839      	ldr	r1, [r7, #0]
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fa28 	bl	8009414 <USBD_CtlError>
          err++;
 8008fc4:	7afb      	ldrb	r3, [r7, #11]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008fca:	bf00      	nop
      }
      break;
 8008fcc:	e037      	b.n	800903e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	7c1b      	ldrb	r3, [r3, #16]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d109      	bne.n	8008fea <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fde:	f107 0208 	add.w	r2, r7, #8
 8008fe2:	4610      	mov	r0, r2
 8008fe4:	4798      	blx	r3
 8008fe6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fe8:	e029      	b.n	800903e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008fea:	6839      	ldr	r1, [r7, #0]
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 fa11 	bl	8009414 <USBD_CtlError>
        err++;
 8008ff2:	7afb      	ldrb	r3, [r7, #11]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ff8:	e021      	b.n	800903e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	7c1b      	ldrb	r3, [r3, #16]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10d      	bne.n	800901e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800900a:	f107 0208 	add.w	r2, r7, #8
 800900e:	4610      	mov	r0, r2
 8009010:	4798      	blx	r3
 8009012:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	3301      	adds	r3, #1
 8009018:	2207      	movs	r2, #7
 800901a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800901c:	e00f      	b.n	800903e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800901e:	6839      	ldr	r1, [r7, #0]
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 f9f7 	bl	8009414 <USBD_CtlError>
        err++;
 8009026:	7afb      	ldrb	r3, [r7, #11]
 8009028:	3301      	adds	r3, #1
 800902a:	72fb      	strb	r3, [r7, #11]
      break;
 800902c:	e007      	b.n	800903e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800902e:	6839      	ldr	r1, [r7, #0]
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 f9ef 	bl	8009414 <USBD_CtlError>
      err++;
 8009036:	7afb      	ldrb	r3, [r7, #11]
 8009038:	3301      	adds	r3, #1
 800903a:	72fb      	strb	r3, [r7, #11]
      break;
 800903c:	bf00      	nop
  }

  if (err != 0U)
 800903e:	7afb      	ldrb	r3, [r7, #11]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d11e      	bne.n	8009082 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	88db      	ldrh	r3, [r3, #6]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d016      	beq.n	800907a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800904c:	893b      	ldrh	r3, [r7, #8]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00e      	beq.n	8009070 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	88da      	ldrh	r2, [r3, #6]
 8009056:	893b      	ldrh	r3, [r7, #8]
 8009058:	4293      	cmp	r3, r2
 800905a:	bf28      	it	cs
 800905c:	4613      	movcs	r3, r2
 800905e:	b29b      	uxth	r3, r3
 8009060:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009062:	893b      	ldrh	r3, [r7, #8]
 8009064:	461a      	mov	r2, r3
 8009066:	68f9      	ldr	r1, [r7, #12]
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fa44 	bl	80094f6 <USBD_CtlSendData>
 800906e:	e009      	b.n	8009084 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009070:	6839      	ldr	r1, [r7, #0]
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f9ce 	bl	8009414 <USBD_CtlError>
 8009078:	e004      	b.n	8009084 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 fa95 	bl	80095aa <USBD_CtlSendStatus>
 8009080:	e000      	b.n	8009084 <USBD_GetDescriptor+0x2cc>
    return;
 8009082:	bf00      	nop
  }
}
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop

0800908c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	889b      	ldrh	r3, [r3, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d131      	bne.n	8009102 <USBD_SetAddress+0x76>
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	88db      	ldrh	r3, [r3, #6]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d12d      	bne.n	8009102 <USBD_SetAddress+0x76>
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	885b      	ldrh	r3, [r3, #2]
 80090aa:	2b7f      	cmp	r3, #127	; 0x7f
 80090ac:	d829      	bhi.n	8009102 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	885b      	ldrh	r3, [r3, #2]
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	2b03      	cmp	r3, #3
 80090c4:	d104      	bne.n	80090d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 f9a3 	bl	8009414 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ce:	e01d      	b.n	800910c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	7bfa      	ldrb	r2, [r7, #15]
 80090d4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
 80090da:	4619      	mov	r1, r3
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 ffd3 	bl	800a088 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 fa61 	bl	80095aa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d004      	beq.n	80090f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2202      	movs	r2, #2
 80090f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090f6:	e009      	b.n	800910c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009100:	e004      	b.n	800910c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009102:	6839      	ldr	r1, [r7, #0]
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 f985 	bl	8009414 <USBD_CtlError>
  }
}
 800910a:	bf00      	nop
 800910c:	bf00      	nop
 800910e:	3710      	adds	r7, #16
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800911e:	2300      	movs	r3, #0
 8009120:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	885b      	ldrh	r3, [r3, #2]
 8009126:	b2da      	uxtb	r2, r3
 8009128:	4b4c      	ldr	r3, [pc, #304]	; (800925c <USBD_SetConfig+0x148>)
 800912a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800912c:	4b4b      	ldr	r3, [pc, #300]	; (800925c <USBD_SetConfig+0x148>)
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	2b01      	cmp	r3, #1
 8009132:	d905      	bls.n	8009140 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009134:	6839      	ldr	r1, [r7, #0]
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f96c 	bl	8009414 <USBD_CtlError>
    return USBD_FAIL;
 800913c:	2303      	movs	r3, #3
 800913e:	e088      	b.n	8009252 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009146:	b2db      	uxtb	r3, r3
 8009148:	2b02      	cmp	r3, #2
 800914a:	d002      	beq.n	8009152 <USBD_SetConfig+0x3e>
 800914c:	2b03      	cmp	r3, #3
 800914e:	d025      	beq.n	800919c <USBD_SetConfig+0x88>
 8009150:	e071      	b.n	8009236 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009152:	4b42      	ldr	r3, [pc, #264]	; (800925c <USBD_SetConfig+0x148>)
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d01c      	beq.n	8009194 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800915a:	4b40      	ldr	r3, [pc, #256]	; (800925c <USBD_SetConfig+0x148>)
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	461a      	mov	r2, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009164:	4b3d      	ldr	r3, [pc, #244]	; (800925c <USBD_SetConfig+0x148>)
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	4619      	mov	r1, r3
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f7ff f948 	bl	8008400 <USBD_SetClassConfig>
 8009170:	4603      	mov	r3, r0
 8009172:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009174:	7bfb      	ldrb	r3, [r7, #15]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d004      	beq.n	8009184 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800917a:	6839      	ldr	r1, [r7, #0]
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 f949 	bl	8009414 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009182:	e065      	b.n	8009250 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 fa10 	bl	80095aa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2203      	movs	r2, #3
 800918e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009192:	e05d      	b.n	8009250 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 fa08 	bl	80095aa <USBD_CtlSendStatus>
      break;
 800919a:	e059      	b.n	8009250 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800919c:	4b2f      	ldr	r3, [pc, #188]	; (800925c <USBD_SetConfig+0x148>)
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d112      	bne.n	80091ca <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2202      	movs	r2, #2
 80091a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80091ac:	4b2b      	ldr	r3, [pc, #172]	; (800925c <USBD_SetConfig+0x148>)
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	461a      	mov	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80091b6:	4b29      	ldr	r3, [pc, #164]	; (800925c <USBD_SetConfig+0x148>)
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	4619      	mov	r1, r3
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f7ff f93b 	bl	8008438 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f9f1 	bl	80095aa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80091c8:	e042      	b.n	8009250 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80091ca:	4b24      	ldr	r3, [pc, #144]	; (800925c <USBD_SetConfig+0x148>)
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	461a      	mov	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d02a      	beq.n	800922e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	4619      	mov	r1, r3
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f7ff f929 	bl	8008438 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80091e6:	4b1d      	ldr	r3, [pc, #116]	; (800925c <USBD_SetConfig+0x148>)
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	461a      	mov	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80091f0:	4b1a      	ldr	r3, [pc, #104]	; (800925c <USBD_SetConfig+0x148>)
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	4619      	mov	r1, r3
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f7ff f902 	bl	8008400 <USBD_SetClassConfig>
 80091fc:	4603      	mov	r3, r0
 80091fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009200:	7bfb      	ldrb	r3, [r7, #15]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00f      	beq.n	8009226 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009206:	6839      	ldr	r1, [r7, #0]
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 f903 	bl	8009414 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	b2db      	uxtb	r3, r3
 8009214:	4619      	mov	r1, r3
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f7ff f90e 	bl	8008438 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2202      	movs	r2, #2
 8009220:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009224:	e014      	b.n	8009250 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f9bf 	bl	80095aa <USBD_CtlSendStatus>
      break;
 800922c:	e010      	b.n	8009250 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f9bb 	bl	80095aa <USBD_CtlSendStatus>
      break;
 8009234:	e00c      	b.n	8009250 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009236:	6839      	ldr	r1, [r7, #0]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f8eb 	bl	8009414 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800923e:	4b07      	ldr	r3, [pc, #28]	; (800925c <USBD_SetConfig+0x148>)
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	4619      	mov	r1, r3
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f7ff f8f7 	bl	8008438 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800924a:	2303      	movs	r3, #3
 800924c:	73fb      	strb	r3, [r7, #15]
      break;
 800924e:	bf00      	nop
  }

  return ret;
 8009250:	7bfb      	ldrb	r3, [r7, #15]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	20000624 	.word	0x20000624

08009260 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	88db      	ldrh	r3, [r3, #6]
 800926e:	2b01      	cmp	r3, #1
 8009270:	d004      	beq.n	800927c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009272:	6839      	ldr	r1, [r7, #0]
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 f8cd 	bl	8009414 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800927a:	e023      	b.n	80092c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009282:	b2db      	uxtb	r3, r3
 8009284:	2b02      	cmp	r3, #2
 8009286:	dc02      	bgt.n	800928e <USBD_GetConfig+0x2e>
 8009288:	2b00      	cmp	r3, #0
 800928a:	dc03      	bgt.n	8009294 <USBD_GetConfig+0x34>
 800928c:	e015      	b.n	80092ba <USBD_GetConfig+0x5a>
 800928e:	2b03      	cmp	r3, #3
 8009290:	d00b      	beq.n	80092aa <USBD_GetConfig+0x4a>
 8009292:	e012      	b.n	80092ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	3308      	adds	r3, #8
 800929e:	2201      	movs	r2, #1
 80092a0:	4619      	mov	r1, r3
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 f927 	bl	80094f6 <USBD_CtlSendData>
        break;
 80092a8:	e00c      	b.n	80092c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	3304      	adds	r3, #4
 80092ae:	2201      	movs	r2, #1
 80092b0:	4619      	mov	r1, r3
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 f91f 	bl	80094f6 <USBD_CtlSendData>
        break;
 80092b8:	e004      	b.n	80092c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80092ba:	6839      	ldr	r1, [r7, #0]
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 f8a9 	bl	8009414 <USBD_CtlError>
        break;
 80092c2:	bf00      	nop
}
 80092c4:	bf00      	nop
 80092c6:	3708      	adds	r7, #8
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	3b01      	subs	r3, #1
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d81e      	bhi.n	8009322 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	88db      	ldrh	r3, [r3, #6]
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d004      	beq.n	80092f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80092ec:	6839      	ldr	r1, [r7, #0]
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 f890 	bl	8009414 <USBD_CtlError>
        break;
 80092f4:	e01a      	b.n	800932c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009302:	2b00      	cmp	r3, #0
 8009304:	d005      	beq.n	8009312 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	f043 0202 	orr.w	r2, r3, #2
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	330c      	adds	r3, #12
 8009316:	2202      	movs	r2, #2
 8009318:	4619      	mov	r1, r3
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f8eb 	bl	80094f6 <USBD_CtlSendData>
      break;
 8009320:	e004      	b.n	800932c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009322:	6839      	ldr	r1, [r7, #0]
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 f875 	bl	8009414 <USBD_CtlError>
      break;
 800932a:	bf00      	nop
  }
}
 800932c:	bf00      	nop
 800932e:	3708      	adds	r7, #8
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	885b      	ldrh	r3, [r3, #2]
 8009342:	2b01      	cmp	r3, #1
 8009344:	d106      	bne.n	8009354 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2201      	movs	r2, #1
 800934a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 f92b 	bl	80095aa <USBD_CtlSendStatus>
  }
}
 8009354:	bf00      	nop
 8009356:	3708      	adds	r7, #8
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800936c:	b2db      	uxtb	r3, r3
 800936e:	3b01      	subs	r3, #1
 8009370:	2b02      	cmp	r3, #2
 8009372:	d80b      	bhi.n	800938c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	885b      	ldrh	r3, [r3, #2]
 8009378:	2b01      	cmp	r3, #1
 800937a:	d10c      	bne.n	8009396 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f910 	bl	80095aa <USBD_CtlSendStatus>
      }
      break;
 800938a:	e004      	b.n	8009396 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f840 	bl	8009414 <USBD_CtlError>
      break;
 8009394:	e000      	b.n	8009398 <USBD_ClrFeature+0x3c>
      break;
 8009396:	bf00      	nop
  }
}
 8009398:	bf00      	nop
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	781a      	ldrb	r2, [r3, #0]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	3301      	adds	r3, #1
 80093ba:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	781a      	ldrb	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	3301      	adds	r3, #1
 80093c8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f7ff fabb 	bl	8008946 <SWAPBYTE>
 80093d0:	4603      	mov	r3, r0
 80093d2:	461a      	mov	r2, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	3301      	adds	r3, #1
 80093dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	3301      	adds	r3, #1
 80093e2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f7ff faae 	bl	8008946 <SWAPBYTE>
 80093ea:	4603      	mov	r3, r0
 80093ec:	461a      	mov	r2, r3
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	3301      	adds	r3, #1
 80093f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	3301      	adds	r3, #1
 80093fc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80093fe:	68f8      	ldr	r0, [r7, #12]
 8009400:	f7ff faa1 	bl	8008946 <SWAPBYTE>
 8009404:	4603      	mov	r3, r0
 8009406:	461a      	mov	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	80da      	strh	r2, [r3, #6]
}
 800940c:	bf00      	nop
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800941e:	2180      	movs	r1, #128	; 0x80
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 fdc7 	bl	8009fb4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009426:	2100      	movs	r1, #0
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 fdc3 	bl	8009fb4 <USBD_LL_StallEP>
}
 800942e:	bf00      	nop
 8009430:	3708      	adds	r7, #8
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b086      	sub	sp, #24
 800943a:	af00      	add	r7, sp, #0
 800943c:	60f8      	str	r0, [r7, #12]
 800943e:	60b9      	str	r1, [r7, #8]
 8009440:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009442:	2300      	movs	r3, #0
 8009444:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d036      	beq.n	80094ba <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009450:	6938      	ldr	r0, [r7, #16]
 8009452:	f000 f836 	bl	80094c2 <USBD_GetLen>
 8009456:	4603      	mov	r3, r0
 8009458:	3301      	adds	r3, #1
 800945a:	b29b      	uxth	r3, r3
 800945c:	005b      	lsls	r3, r3, #1
 800945e:	b29a      	uxth	r2, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009464:	7dfb      	ldrb	r3, [r7, #23]
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	4413      	add	r3, r2
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	7812      	ldrb	r2, [r2, #0]
 800946e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009470:	7dfb      	ldrb	r3, [r7, #23]
 8009472:	3301      	adds	r3, #1
 8009474:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009476:	7dfb      	ldrb	r3, [r7, #23]
 8009478:	68ba      	ldr	r2, [r7, #8]
 800947a:	4413      	add	r3, r2
 800947c:	2203      	movs	r2, #3
 800947e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009480:	7dfb      	ldrb	r3, [r7, #23]
 8009482:	3301      	adds	r3, #1
 8009484:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009486:	e013      	b.n	80094b0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009488:	7dfb      	ldrb	r3, [r7, #23]
 800948a:	68ba      	ldr	r2, [r7, #8]
 800948c:	4413      	add	r3, r2
 800948e:	693a      	ldr	r2, [r7, #16]
 8009490:	7812      	ldrb	r2, [r2, #0]
 8009492:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	3301      	adds	r3, #1
 8009498:	613b      	str	r3, [r7, #16]
    idx++;
 800949a:	7dfb      	ldrb	r3, [r7, #23]
 800949c:	3301      	adds	r3, #1
 800949e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80094a0:	7dfb      	ldrb	r3, [r7, #23]
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	4413      	add	r3, r2
 80094a6:	2200      	movs	r2, #0
 80094a8:	701a      	strb	r2, [r3, #0]
    idx++;
 80094aa:	7dfb      	ldrb	r3, [r7, #23]
 80094ac:	3301      	adds	r3, #1
 80094ae:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d1e7      	bne.n	8009488 <USBD_GetString+0x52>
 80094b8:	e000      	b.n	80094bc <USBD_GetString+0x86>
    return;
 80094ba:	bf00      	nop
  }
}
 80094bc:	3718      	adds	r7, #24
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80094c2:	b480      	push	{r7}
 80094c4:	b085      	sub	sp, #20
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80094ca:	2300      	movs	r3, #0
 80094cc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80094d2:	e005      	b.n	80094e0 <USBD_GetLen+0x1e>
  {
    len++;
 80094d4:	7bfb      	ldrb	r3, [r7, #15]
 80094d6:	3301      	adds	r3, #1
 80094d8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	3301      	adds	r3, #1
 80094de:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d1f5      	bne.n	80094d4 <USBD_GetLen+0x12>
  }

  return len;
 80094e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3714      	adds	r7, #20
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr

080094f6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b084      	sub	sp, #16
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	60f8      	str	r0, [r7, #12]
 80094fe:	60b9      	str	r1, [r7, #8]
 8009500:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2202      	movs	r2, #2
 8009506:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	68ba      	ldr	r2, [r7, #8]
 800951a:	2100      	movs	r1, #0
 800951c:	68f8      	ldr	r0, [r7, #12]
 800951e:	f000 fdd2 	bl	800a0c6 <USBD_LL_Transmit>

  return USBD_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3710      	adds	r7, #16
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	68ba      	ldr	r2, [r7, #8]
 800953c:	2100      	movs	r1, #0
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f000 fdc1 	bl	800a0c6 <USBD_LL_Transmit>

  return USBD_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b084      	sub	sp, #16
 8009552:	af00      	add	r7, sp, #0
 8009554:	60f8      	str	r0, [r7, #12]
 8009556:	60b9      	str	r1, [r7, #8]
 8009558:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2203      	movs	r2, #3
 800955e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	2100      	movs	r1, #0
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f000 fdc5 	bl	800a108 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	68ba      	ldr	r2, [r7, #8]
 8009598:	2100      	movs	r1, #0
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f000 fdb4 	bl	800a108 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b082      	sub	sp, #8
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2204      	movs	r2, #4
 80095b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80095ba:	2300      	movs	r3, #0
 80095bc:	2200      	movs	r2, #0
 80095be:	2100      	movs	r1, #0
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fd80 	bl	800a0c6 <USBD_LL_Transmit>

  return USBD_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2205      	movs	r2, #5
 80095dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095e0:	2300      	movs	r3, #0
 80095e2:	2200      	movs	r2, #0
 80095e4:	2100      	movs	r1, #0
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 fd8e 	bl	800a108 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
	...

080095f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80095fc:	2200      	movs	r2, #0
 80095fe:	4912      	ldr	r1, [pc, #72]	; (8009648 <MX_USB_DEVICE_Init+0x50>)
 8009600:	4812      	ldr	r0, [pc, #72]	; (800964c <MX_USB_DEVICE_Init+0x54>)
 8009602:	f7fe fe8f 	bl	8008324 <USBD_Init>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d001      	beq.n	8009610 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800960c:	f7f8 f9d4 	bl	80019b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009610:	490f      	ldr	r1, [pc, #60]	; (8009650 <MX_USB_DEVICE_Init+0x58>)
 8009612:	480e      	ldr	r0, [pc, #56]	; (800964c <MX_USB_DEVICE_Init+0x54>)
 8009614:	f7fe feb6 	bl	8008384 <USBD_RegisterClass>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800961e:	f7f8 f9cb 	bl	80019b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009622:	490c      	ldr	r1, [pc, #48]	; (8009654 <MX_USB_DEVICE_Init+0x5c>)
 8009624:	4809      	ldr	r0, [pc, #36]	; (800964c <MX_USB_DEVICE_Init+0x54>)
 8009626:	f7fe fe07 	bl	8008238 <USBD_CDC_RegisterInterface>
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d001      	beq.n	8009634 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009630:	f7f8 f9c2 	bl	80019b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009634:	4805      	ldr	r0, [pc, #20]	; (800964c <MX_USB_DEVICE_Init+0x54>)
 8009636:	f7fe fecc 	bl	80083d2 <USBD_Start>
 800963a:	4603      	mov	r3, r0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d001      	beq.n	8009644 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009640:	f7f8 f9ba 	bl	80019b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009644:	bf00      	nop
 8009646:	bd80      	pop	{r7, pc}
 8009648:	20000144 	.word	0x20000144
 800964c:	20000ee0 	.word	0x20000ee0
 8009650:	20000028 	.word	0x20000028
 8009654:	20000130 	.word	0x20000130

08009658 <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800965e:	2200      	movs	r2, #0
 8009660:	4915      	ldr	r1, [pc, #84]	; (80096b8 <CDC_Init_FS+0x60>)
 8009662:	4816      	ldr	r0, [pc, #88]	; (80096bc <CDC_Init_FS+0x64>)
 8009664:	f7fe fdfd 	bl	8008262 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009668:	4915      	ldr	r1, [pc, #84]	; (80096c0 <CDC_Init_FS+0x68>)
 800966a:	4814      	ldr	r0, [pc, #80]	; (80096bc <CDC_Init_FS+0x64>)
 800966c:	f7fe fe17 	bl	800829e <USBD_CDC_SetRxBuffer>

	// https://stackoverflow.com/a/26925578
	uint32_t baudrate = 9600;
 8009670:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8009674:	607b      	str	r3, [r7, #4]
	lcBuffer[0] = (uint8_t) (baudrate);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	b2da      	uxtb	r2, r3
 800967a:	4b12      	ldr	r3, [pc, #72]	; (80096c4 <CDC_Init_FS+0x6c>)
 800967c:	701a      	strb	r2, [r3, #0]
	lcBuffer[1] = (uint8_t) (baudrate >> 8);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	0a1b      	lsrs	r3, r3, #8
 8009682:	b2da      	uxtb	r2, r3
 8009684:	4b0f      	ldr	r3, [pc, #60]	; (80096c4 <CDC_Init_FS+0x6c>)
 8009686:	705a      	strb	r2, [r3, #1]
	lcBuffer[2] = (uint8_t) (baudrate >> 16);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	0c1b      	lsrs	r3, r3, #16
 800968c:	b2da      	uxtb	r2, r3
 800968e:	4b0d      	ldr	r3, [pc, #52]	; (80096c4 <CDC_Init_FS+0x6c>)
 8009690:	709a      	strb	r2, [r3, #2]
	lcBuffer[3] = (uint8_t) (baudrate >> 24);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	0e1b      	lsrs	r3, r3, #24
 8009696:	b2da      	uxtb	r2, r3
 8009698:	4b0a      	ldr	r3, [pc, #40]	; (80096c4 <CDC_Init_FS+0x6c>)
 800969a:	70da      	strb	r2, [r3, #3]
	lcBuffer[4] = 0; // 1 Stop bit
 800969c:	4b09      	ldr	r3, [pc, #36]	; (80096c4 <CDC_Init_FS+0x6c>)
 800969e:	2200      	movs	r2, #0
 80096a0:	711a      	strb	r2, [r3, #4]
	lcBuffer[5] = 0; // No parity
 80096a2:	4b08      	ldr	r3, [pc, #32]	; (80096c4 <CDC_Init_FS+0x6c>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	715a      	strb	r2, [r3, #5]
	lcBuffer[6] = 8; // 8 data bits
 80096a8:	4b06      	ldr	r3, [pc, #24]	; (80096c4 <CDC_Init_FS+0x6c>)
 80096aa:	2208      	movs	r2, #8
 80096ac:	719a      	strb	r2, [r3, #6]

	return (USBD_OK);
 80096ae:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	200019b4 	.word	0x200019b4
 80096bc:	20000ee0 	.word	0x20000ee0
 80096c0:	200011b4 	.word	0x200011b4
 80096c4:	200022b4 	.word	0x200022b4

080096c8 <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 80096c8:	b480      	push	{r7}
 80096ca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 80096cc:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <CDC_Control_FS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	4603      	mov	r3, r0
 80096e0:	6039      	str	r1, [r7, #0]
 80096e2:	71fb      	strb	r3, [r7, #7]
 80096e4:	4613      	mov	r3, r2
 80096e6:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd) {
 80096e8:	79fb      	ldrb	r3, [r7, #7]
 80096ea:	2b23      	cmp	r3, #35	; 0x23
 80096ec:	f200 808c 	bhi.w	8009808 <CDC_Control_FS+0x130>
 80096f0:	a201      	add	r2, pc, #4	; (adr r2, 80096f8 <CDC_Control_FS+0x20>)
 80096f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f6:	bf00      	nop
 80096f8:	08009809 	.word	0x08009809
 80096fc:	08009809 	.word	0x08009809
 8009700:	08009809 	.word	0x08009809
 8009704:	08009809 	.word	0x08009809
 8009708:	08009809 	.word	0x08009809
 800970c:	08009809 	.word	0x08009809
 8009710:	08009809 	.word	0x08009809
 8009714:	08009809 	.word	0x08009809
 8009718:	08009809 	.word	0x08009809
 800971c:	08009809 	.word	0x08009809
 8009720:	08009809 	.word	0x08009809
 8009724:	08009809 	.word	0x08009809
 8009728:	08009809 	.word	0x08009809
 800972c:	08009809 	.word	0x08009809
 8009730:	08009809 	.word	0x08009809
 8009734:	08009809 	.word	0x08009809
 8009738:	08009809 	.word	0x08009809
 800973c:	08009809 	.word	0x08009809
 8009740:	08009809 	.word	0x08009809
 8009744:	08009809 	.word	0x08009809
 8009748:	08009809 	.word	0x08009809
 800974c:	08009809 	.word	0x08009809
 8009750:	08009809 	.word	0x08009809
 8009754:	08009809 	.word	0x08009809
 8009758:	08009809 	.word	0x08009809
 800975c:	08009809 	.word	0x08009809
 8009760:	08009809 	.word	0x08009809
 8009764:	08009809 	.word	0x08009809
 8009768:	08009809 	.word	0x08009809
 800976c:	08009809 	.word	0x08009809
 8009770:	08009809 	.word	0x08009809
 8009774:	08009809 	.word	0x08009809
 8009778:	08009789 	.word	0x08009789
 800977c:	080097c3 	.word	0x080097c3
 8009780:	08009809 	.word	0x08009809
 8009784:	08009809 	.word	0x08009809
		/* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
		/*******************************************************************************/

		// https://github.com/philrawlings/bluepill-usb-cdc-test/blob/main/USB_DEVICE/App/usbd_cdc_if.c
	case CDC_SET_LINE_CODING:
		lcBuffer[0] = pbuf[0];
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	781a      	ldrb	r2, [r3, #0]
 800978c:	4b22      	ldr	r3, [pc, #136]	; (8009818 <CDC_Control_FS+0x140>)
 800978e:	701a      	strb	r2, [r3, #0]
		lcBuffer[1] = pbuf[1];
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	785a      	ldrb	r2, [r3, #1]
 8009794:	4b20      	ldr	r3, [pc, #128]	; (8009818 <CDC_Control_FS+0x140>)
 8009796:	705a      	strb	r2, [r3, #1]
		lcBuffer[2] = pbuf[2];
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	789a      	ldrb	r2, [r3, #2]
 800979c:	4b1e      	ldr	r3, [pc, #120]	; (8009818 <CDC_Control_FS+0x140>)
 800979e:	709a      	strb	r2, [r3, #2]
		lcBuffer[3] = pbuf[3];
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	78da      	ldrb	r2, [r3, #3]
 80097a4:	4b1c      	ldr	r3, [pc, #112]	; (8009818 <CDC_Control_FS+0x140>)
 80097a6:	70da      	strb	r2, [r3, #3]
		lcBuffer[4] = pbuf[4];
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	791a      	ldrb	r2, [r3, #4]
 80097ac:	4b1a      	ldr	r3, [pc, #104]	; (8009818 <CDC_Control_FS+0x140>)
 80097ae:	711a      	strb	r2, [r3, #4]
		lcBuffer[5] = pbuf[5];
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	795a      	ldrb	r2, [r3, #5]
 80097b4:	4b18      	ldr	r3, [pc, #96]	; (8009818 <CDC_Control_FS+0x140>)
 80097b6:	715a      	strb	r2, [r3, #5]
		lcBuffer[6] = pbuf[6];
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	799a      	ldrb	r2, [r3, #6]
 80097bc:	4b16      	ldr	r3, [pc, #88]	; (8009818 <CDC_Control_FS+0x140>)
 80097be:	719a      	strb	r2, [r3, #6]
		break;
 80097c0:	e023      	b.n	800980a <CDC_Control_FS+0x132>

	case CDC_GET_LINE_CODING:
		pbuf[0] = lcBuffer[0];
 80097c2:	4b15      	ldr	r3, [pc, #84]	; (8009818 <CDC_Control_FS+0x140>)
 80097c4:	781a      	ldrb	r2, [r3, #0]
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	701a      	strb	r2, [r3, #0]
		pbuf[1] = lcBuffer[1];
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	3301      	adds	r3, #1
 80097ce:	4a12      	ldr	r2, [pc, #72]	; (8009818 <CDC_Control_FS+0x140>)
 80097d0:	7852      	ldrb	r2, [r2, #1]
 80097d2:	701a      	strb	r2, [r3, #0]
		pbuf[2] = lcBuffer[2];
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	3302      	adds	r3, #2
 80097d8:	4a0f      	ldr	r2, [pc, #60]	; (8009818 <CDC_Control_FS+0x140>)
 80097da:	7892      	ldrb	r2, [r2, #2]
 80097dc:	701a      	strb	r2, [r3, #0]
		pbuf[3] = lcBuffer[3];
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	3303      	adds	r3, #3
 80097e2:	4a0d      	ldr	r2, [pc, #52]	; (8009818 <CDC_Control_FS+0x140>)
 80097e4:	78d2      	ldrb	r2, [r2, #3]
 80097e6:	701a      	strb	r2, [r3, #0]
		pbuf[4] = lcBuffer[4];
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	3304      	adds	r3, #4
 80097ec:	4a0a      	ldr	r2, [pc, #40]	; (8009818 <CDC_Control_FS+0x140>)
 80097ee:	7912      	ldrb	r2, [r2, #4]
 80097f0:	701a      	strb	r2, [r3, #0]
		pbuf[5] = lcBuffer[5];
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	3305      	adds	r3, #5
 80097f6:	4a08      	ldr	r2, [pc, #32]	; (8009818 <CDC_Control_FS+0x140>)
 80097f8:	7952      	ldrb	r2, [r2, #5]
 80097fa:	701a      	strb	r2, [r3, #0]
		pbuf[6] = lcBuffer[6];
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	3306      	adds	r3, #6
 8009800:	4a05      	ldr	r2, [pc, #20]	; (8009818 <CDC_Control_FS+0x140>)
 8009802:	7992      	ldrb	r2, [r2, #6]
 8009804:	701a      	strb	r2, [r3, #0]

		// Get line coding is invoked when the host connects, clear the RxBuffer when this occurs

	case CDC_SET_CONTROL_LINE_STATE:

		break;
 8009806:	e000      	b.n	800980a <CDC_Control_FS+0x132>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8009808:	bf00      	nop
	}

	return (USBD_OK);
 800980a:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 800980c:	4618      	mov	r0, r3
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr
 8009818:	200022b4 	.word	0x200022b4

0800981c <CDC_Receive_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009826:	6879      	ldr	r1, [r7, #4]
 8009828:	4824      	ldr	r0, [pc, #144]	; (80098bc <CDC_Receive_FS+0xa0>)
 800982a:	f7fe fd38 	bl	800829e <USBD_CDC_SetRxBuffer>
	uint8_t len = (uint8_t) *Len;
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	72fb      	strb	r3, [r7, #11]
	if (!isBufferFull()) {
 8009834:	f000 f89c 	bl	8009970 <isBufferFull>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d136      	bne.n	80098ac <CDC_Receive_FS+0x90>
		// Safety check
		if (len > 0 && len < 65) {
 800983e:	7afb      	ldrb	r3, [r7, #11]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d033      	beq.n	80098ac <CDC_Receive_FS+0x90>
 8009844:	7afb      	ldrb	r3, [r7, #11]
 8009846:	2b40      	cmp	r3, #64	; 0x40
 8009848:	d830      	bhi.n	80098ac <CDC_Receive_FS+0x90>
			// saving the array say at position 0
			circular_buffer[end_pointer][0] = len;
 800984a:	4b1d      	ldr	r3, [pc, #116]	; (80098c0 <CDC_Receive_FS+0xa4>)
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	4619      	mov	r1, r3
 8009850:	4a1c      	ldr	r2, [pc, #112]	; (80098c4 <CDC_Receive_FS+0xa8>)
 8009852:	460b      	mov	r3, r1
 8009854:	019b      	lsls	r3, r3, #6
 8009856:	440b      	add	r3, r1
 8009858:	4413      	add	r3, r2
 800985a:	7afa      	ldrb	r2, [r7, #11]
 800985c:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i <= len; i++) {
 800985e:	2301      	movs	r3, #1
 8009860:	60fb      	str	r3, [r7, #12]
 8009862:	e013      	b.n	800988c <CDC_Receive_FS+0x70>
				circular_buffer[end_pointer][i] = Buf[i-1];
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	3b01      	subs	r3, #1
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	4413      	add	r3, r2
 800986c:	4a14      	ldr	r2, [pc, #80]	; (80098c0 <CDC_Receive_FS+0xa4>)
 800986e:	7812      	ldrb	r2, [r2, #0]
 8009870:	4611      	mov	r1, r2
 8009872:	7818      	ldrb	r0, [r3, #0]
 8009874:	4a13      	ldr	r2, [pc, #76]	; (80098c4 <CDC_Receive_FS+0xa8>)
 8009876:	460b      	mov	r3, r1
 8009878:	019b      	lsls	r3, r3, #6
 800987a:	440b      	add	r3, r1
 800987c:	441a      	add	r2, r3
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	4413      	add	r3, r2
 8009882:	4602      	mov	r2, r0
 8009884:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i <= len; i++) {
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	3301      	adds	r3, #1
 800988a:	60fb      	str	r3, [r7, #12]
 800988c:	7afb      	ldrb	r3, [r7, #11]
 800988e:	68fa      	ldr	r2, [r7, #12]
 8009890:	429a      	cmp	r2, r3
 8009892:	dde7      	ble.n	8009864 <CDC_Receive_FS+0x48>
			}
			end_pointer = (end_pointer + 1) % CIRCULAR_BUFFER_SIZE;
 8009894:	4b0a      	ldr	r3, [pc, #40]	; (80098c0 <CDC_Receive_FS+0xa4>)
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	3301      	adds	r3, #1
 800989a:	220a      	movs	r2, #10
 800989c:	fb93 f1f2 	sdiv	r1, r3, r2
 80098a0:	fb02 f201 	mul.w	r2, r2, r1
 80098a4:	1a9b      	subs	r3, r3, r2
 80098a6:	b2da      	uxtb	r2, r3
 80098a8:	4b05      	ldr	r3, [pc, #20]	; (80098c0 <CDC_Receive_FS+0xa4>)
 80098aa:	701a      	strb	r2, [r3, #0]
		}
	}

	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80098ac:	4803      	ldr	r0, [pc, #12]	; (80098bc <CDC_Receive_FS+0xa0>)
 80098ae:	f7fe fd0f 	bl	80082d0 <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 80098b2:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	20000ee0 	.word	0x20000ee0
 80098c0:	2000012c 	.word	0x2000012c
 80098c4:	20000628 	.word	0x20000628

080098c8 <CDC_TransmitCplt_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum) {
 80098c8:	b480      	push	{r7}
 80098ca:	b087      	sub	sp, #28
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	4613      	mov	r3, r2
 80098d4:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 80098d6:	2300      	movs	r3, #0
 80098d8:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 13 */
	return result;
 80098da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	371c      	adds	r7, #28
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
	...

080098ec <get_data_frame>:
uint8_t data_available() {

	return 0;
}

void get_data_frame(uint8_t *buffer) {
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
	if(!isBufferEmpty()){
 80098f4:	f000 f852 	bl	800999c <isBufferEmpty>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d12f      	bne.n	800995e <get_data_frame+0x72>
		uint8_t data_size = circular_buffer[start_pointer][0];
 80098fe:	4b1a      	ldr	r3, [pc, #104]	; (8009968 <get_data_frame+0x7c>)
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	4619      	mov	r1, r3
 8009904:	4a19      	ldr	r2, [pc, #100]	; (800996c <get_data_frame+0x80>)
 8009906:	460b      	mov	r3, r1
 8009908:	019b      	lsls	r3, r3, #6
 800990a:	440b      	add	r3, r1
 800990c:	4413      	add	r3, r2
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	72fb      	strb	r3, [r7, #11]
		for(int i = 1; i <= data_size; i++){
 8009912:	2301      	movs	r3, #1
 8009914:	60fb      	str	r3, [r7, #12]
 8009916:	e012      	b.n	800993e <get_data_frame+0x52>
			buffer[i-1] = circular_buffer[start_pointer][i];
 8009918:	4b13      	ldr	r3, [pc, #76]	; (8009968 <get_data_frame+0x7c>)
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	4618      	mov	r0, r3
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	3b01      	subs	r3, #1
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	441a      	add	r2, r3
 8009926:	4911      	ldr	r1, [pc, #68]	; (800996c <get_data_frame+0x80>)
 8009928:	4603      	mov	r3, r0
 800992a:	019b      	lsls	r3, r3, #6
 800992c:	4403      	add	r3, r0
 800992e:	4419      	add	r1, r3
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	440b      	add	r3, r1
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	7013      	strb	r3, [r2, #0]
		for(int i = 1; i <= data_size; i++){
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	3301      	adds	r3, #1
 800993c:	60fb      	str	r3, [r7, #12]
 800993e:	7afb      	ldrb	r3, [r7, #11]
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	429a      	cmp	r2, r3
 8009944:	dde8      	ble.n	8009918 <get_data_frame+0x2c>
		}
		start_pointer = (start_pointer + 1) % CIRCULAR_BUFFER_SIZE;
 8009946:	4b08      	ldr	r3, [pc, #32]	; (8009968 <get_data_frame+0x7c>)
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	3301      	adds	r3, #1
 800994c:	220a      	movs	r2, #10
 800994e:	fb93 f1f2 	sdiv	r1, r3, r2
 8009952:	fb02 f201 	mul.w	r2, r2, r1
 8009956:	1a9b      	subs	r3, r3, r2
 8009958:	b2da      	uxtb	r2, r3
 800995a:	4b03      	ldr	r3, [pc, #12]	; (8009968 <get_data_frame+0x7c>)
 800995c:	701a      	strb	r2, [r3, #0]
	}

}
 800995e:	bf00      	nop
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	2000012b 	.word	0x2000012b
 800996c:	20000628 	.word	0x20000628

08009970 <isBufferFull>:

uint8_t isBufferFull() {
 8009970:	b480      	push	{r7}
 8009972:	af00      	add	r7, sp, #0
	if ((end_pointer + 1) == start_pointer) {
 8009974:	4b07      	ldr	r3, [pc, #28]	; (8009994 <isBufferFull+0x24>)
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	3301      	adds	r3, #1
 800997a:	4a07      	ldr	r2, [pc, #28]	; (8009998 <isBufferFull+0x28>)
 800997c:	7812      	ldrb	r2, [r2, #0]
 800997e:	4293      	cmp	r3, r2
 8009980:	d101      	bne.n	8009986 <isBufferFull+0x16>
		return 1;
 8009982:	2301      	movs	r3, #1
 8009984:	e000      	b.n	8009988 <isBufferFull+0x18>
	} else {
		return 0;
 8009986:	2300      	movs	r3, #0
	}
}
 8009988:	4618      	mov	r0, r3
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	2000012c 	.word	0x2000012c
 8009998:	2000012b 	.word	0x2000012b

0800999c <isBufferEmpty>:

uint8_t isBufferEmpty() {
 800999c:	b480      	push	{r7}
 800999e:	af00      	add	r7, sp, #0
	if (end_pointer == start_pointer) {
 80099a0:	4b06      	ldr	r3, [pc, #24]	; (80099bc <isBufferEmpty+0x20>)
 80099a2:	781a      	ldrb	r2, [r3, #0]
 80099a4:	4b06      	ldr	r3, [pc, #24]	; (80099c0 <isBufferEmpty+0x24>)
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d101      	bne.n	80099b0 <isBufferEmpty+0x14>
		return 1;
 80099ac:	2301      	movs	r3, #1
 80099ae:	e000      	b.n	80099b2 <isBufferEmpty+0x16>
	} else {
		return 0;
 80099b0:	2300      	movs	r3, #0
	}
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr
 80099bc:	2000012c 	.word	0x2000012c
 80099c0:	2000012b 	.word	0x2000012b

080099c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	4603      	mov	r3, r0
 80099cc:	6039      	str	r1, [r7, #0]
 80099ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	2212      	movs	r2, #18
 80099d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80099d6:	4b03      	ldr	r3, [pc, #12]	; (80099e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80099d8:	4618      	mov	r0, r3
 80099da:	370c      	adds	r7, #12
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr
 80099e4:	20000160 	.word	0x20000160

080099e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	4603      	mov	r3, r0
 80099f0:	6039      	str	r1, [r7, #0]
 80099f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	2204      	movs	r2, #4
 80099f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80099fa:	4b03      	ldr	r3, [pc, #12]	; (8009a08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	370c      	adds	r7, #12
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr
 8009a08:	20000174 	.word	0x20000174

08009a0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	4603      	mov	r3, r0
 8009a14:	6039      	str	r1, [r7, #0]
 8009a16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a18:	79fb      	ldrb	r3, [r7, #7]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d105      	bne.n	8009a2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a1e:	683a      	ldr	r2, [r7, #0]
 8009a20:	4907      	ldr	r1, [pc, #28]	; (8009a40 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a22:	4808      	ldr	r0, [pc, #32]	; (8009a44 <USBD_FS_ProductStrDescriptor+0x38>)
 8009a24:	f7ff fd07 	bl	8009436 <USBD_GetString>
 8009a28:	e004      	b.n	8009a34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a2a:	683a      	ldr	r2, [r7, #0]
 8009a2c:	4904      	ldr	r1, [pc, #16]	; (8009a40 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a2e:	4805      	ldr	r0, [pc, #20]	; (8009a44 <USBD_FS_ProductStrDescriptor+0x38>)
 8009a30:	f7ff fd01 	bl	8009436 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a34:	4b02      	ldr	r3, [pc, #8]	; (8009a40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	200022bc 	.word	0x200022bc
 8009a44:	0800bbcc 	.word	0x0800bbcc

08009a48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	4603      	mov	r3, r0
 8009a50:	6039      	str	r1, [r7, #0]
 8009a52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009a54:	683a      	ldr	r2, [r7, #0]
 8009a56:	4904      	ldr	r1, [pc, #16]	; (8009a68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009a58:	4804      	ldr	r0, [pc, #16]	; (8009a6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009a5a:	f7ff fcec 	bl	8009436 <USBD_GetString>
  return USBD_StrDesc;
 8009a5e:	4b02      	ldr	r3, [pc, #8]	; (8009a68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	200022bc 	.word	0x200022bc
 8009a6c:	0800bbe4 	.word	0x0800bbe4

08009a70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	4603      	mov	r3, r0
 8009a78:	6039      	str	r1, [r7, #0]
 8009a7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	221a      	movs	r2, #26
 8009a80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009a82:	f000 f843 	bl	8009b0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009a86:	4b02      	ldr	r3, [pc, #8]	; (8009a90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3708      	adds	r7, #8
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	20000178 	.word	0x20000178

08009a94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	6039      	str	r1, [r7, #0]
 8009a9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009aa0:	79fb      	ldrb	r3, [r7, #7]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d105      	bne.n	8009ab2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009aa6:	683a      	ldr	r2, [r7, #0]
 8009aa8:	4907      	ldr	r1, [pc, #28]	; (8009ac8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009aaa:	4808      	ldr	r0, [pc, #32]	; (8009acc <USBD_FS_ConfigStrDescriptor+0x38>)
 8009aac:	f7ff fcc3 	bl	8009436 <USBD_GetString>
 8009ab0:	e004      	b.n	8009abc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ab2:	683a      	ldr	r2, [r7, #0]
 8009ab4:	4904      	ldr	r1, [pc, #16]	; (8009ac8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009ab6:	4805      	ldr	r0, [pc, #20]	; (8009acc <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ab8:	f7ff fcbd 	bl	8009436 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009abc:	4b02      	ldr	r3, [pc, #8]	; (8009ac8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	200022bc 	.word	0x200022bc
 8009acc:	0800bbf8 	.word	0x0800bbf8

08009ad0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	6039      	str	r1, [r7, #0]
 8009ada:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009adc:	79fb      	ldrb	r3, [r7, #7]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d105      	bne.n	8009aee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ae2:	683a      	ldr	r2, [r7, #0]
 8009ae4:	4907      	ldr	r1, [pc, #28]	; (8009b04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ae6:	4808      	ldr	r0, [pc, #32]	; (8009b08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ae8:	f7ff fca5 	bl	8009436 <USBD_GetString>
 8009aec:	e004      	b.n	8009af8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009aee:	683a      	ldr	r2, [r7, #0]
 8009af0:	4904      	ldr	r1, [pc, #16]	; (8009b04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009af2:	4805      	ldr	r0, [pc, #20]	; (8009b08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009af4:	f7ff fc9f 	bl	8009436 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009af8:	4b02      	ldr	r3, [pc, #8]	; (8009b04 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3708      	adds	r7, #8
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	200022bc 	.word	0x200022bc
 8009b08:	0800bc04 	.word	0x0800bc04

08009b0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009b12:	4b0f      	ldr	r3, [pc, #60]	; (8009b50 <Get_SerialNum+0x44>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009b18:	4b0e      	ldr	r3, [pc, #56]	; (8009b54 <Get_SerialNum+0x48>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009b1e:	4b0e      	ldr	r3, [pc, #56]	; (8009b58 <Get_SerialNum+0x4c>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4413      	add	r3, r2
 8009b2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d009      	beq.n	8009b46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009b32:	2208      	movs	r2, #8
 8009b34:	4909      	ldr	r1, [pc, #36]	; (8009b5c <Get_SerialNum+0x50>)
 8009b36:	68f8      	ldr	r0, [r7, #12]
 8009b38:	f000 f814 	bl	8009b64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009b3c:	2204      	movs	r2, #4
 8009b3e:	4908      	ldr	r1, [pc, #32]	; (8009b60 <Get_SerialNum+0x54>)
 8009b40:	68b8      	ldr	r0, [r7, #8]
 8009b42:	f000 f80f 	bl	8009b64 <IntToUnicode>
  }
}
 8009b46:	bf00      	nop
 8009b48:	3710      	adds	r7, #16
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	1fff7a10 	.word	0x1fff7a10
 8009b54:	1fff7a14 	.word	0x1fff7a14
 8009b58:	1fff7a18 	.word	0x1fff7a18
 8009b5c:	2000017a 	.word	0x2000017a
 8009b60:	2000018a 	.word	0x2000018a

08009b64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b087      	sub	sp, #28
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	4613      	mov	r3, r2
 8009b70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009b72:	2300      	movs	r3, #0
 8009b74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009b76:	2300      	movs	r3, #0
 8009b78:	75fb      	strb	r3, [r7, #23]
 8009b7a:	e027      	b.n	8009bcc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	0f1b      	lsrs	r3, r3, #28
 8009b80:	2b09      	cmp	r3, #9
 8009b82:	d80b      	bhi.n	8009b9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	0f1b      	lsrs	r3, r3, #28
 8009b88:	b2da      	uxtb	r2, r3
 8009b8a:	7dfb      	ldrb	r3, [r7, #23]
 8009b8c:	005b      	lsls	r3, r3, #1
 8009b8e:	4619      	mov	r1, r3
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	440b      	add	r3, r1
 8009b94:	3230      	adds	r2, #48	; 0x30
 8009b96:	b2d2      	uxtb	r2, r2
 8009b98:	701a      	strb	r2, [r3, #0]
 8009b9a:	e00a      	b.n	8009bb2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	0f1b      	lsrs	r3, r3, #28
 8009ba0:	b2da      	uxtb	r2, r3
 8009ba2:	7dfb      	ldrb	r3, [r7, #23]
 8009ba4:	005b      	lsls	r3, r3, #1
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	440b      	add	r3, r1
 8009bac:	3237      	adds	r2, #55	; 0x37
 8009bae:	b2d2      	uxtb	r2, r2
 8009bb0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	011b      	lsls	r3, r3, #4
 8009bb6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009bb8:	7dfb      	ldrb	r3, [r7, #23]
 8009bba:	005b      	lsls	r3, r3, #1
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	68ba      	ldr	r2, [r7, #8]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009bc6:	7dfb      	ldrb	r3, [r7, #23]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	75fb      	strb	r3, [r7, #23]
 8009bcc:	7dfa      	ldrb	r2, [r7, #23]
 8009bce:	79fb      	ldrb	r3, [r7, #7]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d3d3      	bcc.n	8009b7c <IntToUnicode+0x18>
  }
}
 8009bd4:	bf00      	nop
 8009bd6:	bf00      	nop
 8009bd8:	371c      	adds	r7, #28
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr
	...

08009be4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b08a      	sub	sp, #40	; 0x28
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bec:	f107 0314 	add.w	r3, r7, #20
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	601a      	str	r2, [r3, #0]
 8009bf4:	605a      	str	r2, [r3, #4]
 8009bf6:	609a      	str	r2, [r3, #8]
 8009bf8:	60da      	str	r2, [r3, #12]
 8009bfa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c04:	d13a      	bne.n	8009c7c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c06:	2300      	movs	r3, #0
 8009c08:	613b      	str	r3, [r7, #16]
 8009c0a:	4b1e      	ldr	r3, [pc, #120]	; (8009c84 <HAL_PCD_MspInit+0xa0>)
 8009c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c0e:	4a1d      	ldr	r2, [pc, #116]	; (8009c84 <HAL_PCD_MspInit+0xa0>)
 8009c10:	f043 0301 	orr.w	r3, r3, #1
 8009c14:	6313      	str	r3, [r2, #48]	; 0x30
 8009c16:	4b1b      	ldr	r3, [pc, #108]	; (8009c84 <HAL_PCD_MspInit+0xa0>)
 8009c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c1a:	f003 0301 	and.w	r3, r3, #1
 8009c1e:	613b      	str	r3, [r7, #16]
 8009c20:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009c22:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c28:	2302      	movs	r3, #2
 8009c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c30:	2303      	movs	r3, #3
 8009c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009c34:	230a      	movs	r3, #10
 8009c36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c38:	f107 0314 	add.w	r3, r7, #20
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	4812      	ldr	r0, [pc, #72]	; (8009c88 <HAL_PCD_MspInit+0xa4>)
 8009c40:	f7f9 f852 	bl	8002ce8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c44:	4b0f      	ldr	r3, [pc, #60]	; (8009c84 <HAL_PCD_MspInit+0xa0>)
 8009c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c48:	4a0e      	ldr	r2, [pc, #56]	; (8009c84 <HAL_PCD_MspInit+0xa0>)
 8009c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c4e:	6353      	str	r3, [r2, #52]	; 0x34
 8009c50:	2300      	movs	r3, #0
 8009c52:	60fb      	str	r3, [r7, #12]
 8009c54:	4b0b      	ldr	r3, [pc, #44]	; (8009c84 <HAL_PCD_MspInit+0xa0>)
 8009c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c58:	4a0a      	ldr	r2, [pc, #40]	; (8009c84 <HAL_PCD_MspInit+0xa0>)
 8009c5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009c5e:	6453      	str	r3, [r2, #68]	; 0x44
 8009c60:	4b08      	ldr	r3, [pc, #32]	; (8009c84 <HAL_PCD_MspInit+0xa0>)
 8009c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c68:	60fb      	str	r3, [r7, #12]
 8009c6a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	2100      	movs	r1, #0
 8009c70:	2043      	movs	r0, #67	; 0x43
 8009c72:	f7f8 fc70 	bl	8002556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009c76:	2043      	movs	r0, #67	; 0x43
 8009c78:	f7f8 fc89 	bl	800258e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009c7c:	bf00      	nop
 8009c7e:	3728      	adds	r7, #40	; 0x28
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	40023800 	.word	0x40023800
 8009c88:	40020000 	.word	0x40020000

08009c8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	4610      	mov	r0, r2
 8009ca4:	f7fe fbe0 	bl	8008468 <USBD_LL_SetupStage>
}
 8009ca8:	bf00      	nop
 8009caa:	3708      	adds	r7, #8
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	460b      	mov	r3, r1
 8009cba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009cc2:	78fa      	ldrb	r2, [r7, #3]
 8009cc4:	6879      	ldr	r1, [r7, #4]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	00db      	lsls	r3, r3, #3
 8009cca:	1a9b      	subs	r3, r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	440b      	add	r3, r1
 8009cd0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	78fb      	ldrb	r3, [r7, #3]
 8009cd8:	4619      	mov	r1, r3
 8009cda:	f7fe fc1a 	bl	8008512 <USBD_LL_DataOutStage>
}
 8009cde:	bf00      	nop
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b082      	sub	sp, #8
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	460b      	mov	r3, r1
 8009cf0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009cf8:	78fa      	ldrb	r2, [r7, #3]
 8009cfa:	6879      	ldr	r1, [r7, #4]
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	00db      	lsls	r3, r3, #3
 8009d00:	1a9b      	subs	r3, r3, r2
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	440b      	add	r3, r1
 8009d06:	3348      	adds	r3, #72	; 0x48
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	78fb      	ldrb	r3, [r7, #3]
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	f7fe fc63 	bl	80085d8 <USBD_LL_DataInStage>
}
 8009d12:	bf00      	nop
 8009d14:	3708      	adds	r7, #8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b082      	sub	sp, #8
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7fe fd77 	bl	800881c <USBD_LL_SOF>
}
 8009d2e:	bf00      	nop
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b084      	sub	sp, #16
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	2b02      	cmp	r3, #2
 8009d48:	d001      	beq.n	8009d4e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009d4a:	f7f7 fe35 	bl	80019b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d54:	7bfa      	ldrb	r2, [r7, #15]
 8009d56:	4611      	mov	r1, r2
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7fe fd21 	bl	80087a0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d64:	4618      	mov	r0, r3
 8009d66:	f7fe fccd 	bl	8008704 <USBD_LL_Reset>
}
 8009d6a:	bf00      	nop
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
	...

08009d74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7fe fd1c 	bl	80087c0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	6812      	ldr	r2, [r2, #0]
 8009d96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d9a:	f043 0301 	orr.w	r3, r3, #1
 8009d9e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6a1b      	ldr	r3, [r3, #32]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d005      	beq.n	8009db4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009da8:	4b04      	ldr	r3, [pc, #16]	; (8009dbc <HAL_PCD_SuspendCallback+0x48>)
 8009daa:	691b      	ldr	r3, [r3, #16]
 8009dac:	4a03      	ldr	r2, [pc, #12]	; (8009dbc <HAL_PCD_SuspendCallback+0x48>)
 8009dae:	f043 0306 	orr.w	r3, r3, #6
 8009db2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009db4:	bf00      	nop
 8009db6:	3708      	adds	r7, #8
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	e000ed00 	.word	0xe000ed00

08009dc0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7fe fd0c 	bl	80087ec <USBD_LL_Resume>
}
 8009dd4:	bf00      	nop
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	460b      	mov	r3, r1
 8009de6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009dee:	78fa      	ldrb	r2, [r7, #3]
 8009df0:	4611      	mov	r1, r2
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7fe fd5a 	bl	80088ac <USBD_LL_IsoOUTIncomplete>
}
 8009df8:	bf00      	nop
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	460b      	mov	r3, r1
 8009e0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009e12:	78fa      	ldrb	r2, [r7, #3]
 8009e14:	4611      	mov	r1, r2
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fe fd22 	bl	8008860 <USBD_LL_IsoINIncomplete>
}
 8009e1c:	bf00      	nop
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7fe fd60 	bl	80088f8 <USBD_LL_DevConnected>
}
 8009e38:	bf00      	nop
 8009e3a:	3708      	adds	r7, #8
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7fe fd5d 	bl	800890e <USBD_LL_DevDisconnected>
}
 8009e54:	bf00      	nop
 8009e56:	3708      	adds	r7, #8
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d13c      	bne.n	8009ee6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009e6c:	4a20      	ldr	r2, [pc, #128]	; (8009ef0 <USBD_LL_Init+0x94>)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a1e      	ldr	r2, [pc, #120]	; (8009ef0 <USBD_LL_Init+0x94>)
 8009e78:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009e7c:	4b1c      	ldr	r3, [pc, #112]	; (8009ef0 <USBD_LL_Init+0x94>)
 8009e7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009e82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009e84:	4b1a      	ldr	r3, [pc, #104]	; (8009ef0 <USBD_LL_Init+0x94>)
 8009e86:	2204      	movs	r2, #4
 8009e88:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009e8a:	4b19      	ldr	r3, [pc, #100]	; (8009ef0 <USBD_LL_Init+0x94>)
 8009e8c:	2202      	movs	r2, #2
 8009e8e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009e90:	4b17      	ldr	r3, [pc, #92]	; (8009ef0 <USBD_LL_Init+0x94>)
 8009e92:	2200      	movs	r2, #0
 8009e94:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009e96:	4b16      	ldr	r3, [pc, #88]	; (8009ef0 <USBD_LL_Init+0x94>)
 8009e98:	2202      	movs	r2, #2
 8009e9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009e9c:	4b14      	ldr	r3, [pc, #80]	; (8009ef0 <USBD_LL_Init+0x94>)
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009ea2:	4b13      	ldr	r3, [pc, #76]	; (8009ef0 <USBD_LL_Init+0x94>)
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009ea8:	4b11      	ldr	r3, [pc, #68]	; (8009ef0 <USBD_LL_Init+0x94>)
 8009eaa:	2200      	movs	r2, #0
 8009eac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009eae:	4b10      	ldr	r3, [pc, #64]	; (8009ef0 <USBD_LL_Init+0x94>)
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009eb4:	4b0e      	ldr	r3, [pc, #56]	; (8009ef0 <USBD_LL_Init+0x94>)
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009eba:	480d      	ldr	r0, [pc, #52]	; (8009ef0 <USBD_LL_Init+0x94>)
 8009ebc:	f7f9 fcf3 	bl	80038a6 <HAL_PCD_Init>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d001      	beq.n	8009eca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009ec6:	f7f7 fd77 	bl	80019b8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009eca:	2180      	movs	r1, #128	; 0x80
 8009ecc:	4808      	ldr	r0, [pc, #32]	; (8009ef0 <USBD_LL_Init+0x94>)
 8009ece:	f7fa fe50 	bl	8004b72 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009ed2:	2240      	movs	r2, #64	; 0x40
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	4806      	ldr	r0, [pc, #24]	; (8009ef0 <USBD_LL_Init+0x94>)
 8009ed8:	f7fa fe04 	bl	8004ae4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009edc:	2280      	movs	r2, #128	; 0x80
 8009ede:	2101      	movs	r1, #1
 8009ee0:	4803      	ldr	r0, [pc, #12]	; (8009ef0 <USBD_LL_Init+0x94>)
 8009ee2:	f7fa fdff 	bl	8004ae4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3708      	adds	r7, #8
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	200024bc 	.word	0x200024bc

08009ef4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009efc:	2300      	movs	r3, #0
 8009efe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f00:	2300      	movs	r3, #0
 8009f02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7f9 fde8 	bl	8003ae0 <HAL_PCD_Start>
 8009f10:	4603      	mov	r3, r0
 8009f12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f14:	7bfb      	ldrb	r3, [r7, #15]
 8009f16:	4618      	mov	r0, r3
 8009f18:	f000 f942 	bl	800a1a0 <USBD_Get_USB_Status>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f20:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b084      	sub	sp, #16
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
 8009f32:	4608      	mov	r0, r1
 8009f34:	4611      	mov	r1, r2
 8009f36:	461a      	mov	r2, r3
 8009f38:	4603      	mov	r3, r0
 8009f3a:	70fb      	strb	r3, [r7, #3]
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	70bb      	strb	r3, [r7, #2]
 8009f40:	4613      	mov	r3, r2
 8009f42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f44:	2300      	movs	r3, #0
 8009f46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009f52:	78bb      	ldrb	r3, [r7, #2]
 8009f54:	883a      	ldrh	r2, [r7, #0]
 8009f56:	78f9      	ldrb	r1, [r7, #3]
 8009f58:	f7fa f9cc 	bl	80042f4 <HAL_PCD_EP_Open>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f60:	7bfb      	ldrb	r3, [r7, #15]
 8009f62:	4618      	mov	r0, r3
 8009f64:	f000 f91c 	bl	800a1a0 <USBD_Get_USB_Status>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b084      	sub	sp, #16
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
 8009f7e:	460b      	mov	r3, r1
 8009f80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f82:	2300      	movs	r3, #0
 8009f84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f86:	2300      	movs	r3, #0
 8009f88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f90:	78fa      	ldrb	r2, [r7, #3]
 8009f92:	4611      	mov	r1, r2
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7fa fa15 	bl	80043c4 <HAL_PCD_EP_Close>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f9e:	7bfb      	ldrb	r3, [r7, #15]
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f000 f8fd 	bl	800a1a0 <USBD_Get_USB_Status>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009faa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3710      	adds	r7, #16
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009fce:	78fa      	ldrb	r2, [r7, #3]
 8009fd0:	4611      	mov	r1, r2
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7fa faed 	bl	80045b2 <HAL_PCD_EP_SetStall>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fdc:	7bfb      	ldrb	r3, [r7, #15]
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f000 f8de 	bl	800a1a0 <USBD_Get_USB_Status>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fe8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b084      	sub	sp, #16
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ffe:	2300      	movs	r3, #0
 800a000:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a002:	2300      	movs	r3, #0
 800a004:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a00c:	78fa      	ldrb	r2, [r7, #3]
 800a00e:	4611      	mov	r1, r2
 800a010:	4618      	mov	r0, r3
 800a012:	f7fa fb32 	bl	800467a <HAL_PCD_EP_ClrStall>
 800a016:	4603      	mov	r3, r0
 800a018:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a01a:	7bfb      	ldrb	r3, [r7, #15]
 800a01c:	4618      	mov	r0, r3
 800a01e:	f000 f8bf 	bl	800a1a0 <USBD_Get_USB_Status>
 800a022:	4603      	mov	r3, r0
 800a024:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a026:	7bbb      	ldrb	r3, [r7, #14]
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3710      	adds	r7, #16
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a030:	b480      	push	{r7}
 800a032:	b085      	sub	sp, #20
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	460b      	mov	r3, r1
 800a03a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a042:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a044:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	da0b      	bge.n	800a064 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a04c:	78fb      	ldrb	r3, [r7, #3]
 800a04e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a052:	68f9      	ldr	r1, [r7, #12]
 800a054:	4613      	mov	r3, r2
 800a056:	00db      	lsls	r3, r3, #3
 800a058:	1a9b      	subs	r3, r3, r2
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	440b      	add	r3, r1
 800a05e:	333e      	adds	r3, #62	; 0x3e
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	e00b      	b.n	800a07c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a064:	78fb      	ldrb	r3, [r7, #3]
 800a066:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a06a:	68f9      	ldr	r1, [r7, #12]
 800a06c:	4613      	mov	r3, r2
 800a06e:	00db      	lsls	r3, r3, #3
 800a070:	1a9b      	subs	r3, r3, r2
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	440b      	add	r3, r1
 800a076:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a07a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3714      	adds	r7, #20
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	460b      	mov	r3, r1
 800a092:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a094:	2300      	movs	r3, #0
 800a096:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a098:	2300      	movs	r3, #0
 800a09a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a0a2:	78fa      	ldrb	r2, [r7, #3]
 800a0a4:	4611      	mov	r1, r2
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7fa f8ff 	bl	80042aa <HAL_PCD_SetAddress>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0b0:	7bfb      	ldrb	r3, [r7, #15]
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f000 f874 	bl	800a1a0 <USBD_Get_USB_Status>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b086      	sub	sp, #24
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	60f8      	str	r0, [r7, #12]
 800a0ce:	607a      	str	r2, [r7, #4]
 800a0d0:	603b      	str	r3, [r7, #0]
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a0e4:	7af9      	ldrb	r1, [r7, #11]
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	f7fa fa18 	bl	800451e <HAL_PCD_EP_Transmit>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0f2:	7dfb      	ldrb	r3, [r7, #23]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f000 f853 	bl	800a1a0 <USBD_Get_USB_Status>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a0fe:	7dbb      	ldrb	r3, [r7, #22]
}
 800a100:	4618      	mov	r0, r3
 800a102:	3718      	adds	r7, #24
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b086      	sub	sp, #24
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	607a      	str	r2, [r7, #4]
 800a112:	603b      	str	r3, [r7, #0]
 800a114:	460b      	mov	r3, r1
 800a116:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a118:	2300      	movs	r3, #0
 800a11a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a11c:	2300      	movs	r3, #0
 800a11e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a126:	7af9      	ldrb	r1, [r7, #11]
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	f7fa f994 	bl	8004458 <HAL_PCD_EP_Receive>
 800a130:	4603      	mov	r3, r0
 800a132:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a134:	7dfb      	ldrb	r3, [r7, #23]
 800a136:	4618      	mov	r0, r3
 800a138:	f000 f832 	bl	800a1a0 <USBD_Get_USB_Status>
 800a13c:	4603      	mov	r3, r0
 800a13e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a140:	7dbb      	ldrb	r3, [r7, #22]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3718      	adds	r7, #24
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b082      	sub	sp, #8
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
 800a152:	460b      	mov	r3, r1
 800a154:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a15c:	78fa      	ldrb	r2, [r7, #3]
 800a15e:	4611      	mov	r1, r2
 800a160:	4618      	mov	r0, r3
 800a162:	f7fa f9c4 	bl	80044ee <HAL_PCD_EP_GetRxCount>
 800a166:	4603      	mov	r3, r0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3708      	adds	r7, #8
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a178:	4b03      	ldr	r3, [pc, #12]	; (800a188 <USBD_static_malloc+0x18>)
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	370c      	adds	r7, #12
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr
 800a186:	bf00      	nop
 800a188:	200008b4 	.word	0x200008b4

0800a18c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]

}
 800a194:	bf00      	nop
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a1ae:	79fb      	ldrb	r3, [r7, #7]
 800a1b0:	2b03      	cmp	r3, #3
 800a1b2:	d817      	bhi.n	800a1e4 <USBD_Get_USB_Status+0x44>
 800a1b4:	a201      	add	r2, pc, #4	; (adr r2, 800a1bc <USBD_Get_USB_Status+0x1c>)
 800a1b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ba:	bf00      	nop
 800a1bc:	0800a1cd 	.word	0x0800a1cd
 800a1c0:	0800a1d3 	.word	0x0800a1d3
 800a1c4:	0800a1d9 	.word	0x0800a1d9
 800a1c8:	0800a1df 	.word	0x0800a1df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a1d0:	e00b      	b.n	800a1ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a1d6:	e008      	b.n	800a1ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	73fb      	strb	r3, [r7, #15]
    break;
 800a1dc:	e005      	b.n	800a1ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a1de:	2303      	movs	r3, #3
 800a1e0:	73fb      	strb	r3, [r7, #15]
    break;
 800a1e2:	e002      	b.n	800a1ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a1e4:	2303      	movs	r3, #3
 800a1e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a1e8:	bf00      	nop
  }
  return usb_status;
 800a1ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <__errno>:
 800a1f8:	4b01      	ldr	r3, [pc, #4]	; (800a200 <__errno+0x8>)
 800a1fa:	6818      	ldr	r0, [r3, #0]
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	20000194 	.word	0x20000194

0800a204 <__libc_init_array>:
 800a204:	b570      	push	{r4, r5, r6, lr}
 800a206:	4d0d      	ldr	r5, [pc, #52]	; (800a23c <__libc_init_array+0x38>)
 800a208:	4c0d      	ldr	r4, [pc, #52]	; (800a240 <__libc_init_array+0x3c>)
 800a20a:	1b64      	subs	r4, r4, r5
 800a20c:	10a4      	asrs	r4, r4, #2
 800a20e:	2600      	movs	r6, #0
 800a210:	42a6      	cmp	r6, r4
 800a212:	d109      	bne.n	800a228 <__libc_init_array+0x24>
 800a214:	4d0b      	ldr	r5, [pc, #44]	; (800a244 <__libc_init_array+0x40>)
 800a216:	4c0c      	ldr	r4, [pc, #48]	; (800a248 <__libc_init_array+0x44>)
 800a218:	f001 fcb0 	bl	800bb7c <_init>
 800a21c:	1b64      	subs	r4, r4, r5
 800a21e:	10a4      	asrs	r4, r4, #2
 800a220:	2600      	movs	r6, #0
 800a222:	42a6      	cmp	r6, r4
 800a224:	d105      	bne.n	800a232 <__libc_init_array+0x2e>
 800a226:	bd70      	pop	{r4, r5, r6, pc}
 800a228:	f855 3b04 	ldr.w	r3, [r5], #4
 800a22c:	4798      	blx	r3
 800a22e:	3601      	adds	r6, #1
 800a230:	e7ee      	b.n	800a210 <__libc_init_array+0xc>
 800a232:	f855 3b04 	ldr.w	r3, [r5], #4
 800a236:	4798      	blx	r3
 800a238:	3601      	adds	r6, #1
 800a23a:	e7f2      	b.n	800a222 <__libc_init_array+0x1e>
 800a23c:	0800d310 	.word	0x0800d310
 800a240:	0800d310 	.word	0x0800d310
 800a244:	0800d310 	.word	0x0800d310
 800a248:	0800d314 	.word	0x0800d314

0800a24c <memset>:
 800a24c:	4402      	add	r2, r0
 800a24e:	4603      	mov	r3, r0
 800a250:	4293      	cmp	r3, r2
 800a252:	d100      	bne.n	800a256 <memset+0xa>
 800a254:	4770      	bx	lr
 800a256:	f803 1b01 	strb.w	r1, [r3], #1
 800a25a:	e7f9      	b.n	800a250 <memset+0x4>

0800a25c <siprintf>:
 800a25c:	b40e      	push	{r1, r2, r3}
 800a25e:	b500      	push	{lr}
 800a260:	b09c      	sub	sp, #112	; 0x70
 800a262:	ab1d      	add	r3, sp, #116	; 0x74
 800a264:	9002      	str	r0, [sp, #8]
 800a266:	9006      	str	r0, [sp, #24]
 800a268:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a26c:	4809      	ldr	r0, [pc, #36]	; (800a294 <siprintf+0x38>)
 800a26e:	9107      	str	r1, [sp, #28]
 800a270:	9104      	str	r1, [sp, #16]
 800a272:	4909      	ldr	r1, [pc, #36]	; (800a298 <siprintf+0x3c>)
 800a274:	f853 2b04 	ldr.w	r2, [r3], #4
 800a278:	9105      	str	r1, [sp, #20]
 800a27a:	6800      	ldr	r0, [r0, #0]
 800a27c:	9301      	str	r3, [sp, #4]
 800a27e:	a902      	add	r1, sp, #8
 800a280:	f000 f868 	bl	800a354 <_svfiprintf_r>
 800a284:	9b02      	ldr	r3, [sp, #8]
 800a286:	2200      	movs	r2, #0
 800a288:	701a      	strb	r2, [r3, #0]
 800a28a:	b01c      	add	sp, #112	; 0x70
 800a28c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a290:	b003      	add	sp, #12
 800a292:	4770      	bx	lr
 800a294:	20000194 	.word	0x20000194
 800a298:	ffff0208 	.word	0xffff0208

0800a29c <__ssputs_r>:
 800a29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2a0:	688e      	ldr	r6, [r1, #8]
 800a2a2:	429e      	cmp	r6, r3
 800a2a4:	4682      	mov	sl, r0
 800a2a6:	460c      	mov	r4, r1
 800a2a8:	4690      	mov	r8, r2
 800a2aa:	461f      	mov	r7, r3
 800a2ac:	d838      	bhi.n	800a320 <__ssputs_r+0x84>
 800a2ae:	898a      	ldrh	r2, [r1, #12]
 800a2b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2b4:	d032      	beq.n	800a31c <__ssputs_r+0x80>
 800a2b6:	6825      	ldr	r5, [r4, #0]
 800a2b8:	6909      	ldr	r1, [r1, #16]
 800a2ba:	eba5 0901 	sub.w	r9, r5, r1
 800a2be:	6965      	ldr	r5, [r4, #20]
 800a2c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	444b      	add	r3, r9
 800a2cc:	106d      	asrs	r5, r5, #1
 800a2ce:	429d      	cmp	r5, r3
 800a2d0:	bf38      	it	cc
 800a2d2:	461d      	movcc	r5, r3
 800a2d4:	0553      	lsls	r3, r2, #21
 800a2d6:	d531      	bpl.n	800a33c <__ssputs_r+0xa0>
 800a2d8:	4629      	mov	r1, r5
 800a2da:	f000 fb47 	bl	800a96c <_malloc_r>
 800a2de:	4606      	mov	r6, r0
 800a2e0:	b950      	cbnz	r0, 800a2f8 <__ssputs_r+0x5c>
 800a2e2:	230c      	movs	r3, #12
 800a2e4:	f8ca 3000 	str.w	r3, [sl]
 800a2e8:	89a3      	ldrh	r3, [r4, #12]
 800a2ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2ee:	81a3      	strh	r3, [r4, #12]
 800a2f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2f8:	6921      	ldr	r1, [r4, #16]
 800a2fa:	464a      	mov	r2, r9
 800a2fc:	f000 fabe 	bl	800a87c <memcpy>
 800a300:	89a3      	ldrh	r3, [r4, #12]
 800a302:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a30a:	81a3      	strh	r3, [r4, #12]
 800a30c:	6126      	str	r6, [r4, #16]
 800a30e:	6165      	str	r5, [r4, #20]
 800a310:	444e      	add	r6, r9
 800a312:	eba5 0509 	sub.w	r5, r5, r9
 800a316:	6026      	str	r6, [r4, #0]
 800a318:	60a5      	str	r5, [r4, #8]
 800a31a:	463e      	mov	r6, r7
 800a31c:	42be      	cmp	r6, r7
 800a31e:	d900      	bls.n	800a322 <__ssputs_r+0x86>
 800a320:	463e      	mov	r6, r7
 800a322:	4632      	mov	r2, r6
 800a324:	6820      	ldr	r0, [r4, #0]
 800a326:	4641      	mov	r1, r8
 800a328:	f000 fab6 	bl	800a898 <memmove>
 800a32c:	68a3      	ldr	r3, [r4, #8]
 800a32e:	6822      	ldr	r2, [r4, #0]
 800a330:	1b9b      	subs	r3, r3, r6
 800a332:	4432      	add	r2, r6
 800a334:	60a3      	str	r3, [r4, #8]
 800a336:	6022      	str	r2, [r4, #0]
 800a338:	2000      	movs	r0, #0
 800a33a:	e7db      	b.n	800a2f4 <__ssputs_r+0x58>
 800a33c:	462a      	mov	r2, r5
 800a33e:	f000 fb6f 	bl	800aa20 <_realloc_r>
 800a342:	4606      	mov	r6, r0
 800a344:	2800      	cmp	r0, #0
 800a346:	d1e1      	bne.n	800a30c <__ssputs_r+0x70>
 800a348:	6921      	ldr	r1, [r4, #16]
 800a34a:	4650      	mov	r0, sl
 800a34c:	f000 fabe 	bl	800a8cc <_free_r>
 800a350:	e7c7      	b.n	800a2e2 <__ssputs_r+0x46>
	...

0800a354 <_svfiprintf_r>:
 800a354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a358:	4698      	mov	r8, r3
 800a35a:	898b      	ldrh	r3, [r1, #12]
 800a35c:	061b      	lsls	r3, r3, #24
 800a35e:	b09d      	sub	sp, #116	; 0x74
 800a360:	4607      	mov	r7, r0
 800a362:	460d      	mov	r5, r1
 800a364:	4614      	mov	r4, r2
 800a366:	d50e      	bpl.n	800a386 <_svfiprintf_r+0x32>
 800a368:	690b      	ldr	r3, [r1, #16]
 800a36a:	b963      	cbnz	r3, 800a386 <_svfiprintf_r+0x32>
 800a36c:	2140      	movs	r1, #64	; 0x40
 800a36e:	f000 fafd 	bl	800a96c <_malloc_r>
 800a372:	6028      	str	r0, [r5, #0]
 800a374:	6128      	str	r0, [r5, #16]
 800a376:	b920      	cbnz	r0, 800a382 <_svfiprintf_r+0x2e>
 800a378:	230c      	movs	r3, #12
 800a37a:	603b      	str	r3, [r7, #0]
 800a37c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a380:	e0d1      	b.n	800a526 <_svfiprintf_r+0x1d2>
 800a382:	2340      	movs	r3, #64	; 0x40
 800a384:	616b      	str	r3, [r5, #20]
 800a386:	2300      	movs	r3, #0
 800a388:	9309      	str	r3, [sp, #36]	; 0x24
 800a38a:	2320      	movs	r3, #32
 800a38c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a390:	f8cd 800c 	str.w	r8, [sp, #12]
 800a394:	2330      	movs	r3, #48	; 0x30
 800a396:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a540 <_svfiprintf_r+0x1ec>
 800a39a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a39e:	f04f 0901 	mov.w	r9, #1
 800a3a2:	4623      	mov	r3, r4
 800a3a4:	469a      	mov	sl, r3
 800a3a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3aa:	b10a      	cbz	r2, 800a3b0 <_svfiprintf_r+0x5c>
 800a3ac:	2a25      	cmp	r2, #37	; 0x25
 800a3ae:	d1f9      	bne.n	800a3a4 <_svfiprintf_r+0x50>
 800a3b0:	ebba 0b04 	subs.w	fp, sl, r4
 800a3b4:	d00b      	beq.n	800a3ce <_svfiprintf_r+0x7a>
 800a3b6:	465b      	mov	r3, fp
 800a3b8:	4622      	mov	r2, r4
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	4638      	mov	r0, r7
 800a3be:	f7ff ff6d 	bl	800a29c <__ssputs_r>
 800a3c2:	3001      	adds	r0, #1
 800a3c4:	f000 80aa 	beq.w	800a51c <_svfiprintf_r+0x1c8>
 800a3c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3ca:	445a      	add	r2, fp
 800a3cc:	9209      	str	r2, [sp, #36]	; 0x24
 800a3ce:	f89a 3000 	ldrb.w	r3, [sl]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	f000 80a2 	beq.w	800a51c <_svfiprintf_r+0x1c8>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3e2:	f10a 0a01 	add.w	sl, sl, #1
 800a3e6:	9304      	str	r3, [sp, #16]
 800a3e8:	9307      	str	r3, [sp, #28]
 800a3ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3ee:	931a      	str	r3, [sp, #104]	; 0x68
 800a3f0:	4654      	mov	r4, sl
 800a3f2:	2205      	movs	r2, #5
 800a3f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3f8:	4851      	ldr	r0, [pc, #324]	; (800a540 <_svfiprintf_r+0x1ec>)
 800a3fa:	f7f5 fef1 	bl	80001e0 <memchr>
 800a3fe:	9a04      	ldr	r2, [sp, #16]
 800a400:	b9d8      	cbnz	r0, 800a43a <_svfiprintf_r+0xe6>
 800a402:	06d0      	lsls	r0, r2, #27
 800a404:	bf44      	itt	mi
 800a406:	2320      	movmi	r3, #32
 800a408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a40c:	0711      	lsls	r1, r2, #28
 800a40e:	bf44      	itt	mi
 800a410:	232b      	movmi	r3, #43	; 0x2b
 800a412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a416:	f89a 3000 	ldrb.w	r3, [sl]
 800a41a:	2b2a      	cmp	r3, #42	; 0x2a
 800a41c:	d015      	beq.n	800a44a <_svfiprintf_r+0xf6>
 800a41e:	9a07      	ldr	r2, [sp, #28]
 800a420:	4654      	mov	r4, sl
 800a422:	2000      	movs	r0, #0
 800a424:	f04f 0c0a 	mov.w	ip, #10
 800a428:	4621      	mov	r1, r4
 800a42a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a42e:	3b30      	subs	r3, #48	; 0x30
 800a430:	2b09      	cmp	r3, #9
 800a432:	d94e      	bls.n	800a4d2 <_svfiprintf_r+0x17e>
 800a434:	b1b0      	cbz	r0, 800a464 <_svfiprintf_r+0x110>
 800a436:	9207      	str	r2, [sp, #28]
 800a438:	e014      	b.n	800a464 <_svfiprintf_r+0x110>
 800a43a:	eba0 0308 	sub.w	r3, r0, r8
 800a43e:	fa09 f303 	lsl.w	r3, r9, r3
 800a442:	4313      	orrs	r3, r2
 800a444:	9304      	str	r3, [sp, #16]
 800a446:	46a2      	mov	sl, r4
 800a448:	e7d2      	b.n	800a3f0 <_svfiprintf_r+0x9c>
 800a44a:	9b03      	ldr	r3, [sp, #12]
 800a44c:	1d19      	adds	r1, r3, #4
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	9103      	str	r1, [sp, #12]
 800a452:	2b00      	cmp	r3, #0
 800a454:	bfbb      	ittet	lt
 800a456:	425b      	neglt	r3, r3
 800a458:	f042 0202 	orrlt.w	r2, r2, #2
 800a45c:	9307      	strge	r3, [sp, #28]
 800a45e:	9307      	strlt	r3, [sp, #28]
 800a460:	bfb8      	it	lt
 800a462:	9204      	strlt	r2, [sp, #16]
 800a464:	7823      	ldrb	r3, [r4, #0]
 800a466:	2b2e      	cmp	r3, #46	; 0x2e
 800a468:	d10c      	bne.n	800a484 <_svfiprintf_r+0x130>
 800a46a:	7863      	ldrb	r3, [r4, #1]
 800a46c:	2b2a      	cmp	r3, #42	; 0x2a
 800a46e:	d135      	bne.n	800a4dc <_svfiprintf_r+0x188>
 800a470:	9b03      	ldr	r3, [sp, #12]
 800a472:	1d1a      	adds	r2, r3, #4
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	9203      	str	r2, [sp, #12]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	bfb8      	it	lt
 800a47c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a480:	3402      	adds	r4, #2
 800a482:	9305      	str	r3, [sp, #20]
 800a484:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a550 <_svfiprintf_r+0x1fc>
 800a488:	7821      	ldrb	r1, [r4, #0]
 800a48a:	2203      	movs	r2, #3
 800a48c:	4650      	mov	r0, sl
 800a48e:	f7f5 fea7 	bl	80001e0 <memchr>
 800a492:	b140      	cbz	r0, 800a4a6 <_svfiprintf_r+0x152>
 800a494:	2340      	movs	r3, #64	; 0x40
 800a496:	eba0 000a 	sub.w	r0, r0, sl
 800a49a:	fa03 f000 	lsl.w	r0, r3, r0
 800a49e:	9b04      	ldr	r3, [sp, #16]
 800a4a0:	4303      	orrs	r3, r0
 800a4a2:	3401      	adds	r4, #1
 800a4a4:	9304      	str	r3, [sp, #16]
 800a4a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4aa:	4826      	ldr	r0, [pc, #152]	; (800a544 <_svfiprintf_r+0x1f0>)
 800a4ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4b0:	2206      	movs	r2, #6
 800a4b2:	f7f5 fe95 	bl	80001e0 <memchr>
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	d038      	beq.n	800a52c <_svfiprintf_r+0x1d8>
 800a4ba:	4b23      	ldr	r3, [pc, #140]	; (800a548 <_svfiprintf_r+0x1f4>)
 800a4bc:	bb1b      	cbnz	r3, 800a506 <_svfiprintf_r+0x1b2>
 800a4be:	9b03      	ldr	r3, [sp, #12]
 800a4c0:	3307      	adds	r3, #7
 800a4c2:	f023 0307 	bic.w	r3, r3, #7
 800a4c6:	3308      	adds	r3, #8
 800a4c8:	9303      	str	r3, [sp, #12]
 800a4ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4cc:	4433      	add	r3, r6
 800a4ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d0:	e767      	b.n	800a3a2 <_svfiprintf_r+0x4e>
 800a4d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4d6:	460c      	mov	r4, r1
 800a4d8:	2001      	movs	r0, #1
 800a4da:	e7a5      	b.n	800a428 <_svfiprintf_r+0xd4>
 800a4dc:	2300      	movs	r3, #0
 800a4de:	3401      	adds	r4, #1
 800a4e0:	9305      	str	r3, [sp, #20]
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	f04f 0c0a 	mov.w	ip, #10
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4ee:	3a30      	subs	r2, #48	; 0x30
 800a4f0:	2a09      	cmp	r2, #9
 800a4f2:	d903      	bls.n	800a4fc <_svfiprintf_r+0x1a8>
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d0c5      	beq.n	800a484 <_svfiprintf_r+0x130>
 800a4f8:	9105      	str	r1, [sp, #20]
 800a4fa:	e7c3      	b.n	800a484 <_svfiprintf_r+0x130>
 800a4fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a500:	4604      	mov	r4, r0
 800a502:	2301      	movs	r3, #1
 800a504:	e7f0      	b.n	800a4e8 <_svfiprintf_r+0x194>
 800a506:	ab03      	add	r3, sp, #12
 800a508:	9300      	str	r3, [sp, #0]
 800a50a:	462a      	mov	r2, r5
 800a50c:	4b0f      	ldr	r3, [pc, #60]	; (800a54c <_svfiprintf_r+0x1f8>)
 800a50e:	a904      	add	r1, sp, #16
 800a510:	4638      	mov	r0, r7
 800a512:	f3af 8000 	nop.w
 800a516:	1c42      	adds	r2, r0, #1
 800a518:	4606      	mov	r6, r0
 800a51a:	d1d6      	bne.n	800a4ca <_svfiprintf_r+0x176>
 800a51c:	89ab      	ldrh	r3, [r5, #12]
 800a51e:	065b      	lsls	r3, r3, #25
 800a520:	f53f af2c 	bmi.w	800a37c <_svfiprintf_r+0x28>
 800a524:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a526:	b01d      	add	sp, #116	; 0x74
 800a528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a52c:	ab03      	add	r3, sp, #12
 800a52e:	9300      	str	r3, [sp, #0]
 800a530:	462a      	mov	r2, r5
 800a532:	4b06      	ldr	r3, [pc, #24]	; (800a54c <_svfiprintf_r+0x1f8>)
 800a534:	a904      	add	r1, sp, #16
 800a536:	4638      	mov	r0, r7
 800a538:	f000 f87a 	bl	800a630 <_printf_i>
 800a53c:	e7eb      	b.n	800a516 <_svfiprintf_r+0x1c2>
 800a53e:	bf00      	nop
 800a540:	0800d0fc 	.word	0x0800d0fc
 800a544:	0800d106 	.word	0x0800d106
 800a548:	00000000 	.word	0x00000000
 800a54c:	0800a29d 	.word	0x0800a29d
 800a550:	0800d102 	.word	0x0800d102

0800a554 <_printf_common>:
 800a554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a558:	4616      	mov	r6, r2
 800a55a:	4699      	mov	r9, r3
 800a55c:	688a      	ldr	r2, [r1, #8]
 800a55e:	690b      	ldr	r3, [r1, #16]
 800a560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a564:	4293      	cmp	r3, r2
 800a566:	bfb8      	it	lt
 800a568:	4613      	movlt	r3, r2
 800a56a:	6033      	str	r3, [r6, #0]
 800a56c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a570:	4607      	mov	r7, r0
 800a572:	460c      	mov	r4, r1
 800a574:	b10a      	cbz	r2, 800a57a <_printf_common+0x26>
 800a576:	3301      	adds	r3, #1
 800a578:	6033      	str	r3, [r6, #0]
 800a57a:	6823      	ldr	r3, [r4, #0]
 800a57c:	0699      	lsls	r1, r3, #26
 800a57e:	bf42      	ittt	mi
 800a580:	6833      	ldrmi	r3, [r6, #0]
 800a582:	3302      	addmi	r3, #2
 800a584:	6033      	strmi	r3, [r6, #0]
 800a586:	6825      	ldr	r5, [r4, #0]
 800a588:	f015 0506 	ands.w	r5, r5, #6
 800a58c:	d106      	bne.n	800a59c <_printf_common+0x48>
 800a58e:	f104 0a19 	add.w	sl, r4, #25
 800a592:	68e3      	ldr	r3, [r4, #12]
 800a594:	6832      	ldr	r2, [r6, #0]
 800a596:	1a9b      	subs	r3, r3, r2
 800a598:	42ab      	cmp	r3, r5
 800a59a:	dc26      	bgt.n	800a5ea <_printf_common+0x96>
 800a59c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5a0:	1e13      	subs	r3, r2, #0
 800a5a2:	6822      	ldr	r2, [r4, #0]
 800a5a4:	bf18      	it	ne
 800a5a6:	2301      	movne	r3, #1
 800a5a8:	0692      	lsls	r2, r2, #26
 800a5aa:	d42b      	bmi.n	800a604 <_printf_common+0xb0>
 800a5ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5b0:	4649      	mov	r1, r9
 800a5b2:	4638      	mov	r0, r7
 800a5b4:	47c0      	blx	r8
 800a5b6:	3001      	adds	r0, #1
 800a5b8:	d01e      	beq.n	800a5f8 <_printf_common+0xa4>
 800a5ba:	6823      	ldr	r3, [r4, #0]
 800a5bc:	68e5      	ldr	r5, [r4, #12]
 800a5be:	6832      	ldr	r2, [r6, #0]
 800a5c0:	f003 0306 	and.w	r3, r3, #6
 800a5c4:	2b04      	cmp	r3, #4
 800a5c6:	bf08      	it	eq
 800a5c8:	1aad      	subeq	r5, r5, r2
 800a5ca:	68a3      	ldr	r3, [r4, #8]
 800a5cc:	6922      	ldr	r2, [r4, #16]
 800a5ce:	bf0c      	ite	eq
 800a5d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5d4:	2500      	movne	r5, #0
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	bfc4      	itt	gt
 800a5da:	1a9b      	subgt	r3, r3, r2
 800a5dc:	18ed      	addgt	r5, r5, r3
 800a5de:	2600      	movs	r6, #0
 800a5e0:	341a      	adds	r4, #26
 800a5e2:	42b5      	cmp	r5, r6
 800a5e4:	d11a      	bne.n	800a61c <_printf_common+0xc8>
 800a5e6:	2000      	movs	r0, #0
 800a5e8:	e008      	b.n	800a5fc <_printf_common+0xa8>
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	4652      	mov	r2, sl
 800a5ee:	4649      	mov	r1, r9
 800a5f0:	4638      	mov	r0, r7
 800a5f2:	47c0      	blx	r8
 800a5f4:	3001      	adds	r0, #1
 800a5f6:	d103      	bne.n	800a600 <_printf_common+0xac>
 800a5f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a600:	3501      	adds	r5, #1
 800a602:	e7c6      	b.n	800a592 <_printf_common+0x3e>
 800a604:	18e1      	adds	r1, r4, r3
 800a606:	1c5a      	adds	r2, r3, #1
 800a608:	2030      	movs	r0, #48	; 0x30
 800a60a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a60e:	4422      	add	r2, r4
 800a610:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a614:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a618:	3302      	adds	r3, #2
 800a61a:	e7c7      	b.n	800a5ac <_printf_common+0x58>
 800a61c:	2301      	movs	r3, #1
 800a61e:	4622      	mov	r2, r4
 800a620:	4649      	mov	r1, r9
 800a622:	4638      	mov	r0, r7
 800a624:	47c0      	blx	r8
 800a626:	3001      	adds	r0, #1
 800a628:	d0e6      	beq.n	800a5f8 <_printf_common+0xa4>
 800a62a:	3601      	adds	r6, #1
 800a62c:	e7d9      	b.n	800a5e2 <_printf_common+0x8e>
	...

0800a630 <_printf_i>:
 800a630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a634:	460c      	mov	r4, r1
 800a636:	4691      	mov	r9, r2
 800a638:	7e27      	ldrb	r7, [r4, #24]
 800a63a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a63c:	2f78      	cmp	r7, #120	; 0x78
 800a63e:	4680      	mov	r8, r0
 800a640:	469a      	mov	sl, r3
 800a642:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a646:	d807      	bhi.n	800a658 <_printf_i+0x28>
 800a648:	2f62      	cmp	r7, #98	; 0x62
 800a64a:	d80a      	bhi.n	800a662 <_printf_i+0x32>
 800a64c:	2f00      	cmp	r7, #0
 800a64e:	f000 80d8 	beq.w	800a802 <_printf_i+0x1d2>
 800a652:	2f58      	cmp	r7, #88	; 0x58
 800a654:	f000 80a3 	beq.w	800a79e <_printf_i+0x16e>
 800a658:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a65c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a660:	e03a      	b.n	800a6d8 <_printf_i+0xa8>
 800a662:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a666:	2b15      	cmp	r3, #21
 800a668:	d8f6      	bhi.n	800a658 <_printf_i+0x28>
 800a66a:	a001      	add	r0, pc, #4	; (adr r0, 800a670 <_printf_i+0x40>)
 800a66c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a670:	0800a6c9 	.word	0x0800a6c9
 800a674:	0800a6dd 	.word	0x0800a6dd
 800a678:	0800a659 	.word	0x0800a659
 800a67c:	0800a659 	.word	0x0800a659
 800a680:	0800a659 	.word	0x0800a659
 800a684:	0800a659 	.word	0x0800a659
 800a688:	0800a6dd 	.word	0x0800a6dd
 800a68c:	0800a659 	.word	0x0800a659
 800a690:	0800a659 	.word	0x0800a659
 800a694:	0800a659 	.word	0x0800a659
 800a698:	0800a659 	.word	0x0800a659
 800a69c:	0800a7e9 	.word	0x0800a7e9
 800a6a0:	0800a70d 	.word	0x0800a70d
 800a6a4:	0800a7cb 	.word	0x0800a7cb
 800a6a8:	0800a659 	.word	0x0800a659
 800a6ac:	0800a659 	.word	0x0800a659
 800a6b0:	0800a80b 	.word	0x0800a80b
 800a6b4:	0800a659 	.word	0x0800a659
 800a6b8:	0800a70d 	.word	0x0800a70d
 800a6bc:	0800a659 	.word	0x0800a659
 800a6c0:	0800a659 	.word	0x0800a659
 800a6c4:	0800a7d3 	.word	0x0800a7d3
 800a6c8:	680b      	ldr	r3, [r1, #0]
 800a6ca:	1d1a      	adds	r2, r3, #4
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	600a      	str	r2, [r1, #0]
 800a6d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a6d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6d8:	2301      	movs	r3, #1
 800a6da:	e0a3      	b.n	800a824 <_printf_i+0x1f4>
 800a6dc:	6825      	ldr	r5, [r4, #0]
 800a6de:	6808      	ldr	r0, [r1, #0]
 800a6e0:	062e      	lsls	r6, r5, #24
 800a6e2:	f100 0304 	add.w	r3, r0, #4
 800a6e6:	d50a      	bpl.n	800a6fe <_printf_i+0xce>
 800a6e8:	6805      	ldr	r5, [r0, #0]
 800a6ea:	600b      	str	r3, [r1, #0]
 800a6ec:	2d00      	cmp	r5, #0
 800a6ee:	da03      	bge.n	800a6f8 <_printf_i+0xc8>
 800a6f0:	232d      	movs	r3, #45	; 0x2d
 800a6f2:	426d      	negs	r5, r5
 800a6f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6f8:	485e      	ldr	r0, [pc, #376]	; (800a874 <_printf_i+0x244>)
 800a6fa:	230a      	movs	r3, #10
 800a6fc:	e019      	b.n	800a732 <_printf_i+0x102>
 800a6fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a702:	6805      	ldr	r5, [r0, #0]
 800a704:	600b      	str	r3, [r1, #0]
 800a706:	bf18      	it	ne
 800a708:	b22d      	sxthne	r5, r5
 800a70a:	e7ef      	b.n	800a6ec <_printf_i+0xbc>
 800a70c:	680b      	ldr	r3, [r1, #0]
 800a70e:	6825      	ldr	r5, [r4, #0]
 800a710:	1d18      	adds	r0, r3, #4
 800a712:	6008      	str	r0, [r1, #0]
 800a714:	0628      	lsls	r0, r5, #24
 800a716:	d501      	bpl.n	800a71c <_printf_i+0xec>
 800a718:	681d      	ldr	r5, [r3, #0]
 800a71a:	e002      	b.n	800a722 <_printf_i+0xf2>
 800a71c:	0669      	lsls	r1, r5, #25
 800a71e:	d5fb      	bpl.n	800a718 <_printf_i+0xe8>
 800a720:	881d      	ldrh	r5, [r3, #0]
 800a722:	4854      	ldr	r0, [pc, #336]	; (800a874 <_printf_i+0x244>)
 800a724:	2f6f      	cmp	r7, #111	; 0x6f
 800a726:	bf0c      	ite	eq
 800a728:	2308      	moveq	r3, #8
 800a72a:	230a      	movne	r3, #10
 800a72c:	2100      	movs	r1, #0
 800a72e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a732:	6866      	ldr	r6, [r4, #4]
 800a734:	60a6      	str	r6, [r4, #8]
 800a736:	2e00      	cmp	r6, #0
 800a738:	bfa2      	ittt	ge
 800a73a:	6821      	ldrge	r1, [r4, #0]
 800a73c:	f021 0104 	bicge.w	r1, r1, #4
 800a740:	6021      	strge	r1, [r4, #0]
 800a742:	b90d      	cbnz	r5, 800a748 <_printf_i+0x118>
 800a744:	2e00      	cmp	r6, #0
 800a746:	d04d      	beq.n	800a7e4 <_printf_i+0x1b4>
 800a748:	4616      	mov	r6, r2
 800a74a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a74e:	fb03 5711 	mls	r7, r3, r1, r5
 800a752:	5dc7      	ldrb	r7, [r0, r7]
 800a754:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a758:	462f      	mov	r7, r5
 800a75a:	42bb      	cmp	r3, r7
 800a75c:	460d      	mov	r5, r1
 800a75e:	d9f4      	bls.n	800a74a <_printf_i+0x11a>
 800a760:	2b08      	cmp	r3, #8
 800a762:	d10b      	bne.n	800a77c <_printf_i+0x14c>
 800a764:	6823      	ldr	r3, [r4, #0]
 800a766:	07df      	lsls	r7, r3, #31
 800a768:	d508      	bpl.n	800a77c <_printf_i+0x14c>
 800a76a:	6923      	ldr	r3, [r4, #16]
 800a76c:	6861      	ldr	r1, [r4, #4]
 800a76e:	4299      	cmp	r1, r3
 800a770:	bfde      	ittt	le
 800a772:	2330      	movle	r3, #48	; 0x30
 800a774:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a778:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a77c:	1b92      	subs	r2, r2, r6
 800a77e:	6122      	str	r2, [r4, #16]
 800a780:	f8cd a000 	str.w	sl, [sp]
 800a784:	464b      	mov	r3, r9
 800a786:	aa03      	add	r2, sp, #12
 800a788:	4621      	mov	r1, r4
 800a78a:	4640      	mov	r0, r8
 800a78c:	f7ff fee2 	bl	800a554 <_printf_common>
 800a790:	3001      	adds	r0, #1
 800a792:	d14c      	bne.n	800a82e <_printf_i+0x1fe>
 800a794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a798:	b004      	add	sp, #16
 800a79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a79e:	4835      	ldr	r0, [pc, #212]	; (800a874 <_printf_i+0x244>)
 800a7a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a7a4:	6823      	ldr	r3, [r4, #0]
 800a7a6:	680e      	ldr	r6, [r1, #0]
 800a7a8:	061f      	lsls	r7, r3, #24
 800a7aa:	f856 5b04 	ldr.w	r5, [r6], #4
 800a7ae:	600e      	str	r6, [r1, #0]
 800a7b0:	d514      	bpl.n	800a7dc <_printf_i+0x1ac>
 800a7b2:	07d9      	lsls	r1, r3, #31
 800a7b4:	bf44      	itt	mi
 800a7b6:	f043 0320 	orrmi.w	r3, r3, #32
 800a7ba:	6023      	strmi	r3, [r4, #0]
 800a7bc:	b91d      	cbnz	r5, 800a7c6 <_printf_i+0x196>
 800a7be:	6823      	ldr	r3, [r4, #0]
 800a7c0:	f023 0320 	bic.w	r3, r3, #32
 800a7c4:	6023      	str	r3, [r4, #0]
 800a7c6:	2310      	movs	r3, #16
 800a7c8:	e7b0      	b.n	800a72c <_printf_i+0xfc>
 800a7ca:	6823      	ldr	r3, [r4, #0]
 800a7cc:	f043 0320 	orr.w	r3, r3, #32
 800a7d0:	6023      	str	r3, [r4, #0]
 800a7d2:	2378      	movs	r3, #120	; 0x78
 800a7d4:	4828      	ldr	r0, [pc, #160]	; (800a878 <_printf_i+0x248>)
 800a7d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7da:	e7e3      	b.n	800a7a4 <_printf_i+0x174>
 800a7dc:	065e      	lsls	r6, r3, #25
 800a7de:	bf48      	it	mi
 800a7e0:	b2ad      	uxthmi	r5, r5
 800a7e2:	e7e6      	b.n	800a7b2 <_printf_i+0x182>
 800a7e4:	4616      	mov	r6, r2
 800a7e6:	e7bb      	b.n	800a760 <_printf_i+0x130>
 800a7e8:	680b      	ldr	r3, [r1, #0]
 800a7ea:	6826      	ldr	r6, [r4, #0]
 800a7ec:	6960      	ldr	r0, [r4, #20]
 800a7ee:	1d1d      	adds	r5, r3, #4
 800a7f0:	600d      	str	r5, [r1, #0]
 800a7f2:	0635      	lsls	r5, r6, #24
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	d501      	bpl.n	800a7fc <_printf_i+0x1cc>
 800a7f8:	6018      	str	r0, [r3, #0]
 800a7fa:	e002      	b.n	800a802 <_printf_i+0x1d2>
 800a7fc:	0671      	lsls	r1, r6, #25
 800a7fe:	d5fb      	bpl.n	800a7f8 <_printf_i+0x1c8>
 800a800:	8018      	strh	r0, [r3, #0]
 800a802:	2300      	movs	r3, #0
 800a804:	6123      	str	r3, [r4, #16]
 800a806:	4616      	mov	r6, r2
 800a808:	e7ba      	b.n	800a780 <_printf_i+0x150>
 800a80a:	680b      	ldr	r3, [r1, #0]
 800a80c:	1d1a      	adds	r2, r3, #4
 800a80e:	600a      	str	r2, [r1, #0]
 800a810:	681e      	ldr	r6, [r3, #0]
 800a812:	6862      	ldr	r2, [r4, #4]
 800a814:	2100      	movs	r1, #0
 800a816:	4630      	mov	r0, r6
 800a818:	f7f5 fce2 	bl	80001e0 <memchr>
 800a81c:	b108      	cbz	r0, 800a822 <_printf_i+0x1f2>
 800a81e:	1b80      	subs	r0, r0, r6
 800a820:	6060      	str	r0, [r4, #4]
 800a822:	6863      	ldr	r3, [r4, #4]
 800a824:	6123      	str	r3, [r4, #16]
 800a826:	2300      	movs	r3, #0
 800a828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a82c:	e7a8      	b.n	800a780 <_printf_i+0x150>
 800a82e:	6923      	ldr	r3, [r4, #16]
 800a830:	4632      	mov	r2, r6
 800a832:	4649      	mov	r1, r9
 800a834:	4640      	mov	r0, r8
 800a836:	47d0      	blx	sl
 800a838:	3001      	adds	r0, #1
 800a83a:	d0ab      	beq.n	800a794 <_printf_i+0x164>
 800a83c:	6823      	ldr	r3, [r4, #0]
 800a83e:	079b      	lsls	r3, r3, #30
 800a840:	d413      	bmi.n	800a86a <_printf_i+0x23a>
 800a842:	68e0      	ldr	r0, [r4, #12]
 800a844:	9b03      	ldr	r3, [sp, #12]
 800a846:	4298      	cmp	r0, r3
 800a848:	bfb8      	it	lt
 800a84a:	4618      	movlt	r0, r3
 800a84c:	e7a4      	b.n	800a798 <_printf_i+0x168>
 800a84e:	2301      	movs	r3, #1
 800a850:	4632      	mov	r2, r6
 800a852:	4649      	mov	r1, r9
 800a854:	4640      	mov	r0, r8
 800a856:	47d0      	blx	sl
 800a858:	3001      	adds	r0, #1
 800a85a:	d09b      	beq.n	800a794 <_printf_i+0x164>
 800a85c:	3501      	adds	r5, #1
 800a85e:	68e3      	ldr	r3, [r4, #12]
 800a860:	9903      	ldr	r1, [sp, #12]
 800a862:	1a5b      	subs	r3, r3, r1
 800a864:	42ab      	cmp	r3, r5
 800a866:	dcf2      	bgt.n	800a84e <_printf_i+0x21e>
 800a868:	e7eb      	b.n	800a842 <_printf_i+0x212>
 800a86a:	2500      	movs	r5, #0
 800a86c:	f104 0619 	add.w	r6, r4, #25
 800a870:	e7f5      	b.n	800a85e <_printf_i+0x22e>
 800a872:	bf00      	nop
 800a874:	0800d10d 	.word	0x0800d10d
 800a878:	0800d11e 	.word	0x0800d11e

0800a87c <memcpy>:
 800a87c:	440a      	add	r2, r1
 800a87e:	4291      	cmp	r1, r2
 800a880:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a884:	d100      	bne.n	800a888 <memcpy+0xc>
 800a886:	4770      	bx	lr
 800a888:	b510      	push	{r4, lr}
 800a88a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a88e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a892:	4291      	cmp	r1, r2
 800a894:	d1f9      	bne.n	800a88a <memcpy+0xe>
 800a896:	bd10      	pop	{r4, pc}

0800a898 <memmove>:
 800a898:	4288      	cmp	r0, r1
 800a89a:	b510      	push	{r4, lr}
 800a89c:	eb01 0402 	add.w	r4, r1, r2
 800a8a0:	d902      	bls.n	800a8a8 <memmove+0x10>
 800a8a2:	4284      	cmp	r4, r0
 800a8a4:	4623      	mov	r3, r4
 800a8a6:	d807      	bhi.n	800a8b8 <memmove+0x20>
 800a8a8:	1e43      	subs	r3, r0, #1
 800a8aa:	42a1      	cmp	r1, r4
 800a8ac:	d008      	beq.n	800a8c0 <memmove+0x28>
 800a8ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8b6:	e7f8      	b.n	800a8aa <memmove+0x12>
 800a8b8:	4402      	add	r2, r0
 800a8ba:	4601      	mov	r1, r0
 800a8bc:	428a      	cmp	r2, r1
 800a8be:	d100      	bne.n	800a8c2 <memmove+0x2a>
 800a8c0:	bd10      	pop	{r4, pc}
 800a8c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8ca:	e7f7      	b.n	800a8bc <memmove+0x24>

0800a8cc <_free_r>:
 800a8cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8ce:	2900      	cmp	r1, #0
 800a8d0:	d048      	beq.n	800a964 <_free_r+0x98>
 800a8d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8d6:	9001      	str	r0, [sp, #4]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	f1a1 0404 	sub.w	r4, r1, #4
 800a8de:	bfb8      	it	lt
 800a8e0:	18e4      	addlt	r4, r4, r3
 800a8e2:	f000 f8d3 	bl	800aa8c <__malloc_lock>
 800a8e6:	4a20      	ldr	r2, [pc, #128]	; (800a968 <_free_r+0x9c>)
 800a8e8:	9801      	ldr	r0, [sp, #4]
 800a8ea:	6813      	ldr	r3, [r2, #0]
 800a8ec:	4615      	mov	r5, r2
 800a8ee:	b933      	cbnz	r3, 800a8fe <_free_r+0x32>
 800a8f0:	6063      	str	r3, [r4, #4]
 800a8f2:	6014      	str	r4, [r2, #0]
 800a8f4:	b003      	add	sp, #12
 800a8f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8fa:	f000 b8cd 	b.w	800aa98 <__malloc_unlock>
 800a8fe:	42a3      	cmp	r3, r4
 800a900:	d90b      	bls.n	800a91a <_free_r+0x4e>
 800a902:	6821      	ldr	r1, [r4, #0]
 800a904:	1862      	adds	r2, r4, r1
 800a906:	4293      	cmp	r3, r2
 800a908:	bf04      	itt	eq
 800a90a:	681a      	ldreq	r2, [r3, #0]
 800a90c:	685b      	ldreq	r3, [r3, #4]
 800a90e:	6063      	str	r3, [r4, #4]
 800a910:	bf04      	itt	eq
 800a912:	1852      	addeq	r2, r2, r1
 800a914:	6022      	streq	r2, [r4, #0]
 800a916:	602c      	str	r4, [r5, #0]
 800a918:	e7ec      	b.n	800a8f4 <_free_r+0x28>
 800a91a:	461a      	mov	r2, r3
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	b10b      	cbz	r3, 800a924 <_free_r+0x58>
 800a920:	42a3      	cmp	r3, r4
 800a922:	d9fa      	bls.n	800a91a <_free_r+0x4e>
 800a924:	6811      	ldr	r1, [r2, #0]
 800a926:	1855      	adds	r5, r2, r1
 800a928:	42a5      	cmp	r5, r4
 800a92a:	d10b      	bne.n	800a944 <_free_r+0x78>
 800a92c:	6824      	ldr	r4, [r4, #0]
 800a92e:	4421      	add	r1, r4
 800a930:	1854      	adds	r4, r2, r1
 800a932:	42a3      	cmp	r3, r4
 800a934:	6011      	str	r1, [r2, #0]
 800a936:	d1dd      	bne.n	800a8f4 <_free_r+0x28>
 800a938:	681c      	ldr	r4, [r3, #0]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	6053      	str	r3, [r2, #4]
 800a93e:	4421      	add	r1, r4
 800a940:	6011      	str	r1, [r2, #0]
 800a942:	e7d7      	b.n	800a8f4 <_free_r+0x28>
 800a944:	d902      	bls.n	800a94c <_free_r+0x80>
 800a946:	230c      	movs	r3, #12
 800a948:	6003      	str	r3, [r0, #0]
 800a94a:	e7d3      	b.n	800a8f4 <_free_r+0x28>
 800a94c:	6825      	ldr	r5, [r4, #0]
 800a94e:	1961      	adds	r1, r4, r5
 800a950:	428b      	cmp	r3, r1
 800a952:	bf04      	itt	eq
 800a954:	6819      	ldreq	r1, [r3, #0]
 800a956:	685b      	ldreq	r3, [r3, #4]
 800a958:	6063      	str	r3, [r4, #4]
 800a95a:	bf04      	itt	eq
 800a95c:	1949      	addeq	r1, r1, r5
 800a95e:	6021      	streq	r1, [r4, #0]
 800a960:	6054      	str	r4, [r2, #4]
 800a962:	e7c7      	b.n	800a8f4 <_free_r+0x28>
 800a964:	b003      	add	sp, #12
 800a966:	bd30      	pop	{r4, r5, pc}
 800a968:	20000ad4 	.word	0x20000ad4

0800a96c <_malloc_r>:
 800a96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a96e:	1ccd      	adds	r5, r1, #3
 800a970:	f025 0503 	bic.w	r5, r5, #3
 800a974:	3508      	adds	r5, #8
 800a976:	2d0c      	cmp	r5, #12
 800a978:	bf38      	it	cc
 800a97a:	250c      	movcc	r5, #12
 800a97c:	2d00      	cmp	r5, #0
 800a97e:	4606      	mov	r6, r0
 800a980:	db01      	blt.n	800a986 <_malloc_r+0x1a>
 800a982:	42a9      	cmp	r1, r5
 800a984:	d903      	bls.n	800a98e <_malloc_r+0x22>
 800a986:	230c      	movs	r3, #12
 800a988:	6033      	str	r3, [r6, #0]
 800a98a:	2000      	movs	r0, #0
 800a98c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a98e:	f000 f87d 	bl	800aa8c <__malloc_lock>
 800a992:	4921      	ldr	r1, [pc, #132]	; (800aa18 <_malloc_r+0xac>)
 800a994:	680a      	ldr	r2, [r1, #0]
 800a996:	4614      	mov	r4, r2
 800a998:	b99c      	cbnz	r4, 800a9c2 <_malloc_r+0x56>
 800a99a:	4f20      	ldr	r7, [pc, #128]	; (800aa1c <_malloc_r+0xb0>)
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	b923      	cbnz	r3, 800a9aa <_malloc_r+0x3e>
 800a9a0:	4621      	mov	r1, r4
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	f000 f862 	bl	800aa6c <_sbrk_r>
 800a9a8:	6038      	str	r0, [r7, #0]
 800a9aa:	4629      	mov	r1, r5
 800a9ac:	4630      	mov	r0, r6
 800a9ae:	f000 f85d 	bl	800aa6c <_sbrk_r>
 800a9b2:	1c43      	adds	r3, r0, #1
 800a9b4:	d123      	bne.n	800a9fe <_malloc_r+0x92>
 800a9b6:	230c      	movs	r3, #12
 800a9b8:	6033      	str	r3, [r6, #0]
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	f000 f86c 	bl	800aa98 <__malloc_unlock>
 800a9c0:	e7e3      	b.n	800a98a <_malloc_r+0x1e>
 800a9c2:	6823      	ldr	r3, [r4, #0]
 800a9c4:	1b5b      	subs	r3, r3, r5
 800a9c6:	d417      	bmi.n	800a9f8 <_malloc_r+0x8c>
 800a9c8:	2b0b      	cmp	r3, #11
 800a9ca:	d903      	bls.n	800a9d4 <_malloc_r+0x68>
 800a9cc:	6023      	str	r3, [r4, #0]
 800a9ce:	441c      	add	r4, r3
 800a9d0:	6025      	str	r5, [r4, #0]
 800a9d2:	e004      	b.n	800a9de <_malloc_r+0x72>
 800a9d4:	6863      	ldr	r3, [r4, #4]
 800a9d6:	42a2      	cmp	r2, r4
 800a9d8:	bf0c      	ite	eq
 800a9da:	600b      	streq	r3, [r1, #0]
 800a9dc:	6053      	strne	r3, [r2, #4]
 800a9de:	4630      	mov	r0, r6
 800a9e0:	f000 f85a 	bl	800aa98 <__malloc_unlock>
 800a9e4:	f104 000b 	add.w	r0, r4, #11
 800a9e8:	1d23      	adds	r3, r4, #4
 800a9ea:	f020 0007 	bic.w	r0, r0, #7
 800a9ee:	1ac2      	subs	r2, r0, r3
 800a9f0:	d0cc      	beq.n	800a98c <_malloc_r+0x20>
 800a9f2:	1a1b      	subs	r3, r3, r0
 800a9f4:	50a3      	str	r3, [r4, r2]
 800a9f6:	e7c9      	b.n	800a98c <_malloc_r+0x20>
 800a9f8:	4622      	mov	r2, r4
 800a9fa:	6864      	ldr	r4, [r4, #4]
 800a9fc:	e7cc      	b.n	800a998 <_malloc_r+0x2c>
 800a9fe:	1cc4      	adds	r4, r0, #3
 800aa00:	f024 0403 	bic.w	r4, r4, #3
 800aa04:	42a0      	cmp	r0, r4
 800aa06:	d0e3      	beq.n	800a9d0 <_malloc_r+0x64>
 800aa08:	1a21      	subs	r1, r4, r0
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	f000 f82e 	bl	800aa6c <_sbrk_r>
 800aa10:	3001      	adds	r0, #1
 800aa12:	d1dd      	bne.n	800a9d0 <_malloc_r+0x64>
 800aa14:	e7cf      	b.n	800a9b6 <_malloc_r+0x4a>
 800aa16:	bf00      	nop
 800aa18:	20000ad4 	.word	0x20000ad4
 800aa1c:	20000ad8 	.word	0x20000ad8

0800aa20 <_realloc_r>:
 800aa20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa22:	4607      	mov	r7, r0
 800aa24:	4614      	mov	r4, r2
 800aa26:	460e      	mov	r6, r1
 800aa28:	b921      	cbnz	r1, 800aa34 <_realloc_r+0x14>
 800aa2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aa2e:	4611      	mov	r1, r2
 800aa30:	f7ff bf9c 	b.w	800a96c <_malloc_r>
 800aa34:	b922      	cbnz	r2, 800aa40 <_realloc_r+0x20>
 800aa36:	f7ff ff49 	bl	800a8cc <_free_r>
 800aa3a:	4625      	mov	r5, r4
 800aa3c:	4628      	mov	r0, r5
 800aa3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa40:	f000 f830 	bl	800aaa4 <_malloc_usable_size_r>
 800aa44:	42a0      	cmp	r0, r4
 800aa46:	d20f      	bcs.n	800aa68 <_realloc_r+0x48>
 800aa48:	4621      	mov	r1, r4
 800aa4a:	4638      	mov	r0, r7
 800aa4c:	f7ff ff8e 	bl	800a96c <_malloc_r>
 800aa50:	4605      	mov	r5, r0
 800aa52:	2800      	cmp	r0, #0
 800aa54:	d0f2      	beq.n	800aa3c <_realloc_r+0x1c>
 800aa56:	4631      	mov	r1, r6
 800aa58:	4622      	mov	r2, r4
 800aa5a:	f7ff ff0f 	bl	800a87c <memcpy>
 800aa5e:	4631      	mov	r1, r6
 800aa60:	4638      	mov	r0, r7
 800aa62:	f7ff ff33 	bl	800a8cc <_free_r>
 800aa66:	e7e9      	b.n	800aa3c <_realloc_r+0x1c>
 800aa68:	4635      	mov	r5, r6
 800aa6a:	e7e7      	b.n	800aa3c <_realloc_r+0x1c>

0800aa6c <_sbrk_r>:
 800aa6c:	b538      	push	{r3, r4, r5, lr}
 800aa6e:	4d06      	ldr	r5, [pc, #24]	; (800aa88 <_sbrk_r+0x1c>)
 800aa70:	2300      	movs	r3, #0
 800aa72:	4604      	mov	r4, r0
 800aa74:	4608      	mov	r0, r1
 800aa76:	602b      	str	r3, [r5, #0]
 800aa78:	f7f7 fb8a 	bl	8002190 <_sbrk>
 800aa7c:	1c43      	adds	r3, r0, #1
 800aa7e:	d102      	bne.n	800aa86 <_sbrk_r+0x1a>
 800aa80:	682b      	ldr	r3, [r5, #0]
 800aa82:	b103      	cbz	r3, 800aa86 <_sbrk_r+0x1a>
 800aa84:	6023      	str	r3, [r4, #0]
 800aa86:	bd38      	pop	{r3, r4, r5, pc}
 800aa88:	200028c4 	.word	0x200028c4

0800aa8c <__malloc_lock>:
 800aa8c:	4801      	ldr	r0, [pc, #4]	; (800aa94 <__malloc_lock+0x8>)
 800aa8e:	f000 b811 	b.w	800aab4 <__retarget_lock_acquire_recursive>
 800aa92:	bf00      	nop
 800aa94:	200028cc 	.word	0x200028cc

0800aa98 <__malloc_unlock>:
 800aa98:	4801      	ldr	r0, [pc, #4]	; (800aaa0 <__malloc_unlock+0x8>)
 800aa9a:	f000 b80c 	b.w	800aab6 <__retarget_lock_release_recursive>
 800aa9e:	bf00      	nop
 800aaa0:	200028cc 	.word	0x200028cc

0800aaa4 <_malloc_usable_size_r>:
 800aaa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaa8:	1f18      	subs	r0, r3, #4
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	bfbc      	itt	lt
 800aaae:	580b      	ldrlt	r3, [r1, r0]
 800aab0:	18c0      	addlt	r0, r0, r3
 800aab2:	4770      	bx	lr

0800aab4 <__retarget_lock_acquire_recursive>:
 800aab4:	4770      	bx	lr

0800aab6 <__retarget_lock_release_recursive>:
 800aab6:	4770      	bx	lr

0800aab8 <tan>:
 800aab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aaba:	ec53 2b10 	vmov	r2, r3, d0
 800aabe:	4814      	ldr	r0, [pc, #80]	; (800ab10 <tan+0x58>)
 800aac0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800aac4:	4281      	cmp	r1, r0
 800aac6:	dc05      	bgt.n	800aad4 <tan+0x1c>
 800aac8:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 800ab08 <tan+0x50>
 800aacc:	2001      	movs	r0, #1
 800aace:	f000 fd6f 	bl	800b5b0 <__kernel_tan>
 800aad2:	e009      	b.n	800aae8 <tan+0x30>
 800aad4:	480f      	ldr	r0, [pc, #60]	; (800ab14 <tan+0x5c>)
 800aad6:	4281      	cmp	r1, r0
 800aad8:	dd09      	ble.n	800aaee <tan+0x36>
 800aada:	ee10 0a10 	vmov	r0, s0
 800aade:	4619      	mov	r1, r3
 800aae0:	f7f5 fbd2 	bl	8000288 <__aeabi_dsub>
 800aae4:	ec41 0b10 	vmov	d0, r0, r1
 800aae8:	b005      	add	sp, #20
 800aaea:	f85d fb04 	ldr.w	pc, [sp], #4
 800aaee:	4668      	mov	r0, sp
 800aaf0:	f000 f812 	bl	800ab18 <__ieee754_rem_pio2>
 800aaf4:	0040      	lsls	r0, r0, #1
 800aaf6:	f000 0002 	and.w	r0, r0, #2
 800aafa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800aafe:	ed9d 0b00 	vldr	d0, [sp]
 800ab02:	f1c0 0001 	rsb	r0, r0, #1
 800ab06:	e7e2      	b.n	800aace <tan+0x16>
	...
 800ab10:	3fe921fb 	.word	0x3fe921fb
 800ab14:	7fefffff 	.word	0x7fefffff

0800ab18 <__ieee754_rem_pio2>:
 800ab18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab1c:	ed2d 8b02 	vpush	{d8}
 800ab20:	ec55 4b10 	vmov	r4, r5, d0
 800ab24:	4bca      	ldr	r3, [pc, #808]	; (800ae50 <__ieee754_rem_pio2+0x338>)
 800ab26:	b08b      	sub	sp, #44	; 0x2c
 800ab28:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ab2c:	4598      	cmp	r8, r3
 800ab2e:	4682      	mov	sl, r0
 800ab30:	9502      	str	r5, [sp, #8]
 800ab32:	dc08      	bgt.n	800ab46 <__ieee754_rem_pio2+0x2e>
 800ab34:	2200      	movs	r2, #0
 800ab36:	2300      	movs	r3, #0
 800ab38:	ed80 0b00 	vstr	d0, [r0]
 800ab3c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ab40:	f04f 0b00 	mov.w	fp, #0
 800ab44:	e028      	b.n	800ab98 <__ieee754_rem_pio2+0x80>
 800ab46:	4bc3      	ldr	r3, [pc, #780]	; (800ae54 <__ieee754_rem_pio2+0x33c>)
 800ab48:	4598      	cmp	r8, r3
 800ab4a:	dc78      	bgt.n	800ac3e <__ieee754_rem_pio2+0x126>
 800ab4c:	9b02      	ldr	r3, [sp, #8]
 800ab4e:	4ec2      	ldr	r6, [pc, #776]	; (800ae58 <__ieee754_rem_pio2+0x340>)
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	ee10 0a10 	vmov	r0, s0
 800ab56:	a3b0      	add	r3, pc, #704	; (adr r3, 800ae18 <__ieee754_rem_pio2+0x300>)
 800ab58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5c:	4629      	mov	r1, r5
 800ab5e:	dd39      	ble.n	800abd4 <__ieee754_rem_pio2+0xbc>
 800ab60:	f7f5 fb92 	bl	8000288 <__aeabi_dsub>
 800ab64:	45b0      	cmp	r8, r6
 800ab66:	4604      	mov	r4, r0
 800ab68:	460d      	mov	r5, r1
 800ab6a:	d01b      	beq.n	800aba4 <__ieee754_rem_pio2+0x8c>
 800ab6c:	a3ac      	add	r3, pc, #688	; (adr r3, 800ae20 <__ieee754_rem_pio2+0x308>)
 800ab6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab72:	f7f5 fb89 	bl	8000288 <__aeabi_dsub>
 800ab76:	4602      	mov	r2, r0
 800ab78:	460b      	mov	r3, r1
 800ab7a:	e9ca 2300 	strd	r2, r3, [sl]
 800ab7e:	4620      	mov	r0, r4
 800ab80:	4629      	mov	r1, r5
 800ab82:	f7f5 fb81 	bl	8000288 <__aeabi_dsub>
 800ab86:	a3a6      	add	r3, pc, #664	; (adr r3, 800ae20 <__ieee754_rem_pio2+0x308>)
 800ab88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8c:	f7f5 fb7c 	bl	8000288 <__aeabi_dsub>
 800ab90:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ab94:	f04f 0b01 	mov.w	fp, #1
 800ab98:	4658      	mov	r0, fp
 800ab9a:	b00b      	add	sp, #44	; 0x2c
 800ab9c:	ecbd 8b02 	vpop	{d8}
 800aba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aba4:	a3a0      	add	r3, pc, #640	; (adr r3, 800ae28 <__ieee754_rem_pio2+0x310>)
 800aba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abaa:	f7f5 fb6d 	bl	8000288 <__aeabi_dsub>
 800abae:	a3a0      	add	r3, pc, #640	; (adr r3, 800ae30 <__ieee754_rem_pio2+0x318>)
 800abb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb4:	4604      	mov	r4, r0
 800abb6:	460d      	mov	r5, r1
 800abb8:	f7f5 fb66 	bl	8000288 <__aeabi_dsub>
 800abbc:	4602      	mov	r2, r0
 800abbe:	460b      	mov	r3, r1
 800abc0:	e9ca 2300 	strd	r2, r3, [sl]
 800abc4:	4620      	mov	r0, r4
 800abc6:	4629      	mov	r1, r5
 800abc8:	f7f5 fb5e 	bl	8000288 <__aeabi_dsub>
 800abcc:	a398      	add	r3, pc, #608	; (adr r3, 800ae30 <__ieee754_rem_pio2+0x318>)
 800abce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd2:	e7db      	b.n	800ab8c <__ieee754_rem_pio2+0x74>
 800abd4:	f7f5 fb5a 	bl	800028c <__adddf3>
 800abd8:	45b0      	cmp	r8, r6
 800abda:	4604      	mov	r4, r0
 800abdc:	460d      	mov	r5, r1
 800abde:	d016      	beq.n	800ac0e <__ieee754_rem_pio2+0xf6>
 800abe0:	a38f      	add	r3, pc, #572	; (adr r3, 800ae20 <__ieee754_rem_pio2+0x308>)
 800abe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe6:	f7f5 fb51 	bl	800028c <__adddf3>
 800abea:	4602      	mov	r2, r0
 800abec:	460b      	mov	r3, r1
 800abee:	e9ca 2300 	strd	r2, r3, [sl]
 800abf2:	4620      	mov	r0, r4
 800abf4:	4629      	mov	r1, r5
 800abf6:	f7f5 fb47 	bl	8000288 <__aeabi_dsub>
 800abfa:	a389      	add	r3, pc, #548	; (adr r3, 800ae20 <__ieee754_rem_pio2+0x308>)
 800abfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac00:	f7f5 fb44 	bl	800028c <__adddf3>
 800ac04:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800ac08:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ac0c:	e7c4      	b.n	800ab98 <__ieee754_rem_pio2+0x80>
 800ac0e:	a386      	add	r3, pc, #536	; (adr r3, 800ae28 <__ieee754_rem_pio2+0x310>)
 800ac10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac14:	f7f5 fb3a 	bl	800028c <__adddf3>
 800ac18:	a385      	add	r3, pc, #532	; (adr r3, 800ae30 <__ieee754_rem_pio2+0x318>)
 800ac1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1e:	4604      	mov	r4, r0
 800ac20:	460d      	mov	r5, r1
 800ac22:	f7f5 fb33 	bl	800028c <__adddf3>
 800ac26:	4602      	mov	r2, r0
 800ac28:	460b      	mov	r3, r1
 800ac2a:	e9ca 2300 	strd	r2, r3, [sl]
 800ac2e:	4620      	mov	r0, r4
 800ac30:	4629      	mov	r1, r5
 800ac32:	f7f5 fb29 	bl	8000288 <__aeabi_dsub>
 800ac36:	a37e      	add	r3, pc, #504	; (adr r3, 800ae30 <__ieee754_rem_pio2+0x318>)
 800ac38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3c:	e7e0      	b.n	800ac00 <__ieee754_rem_pio2+0xe8>
 800ac3e:	4b87      	ldr	r3, [pc, #540]	; (800ae5c <__ieee754_rem_pio2+0x344>)
 800ac40:	4598      	cmp	r8, r3
 800ac42:	f300 80d9 	bgt.w	800adf8 <__ieee754_rem_pio2+0x2e0>
 800ac46:	f000 fe87 	bl	800b958 <fabs>
 800ac4a:	ec55 4b10 	vmov	r4, r5, d0
 800ac4e:	ee10 0a10 	vmov	r0, s0
 800ac52:	a379      	add	r3, pc, #484	; (adr r3, 800ae38 <__ieee754_rem_pio2+0x320>)
 800ac54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac58:	4629      	mov	r1, r5
 800ac5a:	f7f5 fccd 	bl	80005f8 <__aeabi_dmul>
 800ac5e:	4b80      	ldr	r3, [pc, #512]	; (800ae60 <__ieee754_rem_pio2+0x348>)
 800ac60:	2200      	movs	r2, #0
 800ac62:	f7f5 fb13 	bl	800028c <__adddf3>
 800ac66:	f7f5 ff61 	bl	8000b2c <__aeabi_d2iz>
 800ac6a:	4683      	mov	fp, r0
 800ac6c:	f7f5 fc5a 	bl	8000524 <__aeabi_i2d>
 800ac70:	4602      	mov	r2, r0
 800ac72:	460b      	mov	r3, r1
 800ac74:	ec43 2b18 	vmov	d8, r2, r3
 800ac78:	a367      	add	r3, pc, #412	; (adr r3, 800ae18 <__ieee754_rem_pio2+0x300>)
 800ac7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7e:	f7f5 fcbb 	bl	80005f8 <__aeabi_dmul>
 800ac82:	4602      	mov	r2, r0
 800ac84:	460b      	mov	r3, r1
 800ac86:	4620      	mov	r0, r4
 800ac88:	4629      	mov	r1, r5
 800ac8a:	f7f5 fafd 	bl	8000288 <__aeabi_dsub>
 800ac8e:	a364      	add	r3, pc, #400	; (adr r3, 800ae20 <__ieee754_rem_pio2+0x308>)
 800ac90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac94:	4606      	mov	r6, r0
 800ac96:	460f      	mov	r7, r1
 800ac98:	ec51 0b18 	vmov	r0, r1, d8
 800ac9c:	f7f5 fcac 	bl	80005f8 <__aeabi_dmul>
 800aca0:	f1bb 0f1f 	cmp.w	fp, #31
 800aca4:	4604      	mov	r4, r0
 800aca6:	460d      	mov	r5, r1
 800aca8:	dc0d      	bgt.n	800acc6 <__ieee754_rem_pio2+0x1ae>
 800acaa:	4b6e      	ldr	r3, [pc, #440]	; (800ae64 <__ieee754_rem_pio2+0x34c>)
 800acac:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800acb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acb4:	4543      	cmp	r3, r8
 800acb6:	d006      	beq.n	800acc6 <__ieee754_rem_pio2+0x1ae>
 800acb8:	4622      	mov	r2, r4
 800acba:	462b      	mov	r3, r5
 800acbc:	4630      	mov	r0, r6
 800acbe:	4639      	mov	r1, r7
 800acc0:	f7f5 fae2 	bl	8000288 <__aeabi_dsub>
 800acc4:	e00f      	b.n	800ace6 <__ieee754_rem_pio2+0x1ce>
 800acc6:	462b      	mov	r3, r5
 800acc8:	4622      	mov	r2, r4
 800acca:	4630      	mov	r0, r6
 800accc:	4639      	mov	r1, r7
 800acce:	f7f5 fadb 	bl	8000288 <__aeabi_dsub>
 800acd2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800acd6:	9303      	str	r3, [sp, #12]
 800acd8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800acdc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800ace0:	f1b8 0f10 	cmp.w	r8, #16
 800ace4:	dc02      	bgt.n	800acec <__ieee754_rem_pio2+0x1d4>
 800ace6:	e9ca 0100 	strd	r0, r1, [sl]
 800acea:	e039      	b.n	800ad60 <__ieee754_rem_pio2+0x248>
 800acec:	a34e      	add	r3, pc, #312	; (adr r3, 800ae28 <__ieee754_rem_pio2+0x310>)
 800acee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf2:	ec51 0b18 	vmov	r0, r1, d8
 800acf6:	f7f5 fc7f 	bl	80005f8 <__aeabi_dmul>
 800acfa:	4604      	mov	r4, r0
 800acfc:	460d      	mov	r5, r1
 800acfe:	4602      	mov	r2, r0
 800ad00:	460b      	mov	r3, r1
 800ad02:	4630      	mov	r0, r6
 800ad04:	4639      	mov	r1, r7
 800ad06:	f7f5 fabf 	bl	8000288 <__aeabi_dsub>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	4680      	mov	r8, r0
 800ad10:	4689      	mov	r9, r1
 800ad12:	4630      	mov	r0, r6
 800ad14:	4639      	mov	r1, r7
 800ad16:	f7f5 fab7 	bl	8000288 <__aeabi_dsub>
 800ad1a:	4622      	mov	r2, r4
 800ad1c:	462b      	mov	r3, r5
 800ad1e:	f7f5 fab3 	bl	8000288 <__aeabi_dsub>
 800ad22:	a343      	add	r3, pc, #268	; (adr r3, 800ae30 <__ieee754_rem_pio2+0x318>)
 800ad24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad28:	4604      	mov	r4, r0
 800ad2a:	460d      	mov	r5, r1
 800ad2c:	ec51 0b18 	vmov	r0, r1, d8
 800ad30:	f7f5 fc62 	bl	80005f8 <__aeabi_dmul>
 800ad34:	4622      	mov	r2, r4
 800ad36:	462b      	mov	r3, r5
 800ad38:	f7f5 faa6 	bl	8000288 <__aeabi_dsub>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	460b      	mov	r3, r1
 800ad40:	4604      	mov	r4, r0
 800ad42:	460d      	mov	r5, r1
 800ad44:	4640      	mov	r0, r8
 800ad46:	4649      	mov	r1, r9
 800ad48:	f7f5 fa9e 	bl	8000288 <__aeabi_dsub>
 800ad4c:	9a03      	ldr	r2, [sp, #12]
 800ad4e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ad52:	1ad3      	subs	r3, r2, r3
 800ad54:	2b31      	cmp	r3, #49	; 0x31
 800ad56:	dc24      	bgt.n	800ada2 <__ieee754_rem_pio2+0x28a>
 800ad58:	e9ca 0100 	strd	r0, r1, [sl]
 800ad5c:	4646      	mov	r6, r8
 800ad5e:	464f      	mov	r7, r9
 800ad60:	e9da 8900 	ldrd	r8, r9, [sl]
 800ad64:	4630      	mov	r0, r6
 800ad66:	4642      	mov	r2, r8
 800ad68:	464b      	mov	r3, r9
 800ad6a:	4639      	mov	r1, r7
 800ad6c:	f7f5 fa8c 	bl	8000288 <__aeabi_dsub>
 800ad70:	462b      	mov	r3, r5
 800ad72:	4622      	mov	r2, r4
 800ad74:	f7f5 fa88 	bl	8000288 <__aeabi_dsub>
 800ad78:	9b02      	ldr	r3, [sp, #8]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ad80:	f6bf af0a 	bge.w	800ab98 <__ieee754_rem_pio2+0x80>
 800ad84:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ad88:	f8ca 3004 	str.w	r3, [sl, #4]
 800ad8c:	f8ca 8000 	str.w	r8, [sl]
 800ad90:	f8ca 0008 	str.w	r0, [sl, #8]
 800ad94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad98:	f8ca 300c 	str.w	r3, [sl, #12]
 800ad9c:	f1cb 0b00 	rsb	fp, fp, #0
 800ada0:	e6fa      	b.n	800ab98 <__ieee754_rem_pio2+0x80>
 800ada2:	a327      	add	r3, pc, #156	; (adr r3, 800ae40 <__ieee754_rem_pio2+0x328>)
 800ada4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada8:	ec51 0b18 	vmov	r0, r1, d8
 800adac:	f7f5 fc24 	bl	80005f8 <__aeabi_dmul>
 800adb0:	4604      	mov	r4, r0
 800adb2:	460d      	mov	r5, r1
 800adb4:	4602      	mov	r2, r0
 800adb6:	460b      	mov	r3, r1
 800adb8:	4640      	mov	r0, r8
 800adba:	4649      	mov	r1, r9
 800adbc:	f7f5 fa64 	bl	8000288 <__aeabi_dsub>
 800adc0:	4602      	mov	r2, r0
 800adc2:	460b      	mov	r3, r1
 800adc4:	4606      	mov	r6, r0
 800adc6:	460f      	mov	r7, r1
 800adc8:	4640      	mov	r0, r8
 800adca:	4649      	mov	r1, r9
 800adcc:	f7f5 fa5c 	bl	8000288 <__aeabi_dsub>
 800add0:	4622      	mov	r2, r4
 800add2:	462b      	mov	r3, r5
 800add4:	f7f5 fa58 	bl	8000288 <__aeabi_dsub>
 800add8:	a31b      	add	r3, pc, #108	; (adr r3, 800ae48 <__ieee754_rem_pio2+0x330>)
 800adda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adde:	4604      	mov	r4, r0
 800ade0:	460d      	mov	r5, r1
 800ade2:	ec51 0b18 	vmov	r0, r1, d8
 800ade6:	f7f5 fc07 	bl	80005f8 <__aeabi_dmul>
 800adea:	4622      	mov	r2, r4
 800adec:	462b      	mov	r3, r5
 800adee:	f7f5 fa4b 	bl	8000288 <__aeabi_dsub>
 800adf2:	4604      	mov	r4, r0
 800adf4:	460d      	mov	r5, r1
 800adf6:	e75f      	b.n	800acb8 <__ieee754_rem_pio2+0x1a0>
 800adf8:	4b1b      	ldr	r3, [pc, #108]	; (800ae68 <__ieee754_rem_pio2+0x350>)
 800adfa:	4598      	cmp	r8, r3
 800adfc:	dd36      	ble.n	800ae6c <__ieee754_rem_pio2+0x354>
 800adfe:	ee10 2a10 	vmov	r2, s0
 800ae02:	462b      	mov	r3, r5
 800ae04:	4620      	mov	r0, r4
 800ae06:	4629      	mov	r1, r5
 800ae08:	f7f5 fa3e 	bl	8000288 <__aeabi_dsub>
 800ae0c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ae10:	e9ca 0100 	strd	r0, r1, [sl]
 800ae14:	e694      	b.n	800ab40 <__ieee754_rem_pio2+0x28>
 800ae16:	bf00      	nop
 800ae18:	54400000 	.word	0x54400000
 800ae1c:	3ff921fb 	.word	0x3ff921fb
 800ae20:	1a626331 	.word	0x1a626331
 800ae24:	3dd0b461 	.word	0x3dd0b461
 800ae28:	1a600000 	.word	0x1a600000
 800ae2c:	3dd0b461 	.word	0x3dd0b461
 800ae30:	2e037073 	.word	0x2e037073
 800ae34:	3ba3198a 	.word	0x3ba3198a
 800ae38:	6dc9c883 	.word	0x6dc9c883
 800ae3c:	3fe45f30 	.word	0x3fe45f30
 800ae40:	2e000000 	.word	0x2e000000
 800ae44:	3ba3198a 	.word	0x3ba3198a
 800ae48:	252049c1 	.word	0x252049c1
 800ae4c:	397b839a 	.word	0x397b839a
 800ae50:	3fe921fb 	.word	0x3fe921fb
 800ae54:	4002d97b 	.word	0x4002d97b
 800ae58:	3ff921fb 	.word	0x3ff921fb
 800ae5c:	413921fb 	.word	0x413921fb
 800ae60:	3fe00000 	.word	0x3fe00000
 800ae64:	0800d130 	.word	0x0800d130
 800ae68:	7fefffff 	.word	0x7fefffff
 800ae6c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ae70:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ae74:	ee10 0a10 	vmov	r0, s0
 800ae78:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ae7c:	ee10 6a10 	vmov	r6, s0
 800ae80:	460f      	mov	r7, r1
 800ae82:	f7f5 fe53 	bl	8000b2c <__aeabi_d2iz>
 800ae86:	f7f5 fb4d 	bl	8000524 <__aeabi_i2d>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	4630      	mov	r0, r6
 800ae90:	4639      	mov	r1, r7
 800ae92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ae96:	f7f5 f9f7 	bl	8000288 <__aeabi_dsub>
 800ae9a:	4b22      	ldr	r3, [pc, #136]	; (800af24 <__ieee754_rem_pio2+0x40c>)
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f7f5 fbab 	bl	80005f8 <__aeabi_dmul>
 800aea2:	460f      	mov	r7, r1
 800aea4:	4606      	mov	r6, r0
 800aea6:	f7f5 fe41 	bl	8000b2c <__aeabi_d2iz>
 800aeaa:	f7f5 fb3b 	bl	8000524 <__aeabi_i2d>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	4639      	mov	r1, r7
 800aeb6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aeba:	f7f5 f9e5 	bl	8000288 <__aeabi_dsub>
 800aebe:	4b19      	ldr	r3, [pc, #100]	; (800af24 <__ieee754_rem_pio2+0x40c>)
 800aec0:	2200      	movs	r2, #0
 800aec2:	f7f5 fb99 	bl	80005f8 <__aeabi_dmul>
 800aec6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aeca:	ad04      	add	r5, sp, #16
 800aecc:	f04f 0803 	mov.w	r8, #3
 800aed0:	46a9      	mov	r9, r5
 800aed2:	2600      	movs	r6, #0
 800aed4:	2700      	movs	r7, #0
 800aed6:	4632      	mov	r2, r6
 800aed8:	463b      	mov	r3, r7
 800aeda:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800aede:	46c3      	mov	fp, r8
 800aee0:	3d08      	subs	r5, #8
 800aee2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800aee6:	f7f5 fdef 	bl	8000ac8 <__aeabi_dcmpeq>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	d1f3      	bne.n	800aed6 <__ieee754_rem_pio2+0x3be>
 800aeee:	4b0e      	ldr	r3, [pc, #56]	; (800af28 <__ieee754_rem_pio2+0x410>)
 800aef0:	9301      	str	r3, [sp, #4]
 800aef2:	2302      	movs	r3, #2
 800aef4:	9300      	str	r3, [sp, #0]
 800aef6:	4622      	mov	r2, r4
 800aef8:	465b      	mov	r3, fp
 800aefa:	4651      	mov	r1, sl
 800aefc:	4648      	mov	r0, r9
 800aefe:	f000 f817 	bl	800af30 <__kernel_rem_pio2>
 800af02:	9b02      	ldr	r3, [sp, #8]
 800af04:	2b00      	cmp	r3, #0
 800af06:	4683      	mov	fp, r0
 800af08:	f6bf ae46 	bge.w	800ab98 <__ieee754_rem_pio2+0x80>
 800af0c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800af10:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800af14:	f8ca 3004 	str.w	r3, [sl, #4]
 800af18:	f8da 300c 	ldr.w	r3, [sl, #12]
 800af1c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800af20:	e73a      	b.n	800ad98 <__ieee754_rem_pio2+0x280>
 800af22:	bf00      	nop
 800af24:	41700000 	.word	0x41700000
 800af28:	0800d1b0 	.word	0x0800d1b0
 800af2c:	00000000 	.word	0x00000000

0800af30 <__kernel_rem_pio2>:
 800af30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af34:	ed2d 8b02 	vpush	{d8}
 800af38:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800af3c:	f112 0f14 	cmn.w	r2, #20
 800af40:	9308      	str	r3, [sp, #32]
 800af42:	9101      	str	r1, [sp, #4]
 800af44:	4bc6      	ldr	r3, [pc, #792]	; (800b260 <__kernel_rem_pio2+0x330>)
 800af46:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800af48:	9009      	str	r0, [sp, #36]	; 0x24
 800af4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800af4e:	9304      	str	r3, [sp, #16]
 800af50:	9b08      	ldr	r3, [sp, #32]
 800af52:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800af56:	bfa8      	it	ge
 800af58:	1ed4      	subge	r4, r2, #3
 800af5a:	9306      	str	r3, [sp, #24]
 800af5c:	bfb2      	itee	lt
 800af5e:	2400      	movlt	r4, #0
 800af60:	2318      	movge	r3, #24
 800af62:	fb94 f4f3 	sdivge	r4, r4, r3
 800af66:	f06f 0317 	mvn.w	r3, #23
 800af6a:	fb04 3303 	mla	r3, r4, r3, r3
 800af6e:	eb03 0a02 	add.w	sl, r3, r2
 800af72:	9b04      	ldr	r3, [sp, #16]
 800af74:	9a06      	ldr	r2, [sp, #24]
 800af76:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b250 <__kernel_rem_pio2+0x320>
 800af7a:	eb03 0802 	add.w	r8, r3, r2
 800af7e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800af80:	1aa7      	subs	r7, r4, r2
 800af82:	ae20      	add	r6, sp, #128	; 0x80
 800af84:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800af88:	2500      	movs	r5, #0
 800af8a:	4545      	cmp	r5, r8
 800af8c:	dd18      	ble.n	800afc0 <__kernel_rem_pio2+0x90>
 800af8e:	9b08      	ldr	r3, [sp, #32]
 800af90:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800af94:	aa20      	add	r2, sp, #128	; 0x80
 800af96:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800b250 <__kernel_rem_pio2+0x320>
 800af9a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800af9e:	f1c3 0301 	rsb	r3, r3, #1
 800afa2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800afa6:	9307      	str	r3, [sp, #28]
 800afa8:	9b07      	ldr	r3, [sp, #28]
 800afaa:	9a04      	ldr	r2, [sp, #16]
 800afac:	4443      	add	r3, r8
 800afae:	429a      	cmp	r2, r3
 800afb0:	db2f      	blt.n	800b012 <__kernel_rem_pio2+0xe2>
 800afb2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800afb6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800afba:	462f      	mov	r7, r5
 800afbc:	2600      	movs	r6, #0
 800afbe:	e01b      	b.n	800aff8 <__kernel_rem_pio2+0xc8>
 800afc0:	42ef      	cmn	r7, r5
 800afc2:	d407      	bmi.n	800afd4 <__kernel_rem_pio2+0xa4>
 800afc4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800afc8:	f7f5 faac 	bl	8000524 <__aeabi_i2d>
 800afcc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800afd0:	3501      	adds	r5, #1
 800afd2:	e7da      	b.n	800af8a <__kernel_rem_pio2+0x5a>
 800afd4:	ec51 0b18 	vmov	r0, r1, d8
 800afd8:	e7f8      	b.n	800afcc <__kernel_rem_pio2+0x9c>
 800afda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afde:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800afe2:	f7f5 fb09 	bl	80005f8 <__aeabi_dmul>
 800afe6:	4602      	mov	r2, r0
 800afe8:	460b      	mov	r3, r1
 800afea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afee:	f7f5 f94d 	bl	800028c <__adddf3>
 800aff2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aff6:	3601      	adds	r6, #1
 800aff8:	9b06      	ldr	r3, [sp, #24]
 800affa:	429e      	cmp	r6, r3
 800affc:	f1a7 0708 	sub.w	r7, r7, #8
 800b000:	ddeb      	ble.n	800afda <__kernel_rem_pio2+0xaa>
 800b002:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b006:	3508      	adds	r5, #8
 800b008:	ecab 7b02 	vstmia	fp!, {d7}
 800b00c:	f108 0801 	add.w	r8, r8, #1
 800b010:	e7ca      	b.n	800afa8 <__kernel_rem_pio2+0x78>
 800b012:	9b04      	ldr	r3, [sp, #16]
 800b014:	aa0c      	add	r2, sp, #48	; 0x30
 800b016:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b01a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b01c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b01e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b022:	9c04      	ldr	r4, [sp, #16]
 800b024:	930a      	str	r3, [sp, #40]	; 0x28
 800b026:	ab98      	add	r3, sp, #608	; 0x260
 800b028:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b02c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b030:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800b034:	f8cd b008 	str.w	fp, [sp, #8]
 800b038:	4625      	mov	r5, r4
 800b03a:	2d00      	cmp	r5, #0
 800b03c:	dc78      	bgt.n	800b130 <__kernel_rem_pio2+0x200>
 800b03e:	ec47 6b10 	vmov	d0, r6, r7
 800b042:	4650      	mov	r0, sl
 800b044:	f000 fd14 	bl	800ba70 <scalbn>
 800b048:	ec57 6b10 	vmov	r6, r7, d0
 800b04c:	2200      	movs	r2, #0
 800b04e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b052:	ee10 0a10 	vmov	r0, s0
 800b056:	4639      	mov	r1, r7
 800b058:	f7f5 face 	bl	80005f8 <__aeabi_dmul>
 800b05c:	ec41 0b10 	vmov	d0, r0, r1
 800b060:	f000 fc86 	bl	800b970 <floor>
 800b064:	4b7f      	ldr	r3, [pc, #508]	; (800b264 <__kernel_rem_pio2+0x334>)
 800b066:	ec51 0b10 	vmov	r0, r1, d0
 800b06a:	2200      	movs	r2, #0
 800b06c:	f7f5 fac4 	bl	80005f8 <__aeabi_dmul>
 800b070:	4602      	mov	r2, r0
 800b072:	460b      	mov	r3, r1
 800b074:	4630      	mov	r0, r6
 800b076:	4639      	mov	r1, r7
 800b078:	f7f5 f906 	bl	8000288 <__aeabi_dsub>
 800b07c:	460f      	mov	r7, r1
 800b07e:	4606      	mov	r6, r0
 800b080:	f7f5 fd54 	bl	8000b2c <__aeabi_d2iz>
 800b084:	9007      	str	r0, [sp, #28]
 800b086:	f7f5 fa4d 	bl	8000524 <__aeabi_i2d>
 800b08a:	4602      	mov	r2, r0
 800b08c:	460b      	mov	r3, r1
 800b08e:	4630      	mov	r0, r6
 800b090:	4639      	mov	r1, r7
 800b092:	f7f5 f8f9 	bl	8000288 <__aeabi_dsub>
 800b096:	f1ba 0f00 	cmp.w	sl, #0
 800b09a:	4606      	mov	r6, r0
 800b09c:	460f      	mov	r7, r1
 800b09e:	dd70      	ble.n	800b182 <__kernel_rem_pio2+0x252>
 800b0a0:	1e62      	subs	r2, r4, #1
 800b0a2:	ab0c      	add	r3, sp, #48	; 0x30
 800b0a4:	9d07      	ldr	r5, [sp, #28]
 800b0a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b0aa:	f1ca 0118 	rsb	r1, sl, #24
 800b0ae:	fa40 f301 	asr.w	r3, r0, r1
 800b0b2:	441d      	add	r5, r3
 800b0b4:	408b      	lsls	r3, r1
 800b0b6:	1ac0      	subs	r0, r0, r3
 800b0b8:	ab0c      	add	r3, sp, #48	; 0x30
 800b0ba:	9507      	str	r5, [sp, #28]
 800b0bc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b0c0:	f1ca 0317 	rsb	r3, sl, #23
 800b0c4:	fa40 f303 	asr.w	r3, r0, r3
 800b0c8:	9302      	str	r3, [sp, #8]
 800b0ca:	9b02      	ldr	r3, [sp, #8]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	dd66      	ble.n	800b19e <__kernel_rem_pio2+0x26e>
 800b0d0:	9b07      	ldr	r3, [sp, #28]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	9307      	str	r3, [sp, #28]
 800b0d8:	4615      	mov	r5, r2
 800b0da:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b0de:	4294      	cmp	r4, r2
 800b0e0:	f300 8099 	bgt.w	800b216 <__kernel_rem_pio2+0x2e6>
 800b0e4:	f1ba 0f00 	cmp.w	sl, #0
 800b0e8:	dd07      	ble.n	800b0fa <__kernel_rem_pio2+0x1ca>
 800b0ea:	f1ba 0f01 	cmp.w	sl, #1
 800b0ee:	f000 80a5 	beq.w	800b23c <__kernel_rem_pio2+0x30c>
 800b0f2:	f1ba 0f02 	cmp.w	sl, #2
 800b0f6:	f000 80c1 	beq.w	800b27c <__kernel_rem_pio2+0x34c>
 800b0fa:	9b02      	ldr	r3, [sp, #8]
 800b0fc:	2b02      	cmp	r3, #2
 800b0fe:	d14e      	bne.n	800b19e <__kernel_rem_pio2+0x26e>
 800b100:	4632      	mov	r2, r6
 800b102:	463b      	mov	r3, r7
 800b104:	4958      	ldr	r1, [pc, #352]	; (800b268 <__kernel_rem_pio2+0x338>)
 800b106:	2000      	movs	r0, #0
 800b108:	f7f5 f8be 	bl	8000288 <__aeabi_dsub>
 800b10c:	4606      	mov	r6, r0
 800b10e:	460f      	mov	r7, r1
 800b110:	2d00      	cmp	r5, #0
 800b112:	d044      	beq.n	800b19e <__kernel_rem_pio2+0x26e>
 800b114:	4650      	mov	r0, sl
 800b116:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b258 <__kernel_rem_pio2+0x328>
 800b11a:	f000 fca9 	bl	800ba70 <scalbn>
 800b11e:	4630      	mov	r0, r6
 800b120:	4639      	mov	r1, r7
 800b122:	ec53 2b10 	vmov	r2, r3, d0
 800b126:	f7f5 f8af 	bl	8000288 <__aeabi_dsub>
 800b12a:	4606      	mov	r6, r0
 800b12c:	460f      	mov	r7, r1
 800b12e:	e036      	b.n	800b19e <__kernel_rem_pio2+0x26e>
 800b130:	4b4e      	ldr	r3, [pc, #312]	; (800b26c <__kernel_rem_pio2+0x33c>)
 800b132:	2200      	movs	r2, #0
 800b134:	4630      	mov	r0, r6
 800b136:	4639      	mov	r1, r7
 800b138:	f7f5 fa5e 	bl	80005f8 <__aeabi_dmul>
 800b13c:	f7f5 fcf6 	bl	8000b2c <__aeabi_d2iz>
 800b140:	f7f5 f9f0 	bl	8000524 <__aeabi_i2d>
 800b144:	4b4a      	ldr	r3, [pc, #296]	; (800b270 <__kernel_rem_pio2+0x340>)
 800b146:	2200      	movs	r2, #0
 800b148:	4680      	mov	r8, r0
 800b14a:	4689      	mov	r9, r1
 800b14c:	f7f5 fa54 	bl	80005f8 <__aeabi_dmul>
 800b150:	4602      	mov	r2, r0
 800b152:	460b      	mov	r3, r1
 800b154:	4630      	mov	r0, r6
 800b156:	4639      	mov	r1, r7
 800b158:	f7f5 f896 	bl	8000288 <__aeabi_dsub>
 800b15c:	f7f5 fce6 	bl	8000b2c <__aeabi_d2iz>
 800b160:	9b02      	ldr	r3, [sp, #8]
 800b162:	f843 0b04 	str.w	r0, [r3], #4
 800b166:	3d01      	subs	r5, #1
 800b168:	9302      	str	r3, [sp, #8]
 800b16a:	ab70      	add	r3, sp, #448	; 0x1c0
 800b16c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b174:	4640      	mov	r0, r8
 800b176:	4649      	mov	r1, r9
 800b178:	f7f5 f888 	bl	800028c <__adddf3>
 800b17c:	4606      	mov	r6, r0
 800b17e:	460f      	mov	r7, r1
 800b180:	e75b      	b.n	800b03a <__kernel_rem_pio2+0x10a>
 800b182:	d105      	bne.n	800b190 <__kernel_rem_pio2+0x260>
 800b184:	1e63      	subs	r3, r4, #1
 800b186:	aa0c      	add	r2, sp, #48	; 0x30
 800b188:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b18c:	15c3      	asrs	r3, r0, #23
 800b18e:	e79b      	b.n	800b0c8 <__kernel_rem_pio2+0x198>
 800b190:	4b38      	ldr	r3, [pc, #224]	; (800b274 <__kernel_rem_pio2+0x344>)
 800b192:	2200      	movs	r2, #0
 800b194:	f7f5 fcb6 	bl	8000b04 <__aeabi_dcmpge>
 800b198:	2800      	cmp	r0, #0
 800b19a:	d139      	bne.n	800b210 <__kernel_rem_pio2+0x2e0>
 800b19c:	9002      	str	r0, [sp, #8]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	4639      	mov	r1, r7
 800b1a6:	f7f5 fc8f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1aa:	2800      	cmp	r0, #0
 800b1ac:	f000 80b4 	beq.w	800b318 <__kernel_rem_pio2+0x3e8>
 800b1b0:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800b1b4:	465b      	mov	r3, fp
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	9904      	ldr	r1, [sp, #16]
 800b1ba:	428b      	cmp	r3, r1
 800b1bc:	da65      	bge.n	800b28a <__kernel_rem_pio2+0x35a>
 800b1be:	2a00      	cmp	r2, #0
 800b1c0:	d07b      	beq.n	800b2ba <__kernel_rem_pio2+0x38a>
 800b1c2:	ab0c      	add	r3, sp, #48	; 0x30
 800b1c4:	f1aa 0a18 	sub.w	sl, sl, #24
 800b1c8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	f000 80a0 	beq.w	800b312 <__kernel_rem_pio2+0x3e2>
 800b1d2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800b258 <__kernel_rem_pio2+0x328>
 800b1d6:	4650      	mov	r0, sl
 800b1d8:	f000 fc4a 	bl	800ba70 <scalbn>
 800b1dc:	4f23      	ldr	r7, [pc, #140]	; (800b26c <__kernel_rem_pio2+0x33c>)
 800b1de:	ec55 4b10 	vmov	r4, r5, d0
 800b1e2:	46d8      	mov	r8, fp
 800b1e4:	2600      	movs	r6, #0
 800b1e6:	f1b8 0f00 	cmp.w	r8, #0
 800b1ea:	f280 80cf 	bge.w	800b38c <__kernel_rem_pio2+0x45c>
 800b1ee:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800b250 <__kernel_rem_pio2+0x320>
 800b1f2:	465f      	mov	r7, fp
 800b1f4:	f04f 0800 	mov.w	r8, #0
 800b1f8:	2f00      	cmp	r7, #0
 800b1fa:	f2c0 80fd 	blt.w	800b3f8 <__kernel_rem_pio2+0x4c8>
 800b1fe:	ab70      	add	r3, sp, #448	; 0x1c0
 800b200:	f8df a074 	ldr.w	sl, [pc, #116]	; 800b278 <__kernel_rem_pio2+0x348>
 800b204:	ec55 4b18 	vmov	r4, r5, d8
 800b208:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800b20c:	2600      	movs	r6, #0
 800b20e:	e0e5      	b.n	800b3dc <__kernel_rem_pio2+0x4ac>
 800b210:	2302      	movs	r3, #2
 800b212:	9302      	str	r3, [sp, #8]
 800b214:	e75c      	b.n	800b0d0 <__kernel_rem_pio2+0x1a0>
 800b216:	f8db 3000 	ldr.w	r3, [fp]
 800b21a:	b955      	cbnz	r5, 800b232 <__kernel_rem_pio2+0x302>
 800b21c:	b123      	cbz	r3, 800b228 <__kernel_rem_pio2+0x2f8>
 800b21e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b222:	f8cb 3000 	str.w	r3, [fp]
 800b226:	2301      	movs	r3, #1
 800b228:	3201      	adds	r2, #1
 800b22a:	f10b 0b04 	add.w	fp, fp, #4
 800b22e:	461d      	mov	r5, r3
 800b230:	e755      	b.n	800b0de <__kernel_rem_pio2+0x1ae>
 800b232:	1acb      	subs	r3, r1, r3
 800b234:	f8cb 3000 	str.w	r3, [fp]
 800b238:	462b      	mov	r3, r5
 800b23a:	e7f5      	b.n	800b228 <__kernel_rem_pio2+0x2f8>
 800b23c:	1e62      	subs	r2, r4, #1
 800b23e:	ab0c      	add	r3, sp, #48	; 0x30
 800b240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b244:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b248:	a90c      	add	r1, sp, #48	; 0x30
 800b24a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b24e:	e754      	b.n	800b0fa <__kernel_rem_pio2+0x1ca>
	...
 800b25c:	3ff00000 	.word	0x3ff00000
 800b260:	0800d2f8 	.word	0x0800d2f8
 800b264:	40200000 	.word	0x40200000
 800b268:	3ff00000 	.word	0x3ff00000
 800b26c:	3e700000 	.word	0x3e700000
 800b270:	41700000 	.word	0x41700000
 800b274:	3fe00000 	.word	0x3fe00000
 800b278:	0800d2b8 	.word	0x0800d2b8
 800b27c:	1e62      	subs	r2, r4, #1
 800b27e:	ab0c      	add	r3, sp, #48	; 0x30
 800b280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b284:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b288:	e7de      	b.n	800b248 <__kernel_rem_pio2+0x318>
 800b28a:	a90c      	add	r1, sp, #48	; 0x30
 800b28c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b290:	3b01      	subs	r3, #1
 800b292:	430a      	orrs	r2, r1
 800b294:	e790      	b.n	800b1b8 <__kernel_rem_pio2+0x288>
 800b296:	3301      	adds	r3, #1
 800b298:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b29c:	2900      	cmp	r1, #0
 800b29e:	d0fa      	beq.n	800b296 <__kernel_rem_pio2+0x366>
 800b2a0:	9a08      	ldr	r2, [sp, #32]
 800b2a2:	18e3      	adds	r3, r4, r3
 800b2a4:	18a6      	adds	r6, r4, r2
 800b2a6:	aa20      	add	r2, sp, #128	; 0x80
 800b2a8:	1c65      	adds	r5, r4, #1
 800b2aa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b2ae:	9302      	str	r3, [sp, #8]
 800b2b0:	9b02      	ldr	r3, [sp, #8]
 800b2b2:	42ab      	cmp	r3, r5
 800b2b4:	da04      	bge.n	800b2c0 <__kernel_rem_pio2+0x390>
 800b2b6:	461c      	mov	r4, r3
 800b2b8:	e6b5      	b.n	800b026 <__kernel_rem_pio2+0xf6>
 800b2ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e7eb      	b.n	800b298 <__kernel_rem_pio2+0x368>
 800b2c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b2c6:	f7f5 f92d 	bl	8000524 <__aeabi_i2d>
 800b2ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b2ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2d0:	46b3      	mov	fp, r6
 800b2d2:	461c      	mov	r4, r3
 800b2d4:	2700      	movs	r7, #0
 800b2d6:	f04f 0800 	mov.w	r8, #0
 800b2da:	f04f 0900 	mov.w	r9, #0
 800b2de:	9b06      	ldr	r3, [sp, #24]
 800b2e0:	429f      	cmp	r7, r3
 800b2e2:	dd06      	ble.n	800b2f2 <__kernel_rem_pio2+0x3c2>
 800b2e4:	ab70      	add	r3, sp, #448	; 0x1c0
 800b2e6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b2ea:	e9c3 8900 	strd	r8, r9, [r3]
 800b2ee:	3501      	adds	r5, #1
 800b2f0:	e7de      	b.n	800b2b0 <__kernel_rem_pio2+0x380>
 800b2f2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b2f6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b2fa:	f7f5 f97d 	bl	80005f8 <__aeabi_dmul>
 800b2fe:	4602      	mov	r2, r0
 800b300:	460b      	mov	r3, r1
 800b302:	4640      	mov	r0, r8
 800b304:	4649      	mov	r1, r9
 800b306:	f7f4 ffc1 	bl	800028c <__adddf3>
 800b30a:	3701      	adds	r7, #1
 800b30c:	4680      	mov	r8, r0
 800b30e:	4689      	mov	r9, r1
 800b310:	e7e5      	b.n	800b2de <__kernel_rem_pio2+0x3ae>
 800b312:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b316:	e754      	b.n	800b1c2 <__kernel_rem_pio2+0x292>
 800b318:	ec47 6b10 	vmov	d0, r6, r7
 800b31c:	f1ca 0000 	rsb	r0, sl, #0
 800b320:	f000 fba6 	bl	800ba70 <scalbn>
 800b324:	ec57 6b10 	vmov	r6, r7, d0
 800b328:	4b9f      	ldr	r3, [pc, #636]	; (800b5a8 <__kernel_rem_pio2+0x678>)
 800b32a:	ee10 0a10 	vmov	r0, s0
 800b32e:	2200      	movs	r2, #0
 800b330:	4639      	mov	r1, r7
 800b332:	f7f5 fbe7 	bl	8000b04 <__aeabi_dcmpge>
 800b336:	b300      	cbz	r0, 800b37a <__kernel_rem_pio2+0x44a>
 800b338:	4b9c      	ldr	r3, [pc, #624]	; (800b5ac <__kernel_rem_pio2+0x67c>)
 800b33a:	2200      	movs	r2, #0
 800b33c:	4630      	mov	r0, r6
 800b33e:	4639      	mov	r1, r7
 800b340:	f7f5 f95a 	bl	80005f8 <__aeabi_dmul>
 800b344:	f7f5 fbf2 	bl	8000b2c <__aeabi_d2iz>
 800b348:	4605      	mov	r5, r0
 800b34a:	f7f5 f8eb 	bl	8000524 <__aeabi_i2d>
 800b34e:	4b96      	ldr	r3, [pc, #600]	; (800b5a8 <__kernel_rem_pio2+0x678>)
 800b350:	2200      	movs	r2, #0
 800b352:	f7f5 f951 	bl	80005f8 <__aeabi_dmul>
 800b356:	460b      	mov	r3, r1
 800b358:	4602      	mov	r2, r0
 800b35a:	4639      	mov	r1, r7
 800b35c:	4630      	mov	r0, r6
 800b35e:	f7f4 ff93 	bl	8000288 <__aeabi_dsub>
 800b362:	f7f5 fbe3 	bl	8000b2c <__aeabi_d2iz>
 800b366:	f104 0b01 	add.w	fp, r4, #1
 800b36a:	ab0c      	add	r3, sp, #48	; 0x30
 800b36c:	f10a 0a18 	add.w	sl, sl, #24
 800b370:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b374:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800b378:	e72b      	b.n	800b1d2 <__kernel_rem_pio2+0x2a2>
 800b37a:	4630      	mov	r0, r6
 800b37c:	4639      	mov	r1, r7
 800b37e:	f7f5 fbd5 	bl	8000b2c <__aeabi_d2iz>
 800b382:	ab0c      	add	r3, sp, #48	; 0x30
 800b384:	46a3      	mov	fp, r4
 800b386:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b38a:	e722      	b.n	800b1d2 <__kernel_rem_pio2+0x2a2>
 800b38c:	ab70      	add	r3, sp, #448	; 0x1c0
 800b38e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800b392:	ab0c      	add	r3, sp, #48	; 0x30
 800b394:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b398:	f7f5 f8c4 	bl	8000524 <__aeabi_i2d>
 800b39c:	4622      	mov	r2, r4
 800b39e:	462b      	mov	r3, r5
 800b3a0:	f7f5 f92a 	bl	80005f8 <__aeabi_dmul>
 800b3a4:	4632      	mov	r2, r6
 800b3a6:	e9c9 0100 	strd	r0, r1, [r9]
 800b3aa:	463b      	mov	r3, r7
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	4629      	mov	r1, r5
 800b3b0:	f7f5 f922 	bl	80005f8 <__aeabi_dmul>
 800b3b4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b3b8:	4604      	mov	r4, r0
 800b3ba:	460d      	mov	r5, r1
 800b3bc:	e713      	b.n	800b1e6 <__kernel_rem_pio2+0x2b6>
 800b3be:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b3c2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b3c6:	f7f5 f917 	bl	80005f8 <__aeabi_dmul>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	4629      	mov	r1, r5
 800b3d2:	f7f4 ff5b 	bl	800028c <__adddf3>
 800b3d6:	3601      	adds	r6, #1
 800b3d8:	4604      	mov	r4, r0
 800b3da:	460d      	mov	r5, r1
 800b3dc:	9b04      	ldr	r3, [sp, #16]
 800b3de:	429e      	cmp	r6, r3
 800b3e0:	dc01      	bgt.n	800b3e6 <__kernel_rem_pio2+0x4b6>
 800b3e2:	45b0      	cmp	r8, r6
 800b3e4:	daeb      	bge.n	800b3be <__kernel_rem_pio2+0x48e>
 800b3e6:	ab48      	add	r3, sp, #288	; 0x120
 800b3e8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b3ec:	e9c3 4500 	strd	r4, r5, [r3]
 800b3f0:	3f01      	subs	r7, #1
 800b3f2:	f108 0801 	add.w	r8, r8, #1
 800b3f6:	e6ff      	b.n	800b1f8 <__kernel_rem_pio2+0x2c8>
 800b3f8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b3fa:	2b02      	cmp	r3, #2
 800b3fc:	dc0b      	bgt.n	800b416 <__kernel_rem_pio2+0x4e6>
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	dc6e      	bgt.n	800b4e0 <__kernel_rem_pio2+0x5b0>
 800b402:	d045      	beq.n	800b490 <__kernel_rem_pio2+0x560>
 800b404:	9b07      	ldr	r3, [sp, #28]
 800b406:	f003 0007 	and.w	r0, r3, #7
 800b40a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b40e:	ecbd 8b02 	vpop	{d8}
 800b412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b416:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b418:	2b03      	cmp	r3, #3
 800b41a:	d1f3      	bne.n	800b404 <__kernel_rem_pio2+0x4d4>
 800b41c:	ab48      	add	r3, sp, #288	; 0x120
 800b41e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800b422:	46d0      	mov	r8, sl
 800b424:	46d9      	mov	r9, fp
 800b426:	f1b9 0f00 	cmp.w	r9, #0
 800b42a:	f1a8 0808 	sub.w	r8, r8, #8
 800b42e:	dc64      	bgt.n	800b4fa <__kernel_rem_pio2+0x5ca>
 800b430:	465c      	mov	r4, fp
 800b432:	2c01      	cmp	r4, #1
 800b434:	f1aa 0a08 	sub.w	sl, sl, #8
 800b438:	dc7e      	bgt.n	800b538 <__kernel_rem_pio2+0x608>
 800b43a:	2000      	movs	r0, #0
 800b43c:	2100      	movs	r1, #0
 800b43e:	f1bb 0f01 	cmp.w	fp, #1
 800b442:	f300 8097 	bgt.w	800b574 <__kernel_rem_pio2+0x644>
 800b446:	9b02      	ldr	r3, [sp, #8]
 800b448:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800b44c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800b450:	2b00      	cmp	r3, #0
 800b452:	f040 8099 	bne.w	800b588 <__kernel_rem_pio2+0x658>
 800b456:	9b01      	ldr	r3, [sp, #4]
 800b458:	e9c3 5600 	strd	r5, r6, [r3]
 800b45c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b460:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b464:	e7ce      	b.n	800b404 <__kernel_rem_pio2+0x4d4>
 800b466:	ab48      	add	r3, sp, #288	; 0x120
 800b468:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b470:	f7f4 ff0c 	bl	800028c <__adddf3>
 800b474:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b478:	f1bb 0f00 	cmp.w	fp, #0
 800b47c:	daf3      	bge.n	800b466 <__kernel_rem_pio2+0x536>
 800b47e:	9b02      	ldr	r3, [sp, #8]
 800b480:	b113      	cbz	r3, 800b488 <__kernel_rem_pio2+0x558>
 800b482:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b486:	4619      	mov	r1, r3
 800b488:	9b01      	ldr	r3, [sp, #4]
 800b48a:	e9c3 0100 	strd	r0, r1, [r3]
 800b48e:	e7b9      	b.n	800b404 <__kernel_rem_pio2+0x4d4>
 800b490:	2000      	movs	r0, #0
 800b492:	2100      	movs	r1, #0
 800b494:	e7f0      	b.n	800b478 <__kernel_rem_pio2+0x548>
 800b496:	ab48      	add	r3, sp, #288	; 0x120
 800b498:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a0:	f7f4 fef4 	bl	800028c <__adddf3>
 800b4a4:	3c01      	subs	r4, #1
 800b4a6:	2c00      	cmp	r4, #0
 800b4a8:	daf5      	bge.n	800b496 <__kernel_rem_pio2+0x566>
 800b4aa:	9b02      	ldr	r3, [sp, #8]
 800b4ac:	b1e3      	cbz	r3, 800b4e8 <__kernel_rem_pio2+0x5b8>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4b4:	9c01      	ldr	r4, [sp, #4]
 800b4b6:	e9c4 2300 	strd	r2, r3, [r4]
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	460b      	mov	r3, r1
 800b4be:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b4c2:	f7f4 fee1 	bl	8000288 <__aeabi_dsub>
 800b4c6:	ad4a      	add	r5, sp, #296	; 0x128
 800b4c8:	2401      	movs	r4, #1
 800b4ca:	45a3      	cmp	fp, r4
 800b4cc:	da0f      	bge.n	800b4ee <__kernel_rem_pio2+0x5be>
 800b4ce:	9b02      	ldr	r3, [sp, #8]
 800b4d0:	b113      	cbz	r3, 800b4d8 <__kernel_rem_pio2+0x5a8>
 800b4d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	9b01      	ldr	r3, [sp, #4]
 800b4da:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b4de:	e791      	b.n	800b404 <__kernel_rem_pio2+0x4d4>
 800b4e0:	465c      	mov	r4, fp
 800b4e2:	2000      	movs	r0, #0
 800b4e4:	2100      	movs	r1, #0
 800b4e6:	e7de      	b.n	800b4a6 <__kernel_rem_pio2+0x576>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	e7e2      	b.n	800b4b4 <__kernel_rem_pio2+0x584>
 800b4ee:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b4f2:	f7f4 fecb 	bl	800028c <__adddf3>
 800b4f6:	3401      	adds	r4, #1
 800b4f8:	e7e7      	b.n	800b4ca <__kernel_rem_pio2+0x59a>
 800b4fa:	e9d8 4500 	ldrd	r4, r5, [r8]
 800b4fe:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800b502:	4620      	mov	r0, r4
 800b504:	4632      	mov	r2, r6
 800b506:	463b      	mov	r3, r7
 800b508:	4629      	mov	r1, r5
 800b50a:	f7f4 febf 	bl	800028c <__adddf3>
 800b50e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b512:	4602      	mov	r2, r0
 800b514:	460b      	mov	r3, r1
 800b516:	4620      	mov	r0, r4
 800b518:	4629      	mov	r1, r5
 800b51a:	f7f4 feb5 	bl	8000288 <__aeabi_dsub>
 800b51e:	4632      	mov	r2, r6
 800b520:	463b      	mov	r3, r7
 800b522:	f7f4 feb3 	bl	800028c <__adddf3>
 800b526:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b52a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800b52e:	ed88 7b00 	vstr	d7, [r8]
 800b532:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b536:	e776      	b.n	800b426 <__kernel_rem_pio2+0x4f6>
 800b538:	e9da 8900 	ldrd	r8, r9, [sl]
 800b53c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b540:	4640      	mov	r0, r8
 800b542:	4632      	mov	r2, r6
 800b544:	463b      	mov	r3, r7
 800b546:	4649      	mov	r1, r9
 800b548:	f7f4 fea0 	bl	800028c <__adddf3>
 800b54c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b550:	4602      	mov	r2, r0
 800b552:	460b      	mov	r3, r1
 800b554:	4640      	mov	r0, r8
 800b556:	4649      	mov	r1, r9
 800b558:	f7f4 fe96 	bl	8000288 <__aeabi_dsub>
 800b55c:	4632      	mov	r2, r6
 800b55e:	463b      	mov	r3, r7
 800b560:	f7f4 fe94 	bl	800028c <__adddf3>
 800b564:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b568:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b56c:	ed8a 7b00 	vstr	d7, [sl]
 800b570:	3c01      	subs	r4, #1
 800b572:	e75e      	b.n	800b432 <__kernel_rem_pio2+0x502>
 800b574:	ab48      	add	r3, sp, #288	; 0x120
 800b576:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57e:	f7f4 fe85 	bl	800028c <__adddf3>
 800b582:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b586:	e75a      	b.n	800b43e <__kernel_rem_pio2+0x50e>
 800b588:	9b01      	ldr	r3, [sp, #4]
 800b58a:	9a01      	ldr	r2, [sp, #4]
 800b58c:	601d      	str	r5, [r3, #0]
 800b58e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b592:	605c      	str	r4, [r3, #4]
 800b594:	609f      	str	r7, [r3, #8]
 800b596:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b59a:	60d3      	str	r3, [r2, #12]
 800b59c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5a0:	6110      	str	r0, [r2, #16]
 800b5a2:	6153      	str	r3, [r2, #20]
 800b5a4:	e72e      	b.n	800b404 <__kernel_rem_pio2+0x4d4>
 800b5a6:	bf00      	nop
 800b5a8:	41700000 	.word	0x41700000
 800b5ac:	3e700000 	.word	0x3e700000

0800b5b0 <__kernel_tan>:
 800b5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b4:	ed2d 8b04 	vpush	{d8-d9}
 800b5b8:	ec5b ab10 	vmov	sl, fp, d0
 800b5bc:	4be2      	ldr	r3, [pc, #904]	; (800b948 <__kernel_tan+0x398>)
 800b5be:	b085      	sub	sp, #20
 800b5c0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800b5c4:	429f      	cmp	r7, r3
 800b5c6:	ed8d 1b00 	vstr	d1, [sp]
 800b5ca:	4606      	mov	r6, r0
 800b5cc:	f8cd b00c 	str.w	fp, [sp, #12]
 800b5d0:	dc24      	bgt.n	800b61c <__kernel_tan+0x6c>
 800b5d2:	ee10 0a10 	vmov	r0, s0
 800b5d6:	4659      	mov	r1, fp
 800b5d8:	f7f5 faa8 	bl	8000b2c <__aeabi_d2iz>
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	d148      	bne.n	800b672 <__kernel_tan+0xc2>
 800b5e0:	1c73      	adds	r3, r6, #1
 800b5e2:	4652      	mov	r2, sl
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	433b      	orrs	r3, r7
 800b5e8:	d112      	bne.n	800b610 <__kernel_tan+0x60>
 800b5ea:	ec4b ab10 	vmov	d0, sl, fp
 800b5ee:	f000 f9b3 	bl	800b958 <fabs>
 800b5f2:	49d6      	ldr	r1, [pc, #856]	; (800b94c <__kernel_tan+0x39c>)
 800b5f4:	ec53 2b10 	vmov	r2, r3, d0
 800b5f8:	2000      	movs	r0, #0
 800b5fa:	f7f5 f927 	bl	800084c <__aeabi_ddiv>
 800b5fe:	4682      	mov	sl, r0
 800b600:	468b      	mov	fp, r1
 800b602:	ec4b ab10 	vmov	d0, sl, fp
 800b606:	b005      	add	sp, #20
 800b608:	ecbd 8b04 	vpop	{d8-d9}
 800b60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b610:	2e01      	cmp	r6, #1
 800b612:	d0f6      	beq.n	800b602 <__kernel_tan+0x52>
 800b614:	49ce      	ldr	r1, [pc, #824]	; (800b950 <__kernel_tan+0x3a0>)
 800b616:	465b      	mov	r3, fp
 800b618:	2000      	movs	r0, #0
 800b61a:	e7ee      	b.n	800b5fa <__kernel_tan+0x4a>
 800b61c:	4bcd      	ldr	r3, [pc, #820]	; (800b954 <__kernel_tan+0x3a4>)
 800b61e:	429f      	cmp	r7, r3
 800b620:	dd27      	ble.n	800b672 <__kernel_tan+0xc2>
 800b622:	9b03      	ldr	r3, [sp, #12]
 800b624:	2b00      	cmp	r3, #0
 800b626:	da0a      	bge.n	800b63e <__kernel_tan+0x8e>
 800b628:	e9dd 2100 	ldrd	r2, r1, [sp]
 800b62c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b630:	469b      	mov	fp, r3
 800b632:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b636:	e9cd 2300 	strd	r2, r3, [sp]
 800b63a:	ee10 aa10 	vmov	sl, s0
 800b63e:	4652      	mov	r2, sl
 800b640:	465b      	mov	r3, fp
 800b642:	a1a1      	add	r1, pc, #644	; (adr r1, 800b8c8 <__kernel_tan+0x318>)
 800b644:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b648:	f7f4 fe1e 	bl	8000288 <__aeabi_dsub>
 800b64c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b650:	4604      	mov	r4, r0
 800b652:	460d      	mov	r5, r1
 800b654:	a19e      	add	r1, pc, #632	; (adr r1, 800b8d0 <__kernel_tan+0x320>)
 800b656:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b65a:	f7f4 fe15 	bl	8000288 <__aeabi_dsub>
 800b65e:	4622      	mov	r2, r4
 800b660:	462b      	mov	r3, r5
 800b662:	f7f4 fe13 	bl	800028c <__adddf3>
 800b666:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 800b8d8 <__kernel_tan+0x328>
 800b66a:	ed8d 7b00 	vstr	d7, [sp]
 800b66e:	4682      	mov	sl, r0
 800b670:	468b      	mov	fp, r1
 800b672:	4652      	mov	r2, sl
 800b674:	465b      	mov	r3, fp
 800b676:	4650      	mov	r0, sl
 800b678:	4659      	mov	r1, fp
 800b67a:	f7f4 ffbd 	bl	80005f8 <__aeabi_dmul>
 800b67e:	4602      	mov	r2, r0
 800b680:	460b      	mov	r3, r1
 800b682:	4680      	mov	r8, r0
 800b684:	4689      	mov	r9, r1
 800b686:	f7f4 ffb7 	bl	80005f8 <__aeabi_dmul>
 800b68a:	4642      	mov	r2, r8
 800b68c:	4604      	mov	r4, r0
 800b68e:	460d      	mov	r5, r1
 800b690:	464b      	mov	r3, r9
 800b692:	4650      	mov	r0, sl
 800b694:	4659      	mov	r1, fp
 800b696:	f7f4 ffaf 	bl	80005f8 <__aeabi_dmul>
 800b69a:	a391      	add	r3, pc, #580	; (adr r3, 800b8e0 <__kernel_tan+0x330>)
 800b69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a0:	ec41 0b18 	vmov	d8, r0, r1
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	4629      	mov	r1, r5
 800b6a8:	f7f4 ffa6 	bl	80005f8 <__aeabi_dmul>
 800b6ac:	a38e      	add	r3, pc, #568	; (adr r3, 800b8e8 <__kernel_tan+0x338>)
 800b6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b2:	f7f4 fdeb 	bl	800028c <__adddf3>
 800b6b6:	4622      	mov	r2, r4
 800b6b8:	462b      	mov	r3, r5
 800b6ba:	f7f4 ff9d 	bl	80005f8 <__aeabi_dmul>
 800b6be:	a38c      	add	r3, pc, #560	; (adr r3, 800b8f0 <__kernel_tan+0x340>)
 800b6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c4:	f7f4 fde2 	bl	800028c <__adddf3>
 800b6c8:	4622      	mov	r2, r4
 800b6ca:	462b      	mov	r3, r5
 800b6cc:	f7f4 ff94 	bl	80005f8 <__aeabi_dmul>
 800b6d0:	a389      	add	r3, pc, #548	; (adr r3, 800b8f8 <__kernel_tan+0x348>)
 800b6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d6:	f7f4 fdd9 	bl	800028c <__adddf3>
 800b6da:	4622      	mov	r2, r4
 800b6dc:	462b      	mov	r3, r5
 800b6de:	f7f4 ff8b 	bl	80005f8 <__aeabi_dmul>
 800b6e2:	a387      	add	r3, pc, #540	; (adr r3, 800b900 <__kernel_tan+0x350>)
 800b6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e8:	f7f4 fdd0 	bl	800028c <__adddf3>
 800b6ec:	4622      	mov	r2, r4
 800b6ee:	462b      	mov	r3, r5
 800b6f0:	f7f4 ff82 	bl	80005f8 <__aeabi_dmul>
 800b6f4:	a384      	add	r3, pc, #528	; (adr r3, 800b908 <__kernel_tan+0x358>)
 800b6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fa:	f7f4 fdc7 	bl	800028c <__adddf3>
 800b6fe:	4642      	mov	r2, r8
 800b700:	464b      	mov	r3, r9
 800b702:	f7f4 ff79 	bl	80005f8 <__aeabi_dmul>
 800b706:	a382      	add	r3, pc, #520	; (adr r3, 800b910 <__kernel_tan+0x360>)
 800b708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70c:	ec41 0b19 	vmov	d9, r0, r1
 800b710:	4620      	mov	r0, r4
 800b712:	4629      	mov	r1, r5
 800b714:	f7f4 ff70 	bl	80005f8 <__aeabi_dmul>
 800b718:	a37f      	add	r3, pc, #508	; (adr r3, 800b918 <__kernel_tan+0x368>)
 800b71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71e:	f7f4 fdb5 	bl	800028c <__adddf3>
 800b722:	4622      	mov	r2, r4
 800b724:	462b      	mov	r3, r5
 800b726:	f7f4 ff67 	bl	80005f8 <__aeabi_dmul>
 800b72a:	a37d      	add	r3, pc, #500	; (adr r3, 800b920 <__kernel_tan+0x370>)
 800b72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b730:	f7f4 fdac 	bl	800028c <__adddf3>
 800b734:	4622      	mov	r2, r4
 800b736:	462b      	mov	r3, r5
 800b738:	f7f4 ff5e 	bl	80005f8 <__aeabi_dmul>
 800b73c:	a37a      	add	r3, pc, #488	; (adr r3, 800b928 <__kernel_tan+0x378>)
 800b73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b742:	f7f4 fda3 	bl	800028c <__adddf3>
 800b746:	4622      	mov	r2, r4
 800b748:	462b      	mov	r3, r5
 800b74a:	f7f4 ff55 	bl	80005f8 <__aeabi_dmul>
 800b74e:	a378      	add	r3, pc, #480	; (adr r3, 800b930 <__kernel_tan+0x380>)
 800b750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b754:	f7f4 fd9a 	bl	800028c <__adddf3>
 800b758:	4622      	mov	r2, r4
 800b75a:	462b      	mov	r3, r5
 800b75c:	f7f4 ff4c 	bl	80005f8 <__aeabi_dmul>
 800b760:	a375      	add	r3, pc, #468	; (adr r3, 800b938 <__kernel_tan+0x388>)
 800b762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b766:	f7f4 fd91 	bl	800028c <__adddf3>
 800b76a:	4602      	mov	r2, r0
 800b76c:	460b      	mov	r3, r1
 800b76e:	ec51 0b19 	vmov	r0, r1, d9
 800b772:	f7f4 fd8b 	bl	800028c <__adddf3>
 800b776:	ec53 2b18 	vmov	r2, r3, d8
 800b77a:	f7f4 ff3d 	bl	80005f8 <__aeabi_dmul>
 800b77e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b782:	f7f4 fd83 	bl	800028c <__adddf3>
 800b786:	4642      	mov	r2, r8
 800b788:	464b      	mov	r3, r9
 800b78a:	f7f4 ff35 	bl	80005f8 <__aeabi_dmul>
 800b78e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b792:	f7f4 fd7b 	bl	800028c <__adddf3>
 800b796:	a36a      	add	r3, pc, #424	; (adr r3, 800b940 <__kernel_tan+0x390>)
 800b798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79c:	4604      	mov	r4, r0
 800b79e:	460d      	mov	r5, r1
 800b7a0:	ec51 0b18 	vmov	r0, r1, d8
 800b7a4:	f7f4 ff28 	bl	80005f8 <__aeabi_dmul>
 800b7a8:	4622      	mov	r2, r4
 800b7aa:	462b      	mov	r3, r5
 800b7ac:	f7f4 fd6e 	bl	800028c <__adddf3>
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	ec41 0b18 	vmov	d8, r0, r1
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	4659      	mov	r1, fp
 800b7ba:	4650      	mov	r0, sl
 800b7bc:	f7f4 fd66 	bl	800028c <__adddf3>
 800b7c0:	4b64      	ldr	r3, [pc, #400]	; (800b954 <__kernel_tan+0x3a4>)
 800b7c2:	429f      	cmp	r7, r3
 800b7c4:	4604      	mov	r4, r0
 800b7c6:	460d      	mov	r5, r1
 800b7c8:	dd3e      	ble.n	800b848 <__kernel_tan+0x298>
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	f7f4 feaa 	bl	8000524 <__aeabi_i2d>
 800b7d0:	4622      	mov	r2, r4
 800b7d2:	4680      	mov	r8, r0
 800b7d4:	4689      	mov	r9, r1
 800b7d6:	462b      	mov	r3, r5
 800b7d8:	4620      	mov	r0, r4
 800b7da:	4629      	mov	r1, r5
 800b7dc:	f7f4 ff0c 	bl	80005f8 <__aeabi_dmul>
 800b7e0:	4642      	mov	r2, r8
 800b7e2:	4606      	mov	r6, r0
 800b7e4:	460f      	mov	r7, r1
 800b7e6:	464b      	mov	r3, r9
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	4629      	mov	r1, r5
 800b7ec:	f7f4 fd4e 	bl	800028c <__adddf3>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	4639      	mov	r1, r7
 800b7f8:	f7f5 f828 	bl	800084c <__aeabi_ddiv>
 800b7fc:	ec53 2b18 	vmov	r2, r3, d8
 800b800:	f7f4 fd42 	bl	8000288 <__aeabi_dsub>
 800b804:	4602      	mov	r2, r0
 800b806:	460b      	mov	r3, r1
 800b808:	4650      	mov	r0, sl
 800b80a:	4659      	mov	r1, fp
 800b80c:	f7f4 fd3c 	bl	8000288 <__aeabi_dsub>
 800b810:	4602      	mov	r2, r0
 800b812:	460b      	mov	r3, r1
 800b814:	f7f4 fd3a 	bl	800028c <__adddf3>
 800b818:	4602      	mov	r2, r0
 800b81a:	460b      	mov	r3, r1
 800b81c:	4640      	mov	r0, r8
 800b81e:	4649      	mov	r1, r9
 800b820:	f7f4 fd32 	bl	8000288 <__aeabi_dsub>
 800b824:	9b03      	ldr	r3, [sp, #12]
 800b826:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800b82a:	f00a 0a02 	and.w	sl, sl, #2
 800b82e:	4604      	mov	r4, r0
 800b830:	f1ca 0001 	rsb	r0, sl, #1
 800b834:	460d      	mov	r5, r1
 800b836:	f7f4 fe75 	bl	8000524 <__aeabi_i2d>
 800b83a:	4602      	mov	r2, r0
 800b83c:	460b      	mov	r3, r1
 800b83e:	4620      	mov	r0, r4
 800b840:	4629      	mov	r1, r5
 800b842:	f7f4 fed9 	bl	80005f8 <__aeabi_dmul>
 800b846:	e6da      	b.n	800b5fe <__kernel_tan+0x4e>
 800b848:	2e01      	cmp	r6, #1
 800b84a:	d038      	beq.n	800b8be <__kernel_tan+0x30e>
 800b84c:	460f      	mov	r7, r1
 800b84e:	4689      	mov	r9, r1
 800b850:	4602      	mov	r2, r0
 800b852:	460b      	mov	r3, r1
 800b854:	2000      	movs	r0, #0
 800b856:	493e      	ldr	r1, [pc, #248]	; (800b950 <__kernel_tan+0x3a0>)
 800b858:	f7f4 fff8 	bl	800084c <__aeabi_ddiv>
 800b85c:	2600      	movs	r6, #0
 800b85e:	e9cd 0100 	strd	r0, r1, [sp]
 800b862:	4652      	mov	r2, sl
 800b864:	465b      	mov	r3, fp
 800b866:	4630      	mov	r0, r6
 800b868:	4639      	mov	r1, r7
 800b86a:	f7f4 fd0d 	bl	8000288 <__aeabi_dsub>
 800b86e:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b872:	4602      	mov	r2, r0
 800b874:	460b      	mov	r3, r1
 800b876:	ec51 0b18 	vmov	r0, r1, d8
 800b87a:	f7f4 fd05 	bl	8000288 <__aeabi_dsub>
 800b87e:	4632      	mov	r2, r6
 800b880:	462b      	mov	r3, r5
 800b882:	f7f4 feb9 	bl	80005f8 <__aeabi_dmul>
 800b886:	46b0      	mov	r8, r6
 800b888:	460f      	mov	r7, r1
 800b88a:	4606      	mov	r6, r0
 800b88c:	4642      	mov	r2, r8
 800b88e:	462b      	mov	r3, r5
 800b890:	4640      	mov	r0, r8
 800b892:	4649      	mov	r1, r9
 800b894:	f7f4 feb0 	bl	80005f8 <__aeabi_dmul>
 800b898:	4b2c      	ldr	r3, [pc, #176]	; (800b94c <__kernel_tan+0x39c>)
 800b89a:	2200      	movs	r2, #0
 800b89c:	f7f4 fcf6 	bl	800028c <__adddf3>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	4630      	mov	r0, r6
 800b8a6:	4639      	mov	r1, r7
 800b8a8:	f7f4 fcf0 	bl	800028c <__adddf3>
 800b8ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8b0:	f7f4 fea2 	bl	80005f8 <__aeabi_dmul>
 800b8b4:	4642      	mov	r2, r8
 800b8b6:	462b      	mov	r3, r5
 800b8b8:	f7f4 fce8 	bl	800028c <__adddf3>
 800b8bc:	e69f      	b.n	800b5fe <__kernel_tan+0x4e>
 800b8be:	4682      	mov	sl, r0
 800b8c0:	468b      	mov	fp, r1
 800b8c2:	e69e      	b.n	800b602 <__kernel_tan+0x52>
 800b8c4:	f3af 8000 	nop.w
 800b8c8:	54442d18 	.word	0x54442d18
 800b8cc:	3fe921fb 	.word	0x3fe921fb
 800b8d0:	33145c07 	.word	0x33145c07
 800b8d4:	3c81a626 	.word	0x3c81a626
	...
 800b8e0:	74bf7ad4 	.word	0x74bf7ad4
 800b8e4:	3efb2a70 	.word	0x3efb2a70
 800b8e8:	32f0a7e9 	.word	0x32f0a7e9
 800b8ec:	3f12b80f 	.word	0x3f12b80f
 800b8f0:	1a8d1068 	.word	0x1a8d1068
 800b8f4:	3f3026f7 	.word	0x3f3026f7
 800b8f8:	fee08315 	.word	0xfee08315
 800b8fc:	3f57dbc8 	.word	0x3f57dbc8
 800b900:	e96e8493 	.word	0xe96e8493
 800b904:	3f8226e3 	.word	0x3f8226e3
 800b908:	1bb341fe 	.word	0x1bb341fe
 800b90c:	3faba1ba 	.word	0x3faba1ba
 800b910:	db605373 	.word	0xdb605373
 800b914:	bef375cb 	.word	0xbef375cb
 800b918:	a03792a6 	.word	0xa03792a6
 800b91c:	3f147e88 	.word	0x3f147e88
 800b920:	f2f26501 	.word	0xf2f26501
 800b924:	3f4344d8 	.word	0x3f4344d8
 800b928:	c9560328 	.word	0xc9560328
 800b92c:	3f6d6d22 	.word	0x3f6d6d22
 800b930:	8406d637 	.word	0x8406d637
 800b934:	3f9664f4 	.word	0x3f9664f4
 800b938:	1110fe7a 	.word	0x1110fe7a
 800b93c:	3fc11111 	.word	0x3fc11111
 800b940:	55555563 	.word	0x55555563
 800b944:	3fd55555 	.word	0x3fd55555
 800b948:	3e2fffff 	.word	0x3e2fffff
 800b94c:	3ff00000 	.word	0x3ff00000
 800b950:	bff00000 	.word	0xbff00000
 800b954:	3fe59427 	.word	0x3fe59427

0800b958 <fabs>:
 800b958:	ec51 0b10 	vmov	r0, r1, d0
 800b95c:	ee10 2a10 	vmov	r2, s0
 800b960:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b964:	ec43 2b10 	vmov	d0, r2, r3
 800b968:	4770      	bx	lr
 800b96a:	0000      	movs	r0, r0
 800b96c:	0000      	movs	r0, r0
	...

0800b970 <floor>:
 800b970:	ec51 0b10 	vmov	r0, r1, d0
 800b974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b978:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b97c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b980:	2e13      	cmp	r6, #19
 800b982:	ee10 5a10 	vmov	r5, s0
 800b986:	ee10 8a10 	vmov	r8, s0
 800b98a:	460c      	mov	r4, r1
 800b98c:	dc32      	bgt.n	800b9f4 <floor+0x84>
 800b98e:	2e00      	cmp	r6, #0
 800b990:	da14      	bge.n	800b9bc <floor+0x4c>
 800b992:	a333      	add	r3, pc, #204	; (adr r3, 800ba60 <floor+0xf0>)
 800b994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b998:	f7f4 fc78 	bl	800028c <__adddf3>
 800b99c:	2200      	movs	r2, #0
 800b99e:	2300      	movs	r3, #0
 800b9a0:	f7f5 f8ba 	bl	8000b18 <__aeabi_dcmpgt>
 800b9a4:	b138      	cbz	r0, 800b9b6 <floor+0x46>
 800b9a6:	2c00      	cmp	r4, #0
 800b9a8:	da57      	bge.n	800ba5a <floor+0xea>
 800b9aa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b9ae:	431d      	orrs	r5, r3
 800b9b0:	d001      	beq.n	800b9b6 <floor+0x46>
 800b9b2:	4c2d      	ldr	r4, [pc, #180]	; (800ba68 <floor+0xf8>)
 800b9b4:	2500      	movs	r5, #0
 800b9b6:	4621      	mov	r1, r4
 800b9b8:	4628      	mov	r0, r5
 800b9ba:	e025      	b.n	800ba08 <floor+0x98>
 800b9bc:	4f2b      	ldr	r7, [pc, #172]	; (800ba6c <floor+0xfc>)
 800b9be:	4137      	asrs	r7, r6
 800b9c0:	ea01 0307 	and.w	r3, r1, r7
 800b9c4:	4303      	orrs	r3, r0
 800b9c6:	d01f      	beq.n	800ba08 <floor+0x98>
 800b9c8:	a325      	add	r3, pc, #148	; (adr r3, 800ba60 <floor+0xf0>)
 800b9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ce:	f7f4 fc5d 	bl	800028c <__adddf3>
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	f7f5 f89f 	bl	8000b18 <__aeabi_dcmpgt>
 800b9da:	2800      	cmp	r0, #0
 800b9dc:	d0eb      	beq.n	800b9b6 <floor+0x46>
 800b9de:	2c00      	cmp	r4, #0
 800b9e0:	bfbe      	ittt	lt
 800b9e2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b9e6:	fa43 f606 	asrlt.w	r6, r3, r6
 800b9ea:	19a4      	addlt	r4, r4, r6
 800b9ec:	ea24 0407 	bic.w	r4, r4, r7
 800b9f0:	2500      	movs	r5, #0
 800b9f2:	e7e0      	b.n	800b9b6 <floor+0x46>
 800b9f4:	2e33      	cmp	r6, #51	; 0x33
 800b9f6:	dd0b      	ble.n	800ba10 <floor+0xa0>
 800b9f8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b9fc:	d104      	bne.n	800ba08 <floor+0x98>
 800b9fe:	ee10 2a10 	vmov	r2, s0
 800ba02:	460b      	mov	r3, r1
 800ba04:	f7f4 fc42 	bl	800028c <__adddf3>
 800ba08:	ec41 0b10 	vmov	d0, r0, r1
 800ba0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba10:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ba14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba18:	fa23 f707 	lsr.w	r7, r3, r7
 800ba1c:	4207      	tst	r7, r0
 800ba1e:	d0f3      	beq.n	800ba08 <floor+0x98>
 800ba20:	a30f      	add	r3, pc, #60	; (adr r3, 800ba60 <floor+0xf0>)
 800ba22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba26:	f7f4 fc31 	bl	800028c <__adddf3>
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	f7f5 f873 	bl	8000b18 <__aeabi_dcmpgt>
 800ba32:	2800      	cmp	r0, #0
 800ba34:	d0bf      	beq.n	800b9b6 <floor+0x46>
 800ba36:	2c00      	cmp	r4, #0
 800ba38:	da02      	bge.n	800ba40 <floor+0xd0>
 800ba3a:	2e14      	cmp	r6, #20
 800ba3c:	d103      	bne.n	800ba46 <floor+0xd6>
 800ba3e:	3401      	adds	r4, #1
 800ba40:	ea25 0507 	bic.w	r5, r5, r7
 800ba44:	e7b7      	b.n	800b9b6 <floor+0x46>
 800ba46:	2301      	movs	r3, #1
 800ba48:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ba4c:	fa03 f606 	lsl.w	r6, r3, r6
 800ba50:	4435      	add	r5, r6
 800ba52:	4545      	cmp	r5, r8
 800ba54:	bf38      	it	cc
 800ba56:	18e4      	addcc	r4, r4, r3
 800ba58:	e7f2      	b.n	800ba40 <floor+0xd0>
 800ba5a:	2500      	movs	r5, #0
 800ba5c:	462c      	mov	r4, r5
 800ba5e:	e7aa      	b.n	800b9b6 <floor+0x46>
 800ba60:	8800759c 	.word	0x8800759c
 800ba64:	7e37e43c 	.word	0x7e37e43c
 800ba68:	bff00000 	.word	0xbff00000
 800ba6c:	000fffff 	.word	0x000fffff

0800ba70 <scalbn>:
 800ba70:	b570      	push	{r4, r5, r6, lr}
 800ba72:	ec55 4b10 	vmov	r4, r5, d0
 800ba76:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ba7a:	4606      	mov	r6, r0
 800ba7c:	462b      	mov	r3, r5
 800ba7e:	b99a      	cbnz	r2, 800baa8 <scalbn+0x38>
 800ba80:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ba84:	4323      	orrs	r3, r4
 800ba86:	d036      	beq.n	800baf6 <scalbn+0x86>
 800ba88:	4b39      	ldr	r3, [pc, #228]	; (800bb70 <scalbn+0x100>)
 800ba8a:	4629      	mov	r1, r5
 800ba8c:	ee10 0a10 	vmov	r0, s0
 800ba90:	2200      	movs	r2, #0
 800ba92:	f7f4 fdb1 	bl	80005f8 <__aeabi_dmul>
 800ba96:	4b37      	ldr	r3, [pc, #220]	; (800bb74 <scalbn+0x104>)
 800ba98:	429e      	cmp	r6, r3
 800ba9a:	4604      	mov	r4, r0
 800ba9c:	460d      	mov	r5, r1
 800ba9e:	da10      	bge.n	800bac2 <scalbn+0x52>
 800baa0:	a32b      	add	r3, pc, #172	; (adr r3, 800bb50 <scalbn+0xe0>)
 800baa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa6:	e03a      	b.n	800bb1e <scalbn+0xae>
 800baa8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800baac:	428a      	cmp	r2, r1
 800baae:	d10c      	bne.n	800baca <scalbn+0x5a>
 800bab0:	ee10 2a10 	vmov	r2, s0
 800bab4:	4620      	mov	r0, r4
 800bab6:	4629      	mov	r1, r5
 800bab8:	f7f4 fbe8 	bl	800028c <__adddf3>
 800babc:	4604      	mov	r4, r0
 800babe:	460d      	mov	r5, r1
 800bac0:	e019      	b.n	800baf6 <scalbn+0x86>
 800bac2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bac6:	460b      	mov	r3, r1
 800bac8:	3a36      	subs	r2, #54	; 0x36
 800baca:	4432      	add	r2, r6
 800bacc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bad0:	428a      	cmp	r2, r1
 800bad2:	dd08      	ble.n	800bae6 <scalbn+0x76>
 800bad4:	2d00      	cmp	r5, #0
 800bad6:	a120      	add	r1, pc, #128	; (adr r1, 800bb58 <scalbn+0xe8>)
 800bad8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800badc:	da1c      	bge.n	800bb18 <scalbn+0xa8>
 800bade:	a120      	add	r1, pc, #128	; (adr r1, 800bb60 <scalbn+0xf0>)
 800bae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bae4:	e018      	b.n	800bb18 <scalbn+0xa8>
 800bae6:	2a00      	cmp	r2, #0
 800bae8:	dd08      	ble.n	800bafc <scalbn+0x8c>
 800baea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800baee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800baf2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800baf6:	ec45 4b10 	vmov	d0, r4, r5
 800bafa:	bd70      	pop	{r4, r5, r6, pc}
 800bafc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bb00:	da19      	bge.n	800bb36 <scalbn+0xc6>
 800bb02:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bb06:	429e      	cmp	r6, r3
 800bb08:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bb0c:	dd0a      	ble.n	800bb24 <scalbn+0xb4>
 800bb0e:	a112      	add	r1, pc, #72	; (adr r1, 800bb58 <scalbn+0xe8>)
 800bb10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d1e2      	bne.n	800bade <scalbn+0x6e>
 800bb18:	a30f      	add	r3, pc, #60	; (adr r3, 800bb58 <scalbn+0xe8>)
 800bb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1e:	f7f4 fd6b 	bl	80005f8 <__aeabi_dmul>
 800bb22:	e7cb      	b.n	800babc <scalbn+0x4c>
 800bb24:	a10a      	add	r1, pc, #40	; (adr r1, 800bb50 <scalbn+0xe0>)
 800bb26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d0b8      	beq.n	800baa0 <scalbn+0x30>
 800bb2e:	a10e      	add	r1, pc, #56	; (adr r1, 800bb68 <scalbn+0xf8>)
 800bb30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb34:	e7b4      	b.n	800baa0 <scalbn+0x30>
 800bb36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bb3a:	3236      	adds	r2, #54	; 0x36
 800bb3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bb40:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bb44:	4620      	mov	r0, r4
 800bb46:	4b0c      	ldr	r3, [pc, #48]	; (800bb78 <scalbn+0x108>)
 800bb48:	2200      	movs	r2, #0
 800bb4a:	e7e8      	b.n	800bb1e <scalbn+0xae>
 800bb4c:	f3af 8000 	nop.w
 800bb50:	c2f8f359 	.word	0xc2f8f359
 800bb54:	01a56e1f 	.word	0x01a56e1f
 800bb58:	8800759c 	.word	0x8800759c
 800bb5c:	7e37e43c 	.word	0x7e37e43c
 800bb60:	8800759c 	.word	0x8800759c
 800bb64:	fe37e43c 	.word	0xfe37e43c
 800bb68:	c2f8f359 	.word	0xc2f8f359
 800bb6c:	81a56e1f 	.word	0x81a56e1f
 800bb70:	43500000 	.word	0x43500000
 800bb74:	ffff3cb0 	.word	0xffff3cb0
 800bb78:	3c900000 	.word	0x3c900000

0800bb7c <_init>:
 800bb7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb7e:	bf00      	nop
 800bb80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb82:	bc08      	pop	{r3}
 800bb84:	469e      	mov	lr, r3
 800bb86:	4770      	bx	lr

0800bb88 <_fini>:
 800bb88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb8a:	bf00      	nop
 800bb8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb8e:	bc08      	pop	{r3}
 800bb90:	469e      	mov	lr, r3
 800bb92:	4770      	bx	lr
