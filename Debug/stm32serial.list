
stm32serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e08  08008b40  08008b40  00018b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009948  08009948  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08009948  08009948  00019948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009950  08009950  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009950  08009950  00019950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009954  08009954  00019954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08009958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000233c  200001ec  08009b44  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002528  08009b44  00022528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ddf9  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000405e  00000000  00000000  0003e015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  00042078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001a261  00000000  00000000  00043560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001a3f9  00000000  00000000  0005d7c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000930b3  00000000  00000000  00077bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0010ac6d  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001350  00000000  00000000  0010acc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b30  00000000  00000000  0010c010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008b28 	.word	0x08008b28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	08008b28 	.word	0x08008b28

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <updateDisplay>:
// Copy all data from local screenbuffer to the screen
	ssd1306_UpdateScreen(&hi2c1);

}

void updateDisplay(struct System *system) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]



	// ssd1306_Fill(Black);
	ssd1306_UpdateScreen(&hi2c1);
 8000580:	4813      	ldr	r0, [pc, #76]	; (80005d0 <updateDisplay+0x58>)
 8000582:	f000 fb4d 	bl	8000c20 <ssd1306_UpdateScreen>

	char cpu_text[20] = {0};
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	f107 0310 	add.w	r3, r7, #16
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]

	sprintf(cpu_text, "CPU %d %d C", system->cpu_util, system->cpu_temp);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	791b      	ldrb	r3, [r3, #4]
 800059c:	461a      	mov	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	799b      	ldrb	r3, [r3, #6]
 80005a2:	f107 000c 	add.w	r0, r7, #12
 80005a6:	490b      	ldr	r1, [pc, #44]	; (80005d4 <updateDisplay+0x5c>)
 80005a8:	f007 fe9e 	bl	80082e8 <siprintf>




	// Write data to local screenbuffer
	ssd1306_SetCursor(0, 15);
 80005ac:	210f      	movs	r1, #15
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 fc6e 	bl	8000e90 <ssd1306_SetCursor>
	ssd1306_WriteString(cpu_text, Font_11x18, White);
 80005b4:	4a08      	ldr	r2, [pc, #32]	; (80005d8 <updateDisplay+0x60>)
 80005b6:	f107 000c 	add.w	r0, r7, #12
 80005ba:	2301      	movs	r3, #1
 80005bc:	ca06      	ldmia	r2, {r1, r2}
 80005be:	f000 fc41 	bl	8000e44 <ssd1306_WriteString>



// Copy all data from local screenbuffer to the screen
	ssd1306_UpdateScreen(&hi2c1);
 80005c2:	4803      	ldr	r0, [pc, #12]	; (80005d0 <updateDisplay+0x58>)
 80005c4:	f000 fb2c 	bl	8000c20 <ssd1306_UpdateScreen>

}
 80005c8:	bf00      	nop
 80005ca:	3720      	adds	r7, #32
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000840 	.word	0x20000840
 80005d4:	08008b40 	.word	0x08008b40
 80005d8:	20000000 	.word	0x20000000

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b0c4      	sub	sp, #272	; 0x110
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char msg[11] = "No Data";
 80005e2:	4a3b      	ldr	r2, [pc, #236]	; (80006d0 <main+0xf4>)
 80005e4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80005e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ec:	e883 0003 	stmia.w	r3, {r0, r1}
 80005f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80005f4:	2100      	movs	r1, #0
 80005f6:	460a      	mov	r2, r1
 80005f8:	801a      	strh	r2, [r3, #0]
 80005fa:	460a      	mov	r2, r1
 80005fc:	709a      	strb	r2, [r3, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f000 fdef 	bl	80011e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f869 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f000 f94d 	bl	80008a4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800060a:	f007 f887 	bl	800771c <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 800060e:	f000 f8cb 	bl	80007a8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000612:	f000 f8f7 	bl	8000804 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	// Init lcd using one of the stm32HAL i2c typedefs
	if (ssd1306_Init(&hi2c1) != 0) {
 8000616:	482f      	ldr	r0, [pc, #188]	; (80006d4 <main+0xf8>)
 8000618:	f000 f9be 	bl	8000998 <ssd1306_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <main+0x4a>
		Error_Handler();
 8000622:	f000 f99d 	bl	8000960 <Error_Handler>
	}

//	writeToDisplay(msg);

	char message[20] = { 0 };
 8000626:	2300      	movs	r3, #0
 8000628:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800062c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]

	uint8_t data_frame_buffer[64] = {0};
 800063a:	2300      	movs	r3, #0
 800063c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000640:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000644:	223c      	movs	r2, #60	; 0x3c
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f007 fe45 	bl	80082d8 <memset>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		uint8_t bytesAvailable = CDC_GetRxBufferBytesAvailable_FS();
 800064e:	f007 f9c3 	bl	80079d8 <CDC_GetRxBufferBytesAvailable_FS>
 8000652:	4603      	mov	r3, r0
 8000654:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		if (bytesAvailable != 0) {
 8000658:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800065c:	2b00      	cmp	r3, #0
 800065e:	d0f6      	beq.n	800064e <main+0x72>
			memset(data_frame_buffer, 0, 64);  // clear the buffer
 8000660:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000664:	2240      	movs	r2, #64	; 0x40
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f007 fe35 	bl	80082d8 <memset>
			CDC_ReadRxBuffer_FS(data_frame_buffer, bytesAvailable);
 800066e:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8000672:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000676:	4611      	mov	r1, r2
 8000678:	4618      	mov	r0, r3
 800067a:	f007 f99b 	bl	80079b4 <CDC_ReadRxBuffer_FS>

			DataHeaders data_head = (DataHeaders) data_frame_buffer[0];
 800067e:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8000682:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e


			switch(data_head){
 8000686:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800068a:	2b06      	cmp	r3, #6
 800068c:	d010      	beq.n	80006b0 <main+0xd4>
 800068e:	2b06      	cmp	r3, #6
 8000690:	dc14      	bgt.n	80006bc <main+0xe0>
 8000692:	2b02      	cmp	r3, #2
 8000694:	d002      	beq.n	800069c <main+0xc0>
 8000696:	2b04      	cmp	r3, #4
 8000698:	d005      	beq.n	80006a6 <main+0xca>
			    case RAM: {
			    	system.ram_util = data_frame_buffer[1];
			    	break;
			    }
			    default: {
			      break;
 800069a:	e00f      	b.n	80006bc <main+0xe0>
			    	system.cpu_util = data_frame_buffer[1];
 800069c:	f897 20ad 	ldrb.w	r2, [r7, #173]	; 0xad
 80006a0:	463b      	mov	r3, r7
 80006a2:	711a      	strb	r2, [r3, #4]
			    	break;
 80006a4:	e00b      	b.n	80006be <main+0xe2>
			    	system.cpu_temp = data_frame_buffer[1];
 80006a6:	f897 20ad 	ldrb.w	r2, [r7, #173]	; 0xad
 80006aa:	463b      	mov	r3, r7
 80006ac:	719a      	strb	r2, [r3, #6]
			    	break;
 80006ae:	e006      	b.n	80006be <main+0xe2>
			    	system.ram_util = data_frame_buffer[1];
 80006b0:	f897 20ad 	ldrb.w	r2, [r7, #173]	; 0xad
 80006b4:	463b      	mov	r3, r7
 80006b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			    	break;
 80006ba:	e000      	b.n	80006be <main+0xe2>
			      break;
 80006bc:	bf00      	nop
			    }
			}

			updateDisplay(&system);
 80006be:	463b      	mov	r3, r7
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff59 	bl	8000578 <updateDisplay>
			CDC_FlushRxBuffer_FS();
 80006c6:	f007 f9a9 	bl	8007a1c <CDC_FlushRxBuffer_FS>
			CDC_Read_Next();
 80006ca:	f007 f99d 	bl	8007a08 <CDC_Read_Next>
	while (1) {
 80006ce:	e7be      	b.n	800064e <main+0x72>
 80006d0:	08008b4c 	.word	0x08008b4c
 80006d4:	20000840 	.word	0x20000840

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	; 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f007 fdf6 	bl	80082d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b27      	ldr	r3, [pc, #156]	; (80007a0 <SystemClock_Config+0xc8>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a26      	ldr	r2, [pc, #152]	; (80007a0 <SystemClock_Config+0xc8>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b24      	ldr	r3, [pc, #144]	; (80007a0 <SystemClock_Config+0xc8>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <SystemClock_Config+0xcc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a20      	ldr	r2, [pc, #128]	; (80007a4 <SystemClock_Config+0xcc>)
 8000722:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <SystemClock_Config+0xcc>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000734:	2301      	movs	r3, #1
 8000736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000738:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073e:	2302      	movs	r3, #2
 8000740:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000742:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000748:	2319      	movs	r3, #25
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800074c:	23c0      	movs	r3, #192	; 0xc0
 800074e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000754:	2304      	movs	r3, #4
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	4618      	mov	r0, r3
 800075e:	f002 ffed 	bl	800373c <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000768:	f000 f8fa 	bl	8000960 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
 800076e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000770:	2302      	movs	r3, #2
 8000772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2103      	movs	r1, #3
 8000788:	4618      	mov	r0, r3
 800078a:	f003 fa4f 	bl	8003c2c <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000794:	f000 f8e4 	bl	8000960 <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3750      	adds	r7, #80	; 0x50
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007ae:	4a13      	ldr	r2, [pc, #76]	; (80007fc <MX_I2C1_Init+0x54>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007b4:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_I2C1_Init+0x58>)
 80007b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007e6:	f001 f9cb 	bl	8001b80 <HAL_I2C_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007f0:	f000 f8b6 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000840 	.word	0x20000840
 80007fc:	40005400 	.word	0x40005400
 8000800:	00061a80 	.word	0x00061a80

08000804 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000818:	463b      	mov	r3, r7
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000820:	4b1e      	ldr	r3, [pc, #120]	; (800089c <MX_TIM1_Init+0x98>)
 8000822:	4a1f      	ldr	r2, [pc, #124]	; (80008a0 <MX_TIM1_Init+0x9c>)
 8000824:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000826:	4b1d      	ldr	r3, [pc, #116]	; (800089c <MX_TIM1_Init+0x98>)
 8000828:	2200      	movs	r2, #0
 800082a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <MX_TIM1_Init+0x98>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_TIM1_Init+0x98>)
 8000834:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000838:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_TIM1_Init+0x98>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000840:	4b16      	ldr	r3, [pc, #88]	; (800089c <MX_TIM1_Init+0x98>)
 8000842:	2200      	movs	r2, #0
 8000844:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_TIM1_Init+0x98>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800084c:	4813      	ldr	r0, [pc, #76]	; (800089c <MX_TIM1_Init+0x98>)
 800084e:	f003 fba9 	bl	8003fa4 <HAL_TIM_Base_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000858:	f000 f882 	bl	8000960 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800085c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000860:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000862:	f107 0308 	add.w	r3, r7, #8
 8000866:	4619      	mov	r1, r3
 8000868:	480c      	ldr	r0, [pc, #48]	; (800089c <MX_TIM1_Init+0x98>)
 800086a:	f003 fcf2 	bl	8004252 <HAL_TIM_ConfigClockSource>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000874:	f000 f874 	bl	8000960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000878:	2300      	movs	r3, #0
 800087a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000880:	463b      	mov	r3, r7
 8000882:	4619      	mov	r1, r3
 8000884:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_TIM1_Init+0x98>)
 8000886:	f003 feed 	bl	8004664 <HAL_TIMEx_MasterConfigSynchronization>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000890:	f000 f866 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	3718      	adds	r7, #24
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200008e0 	.word	0x200008e0
 80008a0:	40010000 	.word	0x40010000

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	4b26      	ldr	r3, [pc, #152]	; (8000958 <MX_GPIO_Init+0xb4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a25      	ldr	r2, [pc, #148]	; (8000958 <MX_GPIO_Init+0xb4>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b23      	ldr	r3, [pc, #140]	; (8000958 <MX_GPIO_Init+0xb4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <MX_GPIO_Init+0xb4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a1e      	ldr	r2, [pc, #120]	; (8000958 <MX_GPIO_Init+0xb4>)
 80008e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <MX_GPIO_Init+0xb4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_GPIO_Init+0xb4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a17      	ldr	r2, [pc, #92]	; (8000958 <MX_GPIO_Init+0xb4>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <MX_GPIO_Init+0xb4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_GPIO_Init+0xb4>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a10      	ldr	r2, [pc, #64]	; (8000958 <MX_GPIO_Init+0xb4>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_GPIO_Init+0xb4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2180      	movs	r1, #128	; 0x80
 800092e:	480b      	ldr	r0, [pc, #44]	; (800095c <MX_GPIO_Init+0xb8>)
 8000930:	f001 f90c 	bl	8001b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000938:	2301      	movs	r3, #1
 800093a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4619      	mov	r1, r3
 800094a:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_GPIO_Init+0xb8>)
 800094c:	f000 ff7a 	bl	8001844 <HAL_GPIO_Init>

}
 8000950:	bf00      	nop
 8000952:	3728      	adds	r7, #40	; 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40023800 	.word	0x40023800
 800095c:	40020400 	.word	0x40020400

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000968:	e7fe      	b.n	8000968 <Error_Handler+0x8>

0800096a <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b086      	sub	sp, #24
 800096e:	af04      	add	r7, sp, #16
 8000970:	6078      	str	r0, [r7, #4]
 8000972:	460b      	mov	r3, r1
 8000974:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8000976:	230a      	movs	r3, #10
 8000978:	9302      	str	r3, [sp, #8]
 800097a:	2301      	movs	r3, #1
 800097c:	9301      	str	r3, [sp, #4]
 800097e:	1cfb      	adds	r3, r7, #3
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	2301      	movs	r3, #1
 8000984:	2200      	movs	r2, #0
 8000986:	2178      	movs	r1, #120	; 0x78
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f001 fa3d 	bl	8001e08 <HAL_I2C_Mem_Write>
 800098e:	4603      	mov	r3, r0
}
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 80009a0:	2064      	movs	r0, #100	; 0x64
 80009a2:	f000 fc8f 	bl	80012c4 <HAL_Delay>
    int status = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 80009aa:	21ae      	movs	r1, #174	; 0xae
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff ffdc 	bl	800096a <ssd1306_WriteCommand>
 80009b2:	4603      	mov	r3, r0
 80009b4:	461a      	mov	r2, r3
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	4413      	add	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 80009bc:	2120      	movs	r1, #32
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff ffd3 	bl	800096a <ssd1306_WriteCommand>
 80009c4:	4603      	mov	r3, r0
 80009c6:	461a      	mov	r2, r3
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	4413      	add	r3, r2
 80009cc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80009ce:	2110      	movs	r1, #16
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff ffca 	bl	800096a <ssd1306_WriteCommand>
 80009d6:	4603      	mov	r3, r0
 80009d8:	461a      	mov	r2, r3
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	4413      	add	r3, r2
 80009de:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80009e0:	21b0      	movs	r1, #176	; 0xb0
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff ffc1 	bl	800096a <ssd1306_WriteCommand>
 80009e8:	4603      	mov	r3, r0
 80009ea:	461a      	mov	r2, r3
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	4413      	add	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 80009f2:	21c8      	movs	r1, #200	; 0xc8
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f7ff ffb8 	bl	800096a <ssd1306_WriteCommand>
 80009fa:	4603      	mov	r3, r0
 80009fc:	461a      	mov	r2, r3
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	4413      	add	r3, r2
 8000a02:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8000a04:	2100      	movs	r1, #0
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f7ff ffaf 	bl	800096a <ssd1306_WriteCommand>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	461a      	mov	r2, r3
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4413      	add	r3, r2
 8000a14:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8000a16:	2110      	movs	r1, #16
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff ffa6 	bl	800096a <ssd1306_WriteCommand>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	461a      	mov	r2, r3
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	4413      	add	r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8000a28:	2140      	movs	r1, #64	; 0x40
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f7ff ff9d 	bl	800096a <ssd1306_WriteCommand>
 8000a30:	4603      	mov	r3, r0
 8000a32:	461a      	mov	r2, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4413      	add	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8000a3a:	2181      	movs	r1, #129	; 0x81
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff ff94 	bl	800096a <ssd1306_WriteCommand>
 8000a42:	4603      	mov	r3, r0
 8000a44:	461a      	mov	r2, r3
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	4413      	add	r3, r2
 8000a4a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8000a4c:	21ff      	movs	r1, #255	; 0xff
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff ff8b 	bl	800096a <ssd1306_WriteCommand>
 8000a54:	4603      	mov	r3, r0
 8000a56:	461a      	mov	r2, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8000a5e:	21a1      	movs	r1, #161	; 0xa1
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff ff82 	bl	800096a <ssd1306_WriteCommand>
 8000a66:	4603      	mov	r3, r0
 8000a68:	461a      	mov	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8000a70:	21a6      	movs	r1, #166	; 0xa6
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f7ff ff79 	bl	800096a <ssd1306_WriteCommand>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4413      	add	r3, r2
 8000a80:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8000a82:	21a8      	movs	r1, #168	; 0xa8
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff ff70 	bl	800096a <ssd1306_WriteCommand>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	4413      	add	r3, r2
 8000a92:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8000a94:	213f      	movs	r1, #63	; 0x3f
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff ff67 	bl	800096a <ssd1306_WriteCommand>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000aa6:	21a4      	movs	r1, #164	; 0xa4
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ff5e 	bl	800096a <ssd1306_WriteCommand>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8000ab8:	21d3      	movs	r1, #211	; 0xd3
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff ff55 	bl	800096a <ssd1306_WriteCommand>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8000aca:	2100      	movs	r1, #0
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff ff4c 	bl	800096a <ssd1306_WriteCommand>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	4413      	add	r3, r2
 8000ada:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8000adc:	21d5      	movs	r1, #213	; 0xd5
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ff43 	bl	800096a <ssd1306_WriteCommand>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4413      	add	r3, r2
 8000aec:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8000aee:	21f0      	movs	r1, #240	; 0xf0
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff ff3a 	bl	800096a <ssd1306_WriteCommand>
 8000af6:	4603      	mov	r3, r0
 8000af8:	461a      	mov	r2, r3
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	4413      	add	r3, r2
 8000afe:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8000b00:	21d9      	movs	r1, #217	; 0xd9
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff ff31 	bl	800096a <ssd1306_WriteCommand>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	4413      	add	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8000b12:	2122      	movs	r1, #34	; 0x22
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff28 	bl	800096a <ssd1306_WriteCommand>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	4413      	add	r3, r2
 8000b22:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8000b24:	21da      	movs	r1, #218	; 0xda
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff ff1f 	bl	800096a <ssd1306_WriteCommand>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	461a      	mov	r2, r3
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4413      	add	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8000b36:	2112      	movs	r1, #18
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ff16 	bl	800096a <ssd1306_WriteCommand>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	461a      	mov	r2, r3
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	4413      	add	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8000b48:	21db      	movs	r1, #219	; 0xdb
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ff0d 	bl	800096a <ssd1306_WriteCommand>
 8000b50:	4603      	mov	r3, r0
 8000b52:	461a      	mov	r2, r3
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4413      	add	r3, r2
 8000b58:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8000b5a:	2120      	movs	r1, #32
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff ff04 	bl	800096a <ssd1306_WriteCommand>
 8000b62:	4603      	mov	r3, r0
 8000b64:	461a      	mov	r2, r3
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	4413      	add	r3, r2
 8000b6a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8000b6c:	218d      	movs	r1, #141	; 0x8d
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff fefb 	bl	800096a <ssd1306_WriteCommand>
 8000b74:	4603      	mov	r3, r0
 8000b76:	461a      	mov	r2, r3
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8000b7e:	2114      	movs	r1, #20
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff fef2 	bl	800096a <ssd1306_WriteCommand>
 8000b86:	4603      	mov	r3, r0
 8000b88:	461a      	mov	r2, r3
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8000b90:	21af      	movs	r1, #175	; 0xaf
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff fee9 	bl	800096a <ssd1306_WriteCommand>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <ssd1306_Init+0x214>
        return 1;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e00f      	b.n	8000bcc <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8000bac:	2000      	movs	r0, #0
 8000bae:	f000 f813 	bl	8000bd8 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f000 f834 	bl	8000c20 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <ssd1306_Init+0x23c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <ssd1306_Init+0x23c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <ssd1306_Init+0x23c>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	715a      	strb	r2, [r3, #5]

    return 0;
 8000bca:	2300      	movs	r3, #0
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000608 	.word	0x20000608

08000bd8 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	e00d      	b.n	8000c04 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d101      	bne.n	8000bf2 <ssd1306_Fill+0x1a>
 8000bee:	2100      	movs	r1, #0
 8000bf0:	e000      	b.n	8000bf4 <ssd1306_Fill+0x1c>
 8000bf2:	21ff      	movs	r1, #255	; 0xff
 8000bf4:	4a09      	ldr	r2, [pc, #36]	; (8000c1c <ssd1306_Fill+0x44>)
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	460a      	mov	r2, r1
 8000bfc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	3301      	adds	r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c0a:	d3ed      	bcc.n	8000be8 <ssd1306_Fill+0x10>
    }
}
 8000c0c:	bf00      	nop
 8000c0e:	bf00      	nop
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	20000208 	.word	0x20000208

08000c20 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af04      	add	r7, sp, #16
 8000c26:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8000c28:	2300      	movs	r3, #0
 8000c2a:	73fb      	strb	r3, [r7, #15]
 8000c2c:	e020      	b.n	8000c70 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
 8000c30:	3b50      	subs	r3, #80	; 0x50
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	4619      	mov	r1, r3
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff fe97 	bl	800096a <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff fe93 	bl	800096a <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8000c44:	2110      	movs	r1, #16
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff fe8f 	bl	800096a <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8000c4c:	7bfb      	ldrb	r3, [r7, #15]
 8000c4e:	01db      	lsls	r3, r3, #7
 8000c50:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <ssd1306_UpdateScreen+0x60>)
 8000c52:	4413      	add	r3, r2
 8000c54:	2264      	movs	r2, #100	; 0x64
 8000c56:	9202      	str	r2, [sp, #8]
 8000c58:	2280      	movs	r2, #128	; 0x80
 8000c5a:	9201      	str	r2, [sp, #4]
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	2301      	movs	r3, #1
 8000c60:	2240      	movs	r2, #64	; 0x40
 8000c62:	2178      	movs	r1, #120	; 0x78
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f001 f8cf 	bl	8001e08 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	d9db      	bls.n	8000c2e <ssd1306_UpdateScreen+0xe>
    }
}
 8000c76:	bf00      	nop
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000208 	.word	0x20000208

08000c84 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
 8000c8e:	460b      	mov	r3, r1
 8000c90:	71bb      	strb	r3, [r7, #6]
 8000c92:	4613      	mov	r3, r2
 8000c94:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	db48      	blt.n	8000d30 <ssd1306_DrawPixel+0xac>
 8000c9e:	79bb      	ldrb	r3, [r7, #6]
 8000ca0:	2b3f      	cmp	r3, #63	; 0x3f
 8000ca2:	d845      	bhi.n	8000d30 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8000ca4:	4b25      	ldr	r3, [pc, #148]	; (8000d3c <ssd1306_DrawPixel+0xb8>)
 8000ca6:	791b      	ldrb	r3, [r3, #4]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d006      	beq.n	8000cba <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8000cac:	797b      	ldrb	r3, [r7, #5]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	bf0c      	ite	eq
 8000cb2:	2301      	moveq	r3, #1
 8000cb4:	2300      	movne	r3, #0
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8000cba:	797b      	ldrb	r3, [r7, #5]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d11a      	bne.n	8000cf6 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000cc0:	79fa      	ldrb	r2, [r7, #7]
 8000cc2:	79bb      	ldrb	r3, [r7, #6]
 8000cc4:	08db      	lsrs	r3, r3, #3
 8000cc6:	b2d8      	uxtb	r0, r3
 8000cc8:	4603      	mov	r3, r0
 8000cca:	01db      	lsls	r3, r3, #7
 8000ccc:	4413      	add	r3, r2
 8000cce:	4a1c      	ldr	r2, [pc, #112]	; (8000d40 <ssd1306_DrawPixel+0xbc>)
 8000cd0:	5cd3      	ldrb	r3, [r2, r3]
 8000cd2:	b25a      	sxtb	r2, r3
 8000cd4:	79bb      	ldrb	r3, [r7, #6]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	2101      	movs	r1, #1
 8000cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce0:	b25b      	sxtb	r3, r3
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	b259      	sxtb	r1, r3
 8000ce6:	79fa      	ldrb	r2, [r7, #7]
 8000ce8:	4603      	mov	r3, r0
 8000cea:	01db      	lsls	r3, r3, #7
 8000cec:	4413      	add	r3, r2
 8000cee:	b2c9      	uxtb	r1, r1
 8000cf0:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <ssd1306_DrawPixel+0xbc>)
 8000cf2:	54d1      	strb	r1, [r2, r3]
 8000cf4:	e01d      	b.n	8000d32 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000cf6:	79fa      	ldrb	r2, [r7, #7]
 8000cf8:	79bb      	ldrb	r3, [r7, #6]
 8000cfa:	08db      	lsrs	r3, r3, #3
 8000cfc:	b2d8      	uxtb	r0, r3
 8000cfe:	4603      	mov	r3, r0
 8000d00:	01db      	lsls	r3, r3, #7
 8000d02:	4413      	add	r3, r2
 8000d04:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <ssd1306_DrawPixel+0xbc>)
 8000d06:	5cd3      	ldrb	r3, [r2, r3]
 8000d08:	b25a      	sxtb	r2, r3
 8000d0a:	79bb      	ldrb	r3, [r7, #6]
 8000d0c:	f003 0307 	and.w	r3, r3, #7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	b25b      	sxtb	r3, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	b25b      	sxtb	r3, r3
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	b259      	sxtb	r1, r3
 8000d20:	79fa      	ldrb	r2, [r7, #7]
 8000d22:	4603      	mov	r3, r0
 8000d24:	01db      	lsls	r3, r3, #7
 8000d26:	4413      	add	r3, r2
 8000d28:	b2c9      	uxtb	r1, r1
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <ssd1306_DrawPixel+0xbc>)
 8000d2c:	54d1      	strb	r1, [r2, r3]
 8000d2e:	e000      	b.n	8000d32 <ssd1306_DrawPixel+0xae>
        return;
 8000d30:	bf00      	nop
    }
}
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	20000608 	.word	0x20000608
 8000d40:	20000208 	.word	0x20000208

08000d44 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b089      	sub	sp, #36	; 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	1d38      	adds	r0, r7, #4
 8000d4e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000d52:	461a      	mov	r2, r3
 8000d54:	4623      	mov	r3, r4
 8000d56:	73fb      	strb	r3, [r7, #15]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000d5c:	4b38      	ldr	r3, [pc, #224]	; (8000e40 <ssd1306_WriteChar+0xfc>)
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	793b      	ldrb	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	2b7f      	cmp	r3, #127	; 0x7f
 8000d68:	dc06      	bgt.n	8000d78 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8000d6a:	4b35      	ldr	r3, [pc, #212]	; (8000e40 <ssd1306_WriteChar+0xfc>)
 8000d6c:	885b      	ldrh	r3, [r3, #2]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	797b      	ldrb	r3, [r7, #5]
 8000d72:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000d74:	2b3f      	cmp	r3, #63	; 0x3f
 8000d76:	dd01      	ble.n	8000d7c <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	e05d      	b.n	8000e38 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
 8000d80:	e04c      	b.n	8000e1c <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	3b20      	subs	r3, #32
 8000d88:	7979      	ldrb	r1, [r7, #5]
 8000d8a:	fb01 f303 	mul.w	r3, r1, r3
 8000d8e:	4619      	mov	r1, r3
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	440b      	add	r3, r1
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	4413      	add	r3, r2
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61bb      	str	r3, [r7, #24]
 8000da0:	e034      	b.n	8000e0c <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d012      	beq.n	8000dd8 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000db2:	4b23      	ldr	r3, [pc, #140]	; (8000e40 <ssd1306_WriteChar+0xfc>)
 8000db4:	881b      	ldrh	r3, [r3, #0]
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	4413      	add	r3, r2
 8000dbe:	b2d8      	uxtb	r0, r3
 8000dc0:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <ssd1306_WriteChar+0xfc>)
 8000dc2:	885b      	ldrh	r3, [r3, #2]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	4413      	add	r3, r2
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	7bba      	ldrb	r2, [r7, #14]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f7ff ff57 	bl	8000c84 <ssd1306_DrawPixel>
 8000dd6:	e016      	b.n	8000e06 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000dd8:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <ssd1306_WriteChar+0xfc>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	4413      	add	r3, r2
 8000de4:	b2d8      	uxtb	r0, r3
 8000de6:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <ssd1306_WriteChar+0xfc>)
 8000de8:	885b      	ldrh	r3, [r3, #2]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	4413      	add	r3, r2
 8000df2:	b2d9      	uxtb	r1, r3
 8000df4:	7bbb      	ldrb	r3, [r7, #14]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	bf0c      	ite	eq
 8000dfa:	2301      	moveq	r3, #1
 8000dfc:	2300      	movne	r3, #0
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	461a      	mov	r2, r3
 8000e02:	f7ff ff3f 	bl	8000c84 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	61bb      	str	r3, [r7, #24]
 8000e0c:	793b      	ldrb	r3, [r7, #4]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d3c5      	bcc.n	8000da2 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	61fb      	str	r3, [r7, #28]
 8000e1c:	797b      	ldrb	r3, [r7, #5]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d3ad      	bcc.n	8000d82 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <ssd1306_WriteChar+0xfc>)
 8000e28:	881a      	ldrh	r2, [r3, #0]
 8000e2a:	793b      	ldrb	r3, [r7, #4]
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	4413      	add	r3, r2
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <ssd1306_WriteChar+0xfc>)
 8000e34:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3724      	adds	r7, #36	; 0x24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd90      	pop	{r4, r7, pc}
 8000e40:	20000608 	.word	0x20000608

08000e44 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	1d38      	adds	r0, r7, #4
 8000e4e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000e52:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8000e54:	e012      	b.n	8000e7c <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	7818      	ldrb	r0, [r3, #0]
 8000e5a:	78fb      	ldrb	r3, [r7, #3]
 8000e5c:	1d3a      	adds	r2, r7, #4
 8000e5e:	ca06      	ldmia	r2, {r1, r2}
 8000e60:	f7ff ff70 	bl	8000d44 <ssd1306_WriteChar>
 8000e64:	4603      	mov	r3, r0
 8000e66:	461a      	mov	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d002      	beq.n	8000e76 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	e008      	b.n	8000e88 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
    while (*str)
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1e8      	bne.n	8000e56 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	781b      	ldrb	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	460a      	mov	r2, r1
 8000e9a:	71fb      	strb	r3, [r7, #7]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <ssd1306_SetCursor+0x2c>)
 8000ea6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000ea8:	79bb      	ldrb	r3, [r7, #6]
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <ssd1306_SetCursor+0x2c>)
 8000eae:	805a      	strh	r2, [r3, #2]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	20000608 	.word	0x20000608

08000ec0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	603b      	str	r3, [r7, #0]
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	4a08      	ldr	r2, [pc, #32]	; (8000f0c <HAL_MspInit+0x4c>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40023800 	.word	0x40023800

08000f10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a19      	ldr	r2, [pc, #100]	; (8000f94 <HAL_I2C_MspInit+0x84>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d12c      	bne.n	8000f8c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <HAL_I2C_MspInit+0x88>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a17      	ldr	r2, [pc, #92]	; (8000f98 <HAL_I2C_MspInit+0x88>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <HAL_I2C_MspInit+0x88>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f54:	2312      	movs	r3, #18
 8000f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f60:	2304      	movs	r3, #4
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480c      	ldr	r0, [pc, #48]	; (8000f9c <HAL_I2C_MspInit+0x8c>)
 8000f6c:	f000 fc6a 	bl	8001844 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <HAL_I2C_MspInit+0x88>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <HAL_I2C_MspInit+0x88>)
 8000f7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <HAL_I2C_MspInit+0x88>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	; 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40005400 	.word	0x40005400
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020400 	.word	0x40020400

08000fa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <HAL_TIM_Base_MspInit+0x3c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d10d      	bne.n	8000fce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_TIM_Base_MspInit+0x40>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	4a09      	ldr	r2, [pc, #36]	; (8000fe0 <HAL_TIM_Base_MspInit+0x40>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <HAL_TIM_Base_MspInit+0x40>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40010000 	.word	0x40010000
 8000fe0:	40023800 	.word	0x40023800

08000fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <NMI_Handler+0x4>

08000fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <UsageFault_Handler+0x4>

08001002 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001030:	f000 f928 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}

08001038 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <OTG_FS_IRQHandler+0x10>)
 800103e:	f001 fb4a 	bl	80026d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20002110 	.word	0x20002110

0800104c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001054:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <_sbrk+0x5c>)
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <_sbrk+0x60>)
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <_sbrk+0x64>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <_sbrk+0x64>)
 800106a:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <_sbrk+0x68>)
 800106c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	429a      	cmp	r2, r3
 800107a:	d207      	bcs.n	800108c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800107c:	f007 f8f4 	bl	8008268 <__errno>
 8001080:	4603      	mov	r3, r0
 8001082:	220c      	movs	r2, #12
 8001084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800108a:	e009      	b.n	80010a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <_sbrk+0x64>)
 800109c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800109e:	68fb      	ldr	r3, [r7, #12]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20020000 	.word	0x20020000
 80010ac:	00000400 	.word	0x00000400
 80010b0:	20000610 	.word	0x20000610
 80010b4:	20002528 	.word	0x20002528

080010b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <SystemInit+0x20>)
 80010be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c2:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <SystemInit+0x20>)
 80010c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <DMA2_Stream2_IRQHandler>:
	#endif

}

void DMA2_Stream2_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0

	#if defined(LED_BLUE_PORT)
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <DMA2_Stream2_IRQHandler+0x20>)
 80010e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010e6:	619a      	str	r2, [r3, #24]
	#endif

	// Check the interrupt and clear flag
	  HAL_DMA_IRQHandler(&dmaCC2);
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <DMA2_Stream2_IRQHandler+0x24>)
 80010ea:	f000 fa21 	bl	8001530 <HAL_DMA_IRQHandler>

	#if defined(LED_BLUE_PORT)
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN << 16;
 80010ee:	4b03      	ldr	r3, [pc, #12]	; (80010fc <DMA2_Stream2_IRQHandler+0x20>)
 80010f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80010f4:	619a      	str	r2, [r3, #24]
	#endif
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40020c00 	.word	0x40020c00
 8001100:	20000948 	.word	0x20000948

08001104 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <TIM1_UP_TIM10_IRQHandler+0x20>)
 800110a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800110e:	619a      	str	r2, [r3, #24]
	#endif

	HAL_TIM_IRQHandler(&TIM1_handle);
 8001110:	4805      	ldr	r0, [pc, #20]	; (8001128 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8001112:	f002 ff96 	bl	8004042 <HAL_TIM_IRQHandler>

	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 8001116:	4b03      	ldr	r3, [pc, #12]	; (8001124 <TIM1_UP_TIM10_IRQHandler+0x20>)
 8001118:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800111c:	619a      	str	r2, [r3, #24]
	#endif
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40020c00 	.word	0x40020c00
 8001128:	200009c4 	.word	0x200009c4

0800112c <HAL_TIM_PeriodElapsedCallback>:

// TIM2 Interrupt Handler gets executed on every TIM2 Update if enabled
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
		__HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
		// set TransferComplete flag
		ws2812b.transferComplete = 1;
	}*/

    ws2812b.timerPeriodCounter = 0;
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001136:	2200      	movs	r2, #0
 8001138:	645a      	str	r2, [r3, #68]	; 0x44
    TIM1->CR1 = 0; // disable timer
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]

    // disable the TIM2 Update IRQ
    __HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	68da      	ldr	r2, [r3, #12]
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 0201 	bic.w	r2, r2, #1
 800114e:	60da      	str	r2, [r3, #12]

    // Set back 1,25us period
    TIM1->ARR = tim_period;
 8001150:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001152:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Generate an update event to reload the Prescaler value immediatly
    TIM1->EGR = TIM_EGR_UG;
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800115a:	2201      	movs	r2, #1
 800115c:	615a      	str	r2, [r3, #20]
    __HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f06f 0201 	mvn.w	r2, #1
 8001166:	611a      	str	r2, [r3, #16]

    // set transfer_complete flag
    ws2812b.transferComplete = 1;
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800116a:	2201      	movs	r2, #1
 800116c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	20000894 	.word	0x20000894
 8001180:	40010000 	.word	0x40010000
 8001184:	200009c4 	.word	0x200009c4
 8001188:	20000a0c 	.word	0x20000a0c

0800118c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800118c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001190:	480d      	ldr	r0, [pc, #52]	; (80011c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001192:	490e      	ldr	r1, [pc, #56]	; (80011cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001194:	4a0e      	ldr	r2, [pc, #56]	; (80011d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001198:	e002      	b.n	80011a0 <LoopCopyDataInit>

0800119a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800119c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119e:	3304      	adds	r3, #4

080011a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a4:	d3f9      	bcc.n	800119a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a6:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011a8:	4c0b      	ldr	r4, [pc, #44]	; (80011d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ac:	e001      	b.n	80011b2 <LoopFillZerobss>

080011ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b0:	3204      	adds	r2, #4

080011b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b4:	d3fb      	bcc.n	80011ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011b6:	f7ff ff7f 	bl	80010b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ba:	f007 f85b 	bl	8008274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011be:	f7ff fa0d 	bl	80005dc <main>
  bx  lr    
 80011c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011cc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80011d0:	08009958 	.word	0x08009958
  ldr r2, =_sbss
 80011d4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80011d8:	20002528 	.word	0x20002528

080011dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011dc:	e7fe      	b.n	80011dc <ADC_IRQHandler>
	...

080011e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011e4:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <HAL_Init+0x40>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0d      	ldr	r2, [pc, #52]	; (8001220 <HAL_Init+0x40>)
 80011ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <HAL_Init+0x40>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <HAL_Init+0x40>)
 80011f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <HAL_Init+0x40>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <HAL_Init+0x40>)
 8001202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001206:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001208:	2003      	movs	r0, #3
 800120a:	f000 f94f 	bl	80014ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120e:	200f      	movs	r0, #15
 8001210:	f000 f808 	bl	8001224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001214:	f7ff fe54 	bl	8000ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023c00 	.word	0x40023c00

08001224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_InitTick+0x54>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_InitTick+0x58>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123a:	fbb3 f3f1 	udiv	r3, r3, r1
 800123e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f967 	bl	8001516 <HAL_SYSTICK_Config>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e00e      	b.n	8001270 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0f      	cmp	r3, #15
 8001256:	d80a      	bhi.n	800126e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001258:	2200      	movs	r2, #0
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001260:	f000 f92f 	bl	80014c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001264:	4a06      	ldr	r2, [pc, #24]	; (8001280 <HAL_InitTick+0x5c>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	e000      	b.n	8001270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000008 	.word	0x20000008
 800127c:	20000010 	.word	0x20000010
 8001280:	2000000c 	.word	0x2000000c

08001284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_IncTick+0x20>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_IncTick+0x24>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <HAL_IncTick+0x24>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000010 	.word	0x20000010
 80012a8:	20000b34 	.word	0x20000b34

080012ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <HAL_GetTick+0x14>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000b34 	.word	0x20000b34

080012c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012cc:	f7ff ffee 	bl	80012ac <HAL_GetTick>
 80012d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012dc:	d005      	beq.n	80012ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012de:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <HAL_Delay+0x44>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4413      	add	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ea:	bf00      	nop
 80012ec:	f7ff ffde 	bl	80012ac <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d8f7      	bhi.n	80012ec <HAL_Delay+0x28>
  {
  }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000010 	.word	0x20000010

0800130c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133e:	4a04      	ldr	r2, [pc, #16]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	60d3      	str	r3, [r2, #12]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <__NVIC_GetPriorityGrouping+0x18>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f003 0307 	and.w	r3, r3, #7
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	2b00      	cmp	r3, #0
 8001380:	db0b      	blt.n	800139a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f003 021f 	and.w	r2, r3, #31
 8001388:	4907      	ldr	r1, [pc, #28]	; (80013a8 <__NVIC_EnableIRQ+0x38>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	2001      	movs	r0, #1
 8001392:	fa00 f202 	lsl.w	r2, r0, r2
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000e100 	.word	0xe000e100

080013ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	db0a      	blt.n	80013d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	490c      	ldr	r1, [pc, #48]	; (80013f8 <__NVIC_SetPriority+0x4c>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d4:	e00a      	b.n	80013ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4908      	ldr	r1, [pc, #32]	; (80013fc <__NVIC_SetPriority+0x50>)
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	3b04      	subs	r3, #4
 80013e4:	0112      	lsls	r2, r2, #4
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	440b      	add	r3, r1
 80013ea:	761a      	strb	r2, [r3, #24]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000e100 	.word	0xe000e100
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	; 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f1c3 0307 	rsb	r3, r3, #7
 800141a:	2b04      	cmp	r3, #4
 800141c:	bf28      	it	cs
 800141e:	2304      	movcs	r3, #4
 8001420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3304      	adds	r3, #4
 8001426:	2b06      	cmp	r3, #6
 8001428:	d902      	bls.n	8001430 <NVIC_EncodePriority+0x30>
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3b03      	subs	r3, #3
 800142e:	e000      	b.n	8001432 <NVIC_EncodePriority+0x32>
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	401a      	ands	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001448:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	43d9      	mvns	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	4313      	orrs	r3, r2
         );
}
 800145a:	4618      	mov	r0, r3
 800145c:	3724      	adds	r7, #36	; 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001478:	d301      	bcc.n	800147e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147a:	2301      	movs	r3, #1
 800147c:	e00f      	b.n	800149e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <SysTick_Config+0x40>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001486:	210f      	movs	r1, #15
 8001488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800148c:	f7ff ff8e 	bl	80013ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <SysTick_Config+0x40>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <SysTick_Config+0x40>)
 8001498:	2207      	movs	r2, #7
 800149a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	e000e010 	.word	0xe000e010

080014ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff29 	bl	800130c <__NVIC_SetPriorityGrouping>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d4:	f7ff ff3e 	bl	8001354 <__NVIC_GetPriorityGrouping>
 80014d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	6978      	ldr	r0, [r7, #20]
 80014e0:	f7ff ff8e 	bl	8001400 <NVIC_EncodePriority>
 80014e4:	4602      	mov	r2, r0
 80014e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff5d 	bl	80013ac <__NVIC_SetPriority>
}
 80014f2:	bf00      	nop
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff31 	bl	8001370 <__NVIC_EnableIRQ>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ffa2 	bl	8001468 <SysTick_Config>
 8001524:	4603      	mov	r3, r0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800153c:	4b92      	ldr	r3, [pc, #584]	; (8001788 <HAL_DMA_IRQHandler+0x258>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a92      	ldr	r2, [pc, #584]	; (800178c <HAL_DMA_IRQHandler+0x25c>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	0a9b      	lsrs	r3, r3, #10
 8001548:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155a:	2208      	movs	r2, #8
 800155c:	409a      	lsls	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4013      	ands	r3, r2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d01a      	beq.n	800159c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	d013      	beq.n	800159c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0204 	bic.w	r2, r2, #4
 8001582:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001588:	2208      	movs	r2, #8
 800158a:	409a      	lsls	r2, r3
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001594:	f043 0201 	orr.w	r2, r3, #1
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a0:	2201      	movs	r2, #1
 80015a2:	409a      	lsls	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4013      	ands	r3, r2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d012      	beq.n	80015d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00b      	beq.n	80015d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015be:	2201      	movs	r2, #1
 80015c0:	409a      	lsls	r2, r3
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ca:	f043 0202 	orr.w	r2, r3, #2
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d6:	2204      	movs	r2, #4
 80015d8:	409a      	lsls	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4013      	ands	r3, r2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d012      	beq.n	8001608 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00b      	beq.n	8001608 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f4:	2204      	movs	r2, #4
 80015f6:	409a      	lsls	r2, r3
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001600:	f043 0204 	orr.w	r2, r3, #4
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160c:	2210      	movs	r2, #16
 800160e:	409a      	lsls	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4013      	ands	r3, r2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d043      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	d03c      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162a:	2210      	movs	r2, #16
 800162c:	409a      	lsls	r2, r3
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d018      	beq.n	8001672 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d108      	bne.n	8001660 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	2b00      	cmp	r3, #0
 8001654:	d024      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	4798      	blx	r3
 800165e:	e01f      	b.n	80016a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001664:	2b00      	cmp	r3, #0
 8001666:	d01b      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	4798      	blx	r3
 8001670:	e016      	b.n	80016a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167c:	2b00      	cmp	r3, #0
 800167e:	d107      	bne.n	8001690 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0208 	bic.w	r2, r2, #8
 800168e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a4:	2220      	movs	r2, #32
 80016a6:	409a      	lsls	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 808e 	beq.w	80017ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0310 	and.w	r3, r3, #16
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 8086 	beq.w	80017ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c6:	2220      	movs	r2, #32
 80016c8:	409a      	lsls	r2, r3
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b05      	cmp	r3, #5
 80016d8:	d136      	bne.n	8001748 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0216 	bic.w	r2, r2, #22
 80016e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	695a      	ldr	r2, [r3, #20]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d103      	bne.n	800170a <HAL_DMA_IRQHandler+0x1da>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001706:	2b00      	cmp	r3, #0
 8001708:	d007      	beq.n	800171a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0208 	bic.w	r2, r2, #8
 8001718:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171e:	223f      	movs	r2, #63	; 0x3f
 8001720:	409a      	lsls	r2, r3
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800173a:	2b00      	cmp	r3, #0
 800173c:	d07d      	beq.n	800183a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	4798      	blx	r3
        }
        return;
 8001746:	e078      	b.n	800183a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d01c      	beq.n	8001790 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d108      	bne.n	8001776 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001768:	2b00      	cmp	r3, #0
 800176a:	d030      	beq.n	80017ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	4798      	blx	r3
 8001774:	e02b      	b.n	80017ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800177a:	2b00      	cmp	r3, #0
 800177c:	d027      	beq.n	80017ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	4798      	blx	r3
 8001786:	e022      	b.n	80017ce <HAL_DMA_IRQHandler+0x29e>
 8001788:	20000008 	.word	0x20000008
 800178c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10f      	bne.n	80017be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0210 	bic.w	r2, r2, #16
 80017ac:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d032      	beq.n	800183c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d022      	beq.n	8001828 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2205      	movs	r2, #5
 80017e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0201 	bic.w	r2, r2, #1
 80017f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	3301      	adds	r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	429a      	cmp	r2, r3
 8001804:	d307      	bcc.n	8001816 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1f2      	bne.n	80017fa <HAL_DMA_IRQHandler+0x2ca>
 8001814:	e000      	b.n	8001818 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001816:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	4798      	blx	r3
 8001838:	e000      	b.n	800183c <HAL_DMA_IRQHandler+0x30c>
        return;
 800183a:	bf00      	nop
    }
  }
}
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop

08001844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001856:	2300      	movs	r3, #0
 8001858:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	e159      	b.n	8001b14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001860:	2201      	movs	r2, #1
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	429a      	cmp	r2, r3
 800187a:	f040 8148 	bne.w	8001b0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b01      	cmp	r3, #1
 8001888:	d005      	beq.n	8001896 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001892:	2b02      	cmp	r3, #2
 8001894:	d130      	bne.n	80018f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	2203      	movs	r2, #3
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018cc:	2201      	movs	r2, #1
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	091b      	lsrs	r3, r3, #4
 80018e2:	f003 0201 	and.w	r2, r3, #1
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	2b03      	cmp	r3, #3
 8001902:	d017      	beq.n	8001934 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	2203      	movs	r2, #3
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d123      	bne.n	8001988 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	08da      	lsrs	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3208      	adds	r2, #8
 8001948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	220f      	movs	r2, #15
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	691a      	ldr	r2, [r3, #16]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	08da      	lsrs	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3208      	adds	r2, #8
 8001982:	69b9      	ldr	r1, [r7, #24]
 8001984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0203 	and.w	r2, r3, #3
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 80a2 	beq.w	8001b0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	4b57      	ldr	r3, [pc, #348]	; (8001b2c <HAL_GPIO_Init+0x2e8>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	4a56      	ldr	r2, [pc, #344]	; (8001b2c <HAL_GPIO_Init+0x2e8>)
 80019d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d8:	6453      	str	r3, [r2, #68]	; 0x44
 80019da:	4b54      	ldr	r3, [pc, #336]	; (8001b2c <HAL_GPIO_Init+0x2e8>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019e6:	4a52      	ldr	r2, [pc, #328]	; (8001b30 <HAL_GPIO_Init+0x2ec>)
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	089b      	lsrs	r3, r3, #2
 80019ec:	3302      	adds	r3, #2
 80019ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	220f      	movs	r2, #15
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a49      	ldr	r2, [pc, #292]	; (8001b34 <HAL_GPIO_Init+0x2f0>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d019      	beq.n	8001a46 <HAL_GPIO_Init+0x202>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a48      	ldr	r2, [pc, #288]	; (8001b38 <HAL_GPIO_Init+0x2f4>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d013      	beq.n	8001a42 <HAL_GPIO_Init+0x1fe>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a47      	ldr	r2, [pc, #284]	; (8001b3c <HAL_GPIO_Init+0x2f8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d00d      	beq.n	8001a3e <HAL_GPIO_Init+0x1fa>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a46      	ldr	r2, [pc, #280]	; (8001b40 <HAL_GPIO_Init+0x2fc>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d007      	beq.n	8001a3a <HAL_GPIO_Init+0x1f6>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a45      	ldr	r2, [pc, #276]	; (8001b44 <HAL_GPIO_Init+0x300>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d101      	bne.n	8001a36 <HAL_GPIO_Init+0x1f2>
 8001a32:	2304      	movs	r3, #4
 8001a34:	e008      	b.n	8001a48 <HAL_GPIO_Init+0x204>
 8001a36:	2307      	movs	r3, #7
 8001a38:	e006      	b.n	8001a48 <HAL_GPIO_Init+0x204>
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e004      	b.n	8001a48 <HAL_GPIO_Init+0x204>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e002      	b.n	8001a48 <HAL_GPIO_Init+0x204>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <HAL_GPIO_Init+0x204>
 8001a46:	2300      	movs	r3, #0
 8001a48:	69fa      	ldr	r2, [r7, #28]
 8001a4a:	f002 0203 	and.w	r2, r2, #3
 8001a4e:	0092      	lsls	r2, r2, #2
 8001a50:	4093      	lsls	r3, r2
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a58:	4935      	ldr	r1, [pc, #212]	; (8001b30 <HAL_GPIO_Init+0x2ec>)
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	089b      	lsrs	r3, r3, #2
 8001a5e:	3302      	adds	r3, #2
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a66:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a8a:	4a2f      	ldr	r2, [pc, #188]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a90:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ab4:	4a24      	ldr	r2, [pc, #144]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aba:	4b23      	ldr	r3, [pc, #140]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ade:	4a1a      	ldr	r2, [pc, #104]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b08:	4a0f      	ldr	r2, [pc, #60]	; (8001b48 <HAL_GPIO_Init+0x304>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3301      	adds	r3, #1
 8001b12:	61fb      	str	r3, [r7, #28]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	2b0f      	cmp	r3, #15
 8001b18:	f67f aea2 	bls.w	8001860 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	3724      	adds	r7, #36	; 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40013800 	.word	0x40013800
 8001b34:	40020000 	.word	0x40020000
 8001b38:	40020400 	.word	0x40020400
 8001b3c:	40020800 	.word	0x40020800
 8001b40:	40020c00 	.word	0x40020c00
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40013c00 	.word	0x40013c00

08001b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	807b      	strh	r3, [r7, #2]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b5c:	787b      	ldrb	r3, [r7, #1]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b62:	887a      	ldrh	r2, [r7, #2]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b68:	e003      	b.n	8001b72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b6a:	887b      	ldrh	r3, [r7, #2]
 8001b6c:	041a      	lsls	r2, r3, #16
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	619a      	str	r2, [r3, #24]
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e12b      	b.n	8001dea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d106      	bne.n	8001bac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff f9b2 	bl	8000f10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2224      	movs	r2, #36	; 0x24
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001be2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001be4:	f002 f9ca 	bl	8003f7c <HAL_RCC_GetPCLK1Freq>
 8001be8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4a81      	ldr	r2, [pc, #516]	; (8001df4 <HAL_I2C_Init+0x274>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d807      	bhi.n	8001c04 <HAL_I2C_Init+0x84>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4a80      	ldr	r2, [pc, #512]	; (8001df8 <HAL_I2C_Init+0x278>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	bf94      	ite	ls
 8001bfc:	2301      	movls	r3, #1
 8001bfe:	2300      	movhi	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	e006      	b.n	8001c12 <HAL_I2C_Init+0x92>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4a7d      	ldr	r2, [pc, #500]	; (8001dfc <HAL_I2C_Init+0x27c>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	bf94      	ite	ls
 8001c0c:	2301      	movls	r3, #1
 8001c0e:	2300      	movhi	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e0e7      	b.n	8001dea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4a78      	ldr	r2, [pc, #480]	; (8001e00 <HAL_I2C_Init+0x280>)
 8001c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c22:	0c9b      	lsrs	r3, r3, #18
 8001c24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	4a6a      	ldr	r2, [pc, #424]	; (8001df4 <HAL_I2C_Init+0x274>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d802      	bhi.n	8001c54 <HAL_I2C_Init+0xd4>
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	3301      	adds	r3, #1
 8001c52:	e009      	b.n	8001c68 <HAL_I2C_Init+0xe8>
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c5a:	fb02 f303 	mul.w	r3, r2, r3
 8001c5e:	4a69      	ldr	r2, [pc, #420]	; (8001e04 <HAL_I2C_Init+0x284>)
 8001c60:	fba2 2303 	umull	r2, r3, r2, r3
 8001c64:	099b      	lsrs	r3, r3, #6
 8001c66:	3301      	adds	r3, #1
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	495c      	ldr	r1, [pc, #368]	; (8001df4 <HAL_I2C_Init+0x274>)
 8001c84:	428b      	cmp	r3, r1
 8001c86:	d819      	bhi.n	8001cbc <HAL_I2C_Init+0x13c>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	1e59      	subs	r1, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c96:	1c59      	adds	r1, r3, #1
 8001c98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c9c:	400b      	ands	r3, r1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00a      	beq.n	8001cb8 <HAL_I2C_Init+0x138>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1e59      	subs	r1, r3, #1
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb6:	e051      	b.n	8001d5c <HAL_I2C_Init+0x1dc>
 8001cb8:	2304      	movs	r3, #4
 8001cba:	e04f      	b.n	8001d5c <HAL_I2C_Init+0x1dc>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d111      	bne.n	8001ce8 <HAL_I2C_Init+0x168>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	1e58      	subs	r0, r3, #1
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6859      	ldr	r1, [r3, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	440b      	add	r3, r1
 8001cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	bf0c      	ite	eq
 8001ce0:	2301      	moveq	r3, #1
 8001ce2:	2300      	movne	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	e012      	b.n	8001d0e <HAL_I2C_Init+0x18e>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	1e58      	subs	r0, r3, #1
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6859      	ldr	r1, [r3, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	0099      	lsls	r1, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cfe:	3301      	adds	r3, #1
 8001d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	bf0c      	ite	eq
 8001d08:	2301      	moveq	r3, #1
 8001d0a:	2300      	movne	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_I2C_Init+0x196>
 8001d12:	2301      	movs	r3, #1
 8001d14:	e022      	b.n	8001d5c <HAL_I2C_Init+0x1dc>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10e      	bne.n	8001d3c <HAL_I2C_Init+0x1bc>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	1e58      	subs	r0, r3, #1
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6859      	ldr	r1, [r3, #4]
 8001d26:	460b      	mov	r3, r1
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	440b      	add	r3, r1
 8001d2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d30:	3301      	adds	r3, #1
 8001d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d3a:	e00f      	b.n	8001d5c <HAL_I2C_Init+0x1dc>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	1e58      	subs	r0, r3, #1
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6859      	ldr	r1, [r3, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	0099      	lsls	r1, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d52:	3301      	adds	r3, #1
 8001d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	6809      	ldr	r1, [r1, #0]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69da      	ldr	r2, [r3, #28]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6911      	ldr	r1, [r2, #16]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	68d2      	ldr	r2, [r2, #12]
 8001d96:	4311      	orrs	r1, r2
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	430b      	orrs	r3, r1
 8001d9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695a      	ldr	r2, [r3, #20]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0201 	orr.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	000186a0 	.word	0x000186a0
 8001df8:	001e847f 	.word	0x001e847f
 8001dfc:	003d08ff 	.word	0x003d08ff
 8001e00:	431bde83 	.word	0x431bde83
 8001e04:	10624dd3 	.word	0x10624dd3

08001e08 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af02      	add	r7, sp, #8
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	4608      	mov	r0, r1
 8001e12:	4611      	mov	r1, r2
 8001e14:	461a      	mov	r2, r3
 8001e16:	4603      	mov	r3, r0
 8001e18:	817b      	strh	r3, [r7, #10]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	813b      	strh	r3, [r7, #8]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e22:	f7ff fa43 	bl	80012ac <HAL_GetTick>
 8001e26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b20      	cmp	r3, #32
 8001e32:	f040 80d9 	bne.w	8001fe8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	2319      	movs	r3, #25
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	496d      	ldr	r1, [pc, #436]	; (8001ff4 <HAL_I2C_Mem_Write+0x1ec>)
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 f971 	bl	8002128 <I2C_WaitOnFlagUntilTimeout>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e0cc      	b.n	8001fea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_I2C_Mem_Write+0x56>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e0c5      	b.n	8001fea <HAL_I2C_Mem_Write+0x1e2>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d007      	beq.n	8001e84 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0201 	orr.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2221      	movs	r2, #33	; 0x21
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2240      	movs	r2, #64	; 0x40
 8001ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a3a      	ldr	r2, [r7, #32]
 8001eae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4a4d      	ldr	r2, [pc, #308]	; (8001ff8 <HAL_I2C_Mem_Write+0x1f0>)
 8001ec4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ec6:	88f8      	ldrh	r0, [r7, #6]
 8001ec8:	893a      	ldrh	r2, [r7, #8]
 8001eca:	8979      	ldrh	r1, [r7, #10]
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	9301      	str	r3, [sp, #4]
 8001ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 f890 	bl	8001ffc <I2C_RequestMemoryWrite>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d052      	beq.n	8001f88 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e081      	b.n	8001fea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f000 f9f2 	bl	80022d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00d      	beq.n	8001f12 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d107      	bne.n	8001f0e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e06b      	b.n	8001fea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	781a      	ldrb	r2, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	d11b      	bne.n	8001f88 <HAL_I2C_Mem_Write+0x180>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d017      	beq.n	8001f88 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	781a      	ldrb	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	1c5a      	adds	r2, r3, #1
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f72:	3b01      	subs	r3, #1
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1aa      	bne.n	8001ee6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 f9de 	bl	8002356 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00d      	beq.n	8001fbc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d107      	bne.n	8001fb8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e016      	b.n	8001fea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	e000      	b.n	8001fea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001fe8:	2302      	movs	r3, #2
  }
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	00100002 	.word	0x00100002
 8001ff8:	ffff0000 	.word	0xffff0000

08001ffc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af02      	add	r7, sp, #8
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	4608      	mov	r0, r1
 8002006:	4611      	mov	r1, r2
 8002008:	461a      	mov	r2, r3
 800200a:	4603      	mov	r3, r0
 800200c:	817b      	strh	r3, [r7, #10]
 800200e:	460b      	mov	r3, r1
 8002010:	813b      	strh	r3, [r7, #8]
 8002012:	4613      	mov	r3, r2
 8002014:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002024:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	2200      	movs	r2, #0
 800202e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 f878 	bl	8002128 <I2C_WaitOnFlagUntilTimeout>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00d      	beq.n	800205a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800204c:	d103      	bne.n	8002056 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002054:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e05f      	b.n	800211a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800205a:	897b      	ldrh	r3, [r7, #10]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002068:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	6a3a      	ldr	r2, [r7, #32]
 800206e:	492d      	ldr	r1, [pc, #180]	; (8002124 <I2C_RequestMemoryWrite+0x128>)
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 f8b0 	bl	80021d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e04c      	b.n	800211a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002098:	6a39      	ldr	r1, [r7, #32]
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 f91a 	bl	80022d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00d      	beq.n	80020c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d107      	bne.n	80020be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e02b      	b.n	800211a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020c2:	88fb      	ldrh	r3, [r7, #6]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d105      	bne.n	80020d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020c8:	893b      	ldrh	r3, [r7, #8]
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	611a      	str	r2, [r3, #16]
 80020d2:	e021      	b.n	8002118 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80020d4:	893b      	ldrh	r3, [r7, #8]
 80020d6:	0a1b      	lsrs	r3, r3, #8
 80020d8:	b29b      	uxth	r3, r3
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e4:	6a39      	ldr	r1, [r7, #32]
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 f8f4 	bl	80022d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00d      	beq.n	800210e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d107      	bne.n	800210a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002108:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e005      	b.n	800211a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800210e:	893b      	ldrh	r3, [r7, #8]
 8002110:	b2da      	uxtb	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	00010002 	.word	0x00010002

08002128 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	4613      	mov	r3, r2
 8002136:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002138:	e025      	b.n	8002186 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002140:	d021      	beq.n	8002186 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002142:	f7ff f8b3 	bl	80012ac <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d302      	bcc.n	8002158 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d116      	bne.n	8002186 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2220      	movs	r2, #32
 8002162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f043 0220 	orr.w	r2, r3, #32
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e023      	b.n	80021ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	0c1b      	lsrs	r3, r3, #16
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b01      	cmp	r3, #1
 800218e:	d10d      	bne.n	80021ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	43da      	mvns	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	4013      	ands	r3, r2
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	bf0c      	ite	eq
 80021a2:	2301      	moveq	r3, #1
 80021a4:	2300      	movne	r3, #0
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	e00c      	b.n	80021c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	43da      	mvns	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	4013      	ands	r3, r2
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	bf0c      	ite	eq
 80021be:	2301      	moveq	r3, #1
 80021c0:	2300      	movne	r3, #0
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d0b6      	beq.n	800213a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b084      	sub	sp, #16
 80021da:	af00      	add	r7, sp, #0
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
 80021e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021e4:	e051      	b.n	800228a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021f4:	d123      	bne.n	800223e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002204:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800220e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2220      	movs	r2, #32
 800221a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f043 0204 	orr.w	r2, r3, #4
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e046      	b.n	80022cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002244:	d021      	beq.n	800228a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002246:	f7ff f831 	bl	80012ac <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	429a      	cmp	r2, r3
 8002254:	d302      	bcc.n	800225c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d116      	bne.n	800228a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2220      	movs	r2, #32
 8002266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f043 0220 	orr.w	r2, r3, #32
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e020      	b.n	80022cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	0c1b      	lsrs	r3, r3, #16
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b01      	cmp	r3, #1
 8002292:	d10c      	bne.n	80022ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	43da      	mvns	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	4013      	ands	r3, r2
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	bf14      	ite	ne
 80022a6:	2301      	movne	r3, #1
 80022a8:	2300      	moveq	r3, #0
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	e00b      	b.n	80022c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	43da      	mvns	r2, r3
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	4013      	ands	r3, r2
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	bf14      	ite	ne
 80022c0:	2301      	movne	r3, #1
 80022c2:	2300      	moveq	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d18d      	bne.n	80021e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022e0:	e02d      	b.n	800233e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 f878 	bl	80023d8 <I2C_IsAcknowledgeFailed>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e02d      	b.n	800234e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022f8:	d021      	beq.n	800233e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022fa:	f7fe ffd7 	bl	80012ac <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	429a      	cmp	r2, r3
 8002308:	d302      	bcc.n	8002310 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d116      	bne.n	800233e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2220      	movs	r2, #32
 800231a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f043 0220 	orr.w	r2, r3, #32
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e007      	b.n	800234e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002348:	2b80      	cmp	r3, #128	; 0x80
 800234a:	d1ca      	bne.n	80022e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002362:	e02d      	b.n	80023c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 f837 	bl	80023d8 <I2C_IsAcknowledgeFailed>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e02d      	b.n	80023d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800237a:	d021      	beq.n	80023c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800237c:	f7fe ff96 	bl	80012ac <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	429a      	cmp	r2, r3
 800238a:	d302      	bcc.n	8002392 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d116      	bne.n	80023c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2220      	movs	r2, #32
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	f043 0220 	orr.w	r2, r3, #32
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e007      	b.n	80023d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d1ca      	bne.n	8002364 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ee:	d11b      	bne.n	8002428 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	f043 0204 	orr.w	r2, r3, #4
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002436:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002438:	b08f      	sub	sp, #60	; 0x3c
 800243a:	af0a      	add	r7, sp, #40	; 0x28
 800243c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e10f      	b.n	8002668 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d106      	bne.n	8002468 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f005 fbf6 	bl	8007c54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2203      	movs	r2, #3
 800246c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002478:	2b00      	cmp	r3, #0
 800247a:	d102      	bne.n	8002482 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f002 fa83 	bl	8004992 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	603b      	str	r3, [r7, #0]
 8002492:	687e      	ldr	r6, [r7, #4]
 8002494:	466d      	mov	r5, sp
 8002496:	f106 0410 	add.w	r4, r6, #16
 800249a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800249c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800249e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80024aa:	1d33      	adds	r3, r6, #4
 80024ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024ae:	6838      	ldr	r0, [r7, #0]
 80024b0:	f002 f95a 	bl	8004768 <USB_CoreInit>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2202      	movs	r2, #2
 80024be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e0d0      	b.n	8002668 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2100      	movs	r1, #0
 80024cc:	4618      	mov	r0, r3
 80024ce:	f002 fa71 	bl	80049b4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024d2:	2300      	movs	r3, #0
 80024d4:	73fb      	strb	r3, [r7, #15]
 80024d6:	e04a      	b.n	800256e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024d8:	7bfa      	ldrb	r2, [r7, #15]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	333d      	adds	r3, #61	; 0x3d
 80024e8:	2201      	movs	r2, #1
 80024ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024ec:	7bfa      	ldrb	r2, [r7, #15]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	333c      	adds	r3, #60	; 0x3c
 80024fc:	7bfa      	ldrb	r2, [r7, #15]
 80024fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002500:	7bfa      	ldrb	r2, [r7, #15]
 8002502:	7bfb      	ldrb	r3, [r7, #15]
 8002504:	b298      	uxth	r0, r3
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	3342      	adds	r3, #66	; 0x42
 8002514:	4602      	mov	r2, r0
 8002516:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002518:	7bfa      	ldrb	r2, [r7, #15]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	333f      	adds	r3, #63	; 0x3f
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800252c:	7bfa      	ldrb	r2, [r7, #15]
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	1a9b      	subs	r3, r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	3344      	adds	r3, #68	; 0x44
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002540:	7bfa      	ldrb	r2, [r7, #15]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	1a9b      	subs	r3, r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	3348      	adds	r3, #72	; 0x48
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002554:	7bfa      	ldrb	r2, [r7, #15]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	3350      	adds	r3, #80	; 0x50
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002568:	7bfb      	ldrb	r3, [r7, #15]
 800256a:	3301      	adds	r3, #1
 800256c:	73fb      	strb	r3, [r7, #15]
 800256e:	7bfa      	ldrb	r2, [r7, #15]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	429a      	cmp	r2, r3
 8002576:	d3af      	bcc.n	80024d8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002578:	2300      	movs	r3, #0
 800257a:	73fb      	strb	r3, [r7, #15]
 800257c:	e044      	b.n	8002608 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800257e:	7bfa      	ldrb	r2, [r7, #15]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	1a9b      	subs	r3, r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002594:	7bfa      	ldrb	r2, [r7, #15]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80025a6:	7bfa      	ldrb	r2, [r7, #15]
 80025a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025aa:	7bfa      	ldrb	r2, [r7, #15]
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	1a9b      	subs	r3, r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025c0:	7bfa      	ldrb	r2, [r7, #15]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	1a9b      	subs	r3, r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025d6:	7bfa      	ldrb	r2, [r7, #15]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	1a9b      	subs	r3, r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	3301      	adds	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
 8002608:	7bfa      	ldrb	r2, [r7, #15]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	429a      	cmp	r2, r3
 8002610:	d3b5      	bcc.n	800257e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	603b      	str	r3, [r7, #0]
 8002618:	687e      	ldr	r6, [r7, #4]
 800261a:	466d      	mov	r5, sp
 800261c:	f106 0410 	add.w	r4, r6, #16
 8002620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002622:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002628:	e894 0003 	ldmia.w	r4, {r0, r1}
 800262c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002630:	1d33      	adds	r3, r6, #4
 8002632:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002634:	6838      	ldr	r0, [r7, #0]
 8002636:	f002 fa09 	bl	8004a4c <USB_DevInit>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e00d      	b.n	8002668 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f003 fa85 	bl	8005b70 <USB_DevDisconnect>

  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002670 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_PCD_Start+0x1c>
 8002688:	2302      	movs	r3, #2
 800268a:	e020      	b.n	80026ce <HAL_PCD_Start+0x5e>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	2b01      	cmp	r3, #1
 800269a:	d109      	bne.n	80026b0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d005      	beq.n	80026b0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f002 f95b 	bl	8004970 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f003 fa35 	bl	8005b2e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026d6:	b590      	push	{r4, r7, lr}
 80026d8:	b08d      	sub	sp, #52	; 0x34
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f003 faf3 	bl	8005cd8 <USB_GetMode>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f040 839d 	bne.w	8002e34 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f003 fa57 	bl	8005bb2 <USB_ReadInterrupts>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 8393 	beq.w	8002e32 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f003 fa4e 	bl	8005bb2 <USB_ReadInterrupts>
 8002716:	4603      	mov	r3, r0
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b02      	cmp	r3, #2
 800271e:	d107      	bne.n	8002730 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695a      	ldr	r2, [r3, #20]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f002 0202 	and.w	r2, r2, #2
 800272e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f003 fa3c 	bl	8005bb2 <USB_ReadInterrupts>
 800273a:	4603      	mov	r3, r0
 800273c:	f003 0310 	and.w	r3, r3, #16
 8002740:	2b10      	cmp	r3, #16
 8002742:	d161      	bne.n	8002808 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699a      	ldr	r2, [r3, #24]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0210 	bic.w	r2, r2, #16
 8002752:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	f003 020f 	and.w	r2, r3, #15
 8002760:	4613      	mov	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	4413      	add	r3, r2
 8002770:	3304      	adds	r3, #4
 8002772:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	0c5b      	lsrs	r3, r3, #17
 8002778:	f003 030f 	and.w	r3, r3, #15
 800277c:	2b02      	cmp	r3, #2
 800277e:	d124      	bne.n	80027ca <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d035      	beq.n	80027f8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	091b      	lsrs	r3, r3, #4
 8002794:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002796:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800279a:	b29b      	uxth	r3, r3
 800279c:	461a      	mov	r2, r3
 800279e:	6a38      	ldr	r0, [r7, #32]
 80027a0:	f003 f873 	bl	800588a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	091b      	lsrs	r3, r3, #4
 80027ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027b0:	441a      	add	r2, r3
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	699a      	ldr	r2, [r3, #24]
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	091b      	lsrs	r3, r3, #4
 80027be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027c2:	441a      	add	r2, r3
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	619a      	str	r2, [r3, #24]
 80027c8:	e016      	b.n	80027f8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	0c5b      	lsrs	r3, r3, #17
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	2b06      	cmp	r3, #6
 80027d4:	d110      	bne.n	80027f8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80027dc:	2208      	movs	r2, #8
 80027de:	4619      	mov	r1, r3
 80027e0:	6a38      	ldr	r0, [r7, #32]
 80027e2:	f003 f852 	bl	800588a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	699a      	ldr	r2, [r3, #24]
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027f2:	441a      	add	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	699a      	ldr	r2, [r3, #24]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0210 	orr.w	r2, r2, #16
 8002806:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f003 f9d0 	bl	8005bb2 <USB_ReadInterrupts>
 8002812:	4603      	mov	r3, r0
 8002814:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002818:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800281c:	d16e      	bne.n	80028fc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f003 f9d6 	bl	8005bd8 <USB_ReadDevAllOutEpInterrupt>
 800282c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800282e:	e062      	b.n	80028f6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d057      	beq.n	80028ea <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f003 f9fb 	bl	8005c40 <USB_ReadDevOutEPInterrupt>
 800284a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00c      	beq.n	8002870 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	4413      	add	r3, r2
 800285e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002862:	461a      	mov	r2, r3
 8002864:	2301      	movs	r3, #1
 8002866:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 fdb0 	bl	80033d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00c      	beq.n	8002894 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	4413      	add	r3, r2
 8002882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002886:	461a      	mov	r2, r3
 8002888:	2308      	movs	r3, #8
 800288a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800288c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 feaa 	bl	80035e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	2b00      	cmp	r3, #0
 800289c:	d008      	beq.n	80028b0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	015a      	lsls	r2, r3, #5
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	4413      	add	r3, r2
 80028a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028aa:	461a      	mov	r2, r3
 80028ac:	2310      	movs	r3, #16
 80028ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	f003 0320 	and.w	r3, r3, #32
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d008      	beq.n	80028cc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c6:	461a      	mov	r2, r3
 80028c8:	2320      	movs	r3, #32
 80028ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d009      	beq.n	80028ea <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e2:	461a      	mov	r2, r3
 80028e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028e8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	3301      	adds	r3, #1
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f2:	085b      	lsrs	r3, r3, #1
 80028f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d199      	bne.n	8002830 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f003 f956 	bl	8005bb2 <USB_ReadInterrupts>
 8002906:	4603      	mov	r3, r0
 8002908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800290c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002910:	f040 80c0 	bne.w	8002a94 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f003 f977 	bl	8005c0c <USB_ReadDevAllInEpInterrupt>
 800291e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002920:	2300      	movs	r3, #0
 8002922:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002924:	e0b2      	b.n	8002a8c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 80a7 	beq.w	8002a80 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f003 f99d 	bl	8005c7c <USB_ReadDevInEPInterrupt>
 8002942:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d057      	beq.n	80029fe <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	2201      	movs	r2, #1
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	43db      	mvns	r3, r3
 8002968:	69f9      	ldr	r1, [r7, #28]
 800296a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800296e:	4013      	ands	r3, r2
 8002970:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	4413      	add	r3, r2
 800297a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800297e:	461a      	mov	r2, r3
 8002980:	2301      	movs	r3, #1
 8002982:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d132      	bne.n	80029f2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002990:	4613      	mov	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	3348      	adds	r3, #72	; 0x48
 800299c:	6819      	ldr	r1, [r3, #0]
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	1a9b      	subs	r3, r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4403      	add	r3, r0
 80029ac:	3344      	adds	r3, #68	; 0x44
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4419      	add	r1, r3
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b6:	4613      	mov	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	1a9b      	subs	r3, r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4403      	add	r3, r0
 80029c0:	3348      	adds	r3, #72	; 0x48
 80029c2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d113      	bne.n	80029f2 <HAL_PCD_IRQHandler+0x31c>
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ce:	4613      	mov	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	1a9b      	subs	r3, r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	3350      	adds	r3, #80	; 0x50
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d108      	bne.n	80029f2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029ea:	461a      	mov	r2, r3
 80029ec:	2101      	movs	r1, #1
 80029ee:	f003 f9a5 	bl	8005d3c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	4619      	mov	r1, r3
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f005 f9ac 	bl	8007d56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a14:	461a      	mov	r2, r3
 8002a16:	2308      	movs	r3, #8
 8002a18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	015a      	lsls	r2, r3, #5
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a30:	461a      	mov	r2, r3
 8002a32:	2310      	movs	r3, #16
 8002a34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	2340      	movs	r3, #64	; 0x40
 8002a50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a68:	461a      	mov	r2, r3
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 fc1b 	bl	80032b6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	3301      	adds	r3, #1
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a88:	085b      	lsrs	r3, r3, #1
 8002a8a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f47f af49 	bne.w	8002926 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f003 f88a 	bl	8005bb2 <USB_ReadInterrupts>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002aa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002aa8:	d122      	bne.n	8002af0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ab8:	f023 0301 	bic.w	r3, r3, #1
 8002abc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d108      	bne.n	8002ada <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 fe26 	bl	8003724 <HAL_PCDEx_LPM_Callback>
 8002ad8:	e002      	b.n	8002ae0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f005 f9a8 	bl	8007e30 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695a      	ldr	r2, [r3, #20]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002aee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f003 f85c 	bl	8005bb2 <USB_ReadInterrupts>
 8002afa:	4603      	mov	r3, r0
 8002afc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b04:	d112      	bne.n	8002b2c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d102      	bne.n	8002b1c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f005 f964 	bl	8007de4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695a      	ldr	r2, [r3, #20]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002b2a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f003 f83e 	bl	8005bb2 <USB_ReadInterrupts>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b40:	f040 80c7 	bne.w	8002cd2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	69fa      	ldr	r2, [r7, #28]
 8002b4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b52:	f023 0301 	bic.w	r3, r3, #1
 8002b56:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2110      	movs	r1, #16
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f002 f8d8 	bl	8004d14 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b64:	2300      	movs	r3, #0
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b68:	e056      	b.n	8002c18 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6c:	015a      	lsls	r2, r3, #5
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	4413      	add	r3, r2
 8002b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b76:	461a      	mov	r2, r3
 8002b78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b7c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b8e:	0151      	lsls	r1, r2, #5
 8002b90:	69fa      	ldr	r2, [r7, #28]
 8002b92:	440a      	add	r2, r1
 8002b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b9c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba0:	015a      	lsls	r2, r3, #5
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bae:	0151      	lsls	r1, r2, #5
 8002bb0:	69fa      	ldr	r2, [r7, #28]
 8002bb2:	440a      	add	r2, r1
 8002bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002bb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002bbc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002bd0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002be2:	0151      	lsls	r1, r2, #5
 8002be4:	69fa      	ldr	r2, [r7, #28]
 8002be6:	440a      	add	r2, r1
 8002be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002bec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002bf0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf4:	015a      	lsls	r2, r3, #5
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c02:	0151      	lsls	r1, r2, #5
 8002c04:	69fa      	ldr	r2, [r7, #28]
 8002c06:	440a      	add	r2, r1
 8002c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c10:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c14:	3301      	adds	r3, #1
 8002c16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d3a3      	bcc.n	8002b6a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	69fa      	ldr	r2, [r7, #28]
 8002c2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c30:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002c34:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d016      	beq.n	8002c6c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c4e:	f043 030b 	orr.w	r3, r3, #11
 8002c52:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c64:	f043 030b 	orr.w	r3, r3, #11
 8002c68:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6a:	e015      	b.n	8002c98 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c7e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002c82:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	69fa      	ldr	r2, [r7, #28]
 8002c8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c92:	f043 030b 	orr.w	r3, r3, #11
 8002c96:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ca6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002caa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6818      	ldr	r0, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	f003 f83d 	bl	8005d3c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695a      	ldr	r2, [r3, #20]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002cd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f002 ff6b 	bl	8005bb2 <USB_ReadInterrupts>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ce6:	d124      	bne.n	8002d32 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f003 f801 	bl	8005cf4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f002 f869 	bl	8004dce <USB_GetDevSpeed>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	461a      	mov	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681c      	ldr	r4, [r3, #0]
 8002d08:	f001 f92c 	bl	8003f64 <HAL_RCC_GetHCLKFreq>
 8002d0c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	461a      	mov	r2, r3
 8002d16:	4620      	mov	r0, r4
 8002d18:	f001 fd88 	bl	800482c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f005 f842 	bl	8007da6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695a      	ldr	r2, [r3, #20]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002d30:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f002 ff3b 	bl	8005bb2 <USB_ReadInterrupts>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d10a      	bne.n	8002d5c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f005 f81f 	bl	8007d8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695a      	ldr	r2, [r3, #20]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f002 0208 	and.w	r2, r2, #8
 8002d5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f002 ff26 	bl	8005bb2 <USB_ReadInterrupts>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d70:	d10f      	bne.n	8002d92 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f005 f877 	bl	8007e70 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695a      	ldr	r2, [r3, #20]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002d90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f002 ff0b 	bl	8005bb2 <USB_ReadInterrupts>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002da6:	d10f      	bne.n	8002dc8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	4619      	mov	r1, r3
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f005 f84a 	bl	8007e4c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f002 fef0 	bl	8005bb2 <USB_ReadInterrupts>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ddc:	d10a      	bne.n	8002df4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f005 f858 	bl	8007e94 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695a      	ldr	r2, [r3, #20]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002df2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f002 feda 	bl	8005bb2 <USB_ReadInterrupts>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d115      	bne.n	8002e34 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f005 f848 	bl	8007eb0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6859      	ldr	r1, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	605a      	str	r2, [r3, #4]
 8002e30:	e000      	b.n	8002e34 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002e32:	bf00      	nop
    }
  }
}
 8002e34:	3734      	adds	r7, #52	; 0x34
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd90      	pop	{r4, r7, pc}

08002e3a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_PCD_SetAddress+0x1a>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e013      	b.n	8002e7c <HAL_PCD_SetAddress+0x42>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	78fa      	ldrb	r2, [r7, #3]
 8002e60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	78fa      	ldrb	r2, [r7, #3]
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f002 fe38 	bl	8005ae2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	4608      	mov	r0, r1
 8002e8e:	4611      	mov	r1, r2
 8002e90:	461a      	mov	r2, r3
 8002e92:	4603      	mov	r3, r0
 8002e94:	70fb      	strb	r3, [r7, #3]
 8002e96:	460b      	mov	r3, r1
 8002e98:	803b      	strh	r3, [r7, #0]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ea2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	da0f      	bge.n	8002eca <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	f003 020f 	and.w	r2, r3, #15
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	1a9b      	subs	r3, r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	3338      	adds	r3, #56	; 0x38
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	705a      	strb	r2, [r3, #1]
 8002ec8:	e00f      	b.n	8002eea <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eca:	78fb      	ldrb	r3, [r7, #3]
 8002ecc:	f003 020f 	and.w	r2, r3, #15
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	4413      	add	r3, r2
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002eea:	78fb      	ldrb	r3, [r7, #3]
 8002eec:	f003 030f 	and.w	r3, r3, #15
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ef6:	883a      	ldrh	r2, [r7, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	78ba      	ldrb	r2, [r7, #2]
 8002f00:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	785b      	ldrb	r3, [r3, #1]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d004      	beq.n	8002f14 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f14:	78bb      	ldrb	r3, [r7, #2]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d102      	bne.n	8002f20 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_PCD_EP_Open+0xaa>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e00e      	b.n	8002f4c <HAL_PCD_EP_Open+0xc8>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68f9      	ldr	r1, [r7, #12]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f001 ff6b 	bl	8004e18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002f4a:	7afb      	ldrb	r3, [r7, #11]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	da0f      	bge.n	8002f88 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	f003 020f 	and.w	r2, r3, #15
 8002f6e:	4613      	mov	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	1a9b      	subs	r3, r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	3338      	adds	r3, #56	; 0x38
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2201      	movs	r2, #1
 8002f84:	705a      	strb	r2, [r3, #1]
 8002f86:	e00f      	b.n	8002fa8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	f003 020f 	and.w	r2, r3, #15
 8002f8e:	4613      	mov	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002fa8:	78fb      	ldrb	r3, [r7, #3]
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d101      	bne.n	8002fc2 <HAL_PCD_EP_Close+0x6e>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e00e      	b.n	8002fe0 <HAL_PCD_EP_Close+0x8c>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68f9      	ldr	r1, [r7, #12]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f001 ffa9 	bl	8004f28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	607a      	str	r2, [r7, #4]
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ff8:	7afb      	ldrb	r3, [r7, #11]
 8002ffa:	f003 020f 	and.w	r2, r3, #15
 8002ffe:	4613      	mov	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	1a9b      	subs	r3, r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	4413      	add	r3, r2
 800300e:	3304      	adds	r3, #4
 8003010:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2200      	movs	r2, #0
 8003022:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	2200      	movs	r2, #0
 8003028:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800302a:	7afb      	ldrb	r3, [r7, #11]
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	b2da      	uxtb	r2, r3
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d102      	bne.n	8003044 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003044:	7afb      	ldrb	r3, [r7, #11]
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	2b00      	cmp	r3, #0
 800304c:	d109      	bne.n	8003062 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	461a      	mov	r2, r3
 800305a:	6979      	ldr	r1, [r7, #20]
 800305c:	f002 fa84 	bl	8005568 <USB_EP0StartXfer>
 8003060:	e008      	b.n	8003074 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	b2db      	uxtb	r3, r3
 800306c:	461a      	mov	r2, r3
 800306e:	6979      	ldr	r1, [r7, #20]
 8003070:	f002 f836 	bl	80050e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
 8003086:	460b      	mov	r3, r1
 8003088:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800308a:	78fb      	ldrb	r3, [r7, #3]
 800308c:	f003 020f 	and.w	r2, r3, #15
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80030a0:	681b      	ldr	r3, [r3, #0]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b086      	sub	sp, #24
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	607a      	str	r2, [r7, #4]
 80030b8:	603b      	str	r3, [r7, #0]
 80030ba:	460b      	mov	r3, r1
 80030bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030be:	7afb      	ldrb	r3, [r7, #11]
 80030c0:	f003 020f 	and.w	r2, r3, #15
 80030c4:	4613      	mov	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	1a9b      	subs	r3, r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	3338      	adds	r3, #56	; 0x38
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4413      	add	r3, r2
 80030d2:	3304      	adds	r3, #4
 80030d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2200      	movs	r2, #0
 80030e6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	2201      	movs	r2, #1
 80030ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030ee:	7afb      	ldrb	r3, [r7, #11]
 80030f0:	f003 030f 	and.w	r3, r3, #15
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d102      	bne.n	8003108 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003108:	7afb      	ldrb	r3, [r7, #11]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	2b00      	cmp	r3, #0
 8003110:	d109      	bne.n	8003126 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6818      	ldr	r0, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	461a      	mov	r2, r3
 800311e:	6979      	ldr	r1, [r7, #20]
 8003120:	f002 fa22 	bl	8005568 <USB_EP0StartXfer>
 8003124:	e008      	b.n	8003138 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	461a      	mov	r2, r3
 8003132:	6979      	ldr	r1, [r7, #20]
 8003134:	f001 ffd4 	bl	80050e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b084      	sub	sp, #16
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	460b      	mov	r3, r1
 800314c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	f003 020f 	and.w	r2, r3, #15
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	429a      	cmp	r2, r3
 800315a:	d901      	bls.n	8003160 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e050      	b.n	8003202 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003160:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003164:	2b00      	cmp	r3, #0
 8003166:	da0f      	bge.n	8003188 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	f003 020f 	and.w	r2, r3, #15
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	3338      	adds	r3, #56	; 0x38
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	4413      	add	r3, r2
 800317c:	3304      	adds	r3, #4
 800317e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2201      	movs	r2, #1
 8003184:	705a      	strb	r2, [r3, #1]
 8003186:	e00d      	b.n	80031a4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	4413      	add	r3, r2
 800319a:	3304      	adds	r3, #4
 800319c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2201      	movs	r2, #1
 80031a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031aa:	78fb      	ldrb	r3, [r7, #3]
 80031ac:	f003 030f 	and.w	r3, r3, #15
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_PCD_EP_SetStall+0x82>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e01e      	b.n	8003202 <HAL_PCD_EP_SetStall+0xc0>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68f9      	ldr	r1, [r7, #12]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f002 fbb1 	bl	800593a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10a      	bne.n	80031f8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6818      	ldr	r0, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	b2d9      	uxtb	r1, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031f2:	461a      	mov	r2, r3
 80031f4:	f002 fda2 	bl	8005d3c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	460b      	mov	r3, r1
 8003214:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003216:	78fb      	ldrb	r3, [r7, #3]
 8003218:	f003 020f 	and.w	r2, r3, #15
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	429a      	cmp	r2, r3
 8003222:	d901      	bls.n	8003228 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e042      	b.n	80032ae <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003228:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800322c:	2b00      	cmp	r3, #0
 800322e:	da0f      	bge.n	8003250 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	f003 020f 	and.w	r2, r3, #15
 8003236:	4613      	mov	r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	3338      	adds	r3, #56	; 0x38
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	4413      	add	r3, r2
 8003244:	3304      	adds	r3, #4
 8003246:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2201      	movs	r2, #1
 800324c:	705a      	strb	r2, [r3, #1]
 800324e:	e00f      	b.n	8003270 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003250:	78fb      	ldrb	r3, [r7, #3]
 8003252:	f003 020f 	and.w	r2, r3, #15
 8003256:	4613      	mov	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	4413      	add	r3, r2
 8003266:	3304      	adds	r3, #4
 8003268:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003276:	78fb      	ldrb	r3, [r7, #3]
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	b2da      	uxtb	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_PCD_EP_ClrStall+0x86>
 800328c:	2302      	movs	r3, #2
 800328e:	e00e      	b.n	80032ae <HAL_PCD_EP_ClrStall+0xa4>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68f9      	ldr	r1, [r7, #12]
 800329e:	4618      	mov	r0, r3
 80032a0:	f002 fbb9 	bl	8005a16 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b08a      	sub	sp, #40	; 0x28
 80032ba:	af02      	add	r7, sp, #8
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	4613      	mov	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	1a9b      	subs	r3, r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	3338      	adds	r3, #56	; 0x38
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	4413      	add	r3, r2
 80032da:	3304      	adds	r3, #4
 80032dc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	699a      	ldr	r2, [r3, #24]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d901      	bls.n	80032ee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e06c      	b.n	80033c8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	69fa      	ldr	r2, [r7, #28]
 8003300:	429a      	cmp	r2, r3
 8003302:	d902      	bls.n	800330a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	3303      	adds	r3, #3
 800330e:	089b      	lsrs	r3, r3, #2
 8003310:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003312:	e02b      	b.n	800336c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	695a      	ldr	r2, [r3, #20]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	69fa      	ldr	r2, [r7, #28]
 8003326:	429a      	cmp	r2, r3
 8003328:	d902      	bls.n	8003330 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	3303      	adds	r3, #3
 8003334:	089b      	lsrs	r3, r3, #2
 8003336:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	68d9      	ldr	r1, [r3, #12]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	b2da      	uxtb	r2, r3
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003348:	b2db      	uxtb	r3, r3
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	4603      	mov	r3, r0
 800334e:	6978      	ldr	r0, [r7, #20]
 8003350:	f002 fa5d 	bl	800580e <USB_WritePacket>

    ep->xfer_buff  += len;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	441a      	add	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	699a      	ldr	r2, [r3, #24]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	441a      	add	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4413      	add	r3, r2
 8003374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	b29b      	uxth	r3, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	429a      	cmp	r2, r3
 8003380:	d809      	bhi.n	8003396 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	699a      	ldr	r2, [r3, #24]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800338a:	429a      	cmp	r2, r3
 800338c:	d203      	bcs.n	8003396 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1be      	bne.n	8003314 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	695a      	ldr	r2, [r3, #20]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d811      	bhi.n	80033c6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	f003 030f 	and.w	r3, r3, #15
 80033a8:	2201      	movs	r2, #1
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	43db      	mvns	r3, r3
 80033bc:	6939      	ldr	r1, [r7, #16]
 80033be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033c2:	4013      	ands	r3, r2
 80033c4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3720      	adds	r7, #32
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	333c      	adds	r3, #60	; 0x3c
 80033e8:	3304      	adds	r3, #4
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	2b01      	cmp	r3, #1
 8003404:	f040 80a0 	bne.w	8003548 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d015      	beq.n	800343e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4a72      	ldr	r2, [pc, #456]	; (80035e0 <PCD_EP_OutXfrComplete_int+0x210>)
 8003416:	4293      	cmp	r3, r2
 8003418:	f240 80dd 	bls.w	80035d6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 80d7 	beq.w	80035d6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	4413      	add	r3, r2
 8003430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003434:	461a      	mov	r2, r3
 8003436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800343a:	6093      	str	r3, [r2, #8]
 800343c:	e0cb      	b.n	80035d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	2b00      	cmp	r3, #0
 8003446:	d009      	beq.n	800345c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4413      	add	r3, r2
 8003450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003454:	461a      	mov	r2, r3
 8003456:	2320      	movs	r3, #32
 8003458:	6093      	str	r3, [r2, #8]
 800345a:	e0bc      	b.n	80035d6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003462:	2b00      	cmp	r3, #0
 8003464:	f040 80b7 	bne.w	80035d6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4a5d      	ldr	r2, [pc, #372]	; (80035e0 <PCD_EP_OutXfrComplete_int+0x210>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d90f      	bls.n	8003490 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	015a      	lsls	r2, r3, #5
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4413      	add	r3, r2
 8003482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003486:	461a      	mov	r2, r3
 8003488:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800348c:	6093      	str	r3, [r2, #8]
 800348e:	e0a2      	b.n	80035d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	4613      	mov	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034a2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	0159      	lsls	r1, r3, #5
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	440b      	add	r3, r1
 80034ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80034b6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	4613      	mov	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4403      	add	r3, r0
 80034c6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80034ca:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	4613      	mov	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	1a9b      	subs	r3, r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034de:	6819      	ldr	r1, [r3, #0]
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	4613      	mov	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	1a9b      	subs	r3, r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4403      	add	r3, r0
 80034ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4419      	add	r1, r3
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	4613      	mov	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	1a9b      	subs	r3, r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4403      	add	r3, r0
 8003504:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003508:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d114      	bne.n	800353a <PCD_EP_OutXfrComplete_int+0x16a>
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	4613      	mov	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d108      	bne.n	800353a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6818      	ldr	r0, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003532:	461a      	mov	r2, r3
 8003534:	2101      	movs	r1, #1
 8003536:	f002 fc01 	bl	8005d3c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	b2db      	uxtb	r3, r3
 800353e:	4619      	mov	r1, r3
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f004 fbed 	bl	8007d20 <HAL_PCD_DataOutStageCallback>
 8003546:	e046      	b.n	80035d6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4a26      	ldr	r2, [pc, #152]	; (80035e4 <PCD_EP_OutXfrComplete_int+0x214>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d124      	bne.n	800359a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	4413      	add	r3, r2
 8003562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003566:	461a      	mov	r2, r3
 8003568:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800356c:	6093      	str	r3, [r2, #8]
 800356e:	e032      	b.n	80035d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b00      	cmp	r3, #0
 8003578:	d008      	beq.n	800358c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4413      	add	r3, r2
 8003582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003586:	461a      	mov	r2, r3
 8003588:	2320      	movs	r3, #32
 800358a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	b2db      	uxtb	r3, r3
 8003590:	4619      	mov	r1, r3
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f004 fbc4 	bl	8007d20 <HAL_PCD_DataOutStageCallback>
 8003598:	e01d      	b.n	80035d6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d114      	bne.n	80035ca <PCD_EP_OutXfrComplete_int+0x1fa>
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	4613      	mov	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	1a9b      	subs	r3, r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d108      	bne.n	80035ca <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6818      	ldr	r0, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035c2:	461a      	mov	r2, r3
 80035c4:	2100      	movs	r1, #0
 80035c6:	f002 fbb9 	bl	8005d3c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	4619      	mov	r1, r3
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f004 fba5 	bl	8007d20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	4f54300a 	.word	0x4f54300a
 80035e4:	4f54310a 	.word	0x4f54310a

080035e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	333c      	adds	r3, #60	; 0x3c
 8003600:	3304      	adds	r3, #4
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	015a      	lsls	r2, r3, #5
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	4413      	add	r3, r2
 800360e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	4a15      	ldr	r2, [pc, #84]	; (8003670 <PCD_EP_OutSetupPacket_int+0x88>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d90e      	bls.n	800363c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003624:	2b00      	cmp	r3, #0
 8003626:	d009      	beq.n	800363c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4413      	add	r3, r2
 8003630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003634:	461a      	mov	r2, r3
 8003636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800363a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f004 fb5d 	bl	8007cfc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4a0a      	ldr	r2, [pc, #40]	; (8003670 <PCD_EP_OutSetupPacket_int+0x88>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d90c      	bls.n	8003664 <PCD_EP_OutSetupPacket_int+0x7c>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d108      	bne.n	8003664 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800365c:	461a      	mov	r2, r3
 800365e:	2101      	movs	r1, #1
 8003660:	f002 fb6c 	bl	8005d3c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	4f54300a 	.word	0x4f54300a

08003674 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	70fb      	strb	r3, [r7, #3]
 8003680:	4613      	mov	r3, r2
 8003682:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800368c:	78fb      	ldrb	r3, [r7, #3]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d107      	bne.n	80036a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003692:	883b      	ldrh	r3, [r7, #0]
 8003694:	0419      	lsls	r1, r3, #16
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	430a      	orrs	r2, r1
 800369e:	629a      	str	r2, [r3, #40]	; 0x28
 80036a0:	e028      	b.n	80036f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a8:	0c1b      	lsrs	r3, r3, #16
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	4413      	add	r3, r2
 80036ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036b0:	2300      	movs	r3, #0
 80036b2:	73fb      	strb	r3, [r7, #15]
 80036b4:	e00d      	b.n	80036d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	7bfb      	ldrb	r3, [r7, #15]
 80036bc:	3340      	adds	r3, #64	; 0x40
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	0c1b      	lsrs	r3, r3, #16
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	4413      	add	r3, r2
 80036ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
 80036ce:	3301      	adds	r3, #1
 80036d0:	73fb      	strb	r3, [r7, #15]
 80036d2:	7bfa      	ldrb	r2, [r7, #15]
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	429a      	cmp	r2, r3
 80036da:	d3ec      	bcc.n	80036b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036dc:	883b      	ldrh	r3, [r7, #0]
 80036de:	0418      	lsls	r0, r3, #16
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6819      	ldr	r1, [r3, #0]
 80036e4:	78fb      	ldrb	r3, [r7, #3]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	4302      	orrs	r2, r0
 80036ec:	3340      	adds	r3, #64	; 0x40
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	460b      	mov	r3, r1
 800370c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	887a      	ldrh	r2, [r7, #2]
 8003714:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e264      	b.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d075      	beq.n	8003846 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800375a:	4ba3      	ldr	r3, [pc, #652]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 030c 	and.w	r3, r3, #12
 8003762:	2b04      	cmp	r3, #4
 8003764:	d00c      	beq.n	8003780 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003766:	4ba0      	ldr	r3, [pc, #640]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800376e:	2b08      	cmp	r3, #8
 8003770:	d112      	bne.n	8003798 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003772:	4b9d      	ldr	r3, [pc, #628]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800377e:	d10b      	bne.n	8003798 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003780:	4b99      	ldr	r3, [pc, #612]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d05b      	beq.n	8003844 <HAL_RCC_OscConfig+0x108>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d157      	bne.n	8003844 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e23f      	b.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a0:	d106      	bne.n	80037b0 <HAL_RCC_OscConfig+0x74>
 80037a2:	4b91      	ldr	r3, [pc, #580]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a90      	ldr	r2, [pc, #576]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 80037a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	e01d      	b.n	80037ec <HAL_RCC_OscConfig+0xb0>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037b8:	d10c      	bne.n	80037d4 <HAL_RCC_OscConfig+0x98>
 80037ba:	4b8b      	ldr	r3, [pc, #556]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a8a      	ldr	r2, [pc, #552]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 80037c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	4b88      	ldr	r3, [pc, #544]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a87      	ldr	r2, [pc, #540]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 80037cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	e00b      	b.n	80037ec <HAL_RCC_OscConfig+0xb0>
 80037d4:	4b84      	ldr	r3, [pc, #528]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a83      	ldr	r2, [pc, #524]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 80037da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	4b81      	ldr	r3, [pc, #516]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a80      	ldr	r2, [pc, #512]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 80037e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d013      	beq.n	800381c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f4:	f7fd fd5a 	bl	80012ac <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037fc:	f7fd fd56 	bl	80012ac <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b64      	cmp	r3, #100	; 0x64
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e204      	b.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380e:	4b76      	ldr	r3, [pc, #472]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f0      	beq.n	80037fc <HAL_RCC_OscConfig+0xc0>
 800381a:	e014      	b.n	8003846 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7fd fd46 	bl	80012ac <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003824:	f7fd fd42 	bl	80012ac <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b64      	cmp	r3, #100	; 0x64
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e1f0      	b.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003836:	4b6c      	ldr	r3, [pc, #432]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f0      	bne.n	8003824 <HAL_RCC_OscConfig+0xe8>
 8003842:	e000      	b.n	8003846 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d063      	beq.n	800391a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003852:	4b65      	ldr	r3, [pc, #404]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 030c 	and.w	r3, r3, #12
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00b      	beq.n	8003876 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800385e:	4b62      	ldr	r3, [pc, #392]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003866:	2b08      	cmp	r3, #8
 8003868:	d11c      	bne.n	80038a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800386a:	4b5f      	ldr	r3, [pc, #380]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d116      	bne.n	80038a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003876:	4b5c      	ldr	r3, [pc, #368]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <HAL_RCC_OscConfig+0x152>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d001      	beq.n	800388e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e1c4      	b.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388e:	4b56      	ldr	r3, [pc, #344]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	4952      	ldr	r1, [pc, #328]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a2:	e03a      	b.n	800391a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d020      	beq.n	80038ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ac:	4b4f      	ldr	r3, [pc, #316]	; (80039ec <HAL_RCC_OscConfig+0x2b0>)
 80038ae:	2201      	movs	r2, #1
 80038b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b2:	f7fd fcfb 	bl	80012ac <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ba:	f7fd fcf7 	bl	80012ac <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e1a5      	b.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038cc:	4b46      	ldr	r3, [pc, #280]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0f0      	beq.n	80038ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d8:	4b43      	ldr	r3, [pc, #268]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	4940      	ldr	r1, [pc, #256]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	600b      	str	r3, [r1, #0]
 80038ec:	e015      	b.n	800391a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ee:	4b3f      	ldr	r3, [pc, #252]	; (80039ec <HAL_RCC_OscConfig+0x2b0>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f4:	f7fd fcda 	bl	80012ac <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038fc:	f7fd fcd6 	bl	80012ac <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e184      	b.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800390e:	4b36      	ldr	r3, [pc, #216]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f0      	bne.n	80038fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b00      	cmp	r3, #0
 8003924:	d030      	beq.n	8003988 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d016      	beq.n	800395c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800392e:	4b30      	ldr	r3, [pc, #192]	; (80039f0 <HAL_RCC_OscConfig+0x2b4>)
 8003930:	2201      	movs	r2, #1
 8003932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003934:	f7fd fcba 	bl	80012ac <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800393c:	f7fd fcb6 	bl	80012ac <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e164      	b.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800394e:	4b26      	ldr	r3, [pc, #152]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 8003950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0f0      	beq.n	800393c <HAL_RCC_OscConfig+0x200>
 800395a:	e015      	b.n	8003988 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800395c:	4b24      	ldr	r3, [pc, #144]	; (80039f0 <HAL_RCC_OscConfig+0x2b4>)
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003962:	f7fd fca3 	bl	80012ac <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003968:	e008      	b.n	800397c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800396a:	f7fd fc9f 	bl	80012ac <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e14d      	b.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800397c:	4b1a      	ldr	r3, [pc, #104]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 800397e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f0      	bne.n	800396a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 80a0 	beq.w	8003ad6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003996:	2300      	movs	r3, #0
 8003998:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800399a:	4b13      	ldr	r3, [pc, #76]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10f      	bne.n	80039c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	60bb      	str	r3, [r7, #8]
 80039aa:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	4a0e      	ldr	r2, [pc, #56]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b4:	6413      	str	r3, [r2, #64]	; 0x40
 80039b6:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <HAL_RCC_OscConfig+0x2ac>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039be:	60bb      	str	r3, [r7, #8]
 80039c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039c2:	2301      	movs	r3, #1
 80039c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c6:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_RCC_OscConfig+0x2b8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d121      	bne.n	8003a16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039d2:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <HAL_RCC_OscConfig+0x2b8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a07      	ldr	r2, [pc, #28]	; (80039f4 <HAL_RCC_OscConfig+0x2b8>)
 80039d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039de:	f7fd fc65 	bl	80012ac <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e4:	e011      	b.n	8003a0a <HAL_RCC_OscConfig+0x2ce>
 80039e6:	bf00      	nop
 80039e8:	40023800 	.word	0x40023800
 80039ec:	42470000 	.word	0x42470000
 80039f0:	42470e80 	.word	0x42470e80
 80039f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f8:	f7fd fc58 	bl	80012ac <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e106      	b.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0a:	4b85      	ldr	r3, [pc, #532]	; (8003c20 <HAL_RCC_OscConfig+0x4e4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0f0      	beq.n	80039f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d106      	bne.n	8003a2c <HAL_RCC_OscConfig+0x2f0>
 8003a1e:	4b81      	ldr	r3, [pc, #516]	; (8003c24 <HAL_RCC_OscConfig+0x4e8>)
 8003a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a22:	4a80      	ldr	r2, [pc, #512]	; (8003c24 <HAL_RCC_OscConfig+0x4e8>)
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	6713      	str	r3, [r2, #112]	; 0x70
 8003a2a:	e01c      	b.n	8003a66 <HAL_RCC_OscConfig+0x32a>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	2b05      	cmp	r3, #5
 8003a32:	d10c      	bne.n	8003a4e <HAL_RCC_OscConfig+0x312>
 8003a34:	4b7b      	ldr	r3, [pc, #492]	; (8003c24 <HAL_RCC_OscConfig+0x4e8>)
 8003a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a38:	4a7a      	ldr	r2, [pc, #488]	; (8003c24 <HAL_RCC_OscConfig+0x4e8>)
 8003a3a:	f043 0304 	orr.w	r3, r3, #4
 8003a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a40:	4b78      	ldr	r3, [pc, #480]	; (8003c24 <HAL_RCC_OscConfig+0x4e8>)
 8003a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a44:	4a77      	ldr	r2, [pc, #476]	; (8003c24 <HAL_RCC_OscConfig+0x4e8>)
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a4c:	e00b      	b.n	8003a66 <HAL_RCC_OscConfig+0x32a>
 8003a4e:	4b75      	ldr	r3, [pc, #468]	; (8003c24 <HAL_RCC_OscConfig+0x4e8>)
 8003a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a52:	4a74      	ldr	r2, [pc, #464]	; (8003c24 <HAL_RCC_OscConfig+0x4e8>)
 8003a54:	f023 0301 	bic.w	r3, r3, #1
 8003a58:	6713      	str	r3, [r2, #112]	; 0x70
 8003a5a:	4b72      	ldr	r3, [pc, #456]	; (8003c24 <HAL_RCC_OscConfig+0x4e8>)
 8003a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5e:	4a71      	ldr	r2, [pc, #452]	; (8003c24 <HAL_RCC_OscConfig+0x4e8>)
 8003a60:	f023 0304 	bic.w	r3, r3, #4
 8003a64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d015      	beq.n	8003a9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6e:	f7fd fc1d 	bl	80012ac <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a74:	e00a      	b.n	8003a8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a76:	f7fd fc19 	bl	80012ac <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e0c5      	b.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a8c:	4b65      	ldr	r3, [pc, #404]	; (8003c24 <HAL_RCC_OscConfig+0x4e8>)
 8003a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0ee      	beq.n	8003a76 <HAL_RCC_OscConfig+0x33a>
 8003a98:	e014      	b.n	8003ac4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9a:	f7fd fc07 	bl	80012ac <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa0:	e00a      	b.n	8003ab8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa2:	f7fd fc03 	bl	80012ac <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e0af      	b.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab8:	4b5a      	ldr	r3, [pc, #360]	; (8003c24 <HAL_RCC_OscConfig+0x4e8>)
 8003aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1ee      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ac4:	7dfb      	ldrb	r3, [r7, #23]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d105      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aca:	4b56      	ldr	r3, [pc, #344]	; (8003c24 <HAL_RCC_OscConfig+0x4e8>)
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	4a55      	ldr	r2, [pc, #340]	; (8003c24 <HAL_RCC_OscConfig+0x4e8>)
 8003ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ad4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 809b 	beq.w	8003c16 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ae0:	4b50      	ldr	r3, [pc, #320]	; (8003c24 <HAL_RCC_OscConfig+0x4e8>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 030c 	and.w	r3, r3, #12
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d05c      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d141      	bne.n	8003b78 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af4:	4b4c      	ldr	r3, [pc, #304]	; (8003c28 <HAL_RCC_OscConfig+0x4ec>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afa:	f7fd fbd7 	bl	80012ac <HAL_GetTick>
 8003afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b00:	e008      	b.n	8003b14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b02:	f7fd fbd3 	bl	80012ac <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e081      	b.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b14:	4b43      	ldr	r3, [pc, #268]	; (8003c24 <HAL_RCC_OscConfig+0x4e8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1f0      	bne.n	8003b02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	69da      	ldr	r2, [r3, #28]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	019b      	lsls	r3, r3, #6
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b36:	085b      	lsrs	r3, r3, #1
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	041b      	lsls	r3, r3, #16
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	061b      	lsls	r3, r3, #24
 8003b44:	4937      	ldr	r1, [pc, #220]	; (8003c24 <HAL_RCC_OscConfig+0x4e8>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b4a:	4b37      	ldr	r3, [pc, #220]	; (8003c28 <HAL_RCC_OscConfig+0x4ec>)
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b50:	f7fd fbac 	bl	80012ac <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b58:	f7fd fba8 	bl	80012ac <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e056      	b.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b6a:	4b2e      	ldr	r3, [pc, #184]	; (8003c24 <HAL_RCC_OscConfig+0x4e8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f0      	beq.n	8003b58 <HAL_RCC_OscConfig+0x41c>
 8003b76:	e04e      	b.n	8003c16 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b78:	4b2b      	ldr	r3, [pc, #172]	; (8003c28 <HAL_RCC_OscConfig+0x4ec>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7e:	f7fd fb95 	bl	80012ac <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b86:	f7fd fb91 	bl	80012ac <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e03f      	b.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b98:	4b22      	ldr	r3, [pc, #136]	; (8003c24 <HAL_RCC_OscConfig+0x4e8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1f0      	bne.n	8003b86 <HAL_RCC_OscConfig+0x44a>
 8003ba4:	e037      	b.n	8003c16 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d101      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e032      	b.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bb2:	4b1c      	ldr	r3, [pc, #112]	; (8003c24 <HAL_RCC_OscConfig+0x4e8>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d028      	beq.n	8003c12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d121      	bne.n	8003c12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d11a      	bne.n	8003c12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003be2:	4013      	ands	r3, r2
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003be8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d111      	bne.n	8003c12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	085b      	lsrs	r3, r3, #1
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d107      	bne.n	8003c12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d001      	beq.n	8003c16 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40007000 	.word	0x40007000
 8003c24:	40023800 	.word	0x40023800
 8003c28:	42470060 	.word	0x42470060

08003c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0cc      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c40:	4b68      	ldr	r3, [pc, #416]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d90c      	bls.n	8003c68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4e:	4b65      	ldr	r3, [pc, #404]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c56:	4b63      	ldr	r3, [pc, #396]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d001      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0b8      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d020      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d005      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c80:	4b59      	ldr	r3, [pc, #356]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	4a58      	ldr	r2, [pc, #352]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d005      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c98:	4b53      	ldr	r3, [pc, #332]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	4a52      	ldr	r2, [pc, #328]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ca2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca4:	4b50      	ldr	r3, [pc, #320]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	494d      	ldr	r1, [pc, #308]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d044      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d107      	bne.n	8003cda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cca:	4b47      	ldr	r3, [pc, #284]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d119      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e07f      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d003      	beq.n	8003cea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d107      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cea:	4b3f      	ldr	r3, [pc, #252]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e06f      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfa:	4b3b      	ldr	r3, [pc, #236]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e067      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d0a:	4b37      	ldr	r3, [pc, #220]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f023 0203 	bic.w	r2, r3, #3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	4934      	ldr	r1, [pc, #208]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d1c:	f7fd fac6 	bl	80012ac <HAL_GetTick>
 8003d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d22:	e00a      	b.n	8003d3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d24:	f7fd fac2 	bl	80012ac <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e04f      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3a:	4b2b      	ldr	r3, [pc, #172]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 020c 	and.w	r2, r3, #12
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d1eb      	bne.n	8003d24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d4c:	4b25      	ldr	r3, [pc, #148]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d20c      	bcs.n	8003d74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5a:	4b22      	ldr	r3, [pc, #136]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d62:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e032      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d80:	4b19      	ldr	r3, [pc, #100]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4916      	ldr	r1, [pc, #88]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d009      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d9e:	4b12      	ldr	r3, [pc, #72]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	490e      	ldr	r1, [pc, #56]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003db2:	f000 f821 	bl	8003df8 <HAL_RCC_GetSysClockFreq>
 8003db6:	4602      	mov	r2, r0
 8003db8:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	091b      	lsrs	r3, r3, #4
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	490a      	ldr	r1, [pc, #40]	; (8003dec <HAL_RCC_ClockConfig+0x1c0>)
 8003dc4:	5ccb      	ldrb	r3, [r1, r3]
 8003dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dca:	4a09      	ldr	r2, [pc, #36]	; (8003df0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dce:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <HAL_RCC_ClockConfig+0x1c8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fd fa26 	bl	8001224 <HAL_InitTick>

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40023c00 	.word	0x40023c00
 8003de8:	40023800 	.word	0x40023800
 8003dec:	080098fc 	.word	0x080098fc
 8003df0:	20000008 	.word	0x20000008
 8003df4:	2000000c 	.word	0x2000000c

08003df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003df8:	b5b0      	push	{r4, r5, r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dfe:	2100      	movs	r1, #0
 8003e00:	6079      	str	r1, [r7, #4]
 8003e02:	2100      	movs	r1, #0
 8003e04:	60f9      	str	r1, [r7, #12]
 8003e06:	2100      	movs	r1, #0
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e0e:	4952      	ldr	r1, [pc, #328]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e10:	6889      	ldr	r1, [r1, #8]
 8003e12:	f001 010c 	and.w	r1, r1, #12
 8003e16:	2908      	cmp	r1, #8
 8003e18:	d00d      	beq.n	8003e36 <HAL_RCC_GetSysClockFreq+0x3e>
 8003e1a:	2908      	cmp	r1, #8
 8003e1c:	f200 8094 	bhi.w	8003f48 <HAL_RCC_GetSysClockFreq+0x150>
 8003e20:	2900      	cmp	r1, #0
 8003e22:	d002      	beq.n	8003e2a <HAL_RCC_GetSysClockFreq+0x32>
 8003e24:	2904      	cmp	r1, #4
 8003e26:	d003      	beq.n	8003e30 <HAL_RCC_GetSysClockFreq+0x38>
 8003e28:	e08e      	b.n	8003f48 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e2a:	4b4c      	ldr	r3, [pc, #304]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x164>)
 8003e2c:	60bb      	str	r3, [r7, #8]
       break;
 8003e2e:	e08e      	b.n	8003f4e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e30:	4b4b      	ldr	r3, [pc, #300]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e32:	60bb      	str	r3, [r7, #8]
      break;
 8003e34:	e08b      	b.n	8003f4e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e36:	4948      	ldr	r1, [pc, #288]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e38:	6849      	ldr	r1, [r1, #4]
 8003e3a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003e3e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e40:	4945      	ldr	r1, [pc, #276]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e42:	6849      	ldr	r1, [r1, #4]
 8003e44:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003e48:	2900      	cmp	r1, #0
 8003e4a:	d024      	beq.n	8003e96 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e4c:	4942      	ldr	r1, [pc, #264]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e4e:	6849      	ldr	r1, [r1, #4]
 8003e50:	0989      	lsrs	r1, r1, #6
 8003e52:	4608      	mov	r0, r1
 8003e54:	f04f 0100 	mov.w	r1, #0
 8003e58:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003e5c:	f04f 0500 	mov.w	r5, #0
 8003e60:	ea00 0204 	and.w	r2, r0, r4
 8003e64:	ea01 0305 	and.w	r3, r1, r5
 8003e68:	493d      	ldr	r1, [pc, #244]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e6a:	fb01 f003 	mul.w	r0, r1, r3
 8003e6e:	2100      	movs	r1, #0
 8003e70:	fb01 f102 	mul.w	r1, r1, r2
 8003e74:	1844      	adds	r4, r0, r1
 8003e76:	493a      	ldr	r1, [pc, #232]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e78:	fba2 0101 	umull	r0, r1, r2, r1
 8003e7c:	1863      	adds	r3, r4, r1
 8003e7e:	4619      	mov	r1, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	461a      	mov	r2, r3
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	f7fc f9fa 	bl	8000280 <__aeabi_uldivmod>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4613      	mov	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	e04a      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e96:	4b30      	ldr	r3, [pc, #192]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	099b      	lsrs	r3, r3, #6
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	f04f 0300 	mov.w	r3, #0
 8003ea2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ea6:	f04f 0100 	mov.w	r1, #0
 8003eaa:	ea02 0400 	and.w	r4, r2, r0
 8003eae:	ea03 0501 	and.w	r5, r3, r1
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	f04f 0300 	mov.w	r3, #0
 8003ebe:	014b      	lsls	r3, r1, #5
 8003ec0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ec4:	0142      	lsls	r2, r0, #5
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	4619      	mov	r1, r3
 8003eca:	1b00      	subs	r0, r0, r4
 8003ecc:	eb61 0105 	sbc.w	r1, r1, r5
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	018b      	lsls	r3, r1, #6
 8003eda:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ede:	0182      	lsls	r2, r0, #6
 8003ee0:	1a12      	subs	r2, r2, r0
 8003ee2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ee6:	f04f 0000 	mov.w	r0, #0
 8003eea:	f04f 0100 	mov.w	r1, #0
 8003eee:	00d9      	lsls	r1, r3, #3
 8003ef0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ef4:	00d0      	lsls	r0, r2, #3
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	1912      	adds	r2, r2, r4
 8003efc:	eb45 0303 	adc.w	r3, r5, r3
 8003f00:	f04f 0000 	mov.w	r0, #0
 8003f04:	f04f 0100 	mov.w	r1, #0
 8003f08:	0299      	lsls	r1, r3, #10
 8003f0a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f0e:	0290      	lsls	r0, r2, #10
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4610      	mov	r0, r2
 8003f16:	4619      	mov	r1, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	f7fc f9ae 	bl	8000280 <__aeabi_uldivmod>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4613      	mov	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f2c:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	0c1b      	lsrs	r3, r3, #16
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	3301      	adds	r3, #1
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f44:	60bb      	str	r3, [r7, #8]
      break;
 8003f46:	e002      	b.n	8003f4e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f48:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x164>)
 8003f4a:	60bb      	str	r3, [r7, #8]
      break;
 8003f4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bdb0      	pop	{r4, r5, r7, pc}
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	00f42400 	.word	0x00f42400
 8003f60:	017d7840 	.word	0x017d7840

08003f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f68:	4b03      	ldr	r3, [pc, #12]	; (8003f78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	20000008 	.word	0x20000008

08003f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f80:	f7ff fff0 	bl	8003f64 <HAL_RCC_GetHCLKFreq>
 8003f84:	4602      	mov	r2, r0
 8003f86:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	0a9b      	lsrs	r3, r3, #10
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	4903      	ldr	r1, [pc, #12]	; (8003fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f92:	5ccb      	ldrb	r3, [r1, r3]
 8003f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	0800990c 	.word	0x0800990c

08003fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e041      	b.n	800403a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d106      	bne.n	8003fd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fc ffe8 	bl	8000fa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	f000 fa24 	bl	8004430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b082      	sub	sp, #8
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b02      	cmp	r3, #2
 8004056:	d122      	bne.n	800409e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b02      	cmp	r3, #2
 8004064:	d11b      	bne.n	800409e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f06f 0202 	mvn.w	r2, #2
 800406e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f9b5 	bl	80043f4 <HAL_TIM_IC_CaptureCallback>
 800408a:	e005      	b.n	8004098 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f9a7 	bl	80043e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f9b8 	bl	8004408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d122      	bne.n	80040f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f003 0304 	and.w	r3, r3, #4
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d11b      	bne.n	80040f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f06f 0204 	mvn.w	r2, #4
 80040c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f98b 	bl	80043f4 <HAL_TIM_IC_CaptureCallback>
 80040de:	e005      	b.n	80040ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f97d 	bl	80043e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f98e 	bl	8004408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	f003 0308 	and.w	r3, r3, #8
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d122      	bne.n	8004146 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f003 0308 	and.w	r3, r3, #8
 800410a:	2b08      	cmp	r3, #8
 800410c:	d11b      	bne.n	8004146 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f06f 0208 	mvn.w	r2, #8
 8004116:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2204      	movs	r2, #4
 800411c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	f003 0303 	and.w	r3, r3, #3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f961 	bl	80043f4 <HAL_TIM_IC_CaptureCallback>
 8004132:	e005      	b.n	8004140 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f953 	bl	80043e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f964 	bl	8004408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	f003 0310 	and.w	r3, r3, #16
 8004150:	2b10      	cmp	r3, #16
 8004152:	d122      	bne.n	800419a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f003 0310 	and.w	r3, r3, #16
 800415e:	2b10      	cmp	r3, #16
 8004160:	d11b      	bne.n	800419a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f06f 0210 	mvn.w	r2, #16
 800416a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2208      	movs	r2, #8
 8004170:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f937 	bl	80043f4 <HAL_TIM_IC_CaptureCallback>
 8004186:	e005      	b.n	8004194 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f929 	bl	80043e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f93a 	bl	8004408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d10e      	bne.n	80041c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d107      	bne.n	80041c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f06f 0201 	mvn.w	r2, #1
 80041be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7fc ffb3 	bl	800112c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d0:	2b80      	cmp	r3, #128	; 0x80
 80041d2:	d10e      	bne.n	80041f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041de:	2b80      	cmp	r3, #128	; 0x80
 80041e0:	d107      	bne.n	80041f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 fab1 	bl	8004754 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fc:	2b40      	cmp	r3, #64	; 0x40
 80041fe:	d10e      	bne.n	800421e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420a:	2b40      	cmp	r3, #64	; 0x40
 800420c:	d107      	bne.n	800421e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f8ff 	bl	800441c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f003 0320 	and.w	r3, r3, #32
 8004228:	2b20      	cmp	r3, #32
 800422a:	d10e      	bne.n	800424a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f003 0320 	and.w	r3, r3, #32
 8004236:	2b20      	cmp	r3, #32
 8004238:	d107      	bne.n	800424a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f06f 0220 	mvn.w	r2, #32
 8004242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 fa7b 	bl	8004740 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800424a:	bf00      	nop
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800425c:	2300      	movs	r3, #0
 800425e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004266:	2b01      	cmp	r3, #1
 8004268:	d101      	bne.n	800426e <HAL_TIM_ConfigClockSource+0x1c>
 800426a:	2302      	movs	r3, #2
 800426c:	e0b4      	b.n	80043d8 <HAL_TIM_ConfigClockSource+0x186>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2202      	movs	r2, #2
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800428c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004294:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042a6:	d03e      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0xd4>
 80042a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ac:	f200 8087 	bhi.w	80043be <HAL_TIM_ConfigClockSource+0x16c>
 80042b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b4:	f000 8086 	beq.w	80043c4 <HAL_TIM_ConfigClockSource+0x172>
 80042b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042bc:	d87f      	bhi.n	80043be <HAL_TIM_ConfigClockSource+0x16c>
 80042be:	2b70      	cmp	r3, #112	; 0x70
 80042c0:	d01a      	beq.n	80042f8 <HAL_TIM_ConfigClockSource+0xa6>
 80042c2:	2b70      	cmp	r3, #112	; 0x70
 80042c4:	d87b      	bhi.n	80043be <HAL_TIM_ConfigClockSource+0x16c>
 80042c6:	2b60      	cmp	r3, #96	; 0x60
 80042c8:	d050      	beq.n	800436c <HAL_TIM_ConfigClockSource+0x11a>
 80042ca:	2b60      	cmp	r3, #96	; 0x60
 80042cc:	d877      	bhi.n	80043be <HAL_TIM_ConfigClockSource+0x16c>
 80042ce:	2b50      	cmp	r3, #80	; 0x50
 80042d0:	d03c      	beq.n	800434c <HAL_TIM_ConfigClockSource+0xfa>
 80042d2:	2b50      	cmp	r3, #80	; 0x50
 80042d4:	d873      	bhi.n	80043be <HAL_TIM_ConfigClockSource+0x16c>
 80042d6:	2b40      	cmp	r3, #64	; 0x40
 80042d8:	d058      	beq.n	800438c <HAL_TIM_ConfigClockSource+0x13a>
 80042da:	2b40      	cmp	r3, #64	; 0x40
 80042dc:	d86f      	bhi.n	80043be <HAL_TIM_ConfigClockSource+0x16c>
 80042de:	2b30      	cmp	r3, #48	; 0x30
 80042e0:	d064      	beq.n	80043ac <HAL_TIM_ConfigClockSource+0x15a>
 80042e2:	2b30      	cmp	r3, #48	; 0x30
 80042e4:	d86b      	bhi.n	80043be <HAL_TIM_ConfigClockSource+0x16c>
 80042e6:	2b20      	cmp	r3, #32
 80042e8:	d060      	beq.n	80043ac <HAL_TIM_ConfigClockSource+0x15a>
 80042ea:	2b20      	cmp	r3, #32
 80042ec:	d867      	bhi.n	80043be <HAL_TIM_ConfigClockSource+0x16c>
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d05c      	beq.n	80043ac <HAL_TIM_ConfigClockSource+0x15a>
 80042f2:	2b10      	cmp	r3, #16
 80042f4:	d05a      	beq.n	80043ac <HAL_TIM_ConfigClockSource+0x15a>
 80042f6:	e062      	b.n	80043be <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6818      	ldr	r0, [r3, #0]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	6899      	ldr	r1, [r3, #8]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f000 f98c 	bl	8004624 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800431a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	609a      	str	r2, [r3, #8]
      break;
 8004324:	e04f      	b.n	80043c6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6818      	ldr	r0, [r3, #0]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6899      	ldr	r1, [r3, #8]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f000 f975 	bl	8004624 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004348:	609a      	str	r2, [r3, #8]
      break;
 800434a:	e03c      	b.n	80043c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	6859      	ldr	r1, [r3, #4]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	461a      	mov	r2, r3
 800435a:	f000 f8e9 	bl	8004530 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2150      	movs	r1, #80	; 0x50
 8004364:	4618      	mov	r0, r3
 8004366:	f000 f942 	bl	80045ee <TIM_ITRx_SetConfig>
      break;
 800436a:	e02c      	b.n	80043c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6818      	ldr	r0, [r3, #0]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	6859      	ldr	r1, [r3, #4]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	461a      	mov	r2, r3
 800437a:	f000 f908 	bl	800458e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2160      	movs	r1, #96	; 0x60
 8004384:	4618      	mov	r0, r3
 8004386:	f000 f932 	bl	80045ee <TIM_ITRx_SetConfig>
      break;
 800438a:	e01c      	b.n	80043c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6818      	ldr	r0, [r3, #0]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	6859      	ldr	r1, [r3, #4]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	461a      	mov	r2, r3
 800439a:	f000 f8c9 	bl	8004530 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2140      	movs	r1, #64	; 0x40
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 f922 	bl	80045ee <TIM_ITRx_SetConfig>
      break;
 80043aa:	e00c      	b.n	80043c6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4619      	mov	r1, r3
 80043b6:	4610      	mov	r0, r2
 80043b8:	f000 f919 	bl	80045ee <TIM_ITRx_SetConfig>
      break;
 80043bc:	e003      	b.n	80043c6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	73fb      	strb	r3, [r7, #15]
      break;
 80043c2:	e000      	b.n	80043c6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a34      	ldr	r2, [pc, #208]	; (8004514 <TIM_Base_SetConfig+0xe4>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d00f      	beq.n	8004468 <TIM_Base_SetConfig+0x38>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444e:	d00b      	beq.n	8004468 <TIM_Base_SetConfig+0x38>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a31      	ldr	r2, [pc, #196]	; (8004518 <TIM_Base_SetConfig+0xe8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d007      	beq.n	8004468 <TIM_Base_SetConfig+0x38>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a30      	ldr	r2, [pc, #192]	; (800451c <TIM_Base_SetConfig+0xec>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d003      	beq.n	8004468 <TIM_Base_SetConfig+0x38>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a2f      	ldr	r2, [pc, #188]	; (8004520 <TIM_Base_SetConfig+0xf0>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d108      	bne.n	800447a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a25      	ldr	r2, [pc, #148]	; (8004514 <TIM_Base_SetConfig+0xe4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d01b      	beq.n	80044ba <TIM_Base_SetConfig+0x8a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004488:	d017      	beq.n	80044ba <TIM_Base_SetConfig+0x8a>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a22      	ldr	r2, [pc, #136]	; (8004518 <TIM_Base_SetConfig+0xe8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d013      	beq.n	80044ba <TIM_Base_SetConfig+0x8a>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a21      	ldr	r2, [pc, #132]	; (800451c <TIM_Base_SetConfig+0xec>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d00f      	beq.n	80044ba <TIM_Base_SetConfig+0x8a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a20      	ldr	r2, [pc, #128]	; (8004520 <TIM_Base_SetConfig+0xf0>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00b      	beq.n	80044ba <TIM_Base_SetConfig+0x8a>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a1f      	ldr	r2, [pc, #124]	; (8004524 <TIM_Base_SetConfig+0xf4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d007      	beq.n	80044ba <TIM_Base_SetConfig+0x8a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a1e      	ldr	r2, [pc, #120]	; (8004528 <TIM_Base_SetConfig+0xf8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d003      	beq.n	80044ba <TIM_Base_SetConfig+0x8a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a1d      	ldr	r2, [pc, #116]	; (800452c <TIM_Base_SetConfig+0xfc>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d108      	bne.n	80044cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a08      	ldr	r2, [pc, #32]	; (8004514 <TIM_Base_SetConfig+0xe4>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d103      	bne.n	8004500 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	615a      	str	r2, [r3, #20]
}
 8004506:	bf00      	nop
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	40010000 	.word	0x40010000
 8004518:	40000400 	.word	0x40000400
 800451c:	40000800 	.word	0x40000800
 8004520:	40000c00 	.word	0x40000c00
 8004524:	40014000 	.word	0x40014000
 8004528:	40014400 	.word	0x40014400
 800452c:	40014800 	.word	0x40014800

08004530 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	f023 0201 	bic.w	r2, r3, #1
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800455a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4313      	orrs	r3, r2
 8004564:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f023 030a 	bic.w	r3, r3, #10
 800456c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	4313      	orrs	r3, r2
 8004574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	621a      	str	r2, [r3, #32]
}
 8004582:	bf00      	nop
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800458e:	b480      	push	{r7}
 8004590:	b087      	sub	sp, #28
 8004592:	af00      	add	r7, sp, #0
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	f023 0210 	bic.w	r2, r3, #16
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	031b      	lsls	r3, r3, #12
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	621a      	str	r2, [r3, #32]
}
 80045e2:	bf00      	nop
 80045e4:	371c      	adds	r7, #28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b085      	sub	sp, #20
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004604:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4313      	orrs	r3, r2
 800460c:	f043 0307 	orr.w	r3, r3, #7
 8004610:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	609a      	str	r2, [r3, #8]
}
 8004618:	bf00      	nop
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800463e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	021a      	lsls	r2, r3, #8
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	431a      	orrs	r2, r3
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4313      	orrs	r3, r2
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	4313      	orrs	r3, r2
 8004650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	609a      	str	r2, [r3, #8]
}
 8004658:	bf00      	nop
 800465a:	371c      	adds	r7, #28
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004678:	2302      	movs	r3, #2
 800467a:	e050      	b.n	800471e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a1c      	ldr	r2, [pc, #112]	; (800472c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d018      	beq.n	80046f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c8:	d013      	beq.n	80046f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a18      	ldr	r2, [pc, #96]	; (8004730 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d00e      	beq.n	80046f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a16      	ldr	r2, [pc, #88]	; (8004734 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d009      	beq.n	80046f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a15      	ldr	r2, [pc, #84]	; (8004738 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d004      	beq.n	80046f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a13      	ldr	r2, [pc, #76]	; (800473c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d10c      	bne.n	800470c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	4313      	orrs	r3, r2
 8004702:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40010000 	.word	0x40010000
 8004730:	40000400 	.word	0x40000400
 8004734:	40000800 	.word	0x40000800
 8004738:	40000c00 	.word	0x40000c00
 800473c:	40014000 	.word	0x40014000

08004740 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004768:	b084      	sub	sp, #16
 800476a:	b580      	push	{r7, lr}
 800476c:	b084      	sub	sp, #16
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	f107 001c 	add.w	r0, r7, #28
 8004776:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800477a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477c:	2b01      	cmp	r3, #1
 800477e:	d122      	bne.n	80047c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004784:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d105      	bne.n	80047ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f001 fb1c 	bl	8005df8 <USB_CoreReset>
 80047c0:	4603      	mov	r3, r0
 80047c2:	73fb      	strb	r3, [r7, #15]
 80047c4:	e01a      	b.n	80047fc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f001 fb10 	bl	8005df8 <USB_CoreReset>
 80047d8:	4603      	mov	r3, r0
 80047da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80047dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d106      	bne.n	80047f0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	639a      	str	r2, [r3, #56]	; 0x38
 80047ee:	e005      	b.n	80047fc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80047fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d10b      	bne.n	800481a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f043 0206 	orr.w	r2, r3, #6
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f043 0220 	orr.w	r2, r3, #32
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800481a:	7bfb      	ldrb	r3, [r7, #15]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004826:	b004      	add	sp, #16
 8004828:	4770      	bx	lr
	...

0800482c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800482c:	b480      	push	{r7}
 800482e:	b087      	sub	sp, #28
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	4613      	mov	r3, r2
 8004838:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800483a:	79fb      	ldrb	r3, [r7, #7]
 800483c:	2b02      	cmp	r3, #2
 800483e:	d165      	bne.n	800490c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4a41      	ldr	r2, [pc, #260]	; (8004948 <USB_SetTurnaroundTime+0x11c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d906      	bls.n	8004856 <USB_SetTurnaroundTime+0x2a>
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4a40      	ldr	r2, [pc, #256]	; (800494c <USB_SetTurnaroundTime+0x120>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d202      	bcs.n	8004856 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004850:	230f      	movs	r3, #15
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	e062      	b.n	800491c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	4a3c      	ldr	r2, [pc, #240]	; (800494c <USB_SetTurnaroundTime+0x120>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d306      	bcc.n	800486c <USB_SetTurnaroundTime+0x40>
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	4a3b      	ldr	r2, [pc, #236]	; (8004950 <USB_SetTurnaroundTime+0x124>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d202      	bcs.n	800486c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004866:	230e      	movs	r3, #14
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	e057      	b.n	800491c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4a38      	ldr	r2, [pc, #224]	; (8004950 <USB_SetTurnaroundTime+0x124>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d306      	bcc.n	8004882 <USB_SetTurnaroundTime+0x56>
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	4a37      	ldr	r2, [pc, #220]	; (8004954 <USB_SetTurnaroundTime+0x128>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d202      	bcs.n	8004882 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800487c:	230d      	movs	r3, #13
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	e04c      	b.n	800491c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	4a33      	ldr	r2, [pc, #204]	; (8004954 <USB_SetTurnaroundTime+0x128>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d306      	bcc.n	8004898 <USB_SetTurnaroundTime+0x6c>
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	4a32      	ldr	r2, [pc, #200]	; (8004958 <USB_SetTurnaroundTime+0x12c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d802      	bhi.n	8004898 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004892:	230c      	movs	r3, #12
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	e041      	b.n	800491c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	4a2f      	ldr	r2, [pc, #188]	; (8004958 <USB_SetTurnaroundTime+0x12c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d906      	bls.n	80048ae <USB_SetTurnaroundTime+0x82>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	4a2e      	ldr	r2, [pc, #184]	; (800495c <USB_SetTurnaroundTime+0x130>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d802      	bhi.n	80048ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80048a8:	230b      	movs	r3, #11
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	e036      	b.n	800491c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	4a2a      	ldr	r2, [pc, #168]	; (800495c <USB_SetTurnaroundTime+0x130>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d906      	bls.n	80048c4 <USB_SetTurnaroundTime+0x98>
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	4a29      	ldr	r2, [pc, #164]	; (8004960 <USB_SetTurnaroundTime+0x134>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d802      	bhi.n	80048c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80048be:	230a      	movs	r3, #10
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	e02b      	b.n	800491c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4a26      	ldr	r2, [pc, #152]	; (8004960 <USB_SetTurnaroundTime+0x134>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d906      	bls.n	80048da <USB_SetTurnaroundTime+0xae>
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4a25      	ldr	r2, [pc, #148]	; (8004964 <USB_SetTurnaroundTime+0x138>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d202      	bcs.n	80048da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80048d4:	2309      	movs	r3, #9
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	e020      	b.n	800491c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	4a21      	ldr	r2, [pc, #132]	; (8004964 <USB_SetTurnaroundTime+0x138>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d306      	bcc.n	80048f0 <USB_SetTurnaroundTime+0xc4>
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	4a20      	ldr	r2, [pc, #128]	; (8004968 <USB_SetTurnaroundTime+0x13c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d802      	bhi.n	80048f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80048ea:	2308      	movs	r3, #8
 80048ec:	617b      	str	r3, [r7, #20]
 80048ee:	e015      	b.n	800491c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	4a1d      	ldr	r2, [pc, #116]	; (8004968 <USB_SetTurnaroundTime+0x13c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d906      	bls.n	8004906 <USB_SetTurnaroundTime+0xda>
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	4a1c      	ldr	r2, [pc, #112]	; (800496c <USB_SetTurnaroundTime+0x140>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d202      	bcs.n	8004906 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004900:	2307      	movs	r3, #7
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	e00a      	b.n	800491c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004906:	2306      	movs	r3, #6
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	e007      	b.n	800491c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800490c:	79fb      	ldrb	r3, [r7, #7]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d102      	bne.n	8004918 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004912:	2309      	movs	r3, #9
 8004914:	617b      	str	r3, [r7, #20]
 8004916:	e001      	b.n	800491c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004918:	2309      	movs	r3, #9
 800491a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	029b      	lsls	r3, r3, #10
 8004930:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004934:	431a      	orrs	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	371c      	adds	r7, #28
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	00d8acbf 	.word	0x00d8acbf
 800494c:	00e4e1c0 	.word	0x00e4e1c0
 8004950:	00f42400 	.word	0x00f42400
 8004954:	01067380 	.word	0x01067380
 8004958:	011a499f 	.word	0x011a499f
 800495c:	01312cff 	.word	0x01312cff
 8004960:	014ca43f 	.word	0x014ca43f
 8004964:	016e3600 	.word	0x016e3600
 8004968:	01a6ab1f 	.word	0x01a6ab1f
 800496c:	01e84800 	.word	0x01e84800

08004970 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f043 0201 	orr.w	r2, r3, #1
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f023 0201 	bic.w	r2, r3, #1
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80049d0:	78fb      	ldrb	r3, [r7, #3]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d115      	bne.n	8004a02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80049e2:	2001      	movs	r0, #1
 80049e4:	f7fc fc6e 	bl	80012c4 <HAL_Delay>
      ms++;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	3301      	adds	r3, #1
 80049ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f001 f972 	bl	8005cd8 <USB_GetMode>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d01e      	beq.n	8004a38 <USB_SetCurrentMode+0x84>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b31      	cmp	r3, #49	; 0x31
 80049fe:	d9f0      	bls.n	80049e2 <USB_SetCurrentMode+0x2e>
 8004a00:	e01a      	b.n	8004a38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a02:	78fb      	ldrb	r3, [r7, #3]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d115      	bne.n	8004a34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a14:	2001      	movs	r0, #1
 8004a16:	f7fc fc55 	bl	80012c4 <HAL_Delay>
      ms++;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f001 f959 	bl	8005cd8 <USB_GetMode>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d005      	beq.n	8004a38 <USB_SetCurrentMode+0x84>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2b31      	cmp	r3, #49	; 0x31
 8004a30:	d9f0      	bls.n	8004a14 <USB_SetCurrentMode+0x60>
 8004a32:	e001      	b.n	8004a38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e005      	b.n	8004a44 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b32      	cmp	r3, #50	; 0x32
 8004a3c:	d101      	bne.n	8004a42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e000      	b.n	8004a44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a4c:	b084      	sub	sp, #16
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b086      	sub	sp, #24
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a66:	2300      	movs	r3, #0
 8004a68:	613b      	str	r3, [r7, #16]
 8004a6a:	e009      	b.n	8004a80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	3340      	adds	r3, #64	; 0x40
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	2200      	movs	r2, #0
 8004a78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	613b      	str	r3, [r7, #16]
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	2b0e      	cmp	r3, #14
 8004a84:	d9f2      	bls.n	8004a6c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d11c      	bne.n	8004ac6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a9a:	f043 0302 	orr.w	r3, r3, #2
 8004a9e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	639a      	str	r2, [r3, #56]	; 0x38
 8004ac4:	e00b      	b.n	8004ade <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af0:	4619      	mov	r1, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af8:	461a      	mov	r2, r3
 8004afa:	680b      	ldr	r3, [r1, #0]
 8004afc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d10c      	bne.n	8004b1e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d104      	bne.n	8004b14 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f945 	bl	8004d9c <USB_SetDevSpeed>
 8004b12:	e008      	b.n	8004b26 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b14:	2101      	movs	r1, #1
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f940 	bl	8004d9c <USB_SetDevSpeed>
 8004b1c:	e003      	b.n	8004b26 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b1e:	2103      	movs	r1, #3
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f93b 	bl	8004d9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b26:	2110      	movs	r1, #16
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f8f3 	bl	8004d14 <USB_FlushTxFifo>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f90f 	bl	8004d5c <USB_FlushRxFifo>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4e:	461a      	mov	r2, r3
 8004b50:	2300      	movs	r3, #0
 8004b52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b66:	461a      	mov	r2, r3
 8004b68:	2300      	movs	r3, #0
 8004b6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	613b      	str	r3, [r7, #16]
 8004b70:	e043      	b.n	8004bfa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b88:	d118      	bne.n	8004bbc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10a      	bne.n	8004ba6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	e013      	b.n	8004bce <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	e008      	b.n	8004bce <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc8:	461a      	mov	r2, r3
 8004bca:	2300      	movs	r3, #0
 8004bcc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	015a      	lsls	r2, r3, #5
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bda:	461a      	mov	r2, r3
 8004bdc:	2300      	movs	r3, #0
 8004bde:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bec:	461a      	mov	r2, r3
 8004bee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bf2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	613b      	str	r3, [r7, #16]
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d3b7      	bcc.n	8004b72 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c02:	2300      	movs	r3, #0
 8004c04:	613b      	str	r3, [r7, #16]
 8004c06:	e043      	b.n	8004c90 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c1e:	d118      	bne.n	8004c52 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10a      	bne.n	8004c3c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c32:	461a      	mov	r2, r3
 8004c34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c38:	6013      	str	r3, [r2, #0]
 8004c3a:	e013      	b.n	8004c64 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c48:	461a      	mov	r2, r3
 8004c4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	e008      	b.n	8004c64 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5e:	461a      	mov	r2, r3
 8004c60:	2300      	movs	r3, #0
 8004c62:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c70:	461a      	mov	r2, r3
 8004c72:	2300      	movs	r3, #0
 8004c74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c82:	461a      	mov	r2, r3
 8004c84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	613b      	str	r3, [r7, #16]
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d3b7      	bcc.n	8004c08 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ca6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004caa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004cb8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d105      	bne.n	8004ccc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	f043 0210 	orr.w	r2, r3, #16
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	699a      	ldr	r2, [r3, #24]
 8004cd0:	4b0f      	ldr	r3, [pc, #60]	; (8004d10 <USB_DevInit+0x2c4>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d005      	beq.n	8004cea <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	f043 0208 	orr.w	r2, r3, #8
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d107      	bne.n	8004d00 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cf8:	f043 0304 	orr.w	r3, r3, #4
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d0c:	b004      	add	sp, #16
 8004d0e:	4770      	bx	lr
 8004d10:	803c3800 	.word	0x803c3800

08004d14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	019b      	lsls	r3, r3, #6
 8004d26:	f043 0220 	orr.w	r2, r3, #32
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3301      	adds	r3, #1
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	4a08      	ldr	r2, [pc, #32]	; (8004d58 <USB_FlushTxFifo+0x44>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d901      	bls.n	8004d3e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e006      	b.n	8004d4c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b20      	cmp	r3, #32
 8004d48:	d0f1      	beq.n	8004d2e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	00030d40 	.word	0x00030d40

08004d5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2210      	movs	r2, #16
 8004d6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	3301      	adds	r3, #1
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	4a08      	ldr	r2, [pc, #32]	; (8004d98 <USB_FlushRxFifo+0x3c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d901      	bls.n	8004d7e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e006      	b.n	8004d8c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	f003 0310 	and.w	r3, r3, #16
 8004d86:	2b10      	cmp	r3, #16
 8004d88:	d0f1      	beq.n	8004d6e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	00030d40 	.word	0x00030d40

08004d9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	78fb      	ldrb	r3, [r7, #3]
 8004db6:	68f9      	ldr	r1, [r7, #12]
 8004db8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b087      	sub	sp, #28
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 0306 	and.w	r3, r3, #6
 8004de6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d102      	bne.n	8004df4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004dee:	2300      	movs	r3, #0
 8004df0:	75fb      	strb	r3, [r7, #23]
 8004df2:	e00a      	b.n	8004e0a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d002      	beq.n	8004e00 <USB_GetDevSpeed+0x32>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2b06      	cmp	r3, #6
 8004dfe:	d102      	bne.n	8004e06 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004e00:	2302      	movs	r3, #2
 8004e02:	75fb      	strb	r3, [r7, #23]
 8004e04:	e001      	b.n	8004e0a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004e06:	230f      	movs	r3, #15
 8004e08:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	371c      	adds	r7, #28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	785b      	ldrb	r3, [r3, #1]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d13a      	bne.n	8004eaa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e3a:	69da      	ldr	r2, [r3, #28]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	f003 030f 	and.w	r3, r3, #15
 8004e44:	2101      	movs	r1, #1
 8004e46:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	68f9      	ldr	r1, [r7, #12]
 8004e4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d155      	bne.n	8004f18 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	78db      	ldrb	r3, [r3, #3]
 8004e86:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e88:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	059b      	lsls	r3, r3, #22
 8004e8e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e90:	4313      	orrs	r3, r2
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	0151      	lsls	r1, r2, #5
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	440a      	add	r2, r1
 8004e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	e036      	b.n	8004f18 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb0:	69da      	ldr	r2, [r3, #28]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	f003 030f 	and.w	r3, r3, #15
 8004eba:	2101      	movs	r1, #1
 8004ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec0:	041b      	lsls	r3, r3, #16
 8004ec2:	68f9      	ldr	r1, [r7, #12]
 8004ec4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d11a      	bne.n	8004f18 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	78db      	ldrb	r3, [r3, #3]
 8004efc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004efe:	430b      	orrs	r3, r1
 8004f00:	4313      	orrs	r3, r2
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	0151      	lsls	r1, r2, #5
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	440a      	add	r2, r1
 8004f0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f16:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
	...

08004f28 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	785b      	ldrb	r3, [r3, #1]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d161      	bne.n	8005008 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f5a:	d11f      	bne.n	8004f9c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	0151      	lsls	r1, r2, #5
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	440a      	add	r2, r1
 8004f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f7a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	0151      	lsls	r1, r2, #5
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	440a      	add	r2, r1
 8004f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	f003 030f 	and.w	r3, r3, #15
 8004fac:	2101      	movs	r1, #1
 8004fae:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	68f9      	ldr	r1, [r7, #12]
 8004fb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc6:	69da      	ldr	r2, [r3, #28]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	68f9      	ldr	r1, [r7, #12]
 8004fdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	0159      	lsls	r1, r3, #5
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	440b      	add	r3, r1
 8004ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffe:	4619      	mov	r1, r3
 8005000:	4b35      	ldr	r3, [pc, #212]	; (80050d8 <USB_DeactivateEndpoint+0x1b0>)
 8005002:	4013      	ands	r3, r2
 8005004:	600b      	str	r3, [r1, #0]
 8005006:	e060      	b.n	80050ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800501a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800501e:	d11f      	bne.n	8005060 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	0151      	lsls	r1, r2, #5
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	440a      	add	r2, r1
 8005036:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800503a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800503e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	0151      	lsls	r1, r2, #5
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	440a      	add	r2, r1
 8005056:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800505a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800505e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	f003 030f 	and.w	r3, r3, #15
 8005070:	2101      	movs	r1, #1
 8005072:	fa01 f303 	lsl.w	r3, r1, r3
 8005076:	041b      	lsls	r3, r3, #16
 8005078:	43db      	mvns	r3, r3
 800507a:	68f9      	ldr	r1, [r7, #12]
 800507c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005080:	4013      	ands	r3, r2
 8005082:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800508a:	69da      	ldr	r2, [r3, #28]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	2101      	movs	r1, #1
 8005096:	fa01 f303 	lsl.w	r3, r1, r3
 800509a:	041b      	lsls	r3, r3, #16
 800509c:	43db      	mvns	r3, r3
 800509e:	68f9      	ldr	r1, [r7, #12]
 80050a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050a4:	4013      	ands	r3, r2
 80050a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	0159      	lsls	r1, r3, #5
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	440b      	add	r3, r1
 80050be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c2:	4619      	mov	r1, r3
 80050c4:	4b05      	ldr	r3, [pc, #20]	; (80050dc <USB_DeactivateEndpoint+0x1b4>)
 80050c6:	4013      	ands	r3, r2
 80050c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	ec337800 	.word	0xec337800
 80050dc:	eff37800 	.word	0xeff37800

080050e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b08a      	sub	sp, #40	; 0x28
 80050e4:	af02      	add	r7, sp, #8
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	4613      	mov	r3, r2
 80050ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	785b      	ldrb	r3, [r3, #1]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	f040 815c 	bne.w	80053ba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d132      	bne.n	8005170 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	0151      	lsls	r1, r2, #5
 800511c:	69fa      	ldr	r2, [r7, #28]
 800511e:	440a      	add	r2, r1
 8005120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005124:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005128:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800512c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	0151      	lsls	r1, r2, #5
 8005140:	69fa      	ldr	r2, [r7, #28]
 8005142:	440a      	add	r2, r1
 8005144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005148:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800514c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	0151      	lsls	r1, r2, #5
 8005160:	69fa      	ldr	r2, [r7, #28]
 8005162:	440a      	add	r2, r1
 8005164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005168:	0cdb      	lsrs	r3, r3, #19
 800516a:	04db      	lsls	r3, r3, #19
 800516c:	6113      	str	r3, [r2, #16]
 800516e:	e074      	b.n	800525a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	0151      	lsls	r1, r2, #5
 8005182:	69fa      	ldr	r2, [r7, #28]
 8005184:	440a      	add	r2, r1
 8005186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800518a:	0cdb      	lsrs	r3, r3, #19
 800518c:	04db      	lsls	r3, r3, #19
 800518e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	0151      	lsls	r1, r2, #5
 80051a2:	69fa      	ldr	r2, [r7, #28]
 80051a4:	440a      	add	r2, r1
 80051a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	6959      	ldr	r1, [r3, #20]
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	440b      	add	r3, r1
 80051cc:	1e59      	subs	r1, r3, #1
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80051d6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80051d8:	4b9d      	ldr	r3, [pc, #628]	; (8005450 <USB_EPStartXfer+0x370>)
 80051da:	400b      	ands	r3, r1
 80051dc:	69b9      	ldr	r1, [r7, #24]
 80051de:	0148      	lsls	r0, r1, #5
 80051e0:	69f9      	ldr	r1, [r7, #28]
 80051e2:	4401      	add	r1, r0
 80051e4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051e8:	4313      	orrs	r3, r2
 80051ea:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f8:	691a      	ldr	r2, [r3, #16]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005202:	69b9      	ldr	r1, [r7, #24]
 8005204:	0148      	lsls	r0, r1, #5
 8005206:	69f9      	ldr	r1, [r7, #28]
 8005208:	4401      	add	r1, r0
 800520a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800520e:	4313      	orrs	r3, r2
 8005210:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	78db      	ldrb	r3, [r3, #3]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d11f      	bne.n	800525a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	4413      	add	r3, r2
 8005222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	0151      	lsls	r1, r2, #5
 800522c:	69fa      	ldr	r2, [r7, #28]
 800522e:	440a      	add	r2, r1
 8005230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005234:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005238:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	0151      	lsls	r1, r2, #5
 800524c:	69fa      	ldr	r2, [r7, #28]
 800524e:	440a      	add	r2, r1
 8005250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005254:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005258:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800525a:	79fb      	ldrb	r3, [r7, #7]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d14b      	bne.n	80052f8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d009      	beq.n	800527c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005274:	461a      	mov	r2, r3
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	78db      	ldrb	r3, [r3, #3]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d128      	bne.n	80052d6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005290:	2b00      	cmp	r3, #0
 8005292:	d110      	bne.n	80052b6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	4413      	add	r3, r2
 800529c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	0151      	lsls	r1, r2, #5
 80052a6:	69fa      	ldr	r2, [r7, #28]
 80052a8:	440a      	add	r2, r1
 80052aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052b2:	6013      	str	r3, [r2, #0]
 80052b4:	e00f      	b.n	80052d6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	0151      	lsls	r1, r2, #5
 80052c8:	69fa      	ldr	r2, [r7, #28]
 80052ca:	440a      	add	r2, r1
 80052cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	0151      	lsls	r1, r2, #5
 80052e8:	69fa      	ldr	r2, [r7, #28]
 80052ea:	440a      	add	r2, r1
 80052ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	e12f      	b.n	8005558 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	0151      	lsls	r1, r2, #5
 800530a:	69fa      	ldr	r2, [r7, #28]
 800530c:	440a      	add	r2, r1
 800530e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005312:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005316:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	78db      	ldrb	r3, [r3, #3]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d015      	beq.n	800534c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 8117 	beq.w	8005558 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	2101      	movs	r1, #1
 800533c:	fa01 f303 	lsl.w	r3, r1, r3
 8005340:	69f9      	ldr	r1, [r7, #28]
 8005342:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005346:	4313      	orrs	r3, r2
 8005348:	634b      	str	r3, [r1, #52]	; 0x34
 800534a:	e105      	b.n	8005558 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005358:	2b00      	cmp	r3, #0
 800535a:	d110      	bne.n	800537e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	0151      	lsls	r1, r2, #5
 800536e:	69fa      	ldr	r2, [r7, #28]
 8005370:	440a      	add	r2, r1
 8005372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005376:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	e00f      	b.n	800539e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	4413      	add	r3, r2
 8005386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	0151      	lsls	r1, r2, #5
 8005390:	69fa      	ldr	r2, [r7, #28]
 8005392:	440a      	add	r2, r1
 8005394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800539c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	68d9      	ldr	r1, [r3, #12]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	781a      	ldrb	r2, [r3, #0]
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	b298      	uxth	r0, r3
 80053ac:	79fb      	ldrb	r3, [r7, #7]
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	4603      	mov	r3, r0
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 fa2b 	bl	800580e <USB_WritePacket>
 80053b8:	e0ce      	b.n	8005558 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	0151      	lsls	r1, r2, #5
 80053cc:	69fa      	ldr	r2, [r7, #28]
 80053ce:	440a      	add	r2, r1
 80053d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053d4:	0cdb      	lsrs	r3, r3, #19
 80053d6:	04db      	lsls	r3, r3, #19
 80053d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	0151      	lsls	r1, r2, #5
 80053ec:	69fa      	ldr	r2, [r7, #28]
 80053ee:	440a      	add	r2, r1
 80053f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053fc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d126      	bne.n	8005454 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	4413      	add	r3, r2
 800540e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005412:	691a      	ldr	r2, [r3, #16]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800541c:	69b9      	ldr	r1, [r7, #24]
 800541e:	0148      	lsls	r0, r1, #5
 8005420:	69f9      	ldr	r1, [r7, #28]
 8005422:	4401      	add	r1, r0
 8005424:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005428:	4313      	orrs	r3, r2
 800542a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	0151      	lsls	r1, r2, #5
 800543e:	69fa      	ldr	r2, [r7, #28]
 8005440:	440a      	add	r2, r1
 8005442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005446:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800544a:	6113      	str	r3, [r2, #16]
 800544c:	e036      	b.n	80054bc <USB_EPStartXfer+0x3dc>
 800544e:	bf00      	nop
 8005450:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	695a      	ldr	r2, [r3, #20]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	4413      	add	r3, r2
 800545e:	1e5a      	subs	r2, r3, #1
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	fbb2 f3f3 	udiv	r3, r2, r3
 8005468:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005476:	691a      	ldr	r2, [r3, #16]
 8005478:	8afb      	ldrh	r3, [r7, #22]
 800547a:	04d9      	lsls	r1, r3, #19
 800547c:	4b39      	ldr	r3, [pc, #228]	; (8005564 <USB_EPStartXfer+0x484>)
 800547e:	400b      	ands	r3, r1
 8005480:	69b9      	ldr	r1, [r7, #24]
 8005482:	0148      	lsls	r0, r1, #5
 8005484:	69f9      	ldr	r1, [r7, #28]
 8005486:	4401      	add	r1, r0
 8005488:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800548c:	4313      	orrs	r3, r2
 800548e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549c:	691a      	ldr	r2, [r3, #16]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	8af9      	ldrh	r1, [r7, #22]
 80054a4:	fb01 f303 	mul.w	r3, r1, r3
 80054a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054ac:	69b9      	ldr	r1, [r7, #24]
 80054ae:	0148      	lsls	r0, r1, #5
 80054b0:	69f9      	ldr	r1, [r7, #28]
 80054b2:	4401      	add	r1, r0
 80054b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054b8:	4313      	orrs	r3, r2
 80054ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80054bc:	79fb      	ldrb	r3, [r7, #7]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d10d      	bne.n	80054de <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d009      	beq.n	80054de <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	68d9      	ldr	r1, [r3, #12]
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054da:	460a      	mov	r2, r1
 80054dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	78db      	ldrb	r3, [r3, #3]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d128      	bne.n	8005538 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d110      	bne.n	8005518 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	0151      	lsls	r1, r2, #5
 8005508:	69fa      	ldr	r2, [r7, #28]
 800550a:	440a      	add	r2, r1
 800550c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005510:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	e00f      	b.n	8005538 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	0151      	lsls	r1, r2, #5
 800552a:	69fa      	ldr	r2, [r7, #28]
 800552c:	440a      	add	r2, r1
 800552e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005536:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	0151      	lsls	r1, r2, #5
 800554a:	69fa      	ldr	r2, [r7, #28]
 800554c:	440a      	add	r2, r1
 800554e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005552:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005556:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3720      	adds	r7, #32
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	1ff80000 	.word	0x1ff80000

08005568 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	4613      	mov	r3, r2
 8005574:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	785b      	ldrb	r3, [r3, #1]
 8005584:	2b01      	cmp	r3, #1
 8005586:	f040 80cd 	bne.w	8005724 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d132      	bne.n	80055f8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	0151      	lsls	r1, r2, #5
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	440a      	add	r2, r1
 80055a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	0151      	lsls	r1, r2, #5
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	440a      	add	r2, r1
 80055cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	0151      	lsls	r1, r2, #5
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	440a      	add	r2, r1
 80055ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f0:	0cdb      	lsrs	r3, r3, #19
 80055f2:	04db      	lsls	r3, r3, #19
 80055f4:	6113      	str	r3, [r2, #16]
 80055f6:	e04e      	b.n	8005696 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	0151      	lsls	r1, r2, #5
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	440a      	add	r2, r1
 800560e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005612:	0cdb      	lsrs	r3, r3, #19
 8005614:	04db      	lsls	r3, r3, #19
 8005616:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	0151      	lsls	r1, r2, #5
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	440a      	add	r2, r1
 800562e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005632:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005636:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800563a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	695a      	ldr	r2, [r3, #20]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	429a      	cmp	r2, r3
 8005646:	d903      	bls.n	8005650 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	0151      	lsls	r1, r2, #5
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	440a      	add	r2, r1
 8005666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800566a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800566e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567c:	691a      	ldr	r2, [r3, #16]
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005686:	6939      	ldr	r1, [r7, #16]
 8005688:	0148      	lsls	r0, r1, #5
 800568a:	6979      	ldr	r1, [r7, #20]
 800568c:	4401      	add	r1, r0
 800568e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005692:	4313      	orrs	r3, r2
 8005694:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005696:	79fb      	ldrb	r3, [r7, #7]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d11e      	bne.n	80056da <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d009      	beq.n	80056b8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b0:	461a      	mov	r2, r3
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	0151      	lsls	r1, r2, #5
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	440a      	add	r2, r1
 80056ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	e092      	b.n	8005800 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	0151      	lsls	r1, r2, #5
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	440a      	add	r2, r1
 80056f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056f8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d07e      	beq.n	8005800 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	2101      	movs	r1, #1
 8005714:	fa01 f303 	lsl.w	r3, r1, r3
 8005718:	6979      	ldr	r1, [r7, #20]
 800571a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800571e:	4313      	orrs	r3, r2
 8005720:	634b      	str	r3, [r1, #52]	; 0x34
 8005722:	e06d      	b.n	8005800 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	0151      	lsls	r1, r2, #5
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	440a      	add	r2, r1
 800573a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800573e:	0cdb      	lsrs	r3, r3, #19
 8005740:	04db      	lsls	r3, r3, #19
 8005742:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	0151      	lsls	r1, r2, #5
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	440a      	add	r2, r1
 800575a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800575e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005762:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005766:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	0151      	lsls	r1, r2, #5
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	440a      	add	r2, r1
 800578e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005792:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005796:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a4:	691a      	ldr	r2, [r3, #16]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057ae:	6939      	ldr	r1, [r7, #16]
 80057b0:	0148      	lsls	r0, r1, #5
 80057b2:	6979      	ldr	r1, [r7, #20]
 80057b4:	4401      	add	r1, r0
 80057b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057ba:	4313      	orrs	r3, r2
 80057bc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80057be:	79fb      	ldrb	r3, [r7, #7]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d10d      	bne.n	80057e0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d009      	beq.n	80057e0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	68d9      	ldr	r1, [r3, #12]
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057dc:	460a      	mov	r2, r1
 80057de:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	0151      	lsls	r1, r2, #5
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	440a      	add	r2, r1
 80057f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	371c      	adds	r7, #28
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800580e:	b480      	push	{r7}
 8005810:	b089      	sub	sp, #36	; 0x24
 8005812:	af00      	add	r7, sp, #0
 8005814:	60f8      	str	r0, [r7, #12]
 8005816:	60b9      	str	r1, [r7, #8]
 8005818:	4611      	mov	r1, r2
 800581a:	461a      	mov	r2, r3
 800581c:	460b      	mov	r3, r1
 800581e:	71fb      	strb	r3, [r7, #7]
 8005820:	4613      	mov	r3, r2
 8005822:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800582c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005830:	2b00      	cmp	r3, #0
 8005832:	d123      	bne.n	800587c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005834:	88bb      	ldrh	r3, [r7, #4]
 8005836:	3303      	adds	r3, #3
 8005838:	089b      	lsrs	r3, r3, #2
 800583a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800583c:	2300      	movs	r3, #0
 800583e:	61bb      	str	r3, [r7, #24]
 8005840:	e018      	b.n	8005874 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	031a      	lsls	r2, r3, #12
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	4413      	add	r3, r2
 800584a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800584e:	461a      	mov	r2, r3
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	3301      	adds	r3, #1
 800585a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	3301      	adds	r3, #1
 8005860:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	3301      	adds	r3, #1
 8005866:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	3301      	adds	r3, #1
 800586c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	3301      	adds	r3, #1
 8005872:	61bb      	str	r3, [r7, #24]
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	429a      	cmp	r2, r3
 800587a:	d3e2      	bcc.n	8005842 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3724      	adds	r7, #36	; 0x24
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800588a:	b480      	push	{r7}
 800588c:	b08b      	sub	sp, #44	; 0x2c
 800588e:	af00      	add	r7, sp, #0
 8005890:	60f8      	str	r0, [r7, #12]
 8005892:	60b9      	str	r1, [r7, #8]
 8005894:	4613      	mov	r3, r2
 8005896:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80058a0:	88fb      	ldrh	r3, [r7, #6]
 80058a2:	089b      	lsrs	r3, r3, #2
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80058a8:	88fb      	ldrh	r3, [r7, #6]
 80058aa:	f003 0303 	and.w	r3, r3, #3
 80058ae:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80058b0:	2300      	movs	r3, #0
 80058b2:	623b      	str	r3, [r7, #32]
 80058b4:	e014      	b.n	80058e0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	601a      	str	r2, [r3, #0]
    pDest++;
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	3301      	adds	r3, #1
 80058c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	3301      	adds	r3, #1
 80058cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	3301      	adds	r3, #1
 80058d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	3301      	adds	r3, #1
 80058d8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	3301      	adds	r3, #1
 80058de:	623b      	str	r3, [r7, #32]
 80058e0:	6a3a      	ldr	r2, [r7, #32]
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d3e6      	bcc.n	80058b6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80058e8:	8bfb      	ldrh	r3, [r7, #30]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d01e      	beq.n	800592c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058f8:	461a      	mov	r2, r3
 80058fa:	f107 0310 	add.w	r3, r7, #16
 80058fe:	6812      	ldr	r2, [r2, #0]
 8005900:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	b2db      	uxtb	r3, r3
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	fa22 f303 	lsr.w	r3, r2, r3
 800590e:	b2da      	uxtb	r2, r3
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	701a      	strb	r2, [r3, #0]
      i++;
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	3301      	adds	r3, #1
 8005918:	623b      	str	r3, [r7, #32]
      pDest++;
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	3301      	adds	r3, #1
 800591e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005920:	8bfb      	ldrh	r3, [r7, #30]
 8005922:	3b01      	subs	r3, #1
 8005924:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005926:	8bfb      	ldrh	r3, [r7, #30]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1ea      	bne.n	8005902 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800592e:	4618      	mov	r0, r3
 8005930:	372c      	adds	r7, #44	; 0x2c
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800593a:	b480      	push	{r7}
 800593c:	b085      	sub	sp, #20
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
 8005942:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	785b      	ldrb	r3, [r3, #1]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d12c      	bne.n	80059b0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	db12      	blt.n	800598e <USB_EPSetStall+0x54>
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00f      	beq.n	800598e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	0151      	lsls	r1, r2, #5
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	440a      	add	r2, r1
 8005984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005988:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800598c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	4413      	add	r3, r2
 8005996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	0151      	lsls	r1, r2, #5
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	440a      	add	r2, r1
 80059a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	e02b      	b.n	8005a08 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	db12      	blt.n	80059e8 <USB_EPSetStall+0xae>
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00f      	beq.n	80059e8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	0151      	lsls	r1, r2, #5
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	440a      	add	r2, r1
 80059de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059e6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	0151      	lsls	r1, r2, #5
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	440a      	add	r2, r1
 80059fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b085      	sub	sp, #20
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
 8005a1e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	785b      	ldrb	r3, [r3, #1]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d128      	bne.n	8005a84 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	0151      	lsls	r1, r2, #5
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	440a      	add	r2, r1
 8005a48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a50:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	78db      	ldrb	r3, [r3, #3]
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	d003      	beq.n	8005a62 <USB_EPClearStall+0x4c>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	78db      	ldrb	r3, [r3, #3]
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d138      	bne.n	8005ad4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	0151      	lsls	r1, r2, #5
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	440a      	add	r2, r1
 8005a78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a80:	6013      	str	r3, [r2, #0]
 8005a82:	e027      	b.n	8005ad4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	0151      	lsls	r1, r2, #5
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	440a      	add	r2, r1
 8005a9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005aa2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	78db      	ldrb	r3, [r3, #3]
 8005aa8:	2b03      	cmp	r3, #3
 8005aaa:	d003      	beq.n	8005ab4 <USB_EPClearStall+0x9e>
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	78db      	ldrb	r3, [r3, #3]
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d10f      	bne.n	8005ad4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	0151      	lsls	r1, r2, #5
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	440a      	add	r2, r1
 8005aca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b085      	sub	sp, #20
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
 8005aea:	460b      	mov	r3, r1
 8005aec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b00:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b04:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	78fb      	ldrb	r3, [r7, #3]
 8005b10:	011b      	lsls	r3, r3, #4
 8005b12:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005b16:	68f9      	ldr	r1, [r7, #12]
 8005b18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b085      	sub	sp, #20
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b48:	f023 0303 	bic.w	r3, r3, #3
 8005b4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b5c:	f023 0302 	bic.w	r3, r3, #2
 8005b60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b8a:	f023 0303 	bic.w	r3, r3, #3
 8005b8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b9e:	f043 0302 	orr.w	r3, r3, #2
 8005ba2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b085      	sub	sp, #20
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005bca:	68fb      	ldr	r3, [r7, #12]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	0c1b      	lsrs	r3, r3, #16
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3714      	adds	r7, #20
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	b29b      	uxth	r3, r3
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005c50:	78fb      	ldrb	r3, [r7, #3]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3714      	adds	r7, #20
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	460b      	mov	r3, r1
 8005c86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c9e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005ca0:	78fb      	ldrb	r3, [r7, #3]
 8005ca2:	f003 030f 	and.w	r3, r3, #15
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cac:	01db      	lsls	r3, r3, #7
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005cb6:	78fb      	ldrb	r3, [r7, #3]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cca:	68bb      	ldr	r3, [r7, #8]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	371c      	adds	r7, #28
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	f003 0301 	and.w	r3, r3, #1
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005d12:	f023 0307 	bic.w	r3, r3, #7
 8005d16:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d2a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
	...

08005d3c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	460b      	mov	r3, r1
 8005d46:	607a      	str	r2, [r7, #4]
 8005d48:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	333c      	adds	r3, #60	; 0x3c
 8005d52:	3304      	adds	r3, #4
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	4a26      	ldr	r2, [pc, #152]	; (8005df4 <USB_EP0_OutStart+0xb8>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d90a      	bls.n	8005d76 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d70:	d101      	bne.n	8005d76 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	e037      	b.n	8005de6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	2300      	movs	r3, #0
 8005d80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005da4:	f043 0318 	orr.w	r3, r3, #24
 8005da8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005db8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005dbc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005dbe:	7afb      	ldrb	r3, [r7, #11]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d10f      	bne.n	8005de4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dca:	461a      	mov	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dde:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005de2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	4f54300a 	.word	0x4f54300a

08005df8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	3301      	adds	r3, #1
 8005e08:	60fb      	str	r3, [r7, #12]
 8005e0a:	4a13      	ldr	r2, [pc, #76]	; (8005e58 <USB_CoreReset+0x60>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d901      	bls.n	8005e14 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e01a      	b.n	8005e4a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	daf3      	bge.n	8005e04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	f043 0201 	orr.w	r2, r3, #1
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	4a09      	ldr	r2, [pc, #36]	; (8005e58 <USB_CoreReset+0x60>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d901      	bls.n	8005e3c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e006      	b.n	8005e4a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d0f1      	beq.n	8005e2c <USB_CoreReset+0x34>

  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	00030d40 	.word	0x00030d40

08005e5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	460b      	mov	r3, r1
 8005e66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005e68:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005e6c:	f002 f9b8 	bl	80081e0 <USBD_static_malloc>
 8005e70:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d105      	bne.n	8005e84 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005e80:	2302      	movs	r3, #2
 8005e82:	e066      	b.n	8005f52 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	7c1b      	ldrb	r3, [r3, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d119      	bne.n	8005ec8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e98:	2202      	movs	r2, #2
 8005e9a:	2181      	movs	r1, #129	; 0x81
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f002 f87c 	bl	8007f9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005eac:	2202      	movs	r2, #2
 8005eae:	2101      	movs	r1, #1
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f002 f872 	bl	8007f9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2210      	movs	r2, #16
 8005ec2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005ec6:	e016      	b.n	8005ef6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ec8:	2340      	movs	r3, #64	; 0x40
 8005eca:	2202      	movs	r2, #2
 8005ecc:	2181      	movs	r1, #129	; 0x81
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f002 f863 	bl	8007f9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005eda:	2340      	movs	r3, #64	; 0x40
 8005edc:	2202      	movs	r2, #2
 8005ede:	2101      	movs	r1, #1
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f002 f85a 	bl	8007f9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2210      	movs	r2, #16
 8005ef2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005ef6:	2308      	movs	r3, #8
 8005ef8:	2203      	movs	r2, #3
 8005efa:	2182      	movs	r1, #130	; 0x82
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f002 f84c 	bl	8007f9a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	7c1b      	ldrb	r3, [r3, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d109      	bne.n	8005f40 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f36:	2101      	movs	r1, #1
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f002 f91d 	bl	8008178 <USBD_LL_PrepareReceive>
 8005f3e:	e007      	b.n	8005f50 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f46:	2340      	movs	r3, #64	; 0x40
 8005f48:	2101      	movs	r1, #1
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f002 f914 	bl	8008178 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b082      	sub	sp, #8
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	460b      	mov	r3, r1
 8005f64:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005f66:	2181      	movs	r1, #129	; 0x81
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f002 f83c 	bl	8007fe6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005f74:	2101      	movs	r1, #1
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f002 f835 	bl	8007fe6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005f84:	2182      	movs	r1, #130	; 0x82
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f002 f82d 	bl	8007fe6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00e      	beq.n	8005fc4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f002 f920 	bl	80081fc <USBD_static_free>
    pdev->pClassData = NULL;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fe0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e0af      	b.n	8006158 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006000:	2b00      	cmp	r3, #0
 8006002:	d03f      	beq.n	8006084 <USBD_CDC_Setup+0xb4>
 8006004:	2b20      	cmp	r3, #32
 8006006:	f040 809f 	bne.w	8006148 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	88db      	ldrh	r3, [r3, #6]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d02e      	beq.n	8006070 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	b25b      	sxtb	r3, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	da16      	bge.n	800604a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006028:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	88d2      	ldrh	r2, [r2, #6]
 800602e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	88db      	ldrh	r3, [r3, #6]
 8006034:	2b07      	cmp	r3, #7
 8006036:	bf28      	it	cs
 8006038:	2307      	movcs	r3, #7
 800603a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	89fa      	ldrh	r2, [r7, #14]
 8006040:	4619      	mov	r1, r3
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f001 fae9 	bl	800761a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006048:	e085      	b.n	8006156 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	785a      	ldrb	r2, [r3, #1]
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	88db      	ldrh	r3, [r3, #6]
 8006058:	b2da      	uxtb	r2, r3
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006060:	6939      	ldr	r1, [r7, #16]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	88db      	ldrh	r3, [r3, #6]
 8006066:	461a      	mov	r2, r3
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f001 fb02 	bl	8007672 <USBD_CtlPrepareRx>
      break;
 800606e:	e072      	b.n	8006156 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	7850      	ldrb	r0, [r2, #1]
 800607c:	2200      	movs	r2, #0
 800607e:	6839      	ldr	r1, [r7, #0]
 8006080:	4798      	blx	r3
      break;
 8006082:	e068      	b.n	8006156 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	785b      	ldrb	r3, [r3, #1]
 8006088:	2b0b      	cmp	r3, #11
 800608a:	d852      	bhi.n	8006132 <USBD_CDC_Setup+0x162>
 800608c:	a201      	add	r2, pc, #4	; (adr r2, 8006094 <USBD_CDC_Setup+0xc4>)
 800608e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006092:	bf00      	nop
 8006094:	080060c5 	.word	0x080060c5
 8006098:	08006141 	.word	0x08006141
 800609c:	08006133 	.word	0x08006133
 80060a0:	08006133 	.word	0x08006133
 80060a4:	08006133 	.word	0x08006133
 80060a8:	08006133 	.word	0x08006133
 80060ac:	08006133 	.word	0x08006133
 80060b0:	08006133 	.word	0x08006133
 80060b4:	08006133 	.word	0x08006133
 80060b8:	08006133 	.word	0x08006133
 80060bc:	080060ef 	.word	0x080060ef
 80060c0:	08006119 	.word	0x08006119
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b03      	cmp	r3, #3
 80060ce:	d107      	bne.n	80060e0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80060d0:	f107 030a 	add.w	r3, r7, #10
 80060d4:	2202      	movs	r2, #2
 80060d6:	4619      	mov	r1, r3
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f001 fa9e 	bl	800761a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060de:	e032      	b.n	8006146 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80060e0:	6839      	ldr	r1, [r7, #0]
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f001 fa28 	bl	8007538 <USBD_CtlError>
            ret = USBD_FAIL;
 80060e8:	2303      	movs	r3, #3
 80060ea:	75fb      	strb	r3, [r7, #23]
          break;
 80060ec:	e02b      	b.n	8006146 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b03      	cmp	r3, #3
 80060f8:	d107      	bne.n	800610a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80060fa:	f107 030d 	add.w	r3, r7, #13
 80060fe:	2201      	movs	r2, #1
 8006100:	4619      	mov	r1, r3
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f001 fa89 	bl	800761a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006108:	e01d      	b.n	8006146 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800610a:	6839      	ldr	r1, [r7, #0]
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f001 fa13 	bl	8007538 <USBD_CtlError>
            ret = USBD_FAIL;
 8006112:	2303      	movs	r3, #3
 8006114:	75fb      	strb	r3, [r7, #23]
          break;
 8006116:	e016      	b.n	8006146 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b03      	cmp	r3, #3
 8006122:	d00f      	beq.n	8006144 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006124:	6839      	ldr	r1, [r7, #0]
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f001 fa06 	bl	8007538 <USBD_CtlError>
            ret = USBD_FAIL;
 800612c:	2303      	movs	r3, #3
 800612e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006130:	e008      	b.n	8006144 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006132:	6839      	ldr	r1, [r7, #0]
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f001 f9ff 	bl	8007538 <USBD_CtlError>
          ret = USBD_FAIL;
 800613a:	2303      	movs	r3, #3
 800613c:	75fb      	strb	r3, [r7, #23]
          break;
 800613e:	e002      	b.n	8006146 <USBD_CDC_Setup+0x176>
          break;
 8006140:	bf00      	nop
 8006142:	e008      	b.n	8006156 <USBD_CDC_Setup+0x186>
          break;
 8006144:	bf00      	nop
      }
      break;
 8006146:	e006      	b.n	8006156 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f001 f9f4 	bl	8007538 <USBD_CtlError>
      ret = USBD_FAIL;
 8006150:	2303      	movs	r3, #3
 8006152:	75fb      	strb	r3, [r7, #23]
      break;
 8006154:	bf00      	nop
  }

  return (uint8_t)ret;
 8006156:	7dfb      	ldrb	r3, [r7, #23]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3718      	adds	r7, #24
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	460b      	mov	r3, r1
 800616a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006172:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800617e:	2303      	movs	r3, #3
 8006180:	e04f      	b.n	8006222 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006188:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800618a:	78fa      	ldrb	r2, [r7, #3]
 800618c:	6879      	ldr	r1, [r7, #4]
 800618e:	4613      	mov	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	440b      	add	r3, r1
 8006198:	3318      	adds	r3, #24
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d029      	beq.n	80061f4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80061a0:	78fa      	ldrb	r2, [r7, #3]
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	4613      	mov	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	440b      	add	r3, r1
 80061ae:	3318      	adds	r3, #24
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	78f9      	ldrb	r1, [r7, #3]
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	460b      	mov	r3, r1
 80061b8:	00db      	lsls	r3, r3, #3
 80061ba:	1a5b      	subs	r3, r3, r1
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4403      	add	r3, r0
 80061c0:	3344      	adds	r3, #68	; 0x44
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	fbb2 f1f3 	udiv	r1, r2, r3
 80061c8:	fb03 f301 	mul.w	r3, r3, r1
 80061cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d110      	bne.n	80061f4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80061d2:	78fa      	ldrb	r2, [r7, #3]
 80061d4:	6879      	ldr	r1, [r7, #4]
 80061d6:	4613      	mov	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4413      	add	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	440b      	add	r3, r1
 80061e0:	3318      	adds	r3, #24
 80061e2:	2200      	movs	r2, #0
 80061e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80061e6:	78f9      	ldrb	r1, [r7, #3]
 80061e8:	2300      	movs	r3, #0
 80061ea:	2200      	movs	r2, #0
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f001 ffa2 	bl	8008136 <USBD_LL_Transmit>
 80061f2:	e015      	b.n	8006220 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00b      	beq.n	8006220 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800621c:	78fa      	ldrb	r2, [r7, #3]
 800621e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	460b      	mov	r3, r1
 8006234:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800623c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006248:	2303      	movs	r3, #3
 800624a:	e015      	b.n	8006278 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800624c:	78fb      	ldrb	r3, [r7, #3]
 800624e:	4619      	mov	r1, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f001 ffb2 	bl	80081ba <USBD_LL_GetRxDataSize>
 8006256:	4602      	mov	r2, r0
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006272:	4611      	mov	r1, r2
 8006274:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800628e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006296:	2303      	movs	r3, #3
 8006298:	e01b      	b.n	80062d2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d015      	beq.n	80062d0 <USBD_CDC_EP0_RxReady+0x50>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80062aa:	2bff      	cmp	r3, #255	; 0xff
 80062ac:	d010      	beq.n	80062d0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80062bc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80062c4:	b292      	uxth	r2, r2
 80062c6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	22ff      	movs	r2, #255	; 0xff
 80062cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
	...

080062dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2243      	movs	r2, #67	; 0x43
 80062e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80062ea:	4b03      	ldr	r3, [pc, #12]	; (80062f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	2000009c 	.word	0x2000009c

080062fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2243      	movs	r2, #67	; 0x43
 8006308:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800630a:	4b03      	ldr	r3, [pc, #12]	; (8006318 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800630c:	4618      	mov	r0, r3
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	20000058 	.word	0x20000058

0800631c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2243      	movs	r2, #67	; 0x43
 8006328:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800632a:	4b03      	ldr	r3, [pc, #12]	; (8006338 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800632c:	4618      	mov	r0, r3
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	200000e0 	.word	0x200000e0

0800633c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	220a      	movs	r2, #10
 8006348:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800634a:	4b03      	ldr	r3, [pc, #12]	; (8006358 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800634c:	4618      	mov	r0, r3
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	20000014 	.word	0x20000014

0800635c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800636c:	2303      	movs	r3, #3
 800636e:	e004      	b.n	800637a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006386:	b480      	push	{r7}
 8006388:	b087      	sub	sp, #28
 800638a:	af00      	add	r7, sp, #0
 800638c:	60f8      	str	r0, [r7, #12]
 800638e:	60b9      	str	r1, [r7, #8]
 8006390:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006398:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e008      	b.n	80063b6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	371c      	adds	r7, #28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b085      	sub	sp, #20
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063d2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80063da:	2303      	movs	r3, #3
 80063dc:	e004      	b.n	80063e8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006402:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800640e:	2303      	movs	r3, #3
 8006410:	e016      	b.n	8006440 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	7c1b      	ldrb	r3, [r3, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d109      	bne.n	800642e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006420:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006424:	2101      	movs	r1, #1
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f001 fea6 	bl	8008178 <USBD_LL_PrepareReceive>
 800642c:	e007      	b.n	800643e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006434:	2340      	movs	r3, #64	; 0x40
 8006436:	2101      	movs	r1, #1
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f001 fe9d 	bl	8008178 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	4613      	mov	r3, r2
 8006454:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d101      	bne.n	8006460 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800645c:	2303      	movs	r3, #3
 800645e:	e01f      	b.n	80064a0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	79fa      	ldrb	r2, [r7, #7]
 8006492:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f001 fd19 	bl	8007ecc <USBD_LL_Init>
 800649a:	4603      	mov	r3, r0
 800649c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800649e:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3718      	adds	r7, #24
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80064b2:	2300      	movs	r3, #0
 80064b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d101      	bne.n	80064c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80064bc:	2303      	movs	r3, #3
 80064be:	e016      	b.n	80064ee <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00b      	beq.n	80064ec <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064dc:	f107 020e 	add.w	r2, r7, #14
 80064e0:	4610      	mov	r0, r2
 80064e2:	4798      	blx	r3
 80064e4:	4602      	mov	r2, r0
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b082      	sub	sp, #8
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f001 fd30 	bl	8007f64 <USBD_LL_Start>
 8006504:	4603      	mov	r3, r0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800650e:	b480      	push	{r7}
 8006510:	b083      	sub	sp, #12
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	460b      	mov	r3, r1
 800652e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006530:	2303      	movs	r3, #3
 8006532:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800653a:	2b00      	cmp	r3, #0
 800653c:	d009      	beq.n	8006552 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	78fa      	ldrb	r2, [r7, #3]
 8006548:	4611      	mov	r1, r2
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	4798      	blx	r3
 800654e:	4603      	mov	r3, r0
 8006550:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006552:	7bfb      	ldrb	r3, [r7, #15]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800656e:	2b00      	cmp	r3, #0
 8006570:	d007      	beq.n	8006582 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	78fa      	ldrb	r2, [r7, #3]
 800657c:	4611      	mov	r1, r2
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	4798      	blx	r3
  }

  return USBD_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3708      	adds	r7, #8
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800659c:	6839      	ldr	r1, [r7, #0]
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 ff90 	bl	80074c4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80065b2:	461a      	mov	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80065c0:	f003 031f 	and.w	r3, r3, #31
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d01a      	beq.n	80065fe <USBD_LL_SetupStage+0x72>
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d822      	bhi.n	8006612 <USBD_LL_SetupStage+0x86>
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <USBD_LL_SetupStage+0x4a>
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d00a      	beq.n	80065ea <USBD_LL_SetupStage+0x5e>
 80065d4:	e01d      	b.n	8006612 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80065dc:	4619      	mov	r1, r3
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fa62 	bl	8006aa8 <USBD_StdDevReq>
 80065e4:	4603      	mov	r3, r0
 80065e6:	73fb      	strb	r3, [r7, #15]
      break;
 80065e8:	e020      	b.n	800662c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80065f0:	4619      	mov	r1, r3
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 fac6 	bl	8006b84 <USBD_StdItfReq>
 80065f8:	4603      	mov	r3, r0
 80065fa:	73fb      	strb	r3, [r7, #15]
      break;
 80065fc:	e016      	b.n	800662c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006604:	4619      	mov	r1, r3
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fb05 	bl	8006c16 <USBD_StdEPReq>
 800660c:	4603      	mov	r3, r0
 800660e:	73fb      	strb	r3, [r7, #15]
      break;
 8006610:	e00c      	b.n	800662c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006618:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800661c:	b2db      	uxtb	r3, r3
 800661e:	4619      	mov	r1, r3
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f001 fcff 	bl	8008024 <USBD_LL_StallEP>
 8006626:	4603      	mov	r3, r0
 8006628:	73fb      	strb	r3, [r7, #15]
      break;
 800662a:	bf00      	nop
  }

  return ret;
 800662c:	7bfb      	ldrb	r3, [r7, #15]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b086      	sub	sp, #24
 800663a:	af00      	add	r7, sp, #0
 800663c:	60f8      	str	r0, [r7, #12]
 800663e:	460b      	mov	r3, r1
 8006640:	607a      	str	r2, [r7, #4]
 8006642:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006644:	7afb      	ldrb	r3, [r7, #11]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d138      	bne.n	80066bc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006650:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006658:	2b03      	cmp	r3, #3
 800665a:	d14a      	bne.n	80066f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	429a      	cmp	r2, r3
 8006666:	d913      	bls.n	8006690 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	689a      	ldr	r2, [r3, #8]
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	1ad2      	subs	r2, r2, r3
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	68da      	ldr	r2, [r3, #12]
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	4293      	cmp	r3, r2
 8006680:	bf28      	it	cs
 8006682:	4613      	movcs	r3, r2
 8006684:	461a      	mov	r2, r3
 8006686:	6879      	ldr	r1, [r7, #4]
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f001 f80f 	bl	80076ac <USBD_CtlContinueRx>
 800668e:	e030      	b.n	80066f2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b03      	cmp	r3, #3
 800669a:	d10b      	bne.n	80066b4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d005      	beq.n	80066b4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f001 f80a 	bl	80076ce <USBD_CtlSendStatus>
 80066ba:	e01a      	b.n	80066f2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b03      	cmp	r3, #3
 80066c6:	d114      	bne.n	80066f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00e      	beq.n	80066f2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	7afa      	ldrb	r2, [r7, #11]
 80066de:	4611      	mov	r1, r2
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	4798      	blx	r3
 80066e4:	4603      	mov	r3, r0
 80066e6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80066e8:	7dfb      	ldrb	r3, [r7, #23]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80066ee:	7dfb      	ldrb	r3, [r7, #23]
 80066f0:	e000      	b.n	80066f4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3718      	adds	r7, #24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	460b      	mov	r3, r1
 8006706:	607a      	str	r2, [r7, #4]
 8006708:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800670a:	7afb      	ldrb	r3, [r7, #11]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d16b      	bne.n	80067e8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	3314      	adds	r3, #20
 8006714:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800671c:	2b02      	cmp	r3, #2
 800671e:	d156      	bne.n	80067ce <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	689a      	ldr	r2, [r3, #8]
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	429a      	cmp	r2, r3
 800672a:	d914      	bls.n	8006756 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	689a      	ldr	r2, [r3, #8]
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	1ad2      	subs	r2, r2, r3
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	461a      	mov	r2, r3
 8006740:	6879      	ldr	r1, [r7, #4]
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 ff84 	bl	8007650 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006748:	2300      	movs	r3, #0
 800674a:	2200      	movs	r2, #0
 800674c:	2100      	movs	r1, #0
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f001 fd12 	bl	8008178 <USBD_LL_PrepareReceive>
 8006754:	e03b      	b.n	80067ce <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	68da      	ldr	r2, [r3, #12]
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	429a      	cmp	r2, r3
 8006760:	d11c      	bne.n	800679c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800676a:	429a      	cmp	r2, r3
 800676c:	d316      	bcc.n	800679c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	685a      	ldr	r2, [r3, #4]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006778:	429a      	cmp	r2, r3
 800677a:	d20f      	bcs.n	800679c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800677c:	2200      	movs	r2, #0
 800677e:	2100      	movs	r1, #0
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f000 ff65 	bl	8007650 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800678e:	2300      	movs	r3, #0
 8006790:	2200      	movs	r2, #0
 8006792:	2100      	movs	r1, #0
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f001 fcef 	bl	8008178 <USBD_LL_PrepareReceive>
 800679a:	e018      	b.n	80067ce <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	2b03      	cmp	r3, #3
 80067a6:	d10b      	bne.n	80067c0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d005      	beq.n	80067c0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80067c0:	2180      	movs	r1, #128	; 0x80
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f001 fc2e 	bl	8008024 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 ff93 	bl	80076f4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d122      	bne.n	800681e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f7ff fe98 	bl	800650e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80067e6:	e01a      	b.n	800681e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b03      	cmp	r3, #3
 80067f2:	d114      	bne.n	800681e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00e      	beq.n	800681e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	7afa      	ldrb	r2, [r7, #11]
 800680a:	4611      	mov	r1, r2
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	4798      	blx	r3
 8006810:	4603      	mov	r3, r0
 8006812:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006814:	7dfb      	ldrb	r3, [r7, #23]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800681a:	7dfb      	ldrb	r3, [r7, #23]
 800681c:	e000      	b.n	8006820 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3718      	adds	r7, #24
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006858:	2303      	movs	r3, #3
 800685a:	e02f      	b.n	80068bc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00f      	beq.n	8006886 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d009      	beq.n	8006886 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	6852      	ldr	r2, [r2, #4]
 800687e:	b2d2      	uxtb	r2, r2
 8006880:	4611      	mov	r1, r2
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006886:	2340      	movs	r3, #64	; 0x40
 8006888:	2200      	movs	r2, #0
 800688a:	2100      	movs	r1, #0
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f001 fb84 	bl	8007f9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2240      	movs	r2, #64	; 0x40
 800689e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068a2:	2340      	movs	r3, #64	; 0x40
 80068a4:	2200      	movs	r2, #0
 80068a6:	2180      	movs	r1, #128	; 0x80
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f001 fb76 	bl	8007f9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2240      	movs	r2, #64	; 0x40
 80068b8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	460b      	mov	r3, r1
 80068ce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	78fa      	ldrb	r2, [r7, #3]
 80068d4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2204      	movs	r2, #4
 80068fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b04      	cmp	r3, #4
 8006922:	d106      	bne.n	8006932 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800692a:	b2da      	uxtb	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006952:	2303      	movs	r3, #3
 8006954:	e012      	b.n	800697c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b03      	cmp	r3, #3
 8006960:	d10b      	bne.n	800697a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006968:	69db      	ldr	r3, [r3, #28]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d005      	beq.n	800697a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	460b      	mov	r3, r1
 800698e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800699a:	2303      	movs	r3, #3
 800699c:	e014      	b.n	80069c8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b03      	cmp	r3, #3
 80069a8:	d10d      	bne.n	80069c6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d007      	beq.n	80069c6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	78fa      	ldrb	r2, [r7, #3]
 80069c0:	4611      	mov	r1, r2
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3708      	adds	r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	460b      	mov	r3, r1
 80069da:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e014      	b.n	8006a14 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b03      	cmp	r3, #3
 80069f4:	d10d      	bne.n	8006a12 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d007      	beq.n	8006a12 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	78fa      	ldrb	r2, [r7, #3]
 8006a0c:	4611      	mov	r1, r2
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b082      	sub	sp, #8
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d009      	beq.n	8006a60 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	6852      	ldr	r2, [r2, #4]
 8006a58:	b2d2      	uxtb	r2, r2
 8006a5a:	4611      	mov	r1, r2
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	4798      	blx	r3
  }

  return USBD_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b087      	sub	sp, #28
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006a88:	8a3b      	ldrh	r3, [r7, #16]
 8006a8a:	021b      	lsls	r3, r3, #8
 8006a8c:	b21a      	sxth	r2, r3
 8006a8e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	b21b      	sxth	r3, r3
 8006a96:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006a98:	89fb      	ldrh	r3, [r7, #14]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	371c      	adds	r7, #28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
	...

08006aa8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006abe:	2b40      	cmp	r3, #64	; 0x40
 8006ac0:	d005      	beq.n	8006ace <USBD_StdDevReq+0x26>
 8006ac2:	2b40      	cmp	r3, #64	; 0x40
 8006ac4:	d853      	bhi.n	8006b6e <USBD_StdDevReq+0xc6>
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00b      	beq.n	8006ae2 <USBD_StdDevReq+0x3a>
 8006aca:	2b20      	cmp	r3, #32
 8006acc:	d14f      	bne.n	8006b6e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	4798      	blx	r3
 8006adc:	4603      	mov	r3, r0
 8006ade:	73fb      	strb	r3, [r7, #15]
      break;
 8006ae0:	e04a      	b.n	8006b78 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	785b      	ldrb	r3, [r3, #1]
 8006ae6:	2b09      	cmp	r3, #9
 8006ae8:	d83b      	bhi.n	8006b62 <USBD_StdDevReq+0xba>
 8006aea:	a201      	add	r2, pc, #4	; (adr r2, 8006af0 <USBD_StdDevReq+0x48>)
 8006aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af0:	08006b45 	.word	0x08006b45
 8006af4:	08006b59 	.word	0x08006b59
 8006af8:	08006b63 	.word	0x08006b63
 8006afc:	08006b4f 	.word	0x08006b4f
 8006b00:	08006b63 	.word	0x08006b63
 8006b04:	08006b23 	.word	0x08006b23
 8006b08:	08006b19 	.word	0x08006b19
 8006b0c:	08006b63 	.word	0x08006b63
 8006b10:	08006b3b 	.word	0x08006b3b
 8006b14:	08006b2d 	.word	0x08006b2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b18:	6839      	ldr	r1, [r7, #0]
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f9de 	bl	8006edc <USBD_GetDescriptor>
          break;
 8006b20:	e024      	b.n	8006b6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b22:	6839      	ldr	r1, [r7, #0]
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fb43 	bl	80071b0 <USBD_SetAddress>
          break;
 8006b2a:	e01f      	b.n	8006b6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fb82 	bl	8007238 <USBD_SetConfig>
 8006b34:	4603      	mov	r3, r0
 8006b36:	73fb      	strb	r3, [r7, #15]
          break;
 8006b38:	e018      	b.n	8006b6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b3a:	6839      	ldr	r1, [r7, #0]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fc21 	bl	8007384 <USBD_GetConfig>
          break;
 8006b42:	e013      	b.n	8006b6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b44:	6839      	ldr	r1, [r7, #0]
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fc52 	bl	80073f0 <USBD_GetStatus>
          break;
 8006b4c:	e00e      	b.n	8006b6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b4e:	6839      	ldr	r1, [r7, #0]
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fc81 	bl	8007458 <USBD_SetFeature>
          break;
 8006b56:	e009      	b.n	8006b6c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b58:	6839      	ldr	r1, [r7, #0]
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fc90 	bl	8007480 <USBD_ClrFeature>
          break;
 8006b60:	e004      	b.n	8006b6c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006b62:	6839      	ldr	r1, [r7, #0]
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fce7 	bl	8007538 <USBD_CtlError>
          break;
 8006b6a:	bf00      	nop
      }
      break;
 8006b6c:	e004      	b.n	8006b78 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fce1 	bl	8007538 <USBD_CtlError>
      break;
 8006b76:	bf00      	nop
  }

  return ret;
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop

08006b84 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b9a:	2b40      	cmp	r3, #64	; 0x40
 8006b9c:	d005      	beq.n	8006baa <USBD_StdItfReq+0x26>
 8006b9e:	2b40      	cmp	r3, #64	; 0x40
 8006ba0:	d82f      	bhi.n	8006c02 <USBD_StdItfReq+0x7e>
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <USBD_StdItfReq+0x26>
 8006ba6:	2b20      	cmp	r3, #32
 8006ba8:	d12b      	bne.n	8006c02 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d81d      	bhi.n	8006bf4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	889b      	ldrh	r3, [r3, #4]
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d813      	bhi.n	8006bea <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	6839      	ldr	r1, [r7, #0]
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	4798      	blx	r3
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	88db      	ldrh	r3, [r3, #6]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d110      	bne.n	8006bfe <USBD_StdItfReq+0x7a>
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10d      	bne.n	8006bfe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fd73 	bl	80076ce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006be8:	e009      	b.n	8006bfe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006bea:	6839      	ldr	r1, [r7, #0]
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fca3 	bl	8007538 <USBD_CtlError>
          break;
 8006bf2:	e004      	b.n	8006bfe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fc9e 	bl	8007538 <USBD_CtlError>
          break;
 8006bfc:	e000      	b.n	8006c00 <USBD_StdItfReq+0x7c>
          break;
 8006bfe:	bf00      	nop
      }
      break;
 8006c00:	e004      	b.n	8006c0c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006c02:	6839      	ldr	r1, [r7, #0]
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fc97 	bl	8007538 <USBD_CtlError>
      break;
 8006c0a:	bf00      	nop
  }

  return ret;
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b084      	sub	sp, #16
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
 8006c1e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c20:	2300      	movs	r3, #0
 8006c22:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	889b      	ldrh	r3, [r3, #4]
 8006c28:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c32:	2b40      	cmp	r3, #64	; 0x40
 8006c34:	d007      	beq.n	8006c46 <USBD_StdEPReq+0x30>
 8006c36:	2b40      	cmp	r3, #64	; 0x40
 8006c38:	f200 8145 	bhi.w	8006ec6 <USBD_StdEPReq+0x2b0>
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00c      	beq.n	8006c5a <USBD_StdEPReq+0x44>
 8006c40:	2b20      	cmp	r3, #32
 8006c42:	f040 8140 	bne.w	8006ec6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	4798      	blx	r3
 8006c54:	4603      	mov	r3, r0
 8006c56:	73fb      	strb	r3, [r7, #15]
      break;
 8006c58:	e13a      	b.n	8006ed0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	785b      	ldrb	r3, [r3, #1]
 8006c5e:	2b03      	cmp	r3, #3
 8006c60:	d007      	beq.n	8006c72 <USBD_StdEPReq+0x5c>
 8006c62:	2b03      	cmp	r3, #3
 8006c64:	f300 8129 	bgt.w	8006eba <USBD_StdEPReq+0x2a4>
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d07f      	beq.n	8006d6c <USBD_StdEPReq+0x156>
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d03c      	beq.n	8006cea <USBD_StdEPReq+0xd4>
 8006c70:	e123      	b.n	8006eba <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d002      	beq.n	8006c84 <USBD_StdEPReq+0x6e>
 8006c7e:	2b03      	cmp	r3, #3
 8006c80:	d016      	beq.n	8006cb0 <USBD_StdEPReq+0x9a>
 8006c82:	e02c      	b.n	8006cde <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c84:	7bbb      	ldrb	r3, [r7, #14]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00d      	beq.n	8006ca6 <USBD_StdEPReq+0x90>
 8006c8a:	7bbb      	ldrb	r3, [r7, #14]
 8006c8c:	2b80      	cmp	r3, #128	; 0x80
 8006c8e:	d00a      	beq.n	8006ca6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c90:	7bbb      	ldrb	r3, [r7, #14]
 8006c92:	4619      	mov	r1, r3
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f001 f9c5 	bl	8008024 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c9a:	2180      	movs	r1, #128	; 0x80
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f001 f9c1 	bl	8008024 <USBD_LL_StallEP>
 8006ca2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ca4:	e020      	b.n	8006ce8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fc45 	bl	8007538 <USBD_CtlError>
              break;
 8006cae:	e01b      	b.n	8006ce8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	885b      	ldrh	r3, [r3, #2]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10e      	bne.n	8006cd6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006cb8:	7bbb      	ldrb	r3, [r7, #14]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00b      	beq.n	8006cd6 <USBD_StdEPReq+0xc0>
 8006cbe:	7bbb      	ldrb	r3, [r7, #14]
 8006cc0:	2b80      	cmp	r3, #128	; 0x80
 8006cc2:	d008      	beq.n	8006cd6 <USBD_StdEPReq+0xc0>
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	88db      	ldrh	r3, [r3, #6]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d104      	bne.n	8006cd6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ccc:	7bbb      	ldrb	r3, [r7, #14]
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f001 f9a7 	bl	8008024 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fcf9 	bl	80076ce <USBD_CtlSendStatus>

              break;
 8006cdc:	e004      	b.n	8006ce8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006cde:	6839      	ldr	r1, [r7, #0]
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fc29 	bl	8007538 <USBD_CtlError>
              break;
 8006ce6:	bf00      	nop
          }
          break;
 8006ce8:	e0ec      	b.n	8006ec4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d002      	beq.n	8006cfc <USBD_StdEPReq+0xe6>
 8006cf6:	2b03      	cmp	r3, #3
 8006cf8:	d016      	beq.n	8006d28 <USBD_StdEPReq+0x112>
 8006cfa:	e030      	b.n	8006d5e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cfc:	7bbb      	ldrb	r3, [r7, #14]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00d      	beq.n	8006d1e <USBD_StdEPReq+0x108>
 8006d02:	7bbb      	ldrb	r3, [r7, #14]
 8006d04:	2b80      	cmp	r3, #128	; 0x80
 8006d06:	d00a      	beq.n	8006d1e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d08:	7bbb      	ldrb	r3, [r7, #14]
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f001 f989 	bl	8008024 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d12:	2180      	movs	r1, #128	; 0x80
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f001 f985 	bl	8008024 <USBD_LL_StallEP>
 8006d1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d1c:	e025      	b.n	8006d6a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 fc09 	bl	8007538 <USBD_CtlError>
              break;
 8006d26:	e020      	b.n	8006d6a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	885b      	ldrh	r3, [r3, #2]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d11b      	bne.n	8006d68 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d30:	7bbb      	ldrb	r3, [r7, #14]
 8006d32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d004      	beq.n	8006d44 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d3a:	7bbb      	ldrb	r3, [r7, #14]
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f001 f98f 	bl	8008062 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 fcc2 	bl	80076ce <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	6839      	ldr	r1, [r7, #0]
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	4798      	blx	r3
 8006d58:	4603      	mov	r3, r0
 8006d5a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006d5c:	e004      	b.n	8006d68 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fbe9 	bl	8007538 <USBD_CtlError>
              break;
 8006d66:	e000      	b.n	8006d6a <USBD_StdEPReq+0x154>
              break;
 8006d68:	bf00      	nop
          }
          break;
 8006d6a:	e0ab      	b.n	8006ec4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d002      	beq.n	8006d7e <USBD_StdEPReq+0x168>
 8006d78:	2b03      	cmp	r3, #3
 8006d7a:	d032      	beq.n	8006de2 <USBD_StdEPReq+0x1cc>
 8006d7c:	e097      	b.n	8006eae <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d7e:	7bbb      	ldrb	r3, [r7, #14]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d007      	beq.n	8006d94 <USBD_StdEPReq+0x17e>
 8006d84:	7bbb      	ldrb	r3, [r7, #14]
 8006d86:	2b80      	cmp	r3, #128	; 0x80
 8006d88:	d004      	beq.n	8006d94 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006d8a:	6839      	ldr	r1, [r7, #0]
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fbd3 	bl	8007538 <USBD_CtlError>
                break;
 8006d92:	e091      	b.n	8006eb8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	da0b      	bge.n	8006db4 <USBD_StdEPReq+0x19e>
 8006d9c:	7bbb      	ldrb	r3, [r7, #14]
 8006d9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006da2:	4613      	mov	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	3310      	adds	r3, #16
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	4413      	add	r3, r2
 8006db0:	3304      	adds	r3, #4
 8006db2:	e00b      	b.n	8006dcc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006db4:	7bbb      	ldrb	r3, [r7, #14]
 8006db6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dba:	4613      	mov	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4413      	add	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	4413      	add	r3, r2
 8006dca:	3304      	adds	r3, #4
 8006dcc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fc1d 	bl	800761a <USBD_CtlSendData>
              break;
 8006de0:	e06a      	b.n	8006eb8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006de2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	da11      	bge.n	8006e0e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006dea:	7bbb      	ldrb	r3, [r7, #14]
 8006dec:	f003 020f 	and.w	r2, r3, #15
 8006df0:	6879      	ldr	r1, [r7, #4]
 8006df2:	4613      	mov	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	440b      	add	r3, r1
 8006dfc:	3324      	adds	r3, #36	; 0x24
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d117      	bne.n	8006e34 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006e04:	6839      	ldr	r1, [r7, #0]
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 fb96 	bl	8007538 <USBD_CtlError>
                  break;
 8006e0c:	e054      	b.n	8006eb8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e0e:	7bbb      	ldrb	r3, [r7, #14]
 8006e10:	f003 020f 	and.w	r2, r3, #15
 8006e14:	6879      	ldr	r1, [r7, #4]
 8006e16:	4613      	mov	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	440b      	add	r3, r1
 8006e20:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d104      	bne.n	8006e34 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006e2a:	6839      	ldr	r1, [r7, #0]
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 fb83 	bl	8007538 <USBD_CtlError>
                  break;
 8006e32:	e041      	b.n	8006eb8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	da0b      	bge.n	8006e54 <USBD_StdEPReq+0x23e>
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
 8006e3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e42:	4613      	mov	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	3310      	adds	r3, #16
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	4413      	add	r3, r2
 8006e50:	3304      	adds	r3, #4
 8006e52:	e00b      	b.n	8006e6c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e54:	7bbb      	ldrb	r3, [r7, #14]
 8006e56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	4413      	add	r3, r2
 8006e6a:	3304      	adds	r3, #4
 8006e6c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e6e:	7bbb      	ldrb	r3, [r7, #14]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <USBD_StdEPReq+0x264>
 8006e74:	7bbb      	ldrb	r3, [r7, #14]
 8006e76:	2b80      	cmp	r3, #128	; 0x80
 8006e78:	d103      	bne.n	8006e82 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	601a      	str	r2, [r3, #0]
 8006e80:	e00e      	b.n	8006ea0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006e82:	7bbb      	ldrb	r3, [r7, #14]
 8006e84:	4619      	mov	r1, r3
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f001 f90a 	bl	80080a0 <USBD_LL_IsStallEP>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2201      	movs	r2, #1
 8006e96:	601a      	str	r2, [r3, #0]
 8006e98:	e002      	b.n	8006ea0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fbb7 	bl	800761a <USBD_CtlSendData>
              break;
 8006eac:	e004      	b.n	8006eb8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006eae:	6839      	ldr	r1, [r7, #0]
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fb41 	bl	8007538 <USBD_CtlError>
              break;
 8006eb6:	bf00      	nop
          }
          break;
 8006eb8:	e004      	b.n	8006ec4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006eba:	6839      	ldr	r1, [r7, #0]
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 fb3b 	bl	8007538 <USBD_CtlError>
          break;
 8006ec2:	bf00      	nop
      }
      break;
 8006ec4:	e004      	b.n	8006ed0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006ec6:	6839      	ldr	r1, [r7, #0]
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fb35 	bl	8007538 <USBD_CtlError>
      break;
 8006ece:	bf00      	nop
  }

  return ret;
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
	...

08006edc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006eea:	2300      	movs	r3, #0
 8006eec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	885b      	ldrh	r3, [r3, #2]
 8006ef6:	0a1b      	lsrs	r3, r3, #8
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	3b01      	subs	r3, #1
 8006efc:	2b06      	cmp	r3, #6
 8006efe:	f200 8128 	bhi.w	8007152 <USBD_GetDescriptor+0x276>
 8006f02:	a201      	add	r2, pc, #4	; (adr r2, 8006f08 <USBD_GetDescriptor+0x2c>)
 8006f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f08:	08006f25 	.word	0x08006f25
 8006f0c:	08006f3d 	.word	0x08006f3d
 8006f10:	08006f7d 	.word	0x08006f7d
 8006f14:	08007153 	.word	0x08007153
 8006f18:	08007153 	.word	0x08007153
 8006f1c:	080070f3 	.word	0x080070f3
 8006f20:	0800711f 	.word	0x0800711f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	7c12      	ldrb	r2, [r2, #16]
 8006f30:	f107 0108 	add.w	r1, r7, #8
 8006f34:	4610      	mov	r0, r2
 8006f36:	4798      	blx	r3
 8006f38:	60f8      	str	r0, [r7, #12]
      break;
 8006f3a:	e112      	b.n	8007162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	7c1b      	ldrb	r3, [r3, #16]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10d      	bne.n	8006f60 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4c:	f107 0208 	add.w	r2, r7, #8
 8006f50:	4610      	mov	r0, r2
 8006f52:	4798      	blx	r3
 8006f54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f5e:	e100      	b.n	8007162 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	f107 0208 	add.w	r2, r7, #8
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	4798      	blx	r3
 8006f70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	3301      	adds	r3, #1
 8006f76:	2202      	movs	r2, #2
 8006f78:	701a      	strb	r2, [r3, #0]
      break;
 8006f7a:	e0f2      	b.n	8007162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	885b      	ldrh	r3, [r3, #2]
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b05      	cmp	r3, #5
 8006f84:	f200 80ac 	bhi.w	80070e0 <USBD_GetDescriptor+0x204>
 8006f88:	a201      	add	r2, pc, #4	; (adr r2, 8006f90 <USBD_GetDescriptor+0xb4>)
 8006f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8e:	bf00      	nop
 8006f90:	08006fa9 	.word	0x08006fa9
 8006f94:	08006fdd 	.word	0x08006fdd
 8006f98:	08007011 	.word	0x08007011
 8006f9c:	08007045 	.word	0x08007045
 8006fa0:	08007079 	.word	0x08007079
 8006fa4:	080070ad 	.word	0x080070ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00b      	beq.n	8006fcc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	7c12      	ldrb	r2, [r2, #16]
 8006fc0:	f107 0108 	add.w	r1, r7, #8
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	4798      	blx	r3
 8006fc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fca:	e091      	b.n	80070f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fab2 	bl	8007538 <USBD_CtlError>
            err++;
 8006fd4:	7afb      	ldrb	r3, [r7, #11]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	72fb      	strb	r3, [r7, #11]
          break;
 8006fda:	e089      	b.n	80070f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00b      	beq.n	8007000 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	7c12      	ldrb	r2, [r2, #16]
 8006ff4:	f107 0108 	add.w	r1, r7, #8
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	4798      	blx	r3
 8006ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ffe:	e077      	b.n	80070f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fa98 	bl	8007538 <USBD_CtlError>
            err++;
 8007008:	7afb      	ldrb	r3, [r7, #11]
 800700a:	3301      	adds	r3, #1
 800700c:	72fb      	strb	r3, [r7, #11]
          break;
 800700e:	e06f      	b.n	80070f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00b      	beq.n	8007034 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	7c12      	ldrb	r2, [r2, #16]
 8007028:	f107 0108 	add.w	r1, r7, #8
 800702c:	4610      	mov	r0, r2
 800702e:	4798      	blx	r3
 8007030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007032:	e05d      	b.n	80070f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007034:	6839      	ldr	r1, [r7, #0]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fa7e 	bl	8007538 <USBD_CtlError>
            err++;
 800703c:	7afb      	ldrb	r3, [r7, #11]
 800703e:	3301      	adds	r3, #1
 8007040:	72fb      	strb	r3, [r7, #11]
          break;
 8007042:	e055      	b.n	80070f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00b      	beq.n	8007068 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	7c12      	ldrb	r2, [r2, #16]
 800705c:	f107 0108 	add.w	r1, r7, #8
 8007060:	4610      	mov	r0, r2
 8007062:	4798      	blx	r3
 8007064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007066:	e043      	b.n	80070f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007068:	6839      	ldr	r1, [r7, #0]
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fa64 	bl	8007538 <USBD_CtlError>
            err++;
 8007070:	7afb      	ldrb	r3, [r7, #11]
 8007072:	3301      	adds	r3, #1
 8007074:	72fb      	strb	r3, [r7, #11]
          break;
 8007076:	e03b      	b.n	80070f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800707e:	695b      	ldr	r3, [r3, #20]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00b      	beq.n	800709c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	7c12      	ldrb	r2, [r2, #16]
 8007090:	f107 0108 	add.w	r1, r7, #8
 8007094:	4610      	mov	r0, r2
 8007096:	4798      	blx	r3
 8007098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800709a:	e029      	b.n	80070f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fa4a 	bl	8007538 <USBD_CtlError>
            err++;
 80070a4:	7afb      	ldrb	r3, [r7, #11]
 80070a6:	3301      	adds	r3, #1
 80070a8:	72fb      	strb	r3, [r7, #11]
          break;
 80070aa:	e021      	b.n	80070f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00b      	beq.n	80070d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	7c12      	ldrb	r2, [r2, #16]
 80070c4:	f107 0108 	add.w	r1, r7, #8
 80070c8:	4610      	mov	r0, r2
 80070ca:	4798      	blx	r3
 80070cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070ce:	e00f      	b.n	80070f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fa30 	bl	8007538 <USBD_CtlError>
            err++;
 80070d8:	7afb      	ldrb	r3, [r7, #11]
 80070da:	3301      	adds	r3, #1
 80070dc:	72fb      	strb	r3, [r7, #11]
          break;
 80070de:	e007      	b.n	80070f0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fa28 	bl	8007538 <USBD_CtlError>
          err++;
 80070e8:	7afb      	ldrb	r3, [r7, #11]
 80070ea:	3301      	adds	r3, #1
 80070ec:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80070ee:	bf00      	nop
      }
      break;
 80070f0:	e037      	b.n	8007162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	7c1b      	ldrb	r3, [r3, #16]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d109      	bne.n	800710e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007102:	f107 0208 	add.w	r2, r7, #8
 8007106:	4610      	mov	r0, r2
 8007108:	4798      	blx	r3
 800710a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800710c:	e029      	b.n	8007162 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fa11 	bl	8007538 <USBD_CtlError>
        err++;
 8007116:	7afb      	ldrb	r3, [r7, #11]
 8007118:	3301      	adds	r3, #1
 800711a:	72fb      	strb	r3, [r7, #11]
      break;
 800711c:	e021      	b.n	8007162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	7c1b      	ldrb	r3, [r3, #16]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10d      	bne.n	8007142 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800712c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712e:	f107 0208 	add.w	r2, r7, #8
 8007132:	4610      	mov	r0, r2
 8007134:	4798      	blx	r3
 8007136:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3301      	adds	r3, #1
 800713c:	2207      	movs	r2, #7
 800713e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007140:	e00f      	b.n	8007162 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f9f7 	bl	8007538 <USBD_CtlError>
        err++;
 800714a:	7afb      	ldrb	r3, [r7, #11]
 800714c:	3301      	adds	r3, #1
 800714e:	72fb      	strb	r3, [r7, #11]
      break;
 8007150:	e007      	b.n	8007162 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f9ef 	bl	8007538 <USBD_CtlError>
      err++;
 800715a:	7afb      	ldrb	r3, [r7, #11]
 800715c:	3301      	adds	r3, #1
 800715e:	72fb      	strb	r3, [r7, #11]
      break;
 8007160:	bf00      	nop
  }

  if (err != 0U)
 8007162:	7afb      	ldrb	r3, [r7, #11]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d11e      	bne.n	80071a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	88db      	ldrh	r3, [r3, #6]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d016      	beq.n	800719e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007170:	893b      	ldrh	r3, [r7, #8]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00e      	beq.n	8007194 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	88da      	ldrh	r2, [r3, #6]
 800717a:	893b      	ldrh	r3, [r7, #8]
 800717c:	4293      	cmp	r3, r2
 800717e:	bf28      	it	cs
 8007180:	4613      	movcs	r3, r2
 8007182:	b29b      	uxth	r3, r3
 8007184:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007186:	893b      	ldrh	r3, [r7, #8]
 8007188:	461a      	mov	r2, r3
 800718a:	68f9      	ldr	r1, [r7, #12]
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fa44 	bl	800761a <USBD_CtlSendData>
 8007192:	e009      	b.n	80071a8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007194:	6839      	ldr	r1, [r7, #0]
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f9ce 	bl	8007538 <USBD_CtlError>
 800719c:	e004      	b.n	80071a8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fa95 	bl	80076ce <USBD_CtlSendStatus>
 80071a4:	e000      	b.n	80071a8 <USBD_GetDescriptor+0x2cc>
    return;
 80071a6:	bf00      	nop
  }
}
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop

080071b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	889b      	ldrh	r3, [r3, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d131      	bne.n	8007226 <USBD_SetAddress+0x76>
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	88db      	ldrh	r3, [r3, #6]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d12d      	bne.n	8007226 <USBD_SetAddress+0x76>
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	885b      	ldrh	r3, [r3, #2]
 80071ce:	2b7f      	cmp	r3, #127	; 0x7f
 80071d0:	d829      	bhi.n	8007226 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	885b      	ldrh	r3, [r3, #2]
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b03      	cmp	r3, #3
 80071e8:	d104      	bne.n	80071f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f9a3 	bl	8007538 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071f2:	e01d      	b.n	8007230 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	7bfa      	ldrb	r2, [r7, #15]
 80071f8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
 80071fe:	4619      	mov	r1, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 ff79 	bl	80080f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fa61 	bl	80076ce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800720c:	7bfb      	ldrb	r3, [r7, #15]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d004      	beq.n	800721c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2202      	movs	r2, #2
 8007216:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800721a:	e009      	b.n	8007230 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007224:	e004      	b.n	8007230 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f985 	bl	8007538 <USBD_CtlError>
  }
}
 800722e:	bf00      	nop
 8007230:	bf00      	nop
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007242:	2300      	movs	r3, #0
 8007244:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	885b      	ldrh	r3, [r3, #2]
 800724a:	b2da      	uxtb	r2, r3
 800724c:	4b4c      	ldr	r3, [pc, #304]	; (8007380 <USBD_SetConfig+0x148>)
 800724e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007250:	4b4b      	ldr	r3, [pc, #300]	; (8007380 <USBD_SetConfig+0x148>)
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d905      	bls.n	8007264 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f96c 	bl	8007538 <USBD_CtlError>
    return USBD_FAIL;
 8007260:	2303      	movs	r3, #3
 8007262:	e088      	b.n	8007376 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b02      	cmp	r3, #2
 800726e:	d002      	beq.n	8007276 <USBD_SetConfig+0x3e>
 8007270:	2b03      	cmp	r3, #3
 8007272:	d025      	beq.n	80072c0 <USBD_SetConfig+0x88>
 8007274:	e071      	b.n	800735a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007276:	4b42      	ldr	r3, [pc, #264]	; (8007380 <USBD_SetConfig+0x148>)
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d01c      	beq.n	80072b8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800727e:	4b40      	ldr	r3, [pc, #256]	; (8007380 <USBD_SetConfig+0x148>)
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007288:	4b3d      	ldr	r3, [pc, #244]	; (8007380 <USBD_SetConfig+0x148>)
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7ff f948 	bl	8006524 <USBD_SetClassConfig>
 8007294:	4603      	mov	r3, r0
 8007296:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007298:	7bfb      	ldrb	r3, [r7, #15]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d004      	beq.n	80072a8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800729e:	6839      	ldr	r1, [r7, #0]
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f949 	bl	8007538 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072a6:	e065      	b.n	8007374 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fa10 	bl	80076ce <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2203      	movs	r2, #3
 80072b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80072b6:	e05d      	b.n	8007374 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fa08 	bl	80076ce <USBD_CtlSendStatus>
      break;
 80072be:	e059      	b.n	8007374 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80072c0:	4b2f      	ldr	r3, [pc, #188]	; (8007380 <USBD_SetConfig+0x148>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d112      	bne.n	80072ee <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2202      	movs	r2, #2
 80072cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80072d0:	4b2b      	ldr	r3, [pc, #172]	; (8007380 <USBD_SetConfig+0x148>)
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	461a      	mov	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80072da:	4b29      	ldr	r3, [pc, #164]	; (8007380 <USBD_SetConfig+0x148>)
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	4619      	mov	r1, r3
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f7ff f93b 	bl	800655c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f9f1 	bl	80076ce <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072ec:	e042      	b.n	8007374 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80072ee:	4b24      	ldr	r3, [pc, #144]	; (8007380 <USBD_SetConfig+0x148>)
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	461a      	mov	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d02a      	beq.n	8007352 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	b2db      	uxtb	r3, r3
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f7ff f929 	bl	800655c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800730a:	4b1d      	ldr	r3, [pc, #116]	; (8007380 <USBD_SetConfig+0x148>)
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	461a      	mov	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007314:	4b1a      	ldr	r3, [pc, #104]	; (8007380 <USBD_SetConfig+0x148>)
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	4619      	mov	r1, r3
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7ff f902 	bl	8006524 <USBD_SetClassConfig>
 8007320:	4603      	mov	r3, r0
 8007322:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007324:	7bfb      	ldrb	r3, [r7, #15]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00f      	beq.n	800734a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800732a:	6839      	ldr	r1, [r7, #0]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f903 	bl	8007538 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	b2db      	uxtb	r3, r3
 8007338:	4619      	mov	r1, r3
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7ff f90e 	bl	800655c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2202      	movs	r2, #2
 8007344:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007348:	e014      	b.n	8007374 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f9bf 	bl	80076ce <USBD_CtlSendStatus>
      break;
 8007350:	e010      	b.n	8007374 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f9bb 	bl	80076ce <USBD_CtlSendStatus>
      break;
 8007358:	e00c      	b.n	8007374 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f8eb 	bl	8007538 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007362:	4b07      	ldr	r3, [pc, #28]	; (8007380 <USBD_SetConfig+0x148>)
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	4619      	mov	r1, r3
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7ff f8f7 	bl	800655c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800736e:	2303      	movs	r3, #3
 8007370:	73fb      	strb	r3, [r7, #15]
      break;
 8007372:	bf00      	nop
  }

  return ret;
 8007374:	7bfb      	ldrb	r3, [r7, #15]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	20000614 	.word	0x20000614

08007384 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	88db      	ldrh	r3, [r3, #6]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d004      	beq.n	80073a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007396:	6839      	ldr	r1, [r7, #0]
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f8cd 	bl	8007538 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800739e:	e023      	b.n	80073e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	dc02      	bgt.n	80073b2 <USBD_GetConfig+0x2e>
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	dc03      	bgt.n	80073b8 <USBD_GetConfig+0x34>
 80073b0:	e015      	b.n	80073de <USBD_GetConfig+0x5a>
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	d00b      	beq.n	80073ce <USBD_GetConfig+0x4a>
 80073b6:	e012      	b.n	80073de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	3308      	adds	r3, #8
 80073c2:	2201      	movs	r2, #1
 80073c4:	4619      	mov	r1, r3
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f927 	bl	800761a <USBD_CtlSendData>
        break;
 80073cc:	e00c      	b.n	80073e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	3304      	adds	r3, #4
 80073d2:	2201      	movs	r2, #1
 80073d4:	4619      	mov	r1, r3
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f91f 	bl	800761a <USBD_CtlSendData>
        break;
 80073dc:	e004      	b.n	80073e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80073de:	6839      	ldr	r1, [r7, #0]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f8a9 	bl	8007538 <USBD_CtlError>
        break;
 80073e6:	bf00      	nop
}
 80073e8:	bf00      	nop
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007400:	b2db      	uxtb	r3, r3
 8007402:	3b01      	subs	r3, #1
 8007404:	2b02      	cmp	r3, #2
 8007406:	d81e      	bhi.n	8007446 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	88db      	ldrh	r3, [r3, #6]
 800740c:	2b02      	cmp	r3, #2
 800740e:	d004      	beq.n	800741a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007410:	6839      	ldr	r1, [r7, #0]
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f890 	bl	8007538 <USBD_CtlError>
        break;
 8007418:	e01a      	b.n	8007450 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007426:	2b00      	cmp	r3, #0
 8007428:	d005      	beq.n	8007436 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	f043 0202 	orr.w	r2, r3, #2
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	330c      	adds	r3, #12
 800743a:	2202      	movs	r2, #2
 800743c:	4619      	mov	r1, r3
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f8eb 	bl	800761a <USBD_CtlSendData>
      break;
 8007444:	e004      	b.n	8007450 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007446:	6839      	ldr	r1, [r7, #0]
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 f875 	bl	8007538 <USBD_CtlError>
      break;
 800744e:	bf00      	nop
  }
}
 8007450:	bf00      	nop
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	885b      	ldrh	r3, [r3, #2]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d106      	bne.n	8007478 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f92b 	bl	80076ce <USBD_CtlSendStatus>
  }
}
 8007478:	bf00      	nop
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007490:	b2db      	uxtb	r3, r3
 8007492:	3b01      	subs	r3, #1
 8007494:	2b02      	cmp	r3, #2
 8007496:	d80b      	bhi.n	80074b0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	885b      	ldrh	r3, [r3, #2]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d10c      	bne.n	80074ba <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 f910 	bl	80076ce <USBD_CtlSendStatus>
      }
      break;
 80074ae:	e004      	b.n	80074ba <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80074b0:	6839      	ldr	r1, [r7, #0]
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f840 	bl	8007538 <USBD_CtlError>
      break;
 80074b8:	e000      	b.n	80074bc <USBD_ClrFeature+0x3c>
      break;
 80074ba:	bf00      	nop
  }
}
 80074bc:	bf00      	nop
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	781a      	ldrb	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	3301      	adds	r3, #1
 80074de:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	781a      	ldrb	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	3301      	adds	r3, #1
 80074ec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f7ff fabb 	bl	8006a6a <SWAPBYTE>
 80074f4:	4603      	mov	r3, r0
 80074f6:	461a      	mov	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	3301      	adds	r3, #1
 8007500:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	3301      	adds	r3, #1
 8007506:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f7ff faae 	bl	8006a6a <SWAPBYTE>
 800750e:	4603      	mov	r3, r0
 8007510:	461a      	mov	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	3301      	adds	r3, #1
 800751a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	3301      	adds	r3, #1
 8007520:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f7ff faa1 	bl	8006a6a <SWAPBYTE>
 8007528:	4603      	mov	r3, r0
 800752a:	461a      	mov	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	80da      	strh	r2, [r3, #6]
}
 8007530:	bf00      	nop
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007542:	2180      	movs	r1, #128	; 0x80
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fd6d 	bl	8008024 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800754a:	2100      	movs	r1, #0
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fd69 	bl	8008024 <USBD_LL_StallEP>
}
 8007552:	bf00      	nop
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b086      	sub	sp, #24
 800755e:	af00      	add	r7, sp, #0
 8007560:	60f8      	str	r0, [r7, #12]
 8007562:	60b9      	str	r1, [r7, #8]
 8007564:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007566:	2300      	movs	r3, #0
 8007568:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d036      	beq.n	80075de <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007574:	6938      	ldr	r0, [r7, #16]
 8007576:	f000 f836 	bl	80075e6 <USBD_GetLen>
 800757a:	4603      	mov	r3, r0
 800757c:	3301      	adds	r3, #1
 800757e:	b29b      	uxth	r3, r3
 8007580:	005b      	lsls	r3, r3, #1
 8007582:	b29a      	uxth	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007588:	7dfb      	ldrb	r3, [r7, #23]
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	4413      	add	r3, r2
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	7812      	ldrb	r2, [r2, #0]
 8007592:	701a      	strb	r2, [r3, #0]
  idx++;
 8007594:	7dfb      	ldrb	r3, [r7, #23]
 8007596:	3301      	adds	r3, #1
 8007598:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800759a:	7dfb      	ldrb	r3, [r7, #23]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	4413      	add	r3, r2
 80075a0:	2203      	movs	r2, #3
 80075a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80075a4:	7dfb      	ldrb	r3, [r7, #23]
 80075a6:	3301      	adds	r3, #1
 80075a8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80075aa:	e013      	b.n	80075d4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80075ac:	7dfb      	ldrb	r3, [r7, #23]
 80075ae:	68ba      	ldr	r2, [r7, #8]
 80075b0:	4413      	add	r3, r2
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	7812      	ldrb	r2, [r2, #0]
 80075b6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	3301      	adds	r3, #1
 80075bc:	613b      	str	r3, [r7, #16]
    idx++;
 80075be:	7dfb      	ldrb	r3, [r7, #23]
 80075c0:	3301      	adds	r3, #1
 80075c2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80075c4:	7dfb      	ldrb	r3, [r7, #23]
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	4413      	add	r3, r2
 80075ca:	2200      	movs	r2, #0
 80075cc:	701a      	strb	r2, [r3, #0]
    idx++;
 80075ce:	7dfb      	ldrb	r3, [r7, #23]
 80075d0:	3301      	adds	r3, #1
 80075d2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1e7      	bne.n	80075ac <USBD_GetString+0x52>
 80075dc:	e000      	b.n	80075e0 <USBD_GetString+0x86>
    return;
 80075de:	bf00      	nop
  }
}
 80075e0:	3718      	adds	r7, #24
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b085      	sub	sp, #20
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80075f6:	e005      	b.n	8007604 <USBD_GetLen+0x1e>
  {
    len++;
 80075f8:	7bfb      	ldrb	r3, [r7, #15]
 80075fa:	3301      	adds	r3, #1
 80075fc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	3301      	adds	r3, #1
 8007602:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1f5      	bne.n	80075f8 <USBD_GetLen+0x12>
  }

  return len;
 800760c:	7bfb      	ldrb	r3, [r7, #15]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b084      	sub	sp, #16
 800761e:	af00      	add	r7, sp, #0
 8007620:	60f8      	str	r0, [r7, #12]
 8007622:	60b9      	str	r1, [r7, #8]
 8007624:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2202      	movs	r2, #2
 800762a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	2100      	movs	r1, #0
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f000 fd78 	bl	8008136 <USBD_LL_Transmit>

  return USBD_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	2100      	movs	r1, #0
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f000 fd67 	bl	8008136 <USBD_LL_Transmit>

  return USBD_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b084      	sub	sp, #16
 8007676:	af00      	add	r7, sp, #0
 8007678:	60f8      	str	r0, [r7, #12]
 800767a:	60b9      	str	r1, [r7, #8]
 800767c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2203      	movs	r2, #3
 8007682:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	2100      	movs	r1, #0
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f000 fd6b 	bl	8008178 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	2100      	movs	r1, #0
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f000 fd5a 	bl	8008178 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b082      	sub	sp, #8
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2204      	movs	r2, #4
 80076da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80076de:	2300      	movs	r3, #0
 80076e0:	2200      	movs	r2, #0
 80076e2:	2100      	movs	r1, #0
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fd26 	bl	8008136 <USBD_LL_Transmit>

  return USBD_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2205      	movs	r2, #5
 8007700:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007704:	2300      	movs	r3, #0
 8007706:	2200      	movs	r2, #0
 8007708:	2100      	movs	r1, #0
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fd34 	bl	8008178 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
	...

0800771c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007720:	2200      	movs	r2, #0
 8007722:	4912      	ldr	r1, [pc, #72]	; (800776c <MX_USB_DEVICE_Init+0x50>)
 8007724:	4812      	ldr	r0, [pc, #72]	; (8007770 <MX_USB_DEVICE_Init+0x54>)
 8007726:	f7fe fe8f 	bl	8006448 <USBD_Init>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d001      	beq.n	8007734 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007730:	f7f9 f916 	bl	8000960 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007734:	490f      	ldr	r1, [pc, #60]	; (8007774 <MX_USB_DEVICE_Init+0x58>)
 8007736:	480e      	ldr	r0, [pc, #56]	; (8007770 <MX_USB_DEVICE_Init+0x54>)
 8007738:	f7fe feb6 	bl	80064a8 <USBD_RegisterClass>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007742:	f7f9 f90d 	bl	8000960 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007746:	490c      	ldr	r1, [pc, #48]	; (8007778 <MX_USB_DEVICE_Init+0x5c>)
 8007748:	4809      	ldr	r0, [pc, #36]	; (8007770 <MX_USB_DEVICE_Init+0x54>)
 800774a:	f7fe fe07 	bl	800635c <USBD_CDC_RegisterInterface>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007754:	f7f9 f904 	bl	8000960 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007758:	4805      	ldr	r0, [pc, #20]	; (8007770 <MX_USB_DEVICE_Init+0x54>)
 800775a:	f7fe fecc 	bl	80064f6 <USBD_Start>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007764:	f7f9 f8fc 	bl	8000960 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007768:	bf00      	nop
 800776a:	bd80      	pop	{r7, pc}
 800776c:	20000138 	.word	0x20000138
 8007770:	20000b38 	.word	0x20000b38
 8007774:	20000020 	.word	0x20000020
 8007778:	20000124 	.word	0x20000124

0800777c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007782:	2200      	movs	r2, #0
 8007784:	4915      	ldr	r1, [pc, #84]	; (80077dc <CDC_Init_FS+0x60>)
 8007786:	4816      	ldr	r0, [pc, #88]	; (80077e0 <CDC_Init_FS+0x64>)
 8007788:	f7fe fdfd 	bl	8006386 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800778c:	4915      	ldr	r1, [pc, #84]	; (80077e4 <CDC_Init_FS+0x68>)
 800778e:	4814      	ldr	r0, [pc, #80]	; (80077e0 <CDC_Init_FS+0x64>)
 8007790:	f7fe fe17 	bl	80063c2 <USBD_CDC_SetRxBuffer>

	// https://stackoverflow.com/a/26925578
	uint32_t baudrate = 9600;
 8007794:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8007798:	607b      	str	r3, [r7, #4]
	lcBuffer[0] = (uint8_t) (baudrate);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	b2da      	uxtb	r2, r3
 800779e:	4b12      	ldr	r3, [pc, #72]	; (80077e8 <CDC_Init_FS+0x6c>)
 80077a0:	701a      	strb	r2, [r3, #0]
	lcBuffer[1] = (uint8_t) (baudrate >> 8);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	0a1b      	lsrs	r3, r3, #8
 80077a6:	b2da      	uxtb	r2, r3
 80077a8:	4b0f      	ldr	r3, [pc, #60]	; (80077e8 <CDC_Init_FS+0x6c>)
 80077aa:	705a      	strb	r2, [r3, #1]
	lcBuffer[2] = (uint8_t) (baudrate >> 16);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	0c1b      	lsrs	r3, r3, #16
 80077b0:	b2da      	uxtb	r2, r3
 80077b2:	4b0d      	ldr	r3, [pc, #52]	; (80077e8 <CDC_Init_FS+0x6c>)
 80077b4:	709a      	strb	r2, [r3, #2]
	lcBuffer[3] = (uint8_t) (baudrate >> 24);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	0e1b      	lsrs	r3, r3, #24
 80077ba:	b2da      	uxtb	r2, r3
 80077bc:	4b0a      	ldr	r3, [pc, #40]	; (80077e8 <CDC_Init_FS+0x6c>)
 80077be:	70da      	strb	r2, [r3, #3]
	lcBuffer[4] = 0; // 1 Stop bit
 80077c0:	4b09      	ldr	r3, [pc, #36]	; (80077e8 <CDC_Init_FS+0x6c>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	711a      	strb	r2, [r3, #4]
	lcBuffer[5] = 0; // No parity
 80077c6:	4b08      	ldr	r3, [pc, #32]	; (80077e8 <CDC_Init_FS+0x6c>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	715a      	strb	r2, [r3, #5]
	lcBuffer[6] = 8; // 8 data bits
 80077cc:	4b06      	ldr	r3, [pc, #24]	; (80077e8 <CDC_Init_FS+0x6c>)
 80077ce:	2208      	movs	r2, #8
 80077d0:	719a      	strb	r2, [r3, #6]

	return (USBD_OK);
 80077d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	20001608 	.word	0x20001608
 80077e0:	20000b38 	.word	0x20000b38
 80077e4:	20000e08 	.word	0x20000e08
 80077e8:	20001f08 	.word	0x20001f08

080077ec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80077ec:	b480      	push	{r7}
 80077ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 80077f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	4603      	mov	r3, r0
 8007804:	6039      	str	r1, [r7, #0]
 8007806:	71fb      	strb	r3, [r7, #7]
 8007808:	4613      	mov	r3, r2
 800780a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 800780c:	79fb      	ldrb	r3, [r7, #7]
 800780e:	2b23      	cmp	r3, #35	; 0x23
 8007810:	f200 808e 	bhi.w	8007930 <CDC_Control_FS+0x134>
 8007814:	a201      	add	r2, pc, #4	; (adr r2, 800781c <CDC_Control_FS+0x20>)
 8007816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781a:	bf00      	nop
 800781c:	08007931 	.word	0x08007931
 8007820:	08007931 	.word	0x08007931
 8007824:	08007931 	.word	0x08007931
 8007828:	08007931 	.word	0x08007931
 800782c:	08007931 	.word	0x08007931
 8007830:	08007931 	.word	0x08007931
 8007834:	08007931 	.word	0x08007931
 8007838:	08007931 	.word	0x08007931
 800783c:	08007931 	.word	0x08007931
 8007840:	08007931 	.word	0x08007931
 8007844:	08007931 	.word	0x08007931
 8007848:	08007931 	.word	0x08007931
 800784c:	08007931 	.word	0x08007931
 8007850:	08007931 	.word	0x08007931
 8007854:	08007931 	.word	0x08007931
 8007858:	08007931 	.word	0x08007931
 800785c:	08007931 	.word	0x08007931
 8007860:	08007931 	.word	0x08007931
 8007864:	08007931 	.word	0x08007931
 8007868:	08007931 	.word	0x08007931
 800786c:	08007931 	.word	0x08007931
 8007870:	08007931 	.word	0x08007931
 8007874:	08007931 	.word	0x08007931
 8007878:	08007931 	.word	0x08007931
 800787c:	08007931 	.word	0x08007931
 8007880:	08007931 	.word	0x08007931
 8007884:	08007931 	.word	0x08007931
 8007888:	08007931 	.word	0x08007931
 800788c:	08007931 	.word	0x08007931
 8007890:	08007931 	.word	0x08007931
 8007894:	08007931 	.word	0x08007931
 8007898:	08007931 	.word	0x08007931
 800789c:	080078ad 	.word	0x080078ad
 80078a0:	080078e7 	.word	0x080078e7
 80078a4:	08007931 	.word	0x08007931
 80078a8:	08007931 	.word	0x08007931
		/* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
		/*******************************************************************************/

		// https://github.com/philrawlings/bluepill-usb-cdc-test/blob/main/USB_DEVICE/App/usbd_cdc_if.c
	case CDC_SET_LINE_CODING:
		lcBuffer[0] = pbuf[0];
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	781a      	ldrb	r2, [r3, #0]
 80078b0:	4b22      	ldr	r3, [pc, #136]	; (800793c <CDC_Control_FS+0x140>)
 80078b2:	701a      	strb	r2, [r3, #0]
		lcBuffer[1] = pbuf[1];
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	785a      	ldrb	r2, [r3, #1]
 80078b8:	4b20      	ldr	r3, [pc, #128]	; (800793c <CDC_Control_FS+0x140>)
 80078ba:	705a      	strb	r2, [r3, #1]
		lcBuffer[2] = pbuf[2];
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	789a      	ldrb	r2, [r3, #2]
 80078c0:	4b1e      	ldr	r3, [pc, #120]	; (800793c <CDC_Control_FS+0x140>)
 80078c2:	709a      	strb	r2, [r3, #2]
		lcBuffer[3] = pbuf[3];
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	78da      	ldrb	r2, [r3, #3]
 80078c8:	4b1c      	ldr	r3, [pc, #112]	; (800793c <CDC_Control_FS+0x140>)
 80078ca:	70da      	strb	r2, [r3, #3]
		lcBuffer[4] = pbuf[4];
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	791a      	ldrb	r2, [r3, #4]
 80078d0:	4b1a      	ldr	r3, [pc, #104]	; (800793c <CDC_Control_FS+0x140>)
 80078d2:	711a      	strb	r2, [r3, #4]
		lcBuffer[5] = pbuf[5];
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	795a      	ldrb	r2, [r3, #5]
 80078d8:	4b18      	ldr	r3, [pc, #96]	; (800793c <CDC_Control_FS+0x140>)
 80078da:	715a      	strb	r2, [r3, #5]
		lcBuffer[6] = pbuf[6];
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	799a      	ldrb	r2, [r3, #6]
 80078e0:	4b16      	ldr	r3, [pc, #88]	; (800793c <CDC_Control_FS+0x140>)
 80078e2:	719a      	strb	r2, [r3, #6]
		break;
 80078e4:	e025      	b.n	8007932 <CDC_Control_FS+0x136>

	case CDC_GET_LINE_CODING:
		pbuf[0] = lcBuffer[0];
 80078e6:	4b15      	ldr	r3, [pc, #84]	; (800793c <CDC_Control_FS+0x140>)
 80078e8:	781a      	ldrb	r2, [r3, #0]
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	701a      	strb	r2, [r3, #0]
		pbuf[1] = lcBuffer[1];
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	3301      	adds	r3, #1
 80078f2:	4a12      	ldr	r2, [pc, #72]	; (800793c <CDC_Control_FS+0x140>)
 80078f4:	7852      	ldrb	r2, [r2, #1]
 80078f6:	701a      	strb	r2, [r3, #0]
		pbuf[2] = lcBuffer[2];
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	3302      	adds	r3, #2
 80078fc:	4a0f      	ldr	r2, [pc, #60]	; (800793c <CDC_Control_FS+0x140>)
 80078fe:	7892      	ldrb	r2, [r2, #2]
 8007900:	701a      	strb	r2, [r3, #0]
		pbuf[3] = lcBuffer[3];
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	3303      	adds	r3, #3
 8007906:	4a0d      	ldr	r2, [pc, #52]	; (800793c <CDC_Control_FS+0x140>)
 8007908:	78d2      	ldrb	r2, [r2, #3]
 800790a:	701a      	strb	r2, [r3, #0]
		pbuf[4] = lcBuffer[4];
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	3304      	adds	r3, #4
 8007910:	4a0a      	ldr	r2, [pc, #40]	; (800793c <CDC_Control_FS+0x140>)
 8007912:	7912      	ldrb	r2, [r2, #4]
 8007914:	701a      	strb	r2, [r3, #0]
		pbuf[5] = lcBuffer[5];
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	3305      	adds	r3, #5
 800791a:	4a08      	ldr	r2, [pc, #32]	; (800793c <CDC_Control_FS+0x140>)
 800791c:	7952      	ldrb	r2, [r2, #5]
 800791e:	701a      	strb	r2, [r3, #0]
		pbuf[6] = lcBuffer[6];
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	3306      	adds	r3, #6
 8007924:	4a05      	ldr	r2, [pc, #20]	; (800793c <CDC_Control_FS+0x140>)
 8007926:	7992      	ldrb	r2, [r2, #6]
 8007928:	701a      	strb	r2, [r3, #0]

		// Get line coding is invoked when the host connects, clear the RxBuffer when this occurs
		CDC_FlushRxBuffer_FS();
 800792a:	f000 f877 	bl	8007a1c <CDC_FlushRxBuffer_FS>

	case CDC_SET_CONTROL_LINE_STATE:

		break;
 800792e:	e000      	b.n	8007932 <CDC_Control_FS+0x136>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8007930:	bf00      	nop
	}

	return (USBD_OK);
 8007932:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007934:	4618      	mov	r0, r3
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	20001f08 	.word	0x20001f08

08007940 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800794a:	6879      	ldr	r1, [r7, #4]
 800794c:	480e      	ldr	r0, [pc, #56]	; (8007988 <CDC_Receive_FS+0x48>)
 800794e:	f7fe fd38 	bl	80063c2 <USBD_CDC_SetRxBuffer>

	uint8_t len = (uint8_t) *Len; // Get length
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	73fb      	strb	r3, [r7, #15]

	memset(rxBuffer, 0, HL_RX_BUFFER_SIZE);  // clear the buffer
 8007958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800795c:	2100      	movs	r1, #0
 800795e:	480b      	ldr	r0, [pc, #44]	; (800798c <CDC_Receive_FS+0x4c>)
 8007960:	f000 fcba 	bl	80082d8 <memset>
	memcpy(rxBuffer, Buf, len);  // copy the data to the buffer
 8007964:	7bfb      	ldrb	r3, [r7, #15]
 8007966:	461a      	mov	r2, r3
 8007968:	6879      	ldr	r1, [r7, #4]
 800796a:	4808      	ldr	r0, [pc, #32]	; (800798c <CDC_Receive_FS+0x4c>)
 800796c:	f000 fca6 	bl	80082bc <memcpy>
	memset(Buf, 0, len);   // clear the Buf also
 8007970:	7bfb      	ldrb	r3, [r7, #15]
 8007972:	461a      	mov	r2, r3
 8007974:	2100      	movs	r1, #0
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fcae 	bl	80082d8 <memset>



	return (USBD_OK);
 800797c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	20000b38 	.word	0x20000b38
 800798c:	20001e08 	.word	0x20001e08

08007990 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007990:	b480      	push	{r7}
 8007992:	b087      	sub	sp, #28
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	4613      	mov	r3, r2
 800799c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800799e:	2300      	movs	r3, #0
 80079a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80079a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	371c      	adds	r7, #28
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
	...

080079b4 <CDC_ReadRxBuffer_FS>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void CDC_ReadRxBuffer_FS(uint8_t *Buf, uint8_t Len) {
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	460b      	mov	r3, r1
 80079be:	70fb      	strb	r3, [r7, #3]
	memcpy(Buf, rxBuffer, Len);  // copy the data to the buffer
 80079c0:	78fb      	ldrb	r3, [r7, #3]
 80079c2:	461a      	mov	r2, r3
 80079c4:	4903      	ldr	r1, [pc, #12]	; (80079d4 <CDC_ReadRxBuffer_FS+0x20>)
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fc78 	bl	80082bc <memcpy>
}
 80079cc:	bf00      	nop
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	20001e08 	.word	0x20001e08

080079d8 <CDC_GetRxBufferBytesAvailable_FS>:

uint8_t CDC_GetRxBufferBytesAvailable_FS(void) {
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0

	uint8_t index = 0;
 80079de:	2300      	movs	r3, #0
 80079e0:	71fb      	strb	r3, [r7, #7]
	while (rxBuffer[index] != 0) {
 80079e2:	e002      	b.n	80079ea <CDC_GetRxBufferBytesAvailable_FS+0x12>
		index++;
 80079e4:	79fb      	ldrb	r3, [r7, #7]
 80079e6:	3301      	adds	r3, #1
 80079e8:	71fb      	strb	r3, [r7, #7]
	while (rxBuffer[index] != 0) {
 80079ea:	79fb      	ldrb	r3, [r7, #7]
 80079ec:	4a05      	ldr	r2, [pc, #20]	; (8007a04 <CDC_GetRxBufferBytesAvailable_FS+0x2c>)
 80079ee:	5cd3      	ldrb	r3, [r2, r3]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1f7      	bne.n	80079e4 <CDC_GetRxBufferBytesAvailable_FS+0xc>
	}
	return index;
 80079f4:	79fb      	ldrb	r3, [r7, #7]

}
 80079f6:	4618      	mov	r0, r3
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	20001e08 	.word	0x20001e08

08007a08 <CDC_Read_Next>:

void CDC_Read_Next() {
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	af00      	add	r7, sp, #0
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007a0c:	4802      	ldr	r0, [pc, #8]	; (8007a18 <CDC_Read_Next+0x10>)
 8007a0e:	f7fe fcf1 	bl	80063f4 <USBD_CDC_ReceivePacket>
}
 8007a12:	bf00      	nop
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20000b38 	.word	0x20000b38

08007a1c <CDC_FlushRxBuffer_FS>:

void CDC_FlushRxBuffer_FS() {
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	af00      	add	r7, sp, #0
	memset(rxBuffer, 0, HL_RX_BUFFER_SIZE);
 8007a20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a24:	2100      	movs	r1, #0
 8007a26:	4802      	ldr	r0, [pc, #8]	; (8007a30 <CDC_FlushRxBuffer_FS+0x14>)
 8007a28:	f000 fc56 	bl	80082d8 <memset>
}
 8007a2c:	bf00      	nop
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	20001e08 	.word	0x20001e08

08007a34 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	6039      	str	r1, [r7, #0]
 8007a3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	2212      	movs	r2, #18
 8007a44:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a46:	4b03      	ldr	r3, [pc, #12]	; (8007a54 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	20000154 	.word	0x20000154

08007a58 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	4603      	mov	r3, r0
 8007a60:	6039      	str	r1, [r7, #0]
 8007a62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	2204      	movs	r2, #4
 8007a68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a6a:	4b03      	ldr	r3, [pc, #12]	; (8007a78 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr
 8007a78:	20000168 	.word	0x20000168

08007a7c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	4603      	mov	r3, r0
 8007a84:	6039      	str	r1, [r7, #0]
 8007a86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a88:	79fb      	ldrb	r3, [r7, #7]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d105      	bne.n	8007a9a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	4907      	ldr	r1, [pc, #28]	; (8007ab0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a92:	4808      	ldr	r0, [pc, #32]	; (8007ab4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a94:	f7ff fd61 	bl	800755a <USBD_GetString>
 8007a98:	e004      	b.n	8007aa4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	4904      	ldr	r1, [pc, #16]	; (8007ab0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a9e:	4805      	ldr	r0, [pc, #20]	; (8007ab4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007aa0:	f7ff fd5b 	bl	800755a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007aa4:	4b02      	ldr	r3, [pc, #8]	; (8007ab0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	20001f10 	.word	0x20001f10
 8007ab4:	08008b58 	.word	0x08008b58

08007ab8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	4603      	mov	r3, r0
 8007ac0:	6039      	str	r1, [r7, #0]
 8007ac2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	4904      	ldr	r1, [pc, #16]	; (8007ad8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007ac8:	4804      	ldr	r0, [pc, #16]	; (8007adc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007aca:	f7ff fd46 	bl	800755a <USBD_GetString>
  return USBD_StrDesc;
 8007ace:	4b02      	ldr	r3, [pc, #8]	; (8007ad8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	20001f10 	.word	0x20001f10
 8007adc:	08008b70 	.word	0x08008b70

08007ae0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	6039      	str	r1, [r7, #0]
 8007aea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	221a      	movs	r2, #26
 8007af0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007af2:	f000 f843 	bl	8007b7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007af6:	4b02      	ldr	r3, [pc, #8]	; (8007b00 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	2000016c 	.word	0x2000016c

08007b04 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	6039      	str	r1, [r7, #0]
 8007b0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b10:	79fb      	ldrb	r3, [r7, #7]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d105      	bne.n	8007b22 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b16:	683a      	ldr	r2, [r7, #0]
 8007b18:	4907      	ldr	r1, [pc, #28]	; (8007b38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b1a:	4808      	ldr	r0, [pc, #32]	; (8007b3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b1c:	f7ff fd1d 	bl	800755a <USBD_GetString>
 8007b20:	e004      	b.n	8007b2c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b22:	683a      	ldr	r2, [r7, #0]
 8007b24:	4904      	ldr	r1, [pc, #16]	; (8007b38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b26:	4805      	ldr	r0, [pc, #20]	; (8007b3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b28:	f7ff fd17 	bl	800755a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b2c:	4b02      	ldr	r3, [pc, #8]	; (8007b38 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	20001f10 	.word	0x20001f10
 8007b3c:	08008b84 	.word	0x08008b84

08007b40 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	4603      	mov	r3, r0
 8007b48:	6039      	str	r1, [r7, #0]
 8007b4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b4c:	79fb      	ldrb	r3, [r7, #7]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d105      	bne.n	8007b5e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	4907      	ldr	r1, [pc, #28]	; (8007b74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b56:	4808      	ldr	r0, [pc, #32]	; (8007b78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b58:	f7ff fcff 	bl	800755a <USBD_GetString>
 8007b5c:	e004      	b.n	8007b68 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b5e:	683a      	ldr	r2, [r7, #0]
 8007b60:	4904      	ldr	r1, [pc, #16]	; (8007b74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b62:	4805      	ldr	r0, [pc, #20]	; (8007b78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b64:	f7ff fcf9 	bl	800755a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b68:	4b02      	ldr	r3, [pc, #8]	; (8007b74 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	20001f10 	.word	0x20001f10
 8007b78:	08008b90 	.word	0x08008b90

08007b7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b82:	4b0f      	ldr	r3, [pc, #60]	; (8007bc0 <Get_SerialNum+0x44>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b88:	4b0e      	ldr	r3, [pc, #56]	; (8007bc4 <Get_SerialNum+0x48>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b8e:	4b0e      	ldr	r3, [pc, #56]	; (8007bc8 <Get_SerialNum+0x4c>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4413      	add	r3, r2
 8007b9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d009      	beq.n	8007bb6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007ba2:	2208      	movs	r2, #8
 8007ba4:	4909      	ldr	r1, [pc, #36]	; (8007bcc <Get_SerialNum+0x50>)
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f000 f814 	bl	8007bd4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007bac:	2204      	movs	r2, #4
 8007bae:	4908      	ldr	r1, [pc, #32]	; (8007bd0 <Get_SerialNum+0x54>)
 8007bb0:	68b8      	ldr	r0, [r7, #8]
 8007bb2:	f000 f80f 	bl	8007bd4 <IntToUnicode>
  }
}
 8007bb6:	bf00      	nop
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	1fff7a10 	.word	0x1fff7a10
 8007bc4:	1fff7a14 	.word	0x1fff7a14
 8007bc8:	1fff7a18 	.word	0x1fff7a18
 8007bcc:	2000016e 	.word	0x2000016e
 8007bd0:	2000017e 	.word	0x2000017e

08007bd4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b087      	sub	sp, #28
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	4613      	mov	r3, r2
 8007be0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007be2:	2300      	movs	r3, #0
 8007be4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007be6:	2300      	movs	r3, #0
 8007be8:	75fb      	strb	r3, [r7, #23]
 8007bea:	e027      	b.n	8007c3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	0f1b      	lsrs	r3, r3, #28
 8007bf0:	2b09      	cmp	r3, #9
 8007bf2:	d80b      	bhi.n	8007c0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	0f1b      	lsrs	r3, r3, #28
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	7dfb      	ldrb	r3, [r7, #23]
 8007bfc:	005b      	lsls	r3, r3, #1
 8007bfe:	4619      	mov	r1, r3
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	440b      	add	r3, r1
 8007c04:	3230      	adds	r2, #48	; 0x30
 8007c06:	b2d2      	uxtb	r2, r2
 8007c08:	701a      	strb	r2, [r3, #0]
 8007c0a:	e00a      	b.n	8007c22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	0f1b      	lsrs	r3, r3, #28
 8007c10:	b2da      	uxtb	r2, r3
 8007c12:	7dfb      	ldrb	r3, [r7, #23]
 8007c14:	005b      	lsls	r3, r3, #1
 8007c16:	4619      	mov	r1, r3
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	440b      	add	r3, r1
 8007c1c:	3237      	adds	r2, #55	; 0x37
 8007c1e:	b2d2      	uxtb	r2, r2
 8007c20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	011b      	lsls	r3, r3, #4
 8007c26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c28:	7dfb      	ldrb	r3, [r7, #23]
 8007c2a:	005b      	lsls	r3, r3, #1
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	4413      	add	r3, r2
 8007c32:	2200      	movs	r2, #0
 8007c34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c36:	7dfb      	ldrb	r3, [r7, #23]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	75fb      	strb	r3, [r7, #23]
 8007c3c:	7dfa      	ldrb	r2, [r7, #23]
 8007c3e:	79fb      	ldrb	r3, [r7, #7]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d3d3      	bcc.n	8007bec <IntToUnicode+0x18>
  }
}
 8007c44:	bf00      	nop
 8007c46:	bf00      	nop
 8007c48:	371c      	adds	r7, #28
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
	...

08007c54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b08a      	sub	sp, #40	; 0x28
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c5c:	f107 0314 	add.w	r3, r7, #20
 8007c60:	2200      	movs	r2, #0
 8007c62:	601a      	str	r2, [r3, #0]
 8007c64:	605a      	str	r2, [r3, #4]
 8007c66:	609a      	str	r2, [r3, #8]
 8007c68:	60da      	str	r2, [r3, #12]
 8007c6a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c74:	d13a      	bne.n	8007cec <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c76:	2300      	movs	r3, #0
 8007c78:	613b      	str	r3, [r7, #16]
 8007c7a:	4b1e      	ldr	r3, [pc, #120]	; (8007cf4 <HAL_PCD_MspInit+0xa0>)
 8007c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7e:	4a1d      	ldr	r2, [pc, #116]	; (8007cf4 <HAL_PCD_MspInit+0xa0>)
 8007c80:	f043 0301 	orr.w	r3, r3, #1
 8007c84:	6313      	str	r3, [r2, #48]	; 0x30
 8007c86:	4b1b      	ldr	r3, [pc, #108]	; (8007cf4 <HAL_PCD_MspInit+0xa0>)
 8007c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	613b      	str	r3, [r7, #16]
 8007c90:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007c92:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c98:	2302      	movs	r3, #2
 8007c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ca4:	230a      	movs	r3, #10
 8007ca6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ca8:	f107 0314 	add.w	r3, r7, #20
 8007cac:	4619      	mov	r1, r3
 8007cae:	4812      	ldr	r0, [pc, #72]	; (8007cf8 <HAL_PCD_MspInit+0xa4>)
 8007cb0:	f7f9 fdc8 	bl	8001844 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007cb4:	4b0f      	ldr	r3, [pc, #60]	; (8007cf4 <HAL_PCD_MspInit+0xa0>)
 8007cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb8:	4a0e      	ldr	r2, [pc, #56]	; (8007cf4 <HAL_PCD_MspInit+0xa0>)
 8007cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cbe:	6353      	str	r3, [r2, #52]	; 0x34
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	60fb      	str	r3, [r7, #12]
 8007cc4:	4b0b      	ldr	r3, [pc, #44]	; (8007cf4 <HAL_PCD_MspInit+0xa0>)
 8007cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cc8:	4a0a      	ldr	r2, [pc, #40]	; (8007cf4 <HAL_PCD_MspInit+0xa0>)
 8007cca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007cce:	6453      	str	r3, [r2, #68]	; 0x44
 8007cd0:	4b08      	ldr	r3, [pc, #32]	; (8007cf4 <HAL_PCD_MspInit+0xa0>)
 8007cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cd8:	60fb      	str	r3, [r7, #12]
 8007cda:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007cdc:	2200      	movs	r2, #0
 8007cde:	2100      	movs	r1, #0
 8007ce0:	2043      	movs	r0, #67	; 0x43
 8007ce2:	f7f9 fbee 	bl	80014c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007ce6:	2043      	movs	r0, #67	; 0x43
 8007ce8:	f7f9 fc07 	bl	80014fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007cec:	bf00      	nop
 8007cee:	3728      	adds	r7, #40	; 0x28
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	40023800 	.word	0x40023800
 8007cf8:	40020000 	.word	0x40020000

08007cfc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007d10:	4619      	mov	r1, r3
 8007d12:	4610      	mov	r0, r2
 8007d14:	f7fe fc3a 	bl	800658c <USBD_LL_SetupStage>
}
 8007d18:	bf00      	nop
 8007d1a:	3708      	adds	r7, #8
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007d32:	78fa      	ldrb	r2, [r7, #3]
 8007d34:	6879      	ldr	r1, [r7, #4]
 8007d36:	4613      	mov	r3, r2
 8007d38:	00db      	lsls	r3, r3, #3
 8007d3a:	1a9b      	subs	r3, r3, r2
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	440b      	add	r3, r1
 8007d40:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	78fb      	ldrb	r3, [r7, #3]
 8007d48:	4619      	mov	r1, r3
 8007d4a:	f7fe fc74 	bl	8006636 <USBD_LL_DataOutStage>
}
 8007d4e:	bf00      	nop
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b082      	sub	sp, #8
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	460b      	mov	r3, r1
 8007d60:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007d68:	78fa      	ldrb	r2, [r7, #3]
 8007d6a:	6879      	ldr	r1, [r7, #4]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	1a9b      	subs	r3, r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	440b      	add	r3, r1
 8007d76:	3348      	adds	r3, #72	; 0x48
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	78fb      	ldrb	r3, [r7, #3]
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	f7fe fcbd 	bl	80066fc <USBD_LL_DataInStage>
}
 8007d82:	bf00      	nop
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b082      	sub	sp, #8
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7fe fdd1 	bl	8006940 <USBD_LL_SOF>
}
 8007d9e:	bf00      	nop
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b084      	sub	sp, #16
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007dae:	2301      	movs	r3, #1
 8007db0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d001      	beq.n	8007dbe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007dba:	f7f8 fdd1 	bl	8000960 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007dc4:	7bfa      	ldrb	r2, [r7, #15]
 8007dc6:	4611      	mov	r1, r2
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fe fd7b 	bl	80068c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7fe fd27 	bl	8006828 <USBD_LL_Reset>
}
 8007dda:	bf00      	nop
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
	...

08007de4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fe fd76 	bl	80068e4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	6812      	ldr	r2, [r2, #0]
 8007e06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e0a:	f043 0301 	orr.w	r3, r3, #1
 8007e0e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a1b      	ldr	r3, [r3, #32]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d005      	beq.n	8007e24 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e18:	4b04      	ldr	r3, [pc, #16]	; (8007e2c <HAL_PCD_SuspendCallback+0x48>)
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	4a03      	ldr	r2, [pc, #12]	; (8007e2c <HAL_PCD_SuspendCallback+0x48>)
 8007e1e:	f043 0306 	orr.w	r3, r3, #6
 8007e22:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e24:	bf00      	nop
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	e000ed00 	.word	0xe000ed00

08007e30 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7fe fd66 	bl	8006910 <USBD_LL_Resume>
}
 8007e44:	bf00      	nop
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	460b      	mov	r3, r1
 8007e56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e5e:	78fa      	ldrb	r2, [r7, #3]
 8007e60:	4611      	mov	r1, r2
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fe fdb4 	bl	80069d0 <USBD_LL_IsoOUTIncomplete>
}
 8007e68:	bf00      	nop
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	460b      	mov	r3, r1
 8007e7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e82:	78fa      	ldrb	r2, [r7, #3]
 8007e84:	4611      	mov	r1, r2
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fe fd7c 	bl	8006984 <USBD_LL_IsoINIncomplete>
}
 8007e8c:	bf00      	nop
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fe fdba 	bl	8006a1c <USBD_LL_DevConnected>
}
 8007ea8:	bf00      	nop
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fe fdb7 	bl	8006a32 <USBD_LL_DevDisconnected>
}
 8007ec4:	bf00      	nop
 8007ec6:	3708      	adds	r7, #8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d13c      	bne.n	8007f56 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007edc:	4a20      	ldr	r2, [pc, #128]	; (8007f60 <USBD_LL_Init+0x94>)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a1e      	ldr	r2, [pc, #120]	; (8007f60 <USBD_LL_Init+0x94>)
 8007ee8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007eec:	4b1c      	ldr	r3, [pc, #112]	; (8007f60 <USBD_LL_Init+0x94>)
 8007eee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007ef2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007ef4:	4b1a      	ldr	r3, [pc, #104]	; (8007f60 <USBD_LL_Init+0x94>)
 8007ef6:	2204      	movs	r2, #4
 8007ef8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007efa:	4b19      	ldr	r3, [pc, #100]	; (8007f60 <USBD_LL_Init+0x94>)
 8007efc:	2202      	movs	r2, #2
 8007efe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007f00:	4b17      	ldr	r3, [pc, #92]	; (8007f60 <USBD_LL_Init+0x94>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007f06:	4b16      	ldr	r3, [pc, #88]	; (8007f60 <USBD_LL_Init+0x94>)
 8007f08:	2202      	movs	r2, #2
 8007f0a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007f0c:	4b14      	ldr	r3, [pc, #80]	; (8007f60 <USBD_LL_Init+0x94>)
 8007f0e:	2200      	movs	r2, #0
 8007f10:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007f12:	4b13      	ldr	r3, [pc, #76]	; (8007f60 <USBD_LL_Init+0x94>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007f18:	4b11      	ldr	r3, [pc, #68]	; (8007f60 <USBD_LL_Init+0x94>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007f1e:	4b10      	ldr	r3, [pc, #64]	; (8007f60 <USBD_LL_Init+0x94>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007f24:	4b0e      	ldr	r3, [pc, #56]	; (8007f60 <USBD_LL_Init+0x94>)
 8007f26:	2200      	movs	r2, #0
 8007f28:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007f2a:	480d      	ldr	r0, [pc, #52]	; (8007f60 <USBD_LL_Init+0x94>)
 8007f2c:	f7fa fa83 	bl	8002436 <HAL_PCD_Init>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d001      	beq.n	8007f3a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007f36:	f7f8 fd13 	bl	8000960 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007f3a:	2180      	movs	r1, #128	; 0x80
 8007f3c:	4808      	ldr	r0, [pc, #32]	; (8007f60 <USBD_LL_Init+0x94>)
 8007f3e:	f7fb fbe0 	bl	8003702 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007f42:	2240      	movs	r2, #64	; 0x40
 8007f44:	2100      	movs	r1, #0
 8007f46:	4806      	ldr	r0, [pc, #24]	; (8007f60 <USBD_LL_Init+0x94>)
 8007f48:	f7fb fb94 	bl	8003674 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007f4c:	2280      	movs	r2, #128	; 0x80
 8007f4e:	2101      	movs	r1, #1
 8007f50:	4803      	ldr	r0, [pc, #12]	; (8007f60 <USBD_LL_Init+0x94>)
 8007f52:	f7fb fb8f 	bl	8003674 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	20002110 	.word	0x20002110

08007f64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f70:	2300      	movs	r3, #0
 8007f72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fa fb78 	bl	8002670 <HAL_PCD_Start>
 8007f80:	4603      	mov	r3, r0
 8007f82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 f942 	bl	8008210 <USBD_Get_USB_Status>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f90:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b084      	sub	sp, #16
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	4608      	mov	r0, r1
 8007fa4:	4611      	mov	r1, r2
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	4603      	mov	r3, r0
 8007faa:	70fb      	strb	r3, [r7, #3]
 8007fac:	460b      	mov	r3, r1
 8007fae:	70bb      	strb	r3, [r7, #2]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007fc2:	78bb      	ldrb	r3, [r7, #2]
 8007fc4:	883a      	ldrh	r2, [r7, #0]
 8007fc6:	78f9      	ldrb	r1, [r7, #3]
 8007fc8:	f7fa ff5c 	bl	8002e84 <HAL_PCD_EP_Open>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 f91c 	bl	8008210 <USBD_Get_USB_Status>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	460b      	mov	r3, r1
 8007ff0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008000:	78fa      	ldrb	r2, [r7, #3]
 8008002:	4611      	mov	r1, r2
 8008004:	4618      	mov	r0, r3
 8008006:	f7fa ffa5 	bl	8002f54 <HAL_PCD_EP_Close>
 800800a:	4603      	mov	r3, r0
 800800c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800800e:	7bfb      	ldrb	r3, [r7, #15]
 8008010:	4618      	mov	r0, r3
 8008012:	f000 f8fd 	bl	8008210 <USBD_Get_USB_Status>
 8008016:	4603      	mov	r3, r0
 8008018:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800801a:	7bbb      	ldrb	r3, [r7, #14]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	460b      	mov	r3, r1
 800802e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008030:	2300      	movs	r3, #0
 8008032:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800803e:	78fa      	ldrb	r2, [r7, #3]
 8008040:	4611      	mov	r1, r2
 8008042:	4618      	mov	r0, r3
 8008044:	f7fb f87d 	bl	8003142 <HAL_PCD_EP_SetStall>
 8008048:	4603      	mov	r3, r0
 800804a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800804c:	7bfb      	ldrb	r3, [r7, #15]
 800804e:	4618      	mov	r0, r3
 8008050:	f000 f8de 	bl	8008210 <USBD_Get_USB_Status>
 8008054:	4603      	mov	r3, r0
 8008056:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008058:	7bbb      	ldrb	r3, [r7, #14]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	460b      	mov	r3, r1
 800806c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800807c:	78fa      	ldrb	r2, [r7, #3]
 800807e:	4611      	mov	r1, r2
 8008080:	4618      	mov	r0, r3
 8008082:	f7fb f8c2 	bl	800320a <HAL_PCD_EP_ClrStall>
 8008086:	4603      	mov	r3, r0
 8008088:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800808a:	7bfb      	ldrb	r3, [r7, #15]
 800808c:	4618      	mov	r0, r3
 800808e:	f000 f8bf 	bl	8008210 <USBD_Get_USB_Status>
 8008092:	4603      	mov	r3, r0
 8008094:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008096:	7bbb      	ldrb	r3, [r7, #14]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80080b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	da0b      	bge.n	80080d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80080bc:	78fb      	ldrb	r3, [r7, #3]
 80080be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080c2:	68f9      	ldr	r1, [r7, #12]
 80080c4:	4613      	mov	r3, r2
 80080c6:	00db      	lsls	r3, r3, #3
 80080c8:	1a9b      	subs	r3, r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	440b      	add	r3, r1
 80080ce:	333e      	adds	r3, #62	; 0x3e
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	e00b      	b.n	80080ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80080d4:	78fb      	ldrb	r3, [r7, #3]
 80080d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080da:	68f9      	ldr	r1, [r7, #12]
 80080dc:	4613      	mov	r3, r2
 80080de:	00db      	lsls	r3, r3, #3
 80080e0:	1a9b      	subs	r3, r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	440b      	add	r3, r1
 80080e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80080ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	460b      	mov	r3, r1
 8008102:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008112:	78fa      	ldrb	r2, [r7, #3]
 8008114:	4611      	mov	r1, r2
 8008116:	4618      	mov	r0, r3
 8008118:	f7fa fe8f 	bl	8002e3a <HAL_PCD_SetAddress>
 800811c:	4603      	mov	r3, r0
 800811e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008120:	7bfb      	ldrb	r3, [r7, #15]
 8008122:	4618      	mov	r0, r3
 8008124:	f000 f874 	bl	8008210 <USBD_Get_USB_Status>
 8008128:	4603      	mov	r3, r0
 800812a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800812c:	7bbb      	ldrb	r3, [r7, #14]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b086      	sub	sp, #24
 800813a:	af00      	add	r7, sp, #0
 800813c:	60f8      	str	r0, [r7, #12]
 800813e:	607a      	str	r2, [r7, #4]
 8008140:	603b      	str	r3, [r7, #0]
 8008142:	460b      	mov	r3, r1
 8008144:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800814a:	2300      	movs	r3, #0
 800814c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008154:	7af9      	ldrb	r1, [r7, #11]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	f7fa ffa8 	bl	80030ae <HAL_PCD_EP_Transmit>
 800815e:	4603      	mov	r3, r0
 8008160:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008162:	7dfb      	ldrb	r3, [r7, #23]
 8008164:	4618      	mov	r0, r3
 8008166:	f000 f853 	bl	8008210 <USBD_Get_USB_Status>
 800816a:	4603      	mov	r3, r0
 800816c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800816e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008170:	4618      	mov	r0, r3
 8008172:	3718      	adds	r7, #24
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	607a      	str	r2, [r7, #4]
 8008182:	603b      	str	r3, [r7, #0]
 8008184:	460b      	mov	r3, r1
 8008186:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008188:	2300      	movs	r3, #0
 800818a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800818c:	2300      	movs	r3, #0
 800818e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008196:	7af9      	ldrb	r1, [r7, #11]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	f7fa ff24 	bl	8002fe8 <HAL_PCD_EP_Receive>
 80081a0:	4603      	mov	r3, r0
 80081a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
 80081a6:	4618      	mov	r0, r3
 80081a8:	f000 f832 	bl	8008210 <USBD_Get_USB_Status>
 80081ac:	4603      	mov	r3, r0
 80081ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80081b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3718      	adds	r7, #24
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b082      	sub	sp, #8
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
 80081c2:	460b      	mov	r3, r1
 80081c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081cc:	78fa      	ldrb	r2, [r7, #3]
 80081ce:	4611      	mov	r1, r2
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7fa ff54 	bl	800307e <HAL_PCD_EP_GetRxCount>
 80081d6:	4603      	mov	r3, r0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80081e8:	4b03      	ldr	r3, [pc, #12]	; (80081f8 <USBD_static_malloc+0x18>)
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	370c      	adds	r7, #12
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	20000618 	.word	0x20000618

080081fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]

}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	4603      	mov	r3, r0
 8008218:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800821e:	79fb      	ldrb	r3, [r7, #7]
 8008220:	2b03      	cmp	r3, #3
 8008222:	d817      	bhi.n	8008254 <USBD_Get_USB_Status+0x44>
 8008224:	a201      	add	r2, pc, #4	; (adr r2, 800822c <USBD_Get_USB_Status+0x1c>)
 8008226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822a:	bf00      	nop
 800822c:	0800823d 	.word	0x0800823d
 8008230:	08008243 	.word	0x08008243
 8008234:	08008249 	.word	0x08008249
 8008238:	0800824f 	.word	0x0800824f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800823c:	2300      	movs	r3, #0
 800823e:	73fb      	strb	r3, [r7, #15]
    break;
 8008240:	e00b      	b.n	800825a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008242:	2303      	movs	r3, #3
 8008244:	73fb      	strb	r3, [r7, #15]
    break;
 8008246:	e008      	b.n	800825a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008248:	2301      	movs	r3, #1
 800824a:	73fb      	strb	r3, [r7, #15]
    break;
 800824c:	e005      	b.n	800825a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800824e:	2303      	movs	r3, #3
 8008250:	73fb      	strb	r3, [r7, #15]
    break;
 8008252:	e002      	b.n	800825a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008254:	2303      	movs	r3, #3
 8008256:	73fb      	strb	r3, [r7, #15]
    break;
 8008258:	bf00      	nop
  }
  return usb_status;
 800825a:	7bfb      	ldrb	r3, [r7, #15]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3714      	adds	r7, #20
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <__errno>:
 8008268:	4b01      	ldr	r3, [pc, #4]	; (8008270 <__errno+0x8>)
 800826a:	6818      	ldr	r0, [r3, #0]
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	20000188 	.word	0x20000188

08008274 <__libc_init_array>:
 8008274:	b570      	push	{r4, r5, r6, lr}
 8008276:	4d0d      	ldr	r5, [pc, #52]	; (80082ac <__libc_init_array+0x38>)
 8008278:	4c0d      	ldr	r4, [pc, #52]	; (80082b0 <__libc_init_array+0x3c>)
 800827a:	1b64      	subs	r4, r4, r5
 800827c:	10a4      	asrs	r4, r4, #2
 800827e:	2600      	movs	r6, #0
 8008280:	42a6      	cmp	r6, r4
 8008282:	d109      	bne.n	8008298 <__libc_init_array+0x24>
 8008284:	4d0b      	ldr	r5, [pc, #44]	; (80082b4 <__libc_init_array+0x40>)
 8008286:	4c0c      	ldr	r4, [pc, #48]	; (80082b8 <__libc_init_array+0x44>)
 8008288:	f000 fc4e 	bl	8008b28 <_init>
 800828c:	1b64      	subs	r4, r4, r5
 800828e:	10a4      	asrs	r4, r4, #2
 8008290:	2600      	movs	r6, #0
 8008292:	42a6      	cmp	r6, r4
 8008294:	d105      	bne.n	80082a2 <__libc_init_array+0x2e>
 8008296:	bd70      	pop	{r4, r5, r6, pc}
 8008298:	f855 3b04 	ldr.w	r3, [r5], #4
 800829c:	4798      	blx	r3
 800829e:	3601      	adds	r6, #1
 80082a0:	e7ee      	b.n	8008280 <__libc_init_array+0xc>
 80082a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80082a6:	4798      	blx	r3
 80082a8:	3601      	adds	r6, #1
 80082aa:	e7f2      	b.n	8008292 <__libc_init_array+0x1e>
 80082ac:	08009950 	.word	0x08009950
 80082b0:	08009950 	.word	0x08009950
 80082b4:	08009950 	.word	0x08009950
 80082b8:	08009954 	.word	0x08009954

080082bc <memcpy>:
 80082bc:	440a      	add	r2, r1
 80082be:	4291      	cmp	r1, r2
 80082c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80082c4:	d100      	bne.n	80082c8 <memcpy+0xc>
 80082c6:	4770      	bx	lr
 80082c8:	b510      	push	{r4, lr}
 80082ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082d2:	4291      	cmp	r1, r2
 80082d4:	d1f9      	bne.n	80082ca <memcpy+0xe>
 80082d6:	bd10      	pop	{r4, pc}

080082d8 <memset>:
 80082d8:	4402      	add	r2, r0
 80082da:	4603      	mov	r3, r0
 80082dc:	4293      	cmp	r3, r2
 80082de:	d100      	bne.n	80082e2 <memset+0xa>
 80082e0:	4770      	bx	lr
 80082e2:	f803 1b01 	strb.w	r1, [r3], #1
 80082e6:	e7f9      	b.n	80082dc <memset+0x4>

080082e8 <siprintf>:
 80082e8:	b40e      	push	{r1, r2, r3}
 80082ea:	b500      	push	{lr}
 80082ec:	b09c      	sub	sp, #112	; 0x70
 80082ee:	ab1d      	add	r3, sp, #116	; 0x74
 80082f0:	9002      	str	r0, [sp, #8]
 80082f2:	9006      	str	r0, [sp, #24]
 80082f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80082f8:	4809      	ldr	r0, [pc, #36]	; (8008320 <siprintf+0x38>)
 80082fa:	9107      	str	r1, [sp, #28]
 80082fc:	9104      	str	r1, [sp, #16]
 80082fe:	4909      	ldr	r1, [pc, #36]	; (8008324 <siprintf+0x3c>)
 8008300:	f853 2b04 	ldr.w	r2, [r3], #4
 8008304:	9105      	str	r1, [sp, #20]
 8008306:	6800      	ldr	r0, [r0, #0]
 8008308:	9301      	str	r3, [sp, #4]
 800830a:	a902      	add	r1, sp, #8
 800830c:	f000 f868 	bl	80083e0 <_svfiprintf_r>
 8008310:	9b02      	ldr	r3, [sp, #8]
 8008312:	2200      	movs	r2, #0
 8008314:	701a      	strb	r2, [r3, #0]
 8008316:	b01c      	add	sp, #112	; 0x70
 8008318:	f85d eb04 	ldr.w	lr, [sp], #4
 800831c:	b003      	add	sp, #12
 800831e:	4770      	bx	lr
 8008320:	20000188 	.word	0x20000188
 8008324:	ffff0208 	.word	0xffff0208

08008328 <__ssputs_r>:
 8008328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800832c:	688e      	ldr	r6, [r1, #8]
 800832e:	429e      	cmp	r6, r3
 8008330:	4682      	mov	sl, r0
 8008332:	460c      	mov	r4, r1
 8008334:	4690      	mov	r8, r2
 8008336:	461f      	mov	r7, r3
 8008338:	d838      	bhi.n	80083ac <__ssputs_r+0x84>
 800833a:	898a      	ldrh	r2, [r1, #12]
 800833c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008340:	d032      	beq.n	80083a8 <__ssputs_r+0x80>
 8008342:	6825      	ldr	r5, [r4, #0]
 8008344:	6909      	ldr	r1, [r1, #16]
 8008346:	eba5 0901 	sub.w	r9, r5, r1
 800834a:	6965      	ldr	r5, [r4, #20]
 800834c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008350:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008354:	3301      	adds	r3, #1
 8008356:	444b      	add	r3, r9
 8008358:	106d      	asrs	r5, r5, #1
 800835a:	429d      	cmp	r5, r3
 800835c:	bf38      	it	cc
 800835e:	461d      	movcc	r5, r3
 8008360:	0553      	lsls	r3, r2, #21
 8008362:	d531      	bpl.n	80083c8 <__ssputs_r+0xa0>
 8008364:	4629      	mov	r1, r5
 8008366:	f000 fb39 	bl	80089dc <_malloc_r>
 800836a:	4606      	mov	r6, r0
 800836c:	b950      	cbnz	r0, 8008384 <__ssputs_r+0x5c>
 800836e:	230c      	movs	r3, #12
 8008370:	f8ca 3000 	str.w	r3, [sl]
 8008374:	89a3      	ldrh	r3, [r4, #12]
 8008376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800837a:	81a3      	strh	r3, [r4, #12]
 800837c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008384:	6921      	ldr	r1, [r4, #16]
 8008386:	464a      	mov	r2, r9
 8008388:	f7ff ff98 	bl	80082bc <memcpy>
 800838c:	89a3      	ldrh	r3, [r4, #12]
 800838e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008396:	81a3      	strh	r3, [r4, #12]
 8008398:	6126      	str	r6, [r4, #16]
 800839a:	6165      	str	r5, [r4, #20]
 800839c:	444e      	add	r6, r9
 800839e:	eba5 0509 	sub.w	r5, r5, r9
 80083a2:	6026      	str	r6, [r4, #0]
 80083a4:	60a5      	str	r5, [r4, #8]
 80083a6:	463e      	mov	r6, r7
 80083a8:	42be      	cmp	r6, r7
 80083aa:	d900      	bls.n	80083ae <__ssputs_r+0x86>
 80083ac:	463e      	mov	r6, r7
 80083ae:	4632      	mov	r2, r6
 80083b0:	6820      	ldr	r0, [r4, #0]
 80083b2:	4641      	mov	r1, r8
 80083b4:	f000 faa8 	bl	8008908 <memmove>
 80083b8:	68a3      	ldr	r3, [r4, #8]
 80083ba:	6822      	ldr	r2, [r4, #0]
 80083bc:	1b9b      	subs	r3, r3, r6
 80083be:	4432      	add	r2, r6
 80083c0:	60a3      	str	r3, [r4, #8]
 80083c2:	6022      	str	r2, [r4, #0]
 80083c4:	2000      	movs	r0, #0
 80083c6:	e7db      	b.n	8008380 <__ssputs_r+0x58>
 80083c8:	462a      	mov	r2, r5
 80083ca:	f000 fb61 	bl	8008a90 <_realloc_r>
 80083ce:	4606      	mov	r6, r0
 80083d0:	2800      	cmp	r0, #0
 80083d2:	d1e1      	bne.n	8008398 <__ssputs_r+0x70>
 80083d4:	6921      	ldr	r1, [r4, #16]
 80083d6:	4650      	mov	r0, sl
 80083d8:	f000 fab0 	bl	800893c <_free_r>
 80083dc:	e7c7      	b.n	800836e <__ssputs_r+0x46>
	...

080083e0 <_svfiprintf_r>:
 80083e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e4:	4698      	mov	r8, r3
 80083e6:	898b      	ldrh	r3, [r1, #12]
 80083e8:	061b      	lsls	r3, r3, #24
 80083ea:	b09d      	sub	sp, #116	; 0x74
 80083ec:	4607      	mov	r7, r0
 80083ee:	460d      	mov	r5, r1
 80083f0:	4614      	mov	r4, r2
 80083f2:	d50e      	bpl.n	8008412 <_svfiprintf_r+0x32>
 80083f4:	690b      	ldr	r3, [r1, #16]
 80083f6:	b963      	cbnz	r3, 8008412 <_svfiprintf_r+0x32>
 80083f8:	2140      	movs	r1, #64	; 0x40
 80083fa:	f000 faef 	bl	80089dc <_malloc_r>
 80083fe:	6028      	str	r0, [r5, #0]
 8008400:	6128      	str	r0, [r5, #16]
 8008402:	b920      	cbnz	r0, 800840e <_svfiprintf_r+0x2e>
 8008404:	230c      	movs	r3, #12
 8008406:	603b      	str	r3, [r7, #0]
 8008408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800840c:	e0d1      	b.n	80085b2 <_svfiprintf_r+0x1d2>
 800840e:	2340      	movs	r3, #64	; 0x40
 8008410:	616b      	str	r3, [r5, #20]
 8008412:	2300      	movs	r3, #0
 8008414:	9309      	str	r3, [sp, #36]	; 0x24
 8008416:	2320      	movs	r3, #32
 8008418:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800841c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008420:	2330      	movs	r3, #48	; 0x30
 8008422:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80085cc <_svfiprintf_r+0x1ec>
 8008426:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800842a:	f04f 0901 	mov.w	r9, #1
 800842e:	4623      	mov	r3, r4
 8008430:	469a      	mov	sl, r3
 8008432:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008436:	b10a      	cbz	r2, 800843c <_svfiprintf_r+0x5c>
 8008438:	2a25      	cmp	r2, #37	; 0x25
 800843a:	d1f9      	bne.n	8008430 <_svfiprintf_r+0x50>
 800843c:	ebba 0b04 	subs.w	fp, sl, r4
 8008440:	d00b      	beq.n	800845a <_svfiprintf_r+0x7a>
 8008442:	465b      	mov	r3, fp
 8008444:	4622      	mov	r2, r4
 8008446:	4629      	mov	r1, r5
 8008448:	4638      	mov	r0, r7
 800844a:	f7ff ff6d 	bl	8008328 <__ssputs_r>
 800844e:	3001      	adds	r0, #1
 8008450:	f000 80aa 	beq.w	80085a8 <_svfiprintf_r+0x1c8>
 8008454:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008456:	445a      	add	r2, fp
 8008458:	9209      	str	r2, [sp, #36]	; 0x24
 800845a:	f89a 3000 	ldrb.w	r3, [sl]
 800845e:	2b00      	cmp	r3, #0
 8008460:	f000 80a2 	beq.w	80085a8 <_svfiprintf_r+0x1c8>
 8008464:	2300      	movs	r3, #0
 8008466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800846a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800846e:	f10a 0a01 	add.w	sl, sl, #1
 8008472:	9304      	str	r3, [sp, #16]
 8008474:	9307      	str	r3, [sp, #28]
 8008476:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800847a:	931a      	str	r3, [sp, #104]	; 0x68
 800847c:	4654      	mov	r4, sl
 800847e:	2205      	movs	r2, #5
 8008480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008484:	4851      	ldr	r0, [pc, #324]	; (80085cc <_svfiprintf_r+0x1ec>)
 8008486:	f7f7 feab 	bl	80001e0 <memchr>
 800848a:	9a04      	ldr	r2, [sp, #16]
 800848c:	b9d8      	cbnz	r0, 80084c6 <_svfiprintf_r+0xe6>
 800848e:	06d0      	lsls	r0, r2, #27
 8008490:	bf44      	itt	mi
 8008492:	2320      	movmi	r3, #32
 8008494:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008498:	0711      	lsls	r1, r2, #28
 800849a:	bf44      	itt	mi
 800849c:	232b      	movmi	r3, #43	; 0x2b
 800849e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084a2:	f89a 3000 	ldrb.w	r3, [sl]
 80084a6:	2b2a      	cmp	r3, #42	; 0x2a
 80084a8:	d015      	beq.n	80084d6 <_svfiprintf_r+0xf6>
 80084aa:	9a07      	ldr	r2, [sp, #28]
 80084ac:	4654      	mov	r4, sl
 80084ae:	2000      	movs	r0, #0
 80084b0:	f04f 0c0a 	mov.w	ip, #10
 80084b4:	4621      	mov	r1, r4
 80084b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084ba:	3b30      	subs	r3, #48	; 0x30
 80084bc:	2b09      	cmp	r3, #9
 80084be:	d94e      	bls.n	800855e <_svfiprintf_r+0x17e>
 80084c0:	b1b0      	cbz	r0, 80084f0 <_svfiprintf_r+0x110>
 80084c2:	9207      	str	r2, [sp, #28]
 80084c4:	e014      	b.n	80084f0 <_svfiprintf_r+0x110>
 80084c6:	eba0 0308 	sub.w	r3, r0, r8
 80084ca:	fa09 f303 	lsl.w	r3, r9, r3
 80084ce:	4313      	orrs	r3, r2
 80084d0:	9304      	str	r3, [sp, #16]
 80084d2:	46a2      	mov	sl, r4
 80084d4:	e7d2      	b.n	800847c <_svfiprintf_r+0x9c>
 80084d6:	9b03      	ldr	r3, [sp, #12]
 80084d8:	1d19      	adds	r1, r3, #4
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	9103      	str	r1, [sp, #12]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	bfbb      	ittet	lt
 80084e2:	425b      	neglt	r3, r3
 80084e4:	f042 0202 	orrlt.w	r2, r2, #2
 80084e8:	9307      	strge	r3, [sp, #28]
 80084ea:	9307      	strlt	r3, [sp, #28]
 80084ec:	bfb8      	it	lt
 80084ee:	9204      	strlt	r2, [sp, #16]
 80084f0:	7823      	ldrb	r3, [r4, #0]
 80084f2:	2b2e      	cmp	r3, #46	; 0x2e
 80084f4:	d10c      	bne.n	8008510 <_svfiprintf_r+0x130>
 80084f6:	7863      	ldrb	r3, [r4, #1]
 80084f8:	2b2a      	cmp	r3, #42	; 0x2a
 80084fa:	d135      	bne.n	8008568 <_svfiprintf_r+0x188>
 80084fc:	9b03      	ldr	r3, [sp, #12]
 80084fe:	1d1a      	adds	r2, r3, #4
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	9203      	str	r2, [sp, #12]
 8008504:	2b00      	cmp	r3, #0
 8008506:	bfb8      	it	lt
 8008508:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800850c:	3402      	adds	r4, #2
 800850e:	9305      	str	r3, [sp, #20]
 8008510:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80085dc <_svfiprintf_r+0x1fc>
 8008514:	7821      	ldrb	r1, [r4, #0]
 8008516:	2203      	movs	r2, #3
 8008518:	4650      	mov	r0, sl
 800851a:	f7f7 fe61 	bl	80001e0 <memchr>
 800851e:	b140      	cbz	r0, 8008532 <_svfiprintf_r+0x152>
 8008520:	2340      	movs	r3, #64	; 0x40
 8008522:	eba0 000a 	sub.w	r0, r0, sl
 8008526:	fa03 f000 	lsl.w	r0, r3, r0
 800852a:	9b04      	ldr	r3, [sp, #16]
 800852c:	4303      	orrs	r3, r0
 800852e:	3401      	adds	r4, #1
 8008530:	9304      	str	r3, [sp, #16]
 8008532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008536:	4826      	ldr	r0, [pc, #152]	; (80085d0 <_svfiprintf_r+0x1f0>)
 8008538:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800853c:	2206      	movs	r2, #6
 800853e:	f7f7 fe4f 	bl	80001e0 <memchr>
 8008542:	2800      	cmp	r0, #0
 8008544:	d038      	beq.n	80085b8 <_svfiprintf_r+0x1d8>
 8008546:	4b23      	ldr	r3, [pc, #140]	; (80085d4 <_svfiprintf_r+0x1f4>)
 8008548:	bb1b      	cbnz	r3, 8008592 <_svfiprintf_r+0x1b2>
 800854a:	9b03      	ldr	r3, [sp, #12]
 800854c:	3307      	adds	r3, #7
 800854e:	f023 0307 	bic.w	r3, r3, #7
 8008552:	3308      	adds	r3, #8
 8008554:	9303      	str	r3, [sp, #12]
 8008556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008558:	4433      	add	r3, r6
 800855a:	9309      	str	r3, [sp, #36]	; 0x24
 800855c:	e767      	b.n	800842e <_svfiprintf_r+0x4e>
 800855e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008562:	460c      	mov	r4, r1
 8008564:	2001      	movs	r0, #1
 8008566:	e7a5      	b.n	80084b4 <_svfiprintf_r+0xd4>
 8008568:	2300      	movs	r3, #0
 800856a:	3401      	adds	r4, #1
 800856c:	9305      	str	r3, [sp, #20]
 800856e:	4619      	mov	r1, r3
 8008570:	f04f 0c0a 	mov.w	ip, #10
 8008574:	4620      	mov	r0, r4
 8008576:	f810 2b01 	ldrb.w	r2, [r0], #1
 800857a:	3a30      	subs	r2, #48	; 0x30
 800857c:	2a09      	cmp	r2, #9
 800857e:	d903      	bls.n	8008588 <_svfiprintf_r+0x1a8>
 8008580:	2b00      	cmp	r3, #0
 8008582:	d0c5      	beq.n	8008510 <_svfiprintf_r+0x130>
 8008584:	9105      	str	r1, [sp, #20]
 8008586:	e7c3      	b.n	8008510 <_svfiprintf_r+0x130>
 8008588:	fb0c 2101 	mla	r1, ip, r1, r2
 800858c:	4604      	mov	r4, r0
 800858e:	2301      	movs	r3, #1
 8008590:	e7f0      	b.n	8008574 <_svfiprintf_r+0x194>
 8008592:	ab03      	add	r3, sp, #12
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	462a      	mov	r2, r5
 8008598:	4b0f      	ldr	r3, [pc, #60]	; (80085d8 <_svfiprintf_r+0x1f8>)
 800859a:	a904      	add	r1, sp, #16
 800859c:	4638      	mov	r0, r7
 800859e:	f3af 8000 	nop.w
 80085a2:	1c42      	adds	r2, r0, #1
 80085a4:	4606      	mov	r6, r0
 80085a6:	d1d6      	bne.n	8008556 <_svfiprintf_r+0x176>
 80085a8:	89ab      	ldrh	r3, [r5, #12]
 80085aa:	065b      	lsls	r3, r3, #25
 80085ac:	f53f af2c 	bmi.w	8008408 <_svfiprintf_r+0x28>
 80085b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085b2:	b01d      	add	sp, #116	; 0x74
 80085b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b8:	ab03      	add	r3, sp, #12
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	462a      	mov	r2, r5
 80085be:	4b06      	ldr	r3, [pc, #24]	; (80085d8 <_svfiprintf_r+0x1f8>)
 80085c0:	a904      	add	r1, sp, #16
 80085c2:	4638      	mov	r0, r7
 80085c4:	f000 f87a 	bl	80086bc <_printf_i>
 80085c8:	e7eb      	b.n	80085a2 <_svfiprintf_r+0x1c2>
 80085ca:	bf00      	nop
 80085cc:	08009914 	.word	0x08009914
 80085d0:	0800991e 	.word	0x0800991e
 80085d4:	00000000 	.word	0x00000000
 80085d8:	08008329 	.word	0x08008329
 80085dc:	0800991a 	.word	0x0800991a

080085e0 <_printf_common>:
 80085e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e4:	4616      	mov	r6, r2
 80085e6:	4699      	mov	r9, r3
 80085e8:	688a      	ldr	r2, [r1, #8]
 80085ea:	690b      	ldr	r3, [r1, #16]
 80085ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085f0:	4293      	cmp	r3, r2
 80085f2:	bfb8      	it	lt
 80085f4:	4613      	movlt	r3, r2
 80085f6:	6033      	str	r3, [r6, #0]
 80085f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085fc:	4607      	mov	r7, r0
 80085fe:	460c      	mov	r4, r1
 8008600:	b10a      	cbz	r2, 8008606 <_printf_common+0x26>
 8008602:	3301      	adds	r3, #1
 8008604:	6033      	str	r3, [r6, #0]
 8008606:	6823      	ldr	r3, [r4, #0]
 8008608:	0699      	lsls	r1, r3, #26
 800860a:	bf42      	ittt	mi
 800860c:	6833      	ldrmi	r3, [r6, #0]
 800860e:	3302      	addmi	r3, #2
 8008610:	6033      	strmi	r3, [r6, #0]
 8008612:	6825      	ldr	r5, [r4, #0]
 8008614:	f015 0506 	ands.w	r5, r5, #6
 8008618:	d106      	bne.n	8008628 <_printf_common+0x48>
 800861a:	f104 0a19 	add.w	sl, r4, #25
 800861e:	68e3      	ldr	r3, [r4, #12]
 8008620:	6832      	ldr	r2, [r6, #0]
 8008622:	1a9b      	subs	r3, r3, r2
 8008624:	42ab      	cmp	r3, r5
 8008626:	dc26      	bgt.n	8008676 <_printf_common+0x96>
 8008628:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800862c:	1e13      	subs	r3, r2, #0
 800862e:	6822      	ldr	r2, [r4, #0]
 8008630:	bf18      	it	ne
 8008632:	2301      	movne	r3, #1
 8008634:	0692      	lsls	r2, r2, #26
 8008636:	d42b      	bmi.n	8008690 <_printf_common+0xb0>
 8008638:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800863c:	4649      	mov	r1, r9
 800863e:	4638      	mov	r0, r7
 8008640:	47c0      	blx	r8
 8008642:	3001      	adds	r0, #1
 8008644:	d01e      	beq.n	8008684 <_printf_common+0xa4>
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	68e5      	ldr	r5, [r4, #12]
 800864a:	6832      	ldr	r2, [r6, #0]
 800864c:	f003 0306 	and.w	r3, r3, #6
 8008650:	2b04      	cmp	r3, #4
 8008652:	bf08      	it	eq
 8008654:	1aad      	subeq	r5, r5, r2
 8008656:	68a3      	ldr	r3, [r4, #8]
 8008658:	6922      	ldr	r2, [r4, #16]
 800865a:	bf0c      	ite	eq
 800865c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008660:	2500      	movne	r5, #0
 8008662:	4293      	cmp	r3, r2
 8008664:	bfc4      	itt	gt
 8008666:	1a9b      	subgt	r3, r3, r2
 8008668:	18ed      	addgt	r5, r5, r3
 800866a:	2600      	movs	r6, #0
 800866c:	341a      	adds	r4, #26
 800866e:	42b5      	cmp	r5, r6
 8008670:	d11a      	bne.n	80086a8 <_printf_common+0xc8>
 8008672:	2000      	movs	r0, #0
 8008674:	e008      	b.n	8008688 <_printf_common+0xa8>
 8008676:	2301      	movs	r3, #1
 8008678:	4652      	mov	r2, sl
 800867a:	4649      	mov	r1, r9
 800867c:	4638      	mov	r0, r7
 800867e:	47c0      	blx	r8
 8008680:	3001      	adds	r0, #1
 8008682:	d103      	bne.n	800868c <_printf_common+0xac>
 8008684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800868c:	3501      	adds	r5, #1
 800868e:	e7c6      	b.n	800861e <_printf_common+0x3e>
 8008690:	18e1      	adds	r1, r4, r3
 8008692:	1c5a      	adds	r2, r3, #1
 8008694:	2030      	movs	r0, #48	; 0x30
 8008696:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800869a:	4422      	add	r2, r4
 800869c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086a4:	3302      	adds	r3, #2
 80086a6:	e7c7      	b.n	8008638 <_printf_common+0x58>
 80086a8:	2301      	movs	r3, #1
 80086aa:	4622      	mov	r2, r4
 80086ac:	4649      	mov	r1, r9
 80086ae:	4638      	mov	r0, r7
 80086b0:	47c0      	blx	r8
 80086b2:	3001      	adds	r0, #1
 80086b4:	d0e6      	beq.n	8008684 <_printf_common+0xa4>
 80086b6:	3601      	adds	r6, #1
 80086b8:	e7d9      	b.n	800866e <_printf_common+0x8e>
	...

080086bc <_printf_i>:
 80086bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086c0:	460c      	mov	r4, r1
 80086c2:	4691      	mov	r9, r2
 80086c4:	7e27      	ldrb	r7, [r4, #24]
 80086c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80086c8:	2f78      	cmp	r7, #120	; 0x78
 80086ca:	4680      	mov	r8, r0
 80086cc:	469a      	mov	sl, r3
 80086ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086d2:	d807      	bhi.n	80086e4 <_printf_i+0x28>
 80086d4:	2f62      	cmp	r7, #98	; 0x62
 80086d6:	d80a      	bhi.n	80086ee <_printf_i+0x32>
 80086d8:	2f00      	cmp	r7, #0
 80086da:	f000 80d8 	beq.w	800888e <_printf_i+0x1d2>
 80086de:	2f58      	cmp	r7, #88	; 0x58
 80086e0:	f000 80a3 	beq.w	800882a <_printf_i+0x16e>
 80086e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80086e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086ec:	e03a      	b.n	8008764 <_printf_i+0xa8>
 80086ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086f2:	2b15      	cmp	r3, #21
 80086f4:	d8f6      	bhi.n	80086e4 <_printf_i+0x28>
 80086f6:	a001      	add	r0, pc, #4	; (adr r0, 80086fc <_printf_i+0x40>)
 80086f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80086fc:	08008755 	.word	0x08008755
 8008700:	08008769 	.word	0x08008769
 8008704:	080086e5 	.word	0x080086e5
 8008708:	080086e5 	.word	0x080086e5
 800870c:	080086e5 	.word	0x080086e5
 8008710:	080086e5 	.word	0x080086e5
 8008714:	08008769 	.word	0x08008769
 8008718:	080086e5 	.word	0x080086e5
 800871c:	080086e5 	.word	0x080086e5
 8008720:	080086e5 	.word	0x080086e5
 8008724:	080086e5 	.word	0x080086e5
 8008728:	08008875 	.word	0x08008875
 800872c:	08008799 	.word	0x08008799
 8008730:	08008857 	.word	0x08008857
 8008734:	080086e5 	.word	0x080086e5
 8008738:	080086e5 	.word	0x080086e5
 800873c:	08008897 	.word	0x08008897
 8008740:	080086e5 	.word	0x080086e5
 8008744:	08008799 	.word	0x08008799
 8008748:	080086e5 	.word	0x080086e5
 800874c:	080086e5 	.word	0x080086e5
 8008750:	0800885f 	.word	0x0800885f
 8008754:	680b      	ldr	r3, [r1, #0]
 8008756:	1d1a      	adds	r2, r3, #4
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	600a      	str	r2, [r1, #0]
 800875c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008760:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008764:	2301      	movs	r3, #1
 8008766:	e0a3      	b.n	80088b0 <_printf_i+0x1f4>
 8008768:	6825      	ldr	r5, [r4, #0]
 800876a:	6808      	ldr	r0, [r1, #0]
 800876c:	062e      	lsls	r6, r5, #24
 800876e:	f100 0304 	add.w	r3, r0, #4
 8008772:	d50a      	bpl.n	800878a <_printf_i+0xce>
 8008774:	6805      	ldr	r5, [r0, #0]
 8008776:	600b      	str	r3, [r1, #0]
 8008778:	2d00      	cmp	r5, #0
 800877a:	da03      	bge.n	8008784 <_printf_i+0xc8>
 800877c:	232d      	movs	r3, #45	; 0x2d
 800877e:	426d      	negs	r5, r5
 8008780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008784:	485e      	ldr	r0, [pc, #376]	; (8008900 <_printf_i+0x244>)
 8008786:	230a      	movs	r3, #10
 8008788:	e019      	b.n	80087be <_printf_i+0x102>
 800878a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800878e:	6805      	ldr	r5, [r0, #0]
 8008790:	600b      	str	r3, [r1, #0]
 8008792:	bf18      	it	ne
 8008794:	b22d      	sxthne	r5, r5
 8008796:	e7ef      	b.n	8008778 <_printf_i+0xbc>
 8008798:	680b      	ldr	r3, [r1, #0]
 800879a:	6825      	ldr	r5, [r4, #0]
 800879c:	1d18      	adds	r0, r3, #4
 800879e:	6008      	str	r0, [r1, #0]
 80087a0:	0628      	lsls	r0, r5, #24
 80087a2:	d501      	bpl.n	80087a8 <_printf_i+0xec>
 80087a4:	681d      	ldr	r5, [r3, #0]
 80087a6:	e002      	b.n	80087ae <_printf_i+0xf2>
 80087a8:	0669      	lsls	r1, r5, #25
 80087aa:	d5fb      	bpl.n	80087a4 <_printf_i+0xe8>
 80087ac:	881d      	ldrh	r5, [r3, #0]
 80087ae:	4854      	ldr	r0, [pc, #336]	; (8008900 <_printf_i+0x244>)
 80087b0:	2f6f      	cmp	r7, #111	; 0x6f
 80087b2:	bf0c      	ite	eq
 80087b4:	2308      	moveq	r3, #8
 80087b6:	230a      	movne	r3, #10
 80087b8:	2100      	movs	r1, #0
 80087ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087be:	6866      	ldr	r6, [r4, #4]
 80087c0:	60a6      	str	r6, [r4, #8]
 80087c2:	2e00      	cmp	r6, #0
 80087c4:	bfa2      	ittt	ge
 80087c6:	6821      	ldrge	r1, [r4, #0]
 80087c8:	f021 0104 	bicge.w	r1, r1, #4
 80087cc:	6021      	strge	r1, [r4, #0]
 80087ce:	b90d      	cbnz	r5, 80087d4 <_printf_i+0x118>
 80087d0:	2e00      	cmp	r6, #0
 80087d2:	d04d      	beq.n	8008870 <_printf_i+0x1b4>
 80087d4:	4616      	mov	r6, r2
 80087d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80087da:	fb03 5711 	mls	r7, r3, r1, r5
 80087de:	5dc7      	ldrb	r7, [r0, r7]
 80087e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80087e4:	462f      	mov	r7, r5
 80087e6:	42bb      	cmp	r3, r7
 80087e8:	460d      	mov	r5, r1
 80087ea:	d9f4      	bls.n	80087d6 <_printf_i+0x11a>
 80087ec:	2b08      	cmp	r3, #8
 80087ee:	d10b      	bne.n	8008808 <_printf_i+0x14c>
 80087f0:	6823      	ldr	r3, [r4, #0]
 80087f2:	07df      	lsls	r7, r3, #31
 80087f4:	d508      	bpl.n	8008808 <_printf_i+0x14c>
 80087f6:	6923      	ldr	r3, [r4, #16]
 80087f8:	6861      	ldr	r1, [r4, #4]
 80087fa:	4299      	cmp	r1, r3
 80087fc:	bfde      	ittt	le
 80087fe:	2330      	movle	r3, #48	; 0x30
 8008800:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008804:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008808:	1b92      	subs	r2, r2, r6
 800880a:	6122      	str	r2, [r4, #16]
 800880c:	f8cd a000 	str.w	sl, [sp]
 8008810:	464b      	mov	r3, r9
 8008812:	aa03      	add	r2, sp, #12
 8008814:	4621      	mov	r1, r4
 8008816:	4640      	mov	r0, r8
 8008818:	f7ff fee2 	bl	80085e0 <_printf_common>
 800881c:	3001      	adds	r0, #1
 800881e:	d14c      	bne.n	80088ba <_printf_i+0x1fe>
 8008820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008824:	b004      	add	sp, #16
 8008826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800882a:	4835      	ldr	r0, [pc, #212]	; (8008900 <_printf_i+0x244>)
 800882c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008830:	6823      	ldr	r3, [r4, #0]
 8008832:	680e      	ldr	r6, [r1, #0]
 8008834:	061f      	lsls	r7, r3, #24
 8008836:	f856 5b04 	ldr.w	r5, [r6], #4
 800883a:	600e      	str	r6, [r1, #0]
 800883c:	d514      	bpl.n	8008868 <_printf_i+0x1ac>
 800883e:	07d9      	lsls	r1, r3, #31
 8008840:	bf44      	itt	mi
 8008842:	f043 0320 	orrmi.w	r3, r3, #32
 8008846:	6023      	strmi	r3, [r4, #0]
 8008848:	b91d      	cbnz	r5, 8008852 <_printf_i+0x196>
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	f023 0320 	bic.w	r3, r3, #32
 8008850:	6023      	str	r3, [r4, #0]
 8008852:	2310      	movs	r3, #16
 8008854:	e7b0      	b.n	80087b8 <_printf_i+0xfc>
 8008856:	6823      	ldr	r3, [r4, #0]
 8008858:	f043 0320 	orr.w	r3, r3, #32
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	2378      	movs	r3, #120	; 0x78
 8008860:	4828      	ldr	r0, [pc, #160]	; (8008904 <_printf_i+0x248>)
 8008862:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008866:	e7e3      	b.n	8008830 <_printf_i+0x174>
 8008868:	065e      	lsls	r6, r3, #25
 800886a:	bf48      	it	mi
 800886c:	b2ad      	uxthmi	r5, r5
 800886e:	e7e6      	b.n	800883e <_printf_i+0x182>
 8008870:	4616      	mov	r6, r2
 8008872:	e7bb      	b.n	80087ec <_printf_i+0x130>
 8008874:	680b      	ldr	r3, [r1, #0]
 8008876:	6826      	ldr	r6, [r4, #0]
 8008878:	6960      	ldr	r0, [r4, #20]
 800887a:	1d1d      	adds	r5, r3, #4
 800887c:	600d      	str	r5, [r1, #0]
 800887e:	0635      	lsls	r5, r6, #24
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	d501      	bpl.n	8008888 <_printf_i+0x1cc>
 8008884:	6018      	str	r0, [r3, #0]
 8008886:	e002      	b.n	800888e <_printf_i+0x1d2>
 8008888:	0671      	lsls	r1, r6, #25
 800888a:	d5fb      	bpl.n	8008884 <_printf_i+0x1c8>
 800888c:	8018      	strh	r0, [r3, #0]
 800888e:	2300      	movs	r3, #0
 8008890:	6123      	str	r3, [r4, #16]
 8008892:	4616      	mov	r6, r2
 8008894:	e7ba      	b.n	800880c <_printf_i+0x150>
 8008896:	680b      	ldr	r3, [r1, #0]
 8008898:	1d1a      	adds	r2, r3, #4
 800889a:	600a      	str	r2, [r1, #0]
 800889c:	681e      	ldr	r6, [r3, #0]
 800889e:	6862      	ldr	r2, [r4, #4]
 80088a0:	2100      	movs	r1, #0
 80088a2:	4630      	mov	r0, r6
 80088a4:	f7f7 fc9c 	bl	80001e0 <memchr>
 80088a8:	b108      	cbz	r0, 80088ae <_printf_i+0x1f2>
 80088aa:	1b80      	subs	r0, r0, r6
 80088ac:	6060      	str	r0, [r4, #4]
 80088ae:	6863      	ldr	r3, [r4, #4]
 80088b0:	6123      	str	r3, [r4, #16]
 80088b2:	2300      	movs	r3, #0
 80088b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088b8:	e7a8      	b.n	800880c <_printf_i+0x150>
 80088ba:	6923      	ldr	r3, [r4, #16]
 80088bc:	4632      	mov	r2, r6
 80088be:	4649      	mov	r1, r9
 80088c0:	4640      	mov	r0, r8
 80088c2:	47d0      	blx	sl
 80088c4:	3001      	adds	r0, #1
 80088c6:	d0ab      	beq.n	8008820 <_printf_i+0x164>
 80088c8:	6823      	ldr	r3, [r4, #0]
 80088ca:	079b      	lsls	r3, r3, #30
 80088cc:	d413      	bmi.n	80088f6 <_printf_i+0x23a>
 80088ce:	68e0      	ldr	r0, [r4, #12]
 80088d0:	9b03      	ldr	r3, [sp, #12]
 80088d2:	4298      	cmp	r0, r3
 80088d4:	bfb8      	it	lt
 80088d6:	4618      	movlt	r0, r3
 80088d8:	e7a4      	b.n	8008824 <_printf_i+0x168>
 80088da:	2301      	movs	r3, #1
 80088dc:	4632      	mov	r2, r6
 80088de:	4649      	mov	r1, r9
 80088e0:	4640      	mov	r0, r8
 80088e2:	47d0      	blx	sl
 80088e4:	3001      	adds	r0, #1
 80088e6:	d09b      	beq.n	8008820 <_printf_i+0x164>
 80088e8:	3501      	adds	r5, #1
 80088ea:	68e3      	ldr	r3, [r4, #12]
 80088ec:	9903      	ldr	r1, [sp, #12]
 80088ee:	1a5b      	subs	r3, r3, r1
 80088f0:	42ab      	cmp	r3, r5
 80088f2:	dcf2      	bgt.n	80088da <_printf_i+0x21e>
 80088f4:	e7eb      	b.n	80088ce <_printf_i+0x212>
 80088f6:	2500      	movs	r5, #0
 80088f8:	f104 0619 	add.w	r6, r4, #25
 80088fc:	e7f5      	b.n	80088ea <_printf_i+0x22e>
 80088fe:	bf00      	nop
 8008900:	08009925 	.word	0x08009925
 8008904:	08009936 	.word	0x08009936

08008908 <memmove>:
 8008908:	4288      	cmp	r0, r1
 800890a:	b510      	push	{r4, lr}
 800890c:	eb01 0402 	add.w	r4, r1, r2
 8008910:	d902      	bls.n	8008918 <memmove+0x10>
 8008912:	4284      	cmp	r4, r0
 8008914:	4623      	mov	r3, r4
 8008916:	d807      	bhi.n	8008928 <memmove+0x20>
 8008918:	1e43      	subs	r3, r0, #1
 800891a:	42a1      	cmp	r1, r4
 800891c:	d008      	beq.n	8008930 <memmove+0x28>
 800891e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008922:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008926:	e7f8      	b.n	800891a <memmove+0x12>
 8008928:	4402      	add	r2, r0
 800892a:	4601      	mov	r1, r0
 800892c:	428a      	cmp	r2, r1
 800892e:	d100      	bne.n	8008932 <memmove+0x2a>
 8008930:	bd10      	pop	{r4, pc}
 8008932:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008936:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800893a:	e7f7      	b.n	800892c <memmove+0x24>

0800893c <_free_r>:
 800893c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800893e:	2900      	cmp	r1, #0
 8008940:	d048      	beq.n	80089d4 <_free_r+0x98>
 8008942:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008946:	9001      	str	r0, [sp, #4]
 8008948:	2b00      	cmp	r3, #0
 800894a:	f1a1 0404 	sub.w	r4, r1, #4
 800894e:	bfb8      	it	lt
 8008950:	18e4      	addlt	r4, r4, r3
 8008952:	f000 f8d3 	bl	8008afc <__malloc_lock>
 8008956:	4a20      	ldr	r2, [pc, #128]	; (80089d8 <_free_r+0x9c>)
 8008958:	9801      	ldr	r0, [sp, #4]
 800895a:	6813      	ldr	r3, [r2, #0]
 800895c:	4615      	mov	r5, r2
 800895e:	b933      	cbnz	r3, 800896e <_free_r+0x32>
 8008960:	6063      	str	r3, [r4, #4]
 8008962:	6014      	str	r4, [r2, #0]
 8008964:	b003      	add	sp, #12
 8008966:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800896a:	f000 b8cd 	b.w	8008b08 <__malloc_unlock>
 800896e:	42a3      	cmp	r3, r4
 8008970:	d90b      	bls.n	800898a <_free_r+0x4e>
 8008972:	6821      	ldr	r1, [r4, #0]
 8008974:	1862      	adds	r2, r4, r1
 8008976:	4293      	cmp	r3, r2
 8008978:	bf04      	itt	eq
 800897a:	681a      	ldreq	r2, [r3, #0]
 800897c:	685b      	ldreq	r3, [r3, #4]
 800897e:	6063      	str	r3, [r4, #4]
 8008980:	bf04      	itt	eq
 8008982:	1852      	addeq	r2, r2, r1
 8008984:	6022      	streq	r2, [r4, #0]
 8008986:	602c      	str	r4, [r5, #0]
 8008988:	e7ec      	b.n	8008964 <_free_r+0x28>
 800898a:	461a      	mov	r2, r3
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	b10b      	cbz	r3, 8008994 <_free_r+0x58>
 8008990:	42a3      	cmp	r3, r4
 8008992:	d9fa      	bls.n	800898a <_free_r+0x4e>
 8008994:	6811      	ldr	r1, [r2, #0]
 8008996:	1855      	adds	r5, r2, r1
 8008998:	42a5      	cmp	r5, r4
 800899a:	d10b      	bne.n	80089b4 <_free_r+0x78>
 800899c:	6824      	ldr	r4, [r4, #0]
 800899e:	4421      	add	r1, r4
 80089a0:	1854      	adds	r4, r2, r1
 80089a2:	42a3      	cmp	r3, r4
 80089a4:	6011      	str	r1, [r2, #0]
 80089a6:	d1dd      	bne.n	8008964 <_free_r+0x28>
 80089a8:	681c      	ldr	r4, [r3, #0]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	6053      	str	r3, [r2, #4]
 80089ae:	4421      	add	r1, r4
 80089b0:	6011      	str	r1, [r2, #0]
 80089b2:	e7d7      	b.n	8008964 <_free_r+0x28>
 80089b4:	d902      	bls.n	80089bc <_free_r+0x80>
 80089b6:	230c      	movs	r3, #12
 80089b8:	6003      	str	r3, [r0, #0]
 80089ba:	e7d3      	b.n	8008964 <_free_r+0x28>
 80089bc:	6825      	ldr	r5, [r4, #0]
 80089be:	1961      	adds	r1, r4, r5
 80089c0:	428b      	cmp	r3, r1
 80089c2:	bf04      	itt	eq
 80089c4:	6819      	ldreq	r1, [r3, #0]
 80089c6:	685b      	ldreq	r3, [r3, #4]
 80089c8:	6063      	str	r3, [r4, #4]
 80089ca:	bf04      	itt	eq
 80089cc:	1949      	addeq	r1, r1, r5
 80089ce:	6021      	streq	r1, [r4, #0]
 80089d0:	6054      	str	r4, [r2, #4]
 80089d2:	e7c7      	b.n	8008964 <_free_r+0x28>
 80089d4:	b003      	add	sp, #12
 80089d6:	bd30      	pop	{r4, r5, pc}
 80089d8:	20000838 	.word	0x20000838

080089dc <_malloc_r>:
 80089dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089de:	1ccd      	adds	r5, r1, #3
 80089e0:	f025 0503 	bic.w	r5, r5, #3
 80089e4:	3508      	adds	r5, #8
 80089e6:	2d0c      	cmp	r5, #12
 80089e8:	bf38      	it	cc
 80089ea:	250c      	movcc	r5, #12
 80089ec:	2d00      	cmp	r5, #0
 80089ee:	4606      	mov	r6, r0
 80089f0:	db01      	blt.n	80089f6 <_malloc_r+0x1a>
 80089f2:	42a9      	cmp	r1, r5
 80089f4:	d903      	bls.n	80089fe <_malloc_r+0x22>
 80089f6:	230c      	movs	r3, #12
 80089f8:	6033      	str	r3, [r6, #0]
 80089fa:	2000      	movs	r0, #0
 80089fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089fe:	f000 f87d 	bl	8008afc <__malloc_lock>
 8008a02:	4921      	ldr	r1, [pc, #132]	; (8008a88 <_malloc_r+0xac>)
 8008a04:	680a      	ldr	r2, [r1, #0]
 8008a06:	4614      	mov	r4, r2
 8008a08:	b99c      	cbnz	r4, 8008a32 <_malloc_r+0x56>
 8008a0a:	4f20      	ldr	r7, [pc, #128]	; (8008a8c <_malloc_r+0xb0>)
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	b923      	cbnz	r3, 8008a1a <_malloc_r+0x3e>
 8008a10:	4621      	mov	r1, r4
 8008a12:	4630      	mov	r0, r6
 8008a14:	f000 f862 	bl	8008adc <_sbrk_r>
 8008a18:	6038      	str	r0, [r7, #0]
 8008a1a:	4629      	mov	r1, r5
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	f000 f85d 	bl	8008adc <_sbrk_r>
 8008a22:	1c43      	adds	r3, r0, #1
 8008a24:	d123      	bne.n	8008a6e <_malloc_r+0x92>
 8008a26:	230c      	movs	r3, #12
 8008a28:	6033      	str	r3, [r6, #0]
 8008a2a:	4630      	mov	r0, r6
 8008a2c:	f000 f86c 	bl	8008b08 <__malloc_unlock>
 8008a30:	e7e3      	b.n	80089fa <_malloc_r+0x1e>
 8008a32:	6823      	ldr	r3, [r4, #0]
 8008a34:	1b5b      	subs	r3, r3, r5
 8008a36:	d417      	bmi.n	8008a68 <_malloc_r+0x8c>
 8008a38:	2b0b      	cmp	r3, #11
 8008a3a:	d903      	bls.n	8008a44 <_malloc_r+0x68>
 8008a3c:	6023      	str	r3, [r4, #0]
 8008a3e:	441c      	add	r4, r3
 8008a40:	6025      	str	r5, [r4, #0]
 8008a42:	e004      	b.n	8008a4e <_malloc_r+0x72>
 8008a44:	6863      	ldr	r3, [r4, #4]
 8008a46:	42a2      	cmp	r2, r4
 8008a48:	bf0c      	ite	eq
 8008a4a:	600b      	streq	r3, [r1, #0]
 8008a4c:	6053      	strne	r3, [r2, #4]
 8008a4e:	4630      	mov	r0, r6
 8008a50:	f000 f85a 	bl	8008b08 <__malloc_unlock>
 8008a54:	f104 000b 	add.w	r0, r4, #11
 8008a58:	1d23      	adds	r3, r4, #4
 8008a5a:	f020 0007 	bic.w	r0, r0, #7
 8008a5e:	1ac2      	subs	r2, r0, r3
 8008a60:	d0cc      	beq.n	80089fc <_malloc_r+0x20>
 8008a62:	1a1b      	subs	r3, r3, r0
 8008a64:	50a3      	str	r3, [r4, r2]
 8008a66:	e7c9      	b.n	80089fc <_malloc_r+0x20>
 8008a68:	4622      	mov	r2, r4
 8008a6a:	6864      	ldr	r4, [r4, #4]
 8008a6c:	e7cc      	b.n	8008a08 <_malloc_r+0x2c>
 8008a6e:	1cc4      	adds	r4, r0, #3
 8008a70:	f024 0403 	bic.w	r4, r4, #3
 8008a74:	42a0      	cmp	r0, r4
 8008a76:	d0e3      	beq.n	8008a40 <_malloc_r+0x64>
 8008a78:	1a21      	subs	r1, r4, r0
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	f000 f82e 	bl	8008adc <_sbrk_r>
 8008a80:	3001      	adds	r0, #1
 8008a82:	d1dd      	bne.n	8008a40 <_malloc_r+0x64>
 8008a84:	e7cf      	b.n	8008a26 <_malloc_r+0x4a>
 8008a86:	bf00      	nop
 8008a88:	20000838 	.word	0x20000838
 8008a8c:	2000083c 	.word	0x2000083c

08008a90 <_realloc_r>:
 8008a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a92:	4607      	mov	r7, r0
 8008a94:	4614      	mov	r4, r2
 8008a96:	460e      	mov	r6, r1
 8008a98:	b921      	cbnz	r1, 8008aa4 <_realloc_r+0x14>
 8008a9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008a9e:	4611      	mov	r1, r2
 8008aa0:	f7ff bf9c 	b.w	80089dc <_malloc_r>
 8008aa4:	b922      	cbnz	r2, 8008ab0 <_realloc_r+0x20>
 8008aa6:	f7ff ff49 	bl	800893c <_free_r>
 8008aaa:	4625      	mov	r5, r4
 8008aac:	4628      	mov	r0, r5
 8008aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ab0:	f000 f830 	bl	8008b14 <_malloc_usable_size_r>
 8008ab4:	42a0      	cmp	r0, r4
 8008ab6:	d20f      	bcs.n	8008ad8 <_realloc_r+0x48>
 8008ab8:	4621      	mov	r1, r4
 8008aba:	4638      	mov	r0, r7
 8008abc:	f7ff ff8e 	bl	80089dc <_malloc_r>
 8008ac0:	4605      	mov	r5, r0
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	d0f2      	beq.n	8008aac <_realloc_r+0x1c>
 8008ac6:	4631      	mov	r1, r6
 8008ac8:	4622      	mov	r2, r4
 8008aca:	f7ff fbf7 	bl	80082bc <memcpy>
 8008ace:	4631      	mov	r1, r6
 8008ad0:	4638      	mov	r0, r7
 8008ad2:	f7ff ff33 	bl	800893c <_free_r>
 8008ad6:	e7e9      	b.n	8008aac <_realloc_r+0x1c>
 8008ad8:	4635      	mov	r5, r6
 8008ada:	e7e7      	b.n	8008aac <_realloc_r+0x1c>

08008adc <_sbrk_r>:
 8008adc:	b538      	push	{r3, r4, r5, lr}
 8008ade:	4d06      	ldr	r5, [pc, #24]	; (8008af8 <_sbrk_r+0x1c>)
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	4608      	mov	r0, r1
 8008ae6:	602b      	str	r3, [r5, #0]
 8008ae8:	f7f8 fab0 	bl	800104c <_sbrk>
 8008aec:	1c43      	adds	r3, r0, #1
 8008aee:	d102      	bne.n	8008af6 <_sbrk_r+0x1a>
 8008af0:	682b      	ldr	r3, [r5, #0]
 8008af2:	b103      	cbz	r3, 8008af6 <_sbrk_r+0x1a>
 8008af4:	6023      	str	r3, [r4, #0]
 8008af6:	bd38      	pop	{r3, r4, r5, pc}
 8008af8:	20002518 	.word	0x20002518

08008afc <__malloc_lock>:
 8008afc:	4801      	ldr	r0, [pc, #4]	; (8008b04 <__malloc_lock+0x8>)
 8008afe:	f000 b811 	b.w	8008b24 <__retarget_lock_acquire_recursive>
 8008b02:	bf00      	nop
 8008b04:	20002520 	.word	0x20002520

08008b08 <__malloc_unlock>:
 8008b08:	4801      	ldr	r0, [pc, #4]	; (8008b10 <__malloc_unlock+0x8>)
 8008b0a:	f000 b80c 	b.w	8008b26 <__retarget_lock_release_recursive>
 8008b0e:	bf00      	nop
 8008b10:	20002520 	.word	0x20002520

08008b14 <_malloc_usable_size_r>:
 8008b14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b18:	1f18      	subs	r0, r3, #4
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	bfbc      	itt	lt
 8008b1e:	580b      	ldrlt	r3, [r1, r0]
 8008b20:	18c0      	addlt	r0, r0, r3
 8008b22:	4770      	bx	lr

08008b24 <__retarget_lock_acquire_recursive>:
 8008b24:	4770      	bx	lr

08008b26 <__retarget_lock_release_recursive>:
 8008b26:	4770      	bx	lr

08008b28 <_init>:
 8008b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2a:	bf00      	nop
 8008b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b2e:	bc08      	pop	{r3}
 8008b30:	469e      	mov	lr, r3
 8008b32:	4770      	bx	lr

08008b34 <_fini>:
 8008b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b36:	bf00      	nop
 8008b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b3a:	bc08      	pop	{r3}
 8008b3c:	469e      	mov	lr, r3
 8008b3e:	4770      	bx	lr
