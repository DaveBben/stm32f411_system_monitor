
stm32serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001780  0800b948  0800b948  0001b948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0c8  0800d0c8  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0c8  0800d0c8  0001d0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0d0  0800d0d0  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0d0  0800d0d0  0001d0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0d4  0800d0d4  0001d0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800d0d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026dc  200001f8  0800d2d0  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200028d4  0800d2d0  000228d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001caae  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d93  00000000  00000000  0003ccd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  00040a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001a0f1  00000000  00000000  00041f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000199ff  00000000  00000000  0005c009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0009330f  00000000  00000000  00075a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00108d17  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001320  00000000  00000000  00108d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e48  00000000  00000000  0010a090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b92c 	.word	0x0800b92c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800b92c 	.word	0x0800b92c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c70:	f000 b96e 	b.w	8000f50 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	4604      	mov	r4, r0
 8000c94:	468c      	mov	ip, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f040 8083 	bne.w	8000da2 <__udivmoddi4+0x116>
 8000c9c:	428a      	cmp	r2, r1
 8000c9e:	4617      	mov	r7, r2
 8000ca0:	d947      	bls.n	8000d32 <__udivmoddi4+0xa6>
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	b142      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca8:	f1c2 0020 	rsb	r0, r2, #32
 8000cac:	fa24 f000 	lsr.w	r0, r4, r0
 8000cb0:	4091      	lsls	r1, r2
 8000cb2:	4097      	lsls	r7, r2
 8000cb4:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb8:	4094      	lsls	r4, r2
 8000cba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc4:	fa1f fe87 	uxth.w	lr, r7
 8000cc8:	fb08 c116 	mls	r1, r8, r6, ip
 8000ccc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd0:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	d909      	bls.n	8000cec <__udivmoddi4+0x60>
 8000cd8:	18fb      	adds	r3, r7, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cde:	f080 8119 	bcs.w	8000f14 <__udivmoddi4+0x288>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 8116 	bls.w	8000f14 <__udivmoddi4+0x288>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	443b      	add	r3, r7
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x8c>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0a:	f080 8105 	bcs.w	8000f18 <__udivmoddi4+0x28c>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f240 8102 	bls.w	8000f18 <__udivmoddi4+0x28c>
 8000d14:	3802      	subs	r0, #2
 8000d16:	443c      	add	r4, r7
 8000d18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1c:	eba4 040e 	sub.w	r4, r4, lr
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa0>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	b902      	cbnz	r2, 8000d36 <__udivmoddi4+0xaa>
 8000d34:	deff      	udf	#255	; 0xff
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	2a00      	cmp	r2, #0
 8000d3c:	d150      	bne.n	8000de0 <__udivmoddi4+0x154>
 8000d3e:	1bcb      	subs	r3, r1, r7
 8000d40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d44:	fa1f f887 	uxth.w	r8, r7
 8000d48:	2601      	movs	r6, #1
 8000d4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4e:	0c21      	lsrs	r1, r4, #16
 8000d50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d58:	fb08 f30c 	mul.w	r3, r8, ip
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	d907      	bls.n	8000d70 <__udivmoddi4+0xe4>
 8000d60:	1879      	adds	r1, r7, r1
 8000d62:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0xe2>
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	f200 80e9 	bhi.w	8000f40 <__udivmoddi4+0x2b4>
 8000d6e:	4684      	mov	ip, r0
 8000d70:	1ac9      	subs	r1, r1, r3
 8000d72:	b2a3      	uxth	r3, r4
 8000d74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d80:	fb08 f800 	mul.w	r8, r8, r0
 8000d84:	45a0      	cmp	r8, r4
 8000d86:	d907      	bls.n	8000d98 <__udivmoddi4+0x10c>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x10a>
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	f200 80d9 	bhi.w	8000f48 <__udivmoddi4+0x2bc>
 8000d96:	4618      	mov	r0, r3
 8000d98:	eba4 0408 	sub.w	r4, r4, r8
 8000d9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000da0:	e7bf      	b.n	8000d22 <__udivmoddi4+0x96>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0x12e>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80b1 	beq.w	8000f0e <__udivmoddi4+0x282>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x1cc>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0x140>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80b8 	bhi.w	8000f3c <__udivmoddi4+0x2b0>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0103 	sbc.w	r1, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	468c      	mov	ip, r1
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0a8      	beq.n	8000d2c <__udivmoddi4+0xa0>
 8000dda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dde:	e7a5      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f603 	lsr.w	r6, r0, r3
 8000de8:	4097      	lsls	r7, r2
 8000dea:	fa01 f002 	lsl.w	r0, r1, r2
 8000dee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df2:	40d9      	lsrs	r1, r3
 8000df4:	4330      	orrs	r0, r6
 8000df6:	0c03      	lsrs	r3, r0, #16
 8000df8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e08:	fb06 f108 	mul.w	r1, r6, r8
 8000e0c:	4299      	cmp	r1, r3
 8000e0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x19c>
 8000e14:	18fb      	adds	r3, r7, r3
 8000e16:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e1a:	f080 808d 	bcs.w	8000f38 <__udivmoddi4+0x2ac>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 808a 	bls.w	8000f38 <__udivmoddi4+0x2ac>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	443b      	add	r3, r7
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b281      	uxth	r1, r0
 8000e2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e38:	fb00 f308 	mul.w	r3, r0, r8
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x1c4>
 8000e40:	1879      	adds	r1, r7, r1
 8000e42:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e46:	d273      	bcs.n	8000f30 <__udivmoddi4+0x2a4>
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d971      	bls.n	8000f30 <__udivmoddi4+0x2a4>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4439      	add	r1, r7
 8000e50:	1acb      	subs	r3, r1, r3
 8000e52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e56:	e778      	b.n	8000d4a <__udivmoddi4+0xbe>
 8000e58:	f1c6 0c20 	rsb	ip, r6, #32
 8000e5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e64:	431c      	orrs	r4, r3
 8000e66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e76:	431f      	orrs	r7, r3
 8000e78:	0c3b      	lsrs	r3, r7, #16
 8000e7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7e:	fa1f f884 	uxth.w	r8, r4
 8000e82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	fa02 f206 	lsl.w	r2, r2, r6
 8000e94:	fa00 f306 	lsl.w	r3, r0, r6
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x220>
 8000e9a:	1861      	adds	r1, r4, r1
 8000e9c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ea0:	d248      	bcs.n	8000f34 <__udivmoddi4+0x2a8>
 8000ea2:	458a      	cmp	sl, r1
 8000ea4:	d946      	bls.n	8000f34 <__udivmoddi4+0x2a8>
 8000ea6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eaa:	4421      	add	r1, r4
 8000eac:	eba1 010a 	sub.w	r1, r1, sl
 8000eb0:	b2bf      	uxth	r7, r7
 8000eb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ebe:	fb00 f808 	mul.w	r8, r0, r8
 8000ec2:	45b8      	cmp	r8, r7
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x24a>
 8000ec6:	19e7      	adds	r7, r4, r7
 8000ec8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ecc:	d22e      	bcs.n	8000f2c <__udivmoddi4+0x2a0>
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d92c      	bls.n	8000f2c <__udivmoddi4+0x2a0>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4427      	add	r7, r4
 8000ed6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eda:	eba7 0708 	sub.w	r7, r7, r8
 8000ede:	fba0 8902 	umull	r8, r9, r0, r2
 8000ee2:	454f      	cmp	r7, r9
 8000ee4:	46c6      	mov	lr, r8
 8000ee6:	4649      	mov	r1, r9
 8000ee8:	d31a      	bcc.n	8000f20 <__udivmoddi4+0x294>
 8000eea:	d017      	beq.n	8000f1c <__udivmoddi4+0x290>
 8000eec:	b15d      	cbz	r5, 8000f06 <__udivmoddi4+0x27a>
 8000eee:	ebb3 020e 	subs.w	r2, r3, lr
 8000ef2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000efa:	40f2      	lsrs	r2, r6
 8000efc:	ea4c 0202 	orr.w	r2, ip, r2
 8000f00:	40f7      	lsrs	r7, r6
 8000f02:	e9c5 2700 	strd	r2, r7, [r5]
 8000f06:	2600      	movs	r6, #0
 8000f08:	4631      	mov	r1, r6
 8000f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0e:	462e      	mov	r6, r5
 8000f10:	4628      	mov	r0, r5
 8000f12:	e70b      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000f14:	4606      	mov	r6, r0
 8000f16:	e6e9      	b.n	8000cec <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fd      	b.n	8000d18 <__udivmoddi4+0x8c>
 8000f1c:	4543      	cmp	r3, r8
 8000f1e:	d2e5      	bcs.n	8000eec <__udivmoddi4+0x260>
 8000f20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f24:	eb69 0104 	sbc.w	r1, r9, r4
 8000f28:	3801      	subs	r0, #1
 8000f2a:	e7df      	b.n	8000eec <__udivmoddi4+0x260>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	e7d2      	b.n	8000ed6 <__udivmoddi4+0x24a>
 8000f30:	4660      	mov	r0, ip
 8000f32:	e78d      	b.n	8000e50 <__udivmoddi4+0x1c4>
 8000f34:	4681      	mov	r9, r0
 8000f36:	e7b9      	b.n	8000eac <__udivmoddi4+0x220>
 8000f38:	4666      	mov	r6, ip
 8000f3a:	e775      	b.n	8000e28 <__udivmoddi4+0x19c>
 8000f3c:	4630      	mov	r0, r6
 8000f3e:	e74a      	b.n	8000dd6 <__udivmoddi4+0x14a>
 8000f40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f44:	4439      	add	r1, r7
 8000f46:	e713      	b.n	8000d70 <__udivmoddi4+0xe4>
 8000f48:	3802      	subs	r0, #2
 8000f4a:	443c      	add	r4, r7
 8000f4c:	e724      	b.n	8000d98 <__udivmoddi4+0x10c>
 8000f4e:	bf00      	nop

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <updateDisplay>:
// Copy all data from local screenbuffer to the screen
	ssd1306_UpdateScreen(&hi2c1);

}

void updateDisplay(struct System *system) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b092      	sub	sp, #72	; 0x48
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]

	// ssd1306_Fill(Black);
	ssd1306_UpdateScreen(&hi2c1);
 8000f5c:	4832      	ldr	r0, [pc, #200]	; (8001028 <updateDisplay+0xd4>)
 8000f5e:	f000 fd63 	bl	8001a28 <ssd1306_UpdateScreen>

	char cpu_text[20] = { 0 };
 8000f62:	2300      	movs	r3, #0
 8000f64:	637b      	str	r3, [r7, #52]	; 0x34
 8000f66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
	char ram_text[20] = { 0 };
 8000f74:	2300      	movs	r3, #0
 8000f76:	623b      	str	r3, [r7, #32]
 8000f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
	char gpu_text[20] = { 0 };
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	f107 0310 	add.w	r3, r7, #16
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]

	sprintf(cpu_text, "CPU %d%% %d C", system->cpu_util, system->cpu_temp);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	791b      	ldrb	r3, [r3, #4]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	799b      	ldrb	r3, [r3, #6]
 8000fa2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000fa6:	4921      	ldr	r1, [pc, #132]	; (800102c <updateDisplay+0xd8>)
 8000fa8:	f009 f830 	bl	800a00c <siprintf>
	sprintf(ram_text, "Memory Util %d%%", system->ram_util);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	f107 0320 	add.w	r3, r7, #32
 8000fb8:	491d      	ldr	r1, [pc, #116]	; (8001030 <updateDisplay+0xdc>)
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f009 f826 	bl	800a00c <siprintf>
	sprintf(gpu_text, "GPU %d%% %d C", system->gpu_util, system->gpu_temp);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8000fce:	f107 000c 	add.w	r0, r7, #12
 8000fd2:	4918      	ldr	r1, [pc, #96]	; (8001034 <updateDisplay+0xe0>)
 8000fd4:	f009 f81a 	bl	800a00c <siprintf>

	// Write data to local screenbuffer
	ssd1306_SetCursor(5, 0);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2005      	movs	r0, #5
 8000fdc:	f000 fe5c 	bl	8001c98 <ssd1306_SetCursor>
	ssd1306_WriteString(ram_text, Font_7x10, White);
 8000fe0:	4a15      	ldr	r2, [pc, #84]	; (8001038 <updateDisplay+0xe4>)
 8000fe2:	f107 0020 	add.w	r0, r7, #32
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	ca06      	ldmia	r2, {r1, r2}
 8000fea:	f000 fe2f 	bl	8001c4c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 15);
 8000fee:	210f      	movs	r1, #15
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f000 fe51 	bl	8001c98 <ssd1306_SetCursor>
	ssd1306_WriteString(cpu_text, Font_11x18, White);
 8000ff6:	4a11      	ldr	r2, [pc, #68]	; (800103c <updateDisplay+0xe8>)
 8000ff8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	ca06      	ldmia	r2, {r1, r2}
 8001000:	f000 fe24 	bl	8001c4c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 40);
 8001004:	2128      	movs	r1, #40	; 0x28
 8001006:	2000      	movs	r0, #0
 8001008:	f000 fe46 	bl	8001c98 <ssd1306_SetCursor>
	ssd1306_WriteString(gpu_text, Font_11x18, White);
 800100c:	4a0b      	ldr	r2, [pc, #44]	; (800103c <updateDisplay+0xe8>)
 800100e:	f107 000c 	add.w	r0, r7, #12
 8001012:	2301      	movs	r3, #1
 8001014:	ca06      	ldmia	r2, {r1, r2}
 8001016:	f000 fe19 	bl	8001c4c <ssd1306_WriteString>

// Copy all data from local screenbuffer to the screen
	ssd1306_UpdateScreen(&hi2c1);
 800101a:	4803      	ldr	r0, [pc, #12]	; (8001028 <updateDisplay+0xd4>)
 800101c:	f000 fd04 	bl	8001a28 <ssd1306_UpdateScreen>

}
 8001020:	bf00      	nop
 8001022:	3748      	adds	r7, #72	; 0x48
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000b6c 	.word	0x20000b6c
 800102c:	0800b948 	.word	0x0800b948
 8001030:	0800b958 	.word	0x0800b958
 8001034:	0800b96c 	.word	0x0800b96c
 8001038:	20000000 	.word	0x20000000
 800103c:	20000008 	.word	0x20000008

08001040 <Set_LED>:

void Set_LED(int LEDnum, int Red, int Green, int Blue) {
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	b2d9      	uxtb	r1, r3
 8001052:	4a11      	ldr	r2, [pc, #68]	; (8001098 <Set_LED+0x58>)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	b2d9      	uxtb	r1, r3
 800105e:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <Set_LED+0x58>)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	460a      	mov	r2, r1
 8001068:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	b2d9      	uxtb	r1, r3
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <Set_LED+0x58>)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	460a      	mov	r2, r1
 8001078:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2d9      	uxtb	r1, r3
 800107e:	4a06      	ldr	r2, [pc, #24]	; (8001098 <Set_LED+0x58>)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	460a      	mov	r2, r1
 8001088:	70da      	strb	r2, [r3, #3]
}
 800108a:	bf00      	nop
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000b3c 	.word	0x20000b3c
 800109c:	00000000 	.word	0x00000000

080010a0 <Set_Brightness>:

void Set_Brightness(int brightness)  // 0-45
{
 80010a0:	b5b0      	push	{r4, r5, r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b2d      	cmp	r3, #45	; 0x2d
 80010ac:	dd01      	ble.n	80010b2 <Set_Brightness+0x12>
		brightness = 45;
 80010ae:	232d      	movs	r3, #45	; 0x2d
 80010b0:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < MAX_LED; i++) {
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	e060      	b.n	800117a <Set_Brightness+0xda>
		LED_Mod[i][0] = LED_Data[i][0];
 80010b8:	4a37      	ldr	r2, [pc, #220]	; (8001198 <Set_Brightness+0xf8>)
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 80010c0:	4a36      	ldr	r2, [pc, #216]	; (800119c <Set_Brightness+0xfc>)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; j++) {
 80010c8:	2301      	movs	r3, #1
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	e04f      	b.n	800116e <Set_Brightness+0xce>
			float angle = 90 - brightness;  // in degrees
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80010d4:	ee07 3a90 	vmov	s15, r3
 80010d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010dc:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle * PI / 180;  // in rad
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f7ff fa31 	bl	8000548 <__aeabi_f2d>
 80010e6:	a32a      	add	r3, pc, #168	; (adr r3, 8001190 <Set_Brightness+0xf0>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff fa84 	bl	80005f8 <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <Set_Brightness+0x100>)
 80010fe:	f7ff fba5 	bl	800084c <__aeabi_ddiv>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fd57 	bl	8000bbc <__aeabi_d2f>
 800110e:	4603      	mov	r3, r0
 8001110:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j]) / (tan(angle));
 8001112:	4a21      	ldr	r2, [pc, #132]	; (8001198 <Set_Brightness+0xf8>)
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	441a      	add	r2, r3
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4413      	add	r3, r2
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f9ff 	bl	8000524 <__aeabi_i2d>
 8001126:	4604      	mov	r4, r0
 8001128:	460d      	mov	r5, r1
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f7ff fa0c 	bl	8000548 <__aeabi_f2d>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	ec43 2b10 	vmov	d0, r2, r3
 8001138:	f009 fb96 	bl	800a868 <tan>
 800113c:	ec53 2b10 	vmov	r2, r3, d0
 8001140:	4620      	mov	r0, r4
 8001142:	4629      	mov	r1, r5
 8001144:	f7ff fb82 	bl	800084c <__aeabi_ddiv>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4610      	mov	r0, r2
 800114e:	4619      	mov	r1, r3
 8001150:	f7ff fd14 	bl	8000b7c <__aeabi_d2uiz>
 8001154:	4603      	mov	r3, r0
 8001156:	b2d9      	uxtb	r1, r3
 8001158:	4a10      	ldr	r2, [pc, #64]	; (800119c <Set_Brightness+0xfc>)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	441a      	add	r2, r3
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	4413      	add	r3, r2
 8001164:	460a      	mov	r2, r1
 8001166:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; j++) {
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	3301      	adds	r3, #1
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	2b03      	cmp	r3, #3
 8001172:	ddac      	ble.n	80010ce <Set_Brightness+0x2e>
	for (int i = 0; i < MAX_LED; i++) {
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3301      	adds	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	2b0b      	cmp	r3, #11
 800117e:	dd9b      	ble.n	80010b8 <Set_Brightness+0x18>
		}
	}

#endif

}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bdb0      	pop	{r4, r5, r7, pc}
 800118a:	bf00      	nop
 800118c:	f3af 8000 	nop.w
 8001190:	53c8d4f1 	.word	0x53c8d4f1
 8001194:	400921fb 	.word	0x400921fb
 8001198:	20000b3c 	.word	0x20000b3c
 800119c:	20000bc0 	.word	0x20000bc0
 80011a0:	40668000 	.word	0x40668000

080011a4 <WS2812_Send>:

//https://controllerstech.com/interface-ws2812-with-stm32/
void WS2812_Send(void) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
	uint32_t indx = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; i++) {
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	e036      	b.n	8001222 <WS2812_Send+0x7e>
#if USE_BRIGHTNESS
		color =
				((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 80011b4:	4a2e      	ldr	r2, [pc, #184]	; (8001270 <WS2812_Send+0xcc>)
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	785b      	ldrb	r3, [r3, #1]
 80011be:	041a      	lsls	r2, r3, #16
 80011c0:	492b      	ldr	r1, [pc, #172]	; (8001270 <WS2812_Send+0xcc>)
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	440b      	add	r3, r1
 80011c8:	789b      	ldrb	r3, [r3, #2]
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	431a      	orrs	r2, r3
 80011ce:	4928      	ldr	r1, [pc, #160]	; (8001270 <WS2812_Send+0xcc>)
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	78db      	ldrb	r3, [r3, #3]
 80011d8:	4313      	orrs	r3, r2
		color =
 80011da:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i = 23; i >= 0; i--) {
 80011dc:	2317      	movs	r3, #23
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	e019      	b.n	8001216 <WS2812_Send+0x72>
			if (color & (1 << i)) {
 80011e2:	2201      	movs	r2, #1
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	461a      	mov	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4013      	ands	r3, r2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <WS2812_Send+0x5c>
				pwmData[indx] = 80;  // 2/3 of 120
 80011f4:	4a1f      	ldr	r2, [pc, #124]	; (8001274 <WS2812_Send+0xd0>)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	2150      	movs	r1, #80	; 0x50
 80011fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80011fe:	e004      	b.n	800120a <WS2812_Send+0x66>
			}

			else
				pwmData[indx] = 40;  // 1/3 of 120
 8001200:	4a1c      	ldr	r2, [pc, #112]	; (8001274 <WS2812_Send+0xd0>)
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	2128      	movs	r1, #40	; 0x28
 8001206:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3301      	adds	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
		for (int i = 23; i >= 0; i--) {
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	3b01      	subs	r3, #1
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2b00      	cmp	r3, #0
 800121a:	dae2      	bge.n	80011e2 <WS2812_Send+0x3e>
	for (int i = 0; i < MAX_LED; i++) {
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	3301      	adds	r3, #1
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	2b0b      	cmp	r3, #11
 8001226:	ddc5      	ble.n	80011b4 <WS2812_Send+0x10>
		}

	}

	for (int i = 0; i < 50; i++) {
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	e00a      	b.n	8001244 <WS2812_Send+0xa0>
		pwmData[indx] = 0;
 800122e:	4a11      	ldr	r2, [pc, #68]	; (8001274 <WS2812_Send+0xd0>)
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	2100      	movs	r1, #0
 8001234:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	3301      	adds	r3, #1
 800123c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; i++) {
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	3301      	adds	r3, #1
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	2b31      	cmp	r3, #49	; 0x31
 8001248:	ddf1      	ble.n	800122e <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*) pwmData, indx);
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	b29b      	uxth	r3, r3
 800124e:	4a09      	ldr	r2, [pc, #36]	; (8001274 <WS2812_Send+0xd0>)
 8001250:	2100      	movs	r1, #0
 8001252:	4809      	ldr	r0, [pc, #36]	; (8001278 <WS2812_Send+0xd4>)
 8001254:	f004 f85e 	bl	8005314 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag) {
 8001258:	bf00      	nop
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <WS2812_Send+0xd8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0fb      	beq.n	800125a <WS2812_Send+0xb6>
	};
	datasentflag = 0;
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <WS2812_Send+0xd8>)
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
}
 8001268:	bf00      	nop
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000bc0 	.word	0x20000bc0
 8001274:	20000bf0 	.word	0x20000bf0
 8001278:	20000e94 	.word	0x20000e94
 800127c:	20000214 	.word	0x20000214

08001280 <HAL_TIM_PWM_PulseFinishedCallback>:


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001288:	2100      	movs	r1, #0
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800128c:	f004 f9f2 	bl	8005674 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8001290:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001292:	2201      	movs	r2, #1
 8001294:	601a      	str	r2, [r3, #0]
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000e94 	.word	0x20000e94
 80012a4:	20000214 	.word	0x20000214

080012a8 <updateWheel>:

void updateWheel(uint8_t num_leds){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]

	for(uint8_t i = 0; i < MAX_LED; i++){
 80012b2:	2300      	movs	r3, #0
 80012b4:	73fb      	strb	r3, [r7, #15]
 80012b6:	e018      	b.n	80012ea <updateWheel+0x42>
		Set_Brightness(25);
 80012b8:	2019      	movs	r0, #25
 80012ba:	f7ff fef1 	bl	80010a0 <Set_Brightness>
		if(i < num_leds){
 80012be:	7bfa      	ldrb	r2, [r7, #15]
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d206      	bcs.n	80012d4 <updateWheel+0x2c>
			Set_LED(i, 0, 0, 255);
 80012c6:	7bf8      	ldrb	r0, [r7, #15]
 80012c8:	23ff      	movs	r3, #255	; 0xff
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	f7ff feb7 	bl	8001040 <Set_LED>
 80012d2:	e005      	b.n	80012e0 <updateWheel+0x38>
		}else{
			Set_LED(i, 0, 0, 0);
 80012d4:	7bf8      	ldrb	r0, [r7, #15]
 80012d6:	2300      	movs	r3, #0
 80012d8:	2200      	movs	r2, #0
 80012da:	2100      	movs	r1, #0
 80012dc:	f7ff feb0 	bl	8001040 <Set_LED>
		}
		 WS2812_Send();
 80012e0:	f7ff ff60 	bl	80011a4 <WS2812_Send>
	for(uint8_t i = 0; i < MAX_LED; i++){
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	3301      	adds	r3, #1
 80012e8:	73fb      	strb	r3, [r7, #15]
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	2b0b      	cmp	r3, #11
 80012ee:	d9e3      	bls.n	80012b8 <updateWheel+0x10>
	}


}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b0f0      	sub	sp, #448	; 0x1c0
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char msg[11] = "No Data";
 8001302:	4a48      	ldr	r2, [pc, #288]	; (8001424 <main+0x128>)
 8001304:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001308:	e892 0003 	ldmia.w	r2, {r0, r1}
 800130c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001310:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001314:	2100      	movs	r1, #0
 8001316:	460a      	mov	r2, r1
 8001318:	801a      	strh	r2, [r3, #0]
 800131a:	460a      	mov	r2, r1
 800131c:	709a      	strb	r2, [r3, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800131e:	f000 fe81 	bl	8002024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001322:	f000 f885 	bl	8001430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001326:	f000 f9db 	bl	80016e0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800132a:	f008 f83d 	bl	80093a8 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 800132e:	f000 f8e9 	bl	8001504 <MX_I2C1_Init>
  MX_DMA_Init();
 8001332:	f000 f9b5 	bl	80016a0 <MX_DMA_Init>
  MX_TIM1_Init();
 8001336:	f000 f913 	bl	8001560 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	// Init lcd using one of the stm32HAL i2c typedefs
	if (ssd1306_Init(&hi2c1) != 0) {
 800133a:	483b      	ldr	r0, [pc, #236]	; (8001428 <main+0x12c>)
 800133c:	f000 fa30 	bl	80017a0 <ssd1306_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <main+0x4e>
		Error_Handler();
 8001346:	f000 fa0f 	bl	8001768 <Error_Handler>
//	writeToDisplay(msg);
	struct System system;

	DataHeaders headers;

	uint8_t data_frame_buffer[255] = {0};
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	3304      	adds	r3, #4
 8001352:	22fb      	movs	r2, #251	; 0xfb
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f008 fe50 	bl	8009ffc <memset>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if(!isBufferEmpty()){
 800135c:	f008 f9f6 	bl	800974c <isBufferEmpty>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1fa      	bne.n	800135c <main+0x60>
			get_data_frame(data_frame_buffer);
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	4618      	mov	r0, r3
 800136a:	f008 f997 	bl	800969c <get_data_frame>
				DataHeaders data_head = (DataHeaders) data_frame_buffer[0];
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	f887 31bb 	strb.w	r3, [r7, #443]	; 0x1bb

				switch (data_head) {
 8001376:	f897 31bb 	ldrb.w	r3, [r7, #443]	; 0x1bb
 800137a:	3b02      	subs	r3, #2
 800137c:	2b0b      	cmp	r3, #11
 800137e:	d84a      	bhi.n	8001416 <main+0x11a>
 8001380:	a201      	add	r2, pc, #4	; (adr r2, 8001388 <main+0x8c>)
 8001382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001386:	bf00      	nop
 8001388:	080013b9 	.word	0x080013b9
 800138c:	08001417 	.word	0x08001417
 8001390:	080013ef 	.word	0x080013ef
 8001394:	08001417 	.word	0x08001417
 8001398:	080013f9 	.word	0x080013f9
 800139c:	08001417 	.word	0x08001417
 80013a0:	08001417 	.word	0x08001417
 80013a4:	08001417 	.word	0x08001417
 80013a8:	08001417 	.word	0x08001417
 80013ac:	08001417 	.word	0x08001417
 80013b0:	08001403 	.word	0x08001403
 80013b4:	0800140d 	.word	0x0800140d
				case CPU_UTIL: {
					system.cpu_util = data_frame_buffer[1];
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	785b      	ldrb	r3, [r3, #1]
 80013bc:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
					int leds = system.cpu_util/(9);
 80013c0:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 80013c4:	4a19      	ldr	r2, [pc, #100]	; (800142c <main+0x130>)
 80013c6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ca:	085b      	lsrs	r3, r3, #1
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
					if(leds < 1){
 80013d2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	dc02      	bgt.n	80013e0 <main+0xe4>
						leds = 1;
 80013da:	2301      	movs	r3, #1
 80013dc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
					}
					updateWheel(leds);
 80013e0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ff5e 	bl	80012a8 <updateWheel>
					break;
 80013ec:	e014      	b.n	8001418 <main+0x11c>
				}
				case CPU_TEMP: {
					system.cpu_temp = data_frame_buffer[1];
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	785b      	ldrb	r3, [r3, #1]
 80013f2:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
					break;
 80013f6:	e00f      	b.n	8001418 <main+0x11c>
				}
				case RAM: {
					system.ram_util = data_frame_buffer[1];
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	785b      	ldrb	r3, [r3, #1]
 80013fc:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d
					break;
 8001400:	e00a      	b.n	8001418 <main+0x11c>
				}
				case GPU_UTIL: {
					system.gpu_util = data_frame_buffer[1];
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	785b      	ldrb	r3, [r3, #1]
 8001406:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					break;
 800140a:	e005      	b.n	8001418 <main+0x11c>
				}
				case GPU_TEMP: {
					system.gpu_temp = data_frame_buffer[1];
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	785b      	ldrb	r3, [r3, #1]
 8001410:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
					break;
 8001414:	e000      	b.n	8001418 <main+0x11c>
				}
				default: {
					break;
 8001416:	bf00      	nop
				}
				}

				updateDisplay(&system);
 8001418:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fd99 	bl	8000f54 <updateDisplay>
		if(!isBufferEmpty()){
 8001422:	e79b      	b.n	800135c <main+0x60>
 8001424:	0800b97c 	.word	0x0800b97c
 8001428:	20000b6c 	.word	0x20000b6c
 800142c:	38e38e39 	.word	0x38e38e39

08001430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b094      	sub	sp, #80	; 0x50
 8001434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001436:	f107 0320 	add.w	r3, r7, #32
 800143a:	2230      	movs	r2, #48	; 0x30
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f008 fddc 	bl	8009ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001454:	2300      	movs	r3, #0
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	4b28      	ldr	r3, [pc, #160]	; (80014fc <SystemClock_Config+0xcc>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	4a27      	ldr	r2, [pc, #156]	; (80014fc <SystemClock_Config+0xcc>)
 800145e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001462:	6413      	str	r3, [r2, #64]	; 0x40
 8001464:	4b25      	ldr	r3, [pc, #148]	; (80014fc <SystemClock_Config+0xcc>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001470:	2300      	movs	r3, #0
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	4b22      	ldr	r3, [pc, #136]	; (8001500 <SystemClock_Config+0xd0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a21      	ldr	r2, [pc, #132]	; (8001500 <SystemClock_Config+0xd0>)
 800147a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <SystemClock_Config+0xd0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800148c:	2301      	movs	r3, #1
 800148e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001496:	2302      	movs	r3, #2
 8001498:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800149a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800149e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80014a0:	2319      	movs	r3, #25
 80014a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80014a4:	23c0      	movs	r3, #192	; 0xc0
 80014a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014a8:	2302      	movs	r3, #2
 80014aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014ac:	2304      	movs	r3, #4
 80014ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b0:	f107 0320 	add.w	r3, r7, #32
 80014b4:	4618      	mov	r0, r3
 80014b6:	f003 fa51 	bl	800495c <HAL_RCC_OscConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014c0:	f000 f952 	bl	8001768 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c4:	230f      	movs	r3, #15
 80014c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c8:	2302      	movs	r3, #2
 80014ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	2103      	movs	r1, #3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f003 fcb2 	bl	8004e4c <HAL_RCC_ClockConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014ee:	f000 f93b 	bl	8001768 <Error_Handler>
  }
}
 80014f2:	bf00      	nop
 80014f4:	3750      	adds	r7, #80	; 0x50
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	40007000 	.word	0x40007000

08001504 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <MX_I2C1_Init+0x50>)
 800150a:	4a13      	ldr	r2, [pc, #76]	; (8001558 <MX_I2C1_Init+0x54>)
 800150c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <MX_I2C1_Init+0x50>)
 8001510:	4a12      	ldr	r2, [pc, #72]	; (800155c <MX_I2C1_Init+0x58>)
 8001512:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <MX_I2C1_Init+0x50>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <MX_I2C1_Init+0x50>)
 800151c:	2200      	movs	r2, #0
 800151e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <MX_I2C1_Init+0x50>)
 8001522:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001526:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001528:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <MX_I2C1_Init+0x50>)
 800152a:	2200      	movs	r2, #0
 800152c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <MX_I2C1_Init+0x50>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001534:	4b07      	ldr	r3, [pc, #28]	; (8001554 <MX_I2C1_Init+0x50>)
 8001536:	2200      	movs	r2, #0
 8001538:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MX_I2C1_Init+0x50>)
 800153c:	2200      	movs	r2, #0
 800153e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001540:	4804      	ldr	r0, [pc, #16]	; (8001554 <MX_I2C1_Init+0x50>)
 8001542:	f001 fc2d 	bl	8002da0 <HAL_I2C_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800154c:	f000 f90c 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000b6c 	.word	0x20000b6c
 8001558:	40005400 	.word	0x40005400
 800155c:	00061a80 	.word	0x00061a80

08001560 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b096      	sub	sp, #88	; 0x58
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001566:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001574:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800157e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]
 800158e:	615a      	str	r2, [r3, #20]
 8001590:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	2220      	movs	r2, #32
 8001596:	2100      	movs	r1, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f008 fd2f 	bl	8009ffc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800159e:	4b3e      	ldr	r3, [pc, #248]	; (8001698 <MX_TIM1_Init+0x138>)
 80015a0:	4a3e      	ldr	r2, [pc, #248]	; (800169c <MX_TIM1_Init+0x13c>)
 80015a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015a4:	4b3c      	ldr	r3, [pc, #240]	; (8001698 <MX_TIM1_Init+0x138>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015aa:	4b3b      	ldr	r3, [pc, #236]	; (8001698 <MX_TIM1_Init+0x138>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 120-1;
 80015b0:	4b39      	ldr	r3, [pc, #228]	; (8001698 <MX_TIM1_Init+0x138>)
 80015b2:	2277      	movs	r2, #119	; 0x77
 80015b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b6:	4b38      	ldr	r3, [pc, #224]	; (8001698 <MX_TIM1_Init+0x138>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015bc:	4b36      	ldr	r3, [pc, #216]	; (8001698 <MX_TIM1_Init+0x138>)
 80015be:	2200      	movs	r2, #0
 80015c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c2:	4b35      	ldr	r3, [pc, #212]	; (8001698 <MX_TIM1_Init+0x138>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015c8:	4833      	ldr	r0, [pc, #204]	; (8001698 <MX_TIM1_Init+0x138>)
 80015ca:	f003 fdfb 	bl	80051c4 <HAL_TIM_Base_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80015d4:	f000 f8c8 	bl	8001768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015dc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015e2:	4619      	mov	r1, r3
 80015e4:	482c      	ldr	r0, [pc, #176]	; (8001698 <MX_TIM1_Init+0x138>)
 80015e6:	f004 f9cd 	bl	8005984 <HAL_TIM_ConfigClockSource>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80015f0:	f000 f8ba 	bl	8001768 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015f4:	4828      	ldr	r0, [pc, #160]	; (8001698 <MX_TIM1_Init+0x138>)
 80015f6:	f003 fe34 	bl	8005262 <HAL_TIM_PWM_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001600:	f000 f8b2 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001604:	2300      	movs	r3, #0
 8001606:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800160c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001610:	4619      	mov	r1, r3
 8001612:	4821      	ldr	r0, [pc, #132]	; (8001698 <MX_TIM1_Init+0x138>)
 8001614:	f004 fe2e 	bl	8006274 <HAL_TIMEx_MasterConfigSynchronization>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800161e:	f000 f8a3 	bl	8001768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001622:	2360      	movs	r3, #96	; 0x60
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800162a:	2300      	movs	r3, #0
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800162e:	2300      	movs	r3, #0
 8001630:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800163a:	2300      	movs	r3, #0
 800163c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800163e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001642:	2200      	movs	r2, #0
 8001644:	4619      	mov	r1, r3
 8001646:	4814      	ldr	r0, [pc, #80]	; (8001698 <MX_TIM1_Init+0x138>)
 8001648:	f004 f8da 	bl	8005800 <HAL_TIM_PWM_ConfigChannel>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001652:	f000 f889 	bl	8001768 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800166a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800166e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	4619      	mov	r1, r3
 8001678:	4807      	ldr	r0, [pc, #28]	; (8001698 <MX_TIM1_Init+0x138>)
 800167a:	f004 fe69 	bl	8006350 <HAL_TIMEx_ConfigBreakDeadTime>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001684:	f000 f870 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001688:	4803      	ldr	r0, [pc, #12]	; (8001698 <MX_TIM1_Init+0x138>)
 800168a:	f000 fbe1 	bl	8001e50 <HAL_TIM_MspPostInit>

}
 800168e:	bf00      	nop
 8001690:	3758      	adds	r7, #88	; 0x58
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000e94 	.word	0x20000e94
 800169c:	40010000 	.word	0x40010000

080016a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <MX_DMA_Init+0x3c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <MX_DMA_Init+0x3c>)
 80016b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_DMA_Init+0x3c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2100      	movs	r1, #0
 80016c6:	2039      	movs	r0, #57	; 0x39
 80016c8:	f000 fe1d 	bl	8002306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80016cc:	2039      	movs	r0, #57	; 0x39
 80016ce:	f000 fe36 	bl	800233e <HAL_NVIC_EnableIRQ>

}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800

080016e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <MX_GPIO_Init+0x84>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a1d      	ldr	r2, [pc, #116]	; (8001764 <MX_GPIO_Init+0x84>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <MX_GPIO_Init+0x84>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <MX_GPIO_Init+0x84>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a16      	ldr	r2, [pc, #88]	; (8001764 <MX_GPIO_Init+0x84>)
 800170c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b14      	ldr	r3, [pc, #80]	; (8001764 <MX_GPIO_Init+0x84>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <MX_GPIO_Init+0x84>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a0f      	ldr	r2, [pc, #60]	; (8001764 <MX_GPIO_Init+0x84>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <MX_GPIO_Init+0x84>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	603b      	str	r3, [r7, #0]
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <MX_GPIO_Init+0x84>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a08      	ldr	r2, [pc, #32]	; (8001764 <MX_GPIO_Init+0x84>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <MX_GPIO_Init+0x84>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	683b      	ldr	r3, [r7, #0]

}
 8001756:	bf00      	nop
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800

08001768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800176c:	b672      	cpsid	i
}
 800176e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001770:	e7fe      	b.n	8001770 <Error_Handler+0x8>

08001772 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b086      	sub	sp, #24
 8001776:	af04      	add	r7, sp, #16
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	460b      	mov	r3, r1
 800177c:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 800177e:	230a      	movs	r3, #10
 8001780:	9302      	str	r3, [sp, #8]
 8001782:	2301      	movs	r3, #1
 8001784:	9301      	str	r3, [sp, #4]
 8001786:	1cfb      	adds	r3, r7, #3
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2301      	movs	r3, #1
 800178c:	2200      	movs	r2, #0
 800178e:	2178      	movs	r1, #120	; 0x78
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f001 fc49 	bl	8003028 <HAL_I2C_Mem_Write>
 8001796:	4603      	mov	r3, r0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 80017a8:	2064      	movs	r0, #100	; 0x64
 80017aa:	f000 fcad 	bl	8002108 <HAL_Delay>
    int status = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 80017b2:	21ae      	movs	r1, #174	; 0xae
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff ffdc 	bl	8001772 <ssd1306_WriteCommand>
 80017ba:	4603      	mov	r3, r0
 80017bc:	461a      	mov	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	4413      	add	r3, r2
 80017c2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 80017c4:	2120      	movs	r1, #32
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ffd3 	bl	8001772 <ssd1306_WriteCommand>
 80017cc:	4603      	mov	r3, r0
 80017ce:	461a      	mov	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4413      	add	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80017d6:	2110      	movs	r1, #16
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ffca 	bl	8001772 <ssd1306_WriteCommand>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4413      	add	r3, r2
 80017e6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80017e8:	21b0      	movs	r1, #176	; 0xb0
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ffc1 	bl	8001772 <ssd1306_WriteCommand>
 80017f0:	4603      	mov	r3, r0
 80017f2:	461a      	mov	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4413      	add	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 80017fa:	21c8      	movs	r1, #200	; 0xc8
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff ffb8 	bl	8001772 <ssd1306_WriteCommand>
 8001802:	4603      	mov	r3, r0
 8001804:	461a      	mov	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4413      	add	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 800180c:	2100      	movs	r1, #0
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff ffaf 	bl	8001772 <ssd1306_WriteCommand>
 8001814:	4603      	mov	r3, r0
 8001816:	461a      	mov	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4413      	add	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 800181e:	2110      	movs	r1, #16
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ffa6 	bl	8001772 <ssd1306_WriteCommand>
 8001826:	4603      	mov	r3, r0
 8001828:	461a      	mov	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4413      	add	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001830:	2140      	movs	r1, #64	; 0x40
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ff9d 	bl	8001772 <ssd1306_WriteCommand>
 8001838:	4603      	mov	r3, r0
 800183a:	461a      	mov	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8001842:	2181      	movs	r1, #129	; 0x81
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ff94 	bl	8001772 <ssd1306_WriteCommand>
 800184a:	4603      	mov	r3, r0
 800184c:	461a      	mov	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4413      	add	r3, r2
 8001852:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8001854:	21ff      	movs	r1, #255	; 0xff
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff ff8b 	bl	8001772 <ssd1306_WriteCommand>
 800185c:	4603      	mov	r3, r0
 800185e:	461a      	mov	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4413      	add	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8001866:	21a1      	movs	r1, #161	; 0xa1
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ff82 	bl	8001772 <ssd1306_WriteCommand>
 800186e:	4603      	mov	r3, r0
 8001870:	461a      	mov	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4413      	add	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8001878:	21a6      	movs	r1, #166	; 0xa6
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ff79 	bl	8001772 <ssd1306_WriteCommand>
 8001880:	4603      	mov	r3, r0
 8001882:	461a      	mov	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4413      	add	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 800188a:	21a8      	movs	r1, #168	; 0xa8
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff70 	bl	8001772 <ssd1306_WriteCommand>
 8001892:	4603      	mov	r3, r0
 8001894:	461a      	mov	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4413      	add	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 800189c:	213f      	movs	r1, #63	; 0x3f
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ff67 	bl	8001772 <ssd1306_WriteCommand>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4413      	add	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80018ae:	21a4      	movs	r1, #164	; 0xa4
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ff5e 	bl	8001772 <ssd1306_WriteCommand>
 80018b6:	4603      	mov	r3, r0
 80018b8:	461a      	mov	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	4413      	add	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 80018c0:	21d3      	movs	r1, #211	; 0xd3
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ff55 	bl	8001772 <ssd1306_WriteCommand>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461a      	mov	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 80018d2:	2100      	movs	r1, #0
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ff4c 	bl	8001772 <ssd1306_WriteCommand>
 80018da:	4603      	mov	r3, r0
 80018dc:	461a      	mov	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4413      	add	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 80018e4:	21d5      	movs	r1, #213	; 0xd5
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ff43 	bl	8001772 <ssd1306_WriteCommand>
 80018ec:	4603      	mov	r3, r0
 80018ee:	461a      	mov	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4413      	add	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 80018f6:	21f0      	movs	r1, #240	; 0xf0
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ff3a 	bl	8001772 <ssd1306_WriteCommand>
 80018fe:	4603      	mov	r3, r0
 8001900:	461a      	mov	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4413      	add	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8001908:	21d9      	movs	r1, #217	; 0xd9
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ff31 	bl	8001772 <ssd1306_WriteCommand>
 8001910:	4603      	mov	r3, r0
 8001912:	461a      	mov	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4413      	add	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 800191a:	2122      	movs	r1, #34	; 0x22
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ff28 	bl	8001772 <ssd1306_WriteCommand>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4413      	add	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 800192c:	21da      	movs	r1, #218	; 0xda
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff ff1f 	bl	8001772 <ssd1306_WriteCommand>
 8001934:	4603      	mov	r3, r0
 8001936:	461a      	mov	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4413      	add	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 800193e:	2112      	movs	r1, #18
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ff16 	bl	8001772 <ssd1306_WriteCommand>
 8001946:	4603      	mov	r3, r0
 8001948:	461a      	mov	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4413      	add	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001950:	21db      	movs	r1, #219	; 0xdb
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ff0d 	bl	8001772 <ssd1306_WriteCommand>
 8001958:	4603      	mov	r3, r0
 800195a:	461a      	mov	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4413      	add	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001962:	2120      	movs	r1, #32
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff ff04 	bl	8001772 <ssd1306_WriteCommand>
 800196a:	4603      	mov	r3, r0
 800196c:	461a      	mov	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	4413      	add	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8001974:	218d      	movs	r1, #141	; 0x8d
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff fefb 	bl	8001772 <ssd1306_WriteCommand>
 800197c:	4603      	mov	r3, r0
 800197e:	461a      	mov	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4413      	add	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8001986:	2114      	movs	r1, #20
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff fef2 	bl	8001772 <ssd1306_WriteCommand>
 800198e:	4603      	mov	r3, r0
 8001990:	461a      	mov	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4413      	add	r3, r2
 8001996:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8001998:	21af      	movs	r1, #175	; 0xaf
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff fee9 	bl	8001772 <ssd1306_WriteCommand>
 80019a0:	4603      	mov	r3, r0
 80019a2:	461a      	mov	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4413      	add	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <ssd1306_Init+0x214>
        return 1;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e00f      	b.n	80019d4 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 80019b4:	2000      	movs	r0, #0
 80019b6:	f000 f813 	bl	80019e0 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f834 	bl	8001a28 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <ssd1306_Init+0x23c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80019c6:	4b05      	ldr	r3, [pc, #20]	; (80019dc <ssd1306_Init+0x23c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <ssd1306_Init+0x23c>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	715a      	strb	r2, [r3, #5]

    return 0;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000618 	.word	0x20000618

080019e0 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	e00d      	b.n	8001a0c <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <ssd1306_Fill+0x1a>
 80019f6:	2100      	movs	r1, #0
 80019f8:	e000      	b.n	80019fc <ssd1306_Fill+0x1c>
 80019fa:	21ff      	movs	r1, #255	; 0xff
 80019fc:	4a09      	ldr	r2, [pc, #36]	; (8001a24 <ssd1306_Fill+0x44>)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4413      	add	r3, r2
 8001a02:	460a      	mov	r2, r1
 8001a04:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a12:	d3ed      	bcc.n	80019f0 <ssd1306_Fill+0x10>
    }
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000218 	.word	0x20000218

08001a28 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af04      	add	r7, sp, #16
 8001a2e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8001a30:	2300      	movs	r3, #0
 8001a32:	73fb      	strb	r3, [r7, #15]
 8001a34:	e020      	b.n	8001a78 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	3b50      	subs	r3, #80	; 0x50
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff fe97 	bl	8001772 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001a44:	2100      	movs	r1, #0
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff fe93 	bl	8001772 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001a4c:	2110      	movs	r1, #16
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff fe8f 	bl	8001772 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	01db      	lsls	r3, r3, #7
 8001a58:	4a0b      	ldr	r2, [pc, #44]	; (8001a88 <ssd1306_UpdateScreen+0x60>)
 8001a5a:	4413      	add	r3, r2
 8001a5c:	2264      	movs	r2, #100	; 0x64
 8001a5e:	9202      	str	r2, [sp, #8]
 8001a60:	2280      	movs	r2, #128	; 0x80
 8001a62:	9201      	str	r2, [sp, #4]
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	2301      	movs	r3, #1
 8001a68:	2240      	movs	r2, #64	; 0x40
 8001a6a:	2178      	movs	r1, #120	; 0x78
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f001 fadb 	bl	8003028 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	3301      	adds	r3, #1
 8001a76:	73fb      	strb	r3, [r7, #15]
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	2b07      	cmp	r3, #7
 8001a7c:	d9db      	bls.n	8001a36 <ssd1306_UpdateScreen+0xe>
    }
}
 8001a7e:	bf00      	nop
 8001a80:	bf00      	nop
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000218 	.word	0x20000218

08001a8c <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
 8001a96:	460b      	mov	r3, r1
 8001a98:	71bb      	strb	r3, [r7, #6]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	db48      	blt.n	8001b38 <ssd1306_DrawPixel+0xac>
 8001aa6:	79bb      	ldrb	r3, [r7, #6]
 8001aa8:	2b3f      	cmp	r3, #63	; 0x3f
 8001aaa:	d845      	bhi.n	8001b38 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8001aac:	4b25      	ldr	r3, [pc, #148]	; (8001b44 <ssd1306_DrawPixel+0xb8>)
 8001aae:	791b      	ldrb	r3, [r3, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d006      	beq.n	8001ac2 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8001ab4:	797b      	ldrb	r3, [r7, #5]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	bf0c      	ite	eq
 8001aba:	2301      	moveq	r3, #1
 8001abc:	2300      	movne	r3, #0
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8001ac2:	797b      	ldrb	r3, [r7, #5]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d11a      	bne.n	8001afe <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ac8:	79fa      	ldrb	r2, [r7, #7]
 8001aca:	79bb      	ldrb	r3, [r7, #6]
 8001acc:	08db      	lsrs	r3, r3, #3
 8001ace:	b2d8      	uxtb	r0, r3
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	01db      	lsls	r3, r3, #7
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4a1c      	ldr	r2, [pc, #112]	; (8001b48 <ssd1306_DrawPixel+0xbc>)
 8001ad8:	5cd3      	ldrb	r3, [r2, r3]
 8001ada:	b25a      	sxtb	r2, r3
 8001adc:	79bb      	ldrb	r3, [r7, #6]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae8:	b25b      	sxtb	r3, r3
 8001aea:	4313      	orrs	r3, r2
 8001aec:	b259      	sxtb	r1, r3
 8001aee:	79fa      	ldrb	r2, [r7, #7]
 8001af0:	4603      	mov	r3, r0
 8001af2:	01db      	lsls	r3, r3, #7
 8001af4:	4413      	add	r3, r2
 8001af6:	b2c9      	uxtb	r1, r1
 8001af8:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <ssd1306_DrawPixel+0xbc>)
 8001afa:	54d1      	strb	r1, [r2, r3]
 8001afc:	e01d      	b.n	8001b3a <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001afe:	79fa      	ldrb	r2, [r7, #7]
 8001b00:	79bb      	ldrb	r3, [r7, #6]
 8001b02:	08db      	lsrs	r3, r3, #3
 8001b04:	b2d8      	uxtb	r0, r3
 8001b06:	4603      	mov	r3, r0
 8001b08:	01db      	lsls	r3, r3, #7
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4a0e      	ldr	r2, [pc, #56]	; (8001b48 <ssd1306_DrawPixel+0xbc>)
 8001b0e:	5cd3      	ldrb	r3, [r2, r3]
 8001b10:	b25a      	sxtb	r2, r3
 8001b12:	79bb      	ldrb	r3, [r7, #6]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	2101      	movs	r1, #1
 8001b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1e:	b25b      	sxtb	r3, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	b25b      	sxtb	r3, r3
 8001b24:	4013      	ands	r3, r2
 8001b26:	b259      	sxtb	r1, r3
 8001b28:	79fa      	ldrb	r2, [r7, #7]
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	01db      	lsls	r3, r3, #7
 8001b2e:	4413      	add	r3, r2
 8001b30:	b2c9      	uxtb	r1, r1
 8001b32:	4a05      	ldr	r2, [pc, #20]	; (8001b48 <ssd1306_DrawPixel+0xbc>)
 8001b34:	54d1      	strb	r1, [r2, r3]
 8001b36:	e000      	b.n	8001b3a <ssd1306_DrawPixel+0xae>
        return;
 8001b38:	bf00      	nop
    }
}
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	20000618 	.word	0x20000618
 8001b48:	20000218 	.word	0x20000218

08001b4c <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4604      	mov	r4, r0
 8001b54:	1d38      	adds	r0, r7, #4
 8001b56:	e880 0006 	stmia.w	r0, {r1, r2}
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4623      	mov	r3, r4
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	4613      	mov	r3, r2
 8001b62:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001b64:	4b38      	ldr	r3, [pc, #224]	; (8001c48 <ssd1306_WriteChar+0xfc>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	793b      	ldrb	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	2b7f      	cmp	r3, #127	; 0x7f
 8001b70:	dc06      	bgt.n	8001b80 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001b72:	4b35      	ldr	r3, [pc, #212]	; (8001c48 <ssd1306_WriteChar+0xfc>)
 8001b74:	885b      	ldrh	r3, [r3, #2]
 8001b76:	461a      	mov	r2, r3
 8001b78:	797b      	ldrb	r3, [r7, #5]
 8001b7a:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001b7c:	2b3f      	cmp	r3, #63	; 0x3f
 8001b7e:	dd01      	ble.n	8001b84 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	e05d      	b.n	8001c40 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8001b84:	2300      	movs	r3, #0
 8001b86:	61fb      	str	r3, [r7, #28]
 8001b88:	e04c      	b.n	8001c24 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	3b20      	subs	r3, #32
 8001b90:	7979      	ldrb	r1, [r7, #5]
 8001b92:	fb01 f303 	mul.w	r3, r1, r3
 8001b96:	4619      	mov	r1, r3
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	440b      	add	r3, r1
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61bb      	str	r3, [r7, #24]
 8001ba8:	e034      	b.n	8001c14 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d012      	beq.n	8001be0 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001bba:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <ssd1306_WriteChar+0xfc>)
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	b2d8      	uxtb	r0, r3
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <ssd1306_WriteChar+0xfc>)
 8001bca:	885b      	ldrh	r3, [r3, #2]
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	7bba      	ldrb	r2, [r7, #14]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f7ff ff57 	bl	8001a8c <ssd1306_DrawPixel>
 8001bde:	e016      	b.n	8001c0e <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001be0:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <ssd1306_WriteChar+0xfc>)
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	4413      	add	r3, r2
 8001bec:	b2d8      	uxtb	r0, r3
 8001bee:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <ssd1306_WriteChar+0xfc>)
 8001bf0:	885b      	ldrh	r3, [r3, #2]
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	b2d9      	uxtb	r1, r3
 8001bfc:	7bbb      	ldrb	r3, [r7, #14]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	bf0c      	ite	eq
 8001c02:	2301      	moveq	r3, #1
 8001c04:	2300      	movne	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	f7ff ff3f 	bl	8001a8c <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	3301      	adds	r3, #1
 8001c12:	61bb      	str	r3, [r7, #24]
 8001c14:	793b      	ldrb	r3, [r7, #4]
 8001c16:	461a      	mov	r2, r3
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d3c5      	bcc.n	8001baa <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3301      	adds	r3, #1
 8001c22:	61fb      	str	r3, [r7, #28]
 8001c24:	797b      	ldrb	r3, [r7, #5]
 8001c26:	461a      	mov	r2, r3
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d3ad      	bcc.n	8001b8a <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <ssd1306_WriteChar+0xfc>)
 8001c30:	881a      	ldrh	r2, [r3, #0]
 8001c32:	793b      	ldrb	r3, [r7, #4]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	4413      	add	r3, r2
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <ssd1306_WriteChar+0xfc>)
 8001c3c:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3724      	adds	r7, #36	; 0x24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd90      	pop	{r4, r7, pc}
 8001c48:	20000618 	.word	0x20000618

08001c4c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	1d38      	adds	r0, r7, #4
 8001c56:	e880 0006 	stmia.w	r0, {r1, r2}
 8001c5a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8001c5c:	e012      	b.n	8001c84 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	7818      	ldrb	r0, [r3, #0]
 8001c62:	78fb      	ldrb	r3, [r7, #3]
 8001c64:	1d3a      	adds	r2, r7, #4
 8001c66:	ca06      	ldmia	r2, {r1, r2}
 8001c68:	f7ff ff70 	bl	8001b4c <ssd1306_WriteChar>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d002      	beq.n	8001c7e <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	e008      	b.n	8001c90 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	3301      	adds	r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
    while (*str)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1e8      	bne.n	8001c5e <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	460a      	mov	r2, r1
 8001ca2:	71fb      	strb	r3, [r7, #7]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <ssd1306_SetCursor+0x2c>)
 8001cae:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001cb0:	79bb      	ldrb	r3, [r7, #6]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <ssd1306_SetCursor+0x2c>)
 8001cb6:	805a      	strh	r2, [r3, #2]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	20000618 	.word	0x20000618

08001cc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	607b      	str	r3, [r7, #4]
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <HAL_MspInit+0x4c>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	4a0f      	ldr	r2, [pc, #60]	; (8001d14 <HAL_MspInit+0x4c>)
 8001cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cde:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <HAL_MspInit+0x4c>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	603b      	str	r3, [r7, #0]
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <HAL_MspInit+0x4c>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	4a08      	ldr	r2, [pc, #32]	; (8001d14 <HAL_MspInit+0x4c>)
 8001cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_MspInit+0x4c>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800

08001d18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	; 0x28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a19      	ldr	r2, [pc, #100]	; (8001d9c <HAL_I2C_MspInit+0x84>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d12c      	bne.n	8001d94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <HAL_I2C_MspInit+0x88>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a17      	ldr	r2, [pc, #92]	; (8001da0 <HAL_I2C_MspInit+0x88>)
 8001d44:	f043 0302 	orr.w	r3, r3, #2
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <HAL_I2C_MspInit+0x88>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d5c:	2312      	movs	r3, #18
 8001d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d64:	2303      	movs	r3, #3
 8001d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d68:	2304      	movs	r3, #4
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	4619      	mov	r1, r3
 8001d72:	480c      	ldr	r0, [pc, #48]	; (8001da4 <HAL_I2C_MspInit+0x8c>)
 8001d74:	f000 fe90 	bl	8002a98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <HAL_I2C_MspInit+0x88>)
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	4a07      	ldr	r2, [pc, #28]	; (8001da0 <HAL_I2C_MspInit+0x88>)
 8001d82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d86:	6413      	str	r3, [r2, #64]	; 0x40
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <HAL_I2C_MspInit+0x88>)
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d94:	bf00      	nop
 8001d96:	3728      	adds	r7, #40	; 0x28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40005400 	.word	0x40005400
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40020400 	.word	0x40020400

08001da8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a22      	ldr	r2, [pc, #136]	; (8001e40 <HAL_TIM_Base_MspInit+0x98>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d13d      	bne.n	8001e36 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	4b21      	ldr	r3, [pc, #132]	; (8001e44 <HAL_TIM_Base_MspInit+0x9c>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	4a20      	ldr	r2, [pc, #128]	; (8001e44 <HAL_TIM_Base_MspInit+0x9c>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dca:	4b1e      	ldr	r3, [pc, #120]	; (8001e44 <HAL_TIM_Base_MspInit+0x9c>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <HAL_TIM_Base_MspInit+0xa0>)
 8001dd8:	4a1c      	ldr	r2, [pc, #112]	; (8001e4c <HAL_TIM_Base_MspInit+0xa4>)
 8001dda:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001ddc:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <HAL_TIM_Base_MspInit+0xa0>)
 8001dde:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001de2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001de4:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <HAL_TIM_Base_MspInit+0xa0>)
 8001de6:	2240      	movs	r2, #64	; 0x40
 8001de8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dea:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <HAL_TIM_Base_MspInit+0xa0>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001df0:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <HAL_TIM_Base_MspInit+0xa0>)
 8001df2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001df6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001df8:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <HAL_TIM_Base_MspInit+0xa0>)
 8001dfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dfe:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e00:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <HAL_TIM_Base_MspInit+0xa0>)
 8001e02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e06:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <HAL_TIM_Base_MspInit+0xa0>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <HAL_TIM_Base_MspInit+0xa0>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <HAL_TIM_Base_MspInit+0xa0>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001e1a:	480b      	ldr	r0, [pc, #44]	; (8001e48 <HAL_TIM_Base_MspInit+0xa0>)
 8001e1c:	f000 faaa 	bl	8002374 <HAL_DMA_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001e26:	f7ff fc9f 	bl	8001768 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a06      	ldr	r2, [pc, #24]	; (8001e48 <HAL_TIM_Base_MspInit+0xa0>)
 8001e2e:	625a      	str	r2, [r3, #36]	; 0x24
 8001e30:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <HAL_TIM_Base_MspInit+0xa0>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e36:	bf00      	nop
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40010000 	.word	0x40010000
 8001e44:	40023800 	.word	0x40023800
 8001e48:	20000adc 	.word	0x20000adc
 8001e4c:	40026428 	.word	0x40026428

08001e50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 030c 	add.w	r3, r7, #12
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a12      	ldr	r2, [pc, #72]	; (8001eb8 <HAL_TIM_MspPostInit+0x68>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d11e      	bne.n	8001eb0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <HAL_TIM_MspPostInit+0x6c>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	4a10      	ldr	r2, [pc, #64]	; (8001ebc <HAL_TIM_MspPostInit+0x6c>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6313      	str	r3, [r2, #48]	; 0x30
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <HAL_TIM_MspPostInit+0x6c>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e94:	2302      	movs	r3, #2
 8001e96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea4:	f107 030c 	add.w	r3, r7, #12
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4805      	ldr	r0, [pc, #20]	; (8001ec0 <HAL_TIM_MspPostInit+0x70>)
 8001eac:	f000 fdf4 	bl	8002a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001eb0:	bf00      	nop
 8001eb2:	3720      	adds	r7, #32
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40010000 	.word	0x40010000
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020000 	.word	0x40020000

08001ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <NMI_Handler+0x4>

08001eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ece:	e7fe      	b.n	8001ece <HardFault_Handler+0x4>

08001ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <MemManage_Handler+0x4>

08001ed6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eda:	e7fe      	b.n	8001eda <BusFault_Handler+0x4>

08001edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <UsageFault_Handler+0x4>

08001ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f10:	f000 f8da 	bl	80020c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001f1c:	4802      	ldr	r0, [pc, #8]	; (8001f28 <DMA2_Stream1_IRQHandler+0x10>)
 8001f1e:	f000 fb51 	bl	80025c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000adc 	.word	0x20000adc

08001f2c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f30:	4802      	ldr	r0, [pc, #8]	; (8001f3c <OTG_FS_IRQHandler+0x10>)
 8001f32:	f001 fce0 	bl	80038f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	200024bc 	.word	0x200024bc

08001f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f48:	4a14      	ldr	r2, [pc, #80]	; (8001f9c <_sbrk+0x5c>)
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <_sbrk+0x60>)
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f54:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <_sbrk+0x64>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d102      	bne.n	8001f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <_sbrk+0x64>)
 8001f5e:	4a12      	ldr	r2, [pc, #72]	; (8001fa8 <_sbrk+0x68>)
 8001f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f62:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <_sbrk+0x64>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d207      	bcs.n	8001f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f70:	f008 f81a 	bl	8009fa8 <__errno>
 8001f74:	4603      	mov	r3, r0
 8001f76:	220c      	movs	r2, #12
 8001f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f7e:	e009      	b.n	8001f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <_sbrk+0x64>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f86:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <_sbrk+0x64>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	4a05      	ldr	r2, [pc, #20]	; (8001fa4 <_sbrk+0x64>)
 8001f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f92:	68fb      	ldr	r3, [r7, #12]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20020000 	.word	0x20020000
 8001fa0:	00000400 	.word	0x00000400
 8001fa4:	20000620 	.word	0x20000620
 8001fa8:	200028d8 	.word	0x200028d8

08001fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <SystemInit+0x20>)
 8001fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb6:	4a05      	ldr	r2, [pc, #20]	; (8001fcc <SystemInit+0x20>)
 8001fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002008 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fd4:	480d      	ldr	r0, [pc, #52]	; (800200c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fd6:	490e      	ldr	r1, [pc, #56]	; (8002010 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fd8:	4a0e      	ldr	r2, [pc, #56]	; (8002014 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fdc:	e002      	b.n	8001fe4 <LoopCopyDataInit>

08001fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fe2:	3304      	adds	r3, #4

08001fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe8:	d3f9      	bcc.n	8001fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fea:	4a0b      	ldr	r2, [pc, #44]	; (8002018 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fec:	4c0b      	ldr	r4, [pc, #44]	; (800201c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff0:	e001      	b.n	8001ff6 <LoopFillZerobss>

08001ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff4:	3204      	adds	r2, #4

08001ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff8:	d3fb      	bcc.n	8001ff2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ffa:	f7ff ffd7 	bl	8001fac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ffe:	f007 ffd9 	bl	8009fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002002:	f7ff f97b 	bl	80012fc <main>
  bx  lr    
 8002006:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002008:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800200c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002010:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002014:	0800d0d8 	.word	0x0800d0d8
  ldr r2, =_sbss
 8002018:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800201c:	200028d4 	.word	0x200028d4

08002020 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002020:	e7fe      	b.n	8002020 <ADC_IRQHandler>
	...

08002024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002028:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <HAL_Init+0x40>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0d      	ldr	r2, [pc, #52]	; (8002064 <HAL_Init+0x40>)
 800202e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002032:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_Init+0x40>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <HAL_Init+0x40>)
 800203a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800203e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <HAL_Init+0x40>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a07      	ldr	r2, [pc, #28]	; (8002064 <HAL_Init+0x40>)
 8002046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800204c:	2003      	movs	r0, #3
 800204e:	f000 f94f 	bl	80022f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002052:	200f      	movs	r0, #15
 8002054:	f000 f808 	bl	8002068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002058:	f7ff fe36 	bl	8001cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40023c00 	.word	0x40023c00

08002068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_InitTick+0x54>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_InitTick+0x58>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	4619      	mov	r1, r3
 800207a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800207e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002082:	fbb2 f3f3 	udiv	r3, r2, r3
 8002086:	4618      	mov	r0, r3
 8002088:	f000 f967 	bl	800235a <HAL_SYSTICK_Config>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e00e      	b.n	80020b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b0f      	cmp	r3, #15
 800209a:	d80a      	bhi.n	80020b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800209c:	2200      	movs	r2, #0
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020a4:	f000 f92f 	bl	8002306 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020a8:	4a06      	ldr	r2, [pc, #24]	; (80020c4 <HAL_InitTick+0x5c>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	e000      	b.n	80020b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000010 	.word	0x20000010
 80020c0:	20000018 	.word	0x20000018
 80020c4:	20000014 	.word	0x20000014

080020c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_IncTick+0x20>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_IncTick+0x24>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	4a04      	ldr	r2, [pc, #16]	; (80020ec <HAL_IncTick+0x24>)
 80020da:	6013      	str	r3, [r2, #0]
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000018 	.word	0x20000018
 80020ec:	20000edc 	.word	0x20000edc

080020f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return uwTick;
 80020f4:	4b03      	ldr	r3, [pc, #12]	; (8002104 <HAL_GetTick+0x14>)
 80020f6:	681b      	ldr	r3, [r3, #0]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	20000edc 	.word	0x20000edc

08002108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002110:	f7ff ffee 	bl	80020f0 <HAL_GetTick>
 8002114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002120:	d005      	beq.n	800212e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002122:	4b0a      	ldr	r3, [pc, #40]	; (800214c <HAL_Delay+0x44>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4413      	add	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800212e:	bf00      	nop
 8002130:	f7ff ffde 	bl	80020f0 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	429a      	cmp	r2, r3
 800213e:	d8f7      	bhi.n	8002130 <HAL_Delay+0x28>
  {
  }
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000018 	.word	0x20000018

08002150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800216c:	4013      	ands	r3, r2
 800216e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800217c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002182:	4a04      	ldr	r2, [pc, #16]	; (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	60d3      	str	r3, [r2, #12]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <__NVIC_GetPriorityGrouping+0x18>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	f003 0307 	and.w	r3, r3, #7
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	db0b      	blt.n	80021de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	f003 021f 	and.w	r2, r3, #31
 80021cc:	4907      	ldr	r1, [pc, #28]	; (80021ec <__NVIC_EnableIRQ+0x38>)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	095b      	lsrs	r3, r3, #5
 80021d4:	2001      	movs	r0, #1
 80021d6:	fa00 f202 	lsl.w	r2, r0, r2
 80021da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000e100 	.word	0xe000e100

080021f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	6039      	str	r1, [r7, #0]
 80021fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002200:	2b00      	cmp	r3, #0
 8002202:	db0a      	blt.n	800221a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	b2da      	uxtb	r2, r3
 8002208:	490c      	ldr	r1, [pc, #48]	; (800223c <__NVIC_SetPriority+0x4c>)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	0112      	lsls	r2, r2, #4
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	440b      	add	r3, r1
 8002214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002218:	e00a      	b.n	8002230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	b2da      	uxtb	r2, r3
 800221e:	4908      	ldr	r1, [pc, #32]	; (8002240 <__NVIC_SetPriority+0x50>)
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	3b04      	subs	r3, #4
 8002228:	0112      	lsls	r2, r2, #4
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	440b      	add	r3, r1
 800222e:	761a      	strb	r2, [r3, #24]
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000e100 	.word	0xe000e100
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002244:	b480      	push	{r7}
 8002246:	b089      	sub	sp, #36	; 0x24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f1c3 0307 	rsb	r3, r3, #7
 800225e:	2b04      	cmp	r3, #4
 8002260:	bf28      	it	cs
 8002262:	2304      	movcs	r3, #4
 8002264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3304      	adds	r3, #4
 800226a:	2b06      	cmp	r3, #6
 800226c:	d902      	bls.n	8002274 <NVIC_EncodePriority+0x30>
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3b03      	subs	r3, #3
 8002272:	e000      	b.n	8002276 <NVIC_EncodePriority+0x32>
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002278:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43da      	mvns	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	401a      	ands	r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800228c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fa01 f303 	lsl.w	r3, r1, r3
 8002296:	43d9      	mvns	r1, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800229c:	4313      	orrs	r3, r2
         );
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3724      	adds	r7, #36	; 0x24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
	...

080022ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022bc:	d301      	bcc.n	80022c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022be:	2301      	movs	r3, #1
 80022c0:	e00f      	b.n	80022e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022c2:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <SysTick_Config+0x40>)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ca:	210f      	movs	r1, #15
 80022cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022d0:	f7ff ff8e 	bl	80021f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <SysTick_Config+0x40>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022da:	4b04      	ldr	r3, [pc, #16]	; (80022ec <SysTick_Config+0x40>)
 80022dc:	2207      	movs	r2, #7
 80022de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	e000e010 	.word	0xe000e010

080022f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff ff29 	bl	8002150 <__NVIC_SetPriorityGrouping>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002306:	b580      	push	{r7, lr}
 8002308:	b086      	sub	sp, #24
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
 8002312:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002318:	f7ff ff3e 	bl	8002198 <__NVIC_GetPriorityGrouping>
 800231c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	6978      	ldr	r0, [r7, #20]
 8002324:	f7ff ff8e 	bl	8002244 <NVIC_EncodePriority>
 8002328:	4602      	mov	r2, r0
 800232a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff5d 	bl	80021f0 <__NVIC_SetPriority>
}
 8002336:	bf00      	nop
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	4603      	mov	r3, r0
 8002346:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff ff31 	bl	80021b4 <__NVIC_EnableIRQ>
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff ffa2 	bl	80022ac <SysTick_Config>
 8002368:	4603      	mov	r3, r0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002380:	f7ff feb6 	bl	80020f0 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e099      	b.n	80024c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0201 	bic.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023b0:	e00f      	b.n	80023d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023b2:	f7ff fe9d 	bl	80020f0 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b05      	cmp	r3, #5
 80023be:	d908      	bls.n	80023d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2220      	movs	r2, #32
 80023c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2203      	movs	r2, #3
 80023ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e078      	b.n	80024c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1e8      	bne.n	80023b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	4b38      	ldr	r3, [pc, #224]	; (80024cc <HAL_DMA_Init+0x158>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800240a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002416:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	4313      	orrs	r3, r2
 8002422:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	2b04      	cmp	r3, #4
 800242a:	d107      	bne.n	800243c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	4313      	orrs	r3, r2
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4313      	orrs	r3, r2
 800243a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f023 0307 	bic.w	r3, r3, #7
 8002452:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	4313      	orrs	r3, r2
 800245c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	2b04      	cmp	r3, #4
 8002464:	d117      	bne.n	8002496 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00e      	beq.n	8002496 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 fa91 	bl	80029a0 <DMA_CheckFifoParam>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2240      	movs	r2, #64	; 0x40
 8002488:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002492:	2301      	movs	r3, #1
 8002494:	e016      	b.n	80024c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fa48 	bl	8002934 <DMA_CalcBaseAndBitshift>
 80024a4:	4603      	mov	r3, r0
 80024a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ac:	223f      	movs	r2, #63	; 0x3f
 80024ae:	409a      	lsls	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	f010803f 	.word	0xf010803f

080024d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
 80024dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d101      	bne.n	80024f6 <HAL_DMA_Start_IT+0x26>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e040      	b.n	8002578 <HAL_DMA_Start_IT+0xa8>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b01      	cmp	r3, #1
 8002508:	d12f      	bne.n	800256a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2202      	movs	r2, #2
 800250e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 f9da 	bl	80028d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002528:	223f      	movs	r2, #63	; 0x3f
 800252a:	409a      	lsls	r2, r3
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0216 	orr.w	r2, r2, #22
 800253e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	2b00      	cmp	r3, #0
 8002546:	d007      	beq.n	8002558 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0208 	orr.w	r2, r2, #8
 8002556:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	e005      	b.n	8002576 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002572:	2302      	movs	r3, #2
 8002574:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002576:	7dfb      	ldrb	r3, [r7, #23]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d004      	beq.n	800259e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2280      	movs	r2, #128	; 0x80
 8002598:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e00c      	b.n	80025b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2205      	movs	r2, #5
 80025a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0201 	bic.w	r2, r2, #1
 80025b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025d0:	4b92      	ldr	r3, [pc, #584]	; (800281c <HAL_DMA_IRQHandler+0x258>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a92      	ldr	r2, [pc, #584]	; (8002820 <HAL_DMA_IRQHandler+0x25c>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	0a9b      	lsrs	r3, r3, #10
 80025dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ee:	2208      	movs	r2, #8
 80025f0:	409a      	lsls	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d01a      	beq.n	8002630 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d013      	beq.n	8002630 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0204 	bic.w	r2, r2, #4
 8002616:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261c:	2208      	movs	r2, #8
 800261e:	409a      	lsls	r2, r3
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002628:	f043 0201 	orr.w	r2, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002634:	2201      	movs	r2, #1
 8002636:	409a      	lsls	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d012      	beq.n	8002666 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00b      	beq.n	8002666 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002652:	2201      	movs	r2, #1
 8002654:	409a      	lsls	r2, r3
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265e:	f043 0202 	orr.w	r2, r3, #2
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266a:	2204      	movs	r2, #4
 800266c:	409a      	lsls	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4013      	ands	r3, r2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d012      	beq.n	800269c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00b      	beq.n	800269c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002688:	2204      	movs	r2, #4
 800268a:	409a      	lsls	r2, r3
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002694:	f043 0204 	orr.w	r2, r3, #4
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a0:	2210      	movs	r2, #16
 80026a2:	409a      	lsls	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d043      	beq.n	8002734 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d03c      	beq.n	8002734 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026be:	2210      	movs	r2, #16
 80026c0:	409a      	lsls	r2, r3
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d018      	beq.n	8002706 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d108      	bne.n	80026f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d024      	beq.n	8002734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	4798      	blx	r3
 80026f2:	e01f      	b.n	8002734 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d01b      	beq.n	8002734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	4798      	blx	r3
 8002704:	e016      	b.n	8002734 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d107      	bne.n	8002724 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0208 	bic.w	r2, r2, #8
 8002722:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002738:	2220      	movs	r2, #32
 800273a:	409a      	lsls	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4013      	ands	r3, r2
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 808e 	beq.w	8002862 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0310 	and.w	r3, r3, #16
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 8086 	beq.w	8002862 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275a:	2220      	movs	r2, #32
 800275c:	409a      	lsls	r2, r3
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b05      	cmp	r3, #5
 800276c:	d136      	bne.n	80027dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0216 	bic.w	r2, r2, #22
 800277c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695a      	ldr	r2, [r3, #20]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800278c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	2b00      	cmp	r3, #0
 8002794:	d103      	bne.n	800279e <HAL_DMA_IRQHandler+0x1da>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800279a:	2b00      	cmp	r3, #0
 800279c:	d007      	beq.n	80027ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0208 	bic.w	r2, r2, #8
 80027ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b2:	223f      	movs	r2, #63	; 0x3f
 80027b4:	409a      	lsls	r2, r3
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d07d      	beq.n	80028ce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	4798      	blx	r3
        }
        return;
 80027da:	e078      	b.n	80028ce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d01c      	beq.n	8002824 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d108      	bne.n	800280a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d030      	beq.n	8002862 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	4798      	blx	r3
 8002808:	e02b      	b.n	8002862 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280e:	2b00      	cmp	r3, #0
 8002810:	d027      	beq.n	8002862 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	4798      	blx	r3
 800281a:	e022      	b.n	8002862 <HAL_DMA_IRQHandler+0x29e>
 800281c:	20000010 	.word	0x20000010
 8002820:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10f      	bne.n	8002852 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0210 	bic.w	r2, r2, #16
 8002840:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002866:	2b00      	cmp	r3, #0
 8002868:	d032      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d022      	beq.n	80028bc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2205      	movs	r2, #5
 800287a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	3301      	adds	r3, #1
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	429a      	cmp	r2, r3
 8002898:	d307      	bcc.n	80028aa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f2      	bne.n	800288e <HAL_DMA_IRQHandler+0x2ca>
 80028a8:	e000      	b.n	80028ac <HAL_DMA_IRQHandler+0x2e8>
          break;
 80028aa:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	4798      	blx	r3
 80028cc:	e000      	b.n	80028d0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80028ce:	bf00      	nop
    }
  }
}
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop

080028d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b40      	cmp	r3, #64	; 0x40
 8002904:	d108      	bne.n	8002918 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002916:	e007      	b.n	8002928 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	60da      	str	r2, [r3, #12]
}
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	3b10      	subs	r3, #16
 8002944:	4a14      	ldr	r2, [pc, #80]	; (8002998 <DMA_CalcBaseAndBitshift+0x64>)
 8002946:	fba2 2303 	umull	r2, r3, r2, r3
 800294a:	091b      	lsrs	r3, r3, #4
 800294c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800294e:	4a13      	ldr	r2, [pc, #76]	; (800299c <DMA_CalcBaseAndBitshift+0x68>)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4413      	add	r3, r2
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b03      	cmp	r3, #3
 8002960:	d909      	bls.n	8002976 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800296a:	f023 0303 	bic.w	r3, r3, #3
 800296e:	1d1a      	adds	r2, r3, #4
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	659a      	str	r2, [r3, #88]	; 0x58
 8002974:	e007      	b.n	8002986 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800297e:	f023 0303 	bic.w	r3, r3, #3
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800298a:	4618      	mov	r0, r3
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	aaaaaaab 	.word	0xaaaaaaab
 800299c:	0800ceb0 	.word	0x0800ceb0

080029a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d11f      	bne.n	80029fa <DMA_CheckFifoParam+0x5a>
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d856      	bhi.n	8002a6e <DMA_CheckFifoParam+0xce>
 80029c0:	a201      	add	r2, pc, #4	; (adr r2, 80029c8 <DMA_CheckFifoParam+0x28>)
 80029c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c6:	bf00      	nop
 80029c8:	080029d9 	.word	0x080029d9
 80029cc:	080029eb 	.word	0x080029eb
 80029d0:	080029d9 	.word	0x080029d9
 80029d4:	08002a6f 	.word	0x08002a6f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d046      	beq.n	8002a72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e8:	e043      	b.n	8002a72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029f2:	d140      	bne.n	8002a76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f8:	e03d      	b.n	8002a76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a02:	d121      	bne.n	8002a48 <DMA_CheckFifoParam+0xa8>
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d837      	bhi.n	8002a7a <DMA_CheckFifoParam+0xda>
 8002a0a:	a201      	add	r2, pc, #4	; (adr r2, 8002a10 <DMA_CheckFifoParam+0x70>)
 8002a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a10:	08002a21 	.word	0x08002a21
 8002a14:	08002a27 	.word	0x08002a27
 8002a18:	08002a21 	.word	0x08002a21
 8002a1c:	08002a39 	.word	0x08002a39
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
      break;
 8002a24:	e030      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d025      	beq.n	8002a7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a36:	e022      	b.n	8002a7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a40:	d11f      	bne.n	8002a82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a46:	e01c      	b.n	8002a82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d903      	bls.n	8002a56 <DMA_CheckFifoParam+0xb6>
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d003      	beq.n	8002a5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a54:	e018      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
      break;
 8002a5a:	e015      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00e      	beq.n	8002a86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a6c:	e00b      	b.n	8002a86 <DMA_CheckFifoParam+0xe6>
      break;
 8002a6e:	bf00      	nop
 8002a70:	e00a      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      break;
 8002a72:	bf00      	nop
 8002a74:	e008      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      break;
 8002a76:	bf00      	nop
 8002a78:	e006      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      break;
 8002a7a:	bf00      	nop
 8002a7c:	e004      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      break;
 8002a7e:	bf00      	nop
 8002a80:	e002      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a82:	bf00      	nop
 8002a84:	e000      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      break;
 8002a86:	bf00      	nop
    }
  } 
  
  return status; 
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop

08002a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b089      	sub	sp, #36	; 0x24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	e159      	b.n	8002d68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	f040 8148 	bne.w	8002d62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d005      	beq.n	8002aea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d130      	bne.n	8002b4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	2203      	movs	r2, #3
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4013      	ands	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b20:	2201      	movs	r2, #1
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f003 0201 	and.w	r2, r3, #1
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d017      	beq.n	8002b88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	2203      	movs	r2, #3
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d123      	bne.n	8002bdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	08da      	lsrs	r2, r3, #3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3208      	adds	r2, #8
 8002b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	220f      	movs	r2, #15
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	08da      	lsrs	r2, r3, #3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3208      	adds	r2, #8
 8002bd6:	69b9      	ldr	r1, [r7, #24]
 8002bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	2203      	movs	r2, #3
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 0203 	and.w	r2, r3, #3
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 80a2 	beq.w	8002d62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	4b57      	ldr	r3, [pc, #348]	; (8002d80 <HAL_GPIO_Init+0x2e8>)
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	4a56      	ldr	r2, [pc, #344]	; (8002d80 <HAL_GPIO_Init+0x2e8>)
 8002c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c2e:	4b54      	ldr	r3, [pc, #336]	; (8002d80 <HAL_GPIO_Init+0x2e8>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c3a:	4a52      	ldr	r2, [pc, #328]	; (8002d84 <HAL_GPIO_Init+0x2ec>)
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	089b      	lsrs	r3, r3, #2
 8002c40:	3302      	adds	r3, #2
 8002c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	220f      	movs	r2, #15
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43db      	mvns	r3, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a49      	ldr	r2, [pc, #292]	; (8002d88 <HAL_GPIO_Init+0x2f0>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d019      	beq.n	8002c9a <HAL_GPIO_Init+0x202>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a48      	ldr	r2, [pc, #288]	; (8002d8c <HAL_GPIO_Init+0x2f4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d013      	beq.n	8002c96 <HAL_GPIO_Init+0x1fe>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a47      	ldr	r2, [pc, #284]	; (8002d90 <HAL_GPIO_Init+0x2f8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d00d      	beq.n	8002c92 <HAL_GPIO_Init+0x1fa>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a46      	ldr	r2, [pc, #280]	; (8002d94 <HAL_GPIO_Init+0x2fc>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d007      	beq.n	8002c8e <HAL_GPIO_Init+0x1f6>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a45      	ldr	r2, [pc, #276]	; (8002d98 <HAL_GPIO_Init+0x300>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d101      	bne.n	8002c8a <HAL_GPIO_Init+0x1f2>
 8002c86:	2304      	movs	r3, #4
 8002c88:	e008      	b.n	8002c9c <HAL_GPIO_Init+0x204>
 8002c8a:	2307      	movs	r3, #7
 8002c8c:	e006      	b.n	8002c9c <HAL_GPIO_Init+0x204>
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e004      	b.n	8002c9c <HAL_GPIO_Init+0x204>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e002      	b.n	8002c9c <HAL_GPIO_Init+0x204>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <HAL_GPIO_Init+0x204>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	69fa      	ldr	r2, [r7, #28]
 8002c9e:	f002 0203 	and.w	r2, r2, #3
 8002ca2:	0092      	lsls	r2, r2, #2
 8002ca4:	4093      	lsls	r3, r2
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cac:	4935      	ldr	r1, [pc, #212]	; (8002d84 <HAL_GPIO_Init+0x2ec>)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	089b      	lsrs	r3, r3, #2
 8002cb2:	3302      	adds	r3, #2
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cba:	4b38      	ldr	r3, [pc, #224]	; (8002d9c <HAL_GPIO_Init+0x304>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cde:	4a2f      	ldr	r2, [pc, #188]	; (8002d9c <HAL_GPIO_Init+0x304>)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ce4:	4b2d      	ldr	r3, [pc, #180]	; (8002d9c <HAL_GPIO_Init+0x304>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d08:	4a24      	ldr	r2, [pc, #144]	; (8002d9c <HAL_GPIO_Init+0x304>)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d0e:	4b23      	ldr	r3, [pc, #140]	; (8002d9c <HAL_GPIO_Init+0x304>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d32:	4a1a      	ldr	r2, [pc, #104]	; (8002d9c <HAL_GPIO_Init+0x304>)
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d38:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <HAL_GPIO_Init+0x304>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4013      	ands	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d5c:	4a0f      	ldr	r2, [pc, #60]	; (8002d9c <HAL_GPIO_Init+0x304>)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	3301      	adds	r3, #1
 8002d66:	61fb      	str	r3, [r7, #28]
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	2b0f      	cmp	r3, #15
 8002d6c:	f67f aea2 	bls.w	8002ab4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d70:	bf00      	nop
 8002d72:	bf00      	nop
 8002d74:	3724      	adds	r7, #36	; 0x24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40013800 	.word	0x40013800
 8002d88:	40020000 	.word	0x40020000
 8002d8c:	40020400 	.word	0x40020400
 8002d90:	40020800 	.word	0x40020800
 8002d94:	40020c00 	.word	0x40020c00
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40013c00 	.word	0x40013c00

08002da0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e12b      	b.n	800300a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d106      	bne.n	8002dcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7fe ffa6 	bl	8001d18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2224      	movs	r2, #36	; 0x24
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0201 	bic.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002df2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e04:	f002 f9ca 	bl	800519c <HAL_RCC_GetPCLK1Freq>
 8002e08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	4a81      	ldr	r2, [pc, #516]	; (8003014 <HAL_I2C_Init+0x274>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d807      	bhi.n	8002e24 <HAL_I2C_Init+0x84>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4a80      	ldr	r2, [pc, #512]	; (8003018 <HAL_I2C_Init+0x278>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	bf94      	ite	ls
 8002e1c:	2301      	movls	r3, #1
 8002e1e:	2300      	movhi	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	e006      	b.n	8002e32 <HAL_I2C_Init+0x92>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4a7d      	ldr	r2, [pc, #500]	; (800301c <HAL_I2C_Init+0x27c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	bf94      	ite	ls
 8002e2c:	2301      	movls	r3, #1
 8002e2e:	2300      	movhi	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e0e7      	b.n	800300a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	4a78      	ldr	r2, [pc, #480]	; (8003020 <HAL_I2C_Init+0x280>)
 8002e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e42:	0c9b      	lsrs	r3, r3, #18
 8002e44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	4a6a      	ldr	r2, [pc, #424]	; (8003014 <HAL_I2C_Init+0x274>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d802      	bhi.n	8002e74 <HAL_I2C_Init+0xd4>
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	3301      	adds	r3, #1
 8002e72:	e009      	b.n	8002e88 <HAL_I2C_Init+0xe8>
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e7a:	fb02 f303 	mul.w	r3, r2, r3
 8002e7e:	4a69      	ldr	r2, [pc, #420]	; (8003024 <HAL_I2C_Init+0x284>)
 8002e80:	fba2 2303 	umull	r2, r3, r2, r3
 8002e84:	099b      	lsrs	r3, r3, #6
 8002e86:	3301      	adds	r3, #1
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	430b      	orrs	r3, r1
 8002e8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	495c      	ldr	r1, [pc, #368]	; (8003014 <HAL_I2C_Init+0x274>)
 8002ea4:	428b      	cmp	r3, r1
 8002ea6:	d819      	bhi.n	8002edc <HAL_I2C_Init+0x13c>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1e59      	subs	r1, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eb6:	1c59      	adds	r1, r3, #1
 8002eb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ebc:	400b      	ands	r3, r1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00a      	beq.n	8002ed8 <HAL_I2C_Init+0x138>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1e59      	subs	r1, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed6:	e051      	b.n	8002f7c <HAL_I2C_Init+0x1dc>
 8002ed8:	2304      	movs	r3, #4
 8002eda:	e04f      	b.n	8002f7c <HAL_I2C_Init+0x1dc>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d111      	bne.n	8002f08 <HAL_I2C_Init+0x168>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	1e58      	subs	r0, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6859      	ldr	r1, [r3, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	440b      	add	r3, r1
 8002ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	bf0c      	ite	eq
 8002f00:	2301      	moveq	r3, #1
 8002f02:	2300      	movne	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	e012      	b.n	8002f2e <HAL_I2C_Init+0x18e>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	1e58      	subs	r0, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6859      	ldr	r1, [r3, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	0099      	lsls	r1, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	bf0c      	ite	eq
 8002f28:	2301      	moveq	r3, #1
 8002f2a:	2300      	movne	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_I2C_Init+0x196>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e022      	b.n	8002f7c <HAL_I2C_Init+0x1dc>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10e      	bne.n	8002f5c <HAL_I2C_Init+0x1bc>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1e58      	subs	r0, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6859      	ldr	r1, [r3, #4]
 8002f46:	460b      	mov	r3, r1
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	440b      	add	r3, r1
 8002f4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f50:	3301      	adds	r3, #1
 8002f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f5a:	e00f      	b.n	8002f7c <HAL_I2C_Init+0x1dc>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1e58      	subs	r0, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6859      	ldr	r1, [r3, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	0099      	lsls	r1, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f72:	3301      	adds	r3, #1
 8002f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	6809      	ldr	r1, [r1, #0]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69da      	ldr	r2, [r3, #28]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002faa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6911      	ldr	r1, [r2, #16]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68d2      	ldr	r2, [r2, #12]
 8002fb6:	4311      	orrs	r1, r2
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6812      	ldr	r2, [r2, #0]
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695a      	ldr	r2, [r3, #20]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0201 	orr.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	000186a0 	.word	0x000186a0
 8003018:	001e847f 	.word	0x001e847f
 800301c:	003d08ff 	.word	0x003d08ff
 8003020:	431bde83 	.word	0x431bde83
 8003024:	10624dd3 	.word	0x10624dd3

08003028 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af02      	add	r7, sp, #8
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	4608      	mov	r0, r1
 8003032:	4611      	mov	r1, r2
 8003034:	461a      	mov	r2, r3
 8003036:	4603      	mov	r3, r0
 8003038:	817b      	strh	r3, [r7, #10]
 800303a:	460b      	mov	r3, r1
 800303c:	813b      	strh	r3, [r7, #8]
 800303e:	4613      	mov	r3, r2
 8003040:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003042:	f7ff f855 	bl	80020f0 <HAL_GetTick>
 8003046:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b20      	cmp	r3, #32
 8003052:	f040 80d9 	bne.w	8003208 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	2319      	movs	r3, #25
 800305c:	2201      	movs	r2, #1
 800305e:	496d      	ldr	r1, [pc, #436]	; (8003214 <HAL_I2C_Mem_Write+0x1ec>)
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 f971 	bl	8003348 <I2C_WaitOnFlagUntilTimeout>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800306c:	2302      	movs	r3, #2
 800306e:	e0cc      	b.n	800320a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_I2C_Mem_Write+0x56>
 800307a:	2302      	movs	r3, #2
 800307c:	e0c5      	b.n	800320a <HAL_I2C_Mem_Write+0x1e2>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b01      	cmp	r3, #1
 8003092:	d007      	beq.n	80030a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0201 	orr.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2221      	movs	r2, #33	; 0x21
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2240      	movs	r2, #64	; 0x40
 80030c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a3a      	ldr	r2, [r7, #32]
 80030ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4a4d      	ldr	r2, [pc, #308]	; (8003218 <HAL_I2C_Mem_Write+0x1f0>)
 80030e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030e6:	88f8      	ldrh	r0, [r7, #6]
 80030e8:	893a      	ldrh	r2, [r7, #8]
 80030ea:	8979      	ldrh	r1, [r7, #10]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	9301      	str	r3, [sp, #4]
 80030f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	4603      	mov	r3, r0
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 f890 	bl	800321c <I2C_RequestMemoryWrite>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d052      	beq.n	80031a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e081      	b.n	800320a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 f9f2 	bl	80034f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00d      	beq.n	8003132 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	2b04      	cmp	r3, #4
 800311c:	d107      	bne.n	800312e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800312c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e06b      	b.n	800320a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	781a      	ldrb	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	1c5a      	adds	r2, r3, #1
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003158:	b29b      	uxth	r3, r3
 800315a:	3b01      	subs	r3, #1
 800315c:	b29a      	uxth	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b04      	cmp	r3, #4
 800316e:	d11b      	bne.n	80031a8 <HAL_I2C_Mem_Write+0x180>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003174:	2b00      	cmp	r3, #0
 8003176:	d017      	beq.n	80031a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	781a      	ldrb	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1aa      	bne.n	8003106 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 f9de 	bl	8003576 <I2C_WaitOnBTFFlagUntilTimeout>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00d      	beq.n	80031dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d107      	bne.n	80031d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e016      	b.n	800320a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	e000      	b.n	800320a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003208:	2302      	movs	r3, #2
  }
}
 800320a:	4618      	mov	r0, r3
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	00100002 	.word	0x00100002
 8003218:	ffff0000 	.word	0xffff0000

0800321c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af02      	add	r7, sp, #8
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	4608      	mov	r0, r1
 8003226:	4611      	mov	r1, r2
 8003228:	461a      	mov	r2, r3
 800322a:	4603      	mov	r3, r0
 800322c:	817b      	strh	r3, [r7, #10]
 800322e:	460b      	mov	r3, r1
 8003230:	813b      	strh	r3, [r7, #8]
 8003232:	4613      	mov	r3, r2
 8003234:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003244:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	2200      	movs	r2, #0
 800324e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 f878 	bl	8003348 <I2C_WaitOnFlagUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00d      	beq.n	800327a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800326c:	d103      	bne.n	8003276 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003274:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e05f      	b.n	800333a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800327a:	897b      	ldrh	r3, [r7, #10]
 800327c:	b2db      	uxtb	r3, r3
 800327e:	461a      	mov	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003288:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	6a3a      	ldr	r2, [r7, #32]
 800328e:	492d      	ldr	r1, [pc, #180]	; (8003344 <I2C_RequestMemoryWrite+0x128>)
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 f8b0 	bl	80033f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e04c      	b.n	800333a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b8:	6a39      	ldr	r1, [r7, #32]
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f91a 	bl	80034f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00d      	beq.n	80032e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d107      	bne.n	80032de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e02b      	b.n	800333a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032e2:	88fb      	ldrh	r3, [r7, #6]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d105      	bne.n	80032f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032e8:	893b      	ldrh	r3, [r7, #8]
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	611a      	str	r2, [r3, #16]
 80032f2:	e021      	b.n	8003338 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032f4:	893b      	ldrh	r3, [r7, #8]
 80032f6:	0a1b      	lsrs	r3, r3, #8
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003304:	6a39      	ldr	r1, [r7, #32]
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 f8f4 	bl	80034f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00d      	beq.n	800332e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	2b04      	cmp	r3, #4
 8003318:	d107      	bne.n	800332a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003328:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e005      	b.n	800333a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800332e:	893b      	ldrh	r3, [r7, #8]
 8003330:	b2da      	uxtb	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	00010002 	.word	0x00010002

08003348 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	4613      	mov	r3, r2
 8003356:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003358:	e025      	b.n	80033a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003360:	d021      	beq.n	80033a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003362:	f7fe fec5 	bl	80020f0 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d302      	bcc.n	8003378 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d116      	bne.n	80033a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	f043 0220 	orr.w	r2, r3, #32
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e023      	b.n	80033ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	0c1b      	lsrs	r3, r3, #16
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d10d      	bne.n	80033cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	43da      	mvns	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4013      	ands	r3, r2
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	bf0c      	ite	eq
 80033c2:	2301      	moveq	r3, #1
 80033c4:	2300      	movne	r3, #0
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	e00c      	b.n	80033e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	43da      	mvns	r2, r3
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4013      	ands	r3, r2
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	bf0c      	ite	eq
 80033de:	2301      	moveq	r3, #1
 80033e0:	2300      	movne	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d0b6      	beq.n	800335a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
 8003402:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003404:	e051      	b.n	80034aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003414:	d123      	bne.n	800345e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003424:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800342e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2220      	movs	r2, #32
 800343a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f043 0204 	orr.w	r2, r3, #4
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e046      	b.n	80034ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003464:	d021      	beq.n	80034aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003466:	f7fe fe43 	bl	80020f0 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	429a      	cmp	r2, r3
 8003474:	d302      	bcc.n	800347c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d116      	bne.n	80034aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f043 0220 	orr.w	r2, r3, #32
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e020      	b.n	80034ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	0c1b      	lsrs	r3, r3, #16
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d10c      	bne.n	80034ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	43da      	mvns	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	4013      	ands	r3, r2
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	bf14      	ite	ne
 80034c6:	2301      	movne	r3, #1
 80034c8:	2300      	moveq	r3, #0
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	e00b      	b.n	80034e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	43da      	mvns	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	4013      	ands	r3, r2
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bf14      	ite	ne
 80034e0:	2301      	movne	r3, #1
 80034e2:	2300      	moveq	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d18d      	bne.n	8003406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003500:	e02d      	b.n	800355e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f878 	bl	80035f8 <I2C_IsAcknowledgeFailed>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e02d      	b.n	800356e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003518:	d021      	beq.n	800355e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351a:	f7fe fde9 	bl	80020f0 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	429a      	cmp	r2, r3
 8003528:	d302      	bcc.n	8003530 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d116      	bne.n	800355e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f043 0220 	orr.w	r2, r3, #32
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e007      	b.n	800356e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003568:	2b80      	cmp	r3, #128	; 0x80
 800356a:	d1ca      	bne.n	8003502 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003582:	e02d      	b.n	80035e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 f837 	bl	80035f8 <I2C_IsAcknowledgeFailed>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e02d      	b.n	80035f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800359a:	d021      	beq.n	80035e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359c:	f7fe fda8 	bl	80020f0 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d302      	bcc.n	80035b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d116      	bne.n	80035e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	f043 0220 	orr.w	r2, r3, #32
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e007      	b.n	80035f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	d1ca      	bne.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800360e:	d11b      	bne.n	8003648 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003618:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	f043 0204 	orr.w	r2, r3, #4
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e000      	b.n	800364a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003656:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003658:	b08f      	sub	sp, #60	; 0x3c
 800365a:	af0a      	add	r7, sp, #40	; 0x28
 800365c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e10f      	b.n	8003888 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f006 f986 	bl	8009994 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2203      	movs	r2, #3
 800368c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003698:	2b00      	cmp	r3, #0
 800369a:	d102      	bne.n	80036a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f002 ffb9 	bl	800661e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	603b      	str	r3, [r7, #0]
 80036b2:	687e      	ldr	r6, [r7, #4]
 80036b4:	466d      	mov	r5, sp
 80036b6:	f106 0410 	add.w	r4, r6, #16
 80036ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80036ca:	1d33      	adds	r3, r6, #4
 80036cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036ce:	6838      	ldr	r0, [r7, #0]
 80036d0:	f002 fe90 	bl	80063f4 <USB_CoreInit>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d005      	beq.n	80036e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2202      	movs	r2, #2
 80036de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e0d0      	b.n	8003888 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2100      	movs	r1, #0
 80036ec:	4618      	mov	r0, r3
 80036ee:	f002 ffa7 	bl	8006640 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036f2:	2300      	movs	r3, #0
 80036f4:	73fb      	strb	r3, [r7, #15]
 80036f6:	e04a      	b.n	800378e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036f8:	7bfa      	ldrb	r2, [r7, #15]
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	4613      	mov	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	1a9b      	subs	r3, r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	333d      	adds	r3, #61	; 0x3d
 8003708:	2201      	movs	r2, #1
 800370a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800370c:	7bfa      	ldrb	r2, [r7, #15]
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	4613      	mov	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	333c      	adds	r3, #60	; 0x3c
 800371c:	7bfa      	ldrb	r2, [r7, #15]
 800371e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003720:	7bfa      	ldrb	r2, [r7, #15]
 8003722:	7bfb      	ldrb	r3, [r7, #15]
 8003724:	b298      	uxth	r0, r3
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	4613      	mov	r3, r2
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	1a9b      	subs	r3, r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	3342      	adds	r3, #66	; 0x42
 8003734:	4602      	mov	r2, r0
 8003736:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003738:	7bfa      	ldrb	r2, [r7, #15]
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	4613      	mov	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	333f      	adds	r3, #63	; 0x3f
 8003748:	2200      	movs	r2, #0
 800374a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800374c:	7bfa      	ldrb	r2, [r7, #15]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	3344      	adds	r3, #68	; 0x44
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003760:	7bfa      	ldrb	r2, [r7, #15]
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	3348      	adds	r3, #72	; 0x48
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003774:	7bfa      	ldrb	r2, [r7, #15]
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	3350      	adds	r3, #80	; 0x50
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	3301      	adds	r3, #1
 800378c:	73fb      	strb	r3, [r7, #15]
 800378e:	7bfa      	ldrb	r2, [r7, #15]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	429a      	cmp	r2, r3
 8003796:	d3af      	bcc.n	80036f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003798:	2300      	movs	r3, #0
 800379a:	73fb      	strb	r3, [r7, #15]
 800379c:	e044      	b.n	8003828 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800379e:	7bfa      	ldrb	r2, [r7, #15]
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	1a9b      	subs	r3, r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80037b0:	2200      	movs	r2, #0
 80037b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037b4:	7bfa      	ldrb	r2, [r7, #15]
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4613      	mov	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	1a9b      	subs	r3, r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80037c6:	7bfa      	ldrb	r2, [r7, #15]
 80037c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037ca:	7bfa      	ldrb	r2, [r7, #15]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037e0:	7bfa      	ldrb	r2, [r7, #15]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037f6:	7bfa      	ldrb	r2, [r7, #15]
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800380c:	7bfa      	ldrb	r2, [r7, #15]
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	4613      	mov	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	1a9b      	subs	r3, r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003822:	7bfb      	ldrb	r3, [r7, #15]
 8003824:	3301      	adds	r3, #1
 8003826:	73fb      	strb	r3, [r7, #15]
 8003828:	7bfa      	ldrb	r2, [r7, #15]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	429a      	cmp	r2, r3
 8003830:	d3b5      	bcc.n	800379e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	603b      	str	r3, [r7, #0]
 8003838:	687e      	ldr	r6, [r7, #4]
 800383a:	466d      	mov	r5, sp
 800383c:	f106 0410 	add.w	r4, r6, #16
 8003840:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003842:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003846:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003848:	e894 0003 	ldmia.w	r4, {r0, r1}
 800384c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003850:	1d33      	adds	r3, r6, #4
 8003852:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003854:	6838      	ldr	r0, [r7, #0]
 8003856:	f002 ff3f 	bl	80066d8 <USB_DevInit>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d005      	beq.n	800386c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e00d      	b.n	8003888 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f003 ffbb 	bl	80077fc <USB_DevDisconnect>

  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003890 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_PCD_Start+0x1c>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e020      	b.n	80038ee <HAL_PCD_Start+0x5e>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d109      	bne.n	80038d0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d005      	beq.n	80038d0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f002 fe91 	bl	80065fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f003 ff6b 	bl	80077ba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038f6:	b590      	push	{r4, r7, lr}
 80038f8:	b08d      	sub	sp, #52	; 0x34
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f004 f829 	bl	8007964 <USB_GetMode>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	f040 839d 	bne.w	8004054 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f003 ff8d 	bl	800783e <USB_ReadInterrupts>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 8393 	beq.w	8004052 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f003 ff84 	bl	800783e <USB_ReadInterrupts>
 8003936:	4603      	mov	r3, r0
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b02      	cmp	r3, #2
 800393e:	d107      	bne.n	8003950 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695a      	ldr	r2, [r3, #20]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f002 0202 	and.w	r2, r2, #2
 800394e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f003 ff72 	bl	800783e <USB_ReadInterrupts>
 800395a:	4603      	mov	r3, r0
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	2b10      	cmp	r3, #16
 8003962:	d161      	bne.n	8003a28 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699a      	ldr	r2, [r3, #24]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0210 	bic.w	r2, r2, #16
 8003972:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	f003 020f 	and.w	r2, r3, #15
 8003980:	4613      	mov	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	1a9b      	subs	r3, r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	4413      	add	r3, r2
 8003990:	3304      	adds	r3, #4
 8003992:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	0c5b      	lsrs	r3, r3, #17
 8003998:	f003 030f 	and.w	r3, r3, #15
 800399c:	2b02      	cmp	r3, #2
 800399e:	d124      	bne.n	80039ea <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d035      	beq.n	8003a18 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	6a38      	ldr	r0, [r7, #32]
 80039c0:	f003 fda9 	bl	8007516 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	091b      	lsrs	r3, r3, #4
 80039cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039d0:	441a      	add	r2, r3
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	699a      	ldr	r2, [r3, #24]
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	091b      	lsrs	r3, r3, #4
 80039de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039e2:	441a      	add	r2, r3
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	619a      	str	r2, [r3, #24]
 80039e8:	e016      	b.n	8003a18 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	0c5b      	lsrs	r3, r3, #17
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	2b06      	cmp	r3, #6
 80039f4:	d110      	bne.n	8003a18 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039fc:	2208      	movs	r2, #8
 80039fe:	4619      	mov	r1, r3
 8003a00:	6a38      	ldr	r0, [r7, #32]
 8003a02:	f003 fd88 	bl	8007516 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	699a      	ldr	r2, [r3, #24]
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	091b      	lsrs	r3, r3, #4
 8003a0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a12:	441a      	add	r2, r3
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699a      	ldr	r2, [r3, #24]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0210 	orr.w	r2, r2, #16
 8003a26:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f003 ff06 	bl	800783e <USB_ReadInterrupts>
 8003a32:	4603      	mov	r3, r0
 8003a34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a3c:	d16e      	bne.n	8003b1c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f003 ff0c 	bl	8007864 <USB_ReadDevAllOutEpInterrupt>
 8003a4c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003a4e:	e062      	b.n	8003b16 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d057      	beq.n	8003b0a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	4611      	mov	r1, r2
 8003a64:	4618      	mov	r0, r3
 8003a66:	f003 ff31 	bl	80078cc <USB_ReadDevOutEPInterrupt>
 8003a6a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00c      	beq.n	8003a90 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	015a      	lsls	r2, r3, #5
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a82:	461a      	mov	r2, r3
 8003a84:	2301      	movs	r3, #1
 8003a86:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fdb0 	bl	80045f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00c      	beq.n	8003ab4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	2308      	movs	r3, #8
 8003aaa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003aac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 feaa 	bl	8004808 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f003 0310 	and.w	r3, r3, #16
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d008      	beq.n	8003ad0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	015a      	lsls	r2, r3, #5
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aca:	461a      	mov	r2, r3
 8003acc:	2310      	movs	r3, #16
 8003ace:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d008      	beq.n	8003aec <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	2320      	movs	r3, #32
 8003aea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d009      	beq.n	8003b0a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b02:	461a      	mov	r2, r3
 8003b04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b08:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b12:	085b      	lsrs	r3, r3, #1
 8003b14:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d199      	bne.n	8003a50 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f003 fe8c 	bl	800783e <USB_ReadInterrupts>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b30:	f040 80c0 	bne.w	8003cb4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f003 fead 	bl	8007898 <USB_ReadDevAllInEpInterrupt>
 8003b3e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003b44:	e0b2      	b.n	8003cac <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 80a7 	beq.w	8003ca0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f003 fed3 	bl	8007908 <USB_ReadDevInEPInterrupt>
 8003b62:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d057      	beq.n	8003c1e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	2201      	movs	r2, #1
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	43db      	mvns	r3, r3
 8003b88:	69f9      	ldr	r1, [r7, #28]
 8003b8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b8e:	4013      	ands	r3, r2
 8003b90:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d132      	bne.n	8003c12 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	1a9b      	subs	r3, r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	3348      	adds	r3, #72	; 0x48
 8003bbc:	6819      	ldr	r1, [r3, #0]
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	1a9b      	subs	r3, r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4403      	add	r3, r0
 8003bcc:	3344      	adds	r3, #68	; 0x44
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4419      	add	r1, r3
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	1a9b      	subs	r3, r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4403      	add	r3, r0
 8003be0:	3348      	adds	r3, #72	; 0x48
 8003be2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d113      	bne.n	8003c12 <HAL_PCD_IRQHandler+0x31c>
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bee:	4613      	mov	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	3350      	adds	r3, #80	; 0x50
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d108      	bne.n	8003c12 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6818      	ldr	r0, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	f003 fedb 	bl	80079c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	4619      	mov	r1, r3
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f005 ff3c 	bl	8009a96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c34:	461a      	mov	r2, r3
 8003c36:	2308      	movs	r3, #8
 8003c38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c50:	461a      	mov	r2, r3
 8003c52:	2310      	movs	r3, #16
 8003c54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	015a      	lsls	r2, r3, #5
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	2340      	movs	r3, #64	; 0x40
 8003c70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c88:	461a      	mov	r2, r3
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003c98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 fc1b 	bl	80044d6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca8:	085b      	lsrs	r3, r3, #1
 8003caa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f47f af49 	bne.w	8003b46 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f003 fdc0 	bl	800783e <USB_ReadInterrupts>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cc8:	d122      	bne.n	8003d10 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	69fa      	ldr	r2, [r7, #28]
 8003cd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cd8:	f023 0301 	bic.w	r3, r3, #1
 8003cdc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d108      	bne.n	8003cfa <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 fe26 	bl	8004944 <HAL_PCDEx_LPM_Callback>
 8003cf8:	e002      	b.n	8003d00 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f005 ff38 	bl	8009b70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695a      	ldr	r2, [r3, #20]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003d0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f003 fd92 	bl	800783e <USB_ReadInterrupts>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d24:	d112      	bne.n	8003d4c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d102      	bne.n	8003d3c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f005 fef4 	bl	8009b24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695a      	ldr	r2, [r3, #20]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003d4a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f003 fd74 	bl	800783e <USB_ReadInterrupts>
 8003d56:	4603      	mov	r3, r0
 8003d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d60:	f040 80c7 	bne.w	8003ef2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d72:	f023 0301 	bic.w	r3, r3, #1
 8003d76:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2110      	movs	r1, #16
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f002 fe0e 	bl	80069a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d84:	2300      	movs	r3, #0
 8003d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d88:	e056      	b.n	8003e38 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8c:	015a      	lsls	r2, r3, #5
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d96:	461a      	mov	r2, r3
 8003d98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d9c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dae:	0151      	lsls	r1, r2, #5
 8003db0:	69fa      	ldr	r2, [r7, #28]
 8003db2:	440a      	add	r2, r1
 8003db4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003db8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003dbc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc0:	015a      	lsls	r2, r3, #5
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dce:	0151      	lsls	r1, r2, #5
 8003dd0:	69fa      	ldr	r2, [r7, #28]
 8003dd2:	440a      	add	r2, r1
 8003dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dd8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ddc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dea:	461a      	mov	r2, r3
 8003dec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003df0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e02:	0151      	lsls	r1, r2, #5
 8003e04:	69fa      	ldr	r2, [r7, #28]
 8003e06:	440a      	add	r2, r1
 8003e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e10:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e22:	0151      	lsls	r1, r2, #5
 8003e24:	69fa      	ldr	r2, [r7, #28]
 8003e26:	440a      	add	r2, r1
 8003e28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e30:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e34:	3301      	adds	r3, #1
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d3a3      	bcc.n	8003d8a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e50:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003e54:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d016      	beq.n	8003e8c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e68:	69fa      	ldr	r2, [r7, #28]
 8003e6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e6e:	f043 030b 	orr.w	r3, r3, #11
 8003e72:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	69fa      	ldr	r2, [r7, #28]
 8003e80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e84:	f043 030b 	orr.w	r3, r3, #11
 8003e88:	6453      	str	r3, [r2, #68]	; 0x44
 8003e8a:	e015      	b.n	8003eb8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	69fa      	ldr	r2, [r7, #28]
 8003e96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e9e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003ea2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eb2:	f043 030b 	orr.w	r3, r3, #11
 8003eb6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	69fa      	ldr	r2, [r7, #28]
 8003ec2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ec6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003eca:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6818      	ldr	r0, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003edc:	461a      	mov	r2, r3
 8003ede:	f003 fd73 	bl	80079c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695a      	ldr	r2, [r3, #20]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003ef0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f003 fca1 	bl	800783e <USB_ReadInterrupts>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f06:	d124      	bne.n	8003f52 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f003 fd37 	bl	8007980 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f002 fd9f 	bl	8006a5a <USB_GetDevSpeed>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	461a      	mov	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681c      	ldr	r4, [r3, #0]
 8003f28:	f001 f92c 	bl	8005184 <HAL_RCC_GetHCLKFreq>
 8003f2c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	4620      	mov	r0, r4
 8003f38:	f002 fabe 	bl	80064b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f005 fdd2 	bl	8009ae6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	695a      	ldr	r2, [r3, #20]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003f50:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f003 fc71 	bl	800783e <USB_ReadInterrupts>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d10a      	bne.n	8003f7c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f005 fdaf 	bl	8009aca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695a      	ldr	r2, [r3, #20]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f002 0208 	and.w	r2, r2, #8
 8003f7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f003 fc5c 	bl	800783e <USB_ReadInterrupts>
 8003f86:	4603      	mov	r3, r0
 8003f88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f90:	d10f      	bne.n	8003fb2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f005 fe07 	bl	8009bb0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695a      	ldr	r2, [r3, #20]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003fb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f003 fc41 	bl	800783e <USB_ReadInterrupts>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fc6:	d10f      	bne.n	8003fe8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f005 fdda 	bl	8009b8c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695a      	ldr	r2, [r3, #20]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003fe6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f003 fc26 	bl	800783e <USB_ReadInterrupts>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ffc:	d10a      	bne.n	8004014 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f005 fde8 	bl	8009bd4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695a      	ldr	r2, [r3, #20]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004012:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f003 fc10 	bl	800783e <USB_ReadInterrupts>
 800401e:	4603      	mov	r3, r0
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b04      	cmp	r3, #4
 8004026:	d115      	bne.n	8004054 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	f003 0304 	and.w	r3, r3, #4
 8004036:	2b00      	cmp	r3, #0
 8004038:	d002      	beq.n	8004040 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f005 fdd8 	bl	8009bf0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6859      	ldr	r1, [r3, #4]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	430a      	orrs	r2, r1
 800404e:	605a      	str	r2, [r3, #4]
 8004050:	e000      	b.n	8004054 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004052:	bf00      	nop
    }
  }
}
 8004054:	3734      	adds	r7, #52	; 0x34
 8004056:	46bd      	mov	sp, r7
 8004058:	bd90      	pop	{r4, r7, pc}

0800405a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b082      	sub	sp, #8
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
 8004062:	460b      	mov	r3, r1
 8004064:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_PCD_SetAddress+0x1a>
 8004070:	2302      	movs	r3, #2
 8004072:	e013      	b.n	800409c <HAL_PCD_SetAddress+0x42>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	78fa      	ldrb	r2, [r7, #3]
 8004080:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	78fa      	ldrb	r2, [r7, #3]
 800408a:	4611      	mov	r1, r2
 800408c:	4618      	mov	r0, r3
 800408e:	f003 fb6e 	bl	800776e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	4608      	mov	r0, r1
 80040ae:	4611      	mov	r1, r2
 80040b0:	461a      	mov	r2, r3
 80040b2:	4603      	mov	r3, r0
 80040b4:	70fb      	strb	r3, [r7, #3]
 80040b6:	460b      	mov	r3, r1
 80040b8:	803b      	strh	r3, [r7, #0]
 80040ba:	4613      	mov	r3, r2
 80040bc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	da0f      	bge.n	80040ea <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040ca:	78fb      	ldrb	r3, [r7, #3]
 80040cc:	f003 020f 	and.w	r2, r3, #15
 80040d0:	4613      	mov	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	3338      	adds	r3, #56	; 0x38
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	4413      	add	r3, r2
 80040de:	3304      	adds	r3, #4
 80040e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2201      	movs	r2, #1
 80040e6:	705a      	strb	r2, [r3, #1]
 80040e8:	e00f      	b.n	800410a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040ea:	78fb      	ldrb	r3, [r7, #3]
 80040ec:	f003 020f 	and.w	r2, r3, #15
 80040f0:	4613      	mov	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	1a9b      	subs	r3, r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	4413      	add	r3, r2
 8004100:	3304      	adds	r3, #4
 8004102:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800410a:	78fb      	ldrb	r3, [r7, #3]
 800410c:	f003 030f 	and.w	r3, r3, #15
 8004110:	b2da      	uxtb	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004116:	883a      	ldrh	r2, [r7, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	78ba      	ldrb	r2, [r7, #2]
 8004120:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	785b      	ldrb	r3, [r3, #1]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d004      	beq.n	8004134 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004134:	78bb      	ldrb	r3, [r7, #2]
 8004136:	2b02      	cmp	r3, #2
 8004138:	d102      	bne.n	8004140 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004146:	2b01      	cmp	r3, #1
 8004148:	d101      	bne.n	800414e <HAL_PCD_EP_Open+0xaa>
 800414a:	2302      	movs	r3, #2
 800414c:	e00e      	b.n	800416c <HAL_PCD_EP_Open+0xc8>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68f9      	ldr	r1, [r7, #12]
 800415c:	4618      	mov	r0, r3
 800415e:	f002 fca1 	bl	8006aa4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800416a:	7afb      	ldrb	r3, [r7, #11]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004180:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004184:	2b00      	cmp	r3, #0
 8004186:	da0f      	bge.n	80041a8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004188:	78fb      	ldrb	r3, [r7, #3]
 800418a:	f003 020f 	and.w	r2, r3, #15
 800418e:	4613      	mov	r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	1a9b      	subs	r3, r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	3338      	adds	r3, #56	; 0x38
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	4413      	add	r3, r2
 800419c:	3304      	adds	r3, #4
 800419e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2201      	movs	r2, #1
 80041a4:	705a      	strb	r2, [r3, #1]
 80041a6:	e00f      	b.n	80041c8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041a8:	78fb      	ldrb	r3, [r7, #3]
 80041aa:	f003 020f 	and.w	r2, r3, #15
 80041ae:	4613      	mov	r3, r2
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	4413      	add	r3, r2
 80041be:	3304      	adds	r3, #4
 80041c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80041c8:	78fb      	ldrb	r3, [r7, #3]
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <HAL_PCD_EP_Close+0x6e>
 80041de:	2302      	movs	r3, #2
 80041e0:	e00e      	b.n	8004200 <HAL_PCD_EP_Close+0x8c>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68f9      	ldr	r1, [r7, #12]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f002 fcdf 	bl	8006bb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	607a      	str	r2, [r7, #4]
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	460b      	mov	r3, r1
 8004216:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004218:	7afb      	ldrb	r3, [r7, #11]
 800421a:	f003 020f 	and.w	r2, r3, #15
 800421e:	4613      	mov	r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	1a9b      	subs	r3, r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4413      	add	r3, r2
 800422e:	3304      	adds	r3, #4
 8004230:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2200      	movs	r2, #0
 8004242:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2200      	movs	r2, #0
 8004248:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800424a:	7afb      	ldrb	r3, [r7, #11]
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	b2da      	uxtb	r2, r3
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d102      	bne.n	8004264 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004264:	7afb      	ldrb	r3, [r7, #11]
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	2b00      	cmp	r3, #0
 800426c:	d109      	bne.n	8004282 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6818      	ldr	r0, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	b2db      	uxtb	r3, r3
 8004278:	461a      	mov	r2, r3
 800427a:	6979      	ldr	r1, [r7, #20]
 800427c:	f002 ffba 	bl	80071f4 <USB_EP0StartXfer>
 8004280:	e008      	b.n	8004294 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	b2db      	uxtb	r3, r3
 800428c:	461a      	mov	r2, r3
 800428e:	6979      	ldr	r1, [r7, #20]
 8004290:	f002 fd6c 	bl	8006d6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	460b      	mov	r3, r1
 80042a8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80042aa:	78fb      	ldrb	r3, [r7, #3]
 80042ac:	f003 020f 	and.w	r2, r3, #15
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	4613      	mov	r3, r2
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	1a9b      	subs	r3, r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80042c0:	681b      	ldr	r3, [r3, #0]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b086      	sub	sp, #24
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	60f8      	str	r0, [r7, #12]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]
 80042da:	460b      	mov	r3, r1
 80042dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042de:	7afb      	ldrb	r3, [r7, #11]
 80042e0:	f003 020f 	and.w	r2, r3, #15
 80042e4:	4613      	mov	r3, r2
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	1a9b      	subs	r3, r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	3338      	adds	r3, #56	; 0x38
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4413      	add	r3, r2
 80042f2:	3304      	adds	r3, #4
 80042f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2200      	movs	r2, #0
 8004306:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	2201      	movs	r2, #1
 800430c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800430e:	7afb      	ldrb	r3, [r7, #11]
 8004310:	f003 030f 	and.w	r3, r3, #15
 8004314:	b2da      	uxtb	r2, r3
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d102      	bne.n	8004328 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004328:	7afb      	ldrb	r3, [r7, #11]
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	2b00      	cmp	r3, #0
 8004330:	d109      	bne.n	8004346 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	b2db      	uxtb	r3, r3
 800433c:	461a      	mov	r2, r3
 800433e:	6979      	ldr	r1, [r7, #20]
 8004340:	f002 ff58 	bl	80071f4 <USB_EP0StartXfer>
 8004344:	e008      	b.n	8004358 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	b2db      	uxtb	r3, r3
 8004350:	461a      	mov	r2, r3
 8004352:	6979      	ldr	r1, [r7, #20]
 8004354:	f002 fd0a 	bl	8006d6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b084      	sub	sp, #16
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	460b      	mov	r3, r1
 800436c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800436e:	78fb      	ldrb	r3, [r7, #3]
 8004370:	f003 020f 	and.w	r2, r3, #15
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	429a      	cmp	r2, r3
 800437a:	d901      	bls.n	8004380 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e050      	b.n	8004422 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004380:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004384:	2b00      	cmp	r3, #0
 8004386:	da0f      	bge.n	80043a8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	f003 020f 	and.w	r2, r3, #15
 800438e:	4613      	mov	r3, r2
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	1a9b      	subs	r3, r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	3338      	adds	r3, #56	; 0x38
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	4413      	add	r3, r2
 800439c:	3304      	adds	r3, #4
 800439e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2201      	movs	r2, #1
 80043a4:	705a      	strb	r2, [r3, #1]
 80043a6:	e00d      	b.n	80043c4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043a8:	78fa      	ldrb	r2, [r7, #3]
 80043aa:	4613      	mov	r3, r2
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	1a9b      	subs	r3, r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	4413      	add	r3, r2
 80043ba:	3304      	adds	r3, #4
 80043bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2201      	movs	r2, #1
 80043c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043ca:	78fb      	ldrb	r3, [r7, #3]
 80043cc:	f003 030f 	and.w	r3, r3, #15
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d101      	bne.n	80043e4 <HAL_PCD_EP_SetStall+0x82>
 80043e0:	2302      	movs	r3, #2
 80043e2:	e01e      	b.n	8004422 <HAL_PCD_EP_SetStall+0xc0>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68f9      	ldr	r1, [r7, #12]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f003 f8e7 	bl	80075c6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10a      	bne.n	8004418 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6818      	ldr	r0, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	b2d9      	uxtb	r1, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004412:	461a      	mov	r2, r3
 8004414:	f003 fad8 	bl	80079c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b084      	sub	sp, #16
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	460b      	mov	r3, r1
 8004434:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004436:	78fb      	ldrb	r3, [r7, #3]
 8004438:	f003 020f 	and.w	r2, r3, #15
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	429a      	cmp	r2, r3
 8004442:	d901      	bls.n	8004448 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e042      	b.n	80044ce <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004448:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800444c:	2b00      	cmp	r3, #0
 800444e:	da0f      	bge.n	8004470 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004450:	78fb      	ldrb	r3, [r7, #3]
 8004452:	f003 020f 	and.w	r2, r3, #15
 8004456:	4613      	mov	r3, r2
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	1a9b      	subs	r3, r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	3338      	adds	r3, #56	; 0x38
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	4413      	add	r3, r2
 8004464:	3304      	adds	r3, #4
 8004466:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2201      	movs	r2, #1
 800446c:	705a      	strb	r2, [r3, #1]
 800446e:	e00f      	b.n	8004490 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004470:	78fb      	ldrb	r3, [r7, #3]
 8004472:	f003 020f 	and.w	r2, r3, #15
 8004476:	4613      	mov	r3, r2
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	4413      	add	r3, r2
 8004486:	3304      	adds	r3, #4
 8004488:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004496:	78fb      	ldrb	r3, [r7, #3]
 8004498:	f003 030f 	and.w	r3, r3, #15
 800449c:	b2da      	uxtb	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_PCD_EP_ClrStall+0x86>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e00e      	b.n	80044ce <HAL_PCD_EP_ClrStall+0xa4>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68f9      	ldr	r1, [r7, #12]
 80044be:	4618      	mov	r0, r3
 80044c0:	f003 f8ef 	bl	80076a2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b08a      	sub	sp, #40	; 0x28
 80044da:	af02      	add	r7, sp, #8
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	4613      	mov	r3, r2
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	1a9b      	subs	r3, r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	3338      	adds	r3, #56	; 0x38
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	4413      	add	r3, r2
 80044fa:	3304      	adds	r3, #4
 80044fc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	429a      	cmp	r2, r3
 8004508:	d901      	bls.n	800450e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e06c      	b.n	80045e8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	695a      	ldr	r2, [r3, #20]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	69fa      	ldr	r2, [r7, #28]
 8004520:	429a      	cmp	r2, r3
 8004522:	d902      	bls.n	800452a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	3303      	adds	r3, #3
 800452e:	089b      	lsrs	r3, r3, #2
 8004530:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004532:	e02b      	b.n	800458c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	695a      	ldr	r2, [r3, #20]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	69fa      	ldr	r2, [r7, #28]
 8004546:	429a      	cmp	r2, r3
 8004548:	d902      	bls.n	8004550 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	3303      	adds	r3, #3
 8004554:	089b      	lsrs	r3, r3, #2
 8004556:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	68d9      	ldr	r1, [r3, #12]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	b2da      	uxtb	r2, r3
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004568:	b2db      	uxtb	r3, r3
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	4603      	mov	r3, r0
 800456e:	6978      	ldr	r0, [r7, #20]
 8004570:	f002 ff93 	bl	800749a <USB_WritePacket>

    ep->xfer_buff  += len;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	441a      	add	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	699a      	ldr	r2, [r3, #24]
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	441a      	add	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	4413      	add	r3, r2
 8004594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	b29b      	uxth	r3, r3
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d809      	bhi.n	80045b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	699a      	ldr	r2, [r3, #24]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d203      	bcs.n	80045b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1be      	bne.n	8004534 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	695a      	ldr	r2, [r3, #20]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d811      	bhi.n	80045e6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	f003 030f 	and.w	r3, r3, #15
 80045c8:	2201      	movs	r2, #1
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	43db      	mvns	r3, r3
 80045dc:	6939      	ldr	r1, [r7, #16]
 80045de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045e2:	4013      	ands	r3, r2
 80045e4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3720      	adds	r7, #32
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	333c      	adds	r3, #60	; 0x3c
 8004608:	3304      	adds	r3, #4
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	2b01      	cmp	r3, #1
 8004624:	f040 80a0 	bne.w	8004768 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d015      	beq.n	800465e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4a72      	ldr	r2, [pc, #456]	; (8004800 <PCD_EP_OutXfrComplete_int+0x210>)
 8004636:	4293      	cmp	r3, r2
 8004638:	f240 80dd 	bls.w	80047f6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 80d7 	beq.w	80047f6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	4413      	add	r3, r2
 8004650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004654:	461a      	mov	r2, r3
 8004656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800465a:	6093      	str	r3, [r2, #8]
 800465c:	e0cb      	b.n	80047f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	2b00      	cmp	r3, #0
 8004666:	d009      	beq.n	800467c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004674:	461a      	mov	r2, r3
 8004676:	2320      	movs	r3, #32
 8004678:	6093      	str	r3, [r2, #8]
 800467a:	e0bc      	b.n	80047f6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004682:	2b00      	cmp	r3, #0
 8004684:	f040 80b7 	bne.w	80047f6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4a5d      	ldr	r2, [pc, #372]	; (8004800 <PCD_EP_OutXfrComplete_int+0x210>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d90f      	bls.n	80046b0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a6:	461a      	mov	r2, r3
 80046a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ac:	6093      	str	r3, [r2, #8]
 80046ae:	e0a2      	b.n	80047f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	4613      	mov	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	1a9b      	subs	r3, r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80046c2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	0159      	lsls	r1, r3, #5
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	440b      	add	r3, r1
 80046cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80046d6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	4613      	mov	r3, r2
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	1a9b      	subs	r3, r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4403      	add	r3, r0
 80046e6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80046ea:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80046ec:	6879      	ldr	r1, [r7, #4]
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	4613      	mov	r3, r2
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	1a9b      	subs	r3, r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80046fe:	6819      	ldr	r1, [r3, #0]
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	4613      	mov	r3, r2
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4403      	add	r3, r0
 800470e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4419      	add	r1, r3
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	4613      	mov	r3, r2
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	1a9b      	subs	r3, r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4403      	add	r3, r0
 8004724:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004728:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d114      	bne.n	800475a <PCD_EP_OutXfrComplete_int+0x16a>
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	4613      	mov	r3, r2
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	1a9b      	subs	r3, r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	440b      	add	r3, r1
 800473e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d108      	bne.n	800475a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6818      	ldr	r0, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004752:	461a      	mov	r2, r3
 8004754:	2101      	movs	r1, #1
 8004756:	f003 f937 	bl	80079c8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	4619      	mov	r1, r3
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f005 f97d 	bl	8009a60 <HAL_PCD_DataOutStageCallback>
 8004766:	e046      	b.n	80047f6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4a26      	ldr	r2, [pc, #152]	; (8004804 <PCD_EP_OutXfrComplete_int+0x214>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d124      	bne.n	80047ba <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	4413      	add	r3, r2
 8004782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004786:	461a      	mov	r2, r3
 8004788:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800478c:	6093      	str	r3, [r2, #8]
 800478e:	e032      	b.n	80047f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f003 0320 	and.w	r3, r3, #32
 8004796:	2b00      	cmp	r3, #0
 8004798:	d008      	beq.n	80047ac <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a6:	461a      	mov	r2, r3
 80047a8:	2320      	movs	r3, #32
 80047aa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	4619      	mov	r1, r3
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f005 f954 	bl	8009a60 <HAL_PCD_DataOutStageCallback>
 80047b8:	e01d      	b.n	80047f6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d114      	bne.n	80047ea <PCD_EP_OutXfrComplete_int+0x1fa>
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	4613      	mov	r3, r2
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	1a9b      	subs	r3, r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d108      	bne.n	80047ea <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6818      	ldr	r0, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80047e2:	461a      	mov	r2, r3
 80047e4:	2100      	movs	r1, #0
 80047e6:	f003 f8ef 	bl	80079c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	4619      	mov	r1, r3
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f005 f935 	bl	8009a60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3718      	adds	r7, #24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	4f54300a 	.word	0x4f54300a
 8004804:	4f54310a 	.word	0x4f54310a

08004808 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	333c      	adds	r3, #60	; 0x3c
 8004820:	3304      	adds	r3, #4
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	4413      	add	r3, r2
 800482e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4a15      	ldr	r2, [pc, #84]	; (8004890 <PCD_EP_OutSetupPacket_int+0x88>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d90e      	bls.n	800485c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004844:	2b00      	cmp	r3, #0
 8004846:	d009      	beq.n	800485c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004854:	461a      	mov	r2, r3
 8004856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800485a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f005 f8ed 	bl	8009a3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4a0a      	ldr	r2, [pc, #40]	; (8004890 <PCD_EP_OutSetupPacket_int+0x88>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d90c      	bls.n	8004884 <PCD_EP_OutSetupPacket_int+0x7c>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d108      	bne.n	8004884 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6818      	ldr	r0, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800487c:	461a      	mov	r2, r3
 800487e:	2101      	movs	r1, #1
 8004880:	f003 f8a2 	bl	80079c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	4f54300a 	.word	0x4f54300a

08004894 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	460b      	mov	r3, r1
 800489e:	70fb      	strb	r3, [r7, #3]
 80048a0:	4613      	mov	r3, r2
 80048a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80048ac:	78fb      	ldrb	r3, [r7, #3]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d107      	bne.n	80048c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80048b2:	883b      	ldrh	r3, [r7, #0]
 80048b4:	0419      	lsls	r1, r3, #16
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	430a      	orrs	r2, r1
 80048be:	629a      	str	r2, [r3, #40]	; 0x28
 80048c0:	e028      	b.n	8004914 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c8:	0c1b      	lsrs	r3, r3, #16
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	4413      	add	r3, r2
 80048ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048d0:	2300      	movs	r3, #0
 80048d2:	73fb      	strb	r3, [r7, #15]
 80048d4:	e00d      	b.n	80048f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	7bfb      	ldrb	r3, [r7, #15]
 80048dc:	3340      	adds	r3, #64	; 0x40
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	0c1b      	lsrs	r3, r3, #16
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	4413      	add	r3, r2
 80048ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
 80048ee:	3301      	adds	r3, #1
 80048f0:	73fb      	strb	r3, [r7, #15]
 80048f2:	7bfa      	ldrb	r2, [r7, #15]
 80048f4:	78fb      	ldrb	r3, [r7, #3]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d3ec      	bcc.n	80048d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80048fc:	883b      	ldrh	r3, [r7, #0]
 80048fe:	0418      	lsls	r0, r3, #16
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6819      	ldr	r1, [r3, #0]
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	3b01      	subs	r3, #1
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	4302      	orrs	r2, r0
 800490c:	3340      	adds	r3, #64	; 0x40
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	440b      	add	r3, r1
 8004912:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	460b      	mov	r3, r1
 800492c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	887a      	ldrh	r2, [r7, #2]
 8004934:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	460b      	mov	r3, r1
 800494e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e264      	b.n	8004e38 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d075      	beq.n	8004a66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800497a:	4ba3      	ldr	r3, [pc, #652]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 030c 	and.w	r3, r3, #12
 8004982:	2b04      	cmp	r3, #4
 8004984:	d00c      	beq.n	80049a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004986:	4ba0      	ldr	r3, [pc, #640]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800498e:	2b08      	cmp	r3, #8
 8004990:	d112      	bne.n	80049b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004992:	4b9d      	ldr	r3, [pc, #628]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800499a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800499e:	d10b      	bne.n	80049b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a0:	4b99      	ldr	r3, [pc, #612]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d05b      	beq.n	8004a64 <HAL_RCC_OscConfig+0x108>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d157      	bne.n	8004a64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e23f      	b.n	8004e38 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c0:	d106      	bne.n	80049d0 <HAL_RCC_OscConfig+0x74>
 80049c2:	4b91      	ldr	r3, [pc, #580]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a90      	ldr	r2, [pc, #576]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 80049c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	e01d      	b.n	8004a0c <HAL_RCC_OscConfig+0xb0>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049d8:	d10c      	bne.n	80049f4 <HAL_RCC_OscConfig+0x98>
 80049da:	4b8b      	ldr	r3, [pc, #556]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a8a      	ldr	r2, [pc, #552]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 80049e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	4b88      	ldr	r3, [pc, #544]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a87      	ldr	r2, [pc, #540]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 80049ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	e00b      	b.n	8004a0c <HAL_RCC_OscConfig+0xb0>
 80049f4:	4b84      	ldr	r3, [pc, #528]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a83      	ldr	r2, [pc, #524]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 80049fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049fe:	6013      	str	r3, [r2, #0]
 8004a00:	4b81      	ldr	r3, [pc, #516]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a80      	ldr	r2, [pc, #512]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d013      	beq.n	8004a3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a14:	f7fd fb6c 	bl	80020f0 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a1c:	f7fd fb68 	bl	80020f0 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b64      	cmp	r3, #100	; 0x64
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e204      	b.n	8004e38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a2e:	4b76      	ldr	r3, [pc, #472]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0xc0>
 8004a3a:	e014      	b.n	8004a66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3c:	f7fd fb58 	bl	80020f0 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a44:	f7fd fb54 	bl	80020f0 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b64      	cmp	r3, #100	; 0x64
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e1f0      	b.n	8004e38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a56:	4b6c      	ldr	r3, [pc, #432]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1f0      	bne.n	8004a44 <HAL_RCC_OscConfig+0xe8>
 8004a62:	e000      	b.n	8004a66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d063      	beq.n	8004b3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a72:	4b65      	ldr	r3, [pc, #404]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 030c 	and.w	r3, r3, #12
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00b      	beq.n	8004a96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a7e:	4b62      	ldr	r3, [pc, #392]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d11c      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a8a:	4b5f      	ldr	r3, [pc, #380]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d116      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a96:	4b5c      	ldr	r3, [pc, #368]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d005      	beq.n	8004aae <HAL_RCC_OscConfig+0x152>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d001      	beq.n	8004aae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e1c4      	b.n	8004e38 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aae:	4b56      	ldr	r3, [pc, #344]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	4952      	ldr	r1, [pc, #328]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ac2:	e03a      	b.n	8004b3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d020      	beq.n	8004b0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004acc:	4b4f      	ldr	r3, [pc, #316]	; (8004c0c <HAL_RCC_OscConfig+0x2b0>)
 8004ace:	2201      	movs	r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad2:	f7fd fb0d 	bl	80020f0 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ada:	f7fd fb09 	bl	80020f0 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e1a5      	b.n	8004e38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aec:	4b46      	ldr	r3, [pc, #280]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0f0      	beq.n	8004ada <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af8:	4b43      	ldr	r3, [pc, #268]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	4940      	ldr	r1, [pc, #256]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	600b      	str	r3, [r1, #0]
 8004b0c:	e015      	b.n	8004b3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b0e:	4b3f      	ldr	r3, [pc, #252]	; (8004c0c <HAL_RCC_OscConfig+0x2b0>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b14:	f7fd faec 	bl	80020f0 <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b1c:	f7fd fae8 	bl	80020f0 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e184      	b.n	8004e38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b2e:	4b36      	ldr	r3, [pc, #216]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1f0      	bne.n	8004b1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0308 	and.w	r3, r3, #8
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d030      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d016      	beq.n	8004b7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b4e:	4b30      	ldr	r3, [pc, #192]	; (8004c10 <HAL_RCC_OscConfig+0x2b4>)
 8004b50:	2201      	movs	r2, #1
 8004b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b54:	f7fd facc 	bl	80020f0 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b5c:	f7fd fac8 	bl	80020f0 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e164      	b.n	8004e38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b6e:	4b26      	ldr	r3, [pc, #152]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCC_OscConfig+0x200>
 8004b7a:	e015      	b.n	8004ba8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b7c:	4b24      	ldr	r3, [pc, #144]	; (8004c10 <HAL_RCC_OscConfig+0x2b4>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b82:	f7fd fab5 	bl	80020f0 <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b88:	e008      	b.n	8004b9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b8a:	f7fd fab1 	bl	80020f0 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e14d      	b.n	8004e38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b9c:	4b1a      	ldr	r3, [pc, #104]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1f0      	bne.n	8004b8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 80a0 	beq.w	8004cf6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bba:	4b13      	ldr	r3, [pc, #76]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10f      	bne.n	8004be6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60bb      	str	r3, [r7, #8]
 8004bca:	4b0f      	ldr	r3, [pc, #60]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	4a0e      	ldr	r2, [pc, #56]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8004bd6:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <HAL_RCC_OscConfig+0x2ac>)
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bde:	60bb      	str	r3, [r7, #8]
 8004be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004be2:	2301      	movs	r3, #1
 8004be4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be6:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <HAL_RCC_OscConfig+0x2b8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d121      	bne.n	8004c36 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bf2:	4b08      	ldr	r3, [pc, #32]	; (8004c14 <HAL_RCC_OscConfig+0x2b8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a07      	ldr	r2, [pc, #28]	; (8004c14 <HAL_RCC_OscConfig+0x2b8>)
 8004bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bfe:	f7fd fa77 	bl	80020f0 <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c04:	e011      	b.n	8004c2a <HAL_RCC_OscConfig+0x2ce>
 8004c06:	bf00      	nop
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	42470000 	.word	0x42470000
 8004c10:	42470e80 	.word	0x42470e80
 8004c14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c18:	f7fd fa6a 	bl	80020f0 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e106      	b.n	8004e38 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c2a:	4b85      	ldr	r3, [pc, #532]	; (8004e40 <HAL_RCC_OscConfig+0x4e4>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0f0      	beq.n	8004c18 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d106      	bne.n	8004c4c <HAL_RCC_OscConfig+0x2f0>
 8004c3e:	4b81      	ldr	r3, [pc, #516]	; (8004e44 <HAL_RCC_OscConfig+0x4e8>)
 8004c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c42:	4a80      	ldr	r2, [pc, #512]	; (8004e44 <HAL_RCC_OscConfig+0x4e8>)
 8004c44:	f043 0301 	orr.w	r3, r3, #1
 8004c48:	6713      	str	r3, [r2, #112]	; 0x70
 8004c4a:	e01c      	b.n	8004c86 <HAL_RCC_OscConfig+0x32a>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	2b05      	cmp	r3, #5
 8004c52:	d10c      	bne.n	8004c6e <HAL_RCC_OscConfig+0x312>
 8004c54:	4b7b      	ldr	r3, [pc, #492]	; (8004e44 <HAL_RCC_OscConfig+0x4e8>)
 8004c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c58:	4a7a      	ldr	r2, [pc, #488]	; (8004e44 <HAL_RCC_OscConfig+0x4e8>)
 8004c5a:	f043 0304 	orr.w	r3, r3, #4
 8004c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c60:	4b78      	ldr	r3, [pc, #480]	; (8004e44 <HAL_RCC_OscConfig+0x4e8>)
 8004c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c64:	4a77      	ldr	r2, [pc, #476]	; (8004e44 <HAL_RCC_OscConfig+0x4e8>)
 8004c66:	f043 0301 	orr.w	r3, r3, #1
 8004c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c6c:	e00b      	b.n	8004c86 <HAL_RCC_OscConfig+0x32a>
 8004c6e:	4b75      	ldr	r3, [pc, #468]	; (8004e44 <HAL_RCC_OscConfig+0x4e8>)
 8004c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c72:	4a74      	ldr	r2, [pc, #464]	; (8004e44 <HAL_RCC_OscConfig+0x4e8>)
 8004c74:	f023 0301 	bic.w	r3, r3, #1
 8004c78:	6713      	str	r3, [r2, #112]	; 0x70
 8004c7a:	4b72      	ldr	r3, [pc, #456]	; (8004e44 <HAL_RCC_OscConfig+0x4e8>)
 8004c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7e:	4a71      	ldr	r2, [pc, #452]	; (8004e44 <HAL_RCC_OscConfig+0x4e8>)
 8004c80:	f023 0304 	bic.w	r3, r3, #4
 8004c84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d015      	beq.n	8004cba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c8e:	f7fd fa2f 	bl	80020f0 <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c94:	e00a      	b.n	8004cac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c96:	f7fd fa2b 	bl	80020f0 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e0c5      	b.n	8004e38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cac:	4b65      	ldr	r3, [pc, #404]	; (8004e44 <HAL_RCC_OscConfig+0x4e8>)
 8004cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0ee      	beq.n	8004c96 <HAL_RCC_OscConfig+0x33a>
 8004cb8:	e014      	b.n	8004ce4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cba:	f7fd fa19 	bl	80020f0 <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cc0:	e00a      	b.n	8004cd8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cc2:	f7fd fa15 	bl	80020f0 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e0af      	b.n	8004e38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cd8:	4b5a      	ldr	r3, [pc, #360]	; (8004e44 <HAL_RCC_OscConfig+0x4e8>)
 8004cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1ee      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ce4:	7dfb      	ldrb	r3, [r7, #23]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d105      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cea:	4b56      	ldr	r3, [pc, #344]	; (8004e44 <HAL_RCC_OscConfig+0x4e8>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	4a55      	ldr	r2, [pc, #340]	; (8004e44 <HAL_RCC_OscConfig+0x4e8>)
 8004cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cf4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 809b 	beq.w	8004e36 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d00:	4b50      	ldr	r3, [pc, #320]	; (8004e44 <HAL_RCC_OscConfig+0x4e8>)
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f003 030c 	and.w	r3, r3, #12
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d05c      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d141      	bne.n	8004d98 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d14:	4b4c      	ldr	r3, [pc, #304]	; (8004e48 <HAL_RCC_OscConfig+0x4ec>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d1a:	f7fd f9e9 	bl	80020f0 <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d22:	f7fd f9e5 	bl	80020f0 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e081      	b.n	8004e38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d34:	4b43      	ldr	r3, [pc, #268]	; (8004e44 <HAL_RCC_OscConfig+0x4e8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1f0      	bne.n	8004d22 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	69da      	ldr	r2, [r3, #28]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	019b      	lsls	r3, r3, #6
 8004d50:	431a      	orrs	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d56:	085b      	lsrs	r3, r3, #1
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	041b      	lsls	r3, r3, #16
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d62:	061b      	lsls	r3, r3, #24
 8004d64:	4937      	ldr	r1, [pc, #220]	; (8004e44 <HAL_RCC_OscConfig+0x4e8>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d6a:	4b37      	ldr	r3, [pc, #220]	; (8004e48 <HAL_RCC_OscConfig+0x4ec>)
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d70:	f7fd f9be 	bl	80020f0 <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d78:	f7fd f9ba 	bl	80020f0 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e056      	b.n	8004e38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d8a:	4b2e      	ldr	r3, [pc, #184]	; (8004e44 <HAL_RCC_OscConfig+0x4e8>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0f0      	beq.n	8004d78 <HAL_RCC_OscConfig+0x41c>
 8004d96:	e04e      	b.n	8004e36 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d98:	4b2b      	ldr	r3, [pc, #172]	; (8004e48 <HAL_RCC_OscConfig+0x4ec>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9e:	f7fd f9a7 	bl	80020f0 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004da4:	e008      	b.n	8004db8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004da6:	f7fd f9a3 	bl	80020f0 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e03f      	b.n	8004e38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004db8:	4b22      	ldr	r3, [pc, #136]	; (8004e44 <HAL_RCC_OscConfig+0x4e8>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1f0      	bne.n	8004da6 <HAL_RCC_OscConfig+0x44a>
 8004dc4:	e037      	b.n	8004e36 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d101      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e032      	b.n	8004e38 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004dd2:	4b1c      	ldr	r3, [pc, #112]	; (8004e44 <HAL_RCC_OscConfig+0x4e8>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d028      	beq.n	8004e32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d121      	bne.n	8004e32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d11a      	bne.n	8004e32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e02:	4013      	ands	r3, r2
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e08:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d111      	bne.n	8004e32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e18:	085b      	lsrs	r3, r3, #1
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d107      	bne.n	8004e32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d001      	beq.n	8004e36 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e000      	b.n	8004e38 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	40007000 	.word	0x40007000
 8004e44:	40023800 	.word	0x40023800
 8004e48:	42470060 	.word	0x42470060

08004e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e0cc      	b.n	8004ffa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e60:	4b68      	ldr	r3, [pc, #416]	; (8005004 <HAL_RCC_ClockConfig+0x1b8>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d90c      	bls.n	8004e88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e6e:	4b65      	ldr	r3, [pc, #404]	; (8005004 <HAL_RCC_ClockConfig+0x1b8>)
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	b2d2      	uxtb	r2, r2
 8004e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e76:	4b63      	ldr	r3, [pc, #396]	; (8005004 <HAL_RCC_ClockConfig+0x1b8>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d001      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e0b8      	b.n	8004ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d020      	beq.n	8004ed6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0304 	and.w	r3, r3, #4
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d005      	beq.n	8004eac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ea0:	4b59      	ldr	r3, [pc, #356]	; (8005008 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	4a58      	ldr	r2, [pc, #352]	; (8005008 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004eaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0308 	and.w	r3, r3, #8
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004eb8:	4b53      	ldr	r3, [pc, #332]	; (8005008 <HAL_RCC_ClockConfig+0x1bc>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	4a52      	ldr	r2, [pc, #328]	; (8005008 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ec2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ec4:	4b50      	ldr	r3, [pc, #320]	; (8005008 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	494d      	ldr	r1, [pc, #308]	; (8005008 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d044      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d107      	bne.n	8004efa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eea:	4b47      	ldr	r3, [pc, #284]	; (8005008 <HAL_RCC_ClockConfig+0x1bc>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d119      	bne.n	8004f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e07f      	b.n	8004ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d003      	beq.n	8004f0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d107      	bne.n	8004f1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f0a:	4b3f      	ldr	r3, [pc, #252]	; (8005008 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d109      	bne.n	8004f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e06f      	b.n	8004ffa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f1a:	4b3b      	ldr	r3, [pc, #236]	; (8005008 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e067      	b.n	8004ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f2a:	4b37      	ldr	r3, [pc, #220]	; (8005008 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f023 0203 	bic.w	r2, r3, #3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	4934      	ldr	r1, [pc, #208]	; (8005008 <HAL_RCC_ClockConfig+0x1bc>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f3c:	f7fd f8d8 	bl	80020f0 <HAL_GetTick>
 8004f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f42:	e00a      	b.n	8004f5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f44:	f7fd f8d4 	bl	80020f0 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e04f      	b.n	8004ffa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f5a:	4b2b      	ldr	r3, [pc, #172]	; (8005008 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 020c 	and.w	r2, r3, #12
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d1eb      	bne.n	8004f44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f6c:	4b25      	ldr	r3, [pc, #148]	; (8005004 <HAL_RCC_ClockConfig+0x1b8>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d20c      	bcs.n	8004f94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f7a:	4b22      	ldr	r3, [pc, #136]	; (8005004 <HAL_RCC_ClockConfig+0x1b8>)
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	b2d2      	uxtb	r2, r2
 8004f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f82:	4b20      	ldr	r3, [pc, #128]	; (8005004 <HAL_RCC_ClockConfig+0x1b8>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d001      	beq.n	8004f94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e032      	b.n	8004ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d008      	beq.n	8004fb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fa0:	4b19      	ldr	r3, [pc, #100]	; (8005008 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	4916      	ldr	r1, [pc, #88]	; (8005008 <HAL_RCC_ClockConfig+0x1bc>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0308 	and.w	r3, r3, #8
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d009      	beq.n	8004fd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fbe:	4b12      	ldr	r3, [pc, #72]	; (8005008 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	00db      	lsls	r3, r3, #3
 8004fcc:	490e      	ldr	r1, [pc, #56]	; (8005008 <HAL_RCC_ClockConfig+0x1bc>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fd2:	f000 f821 	bl	8005018 <HAL_RCC_GetSysClockFreq>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	4b0b      	ldr	r3, [pc, #44]	; (8005008 <HAL_RCC_ClockConfig+0x1bc>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	091b      	lsrs	r3, r3, #4
 8004fde:	f003 030f 	and.w	r3, r3, #15
 8004fe2:	490a      	ldr	r1, [pc, #40]	; (800500c <HAL_RCC_ClockConfig+0x1c0>)
 8004fe4:	5ccb      	ldrb	r3, [r1, r3]
 8004fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8004fea:	4a09      	ldr	r2, [pc, #36]	; (8005010 <HAL_RCC_ClockConfig+0x1c4>)
 8004fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fee:	4b09      	ldr	r3, [pc, #36]	; (8005014 <HAL_RCC_ClockConfig+0x1c8>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fd f838 	bl	8002068 <HAL_InitTick>

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40023c00 	.word	0x40023c00
 8005008:	40023800 	.word	0x40023800
 800500c:	0800ce98 	.word	0x0800ce98
 8005010:	20000010 	.word	0x20000010
 8005014:	20000014 	.word	0x20000014

08005018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005018:	b5b0      	push	{r4, r5, r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800501e:	2100      	movs	r1, #0
 8005020:	6079      	str	r1, [r7, #4]
 8005022:	2100      	movs	r1, #0
 8005024:	60f9      	str	r1, [r7, #12]
 8005026:	2100      	movs	r1, #0
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800502a:	2100      	movs	r1, #0
 800502c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800502e:	4952      	ldr	r1, [pc, #328]	; (8005178 <HAL_RCC_GetSysClockFreq+0x160>)
 8005030:	6889      	ldr	r1, [r1, #8]
 8005032:	f001 010c 	and.w	r1, r1, #12
 8005036:	2908      	cmp	r1, #8
 8005038:	d00d      	beq.n	8005056 <HAL_RCC_GetSysClockFreq+0x3e>
 800503a:	2908      	cmp	r1, #8
 800503c:	f200 8094 	bhi.w	8005168 <HAL_RCC_GetSysClockFreq+0x150>
 8005040:	2900      	cmp	r1, #0
 8005042:	d002      	beq.n	800504a <HAL_RCC_GetSysClockFreq+0x32>
 8005044:	2904      	cmp	r1, #4
 8005046:	d003      	beq.n	8005050 <HAL_RCC_GetSysClockFreq+0x38>
 8005048:	e08e      	b.n	8005168 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800504a:	4b4c      	ldr	r3, [pc, #304]	; (800517c <HAL_RCC_GetSysClockFreq+0x164>)
 800504c:	60bb      	str	r3, [r7, #8]
       break;
 800504e:	e08e      	b.n	800516e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005050:	4b4b      	ldr	r3, [pc, #300]	; (8005180 <HAL_RCC_GetSysClockFreq+0x168>)
 8005052:	60bb      	str	r3, [r7, #8]
      break;
 8005054:	e08b      	b.n	800516e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005056:	4948      	ldr	r1, [pc, #288]	; (8005178 <HAL_RCC_GetSysClockFreq+0x160>)
 8005058:	6849      	ldr	r1, [r1, #4]
 800505a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800505e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005060:	4945      	ldr	r1, [pc, #276]	; (8005178 <HAL_RCC_GetSysClockFreq+0x160>)
 8005062:	6849      	ldr	r1, [r1, #4]
 8005064:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005068:	2900      	cmp	r1, #0
 800506a:	d024      	beq.n	80050b6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800506c:	4942      	ldr	r1, [pc, #264]	; (8005178 <HAL_RCC_GetSysClockFreq+0x160>)
 800506e:	6849      	ldr	r1, [r1, #4]
 8005070:	0989      	lsrs	r1, r1, #6
 8005072:	4608      	mov	r0, r1
 8005074:	f04f 0100 	mov.w	r1, #0
 8005078:	f240 14ff 	movw	r4, #511	; 0x1ff
 800507c:	f04f 0500 	mov.w	r5, #0
 8005080:	ea00 0204 	and.w	r2, r0, r4
 8005084:	ea01 0305 	and.w	r3, r1, r5
 8005088:	493d      	ldr	r1, [pc, #244]	; (8005180 <HAL_RCC_GetSysClockFreq+0x168>)
 800508a:	fb01 f003 	mul.w	r0, r1, r3
 800508e:	2100      	movs	r1, #0
 8005090:	fb01 f102 	mul.w	r1, r1, r2
 8005094:	1844      	adds	r4, r0, r1
 8005096:	493a      	ldr	r1, [pc, #232]	; (8005180 <HAL_RCC_GetSysClockFreq+0x168>)
 8005098:	fba2 0101 	umull	r0, r1, r2, r1
 800509c:	1863      	adds	r3, r4, r1
 800509e:	4619      	mov	r1, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	461a      	mov	r2, r3
 80050a4:	f04f 0300 	mov.w	r3, #0
 80050a8:	f7fb fdd8 	bl	8000c5c <__aeabi_uldivmod>
 80050ac:	4602      	mov	r2, r0
 80050ae:	460b      	mov	r3, r1
 80050b0:	4613      	mov	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	e04a      	b.n	800514c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050b6:	4b30      	ldr	r3, [pc, #192]	; (8005178 <HAL_RCC_GetSysClockFreq+0x160>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	099b      	lsrs	r3, r3, #6
 80050bc:	461a      	mov	r2, r3
 80050be:	f04f 0300 	mov.w	r3, #0
 80050c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80050c6:	f04f 0100 	mov.w	r1, #0
 80050ca:	ea02 0400 	and.w	r4, r2, r0
 80050ce:	ea03 0501 	and.w	r5, r3, r1
 80050d2:	4620      	mov	r0, r4
 80050d4:	4629      	mov	r1, r5
 80050d6:	f04f 0200 	mov.w	r2, #0
 80050da:	f04f 0300 	mov.w	r3, #0
 80050de:	014b      	lsls	r3, r1, #5
 80050e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80050e4:	0142      	lsls	r2, r0, #5
 80050e6:	4610      	mov	r0, r2
 80050e8:	4619      	mov	r1, r3
 80050ea:	1b00      	subs	r0, r0, r4
 80050ec:	eb61 0105 	sbc.w	r1, r1, r5
 80050f0:	f04f 0200 	mov.w	r2, #0
 80050f4:	f04f 0300 	mov.w	r3, #0
 80050f8:	018b      	lsls	r3, r1, #6
 80050fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80050fe:	0182      	lsls	r2, r0, #6
 8005100:	1a12      	subs	r2, r2, r0
 8005102:	eb63 0301 	sbc.w	r3, r3, r1
 8005106:	f04f 0000 	mov.w	r0, #0
 800510a:	f04f 0100 	mov.w	r1, #0
 800510e:	00d9      	lsls	r1, r3, #3
 8005110:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005114:	00d0      	lsls	r0, r2, #3
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	1912      	adds	r2, r2, r4
 800511c:	eb45 0303 	adc.w	r3, r5, r3
 8005120:	f04f 0000 	mov.w	r0, #0
 8005124:	f04f 0100 	mov.w	r1, #0
 8005128:	0299      	lsls	r1, r3, #10
 800512a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800512e:	0290      	lsls	r0, r2, #10
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	4610      	mov	r0, r2
 8005136:	4619      	mov	r1, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	461a      	mov	r2, r3
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	f7fb fd8c 	bl	8000c5c <__aeabi_uldivmod>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4613      	mov	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800514c:	4b0a      	ldr	r3, [pc, #40]	; (8005178 <HAL_RCC_GetSysClockFreq+0x160>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	0c1b      	lsrs	r3, r3, #16
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	3301      	adds	r3, #1
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	fbb2 f3f3 	udiv	r3, r2, r3
 8005164:	60bb      	str	r3, [r7, #8]
      break;
 8005166:	e002      	b.n	800516e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005168:	4b04      	ldr	r3, [pc, #16]	; (800517c <HAL_RCC_GetSysClockFreq+0x164>)
 800516a:	60bb      	str	r3, [r7, #8]
      break;
 800516c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800516e:	68bb      	ldr	r3, [r7, #8]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bdb0      	pop	{r4, r5, r7, pc}
 8005178:	40023800 	.word	0x40023800
 800517c:	00f42400 	.word	0x00f42400
 8005180:	017d7840 	.word	0x017d7840

08005184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005188:	4b03      	ldr	r3, [pc, #12]	; (8005198 <HAL_RCC_GetHCLKFreq+0x14>)
 800518a:	681b      	ldr	r3, [r3, #0]
}
 800518c:	4618      	mov	r0, r3
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	20000010 	.word	0x20000010

0800519c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051a0:	f7ff fff0 	bl	8005184 <HAL_RCC_GetHCLKFreq>
 80051a4:	4602      	mov	r2, r0
 80051a6:	4b05      	ldr	r3, [pc, #20]	; (80051bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	0a9b      	lsrs	r3, r3, #10
 80051ac:	f003 0307 	and.w	r3, r3, #7
 80051b0:	4903      	ldr	r1, [pc, #12]	; (80051c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051b2:	5ccb      	ldrb	r3, [r1, r3]
 80051b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	40023800 	.word	0x40023800
 80051c0:	0800cea8 	.word	0x0800cea8

080051c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e041      	b.n	800525a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d106      	bne.n	80051f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7fc fddc 	bl	8001da8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3304      	adds	r3, #4
 8005200:	4619      	mov	r1, r3
 8005202:	4610      	mov	r0, r2
 8005204:	f000 fd6a 	bl	8005cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b082      	sub	sp, #8
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e041      	b.n	80052f8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	d106      	bne.n	800528e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f839 	bl	8005300 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2202      	movs	r2, #2
 8005292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	3304      	adds	r3, #4
 800529e:	4619      	mov	r1, r3
 80052a0:	4610      	mov	r0, r2
 80052a2:	f000 fd1b 	bl	8005cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
 8005320:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005322:	2300      	movs	r3, #0
 8005324:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d109      	bne.n	8005340 <HAL_TIM_PWM_Start_DMA+0x2c>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	bf0c      	ite	eq
 8005338:	2301      	moveq	r3, #1
 800533a:	2300      	movne	r3, #0
 800533c:	b2db      	uxtb	r3, r3
 800533e:	e022      	b.n	8005386 <HAL_TIM_PWM_Start_DMA+0x72>
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b04      	cmp	r3, #4
 8005344:	d109      	bne.n	800535a <HAL_TIM_PWM_Start_DMA+0x46>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	bf0c      	ite	eq
 8005352:	2301      	moveq	r3, #1
 8005354:	2300      	movne	r3, #0
 8005356:	b2db      	uxtb	r3, r3
 8005358:	e015      	b.n	8005386 <HAL_TIM_PWM_Start_DMA+0x72>
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2b08      	cmp	r3, #8
 800535e:	d109      	bne.n	8005374 <HAL_TIM_PWM_Start_DMA+0x60>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b02      	cmp	r3, #2
 800536a:	bf0c      	ite	eq
 800536c:	2301      	moveq	r3, #1
 800536e:	2300      	movne	r3, #0
 8005370:	b2db      	uxtb	r3, r3
 8005372:	e008      	b.n	8005386 <HAL_TIM_PWM_Start_DMA+0x72>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	bf0c      	ite	eq
 8005380:	2301      	moveq	r3, #1
 8005382:	2300      	movne	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800538a:	2302      	movs	r3, #2
 800538c:	e15d      	b.n	800564a <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d109      	bne.n	80053a8 <HAL_TIM_PWM_Start_DMA+0x94>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b01      	cmp	r3, #1
 800539e:	bf0c      	ite	eq
 80053a0:	2301      	moveq	r3, #1
 80053a2:	2300      	movne	r3, #0
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	e022      	b.n	80053ee <HAL_TIM_PWM_Start_DMA+0xda>
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d109      	bne.n	80053c2 <HAL_TIM_PWM_Start_DMA+0xae>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	bf0c      	ite	eq
 80053ba:	2301      	moveq	r3, #1
 80053bc:	2300      	movne	r3, #0
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	e015      	b.n	80053ee <HAL_TIM_PWM_Start_DMA+0xda>
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d109      	bne.n	80053dc <HAL_TIM_PWM_Start_DMA+0xc8>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	bf0c      	ite	eq
 80053d4:	2301      	moveq	r3, #1
 80053d6:	2300      	movne	r3, #0
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	e008      	b.n	80053ee <HAL_TIM_PWM_Start_DMA+0xda>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	bf0c      	ite	eq
 80053e8:	2301      	moveq	r3, #1
 80053ea:	2300      	movne	r3, #0
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d024      	beq.n	800543c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d104      	bne.n	8005402 <HAL_TIM_PWM_Start_DMA+0xee>
 80053f8:	887b      	ldrh	r3, [r7, #2]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e123      	b.n	800564a <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d104      	bne.n	8005412 <HAL_TIM_PWM_Start_DMA+0xfe>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005410:	e016      	b.n	8005440 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	2b04      	cmp	r3, #4
 8005416:	d104      	bne.n	8005422 <HAL_TIM_PWM_Start_DMA+0x10e>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005420:	e00e      	b.n	8005440 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2b08      	cmp	r3, #8
 8005426:	d104      	bne.n	8005432 <HAL_TIM_PWM_Start_DMA+0x11e>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005430:	e006      	b.n	8005440 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2202      	movs	r2, #2
 8005436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800543a:	e001      	b.n	8005440 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e104      	b.n	800564a <HAL_TIM_PWM_Start_DMA+0x336>
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2b0c      	cmp	r3, #12
 8005444:	f200 80ae 	bhi.w	80055a4 <HAL_TIM_PWM_Start_DMA+0x290>
 8005448:	a201      	add	r2, pc, #4	; (adr r2, 8005450 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800544a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544e:	bf00      	nop
 8005450:	08005485 	.word	0x08005485
 8005454:	080055a5 	.word	0x080055a5
 8005458:	080055a5 	.word	0x080055a5
 800545c:	080055a5 	.word	0x080055a5
 8005460:	080054cd 	.word	0x080054cd
 8005464:	080055a5 	.word	0x080055a5
 8005468:	080055a5 	.word	0x080055a5
 800546c:	080055a5 	.word	0x080055a5
 8005470:	08005515 	.word	0x08005515
 8005474:	080055a5 	.word	0x080055a5
 8005478:	080055a5 	.word	0x080055a5
 800547c:	080055a5 	.word	0x080055a5
 8005480:	0800555d 	.word	0x0800555d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	4a72      	ldr	r2, [pc, #456]	; (8005654 <HAL_TIM_PWM_Start_DMA+0x340>)
 800548a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	4a71      	ldr	r2, [pc, #452]	; (8005658 <HAL_TIM_PWM_Start_DMA+0x344>)
 8005492:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	4a70      	ldr	r2, [pc, #448]	; (800565c <HAL_TIM_PWM_Start_DMA+0x348>)
 800549a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3334      	adds	r3, #52	; 0x34
 80054a8:	461a      	mov	r2, r3
 80054aa:	887b      	ldrh	r3, [r7, #2]
 80054ac:	f7fd f810 	bl	80024d0 <HAL_DMA_Start_IT>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e0c7      	b.n	800564a <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c8:	60da      	str	r2, [r3, #12]
      break;
 80054ca:	e06e      	b.n	80055aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d0:	4a60      	ldr	r2, [pc, #384]	; (8005654 <HAL_TIM_PWM_Start_DMA+0x340>)
 80054d2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d8:	4a5f      	ldr	r2, [pc, #380]	; (8005658 <HAL_TIM_PWM_Start_DMA+0x344>)
 80054da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e0:	4a5e      	ldr	r2, [pc, #376]	; (800565c <HAL_TIM_PWM_Start_DMA+0x348>)
 80054e2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3338      	adds	r3, #56	; 0x38
 80054f0:	461a      	mov	r2, r3
 80054f2:	887b      	ldrh	r3, [r7, #2]
 80054f4:	f7fc ffec 	bl	80024d0 <HAL_DMA_Start_IT>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e0a3      	b.n	800564a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005510:	60da      	str	r2, [r3, #12]
      break;
 8005512:	e04a      	b.n	80055aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005518:	4a4e      	ldr	r2, [pc, #312]	; (8005654 <HAL_TIM_PWM_Start_DMA+0x340>)
 800551a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005520:	4a4d      	ldr	r2, [pc, #308]	; (8005658 <HAL_TIM_PWM_Start_DMA+0x344>)
 8005522:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	4a4c      	ldr	r2, [pc, #304]	; (800565c <HAL_TIM_PWM_Start_DMA+0x348>)
 800552a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005530:	6879      	ldr	r1, [r7, #4]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	333c      	adds	r3, #60	; 0x3c
 8005538:	461a      	mov	r2, r3
 800553a:	887b      	ldrh	r3, [r7, #2]
 800553c:	f7fc ffc8 	bl	80024d0 <HAL_DMA_Start_IT>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e07f      	b.n	800564a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005558:	60da      	str	r2, [r3, #12]
      break;
 800555a:	e026      	b.n	80055aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005560:	4a3c      	ldr	r2, [pc, #240]	; (8005654 <HAL_TIM_PWM_Start_DMA+0x340>)
 8005562:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005568:	4a3b      	ldr	r2, [pc, #236]	; (8005658 <HAL_TIM_PWM_Start_DMA+0x344>)
 800556a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005570:	4a3a      	ldr	r2, [pc, #232]	; (800565c <HAL_TIM_PWM_Start_DMA+0x348>)
 8005572:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005578:	6879      	ldr	r1, [r7, #4]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3340      	adds	r3, #64	; 0x40
 8005580:	461a      	mov	r2, r3
 8005582:	887b      	ldrh	r3, [r7, #2]
 8005584:	f7fc ffa4 	bl	80024d0 <HAL_DMA_Start_IT>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e05b      	b.n	800564a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68da      	ldr	r2, [r3, #12]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055a0:	60da      	str	r2, [r3, #12]
      break;
 80055a2:	e002      	b.n	80055aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	75fb      	strb	r3, [r7, #23]
      break;
 80055a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80055aa:	7dfb      	ldrb	r3, [r7, #23]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d14b      	bne.n	8005648 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2201      	movs	r2, #1
 80055b6:	68b9      	ldr	r1, [r7, #8]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f000 fe35 	bl	8006228 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a27      	ldr	r2, [pc, #156]	; (8005660 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d107      	bne.n	80055d8 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055d6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a20      	ldr	r2, [pc, #128]	; (8005660 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d018      	beq.n	8005614 <HAL_TIM_PWM_Start_DMA+0x300>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ea:	d013      	beq.n	8005614 <HAL_TIM_PWM_Start_DMA+0x300>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a1c      	ldr	r2, [pc, #112]	; (8005664 <HAL_TIM_PWM_Start_DMA+0x350>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d00e      	beq.n	8005614 <HAL_TIM_PWM_Start_DMA+0x300>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a1b      	ldr	r2, [pc, #108]	; (8005668 <HAL_TIM_PWM_Start_DMA+0x354>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d009      	beq.n	8005614 <HAL_TIM_PWM_Start_DMA+0x300>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a19      	ldr	r2, [pc, #100]	; (800566c <HAL_TIM_PWM_Start_DMA+0x358>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d004      	beq.n	8005614 <HAL_TIM_PWM_Start_DMA+0x300>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a18      	ldr	r2, [pc, #96]	; (8005670 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d111      	bne.n	8005638 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 0307 	and.w	r3, r3, #7
 800561e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	2b06      	cmp	r3, #6
 8005624:	d010      	beq.n	8005648 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f042 0201 	orr.w	r2, r2, #1
 8005634:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005636:	e007      	b.n	8005648 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0201 	orr.w	r2, r2, #1
 8005646:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005648:	7dfb      	ldrb	r3, [r7, #23]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	08005bcd 	.word	0x08005bcd
 8005658:	08005c75 	.word	0x08005c75
 800565c:	08005b3b 	.word	0x08005b3b
 8005660:	40010000 	.word	0x40010000
 8005664:	40000400 	.word	0x40000400
 8005668:	40000800 	.word	0x40000800
 800566c:	40000c00 	.word	0x40000c00
 8005670:	40014000 	.word	0x40014000

08005674 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	73fb      	strb	r3, [r7, #15]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b0c      	cmp	r3, #12
 8005686:	d855      	bhi.n	8005734 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005688:	a201      	add	r2, pc, #4	; (adr r2, 8005690 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800568a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568e:	bf00      	nop
 8005690:	080056c5 	.word	0x080056c5
 8005694:	08005735 	.word	0x08005735
 8005698:	08005735 	.word	0x08005735
 800569c:	08005735 	.word	0x08005735
 80056a0:	080056e1 	.word	0x080056e1
 80056a4:	08005735 	.word	0x08005735
 80056a8:	08005735 	.word	0x08005735
 80056ac:	08005735 	.word	0x08005735
 80056b0:	080056fd 	.word	0x080056fd
 80056b4:	08005735 	.word	0x08005735
 80056b8:	08005735 	.word	0x08005735
 80056bc:	08005735 	.word	0x08005735
 80056c0:	08005719 	.word	0x08005719
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68da      	ldr	r2, [r3, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80056d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	4618      	mov	r0, r3
 80056da:	f7fc ff51 	bl	8002580 <HAL_DMA_Abort_IT>
      break;
 80056de:	e02c      	b.n	800573a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7fc ff43 	bl	8002580 <HAL_DMA_Abort_IT>
      break;
 80056fa:	e01e      	b.n	800573a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68da      	ldr	r2, [r3, #12]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800570a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	4618      	mov	r0, r3
 8005712:	f7fc ff35 	bl	8002580 <HAL_DMA_Abort_IT>
      break;
 8005716:	e010      	b.n	800573a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005726:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	4618      	mov	r0, r3
 800572e:	f7fc ff27 	bl	8002580 <HAL_DMA_Abort_IT>
      break;
 8005732:	e002      	b.n	800573a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	73fb      	strb	r3, [r7, #15]
      break;
 8005738:	bf00      	nop
  }

  if (status == HAL_OK)
 800573a:	7bfb      	ldrb	r3, [r7, #15]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d157      	bne.n	80057f0 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2200      	movs	r2, #0
 8005746:	6839      	ldr	r1, [r7, #0]
 8005748:	4618      	mov	r0, r3
 800574a:	f000 fd6d 	bl	8006228 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a2a      	ldr	r2, [pc, #168]	; (80057fc <HAL_TIM_PWM_Stop_DMA+0x188>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d117      	bne.n	8005788 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6a1a      	ldr	r2, [r3, #32]
 800575e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005762:	4013      	ands	r3, r2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10f      	bne.n	8005788 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6a1a      	ldr	r2, [r3, #32]
 800576e:	f240 4344 	movw	r3, #1092	; 0x444
 8005772:	4013      	ands	r3, r2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d107      	bne.n	8005788 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005786:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6a1a      	ldr	r2, [r3, #32]
 800578e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005792:	4013      	ands	r3, r2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10f      	bne.n	80057b8 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6a1a      	ldr	r2, [r3, #32]
 800579e:	f240 4344 	movw	r3, #1092	; 0x444
 80057a2:	4013      	ands	r3, r2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d107      	bne.n	80057b8 <HAL_TIM_PWM_Stop_DMA+0x144>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0201 	bic.w	r2, r2, #1
 80057b6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d104      	bne.n	80057c8 <HAL_TIM_PWM_Stop_DMA+0x154>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057c6:	e013      	b.n	80057f0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d104      	bne.n	80057d8 <HAL_TIM_PWM_Stop_DMA+0x164>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057d6:	e00b      	b.n	80057f0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	2b08      	cmp	r3, #8
 80057dc:	d104      	bne.n	80057e8 <HAL_TIM_PWM_Stop_DMA+0x174>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057e6:	e003      	b.n	80057f0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	40010000 	.word	0x40010000

08005800 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005816:	2b01      	cmp	r3, #1
 8005818:	d101      	bne.n	800581e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800581a:	2302      	movs	r3, #2
 800581c:	e0ae      	b.n	800597c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b0c      	cmp	r3, #12
 800582a:	f200 809f 	bhi.w	800596c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800582e:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005834:	08005869 	.word	0x08005869
 8005838:	0800596d 	.word	0x0800596d
 800583c:	0800596d 	.word	0x0800596d
 8005840:	0800596d 	.word	0x0800596d
 8005844:	080058a9 	.word	0x080058a9
 8005848:	0800596d 	.word	0x0800596d
 800584c:	0800596d 	.word	0x0800596d
 8005850:	0800596d 	.word	0x0800596d
 8005854:	080058eb 	.word	0x080058eb
 8005858:	0800596d 	.word	0x0800596d
 800585c:	0800596d 	.word	0x0800596d
 8005860:	0800596d 	.word	0x0800596d
 8005864:	0800592b 	.word	0x0800592b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68b9      	ldr	r1, [r7, #8]
 800586e:	4618      	mov	r0, r3
 8005870:	f000 fab4 	bl	8005ddc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699a      	ldr	r2, [r3, #24]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0208 	orr.w	r2, r2, #8
 8005882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699a      	ldr	r2, [r3, #24]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0204 	bic.w	r2, r2, #4
 8005892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6999      	ldr	r1, [r3, #24]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	691a      	ldr	r2, [r3, #16]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	619a      	str	r2, [r3, #24]
      break;
 80058a6:	e064      	b.n	8005972 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68b9      	ldr	r1, [r7, #8]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fafa 	bl	8005ea8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	699a      	ldr	r2, [r3, #24]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699a      	ldr	r2, [r3, #24]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6999      	ldr	r1, [r3, #24]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	021a      	lsls	r2, r3, #8
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	619a      	str	r2, [r3, #24]
      break;
 80058e8:	e043      	b.n	8005972 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68b9      	ldr	r1, [r7, #8]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 fb45 	bl	8005f80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69da      	ldr	r2, [r3, #28]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f042 0208 	orr.w	r2, r2, #8
 8005904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	69da      	ldr	r2, [r3, #28]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 0204 	bic.w	r2, r2, #4
 8005914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	69d9      	ldr	r1, [r3, #28]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	691a      	ldr	r2, [r3, #16]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	430a      	orrs	r2, r1
 8005926:	61da      	str	r2, [r3, #28]
      break;
 8005928:	e023      	b.n	8005972 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68b9      	ldr	r1, [r7, #8]
 8005930:	4618      	mov	r0, r3
 8005932:	f000 fb8f 	bl	8006054 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	69da      	ldr	r2, [r3, #28]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005944:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	69da      	ldr	r2, [r3, #28]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005954:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	69d9      	ldr	r1, [r3, #28]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	021a      	lsls	r2, r3, #8
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	61da      	str	r2, [r3, #28]
      break;
 800596a:	e002      	b.n	8005972 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	75fb      	strb	r3, [r7, #23]
      break;
 8005970:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800597a:	7dfb      	ldrb	r3, [r7, #23]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3718      	adds	r7, #24
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005998:	2b01      	cmp	r3, #1
 800599a:	d101      	bne.n	80059a0 <HAL_TIM_ConfigClockSource+0x1c>
 800599c:	2302      	movs	r3, #2
 800599e:	e0b4      	b.n	8005b0a <HAL_TIM_ConfigClockSource+0x186>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059d8:	d03e      	beq.n	8005a58 <HAL_TIM_ConfigClockSource+0xd4>
 80059da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059de:	f200 8087 	bhi.w	8005af0 <HAL_TIM_ConfigClockSource+0x16c>
 80059e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059e6:	f000 8086 	beq.w	8005af6 <HAL_TIM_ConfigClockSource+0x172>
 80059ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ee:	d87f      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x16c>
 80059f0:	2b70      	cmp	r3, #112	; 0x70
 80059f2:	d01a      	beq.n	8005a2a <HAL_TIM_ConfigClockSource+0xa6>
 80059f4:	2b70      	cmp	r3, #112	; 0x70
 80059f6:	d87b      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x16c>
 80059f8:	2b60      	cmp	r3, #96	; 0x60
 80059fa:	d050      	beq.n	8005a9e <HAL_TIM_ConfigClockSource+0x11a>
 80059fc:	2b60      	cmp	r3, #96	; 0x60
 80059fe:	d877      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x16c>
 8005a00:	2b50      	cmp	r3, #80	; 0x50
 8005a02:	d03c      	beq.n	8005a7e <HAL_TIM_ConfigClockSource+0xfa>
 8005a04:	2b50      	cmp	r3, #80	; 0x50
 8005a06:	d873      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x16c>
 8005a08:	2b40      	cmp	r3, #64	; 0x40
 8005a0a:	d058      	beq.n	8005abe <HAL_TIM_ConfigClockSource+0x13a>
 8005a0c:	2b40      	cmp	r3, #64	; 0x40
 8005a0e:	d86f      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x16c>
 8005a10:	2b30      	cmp	r3, #48	; 0x30
 8005a12:	d064      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x15a>
 8005a14:	2b30      	cmp	r3, #48	; 0x30
 8005a16:	d86b      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x16c>
 8005a18:	2b20      	cmp	r3, #32
 8005a1a:	d060      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x15a>
 8005a1c:	2b20      	cmp	r3, #32
 8005a1e:	d867      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x16c>
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d05c      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x15a>
 8005a24:	2b10      	cmp	r3, #16
 8005a26:	d05a      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x15a>
 8005a28:	e062      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6818      	ldr	r0, [r3, #0]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	6899      	ldr	r1, [r3, #8]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f000 fbd5 	bl	80061e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	609a      	str	r2, [r3, #8]
      break;
 8005a56:	e04f      	b.n	8005af8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6818      	ldr	r0, [r3, #0]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	6899      	ldr	r1, [r3, #8]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f000 fbbe 	bl	80061e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689a      	ldr	r2, [r3, #8]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a7a:	609a      	str	r2, [r3, #8]
      break;
 8005a7c:	e03c      	b.n	8005af8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6818      	ldr	r0, [r3, #0]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	6859      	ldr	r1, [r3, #4]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f000 fb32 	bl	80060f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2150      	movs	r1, #80	; 0x50
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fb8b 	bl	80061b2 <TIM_ITRx_SetConfig>
      break;
 8005a9c:	e02c      	b.n	8005af8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	6859      	ldr	r1, [r3, #4]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f000 fb51 	bl	8006152 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2160      	movs	r1, #96	; 0x60
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 fb7b 	bl	80061b2 <TIM_ITRx_SetConfig>
      break;
 8005abc:	e01c      	b.n	8005af8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6818      	ldr	r0, [r3, #0]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	6859      	ldr	r1, [r3, #4]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	461a      	mov	r2, r3
 8005acc:	f000 fb12 	bl	80060f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2140      	movs	r1, #64	; 0x40
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fb6b 	bl	80061b2 <TIM_ITRx_SetConfig>
      break;
 8005adc:	e00c      	b.n	8005af8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	4610      	mov	r0, r2
 8005aea:	f000 fb62 	bl	80061b2 <TIM_ITRx_SetConfig>
      break;
 8005aee:	e003      	b.n	8005af8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	73fb      	strb	r3, [r7, #15]
      break;
 8005af4:	e000      	b.n	8005af8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005af6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b083      	sub	sp, #12
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005b2e:	bf00      	nop
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b46:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d107      	bne.n	8005b62 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2201      	movs	r2, #1
 8005b56:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b60:	e02a      	b.n	8005bb8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d107      	bne.n	8005b7c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b7a:	e01d      	b.n	8005bb8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d107      	bne.n	8005b96 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2204      	movs	r2, #4
 8005b8a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b94:	e010      	b.n	8005bb8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d107      	bne.n	8005bb0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2208      	movs	r2, #8
 8005ba4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bae:	e003      	b.n	8005bb8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f7ff ffb4 	bl	8005b26 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	771a      	strb	r2, [r3, #28]
}
 8005bc4:	bf00      	nop
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d10b      	bne.n	8005bfc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2201      	movs	r2, #1
 8005be8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d136      	bne.n	8005c60 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bfa:	e031      	b.n	8005c60 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d10b      	bne.n	8005c1e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2202      	movs	r2, #2
 8005c0a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d125      	bne.n	8005c60 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c1c:	e020      	b.n	8005c60 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d10b      	bne.n	8005c40 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2204      	movs	r2, #4
 8005c2c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d114      	bne.n	8005c60 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c3e:	e00f      	b.n	8005c60 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d10a      	bne.n	8005c60 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2208      	movs	r2, #8
 8005c4e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	69db      	ldr	r3, [r3, #28]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d103      	bne.n	8005c60 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f7fb fb0d 	bl	8001280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	771a      	strb	r2, [r3, #28]
}
 8005c6c:	bf00      	nop
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c80:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d103      	bne.n	8005c94 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	771a      	strb	r2, [r3, #28]
 8005c92:	e019      	b.n	8005cc8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d103      	bne.n	8005ca6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	771a      	strb	r2, [r3, #28]
 8005ca4:	e010      	b.n	8005cc8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d103      	bne.n	8005cb8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2204      	movs	r2, #4
 8005cb4:	771a      	strb	r2, [r3, #28]
 8005cb6:	e007      	b.n	8005cc8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d102      	bne.n	8005cc8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2208      	movs	r2, #8
 8005cc6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f7ff ff22 	bl	8005b12 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	771a      	strb	r2, [r3, #28]
}
 8005cd4:	bf00      	nop
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a34      	ldr	r2, [pc, #208]	; (8005dc0 <TIM_Base_SetConfig+0xe4>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d00f      	beq.n	8005d14 <TIM_Base_SetConfig+0x38>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cfa:	d00b      	beq.n	8005d14 <TIM_Base_SetConfig+0x38>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a31      	ldr	r2, [pc, #196]	; (8005dc4 <TIM_Base_SetConfig+0xe8>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d007      	beq.n	8005d14 <TIM_Base_SetConfig+0x38>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a30      	ldr	r2, [pc, #192]	; (8005dc8 <TIM_Base_SetConfig+0xec>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d003      	beq.n	8005d14 <TIM_Base_SetConfig+0x38>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a2f      	ldr	r2, [pc, #188]	; (8005dcc <TIM_Base_SetConfig+0xf0>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d108      	bne.n	8005d26 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a25      	ldr	r2, [pc, #148]	; (8005dc0 <TIM_Base_SetConfig+0xe4>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d01b      	beq.n	8005d66 <TIM_Base_SetConfig+0x8a>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d34:	d017      	beq.n	8005d66 <TIM_Base_SetConfig+0x8a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a22      	ldr	r2, [pc, #136]	; (8005dc4 <TIM_Base_SetConfig+0xe8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d013      	beq.n	8005d66 <TIM_Base_SetConfig+0x8a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a21      	ldr	r2, [pc, #132]	; (8005dc8 <TIM_Base_SetConfig+0xec>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d00f      	beq.n	8005d66 <TIM_Base_SetConfig+0x8a>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a20      	ldr	r2, [pc, #128]	; (8005dcc <TIM_Base_SetConfig+0xf0>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00b      	beq.n	8005d66 <TIM_Base_SetConfig+0x8a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a1f      	ldr	r2, [pc, #124]	; (8005dd0 <TIM_Base_SetConfig+0xf4>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d007      	beq.n	8005d66 <TIM_Base_SetConfig+0x8a>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a1e      	ldr	r2, [pc, #120]	; (8005dd4 <TIM_Base_SetConfig+0xf8>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d003      	beq.n	8005d66 <TIM_Base_SetConfig+0x8a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a1d      	ldr	r2, [pc, #116]	; (8005dd8 <TIM_Base_SetConfig+0xfc>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d108      	bne.n	8005d78 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a08      	ldr	r2, [pc, #32]	; (8005dc0 <TIM_Base_SetConfig+0xe4>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d103      	bne.n	8005dac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	691a      	ldr	r2, [r3, #16]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	615a      	str	r2, [r3, #20]
}
 8005db2:	bf00      	nop
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	40010000 	.word	0x40010000
 8005dc4:	40000400 	.word	0x40000400
 8005dc8:	40000800 	.word	0x40000800
 8005dcc:	40000c00 	.word	0x40000c00
 8005dd0:	40014000 	.word	0x40014000
 8005dd4:	40014400 	.word	0x40014400
 8005dd8:	40014800 	.word	0x40014800

08005ddc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	f023 0201 	bic.w	r2, r3, #1
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 0303 	bic.w	r3, r3, #3
 8005e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f023 0302 	bic.w	r3, r3, #2
 8005e24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a1c      	ldr	r2, [pc, #112]	; (8005ea4 <TIM_OC1_SetConfig+0xc8>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d10c      	bne.n	8005e52 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f023 0308 	bic.w	r3, r3, #8
 8005e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f023 0304 	bic.w	r3, r3, #4
 8005e50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a13      	ldr	r2, [pc, #76]	; (8005ea4 <TIM_OC1_SetConfig+0xc8>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d111      	bne.n	8005e7e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	621a      	str	r2, [r3, #32]
}
 8005e98:	bf00      	nop
 8005e9a:	371c      	adds	r7, #28
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	40010000 	.word	0x40010000

08005ea8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	f023 0210 	bic.w	r2, r3, #16
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	021b      	lsls	r3, r3, #8
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	f023 0320 	bic.w	r3, r3, #32
 8005ef2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	011b      	lsls	r3, r3, #4
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a1e      	ldr	r2, [pc, #120]	; (8005f7c <TIM_OC2_SetConfig+0xd4>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d10d      	bne.n	8005f24 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	011b      	lsls	r3, r3, #4
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a15      	ldr	r2, [pc, #84]	; (8005f7c <TIM_OC2_SetConfig+0xd4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d113      	bne.n	8005f54 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	621a      	str	r2, [r3, #32]
}
 8005f6e:	bf00      	nop
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	40010000 	.word	0x40010000

08005f80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 0303 	bic.w	r3, r3, #3
 8005fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	021b      	lsls	r3, r3, #8
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a1d      	ldr	r2, [pc, #116]	; (8006050 <TIM_OC3_SetConfig+0xd0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d10d      	bne.n	8005ffa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fe4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	021b      	lsls	r3, r3, #8
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ff8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a14      	ldr	r2, [pc, #80]	; (8006050 <TIM_OC3_SetConfig+0xd0>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d113      	bne.n	800602a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	4313      	orrs	r3, r2
 800601c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	011b      	lsls	r3, r3, #4
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	4313      	orrs	r3, r2
 8006028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	621a      	str	r2, [r3, #32]
}
 8006044:	bf00      	nop
 8006046:	371c      	adds	r7, #28
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	40010000 	.word	0x40010000

08006054 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800608a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	021b      	lsls	r3, r3, #8
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	4313      	orrs	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800609e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	031b      	lsls	r3, r3, #12
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a10      	ldr	r2, [pc, #64]	; (80060f0 <TIM_OC4_SetConfig+0x9c>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d109      	bne.n	80060c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	019b      	lsls	r3, r3, #6
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	621a      	str	r2, [r3, #32]
}
 80060e2:	bf00      	nop
 80060e4:	371c      	adds	r7, #28
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	40010000 	.word	0x40010000

080060f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	f023 0201 	bic.w	r2, r3, #1
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800611e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	011b      	lsls	r3, r3, #4
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4313      	orrs	r3, r2
 8006128:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f023 030a 	bic.w	r3, r3, #10
 8006130:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	4313      	orrs	r3, r2
 8006138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	621a      	str	r2, [r3, #32]
}
 8006146:	bf00      	nop
 8006148:	371c      	adds	r7, #28
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006152:	b480      	push	{r7}
 8006154:	b087      	sub	sp, #28
 8006156:	af00      	add	r7, sp, #0
 8006158:	60f8      	str	r0, [r7, #12]
 800615a:	60b9      	str	r1, [r7, #8]
 800615c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	f023 0210 	bic.w	r2, r3, #16
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800617c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	031b      	lsls	r3, r3, #12
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4313      	orrs	r3, r2
 8006186:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800618e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	011b      	lsls	r3, r3, #4
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	4313      	orrs	r3, r2
 8006198:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	621a      	str	r2, [r3, #32]
}
 80061a6:	bf00      	nop
 80061a8:	371c      	adds	r7, #28
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b085      	sub	sp, #20
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	f043 0307 	orr.w	r3, r3, #7
 80061d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	609a      	str	r2, [r3, #8]
}
 80061dc:	bf00      	nop
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
 80061f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006202:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	021a      	lsls	r2, r3, #8
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	431a      	orrs	r2, r3
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	4313      	orrs	r3, r2
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	4313      	orrs	r3, r2
 8006214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	609a      	str	r2, [r3, #8]
}
 800621c:	bf00      	nop
 800621e:	371c      	adds	r7, #28
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	f003 031f 	and.w	r3, r3, #31
 800623a:	2201      	movs	r2, #1
 800623c:	fa02 f303 	lsl.w	r3, r2, r3
 8006240:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6a1a      	ldr	r2, [r3, #32]
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	43db      	mvns	r3, r3
 800624a:	401a      	ands	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6a1a      	ldr	r2, [r3, #32]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	f003 031f 	and.w	r3, r3, #31
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	fa01 f303 	lsl.w	r3, r1, r3
 8006260:	431a      	orrs	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	621a      	str	r2, [r3, #32]
}
 8006266:	bf00      	nop
 8006268:	371c      	adds	r7, #28
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
	...

08006274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006284:	2b01      	cmp	r3, #1
 8006286:	d101      	bne.n	800628c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006288:	2302      	movs	r3, #2
 800628a:	e050      	b.n	800632e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a1c      	ldr	r2, [pc, #112]	; (800633c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d018      	beq.n	8006302 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062d8:	d013      	beq.n	8006302 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a18      	ldr	r2, [pc, #96]	; (8006340 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d00e      	beq.n	8006302 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a16      	ldr	r2, [pc, #88]	; (8006344 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d009      	beq.n	8006302 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a15      	ldr	r2, [pc, #84]	; (8006348 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d004      	beq.n	8006302 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a13      	ldr	r2, [pc, #76]	; (800634c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d10c      	bne.n	800631c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006308:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	4313      	orrs	r3, r2
 8006312:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	40010000 	.word	0x40010000
 8006340:	40000400 	.word	0x40000400
 8006344:	40000800 	.word	0x40000800
 8006348:	40000c00 	.word	0x40000c00
 800634c:	40014000 	.word	0x40014000

08006350 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800635a:	2300      	movs	r3, #0
 800635c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006364:	2b01      	cmp	r3, #1
 8006366:	d101      	bne.n	800636c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006368:	2302      	movs	r3, #2
 800636a:	e03d      	b.n	80063e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	4313      	orrs	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	4313      	orrs	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	4313      	orrs	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063f4:	b084      	sub	sp, #16
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b084      	sub	sp, #16
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	f107 001c 	add.w	r0, r7, #28
 8006402:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006408:	2b01      	cmp	r3, #1
 800640a:	d122      	bne.n	8006452 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006410:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006436:	2b01      	cmp	r3, #1
 8006438:	d105      	bne.n	8006446 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f001 fb1c 	bl	8007a84 <USB_CoreReset>
 800644c:	4603      	mov	r3, r0
 800644e:	73fb      	strb	r3, [r7, #15]
 8006450:	e01a      	b.n	8006488 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f001 fb10 	bl	8007a84 <USB_CoreReset>
 8006464:	4603      	mov	r3, r0
 8006466:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800646a:	2b00      	cmp	r3, #0
 800646c:	d106      	bne.n	800647c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006472:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	639a      	str	r2, [r3, #56]	; 0x38
 800647a:	e005      	b.n	8006488 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006480:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648a:	2b01      	cmp	r3, #1
 800648c:	d10b      	bne.n	80064a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f043 0206 	orr.w	r2, r3, #6
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f043 0220 	orr.w	r2, r3, #32
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064b2:	b004      	add	sp, #16
 80064b4:	4770      	bx	lr
	...

080064b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	4613      	mov	r3, r2
 80064c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80064c6:	79fb      	ldrb	r3, [r7, #7]
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d165      	bne.n	8006598 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	4a41      	ldr	r2, [pc, #260]	; (80065d4 <USB_SetTurnaroundTime+0x11c>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d906      	bls.n	80064e2 <USB_SetTurnaroundTime+0x2a>
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4a40      	ldr	r2, [pc, #256]	; (80065d8 <USB_SetTurnaroundTime+0x120>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d202      	bcs.n	80064e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80064dc:	230f      	movs	r3, #15
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	e062      	b.n	80065a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	4a3c      	ldr	r2, [pc, #240]	; (80065d8 <USB_SetTurnaroundTime+0x120>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d306      	bcc.n	80064f8 <USB_SetTurnaroundTime+0x40>
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	4a3b      	ldr	r2, [pc, #236]	; (80065dc <USB_SetTurnaroundTime+0x124>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d202      	bcs.n	80064f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80064f2:	230e      	movs	r3, #14
 80064f4:	617b      	str	r3, [r7, #20]
 80064f6:	e057      	b.n	80065a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	4a38      	ldr	r2, [pc, #224]	; (80065dc <USB_SetTurnaroundTime+0x124>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d306      	bcc.n	800650e <USB_SetTurnaroundTime+0x56>
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	4a37      	ldr	r2, [pc, #220]	; (80065e0 <USB_SetTurnaroundTime+0x128>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d202      	bcs.n	800650e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006508:	230d      	movs	r3, #13
 800650a:	617b      	str	r3, [r7, #20]
 800650c:	e04c      	b.n	80065a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	4a33      	ldr	r2, [pc, #204]	; (80065e0 <USB_SetTurnaroundTime+0x128>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d306      	bcc.n	8006524 <USB_SetTurnaroundTime+0x6c>
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	4a32      	ldr	r2, [pc, #200]	; (80065e4 <USB_SetTurnaroundTime+0x12c>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d802      	bhi.n	8006524 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800651e:	230c      	movs	r3, #12
 8006520:	617b      	str	r3, [r7, #20]
 8006522:	e041      	b.n	80065a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	4a2f      	ldr	r2, [pc, #188]	; (80065e4 <USB_SetTurnaroundTime+0x12c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d906      	bls.n	800653a <USB_SetTurnaroundTime+0x82>
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	4a2e      	ldr	r2, [pc, #184]	; (80065e8 <USB_SetTurnaroundTime+0x130>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d802      	bhi.n	800653a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006534:	230b      	movs	r3, #11
 8006536:	617b      	str	r3, [r7, #20]
 8006538:	e036      	b.n	80065a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	4a2a      	ldr	r2, [pc, #168]	; (80065e8 <USB_SetTurnaroundTime+0x130>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d906      	bls.n	8006550 <USB_SetTurnaroundTime+0x98>
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	4a29      	ldr	r2, [pc, #164]	; (80065ec <USB_SetTurnaroundTime+0x134>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d802      	bhi.n	8006550 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800654a:	230a      	movs	r3, #10
 800654c:	617b      	str	r3, [r7, #20]
 800654e:	e02b      	b.n	80065a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	4a26      	ldr	r2, [pc, #152]	; (80065ec <USB_SetTurnaroundTime+0x134>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d906      	bls.n	8006566 <USB_SetTurnaroundTime+0xae>
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	4a25      	ldr	r2, [pc, #148]	; (80065f0 <USB_SetTurnaroundTime+0x138>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d202      	bcs.n	8006566 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006560:	2309      	movs	r3, #9
 8006562:	617b      	str	r3, [r7, #20]
 8006564:	e020      	b.n	80065a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	4a21      	ldr	r2, [pc, #132]	; (80065f0 <USB_SetTurnaroundTime+0x138>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d306      	bcc.n	800657c <USB_SetTurnaroundTime+0xc4>
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	4a20      	ldr	r2, [pc, #128]	; (80065f4 <USB_SetTurnaroundTime+0x13c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d802      	bhi.n	800657c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006576:	2308      	movs	r3, #8
 8006578:	617b      	str	r3, [r7, #20]
 800657a:	e015      	b.n	80065a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	4a1d      	ldr	r2, [pc, #116]	; (80065f4 <USB_SetTurnaroundTime+0x13c>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d906      	bls.n	8006592 <USB_SetTurnaroundTime+0xda>
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	4a1c      	ldr	r2, [pc, #112]	; (80065f8 <USB_SetTurnaroundTime+0x140>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d202      	bcs.n	8006592 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800658c:	2307      	movs	r3, #7
 800658e:	617b      	str	r3, [r7, #20]
 8006590:	e00a      	b.n	80065a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006592:	2306      	movs	r3, #6
 8006594:	617b      	str	r3, [r7, #20]
 8006596:	e007      	b.n	80065a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006598:	79fb      	ldrb	r3, [r7, #7]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d102      	bne.n	80065a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800659e:	2309      	movs	r3, #9
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	e001      	b.n	80065a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80065a4:	2309      	movs	r3, #9
 80065a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	68da      	ldr	r2, [r3, #12]
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	029b      	lsls	r3, r3, #10
 80065bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80065c0:	431a      	orrs	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	371c      	adds	r7, #28
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr
 80065d4:	00d8acbf 	.word	0x00d8acbf
 80065d8:	00e4e1c0 	.word	0x00e4e1c0
 80065dc:	00f42400 	.word	0x00f42400
 80065e0:	01067380 	.word	0x01067380
 80065e4:	011a499f 	.word	0x011a499f
 80065e8:	01312cff 	.word	0x01312cff
 80065ec:	014ca43f 	.word	0x014ca43f
 80065f0:	016e3600 	.word	0x016e3600
 80065f4:	01a6ab1f 	.word	0x01a6ab1f
 80065f8:	01e84800 	.word	0x01e84800

080065fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f043 0201 	orr.w	r2, r3, #1
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800661e:	b480      	push	{r7}
 8006620:	b083      	sub	sp, #12
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f023 0201 	bic.w	r2, r3, #1
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	460b      	mov	r3, r1
 800664a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800665c:	78fb      	ldrb	r3, [r7, #3]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d115      	bne.n	800668e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800666e:	2001      	movs	r0, #1
 8006670:	f7fb fd4a 	bl	8002108 <HAL_Delay>
      ms++;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	3301      	adds	r3, #1
 8006678:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f001 f972 	bl	8007964 <USB_GetMode>
 8006680:	4603      	mov	r3, r0
 8006682:	2b01      	cmp	r3, #1
 8006684:	d01e      	beq.n	80066c4 <USB_SetCurrentMode+0x84>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2b31      	cmp	r3, #49	; 0x31
 800668a:	d9f0      	bls.n	800666e <USB_SetCurrentMode+0x2e>
 800668c:	e01a      	b.n	80066c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800668e:	78fb      	ldrb	r3, [r7, #3]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d115      	bne.n	80066c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80066a0:	2001      	movs	r0, #1
 80066a2:	f7fb fd31 	bl	8002108 <HAL_Delay>
      ms++;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	3301      	adds	r3, #1
 80066aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f001 f959 	bl	8007964 <USB_GetMode>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d005      	beq.n	80066c4 <USB_SetCurrentMode+0x84>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b31      	cmp	r3, #49	; 0x31
 80066bc:	d9f0      	bls.n	80066a0 <USB_SetCurrentMode+0x60>
 80066be:	e001      	b.n	80066c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e005      	b.n	80066d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b32      	cmp	r3, #50	; 0x32
 80066c8:	d101      	bne.n	80066ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e000      	b.n	80066d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066d8:	b084      	sub	sp, #16
 80066da:	b580      	push	{r7, lr}
 80066dc:	b086      	sub	sp, #24
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80066e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80066f2:	2300      	movs	r3, #0
 80066f4:	613b      	str	r3, [r7, #16]
 80066f6:	e009      	b.n	800670c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	3340      	adds	r3, #64	; 0x40
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	2200      	movs	r2, #0
 8006704:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	3301      	adds	r3, #1
 800670a:	613b      	str	r3, [r7, #16]
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	2b0e      	cmp	r3, #14
 8006710:	d9f2      	bls.n	80066f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006714:	2b00      	cmp	r3, #0
 8006716:	d11c      	bne.n	8006752 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006726:	f043 0302 	orr.w	r3, r3, #2
 800672a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006730:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006748:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	639a      	str	r2, [r3, #56]	; 0x38
 8006750:	e00b      	b.n	800676a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006756:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006762:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006770:	461a      	mov	r2, r3
 8006772:	2300      	movs	r3, #0
 8006774:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677c:	4619      	mov	r1, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006784:	461a      	mov	r2, r3
 8006786:	680b      	ldr	r3, [r1, #0]
 8006788:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800678a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678c:	2b01      	cmp	r3, #1
 800678e:	d10c      	bne.n	80067aa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006792:	2b00      	cmp	r3, #0
 8006794:	d104      	bne.n	80067a0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006796:	2100      	movs	r1, #0
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f945 	bl	8006a28 <USB_SetDevSpeed>
 800679e:	e008      	b.n	80067b2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80067a0:	2101      	movs	r1, #1
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f940 	bl	8006a28 <USB_SetDevSpeed>
 80067a8:	e003      	b.n	80067b2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80067aa:	2103      	movs	r1, #3
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f93b 	bl	8006a28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80067b2:	2110      	movs	r1, #16
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f8f3 	bl	80069a0 <USB_FlushTxFifo>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f90f 	bl	80069e8 <USB_FlushRxFifo>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067da:	461a      	mov	r2, r3
 80067dc:	2300      	movs	r3, #0
 80067de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e6:	461a      	mov	r2, r3
 80067e8:	2300      	movs	r3, #0
 80067ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f2:	461a      	mov	r2, r3
 80067f4:	2300      	movs	r3, #0
 80067f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067f8:	2300      	movs	r3, #0
 80067fa:	613b      	str	r3, [r7, #16]
 80067fc:	e043      	b.n	8006886 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	4413      	add	r3, r2
 8006806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006810:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006814:	d118      	bne.n	8006848 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10a      	bne.n	8006832 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4413      	add	r3, r2
 8006824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006828:	461a      	mov	r2, r3
 800682a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800682e:	6013      	str	r3, [r2, #0]
 8006830:	e013      	b.n	800685a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683e:	461a      	mov	r2, r3
 8006840:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006844:	6013      	str	r3, [r2, #0]
 8006846:	e008      	b.n	800685a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006854:	461a      	mov	r2, r3
 8006856:	2300      	movs	r3, #0
 8006858:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	015a      	lsls	r2, r3, #5
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	4413      	add	r3, r2
 8006862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006866:	461a      	mov	r2, r3
 8006868:	2300      	movs	r3, #0
 800686a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4413      	add	r3, r2
 8006874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006878:	461a      	mov	r2, r3
 800687a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800687e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	3301      	adds	r3, #1
 8006884:	613b      	str	r3, [r7, #16]
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	429a      	cmp	r2, r3
 800688c:	d3b7      	bcc.n	80067fe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800688e:	2300      	movs	r3, #0
 8006890:	613b      	str	r3, [r7, #16]
 8006892:	e043      	b.n	800691c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068aa:	d118      	bne.n	80068de <USB_DevInit+0x206>
    {
      if (i == 0U)
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10a      	bne.n	80068c8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	015a      	lsls	r2, r3, #5
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	4413      	add	r3, r2
 80068ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068be:	461a      	mov	r2, r3
 80068c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	e013      	b.n	80068f0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d4:	461a      	mov	r2, r3
 80068d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80068da:	6013      	str	r3, [r2, #0]
 80068dc:	e008      	b.n	80068f0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	015a      	lsls	r2, r3, #5
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	4413      	add	r3, r2
 80068e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ea:	461a      	mov	r2, r3
 80068ec:	2300      	movs	r3, #0
 80068ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fc:	461a      	mov	r2, r3
 80068fe:	2300      	movs	r3, #0
 8006900:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4413      	add	r3, r2
 800690a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800690e:	461a      	mov	r2, r3
 8006910:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006914:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	3301      	adds	r3, #1
 800691a:	613b      	str	r3, [r7, #16]
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	429a      	cmp	r2, r3
 8006922:	d3b7      	bcc.n	8006894 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006932:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006936:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006944:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006948:	2b00      	cmp	r3, #0
 800694a:	d105      	bne.n	8006958 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	f043 0210 	orr.w	r2, r3, #16
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	699a      	ldr	r2, [r3, #24]
 800695c:	4b0f      	ldr	r3, [pc, #60]	; (800699c <USB_DevInit+0x2c4>)
 800695e:	4313      	orrs	r3, r2
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006966:	2b00      	cmp	r3, #0
 8006968:	d005      	beq.n	8006976 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	f043 0208 	orr.w	r2, r3, #8
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006978:	2b01      	cmp	r3, #1
 800697a:	d107      	bne.n	800698c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006984:	f043 0304 	orr.w	r3, r3, #4
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800698c:	7dfb      	ldrb	r3, [r7, #23]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006998:	b004      	add	sp, #16
 800699a:	4770      	bx	lr
 800699c:	803c3800 	.word	0x803c3800

080069a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069aa:	2300      	movs	r3, #0
 80069ac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	019b      	lsls	r3, r3, #6
 80069b2:	f043 0220 	orr.w	r2, r3, #32
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	3301      	adds	r3, #1
 80069be:	60fb      	str	r3, [r7, #12]
 80069c0:	4a08      	ldr	r2, [pc, #32]	; (80069e4 <USB_FlushTxFifo+0x44>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d901      	bls.n	80069ca <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e006      	b.n	80069d8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	f003 0320 	and.w	r3, r3, #32
 80069d2:	2b20      	cmp	r3, #32
 80069d4:	d0f1      	beq.n	80069ba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3714      	adds	r7, #20
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	00030d40 	.word	0x00030d40

080069e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069f0:	2300      	movs	r3, #0
 80069f2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2210      	movs	r2, #16
 80069f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	3301      	adds	r3, #1
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	4a08      	ldr	r2, [pc, #32]	; (8006a24 <USB_FlushRxFifo+0x3c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d901      	bls.n	8006a0a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e006      	b.n	8006a18 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	f003 0310 	and.w	r3, r3, #16
 8006a12:	2b10      	cmp	r3, #16
 8006a14:	d0f1      	beq.n	80069fa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	00030d40 	.word	0x00030d40

08006a28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	460b      	mov	r3, r1
 8006a32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	78fb      	ldrb	r3, [r7, #3]
 8006a42:	68f9      	ldr	r1, [r7, #12]
 8006a44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b087      	sub	sp, #28
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f003 0306 	and.w	r3, r3, #6
 8006a72:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d102      	bne.n	8006a80 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	75fb      	strb	r3, [r7, #23]
 8006a7e:	e00a      	b.n	8006a96 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d002      	beq.n	8006a8c <USB_GetDevSpeed+0x32>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b06      	cmp	r3, #6
 8006a8a:	d102      	bne.n	8006a92 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	75fb      	strb	r3, [r7, #23]
 8006a90:	e001      	b.n	8006a96 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006a92:	230f      	movs	r3, #15
 8006a94:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	371c      	adds	r7, #28
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	785b      	ldrb	r3, [r3, #1]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d13a      	bne.n	8006b36 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac6:	69da      	ldr	r2, [r3, #28]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	f003 030f 	and.w	r3, r3, #15
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	68f9      	ldr	r1, [r7, #12]
 8006ada:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	015a      	lsls	r2, r3, #5
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	4413      	add	r3, r2
 8006aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d155      	bne.n	8006ba4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	78db      	ldrb	r3, [r3, #3]
 8006b12:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b14:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	059b      	lsls	r3, r3, #22
 8006b1a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	0151      	lsls	r1, r2, #5
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	440a      	add	r2, r1
 8006b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b32:	6013      	str	r3, [r2, #0]
 8006b34:	e036      	b.n	8006ba4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b3c:	69da      	ldr	r2, [r3, #28]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	f003 030f 	and.w	r3, r3, #15
 8006b46:	2101      	movs	r1, #1
 8006b48:	fa01 f303 	lsl.w	r3, r1, r3
 8006b4c:	041b      	lsls	r3, r3, #16
 8006b4e:	68f9      	ldr	r1, [r7, #12]
 8006b50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b54:	4313      	orrs	r3, r2
 8006b56:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d11a      	bne.n	8006ba4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	015a      	lsls	r2, r3, #5
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	4413      	add	r3, r2
 8006b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	78db      	ldrb	r3, [r3, #3]
 8006b88:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b8a:	430b      	orrs	r3, r1
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	0151      	lsls	r1, r2, #5
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	440a      	add	r2, r1
 8006b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ba2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3714      	adds	r7, #20
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
	...

08006bb4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	785b      	ldrb	r3, [r3, #1]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d161      	bne.n	8006c94 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	015a      	lsls	r2, r3, #5
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006be2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006be6:	d11f      	bne.n	8006c28 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	0151      	lsls	r1, r2, #5
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	440a      	add	r2, r1
 8006bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c06:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	015a      	lsls	r2, r3, #5
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4413      	add	r3, r2
 8006c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	0151      	lsls	r1, r2, #5
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	440a      	add	r2, r1
 8006c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	f003 030f 	and.w	r3, r3, #15
 8006c38:	2101      	movs	r1, #1
 8006c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	43db      	mvns	r3, r3
 8006c42:	68f9      	ldr	r1, [r7, #12]
 8006c44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c48:	4013      	ands	r3, r2
 8006c4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c52:	69da      	ldr	r2, [r3, #28]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	f003 030f 	and.w	r3, r3, #15
 8006c5c:	2101      	movs	r1, #1
 8006c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	43db      	mvns	r3, r3
 8006c66:	68f9      	ldr	r1, [r7, #12]
 8006c68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	0159      	lsls	r1, r3, #5
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	440b      	add	r3, r1
 8006c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	4b35      	ldr	r3, [pc, #212]	; (8006d64 <USB_DeactivateEndpoint+0x1b0>)
 8006c8e:	4013      	ands	r3, r2
 8006c90:	600b      	str	r3, [r1, #0]
 8006c92:	e060      	b.n	8006d56 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006caa:	d11f      	bne.n	8006cec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	0151      	lsls	r1, r2, #5
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	440a      	add	r2, r1
 8006cc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006cca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	0151      	lsls	r1, r2, #5
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	440a      	add	r2, r1
 8006ce2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ce6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	f003 030f 	and.w	r3, r3, #15
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8006d02:	041b      	lsls	r3, r3, #16
 8006d04:	43db      	mvns	r3, r3
 8006d06:	68f9      	ldr	r1, [r7, #12]
 8006d08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d16:	69da      	ldr	r2, [r3, #28]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	f003 030f 	and.w	r3, r3, #15
 8006d20:	2101      	movs	r1, #1
 8006d22:	fa01 f303 	lsl.w	r3, r1, r3
 8006d26:	041b      	lsls	r3, r3, #16
 8006d28:	43db      	mvns	r3, r3
 8006d2a:	68f9      	ldr	r1, [r7, #12]
 8006d2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d30:	4013      	ands	r3, r2
 8006d32:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	0159      	lsls	r1, r3, #5
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	440b      	add	r3, r1
 8006d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d4e:	4619      	mov	r1, r3
 8006d50:	4b05      	ldr	r3, [pc, #20]	; (8006d68 <USB_DeactivateEndpoint+0x1b4>)
 8006d52:	4013      	ands	r3, r2
 8006d54:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3714      	adds	r7, #20
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr
 8006d64:	ec337800 	.word	0xec337800
 8006d68:	eff37800 	.word	0xeff37800

08006d6c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08a      	sub	sp, #40	; 0x28
 8006d70:	af02      	add	r7, sp, #8
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	4613      	mov	r3, r2
 8006d78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	785b      	ldrb	r3, [r3, #1]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	f040 815c 	bne.w	8007046 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d132      	bne.n	8006dfc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	015a      	lsls	r2, r3, #5
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	69ba      	ldr	r2, [r7, #24]
 8006da6:	0151      	lsls	r1, r2, #5
 8006da8:	69fa      	ldr	r2, [r7, #28]
 8006daa:	440a      	add	r2, r1
 8006dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006db0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006db4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006db8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	69ba      	ldr	r2, [r7, #24]
 8006dca:	0151      	lsls	r1, r2, #5
 8006dcc:	69fa      	ldr	r2, [r7, #28]
 8006dce:	440a      	add	r2, r1
 8006dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006dd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	015a      	lsls	r2, r3, #5
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	4413      	add	r3, r2
 8006de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	69ba      	ldr	r2, [r7, #24]
 8006dea:	0151      	lsls	r1, r2, #5
 8006dec:	69fa      	ldr	r2, [r7, #28]
 8006dee:	440a      	add	r2, r1
 8006df0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006df4:	0cdb      	lsrs	r3, r3, #19
 8006df6:	04db      	lsls	r3, r3, #19
 8006df8:	6113      	str	r3, [r2, #16]
 8006dfa:	e074      	b.n	8006ee6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	015a      	lsls	r2, r3, #5
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	4413      	add	r3, r2
 8006e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	69ba      	ldr	r2, [r7, #24]
 8006e0c:	0151      	lsls	r1, r2, #5
 8006e0e:	69fa      	ldr	r2, [r7, #28]
 8006e10:	440a      	add	r2, r1
 8006e12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e16:	0cdb      	lsrs	r3, r3, #19
 8006e18:	04db      	lsls	r3, r3, #19
 8006e1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	015a      	lsls	r2, r3, #5
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	4413      	add	r3, r2
 8006e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	69ba      	ldr	r2, [r7, #24]
 8006e2c:	0151      	lsls	r1, r2, #5
 8006e2e:	69fa      	ldr	r2, [r7, #28]
 8006e30:	440a      	add	r2, r1
 8006e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e4c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	6959      	ldr	r1, [r3, #20]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	440b      	add	r3, r1
 8006e58:	1e59      	subs	r1, r3, #1
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e62:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006e64:	4b9d      	ldr	r3, [pc, #628]	; (80070dc <USB_EPStartXfer+0x370>)
 8006e66:	400b      	ands	r3, r1
 8006e68:	69b9      	ldr	r1, [r7, #24]
 8006e6a:	0148      	lsls	r0, r1, #5
 8006e6c:	69f9      	ldr	r1, [r7, #28]
 8006e6e:	4401      	add	r1, r0
 8006e70:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e74:	4313      	orrs	r3, r2
 8006e76:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e84:	691a      	ldr	r2, [r3, #16]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e8e:	69b9      	ldr	r1, [r7, #24]
 8006e90:	0148      	lsls	r0, r1, #5
 8006e92:	69f9      	ldr	r1, [r7, #28]
 8006e94:	4401      	add	r1, r0
 8006e96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	78db      	ldrb	r3, [r3, #3]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d11f      	bne.n	8006ee6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	69ba      	ldr	r2, [r7, #24]
 8006eb6:	0151      	lsls	r1, r2, #5
 8006eb8:	69fa      	ldr	r2, [r7, #28]
 8006eba:	440a      	add	r2, r1
 8006ebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ec0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006ec4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	015a      	lsls	r2, r3, #5
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	0151      	lsls	r1, r2, #5
 8006ed8:	69fa      	ldr	r2, [r7, #28]
 8006eda:	440a      	add	r2, r1
 8006edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ee0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ee4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006ee6:	79fb      	ldrb	r3, [r7, #7]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d14b      	bne.n	8006f84 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d009      	beq.n	8006f08 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f00:	461a      	mov	r2, r3
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	78db      	ldrb	r3, [r3, #3]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d128      	bne.n	8006f62 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d110      	bne.n	8006f42 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	69ba      	ldr	r2, [r7, #24]
 8006f30:	0151      	lsls	r1, r2, #5
 8006f32:	69fa      	ldr	r2, [r7, #28]
 8006f34:	440a      	add	r2, r1
 8006f36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	e00f      	b.n	8006f62 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	69ba      	ldr	r2, [r7, #24]
 8006f52:	0151      	lsls	r1, r2, #5
 8006f54:	69fa      	ldr	r2, [r7, #28]
 8006f56:	440a      	add	r2, r1
 8006f58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f60:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	0151      	lsls	r1, r2, #5
 8006f74:	69fa      	ldr	r2, [r7, #28]
 8006f76:	440a      	add	r2, r1
 8006f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f80:	6013      	str	r3, [r2, #0]
 8006f82:	e12f      	b.n	80071e4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	69ba      	ldr	r2, [r7, #24]
 8006f94:	0151      	lsls	r1, r2, #5
 8006f96:	69fa      	ldr	r2, [r7, #28]
 8006f98:	440a      	add	r2, r1
 8006f9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fa2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	78db      	ldrb	r3, [r3, #3]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d015      	beq.n	8006fd8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	695b      	ldr	r3, [r3, #20]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f000 8117 	beq.w	80071e4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	f003 030f 	and.w	r3, r3, #15
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8006fcc:	69f9      	ldr	r1, [r7, #28]
 8006fce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	634b      	str	r3, [r1, #52]	; 0x34
 8006fd6:	e105      	b.n	80071e4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d110      	bne.n	800700a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	69ba      	ldr	r2, [r7, #24]
 8006ff8:	0151      	lsls	r1, r2, #5
 8006ffa:	69fa      	ldr	r2, [r7, #28]
 8006ffc:	440a      	add	r2, r1
 8006ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007002:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007006:	6013      	str	r3, [r2, #0]
 8007008:	e00f      	b.n	800702a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	4413      	add	r3, r2
 8007012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	0151      	lsls	r1, r2, #5
 800701c:	69fa      	ldr	r2, [r7, #28]
 800701e:	440a      	add	r2, r1
 8007020:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007028:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	68d9      	ldr	r1, [r3, #12]
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	781a      	ldrb	r2, [r3, #0]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	b298      	uxth	r0, r3
 8007038:	79fb      	ldrb	r3, [r7, #7]
 800703a:	9300      	str	r3, [sp, #0]
 800703c:	4603      	mov	r3, r0
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 fa2b 	bl	800749a <USB_WritePacket>
 8007044:	e0ce      	b.n	80071e4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	015a      	lsls	r2, r3, #5
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	4413      	add	r3, r2
 800704e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	69ba      	ldr	r2, [r7, #24]
 8007056:	0151      	lsls	r1, r2, #5
 8007058:	69fa      	ldr	r2, [r7, #28]
 800705a:	440a      	add	r2, r1
 800705c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007060:	0cdb      	lsrs	r3, r3, #19
 8007062:	04db      	lsls	r3, r3, #19
 8007064:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	69ba      	ldr	r2, [r7, #24]
 8007076:	0151      	lsls	r1, r2, #5
 8007078:	69fa      	ldr	r2, [r7, #28]
 800707a:	440a      	add	r2, r1
 800707c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007080:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007084:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007088:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d126      	bne.n	80070e0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	015a      	lsls	r2, r3, #5
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	4413      	add	r3, r2
 800709a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709e:	691a      	ldr	r2, [r3, #16]
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070a8:	69b9      	ldr	r1, [r7, #24]
 80070aa:	0148      	lsls	r0, r1, #5
 80070ac:	69f9      	ldr	r1, [r7, #28]
 80070ae:	4401      	add	r1, r0
 80070b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070b4:	4313      	orrs	r3, r2
 80070b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	0151      	lsls	r1, r2, #5
 80070ca:	69fa      	ldr	r2, [r7, #28]
 80070cc:	440a      	add	r2, r1
 80070ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070d6:	6113      	str	r3, [r2, #16]
 80070d8:	e036      	b.n	8007148 <USB_EPStartXfer+0x3dc>
 80070da:	bf00      	nop
 80070dc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	695a      	ldr	r2, [r3, #20]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	4413      	add	r3, r2
 80070ea:	1e5a      	subs	r2, r3, #1
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007102:	691a      	ldr	r2, [r3, #16]
 8007104:	8afb      	ldrh	r3, [r7, #22]
 8007106:	04d9      	lsls	r1, r3, #19
 8007108:	4b39      	ldr	r3, [pc, #228]	; (80071f0 <USB_EPStartXfer+0x484>)
 800710a:	400b      	ands	r3, r1
 800710c:	69b9      	ldr	r1, [r7, #24]
 800710e:	0148      	lsls	r0, r1, #5
 8007110:	69f9      	ldr	r1, [r7, #28]
 8007112:	4401      	add	r1, r0
 8007114:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007118:	4313      	orrs	r3, r2
 800711a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	015a      	lsls	r2, r3, #5
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	4413      	add	r3, r2
 8007124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007128:	691a      	ldr	r2, [r3, #16]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	8af9      	ldrh	r1, [r7, #22]
 8007130:	fb01 f303 	mul.w	r3, r1, r3
 8007134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007138:	69b9      	ldr	r1, [r7, #24]
 800713a:	0148      	lsls	r0, r1, #5
 800713c:	69f9      	ldr	r1, [r7, #28]
 800713e:	4401      	add	r1, r0
 8007140:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007144:	4313      	orrs	r3, r2
 8007146:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007148:	79fb      	ldrb	r3, [r7, #7]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d10d      	bne.n	800716a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d009      	beq.n	800716a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	68d9      	ldr	r1, [r3, #12]
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	4413      	add	r3, r2
 8007162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007166:	460a      	mov	r2, r1
 8007168:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	78db      	ldrb	r3, [r3, #3]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d128      	bne.n	80071c4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800717e:	2b00      	cmp	r3, #0
 8007180:	d110      	bne.n	80071a4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	015a      	lsls	r2, r3, #5
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	4413      	add	r3, r2
 800718a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	69ba      	ldr	r2, [r7, #24]
 8007192:	0151      	lsls	r1, r2, #5
 8007194:	69fa      	ldr	r2, [r7, #28]
 8007196:	440a      	add	r2, r1
 8007198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800719c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071a0:	6013      	str	r3, [r2, #0]
 80071a2:	e00f      	b.n	80071c4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	69ba      	ldr	r2, [r7, #24]
 80071b4:	0151      	lsls	r1, r2, #5
 80071b6:	69fa      	ldr	r2, [r7, #28]
 80071b8:	440a      	add	r2, r1
 80071ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	69ba      	ldr	r2, [r7, #24]
 80071d4:	0151      	lsls	r1, r2, #5
 80071d6:	69fa      	ldr	r2, [r7, #28]
 80071d8:	440a      	add	r2, r1
 80071da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3720      	adds	r7, #32
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	1ff80000 	.word	0x1ff80000

080071f4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	4613      	mov	r3, r2
 8007200:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	785b      	ldrb	r3, [r3, #1]
 8007210:	2b01      	cmp	r3, #1
 8007212:	f040 80cd 	bne.w	80073b0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d132      	bne.n	8007284 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	4413      	add	r3, r2
 8007226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	0151      	lsls	r1, r2, #5
 8007230:	697a      	ldr	r2, [r7, #20]
 8007232:	440a      	add	r2, r1
 8007234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007238:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800723c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007240:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	015a      	lsls	r2, r3, #5
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	4413      	add	r3, r2
 800724a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	0151      	lsls	r1, r2, #5
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	440a      	add	r2, r1
 8007258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800725c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007260:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	015a      	lsls	r2, r3, #5
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	4413      	add	r3, r2
 800726a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	0151      	lsls	r1, r2, #5
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	440a      	add	r2, r1
 8007278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800727c:	0cdb      	lsrs	r3, r3, #19
 800727e:	04db      	lsls	r3, r3, #19
 8007280:	6113      	str	r3, [r2, #16]
 8007282:	e04e      	b.n	8007322 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	015a      	lsls	r2, r3, #5
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	4413      	add	r3, r2
 800728c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	0151      	lsls	r1, r2, #5
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	440a      	add	r2, r1
 800729a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800729e:	0cdb      	lsrs	r3, r3, #19
 80072a0:	04db      	lsls	r3, r3, #19
 80072a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	015a      	lsls	r2, r3, #5
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	693a      	ldr	r2, [r7, #16]
 80072b4:	0151      	lsls	r1, r2, #5
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	440a      	add	r2, r1
 80072ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072c6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	695a      	ldr	r2, [r3, #20]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d903      	bls.n	80072dc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	689a      	ldr	r2, [r3, #8]
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	0151      	lsls	r1, r2, #5
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	440a      	add	r2, r1
 80072f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	4413      	add	r3, r2
 8007304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007308:	691a      	ldr	r2, [r3, #16]
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007312:	6939      	ldr	r1, [r7, #16]
 8007314:	0148      	lsls	r0, r1, #5
 8007316:	6979      	ldr	r1, [r7, #20]
 8007318:	4401      	add	r1, r0
 800731a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800731e:	4313      	orrs	r3, r2
 8007320:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007322:	79fb      	ldrb	r3, [r7, #7]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d11e      	bne.n	8007366 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d009      	beq.n	8007344 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800733c:	461a      	mov	r2, r3
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	0151      	lsls	r1, r2, #5
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	440a      	add	r2, r1
 800735a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800735e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007362:	6013      	str	r3, [r2, #0]
 8007364:	e092      	b.n	800748c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	015a      	lsls	r2, r3, #5
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	4413      	add	r3, r2
 800736e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	0151      	lsls	r1, r2, #5
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	440a      	add	r2, r1
 800737c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007380:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007384:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d07e      	beq.n	800748c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	f003 030f 	and.w	r3, r3, #15
 800739e:	2101      	movs	r1, #1
 80073a0:	fa01 f303 	lsl.w	r3, r1, r3
 80073a4:	6979      	ldr	r1, [r7, #20]
 80073a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073aa:	4313      	orrs	r3, r2
 80073ac:	634b      	str	r3, [r1, #52]	; 0x34
 80073ae:	e06d      	b.n	800748c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	015a      	lsls	r2, r3, #5
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	4413      	add	r3, r2
 80073b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	0151      	lsls	r1, r2, #5
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	440a      	add	r2, r1
 80073c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073ca:	0cdb      	lsrs	r3, r3, #19
 80073cc:	04db      	lsls	r3, r3, #19
 80073ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	0151      	lsls	r1, r2, #5
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	440a      	add	r2, r1
 80073e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073f2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d003      	beq.n	8007404 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	689a      	ldr	r2, [r3, #8]
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	015a      	lsls	r2, r3, #5
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	4413      	add	r3, r2
 800740c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	0151      	lsls	r1, r2, #5
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	440a      	add	r2, r1
 800741a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800741e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007422:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	4413      	add	r3, r2
 800742c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007430:	691a      	ldr	r2, [r3, #16]
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800743a:	6939      	ldr	r1, [r7, #16]
 800743c:	0148      	lsls	r0, r1, #5
 800743e:	6979      	ldr	r1, [r7, #20]
 8007440:	4401      	add	r1, r0
 8007442:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007446:	4313      	orrs	r3, r2
 8007448:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800744a:	79fb      	ldrb	r3, [r7, #7]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d10d      	bne.n	800746c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d009      	beq.n	800746c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	68d9      	ldr	r1, [r3, #12]
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	015a      	lsls	r2, r3, #5
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	4413      	add	r3, r2
 8007464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007468:	460a      	mov	r2, r1
 800746a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	015a      	lsls	r2, r3, #5
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	4413      	add	r3, r2
 8007474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	0151      	lsls	r1, r2, #5
 800747e:	697a      	ldr	r2, [r7, #20]
 8007480:	440a      	add	r2, r1
 8007482:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007486:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800748a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	371c      	adds	r7, #28
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800749a:	b480      	push	{r7}
 800749c:	b089      	sub	sp, #36	; 0x24
 800749e:	af00      	add	r7, sp, #0
 80074a0:	60f8      	str	r0, [r7, #12]
 80074a2:	60b9      	str	r1, [r7, #8]
 80074a4:	4611      	mov	r1, r2
 80074a6:	461a      	mov	r2, r3
 80074a8:	460b      	mov	r3, r1
 80074aa:	71fb      	strb	r3, [r7, #7]
 80074ac:	4613      	mov	r3, r2
 80074ae:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80074b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d123      	bne.n	8007508 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80074c0:	88bb      	ldrh	r3, [r7, #4]
 80074c2:	3303      	adds	r3, #3
 80074c4:	089b      	lsrs	r3, r3, #2
 80074c6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80074c8:	2300      	movs	r3, #0
 80074ca:	61bb      	str	r3, [r7, #24]
 80074cc:	e018      	b.n	8007500 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80074ce:	79fb      	ldrb	r3, [r7, #7]
 80074d0:	031a      	lsls	r2, r3, #12
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	4413      	add	r3, r2
 80074d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074da:	461a      	mov	r2, r3
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	3301      	adds	r3, #1
 80074e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	3301      	adds	r3, #1
 80074ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	3301      	adds	r3, #1
 80074f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	3301      	adds	r3, #1
 80074f8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	3301      	adds	r3, #1
 80074fe:	61bb      	str	r3, [r7, #24]
 8007500:	69ba      	ldr	r2, [r7, #24]
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	429a      	cmp	r2, r3
 8007506:	d3e2      	bcc.n	80074ce <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3724      	adds	r7, #36	; 0x24
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007516:	b480      	push	{r7}
 8007518:	b08b      	sub	sp, #44	; 0x2c
 800751a:	af00      	add	r7, sp, #0
 800751c:	60f8      	str	r0, [r7, #12]
 800751e:	60b9      	str	r1, [r7, #8]
 8007520:	4613      	mov	r3, r2
 8007522:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800752c:	88fb      	ldrh	r3, [r7, #6]
 800752e:	089b      	lsrs	r3, r3, #2
 8007530:	b29b      	uxth	r3, r3
 8007532:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007534:	88fb      	ldrh	r3, [r7, #6]
 8007536:	f003 0303 	and.w	r3, r3, #3
 800753a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800753c:	2300      	movs	r3, #0
 800753e:	623b      	str	r3, [r7, #32]
 8007540:	e014      	b.n	800756c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754c:	601a      	str	r2, [r3, #0]
    pDest++;
 800754e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007550:	3301      	adds	r3, #1
 8007552:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007556:	3301      	adds	r3, #1
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	3301      	adds	r3, #1
 800755e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007562:	3301      	adds	r3, #1
 8007564:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007566:	6a3b      	ldr	r3, [r7, #32]
 8007568:	3301      	adds	r3, #1
 800756a:	623b      	str	r3, [r7, #32]
 800756c:	6a3a      	ldr	r2, [r7, #32]
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	429a      	cmp	r2, r3
 8007572:	d3e6      	bcc.n	8007542 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007574:	8bfb      	ldrh	r3, [r7, #30]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d01e      	beq.n	80075b8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800757a:	2300      	movs	r3, #0
 800757c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007584:	461a      	mov	r2, r3
 8007586:	f107 0310 	add.w	r3, r7, #16
 800758a:	6812      	ldr	r2, [r2, #0]
 800758c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	6a3b      	ldr	r3, [r7, #32]
 8007592:	b2db      	uxtb	r3, r3
 8007594:	00db      	lsls	r3, r3, #3
 8007596:	fa22 f303 	lsr.w	r3, r2, r3
 800759a:	b2da      	uxtb	r2, r3
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	701a      	strb	r2, [r3, #0]
      i++;
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	3301      	adds	r3, #1
 80075a4:	623b      	str	r3, [r7, #32]
      pDest++;
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	3301      	adds	r3, #1
 80075aa:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80075ac:	8bfb      	ldrh	r3, [r7, #30]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80075b2:	8bfb      	ldrh	r3, [r7, #30]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1ea      	bne.n	800758e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80075b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	372c      	adds	r7, #44	; 0x2c
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b085      	sub	sp, #20
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	785b      	ldrb	r3, [r3, #1]
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d12c      	bne.n	800763c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	015a      	lsls	r2, r3, #5
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	db12      	blt.n	800761a <USB_EPSetStall+0x54>
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00f      	beq.n	800761a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	015a      	lsls	r2, r3, #5
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	4413      	add	r3, r2
 8007602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	0151      	lsls	r1, r2, #5
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	440a      	add	r2, r1
 8007610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007614:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007618:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	4413      	add	r3, r2
 8007622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	0151      	lsls	r1, r2, #5
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	440a      	add	r2, r1
 8007630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007634:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007638:	6013      	str	r3, [r2, #0]
 800763a:	e02b      	b.n	8007694 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	015a      	lsls	r2, r3, #5
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4413      	add	r3, r2
 8007644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	db12      	blt.n	8007674 <USB_EPSetStall+0xae>
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00f      	beq.n	8007674 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4413      	add	r3, r2
 800765c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	0151      	lsls	r1, r2, #5
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	440a      	add	r2, r1
 800766a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800766e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007672:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	015a      	lsls	r2, r3, #5
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	4413      	add	r3, r2
 800767c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	0151      	lsls	r1, r2, #5
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	440a      	add	r2, r1
 800768a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800768e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007692:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b085      	sub	sp, #20
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	785b      	ldrb	r3, [r3, #1]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d128      	bne.n	8007710 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	015a      	lsls	r2, r3, #5
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	4413      	add	r3, r2
 80076c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	0151      	lsls	r1, r2, #5
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	440a      	add	r2, r1
 80076d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	78db      	ldrb	r3, [r3, #3]
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d003      	beq.n	80076ee <USB_EPClearStall+0x4c>
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	78db      	ldrb	r3, [r3, #3]
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d138      	bne.n	8007760 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	015a      	lsls	r2, r3, #5
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	4413      	add	r3, r2
 80076f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	0151      	lsls	r1, r2, #5
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	440a      	add	r2, r1
 8007704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800770c:	6013      	str	r3, [r2, #0]
 800770e:	e027      	b.n	8007760 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	015a      	lsls	r2, r3, #5
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	4413      	add	r3, r2
 8007718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	0151      	lsls	r1, r2, #5
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	440a      	add	r2, r1
 8007726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800772a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800772e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	78db      	ldrb	r3, [r3, #3]
 8007734:	2b03      	cmp	r3, #3
 8007736:	d003      	beq.n	8007740 <USB_EPClearStall+0x9e>
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	78db      	ldrb	r3, [r3, #3]
 800773c:	2b02      	cmp	r3, #2
 800773e:	d10f      	bne.n	8007760 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	015a      	lsls	r2, r3, #5
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	4413      	add	r3, r2
 8007748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	0151      	lsls	r1, r2, #5
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	440a      	add	r2, r1
 8007756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800775a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800775e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800776e:	b480      	push	{r7}
 8007770:	b085      	sub	sp, #20
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	460b      	mov	r3, r1
 8007778:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800778c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007790:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	78fb      	ldrb	r3, [r7, #3]
 800779c:	011b      	lsls	r3, r3, #4
 800779e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80077a2:	68f9      	ldr	r1, [r7, #12]
 80077a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077a8:	4313      	orrs	r3, r2
 80077aa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3714      	adds	r7, #20
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b085      	sub	sp, #20
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077d4:	f023 0303 	bic.w	r3, r3, #3
 80077d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077e8:	f023 0302 	bic.w	r3, r3, #2
 80077ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007816:	f023 0303 	bic.w	r3, r3, #3
 800781a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800782a:	f043 0302 	orr.w	r3, r3, #2
 800782e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr

0800783e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800783e:	b480      	push	{r7}
 8007840:	b085      	sub	sp, #20
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	4013      	ands	r3, r2
 8007854:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007856:	68fb      	ldr	r3, [r7, #12]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3714      	adds	r7, #20
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	4013      	ands	r3, r2
 8007886:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	0c1b      	lsrs	r3, r3, #16
}
 800788c:	4618      	mov	r0, r3
 800788e:	3714      	adds	r7, #20
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078b4:	69db      	ldr	r3, [r3, #28]
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	4013      	ands	r3, r2
 80078ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	b29b      	uxth	r3, r3
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3714      	adds	r7, #20
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	460b      	mov	r3, r1
 80078d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80078dc:	78fb      	ldrb	r3, [r7, #3]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078f2:	695b      	ldr	r3, [r3, #20]
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	4013      	ands	r3, r2
 80078f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078fa:	68bb      	ldr	r3, [r7, #8]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007908:	b480      	push	{r7}
 800790a:	b087      	sub	sp, #28
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	460b      	mov	r3, r1
 8007912:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800792a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800792c:	78fb      	ldrb	r3, [r7, #3]
 800792e:	f003 030f 	and.w	r3, r3, #15
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	fa22 f303 	lsr.w	r3, r2, r3
 8007938:	01db      	lsls	r3, r3, #7
 800793a:	b2db      	uxtb	r3, r3
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	4313      	orrs	r3, r2
 8007940:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007942:	78fb      	ldrb	r3, [r7, #3]
 8007944:	015a      	lsls	r2, r3, #5
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	4413      	add	r3, r2
 800794a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	4013      	ands	r3, r2
 8007954:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007956:	68bb      	ldr	r3, [r7, #8]
}
 8007958:	4618      	mov	r0, r3
 800795a:	371c      	adds	r7, #28
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	695b      	ldr	r3, [r3, #20]
 8007970:	f003 0301 	and.w	r3, r3, #1
}
 8007974:	4618      	mov	r0, r3
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800799a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800799e:	f023 0307 	bic.w	r3, r3, #7
 80079a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3714      	adds	r7, #20
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
	...

080079c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	460b      	mov	r3, r1
 80079d2:	607a      	str	r2, [r7, #4]
 80079d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	333c      	adds	r3, #60	; 0x3c
 80079de:	3304      	adds	r3, #4
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	4a26      	ldr	r2, [pc, #152]	; (8007a80 <USB_EP0_OutStart+0xb8>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d90a      	bls.n	8007a02 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079fc:	d101      	bne.n	8007a02 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80079fe:	2300      	movs	r3, #0
 8007a00:	e037      	b.n	8007a72 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a08:	461a      	mov	r2, r3
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a30:	f043 0318 	orr.w	r3, r3, #24
 8007a34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a44:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007a48:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007a4a:	7afb      	ldrb	r3, [r7, #11]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d10f      	bne.n	8007a70 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a56:	461a      	mov	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	697a      	ldr	r2, [r7, #20]
 8007a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a6a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007a6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	371c      	adds	r7, #28
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	4f54300a 	.word	0x4f54300a

08007a84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3301      	adds	r3, #1
 8007a94:	60fb      	str	r3, [r7, #12]
 8007a96:	4a13      	ldr	r2, [pc, #76]	; (8007ae4 <USB_CoreReset+0x60>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d901      	bls.n	8007aa0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e01a      	b.n	8007ad6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	daf3      	bge.n	8007a90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	f043 0201 	orr.w	r2, r3, #1
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	3301      	adds	r3, #1
 8007abc:	60fb      	str	r3, [r7, #12]
 8007abe:	4a09      	ldr	r2, [pc, #36]	; (8007ae4 <USB_CoreReset+0x60>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d901      	bls.n	8007ac8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e006      	b.n	8007ad6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	f003 0301 	and.w	r3, r3, #1
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d0f1      	beq.n	8007ab8 <USB_CoreReset+0x34>

  return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3714      	adds	r7, #20
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	00030d40 	.word	0x00030d40

08007ae8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	460b      	mov	r3, r1
 8007af2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007af4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007af8:	f002 fa12 	bl	8009f20 <USBD_static_malloc>
 8007afc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d105      	bne.n	8007b10 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	e066      	b.n	8007bde <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	7c1b      	ldrb	r3, [r3, #16]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d119      	bne.n	8007b54 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b24:	2202      	movs	r2, #2
 8007b26:	2181      	movs	r1, #129	; 0x81
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f002 f8d6 	bl	8009cda <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2201      	movs	r2, #1
 8007b32:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b38:	2202      	movs	r2, #2
 8007b3a:	2101      	movs	r1, #1
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f002 f8cc 	bl	8009cda <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2210      	movs	r2, #16
 8007b4e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007b52:	e016      	b.n	8007b82 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b54:	2340      	movs	r3, #64	; 0x40
 8007b56:	2202      	movs	r2, #2
 8007b58:	2181      	movs	r1, #129	; 0x81
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f002 f8bd 	bl	8009cda <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b66:	2340      	movs	r3, #64	; 0x40
 8007b68:	2202      	movs	r2, #2
 8007b6a:	2101      	movs	r1, #1
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f002 f8b4 	bl	8009cda <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2210      	movs	r2, #16
 8007b7e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007b82:	2308      	movs	r3, #8
 8007b84:	2203      	movs	r2, #3
 8007b86:	2182      	movs	r1, #130	; 0x82
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f002 f8a6 	bl	8009cda <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	7c1b      	ldrb	r3, [r3, #16]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d109      	bne.n	8007bcc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bc2:	2101      	movs	r1, #1
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f002 f977 	bl	8009eb8 <USBD_LL_PrepareReceive>
 8007bca:	e007      	b.n	8007bdc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bd2:	2340      	movs	r3, #64	; 0x40
 8007bd4:	2101      	movs	r1, #1
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f002 f96e 	bl	8009eb8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b082      	sub	sp, #8
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
 8007bee:	460b      	mov	r3, r1
 8007bf0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007bf2:	2181      	movs	r1, #129	; 0x81
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f002 f896 	bl	8009d26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007c00:	2101      	movs	r1, #1
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f002 f88f 	bl	8009d26 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007c10:	2182      	movs	r1, #130	; 0x82
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f002 f887 	bl	8009d26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00e      	beq.n	8007c50 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c42:	4618      	mov	r0, r3
 8007c44:	f002 f97a 	bl	8009f3c <USBD_static_free>
    pdev->pClassData = NULL;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
	...

08007c5c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b086      	sub	sp, #24
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c6c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007c72:	2300      	movs	r3, #0
 8007c74:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c76:	2300      	movs	r3, #0
 8007c78:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d101      	bne.n	8007c84 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e0af      	b.n	8007de4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d03f      	beq.n	8007d10 <USBD_CDC_Setup+0xb4>
 8007c90:	2b20      	cmp	r3, #32
 8007c92:	f040 809f 	bne.w	8007dd4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	88db      	ldrh	r3, [r3, #6]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d02e      	beq.n	8007cfc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	b25b      	sxtb	r3, r3
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	da16      	bge.n	8007cd6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	683a      	ldr	r2, [r7, #0]
 8007cb2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007cb4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007cb6:	683a      	ldr	r2, [r7, #0]
 8007cb8:	88d2      	ldrh	r2, [r2, #6]
 8007cba:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	88db      	ldrh	r3, [r3, #6]
 8007cc0:	2b07      	cmp	r3, #7
 8007cc2:	bf28      	it	cs
 8007cc4:	2307      	movcs	r3, #7
 8007cc6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	89fa      	ldrh	r2, [r7, #14]
 8007ccc:	4619      	mov	r1, r3
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f001 fae9 	bl	80092a6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007cd4:	e085      	b.n	8007de2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	785a      	ldrb	r2, [r3, #1]
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	88db      	ldrh	r3, [r3, #6]
 8007ce4:	b2da      	uxtb	r2, r3
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007cec:	6939      	ldr	r1, [r7, #16]
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	88db      	ldrh	r3, [r3, #6]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f001 fb02 	bl	80092fe <USBD_CtlPrepareRx>
      break;
 8007cfa:	e072      	b.n	8007de2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	7850      	ldrb	r0, [r2, #1]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	6839      	ldr	r1, [r7, #0]
 8007d0c:	4798      	blx	r3
      break;
 8007d0e:	e068      	b.n	8007de2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	785b      	ldrb	r3, [r3, #1]
 8007d14:	2b0b      	cmp	r3, #11
 8007d16:	d852      	bhi.n	8007dbe <USBD_CDC_Setup+0x162>
 8007d18:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <USBD_CDC_Setup+0xc4>)
 8007d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1e:	bf00      	nop
 8007d20:	08007d51 	.word	0x08007d51
 8007d24:	08007dcd 	.word	0x08007dcd
 8007d28:	08007dbf 	.word	0x08007dbf
 8007d2c:	08007dbf 	.word	0x08007dbf
 8007d30:	08007dbf 	.word	0x08007dbf
 8007d34:	08007dbf 	.word	0x08007dbf
 8007d38:	08007dbf 	.word	0x08007dbf
 8007d3c:	08007dbf 	.word	0x08007dbf
 8007d40:	08007dbf 	.word	0x08007dbf
 8007d44:	08007dbf 	.word	0x08007dbf
 8007d48:	08007d7b 	.word	0x08007d7b
 8007d4c:	08007da5 	.word	0x08007da5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b03      	cmp	r3, #3
 8007d5a:	d107      	bne.n	8007d6c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007d5c:	f107 030a 	add.w	r3, r7, #10
 8007d60:	2202      	movs	r2, #2
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f001 fa9e 	bl	80092a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d6a:	e032      	b.n	8007dd2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f001 fa28 	bl	80091c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d74:	2303      	movs	r3, #3
 8007d76:	75fb      	strb	r3, [r7, #23]
          break;
 8007d78:	e02b      	b.n	8007dd2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d107      	bne.n	8007d96 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007d86:	f107 030d 	add.w	r3, r7, #13
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f001 fa89 	bl	80092a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d94:	e01d      	b.n	8007dd2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007d96:	6839      	ldr	r1, [r7, #0]
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f001 fa13 	bl	80091c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	75fb      	strb	r3, [r7, #23]
          break;
 8007da2:	e016      	b.n	8007dd2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b03      	cmp	r3, #3
 8007dae:	d00f      	beq.n	8007dd0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007db0:	6839      	ldr	r1, [r7, #0]
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f001 fa06 	bl	80091c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007db8:	2303      	movs	r3, #3
 8007dba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007dbc:	e008      	b.n	8007dd0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007dbe:	6839      	ldr	r1, [r7, #0]
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f001 f9ff 	bl	80091c4 <USBD_CtlError>
          ret = USBD_FAIL;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	75fb      	strb	r3, [r7, #23]
          break;
 8007dca:	e002      	b.n	8007dd2 <USBD_CDC_Setup+0x176>
          break;
 8007dcc:	bf00      	nop
 8007dce:	e008      	b.n	8007de2 <USBD_CDC_Setup+0x186>
          break;
 8007dd0:	bf00      	nop
      }
      break;
 8007dd2:	e006      	b.n	8007de2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007dd4:	6839      	ldr	r1, [r7, #0]
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f001 f9f4 	bl	80091c4 <USBD_CtlError>
      ret = USBD_FAIL;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	75fb      	strb	r3, [r7, #23]
      break;
 8007de0:	bf00      	nop
  }

  return (uint8_t)ret;
 8007de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	460b      	mov	r3, r1
 8007df6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007dfe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e04f      	b.n	8007eae <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e14:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007e16:	78fa      	ldrb	r2, [r7, #3]
 8007e18:	6879      	ldr	r1, [r7, #4]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	4413      	add	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	440b      	add	r3, r1
 8007e24:	3318      	adds	r3, #24
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d029      	beq.n	8007e80 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007e2c:	78fa      	ldrb	r2, [r7, #3]
 8007e2e:	6879      	ldr	r1, [r7, #4]
 8007e30:	4613      	mov	r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4413      	add	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	440b      	add	r3, r1
 8007e3a:	3318      	adds	r3, #24
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	78f9      	ldrb	r1, [r7, #3]
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	460b      	mov	r3, r1
 8007e44:	00db      	lsls	r3, r3, #3
 8007e46:	1a5b      	subs	r3, r3, r1
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4403      	add	r3, r0
 8007e4c:	3344      	adds	r3, #68	; 0x44
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	fbb2 f1f3 	udiv	r1, r2, r3
 8007e54:	fb03 f301 	mul.w	r3, r3, r1
 8007e58:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d110      	bne.n	8007e80 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007e5e:	78fa      	ldrb	r2, [r7, #3]
 8007e60:	6879      	ldr	r1, [r7, #4]
 8007e62:	4613      	mov	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4413      	add	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	440b      	add	r3, r1
 8007e6c:	3318      	adds	r3, #24
 8007e6e:	2200      	movs	r2, #0
 8007e70:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007e72:	78f9      	ldrb	r1, [r7, #3]
 8007e74:	2300      	movs	r3, #0
 8007e76:	2200      	movs	r2, #0
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f001 fffc 	bl	8009e76 <USBD_LL_Transmit>
 8007e7e:	e015      	b.n	8007eac <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00b      	beq.n	8007eac <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007ea8:	78fa      	ldrb	r2, [r7, #3]
 8007eaa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b084      	sub	sp, #16
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ec8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d101      	bne.n	8007ed8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	e015      	b.n	8007f04 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007ed8:	78fb      	ldrb	r3, [r7, #3]
 8007eda:	4619      	mov	r1, r3
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f002 f80c 	bl	8009efa <USBD_LL_GetRxDataSize>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007efe:	4611      	mov	r1, r2
 8007f00:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f1a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d101      	bne.n	8007f26 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e01b      	b.n	8007f5e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d015      	beq.n	8007f5c <USBD_CDC_EP0_RxReady+0x50>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007f36:	2bff      	cmp	r3, #255	; 0xff
 8007f38:	d010      	beq.n	8007f5c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007f48:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f50:	b292      	uxth	r2, r2
 8007f52:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	22ff      	movs	r2, #255	; 0xff
 8007f58:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
	...

08007f68 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2243      	movs	r2, #67	; 0x43
 8007f74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007f76:	4b03      	ldr	r3, [pc, #12]	; (8007f84 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	200000a4 	.word	0x200000a4

08007f88 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2243      	movs	r2, #67	; 0x43
 8007f94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007f96:	4b03      	ldr	r3, [pc, #12]	; (8007fa4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr
 8007fa4:	20000060 	.word	0x20000060

08007fa8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2243      	movs	r2, #67	; 0x43
 8007fb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007fb6:	4b03      	ldr	r3, [pc, #12]	; (8007fc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr
 8007fc4:	200000e8 	.word	0x200000e8

08007fc8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	220a      	movs	r2, #10
 8007fd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007fd6:	4b03      	ldr	r3, [pc, #12]	; (8007fe4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr
 8007fe4:	2000001c 	.word	0x2000001c

08007fe8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d101      	bne.n	8007ffc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	e004      	b.n	8008006 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008012:	b480      	push	{r7}
 8008014:	b087      	sub	sp, #28
 8008016:	af00      	add	r7, sp, #0
 8008018:	60f8      	str	r0, [r7, #12]
 800801a:	60b9      	str	r1, [r7, #8]
 800801c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008024:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d101      	bne.n	8008030 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800802c:	2303      	movs	r3, #3
 800802e:	e008      	b.n	8008042 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	371c      	adds	r7, #28
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800804e:	b480      	push	{r7}
 8008050:	b085      	sub	sp, #20
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800805e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d101      	bne.n	800806a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008066:	2303      	movs	r3, #3
 8008068:	e004      	b.n	8008074 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	683a      	ldr	r2, [r7, #0]
 800806e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3714      	adds	r7, #20
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800808e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008096:	2b00      	cmp	r3, #0
 8008098:	d101      	bne.n	800809e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800809a:	2303      	movs	r3, #3
 800809c:	e016      	b.n	80080cc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	7c1b      	ldrb	r3, [r3, #16]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d109      	bne.n	80080ba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080b0:	2101      	movs	r1, #1
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f001 ff00 	bl	8009eb8 <USBD_LL_PrepareReceive>
 80080b8:	e007      	b.n	80080ca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080c0:	2340      	movs	r3, #64	; 0x40
 80080c2:	2101      	movs	r1, #1
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f001 fef7 	bl	8009eb8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b086      	sub	sp, #24
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	4613      	mov	r3, r2
 80080e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80080e8:	2303      	movs	r3, #3
 80080ea:	e01f      	b.n	800812c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d003      	beq.n	8008112 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2201      	movs	r2, #1
 8008116:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	79fa      	ldrb	r2, [r7, #7]
 800811e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f001 fd73 	bl	8009c0c <USBD_LL_Init>
 8008126:	4603      	mov	r3, r0
 8008128:	75fb      	strb	r3, [r7, #23]

  return ret;
 800812a:	7dfb      	ldrb	r3, [r7, #23]
}
 800812c:	4618      	mov	r0, r3
 800812e:	3718      	adds	r7, #24
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800813e:	2300      	movs	r3, #0
 8008140:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d101      	bne.n	800814c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008148:	2303      	movs	r3, #3
 800814a:	e016      	b.n	800817a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	683a      	ldr	r2, [r7, #0]
 8008150:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800815a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00b      	beq.n	8008178 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008168:	f107 020e 	add.w	r2, r7, #14
 800816c:	4610      	mov	r0, r2
 800816e:	4798      	blx	r3
 8008170:	4602      	mov	r2, r0
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b082      	sub	sp, #8
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f001 fd8a 	bl	8009ca4 <USBD_LL_Start>
 8008190:	4603      	mov	r3, r0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800819a:	b480      	push	{r7}
 800819c:	b083      	sub	sp, #12
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	460b      	mov	r3, r1
 80081ba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80081bc:	2303      	movs	r3, #3
 80081be:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d009      	beq.n	80081de <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	78fa      	ldrb	r2, [r7, #3]
 80081d4:	4611      	mov	r1, r2
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	4798      	blx	r3
 80081da:	4603      	mov	r3, r0
 80081dc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80081de:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	460b      	mov	r3, r1
 80081f2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d007      	beq.n	800820e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	78fa      	ldrb	r2, [r7, #3]
 8008208:	4611      	mov	r1, r2
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	4798      	blx	r3
  }

  return USBD_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3708      	adds	r7, #8
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008228:	6839      	ldr	r1, [r7, #0]
 800822a:	4618      	mov	r0, r3
 800822c:	f000 ff90 	bl	8009150 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800823e:	461a      	mov	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800824c:	f003 031f 	and.w	r3, r3, #31
 8008250:	2b02      	cmp	r3, #2
 8008252:	d01a      	beq.n	800828a <USBD_LL_SetupStage+0x72>
 8008254:	2b02      	cmp	r3, #2
 8008256:	d822      	bhi.n	800829e <USBD_LL_SetupStage+0x86>
 8008258:	2b00      	cmp	r3, #0
 800825a:	d002      	beq.n	8008262 <USBD_LL_SetupStage+0x4a>
 800825c:	2b01      	cmp	r3, #1
 800825e:	d00a      	beq.n	8008276 <USBD_LL_SetupStage+0x5e>
 8008260:	e01d      	b.n	800829e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008268:	4619      	mov	r1, r3
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fa62 	bl	8008734 <USBD_StdDevReq>
 8008270:	4603      	mov	r3, r0
 8008272:	73fb      	strb	r3, [r7, #15]
      break;
 8008274:	e020      	b.n	80082b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800827c:	4619      	mov	r1, r3
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fac6 	bl	8008810 <USBD_StdItfReq>
 8008284:	4603      	mov	r3, r0
 8008286:	73fb      	strb	r3, [r7, #15]
      break;
 8008288:	e016      	b.n	80082b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008290:	4619      	mov	r1, r3
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fb05 	bl	80088a2 <USBD_StdEPReq>
 8008298:	4603      	mov	r3, r0
 800829a:	73fb      	strb	r3, [r7, #15]
      break;
 800829c:	e00c      	b.n	80082b8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80082a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	4619      	mov	r1, r3
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f001 fd59 	bl	8009d64 <USBD_LL_StallEP>
 80082b2:	4603      	mov	r3, r0
 80082b4:	73fb      	strb	r3, [r7, #15]
      break;
 80082b6:	bf00      	nop
  }

  return ret;
 80082b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b086      	sub	sp, #24
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	60f8      	str	r0, [r7, #12]
 80082ca:	460b      	mov	r3, r1
 80082cc:	607a      	str	r2, [r7, #4]
 80082ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80082d0:	7afb      	ldrb	r3, [r7, #11]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d138      	bne.n	8008348 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80082dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082e4:	2b03      	cmp	r3, #3
 80082e6:	d14a      	bne.n	800837e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	689a      	ldr	r2, [r3, #8]
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d913      	bls.n	800831c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	689a      	ldr	r2, [r3, #8]
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	1ad2      	subs	r2, r2, r3
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	68da      	ldr	r2, [r3, #12]
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	4293      	cmp	r3, r2
 800830c:	bf28      	it	cs
 800830e:	4613      	movcs	r3, r2
 8008310:	461a      	mov	r2, r3
 8008312:	6879      	ldr	r1, [r7, #4]
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f001 f80f 	bl	8009338 <USBD_CtlContinueRx>
 800831a:	e030      	b.n	800837e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008322:	b2db      	uxtb	r3, r3
 8008324:	2b03      	cmp	r3, #3
 8008326:	d10b      	bne.n	8008340 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d005      	beq.n	8008340 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f001 f80a 	bl	800935a <USBD_CtlSendStatus>
 8008346:	e01a      	b.n	800837e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800834e:	b2db      	uxtb	r3, r3
 8008350:	2b03      	cmp	r3, #3
 8008352:	d114      	bne.n	800837e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00e      	beq.n	800837e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	7afa      	ldrb	r2, [r7, #11]
 800836a:	4611      	mov	r1, r2
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	4798      	blx	r3
 8008370:	4603      	mov	r3, r0
 8008372:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008374:	7dfb      	ldrb	r3, [r7, #23]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800837a:	7dfb      	ldrb	r3, [r7, #23]
 800837c:	e000      	b.n	8008380 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3718      	adds	r7, #24
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	460b      	mov	r3, r1
 8008392:	607a      	str	r2, [r7, #4]
 8008394:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008396:	7afb      	ldrb	r3, [r7, #11]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d16b      	bne.n	8008474 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	3314      	adds	r3, #20
 80083a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	d156      	bne.n	800845a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	689a      	ldr	r2, [r3, #8]
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d914      	bls.n	80083e2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	689a      	ldr	r2, [r3, #8]
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	1ad2      	subs	r2, r2, r3
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	461a      	mov	r2, r3
 80083cc:	6879      	ldr	r1, [r7, #4]
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f000 ff84 	bl	80092dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083d4:	2300      	movs	r3, #0
 80083d6:	2200      	movs	r2, #0
 80083d8:	2100      	movs	r1, #0
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f001 fd6c 	bl	8009eb8 <USBD_LL_PrepareReceive>
 80083e0:	e03b      	b.n	800845a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	68da      	ldr	r2, [r3, #12]
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d11c      	bne.n	8008428 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	685a      	ldr	r2, [r3, #4]
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d316      	bcc.n	8008428 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	685a      	ldr	r2, [r3, #4]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008404:	429a      	cmp	r2, r3
 8008406:	d20f      	bcs.n	8008428 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008408:	2200      	movs	r2, #0
 800840a:	2100      	movs	r1, #0
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f000 ff65 	bl	80092dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2200      	movs	r2, #0
 8008416:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800841a:	2300      	movs	r3, #0
 800841c:	2200      	movs	r2, #0
 800841e:	2100      	movs	r1, #0
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f001 fd49 	bl	8009eb8 <USBD_LL_PrepareReceive>
 8008426:	e018      	b.n	800845a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800842e:	b2db      	uxtb	r3, r3
 8008430:	2b03      	cmp	r3, #3
 8008432:	d10b      	bne.n	800844c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d005      	beq.n	800844c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800844c:	2180      	movs	r1, #128	; 0x80
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f001 fc88 	bl	8009d64 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f000 ff93 	bl	8009380 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008460:	2b01      	cmp	r3, #1
 8008462:	d122      	bne.n	80084aa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f7ff fe98 	bl	800819a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008472:	e01a      	b.n	80084aa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b03      	cmp	r3, #3
 800847e:	d114      	bne.n	80084aa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008486:	695b      	ldr	r3, [r3, #20]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00e      	beq.n	80084aa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	7afa      	ldrb	r2, [r7, #11]
 8008496:	4611      	mov	r1, r2
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	4798      	blx	r3
 800849c:	4603      	mov	r3, r0
 800849e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80084a0:	7dfb      	ldrb	r3, [r7, #23]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d001      	beq.n	80084aa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80084a6:	7dfb      	ldrb	r3, [r7, #23]
 80084a8:	e000      	b.n	80084ac <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3718      	adds	r7, #24
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d101      	bne.n	80084e8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e02f      	b.n	8008548 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00f      	beq.n	8008512 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d009      	beq.n	8008512 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	6852      	ldr	r2, [r2, #4]
 800850a:	b2d2      	uxtb	r2, r2
 800850c:	4611      	mov	r1, r2
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008512:	2340      	movs	r3, #64	; 0x40
 8008514:	2200      	movs	r2, #0
 8008516:	2100      	movs	r1, #0
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f001 fbde 	bl	8009cda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2201      	movs	r2, #1
 8008522:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2240      	movs	r2, #64	; 0x40
 800852a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800852e:	2340      	movs	r3, #64	; 0x40
 8008530:	2200      	movs	r2, #0
 8008532:	2180      	movs	r1, #128	; 0x80
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f001 fbd0 	bl	8009cda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2201      	movs	r2, #1
 800853e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2240      	movs	r2, #64	; 0x40
 8008544:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3708      	adds	r7, #8
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	460b      	mov	r3, r1
 800855a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	78fa      	ldrb	r2, [r7, #3]
 8008560:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800857e:	b2da      	uxtb	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2204      	movs	r2, #4
 800858a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800858e:	2300      	movs	r3, #0
}
 8008590:	4618      	mov	r0, r3
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	2b04      	cmp	r3, #4
 80085ae:	d106      	bne.n	80085be <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80085b6:	b2da      	uxtb	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d101      	bne.n	80085e2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80085de:	2303      	movs	r3, #3
 80085e0:	e012      	b.n	8008608 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	2b03      	cmp	r3, #3
 80085ec:	d10b      	bne.n	8008606 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f4:	69db      	ldr	r3, [r3, #28]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d005      	beq.n	8008606 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008600:	69db      	ldr	r3, [r3, #28]
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	3708      	adds	r7, #8
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	460b      	mov	r3, r1
 800861a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008622:	2b00      	cmp	r3, #0
 8008624:	d101      	bne.n	800862a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008626:	2303      	movs	r3, #3
 8008628:	e014      	b.n	8008654 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008630:	b2db      	uxtb	r3, r3
 8008632:	2b03      	cmp	r3, #3
 8008634:	d10d      	bne.n	8008652 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800863c:	6a1b      	ldr	r3, [r3, #32]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d007      	beq.n	8008652 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008648:	6a1b      	ldr	r3, [r3, #32]
 800864a:	78fa      	ldrb	r2, [r7, #3]
 800864c:	4611      	mov	r1, r2
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	460b      	mov	r3, r1
 8008666:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800866e:	2b00      	cmp	r3, #0
 8008670:	d101      	bne.n	8008676 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008672:	2303      	movs	r3, #3
 8008674:	e014      	b.n	80086a0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b03      	cmp	r3, #3
 8008680:	d10d      	bne.n	800869e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868a:	2b00      	cmp	r3, #0
 800868c:	d007      	beq.n	800869e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008696:	78fa      	ldrb	r2, [r7, #3]
 8008698:	4611      	mov	r1, r2
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	370c      	adds	r7, #12
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr

080086be <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b082      	sub	sp, #8
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d009      	beq.n	80086ec <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	6852      	ldr	r2, [r2, #4]
 80086e4:	b2d2      	uxtb	r2, r2
 80086e6:	4611      	mov	r1, r2
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	4798      	blx	r3
  }

  return USBD_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3708      	adds	r7, #8
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80086f6:	b480      	push	{r7}
 80086f8:	b087      	sub	sp, #28
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	3301      	adds	r3, #1
 800870c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008714:	8a3b      	ldrh	r3, [r7, #16]
 8008716:	021b      	lsls	r3, r3, #8
 8008718:	b21a      	sxth	r2, r3
 800871a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800871e:	4313      	orrs	r3, r2
 8008720:	b21b      	sxth	r3, r3
 8008722:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008724:	89fb      	ldrh	r3, [r7, #14]
}
 8008726:	4618      	mov	r0, r3
 8008728:	371c      	adds	r7, #28
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
	...

08008734 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800874a:	2b40      	cmp	r3, #64	; 0x40
 800874c:	d005      	beq.n	800875a <USBD_StdDevReq+0x26>
 800874e:	2b40      	cmp	r3, #64	; 0x40
 8008750:	d853      	bhi.n	80087fa <USBD_StdDevReq+0xc6>
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00b      	beq.n	800876e <USBD_StdDevReq+0x3a>
 8008756:	2b20      	cmp	r3, #32
 8008758:	d14f      	bne.n	80087fa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	6839      	ldr	r1, [r7, #0]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	4798      	blx	r3
 8008768:	4603      	mov	r3, r0
 800876a:	73fb      	strb	r3, [r7, #15]
      break;
 800876c:	e04a      	b.n	8008804 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	785b      	ldrb	r3, [r3, #1]
 8008772:	2b09      	cmp	r3, #9
 8008774:	d83b      	bhi.n	80087ee <USBD_StdDevReq+0xba>
 8008776:	a201      	add	r2, pc, #4	; (adr r2, 800877c <USBD_StdDevReq+0x48>)
 8008778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877c:	080087d1 	.word	0x080087d1
 8008780:	080087e5 	.word	0x080087e5
 8008784:	080087ef 	.word	0x080087ef
 8008788:	080087db 	.word	0x080087db
 800878c:	080087ef 	.word	0x080087ef
 8008790:	080087af 	.word	0x080087af
 8008794:	080087a5 	.word	0x080087a5
 8008798:	080087ef 	.word	0x080087ef
 800879c:	080087c7 	.word	0x080087c7
 80087a0:	080087b9 	.word	0x080087b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f9de 	bl	8008b68 <USBD_GetDescriptor>
          break;
 80087ac:	e024      	b.n	80087f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fb43 	bl	8008e3c <USBD_SetAddress>
          break;
 80087b6:	e01f      	b.n	80087f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80087b8:	6839      	ldr	r1, [r7, #0]
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fb82 	bl	8008ec4 <USBD_SetConfig>
 80087c0:	4603      	mov	r3, r0
 80087c2:	73fb      	strb	r3, [r7, #15]
          break;
 80087c4:	e018      	b.n	80087f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80087c6:	6839      	ldr	r1, [r7, #0]
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 fc21 	bl	8009010 <USBD_GetConfig>
          break;
 80087ce:	e013      	b.n	80087f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80087d0:	6839      	ldr	r1, [r7, #0]
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fc52 	bl	800907c <USBD_GetStatus>
          break;
 80087d8:	e00e      	b.n	80087f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fc81 	bl	80090e4 <USBD_SetFeature>
          break;
 80087e2:	e009      	b.n	80087f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80087e4:	6839      	ldr	r1, [r7, #0]
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fc90 	bl	800910c <USBD_ClrFeature>
          break;
 80087ec:	e004      	b.n	80087f8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80087ee:	6839      	ldr	r1, [r7, #0]
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fce7 	bl	80091c4 <USBD_CtlError>
          break;
 80087f6:	bf00      	nop
      }
      break;
 80087f8:	e004      	b.n	8008804 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80087fa:	6839      	ldr	r1, [r7, #0]
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 fce1 	bl	80091c4 <USBD_CtlError>
      break;
 8008802:	bf00      	nop
  }

  return ret;
 8008804:	7bfb      	ldrb	r3, [r7, #15]
}
 8008806:	4618      	mov	r0, r3
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop

08008810 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008826:	2b40      	cmp	r3, #64	; 0x40
 8008828:	d005      	beq.n	8008836 <USBD_StdItfReq+0x26>
 800882a:	2b40      	cmp	r3, #64	; 0x40
 800882c:	d82f      	bhi.n	800888e <USBD_StdItfReq+0x7e>
 800882e:	2b00      	cmp	r3, #0
 8008830:	d001      	beq.n	8008836 <USBD_StdItfReq+0x26>
 8008832:	2b20      	cmp	r3, #32
 8008834:	d12b      	bne.n	800888e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800883c:	b2db      	uxtb	r3, r3
 800883e:	3b01      	subs	r3, #1
 8008840:	2b02      	cmp	r3, #2
 8008842:	d81d      	bhi.n	8008880 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	889b      	ldrh	r3, [r3, #4]
 8008848:	b2db      	uxtb	r3, r3
 800884a:	2b01      	cmp	r3, #1
 800884c:	d813      	bhi.n	8008876 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	4798      	blx	r3
 800885c:	4603      	mov	r3, r0
 800885e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	88db      	ldrh	r3, [r3, #6]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d110      	bne.n	800888a <USBD_StdItfReq+0x7a>
 8008868:	7bfb      	ldrb	r3, [r7, #15]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10d      	bne.n	800888a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fd73 	bl	800935a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008874:	e009      	b.n	800888a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008876:	6839      	ldr	r1, [r7, #0]
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 fca3 	bl	80091c4 <USBD_CtlError>
          break;
 800887e:	e004      	b.n	800888a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008880:	6839      	ldr	r1, [r7, #0]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fc9e 	bl	80091c4 <USBD_CtlError>
          break;
 8008888:	e000      	b.n	800888c <USBD_StdItfReq+0x7c>
          break;
 800888a:	bf00      	nop
      }
      break;
 800888c:	e004      	b.n	8008898 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800888e:	6839      	ldr	r1, [r7, #0]
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 fc97 	bl	80091c4 <USBD_CtlError>
      break;
 8008896:	bf00      	nop
  }

  return ret;
 8008898:	7bfb      	ldrb	r3, [r7, #15]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b084      	sub	sp, #16
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80088ac:	2300      	movs	r3, #0
 80088ae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	889b      	ldrh	r3, [r3, #4]
 80088b4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088be:	2b40      	cmp	r3, #64	; 0x40
 80088c0:	d007      	beq.n	80088d2 <USBD_StdEPReq+0x30>
 80088c2:	2b40      	cmp	r3, #64	; 0x40
 80088c4:	f200 8145 	bhi.w	8008b52 <USBD_StdEPReq+0x2b0>
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00c      	beq.n	80088e6 <USBD_StdEPReq+0x44>
 80088cc:	2b20      	cmp	r3, #32
 80088ce:	f040 8140 	bne.w	8008b52 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	6839      	ldr	r1, [r7, #0]
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	4798      	blx	r3
 80088e0:	4603      	mov	r3, r0
 80088e2:	73fb      	strb	r3, [r7, #15]
      break;
 80088e4:	e13a      	b.n	8008b5c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	785b      	ldrb	r3, [r3, #1]
 80088ea:	2b03      	cmp	r3, #3
 80088ec:	d007      	beq.n	80088fe <USBD_StdEPReq+0x5c>
 80088ee:	2b03      	cmp	r3, #3
 80088f0:	f300 8129 	bgt.w	8008b46 <USBD_StdEPReq+0x2a4>
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d07f      	beq.n	80089f8 <USBD_StdEPReq+0x156>
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d03c      	beq.n	8008976 <USBD_StdEPReq+0xd4>
 80088fc:	e123      	b.n	8008b46 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b02      	cmp	r3, #2
 8008908:	d002      	beq.n	8008910 <USBD_StdEPReq+0x6e>
 800890a:	2b03      	cmp	r3, #3
 800890c:	d016      	beq.n	800893c <USBD_StdEPReq+0x9a>
 800890e:	e02c      	b.n	800896a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008910:	7bbb      	ldrb	r3, [r7, #14]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00d      	beq.n	8008932 <USBD_StdEPReq+0x90>
 8008916:	7bbb      	ldrb	r3, [r7, #14]
 8008918:	2b80      	cmp	r3, #128	; 0x80
 800891a:	d00a      	beq.n	8008932 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800891c:	7bbb      	ldrb	r3, [r7, #14]
 800891e:	4619      	mov	r1, r3
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f001 fa1f 	bl	8009d64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008926:	2180      	movs	r1, #128	; 0x80
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f001 fa1b 	bl	8009d64 <USBD_LL_StallEP>
 800892e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008930:	e020      	b.n	8008974 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008932:	6839      	ldr	r1, [r7, #0]
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fc45 	bl	80091c4 <USBD_CtlError>
              break;
 800893a:	e01b      	b.n	8008974 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	885b      	ldrh	r3, [r3, #2]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10e      	bne.n	8008962 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008944:	7bbb      	ldrb	r3, [r7, #14]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00b      	beq.n	8008962 <USBD_StdEPReq+0xc0>
 800894a:	7bbb      	ldrb	r3, [r7, #14]
 800894c:	2b80      	cmp	r3, #128	; 0x80
 800894e:	d008      	beq.n	8008962 <USBD_StdEPReq+0xc0>
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	88db      	ldrh	r3, [r3, #6]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d104      	bne.n	8008962 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008958:	7bbb      	ldrb	r3, [r7, #14]
 800895a:	4619      	mov	r1, r3
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f001 fa01 	bl	8009d64 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 fcf9 	bl	800935a <USBD_CtlSendStatus>

              break;
 8008968:	e004      	b.n	8008974 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800896a:	6839      	ldr	r1, [r7, #0]
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 fc29 	bl	80091c4 <USBD_CtlError>
              break;
 8008972:	bf00      	nop
          }
          break;
 8008974:	e0ec      	b.n	8008b50 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2b02      	cmp	r3, #2
 8008980:	d002      	beq.n	8008988 <USBD_StdEPReq+0xe6>
 8008982:	2b03      	cmp	r3, #3
 8008984:	d016      	beq.n	80089b4 <USBD_StdEPReq+0x112>
 8008986:	e030      	b.n	80089ea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008988:	7bbb      	ldrb	r3, [r7, #14]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00d      	beq.n	80089aa <USBD_StdEPReq+0x108>
 800898e:	7bbb      	ldrb	r3, [r7, #14]
 8008990:	2b80      	cmp	r3, #128	; 0x80
 8008992:	d00a      	beq.n	80089aa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008994:	7bbb      	ldrb	r3, [r7, #14]
 8008996:	4619      	mov	r1, r3
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f001 f9e3 	bl	8009d64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800899e:	2180      	movs	r1, #128	; 0x80
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f001 f9df 	bl	8009d64 <USBD_LL_StallEP>
 80089a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089a8:	e025      	b.n	80089f6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80089aa:	6839      	ldr	r1, [r7, #0]
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 fc09 	bl	80091c4 <USBD_CtlError>
              break;
 80089b2:	e020      	b.n	80089f6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	885b      	ldrh	r3, [r3, #2]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d11b      	bne.n	80089f4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80089bc:	7bbb      	ldrb	r3, [r7, #14]
 80089be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d004      	beq.n	80089d0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80089c6:	7bbb      	ldrb	r3, [r7, #14]
 80089c8:	4619      	mov	r1, r3
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f001 f9e9 	bl	8009da2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fcc2 	bl	800935a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	4798      	blx	r3
 80089e4:	4603      	mov	r3, r0
 80089e6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80089e8:	e004      	b.n	80089f4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80089ea:	6839      	ldr	r1, [r7, #0]
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fbe9 	bl	80091c4 <USBD_CtlError>
              break;
 80089f2:	e000      	b.n	80089f6 <USBD_StdEPReq+0x154>
              break;
 80089f4:	bf00      	nop
          }
          break;
 80089f6:	e0ab      	b.n	8008b50 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	d002      	beq.n	8008a0a <USBD_StdEPReq+0x168>
 8008a04:	2b03      	cmp	r3, #3
 8008a06:	d032      	beq.n	8008a6e <USBD_StdEPReq+0x1cc>
 8008a08:	e097      	b.n	8008b3a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a0a:	7bbb      	ldrb	r3, [r7, #14]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d007      	beq.n	8008a20 <USBD_StdEPReq+0x17e>
 8008a10:	7bbb      	ldrb	r3, [r7, #14]
 8008a12:	2b80      	cmp	r3, #128	; 0x80
 8008a14:	d004      	beq.n	8008a20 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fbd3 	bl	80091c4 <USBD_CtlError>
                break;
 8008a1e:	e091      	b.n	8008b44 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	da0b      	bge.n	8008a40 <USBD_StdEPReq+0x19e>
 8008a28:	7bbb      	ldrb	r3, [r7, #14]
 8008a2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a2e:	4613      	mov	r3, r2
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	3310      	adds	r3, #16
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	3304      	adds	r3, #4
 8008a3e:	e00b      	b.n	8008a58 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a40:	7bbb      	ldrb	r3, [r7, #14]
 8008a42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a46:	4613      	mov	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	4413      	add	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	4413      	add	r3, r2
 8008a56:	3304      	adds	r3, #4
 8008a58:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	2202      	movs	r2, #2
 8008a64:	4619      	mov	r1, r3
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fc1d 	bl	80092a6 <USBD_CtlSendData>
              break;
 8008a6c:	e06a      	b.n	8008b44 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	da11      	bge.n	8008a9a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a76:	7bbb      	ldrb	r3, [r7, #14]
 8008a78:	f003 020f 	and.w	r2, r3, #15
 8008a7c:	6879      	ldr	r1, [r7, #4]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	4413      	add	r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	440b      	add	r3, r1
 8008a88:	3324      	adds	r3, #36	; 0x24
 8008a8a:	881b      	ldrh	r3, [r3, #0]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d117      	bne.n	8008ac0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008a90:	6839      	ldr	r1, [r7, #0]
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fb96 	bl	80091c4 <USBD_CtlError>
                  break;
 8008a98:	e054      	b.n	8008b44 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a9a:	7bbb      	ldrb	r3, [r7, #14]
 8008a9c:	f003 020f 	and.w	r2, r3, #15
 8008aa0:	6879      	ldr	r1, [r7, #4]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	4413      	add	r3, r2
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	440b      	add	r3, r1
 8008aac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008ab0:	881b      	ldrh	r3, [r3, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d104      	bne.n	8008ac0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fb83 	bl	80091c4 <USBD_CtlError>
                  break;
 8008abe:	e041      	b.n	8008b44 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ac0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	da0b      	bge.n	8008ae0 <USBD_StdEPReq+0x23e>
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
 8008aca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ace:	4613      	mov	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	3310      	adds	r3, #16
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	4413      	add	r3, r2
 8008adc:	3304      	adds	r3, #4
 8008ade:	e00b      	b.n	8008af8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ae0:	7bbb      	ldrb	r3, [r7, #14]
 8008ae2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4413      	add	r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	4413      	add	r3, r2
 8008af6:	3304      	adds	r3, #4
 8008af8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008afa:	7bbb      	ldrb	r3, [r7, #14]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d002      	beq.n	8008b06 <USBD_StdEPReq+0x264>
 8008b00:	7bbb      	ldrb	r3, [r7, #14]
 8008b02:	2b80      	cmp	r3, #128	; 0x80
 8008b04:	d103      	bne.n	8008b0e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	601a      	str	r2, [r3, #0]
 8008b0c:	e00e      	b.n	8008b2c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008b0e:	7bbb      	ldrb	r3, [r7, #14]
 8008b10:	4619      	mov	r1, r3
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f001 f964 	bl	8009de0 <USBD_LL_IsStallEP>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d003      	beq.n	8008b26 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	2201      	movs	r2, #1
 8008b22:	601a      	str	r2, [r3, #0]
 8008b24:	e002      	b.n	8008b2c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	2202      	movs	r2, #2
 8008b30:	4619      	mov	r1, r3
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 fbb7 	bl	80092a6 <USBD_CtlSendData>
              break;
 8008b38:	e004      	b.n	8008b44 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fb41 	bl	80091c4 <USBD_CtlError>
              break;
 8008b42:	bf00      	nop
          }
          break;
 8008b44:	e004      	b.n	8008b50 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 fb3b 	bl	80091c4 <USBD_CtlError>
          break;
 8008b4e:	bf00      	nop
      }
      break;
 8008b50:	e004      	b.n	8008b5c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008b52:	6839      	ldr	r1, [r7, #0]
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 fb35 	bl	80091c4 <USBD_CtlError>
      break;
 8008b5a:	bf00      	nop
  }

  return ret;
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
	...

08008b68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b72:	2300      	movs	r3, #0
 8008b74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b76:	2300      	movs	r3, #0
 8008b78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	885b      	ldrh	r3, [r3, #2]
 8008b82:	0a1b      	lsrs	r3, r3, #8
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	3b01      	subs	r3, #1
 8008b88:	2b06      	cmp	r3, #6
 8008b8a:	f200 8128 	bhi.w	8008dde <USBD_GetDescriptor+0x276>
 8008b8e:	a201      	add	r2, pc, #4	; (adr r2, 8008b94 <USBD_GetDescriptor+0x2c>)
 8008b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b94:	08008bb1 	.word	0x08008bb1
 8008b98:	08008bc9 	.word	0x08008bc9
 8008b9c:	08008c09 	.word	0x08008c09
 8008ba0:	08008ddf 	.word	0x08008ddf
 8008ba4:	08008ddf 	.word	0x08008ddf
 8008ba8:	08008d7f 	.word	0x08008d7f
 8008bac:	08008dab 	.word	0x08008dab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	7c12      	ldrb	r2, [r2, #16]
 8008bbc:	f107 0108 	add.w	r1, r7, #8
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	4798      	blx	r3
 8008bc4:	60f8      	str	r0, [r7, #12]
      break;
 8008bc6:	e112      	b.n	8008dee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	7c1b      	ldrb	r3, [r3, #16]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d10d      	bne.n	8008bec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd8:	f107 0208 	add.w	r2, r7, #8
 8008bdc:	4610      	mov	r0, r2
 8008bde:	4798      	blx	r3
 8008be0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	3301      	adds	r3, #1
 8008be6:	2202      	movs	r2, #2
 8008be8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008bea:	e100      	b.n	8008dee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf4:	f107 0208 	add.w	r2, r7, #8
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	4798      	blx	r3
 8008bfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	3301      	adds	r3, #1
 8008c02:	2202      	movs	r2, #2
 8008c04:	701a      	strb	r2, [r3, #0]
      break;
 8008c06:	e0f2      	b.n	8008dee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	885b      	ldrh	r3, [r3, #2]
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b05      	cmp	r3, #5
 8008c10:	f200 80ac 	bhi.w	8008d6c <USBD_GetDescriptor+0x204>
 8008c14:	a201      	add	r2, pc, #4	; (adr r2, 8008c1c <USBD_GetDescriptor+0xb4>)
 8008c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1a:	bf00      	nop
 8008c1c:	08008c35 	.word	0x08008c35
 8008c20:	08008c69 	.word	0x08008c69
 8008c24:	08008c9d 	.word	0x08008c9d
 8008c28:	08008cd1 	.word	0x08008cd1
 8008c2c:	08008d05 	.word	0x08008d05
 8008c30:	08008d39 	.word	0x08008d39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00b      	beq.n	8008c58 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	7c12      	ldrb	r2, [r2, #16]
 8008c4c:	f107 0108 	add.w	r1, r7, #8
 8008c50:	4610      	mov	r0, r2
 8008c52:	4798      	blx	r3
 8008c54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c56:	e091      	b.n	8008d7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c58:	6839      	ldr	r1, [r7, #0]
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 fab2 	bl	80091c4 <USBD_CtlError>
            err++;
 8008c60:	7afb      	ldrb	r3, [r7, #11]
 8008c62:	3301      	adds	r3, #1
 8008c64:	72fb      	strb	r3, [r7, #11]
          break;
 8008c66:	e089      	b.n	8008d7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00b      	beq.n	8008c8c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	7c12      	ldrb	r2, [r2, #16]
 8008c80:	f107 0108 	add.w	r1, r7, #8
 8008c84:	4610      	mov	r0, r2
 8008c86:	4798      	blx	r3
 8008c88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c8a:	e077      	b.n	8008d7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c8c:	6839      	ldr	r1, [r7, #0]
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fa98 	bl	80091c4 <USBD_CtlError>
            err++;
 8008c94:	7afb      	ldrb	r3, [r7, #11]
 8008c96:	3301      	adds	r3, #1
 8008c98:	72fb      	strb	r3, [r7, #11]
          break;
 8008c9a:	e06f      	b.n	8008d7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00b      	beq.n	8008cc0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	7c12      	ldrb	r2, [r2, #16]
 8008cb4:	f107 0108 	add.w	r1, r7, #8
 8008cb8:	4610      	mov	r0, r2
 8008cba:	4798      	blx	r3
 8008cbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cbe:	e05d      	b.n	8008d7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 fa7e 	bl	80091c4 <USBD_CtlError>
            err++;
 8008cc8:	7afb      	ldrb	r3, [r7, #11]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	72fb      	strb	r3, [r7, #11]
          break;
 8008cce:	e055      	b.n	8008d7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00b      	beq.n	8008cf4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	7c12      	ldrb	r2, [r2, #16]
 8008ce8:	f107 0108 	add.w	r1, r7, #8
 8008cec:	4610      	mov	r0, r2
 8008cee:	4798      	blx	r3
 8008cf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cf2:	e043      	b.n	8008d7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cf4:	6839      	ldr	r1, [r7, #0]
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fa64 	bl	80091c4 <USBD_CtlError>
            err++;
 8008cfc:	7afb      	ldrb	r3, [r7, #11]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	72fb      	strb	r3, [r7, #11]
          break;
 8008d02:	e03b      	b.n	8008d7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d0a:	695b      	ldr	r3, [r3, #20]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00b      	beq.n	8008d28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d16:	695b      	ldr	r3, [r3, #20]
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	7c12      	ldrb	r2, [r2, #16]
 8008d1c:	f107 0108 	add.w	r1, r7, #8
 8008d20:	4610      	mov	r0, r2
 8008d22:	4798      	blx	r3
 8008d24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d26:	e029      	b.n	8008d7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d28:	6839      	ldr	r1, [r7, #0]
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fa4a 	bl	80091c4 <USBD_CtlError>
            err++;
 8008d30:	7afb      	ldrb	r3, [r7, #11]
 8008d32:	3301      	adds	r3, #1
 8008d34:	72fb      	strb	r3, [r7, #11]
          break;
 8008d36:	e021      	b.n	8008d7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d3e:	699b      	ldr	r3, [r3, #24]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00b      	beq.n	8008d5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	7c12      	ldrb	r2, [r2, #16]
 8008d50:	f107 0108 	add.w	r1, r7, #8
 8008d54:	4610      	mov	r0, r2
 8008d56:	4798      	blx	r3
 8008d58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d5a:	e00f      	b.n	8008d7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d5c:	6839      	ldr	r1, [r7, #0]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fa30 	bl	80091c4 <USBD_CtlError>
            err++;
 8008d64:	7afb      	ldrb	r3, [r7, #11]
 8008d66:	3301      	adds	r3, #1
 8008d68:	72fb      	strb	r3, [r7, #11]
          break;
 8008d6a:	e007      	b.n	8008d7c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008d6c:	6839      	ldr	r1, [r7, #0]
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fa28 	bl	80091c4 <USBD_CtlError>
          err++;
 8008d74:	7afb      	ldrb	r3, [r7, #11]
 8008d76:	3301      	adds	r3, #1
 8008d78:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008d7a:	bf00      	nop
      }
      break;
 8008d7c:	e037      	b.n	8008dee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	7c1b      	ldrb	r3, [r3, #16]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d109      	bne.n	8008d9a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d8e:	f107 0208 	add.w	r2, r7, #8
 8008d92:	4610      	mov	r0, r2
 8008d94:	4798      	blx	r3
 8008d96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d98:	e029      	b.n	8008dee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fa11 	bl	80091c4 <USBD_CtlError>
        err++;
 8008da2:	7afb      	ldrb	r3, [r7, #11]
 8008da4:	3301      	adds	r3, #1
 8008da6:	72fb      	strb	r3, [r7, #11]
      break;
 8008da8:	e021      	b.n	8008dee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	7c1b      	ldrb	r3, [r3, #16]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d10d      	bne.n	8008dce <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dba:	f107 0208 	add.w	r2, r7, #8
 8008dbe:	4610      	mov	r0, r2
 8008dc0:	4798      	blx	r3
 8008dc2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	2207      	movs	r2, #7
 8008dca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008dcc:	e00f      	b.n	8008dee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f9f7 	bl	80091c4 <USBD_CtlError>
        err++;
 8008dd6:	7afb      	ldrb	r3, [r7, #11]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	72fb      	strb	r3, [r7, #11]
      break;
 8008ddc:	e007      	b.n	8008dee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008dde:	6839      	ldr	r1, [r7, #0]
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f9ef 	bl	80091c4 <USBD_CtlError>
      err++;
 8008de6:	7afb      	ldrb	r3, [r7, #11]
 8008de8:	3301      	adds	r3, #1
 8008dea:	72fb      	strb	r3, [r7, #11]
      break;
 8008dec:	bf00      	nop
  }

  if (err != 0U)
 8008dee:	7afb      	ldrb	r3, [r7, #11]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d11e      	bne.n	8008e32 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	88db      	ldrh	r3, [r3, #6]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d016      	beq.n	8008e2a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008dfc:	893b      	ldrh	r3, [r7, #8]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00e      	beq.n	8008e20 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	88da      	ldrh	r2, [r3, #6]
 8008e06:	893b      	ldrh	r3, [r7, #8]
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	bf28      	it	cs
 8008e0c:	4613      	movcs	r3, r2
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e12:	893b      	ldrh	r3, [r7, #8]
 8008e14:	461a      	mov	r2, r3
 8008e16:	68f9      	ldr	r1, [r7, #12]
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 fa44 	bl	80092a6 <USBD_CtlSendData>
 8008e1e:	e009      	b.n	8008e34 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008e20:	6839      	ldr	r1, [r7, #0]
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f9ce 	bl	80091c4 <USBD_CtlError>
 8008e28:	e004      	b.n	8008e34 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 fa95 	bl	800935a <USBD_CtlSendStatus>
 8008e30:	e000      	b.n	8008e34 <USBD_GetDescriptor+0x2cc>
    return;
 8008e32:	bf00      	nop
  }
}
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop

08008e3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	889b      	ldrh	r3, [r3, #4]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d131      	bne.n	8008eb2 <USBD_SetAddress+0x76>
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	88db      	ldrh	r3, [r3, #6]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d12d      	bne.n	8008eb2 <USBD_SetAddress+0x76>
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	885b      	ldrh	r3, [r3, #2]
 8008e5a:	2b7f      	cmp	r3, #127	; 0x7f
 8008e5c:	d829      	bhi.n	8008eb2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	885b      	ldrh	r3, [r3, #2]
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	2b03      	cmp	r3, #3
 8008e74:	d104      	bne.n	8008e80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 f9a3 	bl	80091c4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e7e:	e01d      	b.n	8008ebc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	7bfa      	ldrb	r2, [r7, #15]
 8008e84:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e88:	7bfb      	ldrb	r3, [r7, #15]
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 ffd3 	bl	8009e38 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fa61 	bl	800935a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e98:	7bfb      	ldrb	r3, [r7, #15]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d004      	beq.n	8008ea8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2202      	movs	r2, #2
 8008ea2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ea6:	e009      	b.n	8008ebc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eb0:	e004      	b.n	8008ebc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008eb2:	6839      	ldr	r1, [r7, #0]
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 f985 	bl	80091c4 <USBD_CtlError>
  }
}
 8008eba:	bf00      	nop
 8008ebc:	bf00      	nop
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	885b      	ldrh	r3, [r3, #2]
 8008ed6:	b2da      	uxtb	r2, r3
 8008ed8:	4b4c      	ldr	r3, [pc, #304]	; (800900c <USBD_SetConfig+0x148>)
 8008eda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008edc:	4b4b      	ldr	r3, [pc, #300]	; (800900c <USBD_SetConfig+0x148>)
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d905      	bls.n	8008ef0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008ee4:	6839      	ldr	r1, [r7, #0]
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 f96c 	bl	80091c4 <USBD_CtlError>
    return USBD_FAIL;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e088      	b.n	8009002 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	d002      	beq.n	8008f02 <USBD_SetConfig+0x3e>
 8008efc:	2b03      	cmp	r3, #3
 8008efe:	d025      	beq.n	8008f4c <USBD_SetConfig+0x88>
 8008f00:	e071      	b.n	8008fe6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008f02:	4b42      	ldr	r3, [pc, #264]	; (800900c <USBD_SetConfig+0x148>)
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d01c      	beq.n	8008f44 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008f0a:	4b40      	ldr	r3, [pc, #256]	; (800900c <USBD_SetConfig+0x148>)
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f14:	4b3d      	ldr	r3, [pc, #244]	; (800900c <USBD_SetConfig+0x148>)
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	4619      	mov	r1, r3
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7ff f948 	bl	80081b0 <USBD_SetClassConfig>
 8008f20:	4603      	mov	r3, r0
 8008f22:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008f24:	7bfb      	ldrb	r3, [r7, #15]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d004      	beq.n	8008f34 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f949 	bl	80091c4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f32:	e065      	b.n	8009000 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fa10 	bl	800935a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2203      	movs	r2, #3
 8008f3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008f42:	e05d      	b.n	8009000 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 fa08 	bl	800935a <USBD_CtlSendStatus>
      break;
 8008f4a:	e059      	b.n	8009000 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008f4c:	4b2f      	ldr	r3, [pc, #188]	; (800900c <USBD_SetConfig+0x148>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d112      	bne.n	8008f7a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2202      	movs	r2, #2
 8008f58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008f5c:	4b2b      	ldr	r3, [pc, #172]	; (800900c <USBD_SetConfig+0x148>)
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	461a      	mov	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f66:	4b29      	ldr	r3, [pc, #164]	; (800900c <USBD_SetConfig+0x148>)
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f7ff f93b 	bl	80081e8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 f9f1 	bl	800935a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f78:	e042      	b.n	8009000 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008f7a:	4b24      	ldr	r3, [pc, #144]	; (800900c <USBD_SetConfig+0x148>)
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d02a      	beq.n	8008fde <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	4619      	mov	r1, r3
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f7ff f929 	bl	80081e8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008f96:	4b1d      	ldr	r3, [pc, #116]	; (800900c <USBD_SetConfig+0x148>)
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008fa0:	4b1a      	ldr	r3, [pc, #104]	; (800900c <USBD_SetConfig+0x148>)
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7ff f902 	bl	80081b0 <USBD_SetClassConfig>
 8008fac:	4603      	mov	r3, r0
 8008fae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008fb0:	7bfb      	ldrb	r3, [r7, #15]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00f      	beq.n	8008fd6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008fb6:	6839      	ldr	r1, [r7, #0]
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 f903 	bl	80091c4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f7ff f90e 	bl	80081e8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2202      	movs	r2, #2
 8008fd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008fd4:	e014      	b.n	8009000 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f9bf 	bl	800935a <USBD_CtlSendStatus>
      break;
 8008fdc:	e010      	b.n	8009000 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f9bb 	bl	800935a <USBD_CtlSendStatus>
      break;
 8008fe4:	e00c      	b.n	8009000 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008fe6:	6839      	ldr	r1, [r7, #0]
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 f8eb 	bl	80091c4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008fee:	4b07      	ldr	r3, [pc, #28]	; (800900c <USBD_SetConfig+0x148>)
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f7ff f8f7 	bl	80081e8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008ffa:	2303      	movs	r3, #3
 8008ffc:	73fb      	strb	r3, [r7, #15]
      break;
 8008ffe:	bf00      	nop
  }

  return ret;
 8009000:	7bfb      	ldrb	r3, [r7, #15]
}
 8009002:	4618      	mov	r0, r3
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	20000624 	.word	0x20000624

08009010 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	88db      	ldrh	r3, [r3, #6]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d004      	beq.n	800902c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009022:	6839      	ldr	r1, [r7, #0]
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 f8cd 	bl	80091c4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800902a:	e023      	b.n	8009074 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009032:	b2db      	uxtb	r3, r3
 8009034:	2b02      	cmp	r3, #2
 8009036:	dc02      	bgt.n	800903e <USBD_GetConfig+0x2e>
 8009038:	2b00      	cmp	r3, #0
 800903a:	dc03      	bgt.n	8009044 <USBD_GetConfig+0x34>
 800903c:	e015      	b.n	800906a <USBD_GetConfig+0x5a>
 800903e:	2b03      	cmp	r3, #3
 8009040:	d00b      	beq.n	800905a <USBD_GetConfig+0x4a>
 8009042:	e012      	b.n	800906a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	3308      	adds	r3, #8
 800904e:	2201      	movs	r2, #1
 8009050:	4619      	mov	r1, r3
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f927 	bl	80092a6 <USBD_CtlSendData>
        break;
 8009058:	e00c      	b.n	8009074 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	3304      	adds	r3, #4
 800905e:	2201      	movs	r2, #1
 8009060:	4619      	mov	r1, r3
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 f91f 	bl	80092a6 <USBD_CtlSendData>
        break;
 8009068:	e004      	b.n	8009074 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800906a:	6839      	ldr	r1, [r7, #0]
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f8a9 	bl	80091c4 <USBD_CtlError>
        break;
 8009072:	bf00      	nop
}
 8009074:	bf00      	nop
 8009076:	3708      	adds	r7, #8
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800908c:	b2db      	uxtb	r3, r3
 800908e:	3b01      	subs	r3, #1
 8009090:	2b02      	cmp	r3, #2
 8009092:	d81e      	bhi.n	80090d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	88db      	ldrh	r3, [r3, #6]
 8009098:	2b02      	cmp	r3, #2
 800909a:	d004      	beq.n	80090a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800909c:	6839      	ldr	r1, [r7, #0]
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 f890 	bl	80091c4 <USBD_CtlError>
        break;
 80090a4:	e01a      	b.n	80090dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2201      	movs	r2, #1
 80090aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d005      	beq.n	80090c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	f043 0202 	orr.w	r2, r3, #2
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	330c      	adds	r3, #12
 80090c6:	2202      	movs	r2, #2
 80090c8:	4619      	mov	r1, r3
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 f8eb 	bl	80092a6 <USBD_CtlSendData>
      break;
 80090d0:	e004      	b.n	80090dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f875 	bl	80091c4 <USBD_CtlError>
      break;
 80090da:	bf00      	nop
  }
}
 80090dc:	bf00      	nop
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	885b      	ldrh	r3, [r3, #2]
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d106      	bne.n	8009104 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2201      	movs	r2, #1
 80090fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 f92b 	bl	800935a <USBD_CtlSendStatus>
  }
}
 8009104:	bf00      	nop
 8009106:	3708      	adds	r7, #8
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800911c:	b2db      	uxtb	r3, r3
 800911e:	3b01      	subs	r3, #1
 8009120:	2b02      	cmp	r3, #2
 8009122:	d80b      	bhi.n	800913c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	885b      	ldrh	r3, [r3, #2]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d10c      	bne.n	8009146 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f910 	bl	800935a <USBD_CtlSendStatus>
      }
      break;
 800913a:	e004      	b.n	8009146 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800913c:	6839      	ldr	r1, [r7, #0]
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f840 	bl	80091c4 <USBD_CtlError>
      break;
 8009144:	e000      	b.n	8009148 <USBD_ClrFeature+0x3c>
      break;
 8009146:	bf00      	nop
  }
}
 8009148:	bf00      	nop
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	781a      	ldrb	r2, [r3, #0]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	3301      	adds	r3, #1
 800916a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	781a      	ldrb	r2, [r3, #0]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	3301      	adds	r3, #1
 8009178:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	f7ff fabb 	bl	80086f6 <SWAPBYTE>
 8009180:	4603      	mov	r3, r0
 8009182:	461a      	mov	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	3301      	adds	r3, #1
 800918c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	3301      	adds	r3, #1
 8009192:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f7ff faae 	bl	80086f6 <SWAPBYTE>
 800919a:	4603      	mov	r3, r0
 800919c:	461a      	mov	r2, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	3301      	adds	r3, #1
 80091a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	3301      	adds	r3, #1
 80091ac:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f7ff faa1 	bl	80086f6 <SWAPBYTE>
 80091b4:	4603      	mov	r3, r0
 80091b6:	461a      	mov	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	80da      	strh	r2, [r3, #6]
}
 80091bc:	bf00      	nop
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80091ce:	2180      	movs	r1, #128	; 0x80
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fdc7 	bl	8009d64 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80091d6:	2100      	movs	r1, #0
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 fdc3 	bl	8009d64 <USBD_LL_StallEP>
}
 80091de:	bf00      	nop
 80091e0:	3708      	adds	r7, #8
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b086      	sub	sp, #24
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	60f8      	str	r0, [r7, #12]
 80091ee:	60b9      	str	r1, [r7, #8]
 80091f0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80091f2:	2300      	movs	r3, #0
 80091f4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d036      	beq.n	800926a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009200:	6938      	ldr	r0, [r7, #16]
 8009202:	f000 f836 	bl	8009272 <USBD_GetLen>
 8009206:	4603      	mov	r3, r0
 8009208:	3301      	adds	r3, #1
 800920a:	b29b      	uxth	r3, r3
 800920c:	005b      	lsls	r3, r3, #1
 800920e:	b29a      	uxth	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009214:	7dfb      	ldrb	r3, [r7, #23]
 8009216:	68ba      	ldr	r2, [r7, #8]
 8009218:	4413      	add	r3, r2
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	7812      	ldrb	r2, [r2, #0]
 800921e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009220:	7dfb      	ldrb	r3, [r7, #23]
 8009222:	3301      	adds	r3, #1
 8009224:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009226:	7dfb      	ldrb	r3, [r7, #23]
 8009228:	68ba      	ldr	r2, [r7, #8]
 800922a:	4413      	add	r3, r2
 800922c:	2203      	movs	r2, #3
 800922e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009230:	7dfb      	ldrb	r3, [r7, #23]
 8009232:	3301      	adds	r3, #1
 8009234:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009236:	e013      	b.n	8009260 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009238:	7dfb      	ldrb	r3, [r7, #23]
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	4413      	add	r3, r2
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	7812      	ldrb	r2, [r2, #0]
 8009242:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	3301      	adds	r3, #1
 8009248:	613b      	str	r3, [r7, #16]
    idx++;
 800924a:	7dfb      	ldrb	r3, [r7, #23]
 800924c:	3301      	adds	r3, #1
 800924e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009250:	7dfb      	ldrb	r3, [r7, #23]
 8009252:	68ba      	ldr	r2, [r7, #8]
 8009254:	4413      	add	r3, r2
 8009256:	2200      	movs	r2, #0
 8009258:	701a      	strb	r2, [r3, #0]
    idx++;
 800925a:	7dfb      	ldrb	r3, [r7, #23]
 800925c:	3301      	adds	r3, #1
 800925e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1e7      	bne.n	8009238 <USBD_GetString+0x52>
 8009268:	e000      	b.n	800926c <USBD_GetString+0x86>
    return;
 800926a:	bf00      	nop
  }
}
 800926c:	3718      	adds	r7, #24
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009272:	b480      	push	{r7}
 8009274:	b085      	sub	sp, #20
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800927a:	2300      	movs	r3, #0
 800927c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009282:	e005      	b.n	8009290 <USBD_GetLen+0x1e>
  {
    len++;
 8009284:	7bfb      	ldrb	r3, [r7, #15]
 8009286:	3301      	adds	r3, #1
 8009288:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	3301      	adds	r3, #1
 800928e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1f5      	bne.n	8009284 <USBD_GetLen+0x12>
  }

  return len;
 8009298:	7bfb      	ldrb	r3, [r7, #15]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3714      	adds	r7, #20
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr

080092a6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b084      	sub	sp, #16
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	60f8      	str	r0, [r7, #12]
 80092ae:	60b9      	str	r1, [r7, #8]
 80092b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2202      	movs	r2, #2
 80092b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	68ba      	ldr	r2, [r7, #8]
 80092ca:	2100      	movs	r1, #0
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f000 fdd2 	bl	8009e76 <USBD_LL_Transmit>

  return USBD_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	68ba      	ldr	r2, [r7, #8]
 80092ec:	2100      	movs	r1, #0
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f000 fdc1 	bl	8009e76 <USBD_LL_Transmit>

  return USBD_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b084      	sub	sp, #16
 8009302:	af00      	add	r7, sp, #0
 8009304:	60f8      	str	r0, [r7, #12]
 8009306:	60b9      	str	r1, [r7, #8]
 8009308:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2203      	movs	r2, #3
 800930e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68ba      	ldr	r2, [r7, #8]
 8009326:	2100      	movs	r1, #0
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f000 fdc5 	bl	8009eb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	68ba      	ldr	r2, [r7, #8]
 8009348:	2100      	movs	r1, #0
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f000 fdb4 	bl	8009eb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b082      	sub	sp, #8
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2204      	movs	r2, #4
 8009366:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800936a:	2300      	movs	r3, #0
 800936c:	2200      	movs	r2, #0
 800936e:	2100      	movs	r1, #0
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 fd80 	bl	8009e76 <USBD_LL_Transmit>

  return USBD_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3708      	adds	r7, #8
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2205      	movs	r2, #5
 800938c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009390:	2300      	movs	r3, #0
 8009392:	2200      	movs	r2, #0
 8009394:	2100      	movs	r1, #0
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 fd8e 	bl	8009eb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3708      	adds	r7, #8
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
	...

080093a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80093ac:	2200      	movs	r2, #0
 80093ae:	4912      	ldr	r1, [pc, #72]	; (80093f8 <MX_USB_DEVICE_Init+0x50>)
 80093b0:	4812      	ldr	r0, [pc, #72]	; (80093fc <MX_USB_DEVICE_Init+0x54>)
 80093b2:	f7fe fe8f 	bl	80080d4 <USBD_Init>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d001      	beq.n	80093c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80093bc:	f7f8 f9d4 	bl	8001768 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80093c0:	490f      	ldr	r1, [pc, #60]	; (8009400 <MX_USB_DEVICE_Init+0x58>)
 80093c2:	480e      	ldr	r0, [pc, #56]	; (80093fc <MX_USB_DEVICE_Init+0x54>)
 80093c4:	f7fe feb6 	bl	8008134 <USBD_RegisterClass>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80093ce:	f7f8 f9cb 	bl	8001768 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80093d2:	490c      	ldr	r1, [pc, #48]	; (8009404 <MX_USB_DEVICE_Init+0x5c>)
 80093d4:	4809      	ldr	r0, [pc, #36]	; (80093fc <MX_USB_DEVICE_Init+0x54>)
 80093d6:	f7fe fe07 	bl	8007fe8 <USBD_CDC_RegisterInterface>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d001      	beq.n	80093e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80093e0:	f7f8 f9c2 	bl	8001768 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80093e4:	4805      	ldr	r0, [pc, #20]	; (80093fc <MX_USB_DEVICE_Init+0x54>)
 80093e6:	f7fe fecc 	bl	8008182 <USBD_Start>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d001      	beq.n	80093f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80093f0:	f7f8 f9ba 	bl	8001768 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80093f4:	bf00      	nop
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	20000144 	.word	0x20000144
 80093fc:	20000ee0 	.word	0x20000ee0
 8009400:	20000028 	.word	0x20000028
 8009404:	20000130 	.word	0x20000130

08009408 <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800940e:	2200      	movs	r2, #0
 8009410:	4915      	ldr	r1, [pc, #84]	; (8009468 <CDC_Init_FS+0x60>)
 8009412:	4816      	ldr	r0, [pc, #88]	; (800946c <CDC_Init_FS+0x64>)
 8009414:	f7fe fdfd 	bl	8008012 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009418:	4915      	ldr	r1, [pc, #84]	; (8009470 <CDC_Init_FS+0x68>)
 800941a:	4814      	ldr	r0, [pc, #80]	; (800946c <CDC_Init_FS+0x64>)
 800941c:	f7fe fe17 	bl	800804e <USBD_CDC_SetRxBuffer>

	// https://stackoverflow.com/a/26925578
	uint32_t baudrate = 9600;
 8009420:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8009424:	607b      	str	r3, [r7, #4]
	lcBuffer[0] = (uint8_t) (baudrate);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	b2da      	uxtb	r2, r3
 800942a:	4b12      	ldr	r3, [pc, #72]	; (8009474 <CDC_Init_FS+0x6c>)
 800942c:	701a      	strb	r2, [r3, #0]
	lcBuffer[1] = (uint8_t) (baudrate >> 8);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	0a1b      	lsrs	r3, r3, #8
 8009432:	b2da      	uxtb	r2, r3
 8009434:	4b0f      	ldr	r3, [pc, #60]	; (8009474 <CDC_Init_FS+0x6c>)
 8009436:	705a      	strb	r2, [r3, #1]
	lcBuffer[2] = (uint8_t) (baudrate >> 16);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	0c1b      	lsrs	r3, r3, #16
 800943c:	b2da      	uxtb	r2, r3
 800943e:	4b0d      	ldr	r3, [pc, #52]	; (8009474 <CDC_Init_FS+0x6c>)
 8009440:	709a      	strb	r2, [r3, #2]
	lcBuffer[3] = (uint8_t) (baudrate >> 24);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	0e1b      	lsrs	r3, r3, #24
 8009446:	b2da      	uxtb	r2, r3
 8009448:	4b0a      	ldr	r3, [pc, #40]	; (8009474 <CDC_Init_FS+0x6c>)
 800944a:	70da      	strb	r2, [r3, #3]
	lcBuffer[4] = 0; // 1 Stop bit
 800944c:	4b09      	ldr	r3, [pc, #36]	; (8009474 <CDC_Init_FS+0x6c>)
 800944e:	2200      	movs	r2, #0
 8009450:	711a      	strb	r2, [r3, #4]
	lcBuffer[5] = 0; // No parity
 8009452:	4b08      	ldr	r3, [pc, #32]	; (8009474 <CDC_Init_FS+0x6c>)
 8009454:	2200      	movs	r2, #0
 8009456:	715a      	strb	r2, [r3, #5]
	lcBuffer[6] = 8; // 8 data bits
 8009458:	4b06      	ldr	r3, [pc, #24]	; (8009474 <CDC_Init_FS+0x6c>)
 800945a:	2208      	movs	r2, #8
 800945c:	719a      	strb	r2, [r3, #6]

	return (USBD_OK);
 800945e:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 8009460:	4618      	mov	r0, r3
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	200019b4 	.word	0x200019b4
 800946c:	20000ee0 	.word	0x20000ee0
 8009470:	200011b4 	.word	0x200011b4
 8009474:	200022b4 	.word	0x200022b4

08009478 <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 8009478:	b480      	push	{r7}
 800947a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 800947c:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 800947e:	4618      	mov	r0, r3
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <CDC_Control_FS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	4603      	mov	r3, r0
 8009490:	6039      	str	r1, [r7, #0]
 8009492:	71fb      	strb	r3, [r7, #7]
 8009494:	4613      	mov	r3, r2
 8009496:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd) {
 8009498:	79fb      	ldrb	r3, [r7, #7]
 800949a:	2b23      	cmp	r3, #35	; 0x23
 800949c:	f200 808c 	bhi.w	80095b8 <CDC_Control_FS+0x130>
 80094a0:	a201      	add	r2, pc, #4	; (adr r2, 80094a8 <CDC_Control_FS+0x20>)
 80094a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a6:	bf00      	nop
 80094a8:	080095b9 	.word	0x080095b9
 80094ac:	080095b9 	.word	0x080095b9
 80094b0:	080095b9 	.word	0x080095b9
 80094b4:	080095b9 	.word	0x080095b9
 80094b8:	080095b9 	.word	0x080095b9
 80094bc:	080095b9 	.word	0x080095b9
 80094c0:	080095b9 	.word	0x080095b9
 80094c4:	080095b9 	.word	0x080095b9
 80094c8:	080095b9 	.word	0x080095b9
 80094cc:	080095b9 	.word	0x080095b9
 80094d0:	080095b9 	.word	0x080095b9
 80094d4:	080095b9 	.word	0x080095b9
 80094d8:	080095b9 	.word	0x080095b9
 80094dc:	080095b9 	.word	0x080095b9
 80094e0:	080095b9 	.word	0x080095b9
 80094e4:	080095b9 	.word	0x080095b9
 80094e8:	080095b9 	.word	0x080095b9
 80094ec:	080095b9 	.word	0x080095b9
 80094f0:	080095b9 	.word	0x080095b9
 80094f4:	080095b9 	.word	0x080095b9
 80094f8:	080095b9 	.word	0x080095b9
 80094fc:	080095b9 	.word	0x080095b9
 8009500:	080095b9 	.word	0x080095b9
 8009504:	080095b9 	.word	0x080095b9
 8009508:	080095b9 	.word	0x080095b9
 800950c:	080095b9 	.word	0x080095b9
 8009510:	080095b9 	.word	0x080095b9
 8009514:	080095b9 	.word	0x080095b9
 8009518:	080095b9 	.word	0x080095b9
 800951c:	080095b9 	.word	0x080095b9
 8009520:	080095b9 	.word	0x080095b9
 8009524:	080095b9 	.word	0x080095b9
 8009528:	08009539 	.word	0x08009539
 800952c:	08009573 	.word	0x08009573
 8009530:	080095b9 	.word	0x080095b9
 8009534:	080095b9 	.word	0x080095b9
		/* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
		/*******************************************************************************/

		// https://github.com/philrawlings/bluepill-usb-cdc-test/blob/main/USB_DEVICE/App/usbd_cdc_if.c
	case CDC_SET_LINE_CODING:
		lcBuffer[0] = pbuf[0];
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	781a      	ldrb	r2, [r3, #0]
 800953c:	4b22      	ldr	r3, [pc, #136]	; (80095c8 <CDC_Control_FS+0x140>)
 800953e:	701a      	strb	r2, [r3, #0]
		lcBuffer[1] = pbuf[1];
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	785a      	ldrb	r2, [r3, #1]
 8009544:	4b20      	ldr	r3, [pc, #128]	; (80095c8 <CDC_Control_FS+0x140>)
 8009546:	705a      	strb	r2, [r3, #1]
		lcBuffer[2] = pbuf[2];
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	789a      	ldrb	r2, [r3, #2]
 800954c:	4b1e      	ldr	r3, [pc, #120]	; (80095c8 <CDC_Control_FS+0x140>)
 800954e:	709a      	strb	r2, [r3, #2]
		lcBuffer[3] = pbuf[3];
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	78da      	ldrb	r2, [r3, #3]
 8009554:	4b1c      	ldr	r3, [pc, #112]	; (80095c8 <CDC_Control_FS+0x140>)
 8009556:	70da      	strb	r2, [r3, #3]
		lcBuffer[4] = pbuf[4];
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	791a      	ldrb	r2, [r3, #4]
 800955c:	4b1a      	ldr	r3, [pc, #104]	; (80095c8 <CDC_Control_FS+0x140>)
 800955e:	711a      	strb	r2, [r3, #4]
		lcBuffer[5] = pbuf[5];
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	795a      	ldrb	r2, [r3, #5]
 8009564:	4b18      	ldr	r3, [pc, #96]	; (80095c8 <CDC_Control_FS+0x140>)
 8009566:	715a      	strb	r2, [r3, #5]
		lcBuffer[6] = pbuf[6];
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	799a      	ldrb	r2, [r3, #6]
 800956c:	4b16      	ldr	r3, [pc, #88]	; (80095c8 <CDC_Control_FS+0x140>)
 800956e:	719a      	strb	r2, [r3, #6]
		break;
 8009570:	e023      	b.n	80095ba <CDC_Control_FS+0x132>

	case CDC_GET_LINE_CODING:
		pbuf[0] = lcBuffer[0];
 8009572:	4b15      	ldr	r3, [pc, #84]	; (80095c8 <CDC_Control_FS+0x140>)
 8009574:	781a      	ldrb	r2, [r3, #0]
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	701a      	strb	r2, [r3, #0]
		pbuf[1] = lcBuffer[1];
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	3301      	adds	r3, #1
 800957e:	4a12      	ldr	r2, [pc, #72]	; (80095c8 <CDC_Control_FS+0x140>)
 8009580:	7852      	ldrb	r2, [r2, #1]
 8009582:	701a      	strb	r2, [r3, #0]
		pbuf[2] = lcBuffer[2];
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	3302      	adds	r3, #2
 8009588:	4a0f      	ldr	r2, [pc, #60]	; (80095c8 <CDC_Control_FS+0x140>)
 800958a:	7892      	ldrb	r2, [r2, #2]
 800958c:	701a      	strb	r2, [r3, #0]
		pbuf[3] = lcBuffer[3];
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	3303      	adds	r3, #3
 8009592:	4a0d      	ldr	r2, [pc, #52]	; (80095c8 <CDC_Control_FS+0x140>)
 8009594:	78d2      	ldrb	r2, [r2, #3]
 8009596:	701a      	strb	r2, [r3, #0]
		pbuf[4] = lcBuffer[4];
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	3304      	adds	r3, #4
 800959c:	4a0a      	ldr	r2, [pc, #40]	; (80095c8 <CDC_Control_FS+0x140>)
 800959e:	7912      	ldrb	r2, [r2, #4]
 80095a0:	701a      	strb	r2, [r3, #0]
		pbuf[5] = lcBuffer[5];
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	3305      	adds	r3, #5
 80095a6:	4a08      	ldr	r2, [pc, #32]	; (80095c8 <CDC_Control_FS+0x140>)
 80095a8:	7952      	ldrb	r2, [r2, #5]
 80095aa:	701a      	strb	r2, [r3, #0]
		pbuf[6] = lcBuffer[6];
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	3306      	adds	r3, #6
 80095b0:	4a05      	ldr	r2, [pc, #20]	; (80095c8 <CDC_Control_FS+0x140>)
 80095b2:	7992      	ldrb	r2, [r2, #6]
 80095b4:	701a      	strb	r2, [r3, #0]

		// Get line coding is invoked when the host connects, clear the RxBuffer when this occurs

	case CDC_SET_CONTROL_LINE_STATE:

		break;
 80095b6:	e000      	b.n	80095ba <CDC_Control_FS+0x132>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 80095b8:	bf00      	nop
	}

	return (USBD_OK);
 80095ba:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 80095bc:	4618      	mov	r0, r3
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr
 80095c8:	200022b4 	.word	0x200022b4

080095cc <CDC_Receive_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80095d6:	6879      	ldr	r1, [r7, #4]
 80095d8:	4824      	ldr	r0, [pc, #144]	; (800966c <CDC_Receive_FS+0xa0>)
 80095da:	f7fe fd38 	bl	800804e <USBD_CDC_SetRxBuffer>
	uint8_t len = (uint8_t) *Len;
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	72fb      	strb	r3, [r7, #11]
	if (!isBufferFull()) {
 80095e4:	f000 f89c 	bl	8009720 <isBufferFull>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d136      	bne.n	800965c <CDC_Receive_FS+0x90>
		// Safety check
		if (len > 0 && len < 65) {
 80095ee:	7afb      	ldrb	r3, [r7, #11]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d033      	beq.n	800965c <CDC_Receive_FS+0x90>
 80095f4:	7afb      	ldrb	r3, [r7, #11]
 80095f6:	2b40      	cmp	r3, #64	; 0x40
 80095f8:	d830      	bhi.n	800965c <CDC_Receive_FS+0x90>
			// saving the array say at position 0
			circular_buffer[end_pointer][0] = len;
 80095fa:	4b1d      	ldr	r3, [pc, #116]	; (8009670 <CDC_Receive_FS+0xa4>)
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	4619      	mov	r1, r3
 8009600:	4a1c      	ldr	r2, [pc, #112]	; (8009674 <CDC_Receive_FS+0xa8>)
 8009602:	460b      	mov	r3, r1
 8009604:	019b      	lsls	r3, r3, #6
 8009606:	440b      	add	r3, r1
 8009608:	4413      	add	r3, r2
 800960a:	7afa      	ldrb	r2, [r7, #11]
 800960c:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i <= len; i++) {
 800960e:	2301      	movs	r3, #1
 8009610:	60fb      	str	r3, [r7, #12]
 8009612:	e013      	b.n	800963c <CDC_Receive_FS+0x70>
				circular_buffer[end_pointer][i] = Buf[i-1];
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	3b01      	subs	r3, #1
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	4413      	add	r3, r2
 800961c:	4a14      	ldr	r2, [pc, #80]	; (8009670 <CDC_Receive_FS+0xa4>)
 800961e:	7812      	ldrb	r2, [r2, #0]
 8009620:	4611      	mov	r1, r2
 8009622:	7818      	ldrb	r0, [r3, #0]
 8009624:	4a13      	ldr	r2, [pc, #76]	; (8009674 <CDC_Receive_FS+0xa8>)
 8009626:	460b      	mov	r3, r1
 8009628:	019b      	lsls	r3, r3, #6
 800962a:	440b      	add	r3, r1
 800962c:	441a      	add	r2, r3
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	4413      	add	r3, r2
 8009632:	4602      	mov	r2, r0
 8009634:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i <= len; i++) {
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	3301      	adds	r3, #1
 800963a:	60fb      	str	r3, [r7, #12]
 800963c:	7afb      	ldrb	r3, [r7, #11]
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	429a      	cmp	r2, r3
 8009642:	dde7      	ble.n	8009614 <CDC_Receive_FS+0x48>
			}
			end_pointer = (end_pointer + 1) % CIRCULAR_BUFFER_SIZE;
 8009644:	4b0a      	ldr	r3, [pc, #40]	; (8009670 <CDC_Receive_FS+0xa4>)
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	3301      	adds	r3, #1
 800964a:	220a      	movs	r2, #10
 800964c:	fb93 f1f2 	sdiv	r1, r3, r2
 8009650:	fb02 f201 	mul.w	r2, r2, r1
 8009654:	1a9b      	subs	r3, r3, r2
 8009656:	b2da      	uxtb	r2, r3
 8009658:	4b05      	ldr	r3, [pc, #20]	; (8009670 <CDC_Receive_FS+0xa4>)
 800965a:	701a      	strb	r2, [r3, #0]
		}
	}

	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800965c:	4803      	ldr	r0, [pc, #12]	; (800966c <CDC_Receive_FS+0xa0>)
 800965e:	f7fe fd0f 	bl	8008080 <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 8009662:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 8009664:	4618      	mov	r0, r3
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	20000ee0 	.word	0x20000ee0
 8009670:	2000012c 	.word	0x2000012c
 8009674:	20000628 	.word	0x20000628

08009678 <CDC_TransmitCplt_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum) {
 8009678:	b480      	push	{r7}
 800967a:	b087      	sub	sp, #28
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	4613      	mov	r3, r2
 8009684:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 13 */
	return result;
 800968a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800968e:	4618      	mov	r0, r3
 8009690:	371c      	adds	r7, #28
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr
	...

0800969c <get_data_frame>:
uint8_t data_available() {

	return 0;
}

void get_data_frame(uint8_t *buffer) {
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
	if(!isBufferEmpty()){
 80096a4:	f000 f852 	bl	800974c <isBufferEmpty>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d12f      	bne.n	800970e <get_data_frame+0x72>
		uint8_t data_size = circular_buffer[start_pointer][0];
 80096ae:	4b1a      	ldr	r3, [pc, #104]	; (8009718 <get_data_frame+0x7c>)
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	4619      	mov	r1, r3
 80096b4:	4a19      	ldr	r2, [pc, #100]	; (800971c <get_data_frame+0x80>)
 80096b6:	460b      	mov	r3, r1
 80096b8:	019b      	lsls	r3, r3, #6
 80096ba:	440b      	add	r3, r1
 80096bc:	4413      	add	r3, r2
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	72fb      	strb	r3, [r7, #11]
		for(int i = 1; i <= data_size; i++){
 80096c2:	2301      	movs	r3, #1
 80096c4:	60fb      	str	r3, [r7, #12]
 80096c6:	e012      	b.n	80096ee <get_data_frame+0x52>
			buffer[i-1] = circular_buffer[start_pointer][i];
 80096c8:	4b13      	ldr	r3, [pc, #76]	; (8009718 <get_data_frame+0x7c>)
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	4618      	mov	r0, r3
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	3b01      	subs	r3, #1
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	441a      	add	r2, r3
 80096d6:	4911      	ldr	r1, [pc, #68]	; (800971c <get_data_frame+0x80>)
 80096d8:	4603      	mov	r3, r0
 80096da:	019b      	lsls	r3, r3, #6
 80096dc:	4403      	add	r3, r0
 80096de:	4419      	add	r1, r3
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	440b      	add	r3, r1
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	7013      	strb	r3, [r2, #0]
		for(int i = 1; i <= data_size; i++){
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	3301      	adds	r3, #1
 80096ec:	60fb      	str	r3, [r7, #12]
 80096ee:	7afb      	ldrb	r3, [r7, #11]
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	dde8      	ble.n	80096c8 <get_data_frame+0x2c>
		}
		start_pointer = (start_pointer + 1) % CIRCULAR_BUFFER_SIZE;
 80096f6:	4b08      	ldr	r3, [pc, #32]	; (8009718 <get_data_frame+0x7c>)
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	3301      	adds	r3, #1
 80096fc:	220a      	movs	r2, #10
 80096fe:	fb93 f1f2 	sdiv	r1, r3, r2
 8009702:	fb02 f201 	mul.w	r2, r2, r1
 8009706:	1a9b      	subs	r3, r3, r2
 8009708:	b2da      	uxtb	r2, r3
 800970a:	4b03      	ldr	r3, [pc, #12]	; (8009718 <get_data_frame+0x7c>)
 800970c:	701a      	strb	r2, [r3, #0]
	}

}
 800970e:	bf00      	nop
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	2000012b 	.word	0x2000012b
 800971c:	20000628 	.word	0x20000628

08009720 <isBufferFull>:

uint8_t isBufferFull() {
 8009720:	b480      	push	{r7}
 8009722:	af00      	add	r7, sp, #0
	if ((end_pointer + 1) == start_pointer) {
 8009724:	4b07      	ldr	r3, [pc, #28]	; (8009744 <isBufferFull+0x24>)
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	3301      	adds	r3, #1
 800972a:	4a07      	ldr	r2, [pc, #28]	; (8009748 <isBufferFull+0x28>)
 800972c:	7812      	ldrb	r2, [r2, #0]
 800972e:	4293      	cmp	r3, r2
 8009730:	d101      	bne.n	8009736 <isBufferFull+0x16>
		return 1;
 8009732:	2301      	movs	r3, #1
 8009734:	e000      	b.n	8009738 <isBufferFull+0x18>
	} else {
		return 0;
 8009736:	2300      	movs	r3, #0
	}
}
 8009738:	4618      	mov	r0, r3
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	2000012c 	.word	0x2000012c
 8009748:	2000012b 	.word	0x2000012b

0800974c <isBufferEmpty>:

uint8_t isBufferEmpty() {
 800974c:	b480      	push	{r7}
 800974e:	af00      	add	r7, sp, #0
	if (end_pointer == start_pointer) {
 8009750:	4b06      	ldr	r3, [pc, #24]	; (800976c <isBufferEmpty+0x20>)
 8009752:	781a      	ldrb	r2, [r3, #0]
 8009754:	4b06      	ldr	r3, [pc, #24]	; (8009770 <isBufferEmpty+0x24>)
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	429a      	cmp	r2, r3
 800975a:	d101      	bne.n	8009760 <isBufferEmpty+0x14>
		return 1;
 800975c:	2301      	movs	r3, #1
 800975e:	e000      	b.n	8009762 <isBufferEmpty+0x16>
	} else {
		return 0;
 8009760:	2300      	movs	r3, #0
	}
}
 8009762:	4618      	mov	r0, r3
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr
 800976c:	2000012c 	.word	0x2000012c
 8009770:	2000012b 	.word	0x2000012b

08009774 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	4603      	mov	r3, r0
 800977c:	6039      	str	r1, [r7, #0]
 800977e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	2212      	movs	r2, #18
 8009784:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009786:	4b03      	ldr	r3, [pc, #12]	; (8009794 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009788:	4618      	mov	r0, r3
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr
 8009794:	20000160 	.word	0x20000160

08009798 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
 800979e:	4603      	mov	r3, r0
 80097a0:	6039      	str	r1, [r7, #0]
 80097a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	2204      	movs	r2, #4
 80097a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80097aa:	4b03      	ldr	r3, [pc, #12]	; (80097b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	370c      	adds	r7, #12
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr
 80097b8:	20000174 	.word	0x20000174

080097bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	4603      	mov	r3, r0
 80097c4:	6039      	str	r1, [r7, #0]
 80097c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80097c8:	79fb      	ldrb	r3, [r7, #7]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d105      	bne.n	80097da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80097ce:	683a      	ldr	r2, [r7, #0]
 80097d0:	4907      	ldr	r1, [pc, #28]	; (80097f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80097d2:	4808      	ldr	r0, [pc, #32]	; (80097f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80097d4:	f7ff fd07 	bl	80091e6 <USBD_GetString>
 80097d8:	e004      	b.n	80097e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80097da:	683a      	ldr	r2, [r7, #0]
 80097dc:	4904      	ldr	r1, [pc, #16]	; (80097f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80097de:	4805      	ldr	r0, [pc, #20]	; (80097f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80097e0:	f7ff fd01 	bl	80091e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097e4:	4b02      	ldr	r3, [pc, #8]	; (80097f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	200022bc 	.word	0x200022bc
 80097f4:	0800b988 	.word	0x0800b988

080097f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	4603      	mov	r3, r0
 8009800:	6039      	str	r1, [r7, #0]
 8009802:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009804:	683a      	ldr	r2, [r7, #0]
 8009806:	4904      	ldr	r1, [pc, #16]	; (8009818 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009808:	4804      	ldr	r0, [pc, #16]	; (800981c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800980a:	f7ff fcec 	bl	80091e6 <USBD_GetString>
  return USBD_StrDesc;
 800980e:	4b02      	ldr	r3, [pc, #8]	; (8009818 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009810:	4618      	mov	r0, r3
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	200022bc 	.word	0x200022bc
 800981c:	0800b9a0 	.word	0x0800b9a0

08009820 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	4603      	mov	r3, r0
 8009828:	6039      	str	r1, [r7, #0]
 800982a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	221a      	movs	r2, #26
 8009830:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009832:	f000 f843 	bl	80098bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009836:	4b02      	ldr	r3, [pc, #8]	; (8009840 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009838:	4618      	mov	r0, r3
 800983a:	3708      	adds	r7, #8
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	20000178 	.word	0x20000178

08009844 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	4603      	mov	r3, r0
 800984c:	6039      	str	r1, [r7, #0]
 800984e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009850:	79fb      	ldrb	r3, [r7, #7]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d105      	bne.n	8009862 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009856:	683a      	ldr	r2, [r7, #0]
 8009858:	4907      	ldr	r1, [pc, #28]	; (8009878 <USBD_FS_ConfigStrDescriptor+0x34>)
 800985a:	4808      	ldr	r0, [pc, #32]	; (800987c <USBD_FS_ConfigStrDescriptor+0x38>)
 800985c:	f7ff fcc3 	bl	80091e6 <USBD_GetString>
 8009860:	e004      	b.n	800986c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	4904      	ldr	r1, [pc, #16]	; (8009878 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009866:	4805      	ldr	r0, [pc, #20]	; (800987c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009868:	f7ff fcbd 	bl	80091e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800986c:	4b02      	ldr	r3, [pc, #8]	; (8009878 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800986e:	4618      	mov	r0, r3
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	200022bc 	.word	0x200022bc
 800987c:	0800b9b4 	.word	0x0800b9b4

08009880 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	4603      	mov	r3, r0
 8009888:	6039      	str	r1, [r7, #0]
 800988a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800988c:	79fb      	ldrb	r3, [r7, #7]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d105      	bne.n	800989e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009892:	683a      	ldr	r2, [r7, #0]
 8009894:	4907      	ldr	r1, [pc, #28]	; (80098b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009896:	4808      	ldr	r0, [pc, #32]	; (80098b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009898:	f7ff fca5 	bl	80091e6 <USBD_GetString>
 800989c:	e004      	b.n	80098a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	4904      	ldr	r1, [pc, #16]	; (80098b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80098a2:	4805      	ldr	r0, [pc, #20]	; (80098b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80098a4:	f7ff fc9f 	bl	80091e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098a8:	4b02      	ldr	r3, [pc, #8]	; (80098b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3708      	adds	r7, #8
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	200022bc 	.word	0x200022bc
 80098b8:	0800b9c0 	.word	0x0800b9c0

080098bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80098c2:	4b0f      	ldr	r3, [pc, #60]	; (8009900 <Get_SerialNum+0x44>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80098c8:	4b0e      	ldr	r3, [pc, #56]	; (8009904 <Get_SerialNum+0x48>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80098ce:	4b0e      	ldr	r3, [pc, #56]	; (8009908 <Get_SerialNum+0x4c>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4413      	add	r3, r2
 80098da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d009      	beq.n	80098f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80098e2:	2208      	movs	r2, #8
 80098e4:	4909      	ldr	r1, [pc, #36]	; (800990c <Get_SerialNum+0x50>)
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	f000 f814 	bl	8009914 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80098ec:	2204      	movs	r2, #4
 80098ee:	4908      	ldr	r1, [pc, #32]	; (8009910 <Get_SerialNum+0x54>)
 80098f0:	68b8      	ldr	r0, [r7, #8]
 80098f2:	f000 f80f 	bl	8009914 <IntToUnicode>
  }
}
 80098f6:	bf00      	nop
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	1fff7a10 	.word	0x1fff7a10
 8009904:	1fff7a14 	.word	0x1fff7a14
 8009908:	1fff7a18 	.word	0x1fff7a18
 800990c:	2000017a 	.word	0x2000017a
 8009910:	2000018a 	.word	0x2000018a

08009914 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009914:	b480      	push	{r7}
 8009916:	b087      	sub	sp, #28
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	4613      	mov	r3, r2
 8009920:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009922:	2300      	movs	r3, #0
 8009924:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009926:	2300      	movs	r3, #0
 8009928:	75fb      	strb	r3, [r7, #23]
 800992a:	e027      	b.n	800997c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	0f1b      	lsrs	r3, r3, #28
 8009930:	2b09      	cmp	r3, #9
 8009932:	d80b      	bhi.n	800994c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	0f1b      	lsrs	r3, r3, #28
 8009938:	b2da      	uxtb	r2, r3
 800993a:	7dfb      	ldrb	r3, [r7, #23]
 800993c:	005b      	lsls	r3, r3, #1
 800993e:	4619      	mov	r1, r3
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	440b      	add	r3, r1
 8009944:	3230      	adds	r2, #48	; 0x30
 8009946:	b2d2      	uxtb	r2, r2
 8009948:	701a      	strb	r2, [r3, #0]
 800994a:	e00a      	b.n	8009962 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	0f1b      	lsrs	r3, r3, #28
 8009950:	b2da      	uxtb	r2, r3
 8009952:	7dfb      	ldrb	r3, [r7, #23]
 8009954:	005b      	lsls	r3, r3, #1
 8009956:	4619      	mov	r1, r3
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	440b      	add	r3, r1
 800995c:	3237      	adds	r2, #55	; 0x37
 800995e:	b2d2      	uxtb	r2, r2
 8009960:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	011b      	lsls	r3, r3, #4
 8009966:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009968:	7dfb      	ldrb	r3, [r7, #23]
 800996a:	005b      	lsls	r3, r3, #1
 800996c:	3301      	adds	r3, #1
 800996e:	68ba      	ldr	r2, [r7, #8]
 8009970:	4413      	add	r3, r2
 8009972:	2200      	movs	r2, #0
 8009974:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009976:	7dfb      	ldrb	r3, [r7, #23]
 8009978:	3301      	adds	r3, #1
 800997a:	75fb      	strb	r3, [r7, #23]
 800997c:	7dfa      	ldrb	r2, [r7, #23]
 800997e:	79fb      	ldrb	r3, [r7, #7]
 8009980:	429a      	cmp	r2, r3
 8009982:	d3d3      	bcc.n	800992c <IntToUnicode+0x18>
  }
}
 8009984:	bf00      	nop
 8009986:	bf00      	nop
 8009988:	371c      	adds	r7, #28
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
	...

08009994 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b08a      	sub	sp, #40	; 0x28
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800999c:	f107 0314 	add.w	r3, r7, #20
 80099a0:	2200      	movs	r2, #0
 80099a2:	601a      	str	r2, [r3, #0]
 80099a4:	605a      	str	r2, [r3, #4]
 80099a6:	609a      	str	r2, [r3, #8]
 80099a8:	60da      	str	r2, [r3, #12]
 80099aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099b4:	d13a      	bne.n	8009a2c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80099b6:	2300      	movs	r3, #0
 80099b8:	613b      	str	r3, [r7, #16]
 80099ba:	4b1e      	ldr	r3, [pc, #120]	; (8009a34 <HAL_PCD_MspInit+0xa0>)
 80099bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099be:	4a1d      	ldr	r2, [pc, #116]	; (8009a34 <HAL_PCD_MspInit+0xa0>)
 80099c0:	f043 0301 	orr.w	r3, r3, #1
 80099c4:	6313      	str	r3, [r2, #48]	; 0x30
 80099c6:	4b1b      	ldr	r3, [pc, #108]	; (8009a34 <HAL_PCD_MspInit+0xa0>)
 80099c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ca:	f003 0301 	and.w	r3, r3, #1
 80099ce:	613b      	str	r3, [r7, #16]
 80099d0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80099d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80099d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099d8:	2302      	movs	r3, #2
 80099da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099dc:	2300      	movs	r3, #0
 80099de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099e0:	2303      	movs	r3, #3
 80099e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80099e4:	230a      	movs	r3, #10
 80099e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099e8:	f107 0314 	add.w	r3, r7, #20
 80099ec:	4619      	mov	r1, r3
 80099ee:	4812      	ldr	r0, [pc, #72]	; (8009a38 <HAL_PCD_MspInit+0xa4>)
 80099f0:	f7f9 f852 	bl	8002a98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80099f4:	4b0f      	ldr	r3, [pc, #60]	; (8009a34 <HAL_PCD_MspInit+0xa0>)
 80099f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099f8:	4a0e      	ldr	r2, [pc, #56]	; (8009a34 <HAL_PCD_MspInit+0xa0>)
 80099fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099fe:	6353      	str	r3, [r2, #52]	; 0x34
 8009a00:	2300      	movs	r3, #0
 8009a02:	60fb      	str	r3, [r7, #12]
 8009a04:	4b0b      	ldr	r3, [pc, #44]	; (8009a34 <HAL_PCD_MspInit+0xa0>)
 8009a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a08:	4a0a      	ldr	r2, [pc, #40]	; (8009a34 <HAL_PCD_MspInit+0xa0>)
 8009a0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a0e:	6453      	str	r3, [r2, #68]	; 0x44
 8009a10:	4b08      	ldr	r3, [pc, #32]	; (8009a34 <HAL_PCD_MspInit+0xa0>)
 8009a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a18:	60fb      	str	r3, [r7, #12]
 8009a1a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	2100      	movs	r1, #0
 8009a20:	2043      	movs	r0, #67	; 0x43
 8009a22:	f7f8 fc70 	bl	8002306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009a26:	2043      	movs	r0, #67	; 0x43
 8009a28:	f7f8 fc89 	bl	800233e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009a2c:	bf00      	nop
 8009a2e:	3728      	adds	r7, #40	; 0x28
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	40023800 	.word	0x40023800
 8009a38:	40020000 	.word	0x40020000

08009a3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009a50:	4619      	mov	r1, r3
 8009a52:	4610      	mov	r0, r2
 8009a54:	f7fe fbe0 	bl	8008218 <USBD_LL_SetupStage>
}
 8009a58:	bf00      	nop
 8009a5a:	3708      	adds	r7, #8
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	460b      	mov	r3, r1
 8009a6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009a72:	78fa      	ldrb	r2, [r7, #3]
 8009a74:	6879      	ldr	r1, [r7, #4]
 8009a76:	4613      	mov	r3, r2
 8009a78:	00db      	lsls	r3, r3, #3
 8009a7a:	1a9b      	subs	r3, r3, r2
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	440b      	add	r3, r1
 8009a80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	78fb      	ldrb	r3, [r7, #3]
 8009a88:	4619      	mov	r1, r3
 8009a8a:	f7fe fc1a 	bl	80082c2 <USBD_LL_DataOutStage>
}
 8009a8e:	bf00      	nop
 8009a90:	3708      	adds	r7, #8
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b082      	sub	sp, #8
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009aa8:	78fa      	ldrb	r2, [r7, #3]
 8009aaa:	6879      	ldr	r1, [r7, #4]
 8009aac:	4613      	mov	r3, r2
 8009aae:	00db      	lsls	r3, r3, #3
 8009ab0:	1a9b      	subs	r3, r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	440b      	add	r3, r1
 8009ab6:	3348      	adds	r3, #72	; 0x48
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	78fb      	ldrb	r3, [r7, #3]
 8009abc:	4619      	mov	r1, r3
 8009abe:	f7fe fc63 	bl	8008388 <USBD_LL_DataInStage>
}
 8009ac2:	bf00      	nop
 8009ac4:	3708      	adds	r7, #8
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b082      	sub	sp, #8
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7fe fd77 	bl	80085cc <USBD_LL_SOF>
}
 8009ade:	bf00      	nop
 8009ae0:	3708      	adds	r7, #8
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b084      	sub	sp, #16
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009aee:	2301      	movs	r3, #1
 8009af0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d001      	beq.n	8009afe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009afa:	f7f7 fe35 	bl	8001768 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b04:	7bfa      	ldrb	r2, [r7, #15]
 8009b06:	4611      	mov	r1, r2
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7fe fd21 	bl	8008550 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7fe fccd 	bl	80084b4 <USBD_LL_Reset>
}
 8009b1a:	bf00      	nop
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
	...

08009b24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fe fd1c 	bl	8008570 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	6812      	ldr	r2, [r2, #0]
 8009b46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b4a:	f043 0301 	orr.w	r3, r3, #1
 8009b4e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6a1b      	ldr	r3, [r3, #32]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d005      	beq.n	8009b64 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b58:	4b04      	ldr	r3, [pc, #16]	; (8009b6c <HAL_PCD_SuspendCallback+0x48>)
 8009b5a:	691b      	ldr	r3, [r3, #16]
 8009b5c:	4a03      	ldr	r2, [pc, #12]	; (8009b6c <HAL_PCD_SuspendCallback+0x48>)
 8009b5e:	f043 0306 	orr.w	r3, r3, #6
 8009b62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009b64:	bf00      	nop
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	e000ed00 	.word	0xe000ed00

08009b70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7fe fd0c 	bl	800859c <USBD_LL_Resume>
}
 8009b84:	bf00      	nop
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	460b      	mov	r3, r1
 8009b96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b9e:	78fa      	ldrb	r2, [r7, #3]
 8009ba0:	4611      	mov	r1, r2
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7fe fd5a 	bl	800865c <USBD_LL_IsoOUTIncomplete>
}
 8009ba8:	bf00      	nop
 8009baa:	3708      	adds	r7, #8
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	460b      	mov	r3, r1
 8009bba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009bc2:	78fa      	ldrb	r2, [r7, #3]
 8009bc4:	4611      	mov	r1, r2
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7fe fd22 	bl	8008610 <USBD_LL_IsoINIncomplete>
}
 8009bcc:	bf00      	nop
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7fe fd60 	bl	80086a8 <USBD_LL_DevConnected>
}
 8009be8:	bf00      	nop
 8009bea:	3708      	adds	r7, #8
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7fe fd5d 	bl	80086be <USBD_LL_DevDisconnected>
}
 8009c04:	bf00      	nop
 8009c06:	3708      	adds	r7, #8
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b082      	sub	sp, #8
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d13c      	bne.n	8009c96 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009c1c:	4a20      	ldr	r2, [pc, #128]	; (8009ca0 <USBD_LL_Init+0x94>)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4a1e      	ldr	r2, [pc, #120]	; (8009ca0 <USBD_LL_Init+0x94>)
 8009c28:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009c2c:	4b1c      	ldr	r3, [pc, #112]	; (8009ca0 <USBD_LL_Init+0x94>)
 8009c2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009c32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009c34:	4b1a      	ldr	r3, [pc, #104]	; (8009ca0 <USBD_LL_Init+0x94>)
 8009c36:	2204      	movs	r2, #4
 8009c38:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009c3a:	4b19      	ldr	r3, [pc, #100]	; (8009ca0 <USBD_LL_Init+0x94>)
 8009c3c:	2202      	movs	r2, #2
 8009c3e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009c40:	4b17      	ldr	r3, [pc, #92]	; (8009ca0 <USBD_LL_Init+0x94>)
 8009c42:	2200      	movs	r2, #0
 8009c44:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009c46:	4b16      	ldr	r3, [pc, #88]	; (8009ca0 <USBD_LL_Init+0x94>)
 8009c48:	2202      	movs	r2, #2
 8009c4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009c4c:	4b14      	ldr	r3, [pc, #80]	; (8009ca0 <USBD_LL_Init+0x94>)
 8009c4e:	2200      	movs	r2, #0
 8009c50:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009c52:	4b13      	ldr	r3, [pc, #76]	; (8009ca0 <USBD_LL_Init+0x94>)
 8009c54:	2200      	movs	r2, #0
 8009c56:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009c58:	4b11      	ldr	r3, [pc, #68]	; (8009ca0 <USBD_LL_Init+0x94>)
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009c5e:	4b10      	ldr	r3, [pc, #64]	; (8009ca0 <USBD_LL_Init+0x94>)
 8009c60:	2200      	movs	r2, #0
 8009c62:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009c64:	4b0e      	ldr	r3, [pc, #56]	; (8009ca0 <USBD_LL_Init+0x94>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009c6a:	480d      	ldr	r0, [pc, #52]	; (8009ca0 <USBD_LL_Init+0x94>)
 8009c6c:	f7f9 fcf3 	bl	8003656 <HAL_PCD_Init>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d001      	beq.n	8009c7a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009c76:	f7f7 fd77 	bl	8001768 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009c7a:	2180      	movs	r1, #128	; 0x80
 8009c7c:	4808      	ldr	r0, [pc, #32]	; (8009ca0 <USBD_LL_Init+0x94>)
 8009c7e:	f7fa fe50 	bl	8004922 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009c82:	2240      	movs	r2, #64	; 0x40
 8009c84:	2100      	movs	r1, #0
 8009c86:	4806      	ldr	r0, [pc, #24]	; (8009ca0 <USBD_LL_Init+0x94>)
 8009c88:	f7fa fe04 	bl	8004894 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009c8c:	2280      	movs	r2, #128	; 0x80
 8009c8e:	2101      	movs	r1, #1
 8009c90:	4803      	ldr	r0, [pc, #12]	; (8009ca0 <USBD_LL_Init+0x94>)
 8009c92:	f7fa fdff 	bl	8004894 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009c96:	2300      	movs	r3, #0
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	200024bc 	.word	0x200024bc

08009ca4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cac:	2300      	movs	r3, #0
 8009cae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7f9 fde8 	bl	8003890 <HAL_PCD_Start>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cc4:	7bfb      	ldrb	r3, [r7, #15]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f000 f942 	bl	8009f50 <USBD_Get_USB_Status>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b084      	sub	sp, #16
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
 8009ce2:	4608      	mov	r0, r1
 8009ce4:	4611      	mov	r1, r2
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	4603      	mov	r3, r0
 8009cea:	70fb      	strb	r3, [r7, #3]
 8009cec:	460b      	mov	r3, r1
 8009cee:	70bb      	strb	r3, [r7, #2]
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d02:	78bb      	ldrb	r3, [r7, #2]
 8009d04:	883a      	ldrh	r2, [r7, #0]
 8009d06:	78f9      	ldrb	r1, [r7, #3]
 8009d08:	f7fa f9cc 	bl	80040a4 <HAL_PCD_EP_Open>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d10:	7bfb      	ldrb	r3, [r7, #15]
 8009d12:	4618      	mov	r0, r3
 8009d14:	f000 f91c 	bl	8009f50 <USBD_Get_USB_Status>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b084      	sub	sp, #16
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
 8009d2e:	460b      	mov	r3, r1
 8009d30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d36:	2300      	movs	r3, #0
 8009d38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d40:	78fa      	ldrb	r2, [r7, #3]
 8009d42:	4611      	mov	r1, r2
 8009d44:	4618      	mov	r0, r3
 8009d46:	f7fa fa15 	bl	8004174 <HAL_PCD_EP_Close>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d4e:	7bfb      	ldrb	r3, [r7, #15]
 8009d50:	4618      	mov	r0, r3
 8009d52:	f000 f8fd 	bl	8009f50 <USBD_Get_USB_Status>
 8009d56:	4603      	mov	r3, r0
 8009d58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d70:	2300      	movs	r3, #0
 8009d72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d74:	2300      	movs	r3, #0
 8009d76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d7e:	78fa      	ldrb	r2, [r7, #3]
 8009d80:	4611      	mov	r1, r2
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7fa faed 	bl	8004362 <HAL_PCD_EP_SetStall>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d8c:	7bfb      	ldrb	r3, [r7, #15]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 f8de 	bl	8009f50 <USBD_Get_USB_Status>
 8009d94:	4603      	mov	r3, r0
 8009d96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d98:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b084      	sub	sp, #16
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
 8009daa:	460b      	mov	r3, r1
 8009dac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dae:	2300      	movs	r3, #0
 8009db0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009dbc:	78fa      	ldrb	r2, [r7, #3]
 8009dbe:	4611      	mov	r1, r2
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7fa fb32 	bl	800442a <HAL_PCD_EP_ClrStall>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dca:	7bfb      	ldrb	r3, [r7, #15]
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f000 f8bf 	bl	8009f50 <USBD_Get_USB_Status>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3710      	adds	r7, #16
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	460b      	mov	r3, r1
 8009dea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009df2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009df4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	da0b      	bge.n	8009e14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009dfc:	78fb      	ldrb	r3, [r7, #3]
 8009dfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e02:	68f9      	ldr	r1, [r7, #12]
 8009e04:	4613      	mov	r3, r2
 8009e06:	00db      	lsls	r3, r3, #3
 8009e08:	1a9b      	subs	r3, r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	440b      	add	r3, r1
 8009e0e:	333e      	adds	r3, #62	; 0x3e
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	e00b      	b.n	8009e2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009e14:	78fb      	ldrb	r3, [r7, #3]
 8009e16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e1a:	68f9      	ldr	r1, [r7, #12]
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	00db      	lsls	r3, r3, #3
 8009e20:	1a9b      	subs	r3, r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	440b      	add	r3, r1
 8009e26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009e2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3714      	adds	r7, #20
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	460b      	mov	r3, r1
 8009e42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e44:	2300      	movs	r3, #0
 8009e46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e52:	78fa      	ldrb	r2, [r7, #3]
 8009e54:	4611      	mov	r1, r2
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7fa f8ff 	bl	800405a <HAL_PCD_SetAddress>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e60:	7bfb      	ldrb	r3, [r7, #15]
 8009e62:	4618      	mov	r0, r3
 8009e64:	f000 f874 	bl	8009f50 <USBD_Get_USB_Status>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b086      	sub	sp, #24
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	60f8      	str	r0, [r7, #12]
 8009e7e:	607a      	str	r2, [r7, #4]
 8009e80:	603b      	str	r3, [r7, #0]
 8009e82:	460b      	mov	r3, r1
 8009e84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e86:	2300      	movs	r3, #0
 8009e88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e94:	7af9      	ldrb	r1, [r7, #11]
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	f7fa fa18 	bl	80042ce <HAL_PCD_EP_Transmit>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ea2:	7dfb      	ldrb	r3, [r7, #23]
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f000 f853 	bl	8009f50 <USBD_Get_USB_Status>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009eae:	7dbb      	ldrb	r3, [r7, #22]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3718      	adds	r7, #24
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	607a      	str	r2, [r7, #4]
 8009ec2:	603b      	str	r3, [r7, #0]
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009ed6:	7af9      	ldrb	r1, [r7, #11]
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	f7fa f994 	bl	8004208 <HAL_PCD_EP_Receive>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ee4:	7dfb      	ldrb	r3, [r7, #23]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f000 f832 	bl	8009f50 <USBD_Get_USB_Status>
 8009eec:	4603      	mov	r3, r0
 8009eee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ef0:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3718      	adds	r7, #24
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b082      	sub	sp, #8
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
 8009f02:	460b      	mov	r3, r1
 8009f04:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f0c:	78fa      	ldrb	r2, [r7, #3]
 8009f0e:	4611      	mov	r1, r2
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7fa f9c4 	bl	800429e <HAL_PCD_EP_GetRxCount>
 8009f16:	4603      	mov	r3, r0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3708      	adds	r7, #8
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009f28:	4b03      	ldr	r3, [pc, #12]	; (8009f38 <USBD_static_malloc+0x18>)
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	370c      	adds	r7, #12
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr
 8009f36:	bf00      	nop
 8009f38:	200008b4 	.word	0x200008b4

08009f3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]

}
 8009f44:	bf00      	nop
 8009f46:	370c      	adds	r7, #12
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr

08009f50 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	4603      	mov	r3, r0
 8009f58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f5e:	79fb      	ldrb	r3, [r7, #7]
 8009f60:	2b03      	cmp	r3, #3
 8009f62:	d817      	bhi.n	8009f94 <USBD_Get_USB_Status+0x44>
 8009f64:	a201      	add	r2, pc, #4	; (adr r2, 8009f6c <USBD_Get_USB_Status+0x1c>)
 8009f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6a:	bf00      	nop
 8009f6c:	08009f7d 	.word	0x08009f7d
 8009f70:	08009f83 	.word	0x08009f83
 8009f74:	08009f89 	.word	0x08009f89
 8009f78:	08009f8f 	.word	0x08009f8f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f80:	e00b      	b.n	8009f9a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f82:	2303      	movs	r3, #3
 8009f84:	73fb      	strb	r3, [r7, #15]
    break;
 8009f86:	e008      	b.n	8009f9a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f8c:	e005      	b.n	8009f9a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f8e:	2303      	movs	r3, #3
 8009f90:	73fb      	strb	r3, [r7, #15]
    break;
 8009f92:	e002      	b.n	8009f9a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009f94:	2303      	movs	r3, #3
 8009f96:	73fb      	strb	r3, [r7, #15]
    break;
 8009f98:	bf00      	nop
  }
  return usb_status;
 8009f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3714      	adds	r7, #20
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <__errno>:
 8009fa8:	4b01      	ldr	r3, [pc, #4]	; (8009fb0 <__errno+0x8>)
 8009faa:	6818      	ldr	r0, [r3, #0]
 8009fac:	4770      	bx	lr
 8009fae:	bf00      	nop
 8009fb0:	20000194 	.word	0x20000194

08009fb4 <__libc_init_array>:
 8009fb4:	b570      	push	{r4, r5, r6, lr}
 8009fb6:	4d0d      	ldr	r5, [pc, #52]	; (8009fec <__libc_init_array+0x38>)
 8009fb8:	4c0d      	ldr	r4, [pc, #52]	; (8009ff0 <__libc_init_array+0x3c>)
 8009fba:	1b64      	subs	r4, r4, r5
 8009fbc:	10a4      	asrs	r4, r4, #2
 8009fbe:	2600      	movs	r6, #0
 8009fc0:	42a6      	cmp	r6, r4
 8009fc2:	d109      	bne.n	8009fd8 <__libc_init_array+0x24>
 8009fc4:	4d0b      	ldr	r5, [pc, #44]	; (8009ff4 <__libc_init_array+0x40>)
 8009fc6:	4c0c      	ldr	r4, [pc, #48]	; (8009ff8 <__libc_init_array+0x44>)
 8009fc8:	f001 fcb0 	bl	800b92c <_init>
 8009fcc:	1b64      	subs	r4, r4, r5
 8009fce:	10a4      	asrs	r4, r4, #2
 8009fd0:	2600      	movs	r6, #0
 8009fd2:	42a6      	cmp	r6, r4
 8009fd4:	d105      	bne.n	8009fe2 <__libc_init_array+0x2e>
 8009fd6:	bd70      	pop	{r4, r5, r6, pc}
 8009fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fdc:	4798      	blx	r3
 8009fde:	3601      	adds	r6, #1
 8009fe0:	e7ee      	b.n	8009fc0 <__libc_init_array+0xc>
 8009fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fe6:	4798      	blx	r3
 8009fe8:	3601      	adds	r6, #1
 8009fea:	e7f2      	b.n	8009fd2 <__libc_init_array+0x1e>
 8009fec:	0800d0d0 	.word	0x0800d0d0
 8009ff0:	0800d0d0 	.word	0x0800d0d0
 8009ff4:	0800d0d0 	.word	0x0800d0d0
 8009ff8:	0800d0d4 	.word	0x0800d0d4

08009ffc <memset>:
 8009ffc:	4402      	add	r2, r0
 8009ffe:	4603      	mov	r3, r0
 800a000:	4293      	cmp	r3, r2
 800a002:	d100      	bne.n	800a006 <memset+0xa>
 800a004:	4770      	bx	lr
 800a006:	f803 1b01 	strb.w	r1, [r3], #1
 800a00a:	e7f9      	b.n	800a000 <memset+0x4>

0800a00c <siprintf>:
 800a00c:	b40e      	push	{r1, r2, r3}
 800a00e:	b500      	push	{lr}
 800a010:	b09c      	sub	sp, #112	; 0x70
 800a012:	ab1d      	add	r3, sp, #116	; 0x74
 800a014:	9002      	str	r0, [sp, #8]
 800a016:	9006      	str	r0, [sp, #24]
 800a018:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a01c:	4809      	ldr	r0, [pc, #36]	; (800a044 <siprintf+0x38>)
 800a01e:	9107      	str	r1, [sp, #28]
 800a020:	9104      	str	r1, [sp, #16]
 800a022:	4909      	ldr	r1, [pc, #36]	; (800a048 <siprintf+0x3c>)
 800a024:	f853 2b04 	ldr.w	r2, [r3], #4
 800a028:	9105      	str	r1, [sp, #20]
 800a02a:	6800      	ldr	r0, [r0, #0]
 800a02c:	9301      	str	r3, [sp, #4]
 800a02e:	a902      	add	r1, sp, #8
 800a030:	f000 f868 	bl	800a104 <_svfiprintf_r>
 800a034:	9b02      	ldr	r3, [sp, #8]
 800a036:	2200      	movs	r2, #0
 800a038:	701a      	strb	r2, [r3, #0]
 800a03a:	b01c      	add	sp, #112	; 0x70
 800a03c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a040:	b003      	add	sp, #12
 800a042:	4770      	bx	lr
 800a044:	20000194 	.word	0x20000194
 800a048:	ffff0208 	.word	0xffff0208

0800a04c <__ssputs_r>:
 800a04c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a050:	688e      	ldr	r6, [r1, #8]
 800a052:	429e      	cmp	r6, r3
 800a054:	4682      	mov	sl, r0
 800a056:	460c      	mov	r4, r1
 800a058:	4690      	mov	r8, r2
 800a05a:	461f      	mov	r7, r3
 800a05c:	d838      	bhi.n	800a0d0 <__ssputs_r+0x84>
 800a05e:	898a      	ldrh	r2, [r1, #12]
 800a060:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a064:	d032      	beq.n	800a0cc <__ssputs_r+0x80>
 800a066:	6825      	ldr	r5, [r4, #0]
 800a068:	6909      	ldr	r1, [r1, #16]
 800a06a:	eba5 0901 	sub.w	r9, r5, r1
 800a06e:	6965      	ldr	r5, [r4, #20]
 800a070:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a074:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a078:	3301      	adds	r3, #1
 800a07a:	444b      	add	r3, r9
 800a07c:	106d      	asrs	r5, r5, #1
 800a07e:	429d      	cmp	r5, r3
 800a080:	bf38      	it	cc
 800a082:	461d      	movcc	r5, r3
 800a084:	0553      	lsls	r3, r2, #21
 800a086:	d531      	bpl.n	800a0ec <__ssputs_r+0xa0>
 800a088:	4629      	mov	r1, r5
 800a08a:	f000 fb47 	bl	800a71c <_malloc_r>
 800a08e:	4606      	mov	r6, r0
 800a090:	b950      	cbnz	r0, 800a0a8 <__ssputs_r+0x5c>
 800a092:	230c      	movs	r3, #12
 800a094:	f8ca 3000 	str.w	r3, [sl]
 800a098:	89a3      	ldrh	r3, [r4, #12]
 800a09a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a09e:	81a3      	strh	r3, [r4, #12]
 800a0a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0a8:	6921      	ldr	r1, [r4, #16]
 800a0aa:	464a      	mov	r2, r9
 800a0ac:	f000 fabe 	bl	800a62c <memcpy>
 800a0b0:	89a3      	ldrh	r3, [r4, #12]
 800a0b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0ba:	81a3      	strh	r3, [r4, #12]
 800a0bc:	6126      	str	r6, [r4, #16]
 800a0be:	6165      	str	r5, [r4, #20]
 800a0c0:	444e      	add	r6, r9
 800a0c2:	eba5 0509 	sub.w	r5, r5, r9
 800a0c6:	6026      	str	r6, [r4, #0]
 800a0c8:	60a5      	str	r5, [r4, #8]
 800a0ca:	463e      	mov	r6, r7
 800a0cc:	42be      	cmp	r6, r7
 800a0ce:	d900      	bls.n	800a0d2 <__ssputs_r+0x86>
 800a0d0:	463e      	mov	r6, r7
 800a0d2:	4632      	mov	r2, r6
 800a0d4:	6820      	ldr	r0, [r4, #0]
 800a0d6:	4641      	mov	r1, r8
 800a0d8:	f000 fab6 	bl	800a648 <memmove>
 800a0dc:	68a3      	ldr	r3, [r4, #8]
 800a0de:	6822      	ldr	r2, [r4, #0]
 800a0e0:	1b9b      	subs	r3, r3, r6
 800a0e2:	4432      	add	r2, r6
 800a0e4:	60a3      	str	r3, [r4, #8]
 800a0e6:	6022      	str	r2, [r4, #0]
 800a0e8:	2000      	movs	r0, #0
 800a0ea:	e7db      	b.n	800a0a4 <__ssputs_r+0x58>
 800a0ec:	462a      	mov	r2, r5
 800a0ee:	f000 fb6f 	bl	800a7d0 <_realloc_r>
 800a0f2:	4606      	mov	r6, r0
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	d1e1      	bne.n	800a0bc <__ssputs_r+0x70>
 800a0f8:	6921      	ldr	r1, [r4, #16]
 800a0fa:	4650      	mov	r0, sl
 800a0fc:	f000 fabe 	bl	800a67c <_free_r>
 800a100:	e7c7      	b.n	800a092 <__ssputs_r+0x46>
	...

0800a104 <_svfiprintf_r>:
 800a104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a108:	4698      	mov	r8, r3
 800a10a:	898b      	ldrh	r3, [r1, #12]
 800a10c:	061b      	lsls	r3, r3, #24
 800a10e:	b09d      	sub	sp, #116	; 0x74
 800a110:	4607      	mov	r7, r0
 800a112:	460d      	mov	r5, r1
 800a114:	4614      	mov	r4, r2
 800a116:	d50e      	bpl.n	800a136 <_svfiprintf_r+0x32>
 800a118:	690b      	ldr	r3, [r1, #16]
 800a11a:	b963      	cbnz	r3, 800a136 <_svfiprintf_r+0x32>
 800a11c:	2140      	movs	r1, #64	; 0x40
 800a11e:	f000 fafd 	bl	800a71c <_malloc_r>
 800a122:	6028      	str	r0, [r5, #0]
 800a124:	6128      	str	r0, [r5, #16]
 800a126:	b920      	cbnz	r0, 800a132 <_svfiprintf_r+0x2e>
 800a128:	230c      	movs	r3, #12
 800a12a:	603b      	str	r3, [r7, #0]
 800a12c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a130:	e0d1      	b.n	800a2d6 <_svfiprintf_r+0x1d2>
 800a132:	2340      	movs	r3, #64	; 0x40
 800a134:	616b      	str	r3, [r5, #20]
 800a136:	2300      	movs	r3, #0
 800a138:	9309      	str	r3, [sp, #36]	; 0x24
 800a13a:	2320      	movs	r3, #32
 800a13c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a140:	f8cd 800c 	str.w	r8, [sp, #12]
 800a144:	2330      	movs	r3, #48	; 0x30
 800a146:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a2f0 <_svfiprintf_r+0x1ec>
 800a14a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a14e:	f04f 0901 	mov.w	r9, #1
 800a152:	4623      	mov	r3, r4
 800a154:	469a      	mov	sl, r3
 800a156:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a15a:	b10a      	cbz	r2, 800a160 <_svfiprintf_r+0x5c>
 800a15c:	2a25      	cmp	r2, #37	; 0x25
 800a15e:	d1f9      	bne.n	800a154 <_svfiprintf_r+0x50>
 800a160:	ebba 0b04 	subs.w	fp, sl, r4
 800a164:	d00b      	beq.n	800a17e <_svfiprintf_r+0x7a>
 800a166:	465b      	mov	r3, fp
 800a168:	4622      	mov	r2, r4
 800a16a:	4629      	mov	r1, r5
 800a16c:	4638      	mov	r0, r7
 800a16e:	f7ff ff6d 	bl	800a04c <__ssputs_r>
 800a172:	3001      	adds	r0, #1
 800a174:	f000 80aa 	beq.w	800a2cc <_svfiprintf_r+0x1c8>
 800a178:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a17a:	445a      	add	r2, fp
 800a17c:	9209      	str	r2, [sp, #36]	; 0x24
 800a17e:	f89a 3000 	ldrb.w	r3, [sl]
 800a182:	2b00      	cmp	r3, #0
 800a184:	f000 80a2 	beq.w	800a2cc <_svfiprintf_r+0x1c8>
 800a188:	2300      	movs	r3, #0
 800a18a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a18e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a192:	f10a 0a01 	add.w	sl, sl, #1
 800a196:	9304      	str	r3, [sp, #16]
 800a198:	9307      	str	r3, [sp, #28]
 800a19a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a19e:	931a      	str	r3, [sp, #104]	; 0x68
 800a1a0:	4654      	mov	r4, sl
 800a1a2:	2205      	movs	r2, #5
 800a1a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1a8:	4851      	ldr	r0, [pc, #324]	; (800a2f0 <_svfiprintf_r+0x1ec>)
 800a1aa:	f7f6 f819 	bl	80001e0 <memchr>
 800a1ae:	9a04      	ldr	r2, [sp, #16]
 800a1b0:	b9d8      	cbnz	r0, 800a1ea <_svfiprintf_r+0xe6>
 800a1b2:	06d0      	lsls	r0, r2, #27
 800a1b4:	bf44      	itt	mi
 800a1b6:	2320      	movmi	r3, #32
 800a1b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1bc:	0711      	lsls	r1, r2, #28
 800a1be:	bf44      	itt	mi
 800a1c0:	232b      	movmi	r3, #43	; 0x2b
 800a1c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1c6:	f89a 3000 	ldrb.w	r3, [sl]
 800a1ca:	2b2a      	cmp	r3, #42	; 0x2a
 800a1cc:	d015      	beq.n	800a1fa <_svfiprintf_r+0xf6>
 800a1ce:	9a07      	ldr	r2, [sp, #28]
 800a1d0:	4654      	mov	r4, sl
 800a1d2:	2000      	movs	r0, #0
 800a1d4:	f04f 0c0a 	mov.w	ip, #10
 800a1d8:	4621      	mov	r1, r4
 800a1da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1de:	3b30      	subs	r3, #48	; 0x30
 800a1e0:	2b09      	cmp	r3, #9
 800a1e2:	d94e      	bls.n	800a282 <_svfiprintf_r+0x17e>
 800a1e4:	b1b0      	cbz	r0, 800a214 <_svfiprintf_r+0x110>
 800a1e6:	9207      	str	r2, [sp, #28]
 800a1e8:	e014      	b.n	800a214 <_svfiprintf_r+0x110>
 800a1ea:	eba0 0308 	sub.w	r3, r0, r8
 800a1ee:	fa09 f303 	lsl.w	r3, r9, r3
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	9304      	str	r3, [sp, #16]
 800a1f6:	46a2      	mov	sl, r4
 800a1f8:	e7d2      	b.n	800a1a0 <_svfiprintf_r+0x9c>
 800a1fa:	9b03      	ldr	r3, [sp, #12]
 800a1fc:	1d19      	adds	r1, r3, #4
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	9103      	str	r1, [sp, #12]
 800a202:	2b00      	cmp	r3, #0
 800a204:	bfbb      	ittet	lt
 800a206:	425b      	neglt	r3, r3
 800a208:	f042 0202 	orrlt.w	r2, r2, #2
 800a20c:	9307      	strge	r3, [sp, #28]
 800a20e:	9307      	strlt	r3, [sp, #28]
 800a210:	bfb8      	it	lt
 800a212:	9204      	strlt	r2, [sp, #16]
 800a214:	7823      	ldrb	r3, [r4, #0]
 800a216:	2b2e      	cmp	r3, #46	; 0x2e
 800a218:	d10c      	bne.n	800a234 <_svfiprintf_r+0x130>
 800a21a:	7863      	ldrb	r3, [r4, #1]
 800a21c:	2b2a      	cmp	r3, #42	; 0x2a
 800a21e:	d135      	bne.n	800a28c <_svfiprintf_r+0x188>
 800a220:	9b03      	ldr	r3, [sp, #12]
 800a222:	1d1a      	adds	r2, r3, #4
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	9203      	str	r2, [sp, #12]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	bfb8      	it	lt
 800a22c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a230:	3402      	adds	r4, #2
 800a232:	9305      	str	r3, [sp, #20]
 800a234:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a300 <_svfiprintf_r+0x1fc>
 800a238:	7821      	ldrb	r1, [r4, #0]
 800a23a:	2203      	movs	r2, #3
 800a23c:	4650      	mov	r0, sl
 800a23e:	f7f5 ffcf 	bl	80001e0 <memchr>
 800a242:	b140      	cbz	r0, 800a256 <_svfiprintf_r+0x152>
 800a244:	2340      	movs	r3, #64	; 0x40
 800a246:	eba0 000a 	sub.w	r0, r0, sl
 800a24a:	fa03 f000 	lsl.w	r0, r3, r0
 800a24e:	9b04      	ldr	r3, [sp, #16]
 800a250:	4303      	orrs	r3, r0
 800a252:	3401      	adds	r4, #1
 800a254:	9304      	str	r3, [sp, #16]
 800a256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a25a:	4826      	ldr	r0, [pc, #152]	; (800a2f4 <_svfiprintf_r+0x1f0>)
 800a25c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a260:	2206      	movs	r2, #6
 800a262:	f7f5 ffbd 	bl	80001e0 <memchr>
 800a266:	2800      	cmp	r0, #0
 800a268:	d038      	beq.n	800a2dc <_svfiprintf_r+0x1d8>
 800a26a:	4b23      	ldr	r3, [pc, #140]	; (800a2f8 <_svfiprintf_r+0x1f4>)
 800a26c:	bb1b      	cbnz	r3, 800a2b6 <_svfiprintf_r+0x1b2>
 800a26e:	9b03      	ldr	r3, [sp, #12]
 800a270:	3307      	adds	r3, #7
 800a272:	f023 0307 	bic.w	r3, r3, #7
 800a276:	3308      	adds	r3, #8
 800a278:	9303      	str	r3, [sp, #12]
 800a27a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a27c:	4433      	add	r3, r6
 800a27e:	9309      	str	r3, [sp, #36]	; 0x24
 800a280:	e767      	b.n	800a152 <_svfiprintf_r+0x4e>
 800a282:	fb0c 3202 	mla	r2, ip, r2, r3
 800a286:	460c      	mov	r4, r1
 800a288:	2001      	movs	r0, #1
 800a28a:	e7a5      	b.n	800a1d8 <_svfiprintf_r+0xd4>
 800a28c:	2300      	movs	r3, #0
 800a28e:	3401      	adds	r4, #1
 800a290:	9305      	str	r3, [sp, #20]
 800a292:	4619      	mov	r1, r3
 800a294:	f04f 0c0a 	mov.w	ip, #10
 800a298:	4620      	mov	r0, r4
 800a29a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a29e:	3a30      	subs	r2, #48	; 0x30
 800a2a0:	2a09      	cmp	r2, #9
 800a2a2:	d903      	bls.n	800a2ac <_svfiprintf_r+0x1a8>
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d0c5      	beq.n	800a234 <_svfiprintf_r+0x130>
 800a2a8:	9105      	str	r1, [sp, #20]
 800a2aa:	e7c3      	b.n	800a234 <_svfiprintf_r+0x130>
 800a2ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2b0:	4604      	mov	r4, r0
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e7f0      	b.n	800a298 <_svfiprintf_r+0x194>
 800a2b6:	ab03      	add	r3, sp, #12
 800a2b8:	9300      	str	r3, [sp, #0]
 800a2ba:	462a      	mov	r2, r5
 800a2bc:	4b0f      	ldr	r3, [pc, #60]	; (800a2fc <_svfiprintf_r+0x1f8>)
 800a2be:	a904      	add	r1, sp, #16
 800a2c0:	4638      	mov	r0, r7
 800a2c2:	f3af 8000 	nop.w
 800a2c6:	1c42      	adds	r2, r0, #1
 800a2c8:	4606      	mov	r6, r0
 800a2ca:	d1d6      	bne.n	800a27a <_svfiprintf_r+0x176>
 800a2cc:	89ab      	ldrh	r3, [r5, #12]
 800a2ce:	065b      	lsls	r3, r3, #25
 800a2d0:	f53f af2c 	bmi.w	800a12c <_svfiprintf_r+0x28>
 800a2d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2d6:	b01d      	add	sp, #116	; 0x74
 800a2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2dc:	ab03      	add	r3, sp, #12
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	462a      	mov	r2, r5
 800a2e2:	4b06      	ldr	r3, [pc, #24]	; (800a2fc <_svfiprintf_r+0x1f8>)
 800a2e4:	a904      	add	r1, sp, #16
 800a2e6:	4638      	mov	r0, r7
 800a2e8:	f000 f87a 	bl	800a3e0 <_printf_i>
 800a2ec:	e7eb      	b.n	800a2c6 <_svfiprintf_r+0x1c2>
 800a2ee:	bf00      	nop
 800a2f0:	0800ceb8 	.word	0x0800ceb8
 800a2f4:	0800cec2 	.word	0x0800cec2
 800a2f8:	00000000 	.word	0x00000000
 800a2fc:	0800a04d 	.word	0x0800a04d
 800a300:	0800cebe 	.word	0x0800cebe

0800a304 <_printf_common>:
 800a304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a308:	4616      	mov	r6, r2
 800a30a:	4699      	mov	r9, r3
 800a30c:	688a      	ldr	r2, [r1, #8]
 800a30e:	690b      	ldr	r3, [r1, #16]
 800a310:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a314:	4293      	cmp	r3, r2
 800a316:	bfb8      	it	lt
 800a318:	4613      	movlt	r3, r2
 800a31a:	6033      	str	r3, [r6, #0]
 800a31c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a320:	4607      	mov	r7, r0
 800a322:	460c      	mov	r4, r1
 800a324:	b10a      	cbz	r2, 800a32a <_printf_common+0x26>
 800a326:	3301      	adds	r3, #1
 800a328:	6033      	str	r3, [r6, #0]
 800a32a:	6823      	ldr	r3, [r4, #0]
 800a32c:	0699      	lsls	r1, r3, #26
 800a32e:	bf42      	ittt	mi
 800a330:	6833      	ldrmi	r3, [r6, #0]
 800a332:	3302      	addmi	r3, #2
 800a334:	6033      	strmi	r3, [r6, #0]
 800a336:	6825      	ldr	r5, [r4, #0]
 800a338:	f015 0506 	ands.w	r5, r5, #6
 800a33c:	d106      	bne.n	800a34c <_printf_common+0x48>
 800a33e:	f104 0a19 	add.w	sl, r4, #25
 800a342:	68e3      	ldr	r3, [r4, #12]
 800a344:	6832      	ldr	r2, [r6, #0]
 800a346:	1a9b      	subs	r3, r3, r2
 800a348:	42ab      	cmp	r3, r5
 800a34a:	dc26      	bgt.n	800a39a <_printf_common+0x96>
 800a34c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a350:	1e13      	subs	r3, r2, #0
 800a352:	6822      	ldr	r2, [r4, #0]
 800a354:	bf18      	it	ne
 800a356:	2301      	movne	r3, #1
 800a358:	0692      	lsls	r2, r2, #26
 800a35a:	d42b      	bmi.n	800a3b4 <_printf_common+0xb0>
 800a35c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a360:	4649      	mov	r1, r9
 800a362:	4638      	mov	r0, r7
 800a364:	47c0      	blx	r8
 800a366:	3001      	adds	r0, #1
 800a368:	d01e      	beq.n	800a3a8 <_printf_common+0xa4>
 800a36a:	6823      	ldr	r3, [r4, #0]
 800a36c:	68e5      	ldr	r5, [r4, #12]
 800a36e:	6832      	ldr	r2, [r6, #0]
 800a370:	f003 0306 	and.w	r3, r3, #6
 800a374:	2b04      	cmp	r3, #4
 800a376:	bf08      	it	eq
 800a378:	1aad      	subeq	r5, r5, r2
 800a37a:	68a3      	ldr	r3, [r4, #8]
 800a37c:	6922      	ldr	r2, [r4, #16]
 800a37e:	bf0c      	ite	eq
 800a380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a384:	2500      	movne	r5, #0
 800a386:	4293      	cmp	r3, r2
 800a388:	bfc4      	itt	gt
 800a38a:	1a9b      	subgt	r3, r3, r2
 800a38c:	18ed      	addgt	r5, r5, r3
 800a38e:	2600      	movs	r6, #0
 800a390:	341a      	adds	r4, #26
 800a392:	42b5      	cmp	r5, r6
 800a394:	d11a      	bne.n	800a3cc <_printf_common+0xc8>
 800a396:	2000      	movs	r0, #0
 800a398:	e008      	b.n	800a3ac <_printf_common+0xa8>
 800a39a:	2301      	movs	r3, #1
 800a39c:	4652      	mov	r2, sl
 800a39e:	4649      	mov	r1, r9
 800a3a0:	4638      	mov	r0, r7
 800a3a2:	47c0      	blx	r8
 800a3a4:	3001      	adds	r0, #1
 800a3a6:	d103      	bne.n	800a3b0 <_printf_common+0xac>
 800a3a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3b0:	3501      	adds	r5, #1
 800a3b2:	e7c6      	b.n	800a342 <_printf_common+0x3e>
 800a3b4:	18e1      	adds	r1, r4, r3
 800a3b6:	1c5a      	adds	r2, r3, #1
 800a3b8:	2030      	movs	r0, #48	; 0x30
 800a3ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3be:	4422      	add	r2, r4
 800a3c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3c8:	3302      	adds	r3, #2
 800a3ca:	e7c7      	b.n	800a35c <_printf_common+0x58>
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	4622      	mov	r2, r4
 800a3d0:	4649      	mov	r1, r9
 800a3d2:	4638      	mov	r0, r7
 800a3d4:	47c0      	blx	r8
 800a3d6:	3001      	adds	r0, #1
 800a3d8:	d0e6      	beq.n	800a3a8 <_printf_common+0xa4>
 800a3da:	3601      	adds	r6, #1
 800a3dc:	e7d9      	b.n	800a392 <_printf_common+0x8e>
	...

0800a3e0 <_printf_i>:
 800a3e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e4:	460c      	mov	r4, r1
 800a3e6:	4691      	mov	r9, r2
 800a3e8:	7e27      	ldrb	r7, [r4, #24]
 800a3ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a3ec:	2f78      	cmp	r7, #120	; 0x78
 800a3ee:	4680      	mov	r8, r0
 800a3f0:	469a      	mov	sl, r3
 800a3f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3f6:	d807      	bhi.n	800a408 <_printf_i+0x28>
 800a3f8:	2f62      	cmp	r7, #98	; 0x62
 800a3fa:	d80a      	bhi.n	800a412 <_printf_i+0x32>
 800a3fc:	2f00      	cmp	r7, #0
 800a3fe:	f000 80d8 	beq.w	800a5b2 <_printf_i+0x1d2>
 800a402:	2f58      	cmp	r7, #88	; 0x58
 800a404:	f000 80a3 	beq.w	800a54e <_printf_i+0x16e>
 800a408:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a40c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a410:	e03a      	b.n	800a488 <_printf_i+0xa8>
 800a412:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a416:	2b15      	cmp	r3, #21
 800a418:	d8f6      	bhi.n	800a408 <_printf_i+0x28>
 800a41a:	a001      	add	r0, pc, #4	; (adr r0, 800a420 <_printf_i+0x40>)
 800a41c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a420:	0800a479 	.word	0x0800a479
 800a424:	0800a48d 	.word	0x0800a48d
 800a428:	0800a409 	.word	0x0800a409
 800a42c:	0800a409 	.word	0x0800a409
 800a430:	0800a409 	.word	0x0800a409
 800a434:	0800a409 	.word	0x0800a409
 800a438:	0800a48d 	.word	0x0800a48d
 800a43c:	0800a409 	.word	0x0800a409
 800a440:	0800a409 	.word	0x0800a409
 800a444:	0800a409 	.word	0x0800a409
 800a448:	0800a409 	.word	0x0800a409
 800a44c:	0800a599 	.word	0x0800a599
 800a450:	0800a4bd 	.word	0x0800a4bd
 800a454:	0800a57b 	.word	0x0800a57b
 800a458:	0800a409 	.word	0x0800a409
 800a45c:	0800a409 	.word	0x0800a409
 800a460:	0800a5bb 	.word	0x0800a5bb
 800a464:	0800a409 	.word	0x0800a409
 800a468:	0800a4bd 	.word	0x0800a4bd
 800a46c:	0800a409 	.word	0x0800a409
 800a470:	0800a409 	.word	0x0800a409
 800a474:	0800a583 	.word	0x0800a583
 800a478:	680b      	ldr	r3, [r1, #0]
 800a47a:	1d1a      	adds	r2, r3, #4
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	600a      	str	r2, [r1, #0]
 800a480:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a488:	2301      	movs	r3, #1
 800a48a:	e0a3      	b.n	800a5d4 <_printf_i+0x1f4>
 800a48c:	6825      	ldr	r5, [r4, #0]
 800a48e:	6808      	ldr	r0, [r1, #0]
 800a490:	062e      	lsls	r6, r5, #24
 800a492:	f100 0304 	add.w	r3, r0, #4
 800a496:	d50a      	bpl.n	800a4ae <_printf_i+0xce>
 800a498:	6805      	ldr	r5, [r0, #0]
 800a49a:	600b      	str	r3, [r1, #0]
 800a49c:	2d00      	cmp	r5, #0
 800a49e:	da03      	bge.n	800a4a8 <_printf_i+0xc8>
 800a4a0:	232d      	movs	r3, #45	; 0x2d
 800a4a2:	426d      	negs	r5, r5
 800a4a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4a8:	485e      	ldr	r0, [pc, #376]	; (800a624 <_printf_i+0x244>)
 800a4aa:	230a      	movs	r3, #10
 800a4ac:	e019      	b.n	800a4e2 <_printf_i+0x102>
 800a4ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a4b2:	6805      	ldr	r5, [r0, #0]
 800a4b4:	600b      	str	r3, [r1, #0]
 800a4b6:	bf18      	it	ne
 800a4b8:	b22d      	sxthne	r5, r5
 800a4ba:	e7ef      	b.n	800a49c <_printf_i+0xbc>
 800a4bc:	680b      	ldr	r3, [r1, #0]
 800a4be:	6825      	ldr	r5, [r4, #0]
 800a4c0:	1d18      	adds	r0, r3, #4
 800a4c2:	6008      	str	r0, [r1, #0]
 800a4c4:	0628      	lsls	r0, r5, #24
 800a4c6:	d501      	bpl.n	800a4cc <_printf_i+0xec>
 800a4c8:	681d      	ldr	r5, [r3, #0]
 800a4ca:	e002      	b.n	800a4d2 <_printf_i+0xf2>
 800a4cc:	0669      	lsls	r1, r5, #25
 800a4ce:	d5fb      	bpl.n	800a4c8 <_printf_i+0xe8>
 800a4d0:	881d      	ldrh	r5, [r3, #0]
 800a4d2:	4854      	ldr	r0, [pc, #336]	; (800a624 <_printf_i+0x244>)
 800a4d4:	2f6f      	cmp	r7, #111	; 0x6f
 800a4d6:	bf0c      	ite	eq
 800a4d8:	2308      	moveq	r3, #8
 800a4da:	230a      	movne	r3, #10
 800a4dc:	2100      	movs	r1, #0
 800a4de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4e2:	6866      	ldr	r6, [r4, #4]
 800a4e4:	60a6      	str	r6, [r4, #8]
 800a4e6:	2e00      	cmp	r6, #0
 800a4e8:	bfa2      	ittt	ge
 800a4ea:	6821      	ldrge	r1, [r4, #0]
 800a4ec:	f021 0104 	bicge.w	r1, r1, #4
 800a4f0:	6021      	strge	r1, [r4, #0]
 800a4f2:	b90d      	cbnz	r5, 800a4f8 <_printf_i+0x118>
 800a4f4:	2e00      	cmp	r6, #0
 800a4f6:	d04d      	beq.n	800a594 <_printf_i+0x1b4>
 800a4f8:	4616      	mov	r6, r2
 800a4fa:	fbb5 f1f3 	udiv	r1, r5, r3
 800a4fe:	fb03 5711 	mls	r7, r3, r1, r5
 800a502:	5dc7      	ldrb	r7, [r0, r7]
 800a504:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a508:	462f      	mov	r7, r5
 800a50a:	42bb      	cmp	r3, r7
 800a50c:	460d      	mov	r5, r1
 800a50e:	d9f4      	bls.n	800a4fa <_printf_i+0x11a>
 800a510:	2b08      	cmp	r3, #8
 800a512:	d10b      	bne.n	800a52c <_printf_i+0x14c>
 800a514:	6823      	ldr	r3, [r4, #0]
 800a516:	07df      	lsls	r7, r3, #31
 800a518:	d508      	bpl.n	800a52c <_printf_i+0x14c>
 800a51a:	6923      	ldr	r3, [r4, #16]
 800a51c:	6861      	ldr	r1, [r4, #4]
 800a51e:	4299      	cmp	r1, r3
 800a520:	bfde      	ittt	le
 800a522:	2330      	movle	r3, #48	; 0x30
 800a524:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a528:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a52c:	1b92      	subs	r2, r2, r6
 800a52e:	6122      	str	r2, [r4, #16]
 800a530:	f8cd a000 	str.w	sl, [sp]
 800a534:	464b      	mov	r3, r9
 800a536:	aa03      	add	r2, sp, #12
 800a538:	4621      	mov	r1, r4
 800a53a:	4640      	mov	r0, r8
 800a53c:	f7ff fee2 	bl	800a304 <_printf_common>
 800a540:	3001      	adds	r0, #1
 800a542:	d14c      	bne.n	800a5de <_printf_i+0x1fe>
 800a544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a548:	b004      	add	sp, #16
 800a54a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a54e:	4835      	ldr	r0, [pc, #212]	; (800a624 <_printf_i+0x244>)
 800a550:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a554:	6823      	ldr	r3, [r4, #0]
 800a556:	680e      	ldr	r6, [r1, #0]
 800a558:	061f      	lsls	r7, r3, #24
 800a55a:	f856 5b04 	ldr.w	r5, [r6], #4
 800a55e:	600e      	str	r6, [r1, #0]
 800a560:	d514      	bpl.n	800a58c <_printf_i+0x1ac>
 800a562:	07d9      	lsls	r1, r3, #31
 800a564:	bf44      	itt	mi
 800a566:	f043 0320 	orrmi.w	r3, r3, #32
 800a56a:	6023      	strmi	r3, [r4, #0]
 800a56c:	b91d      	cbnz	r5, 800a576 <_printf_i+0x196>
 800a56e:	6823      	ldr	r3, [r4, #0]
 800a570:	f023 0320 	bic.w	r3, r3, #32
 800a574:	6023      	str	r3, [r4, #0]
 800a576:	2310      	movs	r3, #16
 800a578:	e7b0      	b.n	800a4dc <_printf_i+0xfc>
 800a57a:	6823      	ldr	r3, [r4, #0]
 800a57c:	f043 0320 	orr.w	r3, r3, #32
 800a580:	6023      	str	r3, [r4, #0]
 800a582:	2378      	movs	r3, #120	; 0x78
 800a584:	4828      	ldr	r0, [pc, #160]	; (800a628 <_printf_i+0x248>)
 800a586:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a58a:	e7e3      	b.n	800a554 <_printf_i+0x174>
 800a58c:	065e      	lsls	r6, r3, #25
 800a58e:	bf48      	it	mi
 800a590:	b2ad      	uxthmi	r5, r5
 800a592:	e7e6      	b.n	800a562 <_printf_i+0x182>
 800a594:	4616      	mov	r6, r2
 800a596:	e7bb      	b.n	800a510 <_printf_i+0x130>
 800a598:	680b      	ldr	r3, [r1, #0]
 800a59a:	6826      	ldr	r6, [r4, #0]
 800a59c:	6960      	ldr	r0, [r4, #20]
 800a59e:	1d1d      	adds	r5, r3, #4
 800a5a0:	600d      	str	r5, [r1, #0]
 800a5a2:	0635      	lsls	r5, r6, #24
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	d501      	bpl.n	800a5ac <_printf_i+0x1cc>
 800a5a8:	6018      	str	r0, [r3, #0]
 800a5aa:	e002      	b.n	800a5b2 <_printf_i+0x1d2>
 800a5ac:	0671      	lsls	r1, r6, #25
 800a5ae:	d5fb      	bpl.n	800a5a8 <_printf_i+0x1c8>
 800a5b0:	8018      	strh	r0, [r3, #0]
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	6123      	str	r3, [r4, #16]
 800a5b6:	4616      	mov	r6, r2
 800a5b8:	e7ba      	b.n	800a530 <_printf_i+0x150>
 800a5ba:	680b      	ldr	r3, [r1, #0]
 800a5bc:	1d1a      	adds	r2, r3, #4
 800a5be:	600a      	str	r2, [r1, #0]
 800a5c0:	681e      	ldr	r6, [r3, #0]
 800a5c2:	6862      	ldr	r2, [r4, #4]
 800a5c4:	2100      	movs	r1, #0
 800a5c6:	4630      	mov	r0, r6
 800a5c8:	f7f5 fe0a 	bl	80001e0 <memchr>
 800a5cc:	b108      	cbz	r0, 800a5d2 <_printf_i+0x1f2>
 800a5ce:	1b80      	subs	r0, r0, r6
 800a5d0:	6060      	str	r0, [r4, #4]
 800a5d2:	6863      	ldr	r3, [r4, #4]
 800a5d4:	6123      	str	r3, [r4, #16]
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5dc:	e7a8      	b.n	800a530 <_printf_i+0x150>
 800a5de:	6923      	ldr	r3, [r4, #16]
 800a5e0:	4632      	mov	r2, r6
 800a5e2:	4649      	mov	r1, r9
 800a5e4:	4640      	mov	r0, r8
 800a5e6:	47d0      	blx	sl
 800a5e8:	3001      	adds	r0, #1
 800a5ea:	d0ab      	beq.n	800a544 <_printf_i+0x164>
 800a5ec:	6823      	ldr	r3, [r4, #0]
 800a5ee:	079b      	lsls	r3, r3, #30
 800a5f0:	d413      	bmi.n	800a61a <_printf_i+0x23a>
 800a5f2:	68e0      	ldr	r0, [r4, #12]
 800a5f4:	9b03      	ldr	r3, [sp, #12]
 800a5f6:	4298      	cmp	r0, r3
 800a5f8:	bfb8      	it	lt
 800a5fa:	4618      	movlt	r0, r3
 800a5fc:	e7a4      	b.n	800a548 <_printf_i+0x168>
 800a5fe:	2301      	movs	r3, #1
 800a600:	4632      	mov	r2, r6
 800a602:	4649      	mov	r1, r9
 800a604:	4640      	mov	r0, r8
 800a606:	47d0      	blx	sl
 800a608:	3001      	adds	r0, #1
 800a60a:	d09b      	beq.n	800a544 <_printf_i+0x164>
 800a60c:	3501      	adds	r5, #1
 800a60e:	68e3      	ldr	r3, [r4, #12]
 800a610:	9903      	ldr	r1, [sp, #12]
 800a612:	1a5b      	subs	r3, r3, r1
 800a614:	42ab      	cmp	r3, r5
 800a616:	dcf2      	bgt.n	800a5fe <_printf_i+0x21e>
 800a618:	e7eb      	b.n	800a5f2 <_printf_i+0x212>
 800a61a:	2500      	movs	r5, #0
 800a61c:	f104 0619 	add.w	r6, r4, #25
 800a620:	e7f5      	b.n	800a60e <_printf_i+0x22e>
 800a622:	bf00      	nop
 800a624:	0800cec9 	.word	0x0800cec9
 800a628:	0800ceda 	.word	0x0800ceda

0800a62c <memcpy>:
 800a62c:	440a      	add	r2, r1
 800a62e:	4291      	cmp	r1, r2
 800a630:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a634:	d100      	bne.n	800a638 <memcpy+0xc>
 800a636:	4770      	bx	lr
 800a638:	b510      	push	{r4, lr}
 800a63a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a63e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a642:	4291      	cmp	r1, r2
 800a644:	d1f9      	bne.n	800a63a <memcpy+0xe>
 800a646:	bd10      	pop	{r4, pc}

0800a648 <memmove>:
 800a648:	4288      	cmp	r0, r1
 800a64a:	b510      	push	{r4, lr}
 800a64c:	eb01 0402 	add.w	r4, r1, r2
 800a650:	d902      	bls.n	800a658 <memmove+0x10>
 800a652:	4284      	cmp	r4, r0
 800a654:	4623      	mov	r3, r4
 800a656:	d807      	bhi.n	800a668 <memmove+0x20>
 800a658:	1e43      	subs	r3, r0, #1
 800a65a:	42a1      	cmp	r1, r4
 800a65c:	d008      	beq.n	800a670 <memmove+0x28>
 800a65e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a662:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a666:	e7f8      	b.n	800a65a <memmove+0x12>
 800a668:	4402      	add	r2, r0
 800a66a:	4601      	mov	r1, r0
 800a66c:	428a      	cmp	r2, r1
 800a66e:	d100      	bne.n	800a672 <memmove+0x2a>
 800a670:	bd10      	pop	{r4, pc}
 800a672:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a676:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a67a:	e7f7      	b.n	800a66c <memmove+0x24>

0800a67c <_free_r>:
 800a67c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a67e:	2900      	cmp	r1, #0
 800a680:	d048      	beq.n	800a714 <_free_r+0x98>
 800a682:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a686:	9001      	str	r0, [sp, #4]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f1a1 0404 	sub.w	r4, r1, #4
 800a68e:	bfb8      	it	lt
 800a690:	18e4      	addlt	r4, r4, r3
 800a692:	f000 f8d3 	bl	800a83c <__malloc_lock>
 800a696:	4a20      	ldr	r2, [pc, #128]	; (800a718 <_free_r+0x9c>)
 800a698:	9801      	ldr	r0, [sp, #4]
 800a69a:	6813      	ldr	r3, [r2, #0]
 800a69c:	4615      	mov	r5, r2
 800a69e:	b933      	cbnz	r3, 800a6ae <_free_r+0x32>
 800a6a0:	6063      	str	r3, [r4, #4]
 800a6a2:	6014      	str	r4, [r2, #0]
 800a6a4:	b003      	add	sp, #12
 800a6a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6aa:	f000 b8cd 	b.w	800a848 <__malloc_unlock>
 800a6ae:	42a3      	cmp	r3, r4
 800a6b0:	d90b      	bls.n	800a6ca <_free_r+0x4e>
 800a6b2:	6821      	ldr	r1, [r4, #0]
 800a6b4:	1862      	adds	r2, r4, r1
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	bf04      	itt	eq
 800a6ba:	681a      	ldreq	r2, [r3, #0]
 800a6bc:	685b      	ldreq	r3, [r3, #4]
 800a6be:	6063      	str	r3, [r4, #4]
 800a6c0:	bf04      	itt	eq
 800a6c2:	1852      	addeq	r2, r2, r1
 800a6c4:	6022      	streq	r2, [r4, #0]
 800a6c6:	602c      	str	r4, [r5, #0]
 800a6c8:	e7ec      	b.n	800a6a4 <_free_r+0x28>
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	b10b      	cbz	r3, 800a6d4 <_free_r+0x58>
 800a6d0:	42a3      	cmp	r3, r4
 800a6d2:	d9fa      	bls.n	800a6ca <_free_r+0x4e>
 800a6d4:	6811      	ldr	r1, [r2, #0]
 800a6d6:	1855      	adds	r5, r2, r1
 800a6d8:	42a5      	cmp	r5, r4
 800a6da:	d10b      	bne.n	800a6f4 <_free_r+0x78>
 800a6dc:	6824      	ldr	r4, [r4, #0]
 800a6de:	4421      	add	r1, r4
 800a6e0:	1854      	adds	r4, r2, r1
 800a6e2:	42a3      	cmp	r3, r4
 800a6e4:	6011      	str	r1, [r2, #0]
 800a6e6:	d1dd      	bne.n	800a6a4 <_free_r+0x28>
 800a6e8:	681c      	ldr	r4, [r3, #0]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	6053      	str	r3, [r2, #4]
 800a6ee:	4421      	add	r1, r4
 800a6f0:	6011      	str	r1, [r2, #0]
 800a6f2:	e7d7      	b.n	800a6a4 <_free_r+0x28>
 800a6f4:	d902      	bls.n	800a6fc <_free_r+0x80>
 800a6f6:	230c      	movs	r3, #12
 800a6f8:	6003      	str	r3, [r0, #0]
 800a6fa:	e7d3      	b.n	800a6a4 <_free_r+0x28>
 800a6fc:	6825      	ldr	r5, [r4, #0]
 800a6fe:	1961      	adds	r1, r4, r5
 800a700:	428b      	cmp	r3, r1
 800a702:	bf04      	itt	eq
 800a704:	6819      	ldreq	r1, [r3, #0]
 800a706:	685b      	ldreq	r3, [r3, #4]
 800a708:	6063      	str	r3, [r4, #4]
 800a70a:	bf04      	itt	eq
 800a70c:	1949      	addeq	r1, r1, r5
 800a70e:	6021      	streq	r1, [r4, #0]
 800a710:	6054      	str	r4, [r2, #4]
 800a712:	e7c7      	b.n	800a6a4 <_free_r+0x28>
 800a714:	b003      	add	sp, #12
 800a716:	bd30      	pop	{r4, r5, pc}
 800a718:	20000ad4 	.word	0x20000ad4

0800a71c <_malloc_r>:
 800a71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a71e:	1ccd      	adds	r5, r1, #3
 800a720:	f025 0503 	bic.w	r5, r5, #3
 800a724:	3508      	adds	r5, #8
 800a726:	2d0c      	cmp	r5, #12
 800a728:	bf38      	it	cc
 800a72a:	250c      	movcc	r5, #12
 800a72c:	2d00      	cmp	r5, #0
 800a72e:	4606      	mov	r6, r0
 800a730:	db01      	blt.n	800a736 <_malloc_r+0x1a>
 800a732:	42a9      	cmp	r1, r5
 800a734:	d903      	bls.n	800a73e <_malloc_r+0x22>
 800a736:	230c      	movs	r3, #12
 800a738:	6033      	str	r3, [r6, #0]
 800a73a:	2000      	movs	r0, #0
 800a73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a73e:	f000 f87d 	bl	800a83c <__malloc_lock>
 800a742:	4921      	ldr	r1, [pc, #132]	; (800a7c8 <_malloc_r+0xac>)
 800a744:	680a      	ldr	r2, [r1, #0]
 800a746:	4614      	mov	r4, r2
 800a748:	b99c      	cbnz	r4, 800a772 <_malloc_r+0x56>
 800a74a:	4f20      	ldr	r7, [pc, #128]	; (800a7cc <_malloc_r+0xb0>)
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	b923      	cbnz	r3, 800a75a <_malloc_r+0x3e>
 800a750:	4621      	mov	r1, r4
 800a752:	4630      	mov	r0, r6
 800a754:	f000 f862 	bl	800a81c <_sbrk_r>
 800a758:	6038      	str	r0, [r7, #0]
 800a75a:	4629      	mov	r1, r5
 800a75c:	4630      	mov	r0, r6
 800a75e:	f000 f85d 	bl	800a81c <_sbrk_r>
 800a762:	1c43      	adds	r3, r0, #1
 800a764:	d123      	bne.n	800a7ae <_malloc_r+0x92>
 800a766:	230c      	movs	r3, #12
 800a768:	6033      	str	r3, [r6, #0]
 800a76a:	4630      	mov	r0, r6
 800a76c:	f000 f86c 	bl	800a848 <__malloc_unlock>
 800a770:	e7e3      	b.n	800a73a <_malloc_r+0x1e>
 800a772:	6823      	ldr	r3, [r4, #0]
 800a774:	1b5b      	subs	r3, r3, r5
 800a776:	d417      	bmi.n	800a7a8 <_malloc_r+0x8c>
 800a778:	2b0b      	cmp	r3, #11
 800a77a:	d903      	bls.n	800a784 <_malloc_r+0x68>
 800a77c:	6023      	str	r3, [r4, #0]
 800a77e:	441c      	add	r4, r3
 800a780:	6025      	str	r5, [r4, #0]
 800a782:	e004      	b.n	800a78e <_malloc_r+0x72>
 800a784:	6863      	ldr	r3, [r4, #4]
 800a786:	42a2      	cmp	r2, r4
 800a788:	bf0c      	ite	eq
 800a78a:	600b      	streq	r3, [r1, #0]
 800a78c:	6053      	strne	r3, [r2, #4]
 800a78e:	4630      	mov	r0, r6
 800a790:	f000 f85a 	bl	800a848 <__malloc_unlock>
 800a794:	f104 000b 	add.w	r0, r4, #11
 800a798:	1d23      	adds	r3, r4, #4
 800a79a:	f020 0007 	bic.w	r0, r0, #7
 800a79e:	1ac2      	subs	r2, r0, r3
 800a7a0:	d0cc      	beq.n	800a73c <_malloc_r+0x20>
 800a7a2:	1a1b      	subs	r3, r3, r0
 800a7a4:	50a3      	str	r3, [r4, r2]
 800a7a6:	e7c9      	b.n	800a73c <_malloc_r+0x20>
 800a7a8:	4622      	mov	r2, r4
 800a7aa:	6864      	ldr	r4, [r4, #4]
 800a7ac:	e7cc      	b.n	800a748 <_malloc_r+0x2c>
 800a7ae:	1cc4      	adds	r4, r0, #3
 800a7b0:	f024 0403 	bic.w	r4, r4, #3
 800a7b4:	42a0      	cmp	r0, r4
 800a7b6:	d0e3      	beq.n	800a780 <_malloc_r+0x64>
 800a7b8:	1a21      	subs	r1, r4, r0
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	f000 f82e 	bl	800a81c <_sbrk_r>
 800a7c0:	3001      	adds	r0, #1
 800a7c2:	d1dd      	bne.n	800a780 <_malloc_r+0x64>
 800a7c4:	e7cf      	b.n	800a766 <_malloc_r+0x4a>
 800a7c6:	bf00      	nop
 800a7c8:	20000ad4 	.word	0x20000ad4
 800a7cc:	20000ad8 	.word	0x20000ad8

0800a7d0 <_realloc_r>:
 800a7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7d2:	4607      	mov	r7, r0
 800a7d4:	4614      	mov	r4, r2
 800a7d6:	460e      	mov	r6, r1
 800a7d8:	b921      	cbnz	r1, 800a7e4 <_realloc_r+0x14>
 800a7da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a7de:	4611      	mov	r1, r2
 800a7e0:	f7ff bf9c 	b.w	800a71c <_malloc_r>
 800a7e4:	b922      	cbnz	r2, 800a7f0 <_realloc_r+0x20>
 800a7e6:	f7ff ff49 	bl	800a67c <_free_r>
 800a7ea:	4625      	mov	r5, r4
 800a7ec:	4628      	mov	r0, r5
 800a7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7f0:	f000 f830 	bl	800a854 <_malloc_usable_size_r>
 800a7f4:	42a0      	cmp	r0, r4
 800a7f6:	d20f      	bcs.n	800a818 <_realloc_r+0x48>
 800a7f8:	4621      	mov	r1, r4
 800a7fa:	4638      	mov	r0, r7
 800a7fc:	f7ff ff8e 	bl	800a71c <_malloc_r>
 800a800:	4605      	mov	r5, r0
 800a802:	2800      	cmp	r0, #0
 800a804:	d0f2      	beq.n	800a7ec <_realloc_r+0x1c>
 800a806:	4631      	mov	r1, r6
 800a808:	4622      	mov	r2, r4
 800a80a:	f7ff ff0f 	bl	800a62c <memcpy>
 800a80e:	4631      	mov	r1, r6
 800a810:	4638      	mov	r0, r7
 800a812:	f7ff ff33 	bl	800a67c <_free_r>
 800a816:	e7e9      	b.n	800a7ec <_realloc_r+0x1c>
 800a818:	4635      	mov	r5, r6
 800a81a:	e7e7      	b.n	800a7ec <_realloc_r+0x1c>

0800a81c <_sbrk_r>:
 800a81c:	b538      	push	{r3, r4, r5, lr}
 800a81e:	4d06      	ldr	r5, [pc, #24]	; (800a838 <_sbrk_r+0x1c>)
 800a820:	2300      	movs	r3, #0
 800a822:	4604      	mov	r4, r0
 800a824:	4608      	mov	r0, r1
 800a826:	602b      	str	r3, [r5, #0]
 800a828:	f7f7 fb8a 	bl	8001f40 <_sbrk>
 800a82c:	1c43      	adds	r3, r0, #1
 800a82e:	d102      	bne.n	800a836 <_sbrk_r+0x1a>
 800a830:	682b      	ldr	r3, [r5, #0]
 800a832:	b103      	cbz	r3, 800a836 <_sbrk_r+0x1a>
 800a834:	6023      	str	r3, [r4, #0]
 800a836:	bd38      	pop	{r3, r4, r5, pc}
 800a838:	200028c4 	.word	0x200028c4

0800a83c <__malloc_lock>:
 800a83c:	4801      	ldr	r0, [pc, #4]	; (800a844 <__malloc_lock+0x8>)
 800a83e:	f000 b811 	b.w	800a864 <__retarget_lock_acquire_recursive>
 800a842:	bf00      	nop
 800a844:	200028cc 	.word	0x200028cc

0800a848 <__malloc_unlock>:
 800a848:	4801      	ldr	r0, [pc, #4]	; (800a850 <__malloc_unlock+0x8>)
 800a84a:	f000 b80c 	b.w	800a866 <__retarget_lock_release_recursive>
 800a84e:	bf00      	nop
 800a850:	200028cc 	.word	0x200028cc

0800a854 <_malloc_usable_size_r>:
 800a854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a858:	1f18      	subs	r0, r3, #4
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	bfbc      	itt	lt
 800a85e:	580b      	ldrlt	r3, [r1, r0]
 800a860:	18c0      	addlt	r0, r0, r3
 800a862:	4770      	bx	lr

0800a864 <__retarget_lock_acquire_recursive>:
 800a864:	4770      	bx	lr

0800a866 <__retarget_lock_release_recursive>:
 800a866:	4770      	bx	lr

0800a868 <tan>:
 800a868:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a86a:	ec53 2b10 	vmov	r2, r3, d0
 800a86e:	4814      	ldr	r0, [pc, #80]	; (800a8c0 <tan+0x58>)
 800a870:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a874:	4281      	cmp	r1, r0
 800a876:	dc05      	bgt.n	800a884 <tan+0x1c>
 800a878:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 800a8b8 <tan+0x50>
 800a87c:	2001      	movs	r0, #1
 800a87e:	f000 fd6f 	bl	800b360 <__kernel_tan>
 800a882:	e009      	b.n	800a898 <tan+0x30>
 800a884:	480f      	ldr	r0, [pc, #60]	; (800a8c4 <tan+0x5c>)
 800a886:	4281      	cmp	r1, r0
 800a888:	dd09      	ble.n	800a89e <tan+0x36>
 800a88a:	ee10 0a10 	vmov	r0, s0
 800a88e:	4619      	mov	r1, r3
 800a890:	f7f5 fcfa 	bl	8000288 <__aeabi_dsub>
 800a894:	ec41 0b10 	vmov	d0, r0, r1
 800a898:	b005      	add	sp, #20
 800a89a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a89e:	4668      	mov	r0, sp
 800a8a0:	f000 f812 	bl	800a8c8 <__ieee754_rem_pio2>
 800a8a4:	0040      	lsls	r0, r0, #1
 800a8a6:	f000 0002 	and.w	r0, r0, #2
 800a8aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a8ae:	ed9d 0b00 	vldr	d0, [sp]
 800a8b2:	f1c0 0001 	rsb	r0, r0, #1
 800a8b6:	e7e2      	b.n	800a87e <tan+0x16>
	...
 800a8c0:	3fe921fb 	.word	0x3fe921fb
 800a8c4:	7fefffff 	.word	0x7fefffff

0800a8c8 <__ieee754_rem_pio2>:
 800a8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8cc:	ed2d 8b02 	vpush	{d8}
 800a8d0:	ec55 4b10 	vmov	r4, r5, d0
 800a8d4:	4bca      	ldr	r3, [pc, #808]	; (800ac00 <__ieee754_rem_pio2+0x338>)
 800a8d6:	b08b      	sub	sp, #44	; 0x2c
 800a8d8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a8dc:	4598      	cmp	r8, r3
 800a8de:	4682      	mov	sl, r0
 800a8e0:	9502      	str	r5, [sp, #8]
 800a8e2:	dc08      	bgt.n	800a8f6 <__ieee754_rem_pio2+0x2e>
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	ed80 0b00 	vstr	d0, [r0]
 800a8ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a8f0:	f04f 0b00 	mov.w	fp, #0
 800a8f4:	e028      	b.n	800a948 <__ieee754_rem_pio2+0x80>
 800a8f6:	4bc3      	ldr	r3, [pc, #780]	; (800ac04 <__ieee754_rem_pio2+0x33c>)
 800a8f8:	4598      	cmp	r8, r3
 800a8fa:	dc78      	bgt.n	800a9ee <__ieee754_rem_pio2+0x126>
 800a8fc:	9b02      	ldr	r3, [sp, #8]
 800a8fe:	4ec2      	ldr	r6, [pc, #776]	; (800ac08 <__ieee754_rem_pio2+0x340>)
 800a900:	2b00      	cmp	r3, #0
 800a902:	ee10 0a10 	vmov	r0, s0
 800a906:	a3b0      	add	r3, pc, #704	; (adr r3, 800abc8 <__ieee754_rem_pio2+0x300>)
 800a908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90c:	4629      	mov	r1, r5
 800a90e:	dd39      	ble.n	800a984 <__ieee754_rem_pio2+0xbc>
 800a910:	f7f5 fcba 	bl	8000288 <__aeabi_dsub>
 800a914:	45b0      	cmp	r8, r6
 800a916:	4604      	mov	r4, r0
 800a918:	460d      	mov	r5, r1
 800a91a:	d01b      	beq.n	800a954 <__ieee754_rem_pio2+0x8c>
 800a91c:	a3ac      	add	r3, pc, #688	; (adr r3, 800abd0 <__ieee754_rem_pio2+0x308>)
 800a91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a922:	f7f5 fcb1 	bl	8000288 <__aeabi_dsub>
 800a926:	4602      	mov	r2, r0
 800a928:	460b      	mov	r3, r1
 800a92a:	e9ca 2300 	strd	r2, r3, [sl]
 800a92e:	4620      	mov	r0, r4
 800a930:	4629      	mov	r1, r5
 800a932:	f7f5 fca9 	bl	8000288 <__aeabi_dsub>
 800a936:	a3a6      	add	r3, pc, #664	; (adr r3, 800abd0 <__ieee754_rem_pio2+0x308>)
 800a938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93c:	f7f5 fca4 	bl	8000288 <__aeabi_dsub>
 800a940:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a944:	f04f 0b01 	mov.w	fp, #1
 800a948:	4658      	mov	r0, fp
 800a94a:	b00b      	add	sp, #44	; 0x2c
 800a94c:	ecbd 8b02 	vpop	{d8}
 800a950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a954:	a3a0      	add	r3, pc, #640	; (adr r3, 800abd8 <__ieee754_rem_pio2+0x310>)
 800a956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95a:	f7f5 fc95 	bl	8000288 <__aeabi_dsub>
 800a95e:	a3a0      	add	r3, pc, #640	; (adr r3, 800abe0 <__ieee754_rem_pio2+0x318>)
 800a960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a964:	4604      	mov	r4, r0
 800a966:	460d      	mov	r5, r1
 800a968:	f7f5 fc8e 	bl	8000288 <__aeabi_dsub>
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	e9ca 2300 	strd	r2, r3, [sl]
 800a974:	4620      	mov	r0, r4
 800a976:	4629      	mov	r1, r5
 800a978:	f7f5 fc86 	bl	8000288 <__aeabi_dsub>
 800a97c:	a398      	add	r3, pc, #608	; (adr r3, 800abe0 <__ieee754_rem_pio2+0x318>)
 800a97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a982:	e7db      	b.n	800a93c <__ieee754_rem_pio2+0x74>
 800a984:	f7f5 fc82 	bl	800028c <__adddf3>
 800a988:	45b0      	cmp	r8, r6
 800a98a:	4604      	mov	r4, r0
 800a98c:	460d      	mov	r5, r1
 800a98e:	d016      	beq.n	800a9be <__ieee754_rem_pio2+0xf6>
 800a990:	a38f      	add	r3, pc, #572	; (adr r3, 800abd0 <__ieee754_rem_pio2+0x308>)
 800a992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a996:	f7f5 fc79 	bl	800028c <__adddf3>
 800a99a:	4602      	mov	r2, r0
 800a99c:	460b      	mov	r3, r1
 800a99e:	e9ca 2300 	strd	r2, r3, [sl]
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	4629      	mov	r1, r5
 800a9a6:	f7f5 fc6f 	bl	8000288 <__aeabi_dsub>
 800a9aa:	a389      	add	r3, pc, #548	; (adr r3, 800abd0 <__ieee754_rem_pio2+0x308>)
 800a9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b0:	f7f5 fc6c 	bl	800028c <__adddf3>
 800a9b4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800a9b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a9bc:	e7c4      	b.n	800a948 <__ieee754_rem_pio2+0x80>
 800a9be:	a386      	add	r3, pc, #536	; (adr r3, 800abd8 <__ieee754_rem_pio2+0x310>)
 800a9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c4:	f7f5 fc62 	bl	800028c <__adddf3>
 800a9c8:	a385      	add	r3, pc, #532	; (adr r3, 800abe0 <__ieee754_rem_pio2+0x318>)
 800a9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ce:	4604      	mov	r4, r0
 800a9d0:	460d      	mov	r5, r1
 800a9d2:	f7f5 fc5b 	bl	800028c <__adddf3>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	460b      	mov	r3, r1
 800a9da:	e9ca 2300 	strd	r2, r3, [sl]
 800a9de:	4620      	mov	r0, r4
 800a9e0:	4629      	mov	r1, r5
 800a9e2:	f7f5 fc51 	bl	8000288 <__aeabi_dsub>
 800a9e6:	a37e      	add	r3, pc, #504	; (adr r3, 800abe0 <__ieee754_rem_pio2+0x318>)
 800a9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ec:	e7e0      	b.n	800a9b0 <__ieee754_rem_pio2+0xe8>
 800a9ee:	4b87      	ldr	r3, [pc, #540]	; (800ac0c <__ieee754_rem_pio2+0x344>)
 800a9f0:	4598      	cmp	r8, r3
 800a9f2:	f300 80d9 	bgt.w	800aba8 <__ieee754_rem_pio2+0x2e0>
 800a9f6:	f000 fe87 	bl	800b708 <fabs>
 800a9fa:	ec55 4b10 	vmov	r4, r5, d0
 800a9fe:	ee10 0a10 	vmov	r0, s0
 800aa02:	a379      	add	r3, pc, #484	; (adr r3, 800abe8 <__ieee754_rem_pio2+0x320>)
 800aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa08:	4629      	mov	r1, r5
 800aa0a:	f7f5 fdf5 	bl	80005f8 <__aeabi_dmul>
 800aa0e:	4b80      	ldr	r3, [pc, #512]	; (800ac10 <__ieee754_rem_pio2+0x348>)
 800aa10:	2200      	movs	r2, #0
 800aa12:	f7f5 fc3b 	bl	800028c <__adddf3>
 800aa16:	f7f6 f889 	bl	8000b2c <__aeabi_d2iz>
 800aa1a:	4683      	mov	fp, r0
 800aa1c:	f7f5 fd82 	bl	8000524 <__aeabi_i2d>
 800aa20:	4602      	mov	r2, r0
 800aa22:	460b      	mov	r3, r1
 800aa24:	ec43 2b18 	vmov	d8, r2, r3
 800aa28:	a367      	add	r3, pc, #412	; (adr r3, 800abc8 <__ieee754_rem_pio2+0x300>)
 800aa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2e:	f7f5 fde3 	bl	80005f8 <__aeabi_dmul>
 800aa32:	4602      	mov	r2, r0
 800aa34:	460b      	mov	r3, r1
 800aa36:	4620      	mov	r0, r4
 800aa38:	4629      	mov	r1, r5
 800aa3a:	f7f5 fc25 	bl	8000288 <__aeabi_dsub>
 800aa3e:	a364      	add	r3, pc, #400	; (adr r3, 800abd0 <__ieee754_rem_pio2+0x308>)
 800aa40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa44:	4606      	mov	r6, r0
 800aa46:	460f      	mov	r7, r1
 800aa48:	ec51 0b18 	vmov	r0, r1, d8
 800aa4c:	f7f5 fdd4 	bl	80005f8 <__aeabi_dmul>
 800aa50:	f1bb 0f1f 	cmp.w	fp, #31
 800aa54:	4604      	mov	r4, r0
 800aa56:	460d      	mov	r5, r1
 800aa58:	dc0d      	bgt.n	800aa76 <__ieee754_rem_pio2+0x1ae>
 800aa5a:	4b6e      	ldr	r3, [pc, #440]	; (800ac14 <__ieee754_rem_pio2+0x34c>)
 800aa5c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800aa60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa64:	4543      	cmp	r3, r8
 800aa66:	d006      	beq.n	800aa76 <__ieee754_rem_pio2+0x1ae>
 800aa68:	4622      	mov	r2, r4
 800aa6a:	462b      	mov	r3, r5
 800aa6c:	4630      	mov	r0, r6
 800aa6e:	4639      	mov	r1, r7
 800aa70:	f7f5 fc0a 	bl	8000288 <__aeabi_dsub>
 800aa74:	e00f      	b.n	800aa96 <__ieee754_rem_pio2+0x1ce>
 800aa76:	462b      	mov	r3, r5
 800aa78:	4622      	mov	r2, r4
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	4639      	mov	r1, r7
 800aa7e:	f7f5 fc03 	bl	8000288 <__aeabi_dsub>
 800aa82:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aa86:	9303      	str	r3, [sp, #12]
 800aa88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aa8c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800aa90:	f1b8 0f10 	cmp.w	r8, #16
 800aa94:	dc02      	bgt.n	800aa9c <__ieee754_rem_pio2+0x1d4>
 800aa96:	e9ca 0100 	strd	r0, r1, [sl]
 800aa9a:	e039      	b.n	800ab10 <__ieee754_rem_pio2+0x248>
 800aa9c:	a34e      	add	r3, pc, #312	; (adr r3, 800abd8 <__ieee754_rem_pio2+0x310>)
 800aa9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa2:	ec51 0b18 	vmov	r0, r1, d8
 800aaa6:	f7f5 fda7 	bl	80005f8 <__aeabi_dmul>
 800aaaa:	4604      	mov	r4, r0
 800aaac:	460d      	mov	r5, r1
 800aaae:	4602      	mov	r2, r0
 800aab0:	460b      	mov	r3, r1
 800aab2:	4630      	mov	r0, r6
 800aab4:	4639      	mov	r1, r7
 800aab6:	f7f5 fbe7 	bl	8000288 <__aeabi_dsub>
 800aaba:	4602      	mov	r2, r0
 800aabc:	460b      	mov	r3, r1
 800aabe:	4680      	mov	r8, r0
 800aac0:	4689      	mov	r9, r1
 800aac2:	4630      	mov	r0, r6
 800aac4:	4639      	mov	r1, r7
 800aac6:	f7f5 fbdf 	bl	8000288 <__aeabi_dsub>
 800aaca:	4622      	mov	r2, r4
 800aacc:	462b      	mov	r3, r5
 800aace:	f7f5 fbdb 	bl	8000288 <__aeabi_dsub>
 800aad2:	a343      	add	r3, pc, #268	; (adr r3, 800abe0 <__ieee754_rem_pio2+0x318>)
 800aad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad8:	4604      	mov	r4, r0
 800aada:	460d      	mov	r5, r1
 800aadc:	ec51 0b18 	vmov	r0, r1, d8
 800aae0:	f7f5 fd8a 	bl	80005f8 <__aeabi_dmul>
 800aae4:	4622      	mov	r2, r4
 800aae6:	462b      	mov	r3, r5
 800aae8:	f7f5 fbce 	bl	8000288 <__aeabi_dsub>
 800aaec:	4602      	mov	r2, r0
 800aaee:	460b      	mov	r3, r1
 800aaf0:	4604      	mov	r4, r0
 800aaf2:	460d      	mov	r5, r1
 800aaf4:	4640      	mov	r0, r8
 800aaf6:	4649      	mov	r1, r9
 800aaf8:	f7f5 fbc6 	bl	8000288 <__aeabi_dsub>
 800aafc:	9a03      	ldr	r2, [sp, #12]
 800aafe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ab02:	1ad3      	subs	r3, r2, r3
 800ab04:	2b31      	cmp	r3, #49	; 0x31
 800ab06:	dc24      	bgt.n	800ab52 <__ieee754_rem_pio2+0x28a>
 800ab08:	e9ca 0100 	strd	r0, r1, [sl]
 800ab0c:	4646      	mov	r6, r8
 800ab0e:	464f      	mov	r7, r9
 800ab10:	e9da 8900 	ldrd	r8, r9, [sl]
 800ab14:	4630      	mov	r0, r6
 800ab16:	4642      	mov	r2, r8
 800ab18:	464b      	mov	r3, r9
 800ab1a:	4639      	mov	r1, r7
 800ab1c:	f7f5 fbb4 	bl	8000288 <__aeabi_dsub>
 800ab20:	462b      	mov	r3, r5
 800ab22:	4622      	mov	r2, r4
 800ab24:	f7f5 fbb0 	bl	8000288 <__aeabi_dsub>
 800ab28:	9b02      	ldr	r3, [sp, #8]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ab30:	f6bf af0a 	bge.w	800a948 <__ieee754_rem_pio2+0x80>
 800ab34:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ab38:	f8ca 3004 	str.w	r3, [sl, #4]
 800ab3c:	f8ca 8000 	str.w	r8, [sl]
 800ab40:	f8ca 0008 	str.w	r0, [sl, #8]
 800ab44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab48:	f8ca 300c 	str.w	r3, [sl, #12]
 800ab4c:	f1cb 0b00 	rsb	fp, fp, #0
 800ab50:	e6fa      	b.n	800a948 <__ieee754_rem_pio2+0x80>
 800ab52:	a327      	add	r3, pc, #156	; (adr r3, 800abf0 <__ieee754_rem_pio2+0x328>)
 800ab54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab58:	ec51 0b18 	vmov	r0, r1, d8
 800ab5c:	f7f5 fd4c 	bl	80005f8 <__aeabi_dmul>
 800ab60:	4604      	mov	r4, r0
 800ab62:	460d      	mov	r5, r1
 800ab64:	4602      	mov	r2, r0
 800ab66:	460b      	mov	r3, r1
 800ab68:	4640      	mov	r0, r8
 800ab6a:	4649      	mov	r1, r9
 800ab6c:	f7f5 fb8c 	bl	8000288 <__aeabi_dsub>
 800ab70:	4602      	mov	r2, r0
 800ab72:	460b      	mov	r3, r1
 800ab74:	4606      	mov	r6, r0
 800ab76:	460f      	mov	r7, r1
 800ab78:	4640      	mov	r0, r8
 800ab7a:	4649      	mov	r1, r9
 800ab7c:	f7f5 fb84 	bl	8000288 <__aeabi_dsub>
 800ab80:	4622      	mov	r2, r4
 800ab82:	462b      	mov	r3, r5
 800ab84:	f7f5 fb80 	bl	8000288 <__aeabi_dsub>
 800ab88:	a31b      	add	r3, pc, #108	; (adr r3, 800abf8 <__ieee754_rem_pio2+0x330>)
 800ab8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8e:	4604      	mov	r4, r0
 800ab90:	460d      	mov	r5, r1
 800ab92:	ec51 0b18 	vmov	r0, r1, d8
 800ab96:	f7f5 fd2f 	bl	80005f8 <__aeabi_dmul>
 800ab9a:	4622      	mov	r2, r4
 800ab9c:	462b      	mov	r3, r5
 800ab9e:	f7f5 fb73 	bl	8000288 <__aeabi_dsub>
 800aba2:	4604      	mov	r4, r0
 800aba4:	460d      	mov	r5, r1
 800aba6:	e75f      	b.n	800aa68 <__ieee754_rem_pio2+0x1a0>
 800aba8:	4b1b      	ldr	r3, [pc, #108]	; (800ac18 <__ieee754_rem_pio2+0x350>)
 800abaa:	4598      	cmp	r8, r3
 800abac:	dd36      	ble.n	800ac1c <__ieee754_rem_pio2+0x354>
 800abae:	ee10 2a10 	vmov	r2, s0
 800abb2:	462b      	mov	r3, r5
 800abb4:	4620      	mov	r0, r4
 800abb6:	4629      	mov	r1, r5
 800abb8:	f7f5 fb66 	bl	8000288 <__aeabi_dsub>
 800abbc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800abc0:	e9ca 0100 	strd	r0, r1, [sl]
 800abc4:	e694      	b.n	800a8f0 <__ieee754_rem_pio2+0x28>
 800abc6:	bf00      	nop
 800abc8:	54400000 	.word	0x54400000
 800abcc:	3ff921fb 	.word	0x3ff921fb
 800abd0:	1a626331 	.word	0x1a626331
 800abd4:	3dd0b461 	.word	0x3dd0b461
 800abd8:	1a600000 	.word	0x1a600000
 800abdc:	3dd0b461 	.word	0x3dd0b461
 800abe0:	2e037073 	.word	0x2e037073
 800abe4:	3ba3198a 	.word	0x3ba3198a
 800abe8:	6dc9c883 	.word	0x6dc9c883
 800abec:	3fe45f30 	.word	0x3fe45f30
 800abf0:	2e000000 	.word	0x2e000000
 800abf4:	3ba3198a 	.word	0x3ba3198a
 800abf8:	252049c1 	.word	0x252049c1
 800abfc:	397b839a 	.word	0x397b839a
 800ac00:	3fe921fb 	.word	0x3fe921fb
 800ac04:	4002d97b 	.word	0x4002d97b
 800ac08:	3ff921fb 	.word	0x3ff921fb
 800ac0c:	413921fb 	.word	0x413921fb
 800ac10:	3fe00000 	.word	0x3fe00000
 800ac14:	0800ceec 	.word	0x0800ceec
 800ac18:	7fefffff 	.word	0x7fefffff
 800ac1c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ac20:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ac24:	ee10 0a10 	vmov	r0, s0
 800ac28:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ac2c:	ee10 6a10 	vmov	r6, s0
 800ac30:	460f      	mov	r7, r1
 800ac32:	f7f5 ff7b 	bl	8000b2c <__aeabi_d2iz>
 800ac36:	f7f5 fc75 	bl	8000524 <__aeabi_i2d>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	4630      	mov	r0, r6
 800ac40:	4639      	mov	r1, r7
 800ac42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac46:	f7f5 fb1f 	bl	8000288 <__aeabi_dsub>
 800ac4a:	4b22      	ldr	r3, [pc, #136]	; (800acd4 <__ieee754_rem_pio2+0x40c>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f7f5 fcd3 	bl	80005f8 <__aeabi_dmul>
 800ac52:	460f      	mov	r7, r1
 800ac54:	4606      	mov	r6, r0
 800ac56:	f7f5 ff69 	bl	8000b2c <__aeabi_d2iz>
 800ac5a:	f7f5 fc63 	bl	8000524 <__aeabi_i2d>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	460b      	mov	r3, r1
 800ac62:	4630      	mov	r0, r6
 800ac64:	4639      	mov	r1, r7
 800ac66:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ac6a:	f7f5 fb0d 	bl	8000288 <__aeabi_dsub>
 800ac6e:	4b19      	ldr	r3, [pc, #100]	; (800acd4 <__ieee754_rem_pio2+0x40c>)
 800ac70:	2200      	movs	r2, #0
 800ac72:	f7f5 fcc1 	bl	80005f8 <__aeabi_dmul>
 800ac76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ac7a:	ad04      	add	r5, sp, #16
 800ac7c:	f04f 0803 	mov.w	r8, #3
 800ac80:	46a9      	mov	r9, r5
 800ac82:	2600      	movs	r6, #0
 800ac84:	2700      	movs	r7, #0
 800ac86:	4632      	mov	r2, r6
 800ac88:	463b      	mov	r3, r7
 800ac8a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ac8e:	46c3      	mov	fp, r8
 800ac90:	3d08      	subs	r5, #8
 800ac92:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ac96:	f7f5 ff17 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	d1f3      	bne.n	800ac86 <__ieee754_rem_pio2+0x3be>
 800ac9e:	4b0e      	ldr	r3, [pc, #56]	; (800acd8 <__ieee754_rem_pio2+0x410>)
 800aca0:	9301      	str	r3, [sp, #4]
 800aca2:	2302      	movs	r3, #2
 800aca4:	9300      	str	r3, [sp, #0]
 800aca6:	4622      	mov	r2, r4
 800aca8:	465b      	mov	r3, fp
 800acaa:	4651      	mov	r1, sl
 800acac:	4648      	mov	r0, r9
 800acae:	f000 f817 	bl	800ace0 <__kernel_rem_pio2>
 800acb2:	9b02      	ldr	r3, [sp, #8]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	4683      	mov	fp, r0
 800acb8:	f6bf ae46 	bge.w	800a948 <__ieee754_rem_pio2+0x80>
 800acbc:	f8da 3004 	ldr.w	r3, [sl, #4]
 800acc0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800acc4:	f8ca 3004 	str.w	r3, [sl, #4]
 800acc8:	f8da 300c 	ldr.w	r3, [sl, #12]
 800accc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800acd0:	e73a      	b.n	800ab48 <__ieee754_rem_pio2+0x280>
 800acd2:	bf00      	nop
 800acd4:	41700000 	.word	0x41700000
 800acd8:	0800cf6c 	.word	0x0800cf6c
 800acdc:	00000000 	.word	0x00000000

0800ace0 <__kernel_rem_pio2>:
 800ace0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace4:	ed2d 8b02 	vpush	{d8}
 800ace8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800acec:	f112 0f14 	cmn.w	r2, #20
 800acf0:	9308      	str	r3, [sp, #32]
 800acf2:	9101      	str	r1, [sp, #4]
 800acf4:	4bc6      	ldr	r3, [pc, #792]	; (800b010 <__kernel_rem_pio2+0x330>)
 800acf6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800acf8:	9009      	str	r0, [sp, #36]	; 0x24
 800acfa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800acfe:	9304      	str	r3, [sp, #16]
 800ad00:	9b08      	ldr	r3, [sp, #32]
 800ad02:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ad06:	bfa8      	it	ge
 800ad08:	1ed4      	subge	r4, r2, #3
 800ad0a:	9306      	str	r3, [sp, #24]
 800ad0c:	bfb2      	itee	lt
 800ad0e:	2400      	movlt	r4, #0
 800ad10:	2318      	movge	r3, #24
 800ad12:	fb94 f4f3 	sdivge	r4, r4, r3
 800ad16:	f06f 0317 	mvn.w	r3, #23
 800ad1a:	fb04 3303 	mla	r3, r4, r3, r3
 800ad1e:	eb03 0a02 	add.w	sl, r3, r2
 800ad22:	9b04      	ldr	r3, [sp, #16]
 800ad24:	9a06      	ldr	r2, [sp, #24]
 800ad26:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b000 <__kernel_rem_pio2+0x320>
 800ad2a:	eb03 0802 	add.w	r8, r3, r2
 800ad2e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ad30:	1aa7      	subs	r7, r4, r2
 800ad32:	ae20      	add	r6, sp, #128	; 0x80
 800ad34:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ad38:	2500      	movs	r5, #0
 800ad3a:	4545      	cmp	r5, r8
 800ad3c:	dd18      	ble.n	800ad70 <__kernel_rem_pio2+0x90>
 800ad3e:	9b08      	ldr	r3, [sp, #32]
 800ad40:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ad44:	aa20      	add	r2, sp, #128	; 0x80
 800ad46:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800b000 <__kernel_rem_pio2+0x320>
 800ad4a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ad4e:	f1c3 0301 	rsb	r3, r3, #1
 800ad52:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800ad56:	9307      	str	r3, [sp, #28]
 800ad58:	9b07      	ldr	r3, [sp, #28]
 800ad5a:	9a04      	ldr	r2, [sp, #16]
 800ad5c:	4443      	add	r3, r8
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	db2f      	blt.n	800adc2 <__kernel_rem_pio2+0xe2>
 800ad62:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ad66:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ad6a:	462f      	mov	r7, r5
 800ad6c:	2600      	movs	r6, #0
 800ad6e:	e01b      	b.n	800ada8 <__kernel_rem_pio2+0xc8>
 800ad70:	42ef      	cmn	r7, r5
 800ad72:	d407      	bmi.n	800ad84 <__kernel_rem_pio2+0xa4>
 800ad74:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ad78:	f7f5 fbd4 	bl	8000524 <__aeabi_i2d>
 800ad7c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ad80:	3501      	adds	r5, #1
 800ad82:	e7da      	b.n	800ad3a <__kernel_rem_pio2+0x5a>
 800ad84:	ec51 0b18 	vmov	r0, r1, d8
 800ad88:	e7f8      	b.n	800ad7c <__kernel_rem_pio2+0x9c>
 800ad8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad8e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ad92:	f7f5 fc31 	bl	80005f8 <__aeabi_dmul>
 800ad96:	4602      	mov	r2, r0
 800ad98:	460b      	mov	r3, r1
 800ad9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad9e:	f7f5 fa75 	bl	800028c <__adddf3>
 800ada2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ada6:	3601      	adds	r6, #1
 800ada8:	9b06      	ldr	r3, [sp, #24]
 800adaa:	429e      	cmp	r6, r3
 800adac:	f1a7 0708 	sub.w	r7, r7, #8
 800adb0:	ddeb      	ble.n	800ad8a <__kernel_rem_pio2+0xaa>
 800adb2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800adb6:	3508      	adds	r5, #8
 800adb8:	ecab 7b02 	vstmia	fp!, {d7}
 800adbc:	f108 0801 	add.w	r8, r8, #1
 800adc0:	e7ca      	b.n	800ad58 <__kernel_rem_pio2+0x78>
 800adc2:	9b04      	ldr	r3, [sp, #16]
 800adc4:	aa0c      	add	r2, sp, #48	; 0x30
 800adc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800adca:	930b      	str	r3, [sp, #44]	; 0x2c
 800adcc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800adce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800add2:	9c04      	ldr	r4, [sp, #16]
 800add4:	930a      	str	r3, [sp, #40]	; 0x28
 800add6:	ab98      	add	r3, sp, #608	; 0x260
 800add8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800addc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ade0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800ade4:	f8cd b008 	str.w	fp, [sp, #8]
 800ade8:	4625      	mov	r5, r4
 800adea:	2d00      	cmp	r5, #0
 800adec:	dc78      	bgt.n	800aee0 <__kernel_rem_pio2+0x200>
 800adee:	ec47 6b10 	vmov	d0, r6, r7
 800adf2:	4650      	mov	r0, sl
 800adf4:	f000 fd14 	bl	800b820 <scalbn>
 800adf8:	ec57 6b10 	vmov	r6, r7, d0
 800adfc:	2200      	movs	r2, #0
 800adfe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ae02:	ee10 0a10 	vmov	r0, s0
 800ae06:	4639      	mov	r1, r7
 800ae08:	f7f5 fbf6 	bl	80005f8 <__aeabi_dmul>
 800ae0c:	ec41 0b10 	vmov	d0, r0, r1
 800ae10:	f000 fc86 	bl	800b720 <floor>
 800ae14:	4b7f      	ldr	r3, [pc, #508]	; (800b014 <__kernel_rem_pio2+0x334>)
 800ae16:	ec51 0b10 	vmov	r0, r1, d0
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f7f5 fbec 	bl	80005f8 <__aeabi_dmul>
 800ae20:	4602      	mov	r2, r0
 800ae22:	460b      	mov	r3, r1
 800ae24:	4630      	mov	r0, r6
 800ae26:	4639      	mov	r1, r7
 800ae28:	f7f5 fa2e 	bl	8000288 <__aeabi_dsub>
 800ae2c:	460f      	mov	r7, r1
 800ae2e:	4606      	mov	r6, r0
 800ae30:	f7f5 fe7c 	bl	8000b2c <__aeabi_d2iz>
 800ae34:	9007      	str	r0, [sp, #28]
 800ae36:	f7f5 fb75 	bl	8000524 <__aeabi_i2d>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	4630      	mov	r0, r6
 800ae40:	4639      	mov	r1, r7
 800ae42:	f7f5 fa21 	bl	8000288 <__aeabi_dsub>
 800ae46:	f1ba 0f00 	cmp.w	sl, #0
 800ae4a:	4606      	mov	r6, r0
 800ae4c:	460f      	mov	r7, r1
 800ae4e:	dd70      	ble.n	800af32 <__kernel_rem_pio2+0x252>
 800ae50:	1e62      	subs	r2, r4, #1
 800ae52:	ab0c      	add	r3, sp, #48	; 0x30
 800ae54:	9d07      	ldr	r5, [sp, #28]
 800ae56:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ae5a:	f1ca 0118 	rsb	r1, sl, #24
 800ae5e:	fa40 f301 	asr.w	r3, r0, r1
 800ae62:	441d      	add	r5, r3
 800ae64:	408b      	lsls	r3, r1
 800ae66:	1ac0      	subs	r0, r0, r3
 800ae68:	ab0c      	add	r3, sp, #48	; 0x30
 800ae6a:	9507      	str	r5, [sp, #28]
 800ae6c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ae70:	f1ca 0317 	rsb	r3, sl, #23
 800ae74:	fa40 f303 	asr.w	r3, r0, r3
 800ae78:	9302      	str	r3, [sp, #8]
 800ae7a:	9b02      	ldr	r3, [sp, #8]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	dd66      	ble.n	800af4e <__kernel_rem_pio2+0x26e>
 800ae80:	9b07      	ldr	r3, [sp, #28]
 800ae82:	2200      	movs	r2, #0
 800ae84:	3301      	adds	r3, #1
 800ae86:	9307      	str	r3, [sp, #28]
 800ae88:	4615      	mov	r5, r2
 800ae8a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ae8e:	4294      	cmp	r4, r2
 800ae90:	f300 8099 	bgt.w	800afc6 <__kernel_rem_pio2+0x2e6>
 800ae94:	f1ba 0f00 	cmp.w	sl, #0
 800ae98:	dd07      	ble.n	800aeaa <__kernel_rem_pio2+0x1ca>
 800ae9a:	f1ba 0f01 	cmp.w	sl, #1
 800ae9e:	f000 80a5 	beq.w	800afec <__kernel_rem_pio2+0x30c>
 800aea2:	f1ba 0f02 	cmp.w	sl, #2
 800aea6:	f000 80c1 	beq.w	800b02c <__kernel_rem_pio2+0x34c>
 800aeaa:	9b02      	ldr	r3, [sp, #8]
 800aeac:	2b02      	cmp	r3, #2
 800aeae:	d14e      	bne.n	800af4e <__kernel_rem_pio2+0x26e>
 800aeb0:	4632      	mov	r2, r6
 800aeb2:	463b      	mov	r3, r7
 800aeb4:	4958      	ldr	r1, [pc, #352]	; (800b018 <__kernel_rem_pio2+0x338>)
 800aeb6:	2000      	movs	r0, #0
 800aeb8:	f7f5 f9e6 	bl	8000288 <__aeabi_dsub>
 800aebc:	4606      	mov	r6, r0
 800aebe:	460f      	mov	r7, r1
 800aec0:	2d00      	cmp	r5, #0
 800aec2:	d044      	beq.n	800af4e <__kernel_rem_pio2+0x26e>
 800aec4:	4650      	mov	r0, sl
 800aec6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b008 <__kernel_rem_pio2+0x328>
 800aeca:	f000 fca9 	bl	800b820 <scalbn>
 800aece:	4630      	mov	r0, r6
 800aed0:	4639      	mov	r1, r7
 800aed2:	ec53 2b10 	vmov	r2, r3, d0
 800aed6:	f7f5 f9d7 	bl	8000288 <__aeabi_dsub>
 800aeda:	4606      	mov	r6, r0
 800aedc:	460f      	mov	r7, r1
 800aede:	e036      	b.n	800af4e <__kernel_rem_pio2+0x26e>
 800aee0:	4b4e      	ldr	r3, [pc, #312]	; (800b01c <__kernel_rem_pio2+0x33c>)
 800aee2:	2200      	movs	r2, #0
 800aee4:	4630      	mov	r0, r6
 800aee6:	4639      	mov	r1, r7
 800aee8:	f7f5 fb86 	bl	80005f8 <__aeabi_dmul>
 800aeec:	f7f5 fe1e 	bl	8000b2c <__aeabi_d2iz>
 800aef0:	f7f5 fb18 	bl	8000524 <__aeabi_i2d>
 800aef4:	4b4a      	ldr	r3, [pc, #296]	; (800b020 <__kernel_rem_pio2+0x340>)
 800aef6:	2200      	movs	r2, #0
 800aef8:	4680      	mov	r8, r0
 800aefa:	4689      	mov	r9, r1
 800aefc:	f7f5 fb7c 	bl	80005f8 <__aeabi_dmul>
 800af00:	4602      	mov	r2, r0
 800af02:	460b      	mov	r3, r1
 800af04:	4630      	mov	r0, r6
 800af06:	4639      	mov	r1, r7
 800af08:	f7f5 f9be 	bl	8000288 <__aeabi_dsub>
 800af0c:	f7f5 fe0e 	bl	8000b2c <__aeabi_d2iz>
 800af10:	9b02      	ldr	r3, [sp, #8]
 800af12:	f843 0b04 	str.w	r0, [r3], #4
 800af16:	3d01      	subs	r5, #1
 800af18:	9302      	str	r3, [sp, #8]
 800af1a:	ab70      	add	r3, sp, #448	; 0x1c0
 800af1c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800af20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af24:	4640      	mov	r0, r8
 800af26:	4649      	mov	r1, r9
 800af28:	f7f5 f9b0 	bl	800028c <__adddf3>
 800af2c:	4606      	mov	r6, r0
 800af2e:	460f      	mov	r7, r1
 800af30:	e75b      	b.n	800adea <__kernel_rem_pio2+0x10a>
 800af32:	d105      	bne.n	800af40 <__kernel_rem_pio2+0x260>
 800af34:	1e63      	subs	r3, r4, #1
 800af36:	aa0c      	add	r2, sp, #48	; 0x30
 800af38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800af3c:	15c3      	asrs	r3, r0, #23
 800af3e:	e79b      	b.n	800ae78 <__kernel_rem_pio2+0x198>
 800af40:	4b38      	ldr	r3, [pc, #224]	; (800b024 <__kernel_rem_pio2+0x344>)
 800af42:	2200      	movs	r2, #0
 800af44:	f7f5 fdde 	bl	8000b04 <__aeabi_dcmpge>
 800af48:	2800      	cmp	r0, #0
 800af4a:	d139      	bne.n	800afc0 <__kernel_rem_pio2+0x2e0>
 800af4c:	9002      	str	r0, [sp, #8]
 800af4e:	2200      	movs	r2, #0
 800af50:	2300      	movs	r3, #0
 800af52:	4630      	mov	r0, r6
 800af54:	4639      	mov	r1, r7
 800af56:	f7f5 fdb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800af5a:	2800      	cmp	r0, #0
 800af5c:	f000 80b4 	beq.w	800b0c8 <__kernel_rem_pio2+0x3e8>
 800af60:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800af64:	465b      	mov	r3, fp
 800af66:	2200      	movs	r2, #0
 800af68:	9904      	ldr	r1, [sp, #16]
 800af6a:	428b      	cmp	r3, r1
 800af6c:	da65      	bge.n	800b03a <__kernel_rem_pio2+0x35a>
 800af6e:	2a00      	cmp	r2, #0
 800af70:	d07b      	beq.n	800b06a <__kernel_rem_pio2+0x38a>
 800af72:	ab0c      	add	r3, sp, #48	; 0x30
 800af74:	f1aa 0a18 	sub.w	sl, sl, #24
 800af78:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	f000 80a0 	beq.w	800b0c2 <__kernel_rem_pio2+0x3e2>
 800af82:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800b008 <__kernel_rem_pio2+0x328>
 800af86:	4650      	mov	r0, sl
 800af88:	f000 fc4a 	bl	800b820 <scalbn>
 800af8c:	4f23      	ldr	r7, [pc, #140]	; (800b01c <__kernel_rem_pio2+0x33c>)
 800af8e:	ec55 4b10 	vmov	r4, r5, d0
 800af92:	46d8      	mov	r8, fp
 800af94:	2600      	movs	r6, #0
 800af96:	f1b8 0f00 	cmp.w	r8, #0
 800af9a:	f280 80cf 	bge.w	800b13c <__kernel_rem_pio2+0x45c>
 800af9e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800b000 <__kernel_rem_pio2+0x320>
 800afa2:	465f      	mov	r7, fp
 800afa4:	f04f 0800 	mov.w	r8, #0
 800afa8:	2f00      	cmp	r7, #0
 800afaa:	f2c0 80fd 	blt.w	800b1a8 <__kernel_rem_pio2+0x4c8>
 800afae:	ab70      	add	r3, sp, #448	; 0x1c0
 800afb0:	f8df a074 	ldr.w	sl, [pc, #116]	; 800b028 <__kernel_rem_pio2+0x348>
 800afb4:	ec55 4b18 	vmov	r4, r5, d8
 800afb8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800afbc:	2600      	movs	r6, #0
 800afbe:	e0e5      	b.n	800b18c <__kernel_rem_pio2+0x4ac>
 800afc0:	2302      	movs	r3, #2
 800afc2:	9302      	str	r3, [sp, #8]
 800afc4:	e75c      	b.n	800ae80 <__kernel_rem_pio2+0x1a0>
 800afc6:	f8db 3000 	ldr.w	r3, [fp]
 800afca:	b955      	cbnz	r5, 800afe2 <__kernel_rem_pio2+0x302>
 800afcc:	b123      	cbz	r3, 800afd8 <__kernel_rem_pio2+0x2f8>
 800afce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800afd2:	f8cb 3000 	str.w	r3, [fp]
 800afd6:	2301      	movs	r3, #1
 800afd8:	3201      	adds	r2, #1
 800afda:	f10b 0b04 	add.w	fp, fp, #4
 800afde:	461d      	mov	r5, r3
 800afe0:	e755      	b.n	800ae8e <__kernel_rem_pio2+0x1ae>
 800afe2:	1acb      	subs	r3, r1, r3
 800afe4:	f8cb 3000 	str.w	r3, [fp]
 800afe8:	462b      	mov	r3, r5
 800afea:	e7f5      	b.n	800afd8 <__kernel_rem_pio2+0x2f8>
 800afec:	1e62      	subs	r2, r4, #1
 800afee:	ab0c      	add	r3, sp, #48	; 0x30
 800aff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aff4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800aff8:	a90c      	add	r1, sp, #48	; 0x30
 800affa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800affe:	e754      	b.n	800aeaa <__kernel_rem_pio2+0x1ca>
	...
 800b00c:	3ff00000 	.word	0x3ff00000
 800b010:	0800d0b8 	.word	0x0800d0b8
 800b014:	40200000 	.word	0x40200000
 800b018:	3ff00000 	.word	0x3ff00000
 800b01c:	3e700000 	.word	0x3e700000
 800b020:	41700000 	.word	0x41700000
 800b024:	3fe00000 	.word	0x3fe00000
 800b028:	0800d078 	.word	0x0800d078
 800b02c:	1e62      	subs	r2, r4, #1
 800b02e:	ab0c      	add	r3, sp, #48	; 0x30
 800b030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b034:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b038:	e7de      	b.n	800aff8 <__kernel_rem_pio2+0x318>
 800b03a:	a90c      	add	r1, sp, #48	; 0x30
 800b03c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b040:	3b01      	subs	r3, #1
 800b042:	430a      	orrs	r2, r1
 800b044:	e790      	b.n	800af68 <__kernel_rem_pio2+0x288>
 800b046:	3301      	adds	r3, #1
 800b048:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b04c:	2900      	cmp	r1, #0
 800b04e:	d0fa      	beq.n	800b046 <__kernel_rem_pio2+0x366>
 800b050:	9a08      	ldr	r2, [sp, #32]
 800b052:	18e3      	adds	r3, r4, r3
 800b054:	18a6      	adds	r6, r4, r2
 800b056:	aa20      	add	r2, sp, #128	; 0x80
 800b058:	1c65      	adds	r5, r4, #1
 800b05a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b05e:	9302      	str	r3, [sp, #8]
 800b060:	9b02      	ldr	r3, [sp, #8]
 800b062:	42ab      	cmp	r3, r5
 800b064:	da04      	bge.n	800b070 <__kernel_rem_pio2+0x390>
 800b066:	461c      	mov	r4, r3
 800b068:	e6b5      	b.n	800add6 <__kernel_rem_pio2+0xf6>
 800b06a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b06c:	2301      	movs	r3, #1
 800b06e:	e7eb      	b.n	800b048 <__kernel_rem_pio2+0x368>
 800b070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b072:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b076:	f7f5 fa55 	bl	8000524 <__aeabi_i2d>
 800b07a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b080:	46b3      	mov	fp, r6
 800b082:	461c      	mov	r4, r3
 800b084:	2700      	movs	r7, #0
 800b086:	f04f 0800 	mov.w	r8, #0
 800b08a:	f04f 0900 	mov.w	r9, #0
 800b08e:	9b06      	ldr	r3, [sp, #24]
 800b090:	429f      	cmp	r7, r3
 800b092:	dd06      	ble.n	800b0a2 <__kernel_rem_pio2+0x3c2>
 800b094:	ab70      	add	r3, sp, #448	; 0x1c0
 800b096:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b09a:	e9c3 8900 	strd	r8, r9, [r3]
 800b09e:	3501      	adds	r5, #1
 800b0a0:	e7de      	b.n	800b060 <__kernel_rem_pio2+0x380>
 800b0a2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b0a6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b0aa:	f7f5 faa5 	bl	80005f8 <__aeabi_dmul>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	4640      	mov	r0, r8
 800b0b4:	4649      	mov	r1, r9
 800b0b6:	f7f5 f8e9 	bl	800028c <__adddf3>
 800b0ba:	3701      	adds	r7, #1
 800b0bc:	4680      	mov	r8, r0
 800b0be:	4689      	mov	r9, r1
 800b0c0:	e7e5      	b.n	800b08e <__kernel_rem_pio2+0x3ae>
 800b0c2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b0c6:	e754      	b.n	800af72 <__kernel_rem_pio2+0x292>
 800b0c8:	ec47 6b10 	vmov	d0, r6, r7
 800b0cc:	f1ca 0000 	rsb	r0, sl, #0
 800b0d0:	f000 fba6 	bl	800b820 <scalbn>
 800b0d4:	ec57 6b10 	vmov	r6, r7, d0
 800b0d8:	4b9f      	ldr	r3, [pc, #636]	; (800b358 <__kernel_rem_pio2+0x678>)
 800b0da:	ee10 0a10 	vmov	r0, s0
 800b0de:	2200      	movs	r2, #0
 800b0e0:	4639      	mov	r1, r7
 800b0e2:	f7f5 fd0f 	bl	8000b04 <__aeabi_dcmpge>
 800b0e6:	b300      	cbz	r0, 800b12a <__kernel_rem_pio2+0x44a>
 800b0e8:	4b9c      	ldr	r3, [pc, #624]	; (800b35c <__kernel_rem_pio2+0x67c>)
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	4639      	mov	r1, r7
 800b0f0:	f7f5 fa82 	bl	80005f8 <__aeabi_dmul>
 800b0f4:	f7f5 fd1a 	bl	8000b2c <__aeabi_d2iz>
 800b0f8:	4605      	mov	r5, r0
 800b0fa:	f7f5 fa13 	bl	8000524 <__aeabi_i2d>
 800b0fe:	4b96      	ldr	r3, [pc, #600]	; (800b358 <__kernel_rem_pio2+0x678>)
 800b100:	2200      	movs	r2, #0
 800b102:	f7f5 fa79 	bl	80005f8 <__aeabi_dmul>
 800b106:	460b      	mov	r3, r1
 800b108:	4602      	mov	r2, r0
 800b10a:	4639      	mov	r1, r7
 800b10c:	4630      	mov	r0, r6
 800b10e:	f7f5 f8bb 	bl	8000288 <__aeabi_dsub>
 800b112:	f7f5 fd0b 	bl	8000b2c <__aeabi_d2iz>
 800b116:	f104 0b01 	add.w	fp, r4, #1
 800b11a:	ab0c      	add	r3, sp, #48	; 0x30
 800b11c:	f10a 0a18 	add.w	sl, sl, #24
 800b120:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b124:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800b128:	e72b      	b.n	800af82 <__kernel_rem_pio2+0x2a2>
 800b12a:	4630      	mov	r0, r6
 800b12c:	4639      	mov	r1, r7
 800b12e:	f7f5 fcfd 	bl	8000b2c <__aeabi_d2iz>
 800b132:	ab0c      	add	r3, sp, #48	; 0x30
 800b134:	46a3      	mov	fp, r4
 800b136:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b13a:	e722      	b.n	800af82 <__kernel_rem_pio2+0x2a2>
 800b13c:	ab70      	add	r3, sp, #448	; 0x1c0
 800b13e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800b142:	ab0c      	add	r3, sp, #48	; 0x30
 800b144:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b148:	f7f5 f9ec 	bl	8000524 <__aeabi_i2d>
 800b14c:	4622      	mov	r2, r4
 800b14e:	462b      	mov	r3, r5
 800b150:	f7f5 fa52 	bl	80005f8 <__aeabi_dmul>
 800b154:	4632      	mov	r2, r6
 800b156:	e9c9 0100 	strd	r0, r1, [r9]
 800b15a:	463b      	mov	r3, r7
 800b15c:	4620      	mov	r0, r4
 800b15e:	4629      	mov	r1, r5
 800b160:	f7f5 fa4a 	bl	80005f8 <__aeabi_dmul>
 800b164:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b168:	4604      	mov	r4, r0
 800b16a:	460d      	mov	r5, r1
 800b16c:	e713      	b.n	800af96 <__kernel_rem_pio2+0x2b6>
 800b16e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b172:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b176:	f7f5 fa3f 	bl	80005f8 <__aeabi_dmul>
 800b17a:	4602      	mov	r2, r0
 800b17c:	460b      	mov	r3, r1
 800b17e:	4620      	mov	r0, r4
 800b180:	4629      	mov	r1, r5
 800b182:	f7f5 f883 	bl	800028c <__adddf3>
 800b186:	3601      	adds	r6, #1
 800b188:	4604      	mov	r4, r0
 800b18a:	460d      	mov	r5, r1
 800b18c:	9b04      	ldr	r3, [sp, #16]
 800b18e:	429e      	cmp	r6, r3
 800b190:	dc01      	bgt.n	800b196 <__kernel_rem_pio2+0x4b6>
 800b192:	45b0      	cmp	r8, r6
 800b194:	daeb      	bge.n	800b16e <__kernel_rem_pio2+0x48e>
 800b196:	ab48      	add	r3, sp, #288	; 0x120
 800b198:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b19c:	e9c3 4500 	strd	r4, r5, [r3]
 800b1a0:	3f01      	subs	r7, #1
 800b1a2:	f108 0801 	add.w	r8, r8, #1
 800b1a6:	e6ff      	b.n	800afa8 <__kernel_rem_pio2+0x2c8>
 800b1a8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b1aa:	2b02      	cmp	r3, #2
 800b1ac:	dc0b      	bgt.n	800b1c6 <__kernel_rem_pio2+0x4e6>
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	dc6e      	bgt.n	800b290 <__kernel_rem_pio2+0x5b0>
 800b1b2:	d045      	beq.n	800b240 <__kernel_rem_pio2+0x560>
 800b1b4:	9b07      	ldr	r3, [sp, #28]
 800b1b6:	f003 0007 	and.w	r0, r3, #7
 800b1ba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b1be:	ecbd 8b02 	vpop	{d8}
 800b1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1c6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b1c8:	2b03      	cmp	r3, #3
 800b1ca:	d1f3      	bne.n	800b1b4 <__kernel_rem_pio2+0x4d4>
 800b1cc:	ab48      	add	r3, sp, #288	; 0x120
 800b1ce:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800b1d2:	46d0      	mov	r8, sl
 800b1d4:	46d9      	mov	r9, fp
 800b1d6:	f1b9 0f00 	cmp.w	r9, #0
 800b1da:	f1a8 0808 	sub.w	r8, r8, #8
 800b1de:	dc64      	bgt.n	800b2aa <__kernel_rem_pio2+0x5ca>
 800b1e0:	465c      	mov	r4, fp
 800b1e2:	2c01      	cmp	r4, #1
 800b1e4:	f1aa 0a08 	sub.w	sl, sl, #8
 800b1e8:	dc7e      	bgt.n	800b2e8 <__kernel_rem_pio2+0x608>
 800b1ea:	2000      	movs	r0, #0
 800b1ec:	2100      	movs	r1, #0
 800b1ee:	f1bb 0f01 	cmp.w	fp, #1
 800b1f2:	f300 8097 	bgt.w	800b324 <__kernel_rem_pio2+0x644>
 800b1f6:	9b02      	ldr	r3, [sp, #8]
 800b1f8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800b1fc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800b200:	2b00      	cmp	r3, #0
 800b202:	f040 8099 	bne.w	800b338 <__kernel_rem_pio2+0x658>
 800b206:	9b01      	ldr	r3, [sp, #4]
 800b208:	e9c3 5600 	strd	r5, r6, [r3]
 800b20c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b210:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b214:	e7ce      	b.n	800b1b4 <__kernel_rem_pio2+0x4d4>
 800b216:	ab48      	add	r3, sp, #288	; 0x120
 800b218:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b220:	f7f5 f834 	bl	800028c <__adddf3>
 800b224:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b228:	f1bb 0f00 	cmp.w	fp, #0
 800b22c:	daf3      	bge.n	800b216 <__kernel_rem_pio2+0x536>
 800b22e:	9b02      	ldr	r3, [sp, #8]
 800b230:	b113      	cbz	r3, 800b238 <__kernel_rem_pio2+0x558>
 800b232:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b236:	4619      	mov	r1, r3
 800b238:	9b01      	ldr	r3, [sp, #4]
 800b23a:	e9c3 0100 	strd	r0, r1, [r3]
 800b23e:	e7b9      	b.n	800b1b4 <__kernel_rem_pio2+0x4d4>
 800b240:	2000      	movs	r0, #0
 800b242:	2100      	movs	r1, #0
 800b244:	e7f0      	b.n	800b228 <__kernel_rem_pio2+0x548>
 800b246:	ab48      	add	r3, sp, #288	; 0x120
 800b248:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b250:	f7f5 f81c 	bl	800028c <__adddf3>
 800b254:	3c01      	subs	r4, #1
 800b256:	2c00      	cmp	r4, #0
 800b258:	daf5      	bge.n	800b246 <__kernel_rem_pio2+0x566>
 800b25a:	9b02      	ldr	r3, [sp, #8]
 800b25c:	b1e3      	cbz	r3, 800b298 <__kernel_rem_pio2+0x5b8>
 800b25e:	4602      	mov	r2, r0
 800b260:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b264:	9c01      	ldr	r4, [sp, #4]
 800b266:	e9c4 2300 	strd	r2, r3, [r4]
 800b26a:	4602      	mov	r2, r0
 800b26c:	460b      	mov	r3, r1
 800b26e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b272:	f7f5 f809 	bl	8000288 <__aeabi_dsub>
 800b276:	ad4a      	add	r5, sp, #296	; 0x128
 800b278:	2401      	movs	r4, #1
 800b27a:	45a3      	cmp	fp, r4
 800b27c:	da0f      	bge.n	800b29e <__kernel_rem_pio2+0x5be>
 800b27e:	9b02      	ldr	r3, [sp, #8]
 800b280:	b113      	cbz	r3, 800b288 <__kernel_rem_pio2+0x5a8>
 800b282:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b286:	4619      	mov	r1, r3
 800b288:	9b01      	ldr	r3, [sp, #4]
 800b28a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b28e:	e791      	b.n	800b1b4 <__kernel_rem_pio2+0x4d4>
 800b290:	465c      	mov	r4, fp
 800b292:	2000      	movs	r0, #0
 800b294:	2100      	movs	r1, #0
 800b296:	e7de      	b.n	800b256 <__kernel_rem_pio2+0x576>
 800b298:	4602      	mov	r2, r0
 800b29a:	460b      	mov	r3, r1
 800b29c:	e7e2      	b.n	800b264 <__kernel_rem_pio2+0x584>
 800b29e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b2a2:	f7f4 fff3 	bl	800028c <__adddf3>
 800b2a6:	3401      	adds	r4, #1
 800b2a8:	e7e7      	b.n	800b27a <__kernel_rem_pio2+0x59a>
 800b2aa:	e9d8 4500 	ldrd	r4, r5, [r8]
 800b2ae:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	4632      	mov	r2, r6
 800b2b6:	463b      	mov	r3, r7
 800b2b8:	4629      	mov	r1, r5
 800b2ba:	f7f4 ffe7 	bl	800028c <__adddf3>
 800b2be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	460b      	mov	r3, r1
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	4629      	mov	r1, r5
 800b2ca:	f7f4 ffdd 	bl	8000288 <__aeabi_dsub>
 800b2ce:	4632      	mov	r2, r6
 800b2d0:	463b      	mov	r3, r7
 800b2d2:	f7f4 ffdb 	bl	800028c <__adddf3>
 800b2d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b2da:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800b2de:	ed88 7b00 	vstr	d7, [r8]
 800b2e2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b2e6:	e776      	b.n	800b1d6 <__kernel_rem_pio2+0x4f6>
 800b2e8:	e9da 8900 	ldrd	r8, r9, [sl]
 800b2ec:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b2f0:	4640      	mov	r0, r8
 800b2f2:	4632      	mov	r2, r6
 800b2f4:	463b      	mov	r3, r7
 800b2f6:	4649      	mov	r1, r9
 800b2f8:	f7f4 ffc8 	bl	800028c <__adddf3>
 800b2fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b300:	4602      	mov	r2, r0
 800b302:	460b      	mov	r3, r1
 800b304:	4640      	mov	r0, r8
 800b306:	4649      	mov	r1, r9
 800b308:	f7f4 ffbe 	bl	8000288 <__aeabi_dsub>
 800b30c:	4632      	mov	r2, r6
 800b30e:	463b      	mov	r3, r7
 800b310:	f7f4 ffbc 	bl	800028c <__adddf3>
 800b314:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b318:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b31c:	ed8a 7b00 	vstr	d7, [sl]
 800b320:	3c01      	subs	r4, #1
 800b322:	e75e      	b.n	800b1e2 <__kernel_rem_pio2+0x502>
 800b324:	ab48      	add	r3, sp, #288	; 0x120
 800b326:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32e:	f7f4 ffad 	bl	800028c <__adddf3>
 800b332:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b336:	e75a      	b.n	800b1ee <__kernel_rem_pio2+0x50e>
 800b338:	9b01      	ldr	r3, [sp, #4]
 800b33a:	9a01      	ldr	r2, [sp, #4]
 800b33c:	601d      	str	r5, [r3, #0]
 800b33e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b342:	605c      	str	r4, [r3, #4]
 800b344:	609f      	str	r7, [r3, #8]
 800b346:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b34a:	60d3      	str	r3, [r2, #12]
 800b34c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b350:	6110      	str	r0, [r2, #16]
 800b352:	6153      	str	r3, [r2, #20]
 800b354:	e72e      	b.n	800b1b4 <__kernel_rem_pio2+0x4d4>
 800b356:	bf00      	nop
 800b358:	41700000 	.word	0x41700000
 800b35c:	3e700000 	.word	0x3e700000

0800b360 <__kernel_tan>:
 800b360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b364:	ed2d 8b04 	vpush	{d8-d9}
 800b368:	ec5b ab10 	vmov	sl, fp, d0
 800b36c:	4be2      	ldr	r3, [pc, #904]	; (800b6f8 <__kernel_tan+0x398>)
 800b36e:	b085      	sub	sp, #20
 800b370:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800b374:	429f      	cmp	r7, r3
 800b376:	ed8d 1b00 	vstr	d1, [sp]
 800b37a:	4606      	mov	r6, r0
 800b37c:	f8cd b00c 	str.w	fp, [sp, #12]
 800b380:	dc24      	bgt.n	800b3cc <__kernel_tan+0x6c>
 800b382:	ee10 0a10 	vmov	r0, s0
 800b386:	4659      	mov	r1, fp
 800b388:	f7f5 fbd0 	bl	8000b2c <__aeabi_d2iz>
 800b38c:	2800      	cmp	r0, #0
 800b38e:	d148      	bne.n	800b422 <__kernel_tan+0xc2>
 800b390:	1c73      	adds	r3, r6, #1
 800b392:	4652      	mov	r2, sl
 800b394:	4313      	orrs	r3, r2
 800b396:	433b      	orrs	r3, r7
 800b398:	d112      	bne.n	800b3c0 <__kernel_tan+0x60>
 800b39a:	ec4b ab10 	vmov	d0, sl, fp
 800b39e:	f000 f9b3 	bl	800b708 <fabs>
 800b3a2:	49d6      	ldr	r1, [pc, #856]	; (800b6fc <__kernel_tan+0x39c>)
 800b3a4:	ec53 2b10 	vmov	r2, r3, d0
 800b3a8:	2000      	movs	r0, #0
 800b3aa:	f7f5 fa4f 	bl	800084c <__aeabi_ddiv>
 800b3ae:	4682      	mov	sl, r0
 800b3b0:	468b      	mov	fp, r1
 800b3b2:	ec4b ab10 	vmov	d0, sl, fp
 800b3b6:	b005      	add	sp, #20
 800b3b8:	ecbd 8b04 	vpop	{d8-d9}
 800b3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3c0:	2e01      	cmp	r6, #1
 800b3c2:	d0f6      	beq.n	800b3b2 <__kernel_tan+0x52>
 800b3c4:	49ce      	ldr	r1, [pc, #824]	; (800b700 <__kernel_tan+0x3a0>)
 800b3c6:	465b      	mov	r3, fp
 800b3c8:	2000      	movs	r0, #0
 800b3ca:	e7ee      	b.n	800b3aa <__kernel_tan+0x4a>
 800b3cc:	4bcd      	ldr	r3, [pc, #820]	; (800b704 <__kernel_tan+0x3a4>)
 800b3ce:	429f      	cmp	r7, r3
 800b3d0:	dd27      	ble.n	800b422 <__kernel_tan+0xc2>
 800b3d2:	9b03      	ldr	r3, [sp, #12]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	da0a      	bge.n	800b3ee <__kernel_tan+0x8e>
 800b3d8:	e9dd 2100 	ldrd	r2, r1, [sp]
 800b3dc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b3e0:	469b      	mov	fp, r3
 800b3e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3e6:	e9cd 2300 	strd	r2, r3, [sp]
 800b3ea:	ee10 aa10 	vmov	sl, s0
 800b3ee:	4652      	mov	r2, sl
 800b3f0:	465b      	mov	r3, fp
 800b3f2:	a1a1      	add	r1, pc, #644	; (adr r1, 800b678 <__kernel_tan+0x318>)
 800b3f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3f8:	f7f4 ff46 	bl	8000288 <__aeabi_dsub>
 800b3fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b400:	4604      	mov	r4, r0
 800b402:	460d      	mov	r5, r1
 800b404:	a19e      	add	r1, pc, #632	; (adr r1, 800b680 <__kernel_tan+0x320>)
 800b406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b40a:	f7f4 ff3d 	bl	8000288 <__aeabi_dsub>
 800b40e:	4622      	mov	r2, r4
 800b410:	462b      	mov	r3, r5
 800b412:	f7f4 ff3b 	bl	800028c <__adddf3>
 800b416:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 800b688 <__kernel_tan+0x328>
 800b41a:	ed8d 7b00 	vstr	d7, [sp]
 800b41e:	4682      	mov	sl, r0
 800b420:	468b      	mov	fp, r1
 800b422:	4652      	mov	r2, sl
 800b424:	465b      	mov	r3, fp
 800b426:	4650      	mov	r0, sl
 800b428:	4659      	mov	r1, fp
 800b42a:	f7f5 f8e5 	bl	80005f8 <__aeabi_dmul>
 800b42e:	4602      	mov	r2, r0
 800b430:	460b      	mov	r3, r1
 800b432:	4680      	mov	r8, r0
 800b434:	4689      	mov	r9, r1
 800b436:	f7f5 f8df 	bl	80005f8 <__aeabi_dmul>
 800b43a:	4642      	mov	r2, r8
 800b43c:	4604      	mov	r4, r0
 800b43e:	460d      	mov	r5, r1
 800b440:	464b      	mov	r3, r9
 800b442:	4650      	mov	r0, sl
 800b444:	4659      	mov	r1, fp
 800b446:	f7f5 f8d7 	bl	80005f8 <__aeabi_dmul>
 800b44a:	a391      	add	r3, pc, #580	; (adr r3, 800b690 <__kernel_tan+0x330>)
 800b44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b450:	ec41 0b18 	vmov	d8, r0, r1
 800b454:	4620      	mov	r0, r4
 800b456:	4629      	mov	r1, r5
 800b458:	f7f5 f8ce 	bl	80005f8 <__aeabi_dmul>
 800b45c:	a38e      	add	r3, pc, #568	; (adr r3, 800b698 <__kernel_tan+0x338>)
 800b45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b462:	f7f4 ff13 	bl	800028c <__adddf3>
 800b466:	4622      	mov	r2, r4
 800b468:	462b      	mov	r3, r5
 800b46a:	f7f5 f8c5 	bl	80005f8 <__aeabi_dmul>
 800b46e:	a38c      	add	r3, pc, #560	; (adr r3, 800b6a0 <__kernel_tan+0x340>)
 800b470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b474:	f7f4 ff0a 	bl	800028c <__adddf3>
 800b478:	4622      	mov	r2, r4
 800b47a:	462b      	mov	r3, r5
 800b47c:	f7f5 f8bc 	bl	80005f8 <__aeabi_dmul>
 800b480:	a389      	add	r3, pc, #548	; (adr r3, 800b6a8 <__kernel_tan+0x348>)
 800b482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b486:	f7f4 ff01 	bl	800028c <__adddf3>
 800b48a:	4622      	mov	r2, r4
 800b48c:	462b      	mov	r3, r5
 800b48e:	f7f5 f8b3 	bl	80005f8 <__aeabi_dmul>
 800b492:	a387      	add	r3, pc, #540	; (adr r3, 800b6b0 <__kernel_tan+0x350>)
 800b494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b498:	f7f4 fef8 	bl	800028c <__adddf3>
 800b49c:	4622      	mov	r2, r4
 800b49e:	462b      	mov	r3, r5
 800b4a0:	f7f5 f8aa 	bl	80005f8 <__aeabi_dmul>
 800b4a4:	a384      	add	r3, pc, #528	; (adr r3, 800b6b8 <__kernel_tan+0x358>)
 800b4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4aa:	f7f4 feef 	bl	800028c <__adddf3>
 800b4ae:	4642      	mov	r2, r8
 800b4b0:	464b      	mov	r3, r9
 800b4b2:	f7f5 f8a1 	bl	80005f8 <__aeabi_dmul>
 800b4b6:	a382      	add	r3, pc, #520	; (adr r3, 800b6c0 <__kernel_tan+0x360>)
 800b4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4bc:	ec41 0b19 	vmov	d9, r0, r1
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	4629      	mov	r1, r5
 800b4c4:	f7f5 f898 	bl	80005f8 <__aeabi_dmul>
 800b4c8:	a37f      	add	r3, pc, #508	; (adr r3, 800b6c8 <__kernel_tan+0x368>)
 800b4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ce:	f7f4 fedd 	bl	800028c <__adddf3>
 800b4d2:	4622      	mov	r2, r4
 800b4d4:	462b      	mov	r3, r5
 800b4d6:	f7f5 f88f 	bl	80005f8 <__aeabi_dmul>
 800b4da:	a37d      	add	r3, pc, #500	; (adr r3, 800b6d0 <__kernel_tan+0x370>)
 800b4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e0:	f7f4 fed4 	bl	800028c <__adddf3>
 800b4e4:	4622      	mov	r2, r4
 800b4e6:	462b      	mov	r3, r5
 800b4e8:	f7f5 f886 	bl	80005f8 <__aeabi_dmul>
 800b4ec:	a37a      	add	r3, pc, #488	; (adr r3, 800b6d8 <__kernel_tan+0x378>)
 800b4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f2:	f7f4 fecb 	bl	800028c <__adddf3>
 800b4f6:	4622      	mov	r2, r4
 800b4f8:	462b      	mov	r3, r5
 800b4fa:	f7f5 f87d 	bl	80005f8 <__aeabi_dmul>
 800b4fe:	a378      	add	r3, pc, #480	; (adr r3, 800b6e0 <__kernel_tan+0x380>)
 800b500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b504:	f7f4 fec2 	bl	800028c <__adddf3>
 800b508:	4622      	mov	r2, r4
 800b50a:	462b      	mov	r3, r5
 800b50c:	f7f5 f874 	bl	80005f8 <__aeabi_dmul>
 800b510:	a375      	add	r3, pc, #468	; (adr r3, 800b6e8 <__kernel_tan+0x388>)
 800b512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b516:	f7f4 feb9 	bl	800028c <__adddf3>
 800b51a:	4602      	mov	r2, r0
 800b51c:	460b      	mov	r3, r1
 800b51e:	ec51 0b19 	vmov	r0, r1, d9
 800b522:	f7f4 feb3 	bl	800028c <__adddf3>
 800b526:	ec53 2b18 	vmov	r2, r3, d8
 800b52a:	f7f5 f865 	bl	80005f8 <__aeabi_dmul>
 800b52e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b532:	f7f4 feab 	bl	800028c <__adddf3>
 800b536:	4642      	mov	r2, r8
 800b538:	464b      	mov	r3, r9
 800b53a:	f7f5 f85d 	bl	80005f8 <__aeabi_dmul>
 800b53e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b542:	f7f4 fea3 	bl	800028c <__adddf3>
 800b546:	a36a      	add	r3, pc, #424	; (adr r3, 800b6f0 <__kernel_tan+0x390>)
 800b548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54c:	4604      	mov	r4, r0
 800b54e:	460d      	mov	r5, r1
 800b550:	ec51 0b18 	vmov	r0, r1, d8
 800b554:	f7f5 f850 	bl	80005f8 <__aeabi_dmul>
 800b558:	4622      	mov	r2, r4
 800b55a:	462b      	mov	r3, r5
 800b55c:	f7f4 fe96 	bl	800028c <__adddf3>
 800b560:	460b      	mov	r3, r1
 800b562:	ec41 0b18 	vmov	d8, r0, r1
 800b566:	4602      	mov	r2, r0
 800b568:	4659      	mov	r1, fp
 800b56a:	4650      	mov	r0, sl
 800b56c:	f7f4 fe8e 	bl	800028c <__adddf3>
 800b570:	4b64      	ldr	r3, [pc, #400]	; (800b704 <__kernel_tan+0x3a4>)
 800b572:	429f      	cmp	r7, r3
 800b574:	4604      	mov	r4, r0
 800b576:	460d      	mov	r5, r1
 800b578:	dd3e      	ble.n	800b5f8 <__kernel_tan+0x298>
 800b57a:	4630      	mov	r0, r6
 800b57c:	f7f4 ffd2 	bl	8000524 <__aeabi_i2d>
 800b580:	4622      	mov	r2, r4
 800b582:	4680      	mov	r8, r0
 800b584:	4689      	mov	r9, r1
 800b586:	462b      	mov	r3, r5
 800b588:	4620      	mov	r0, r4
 800b58a:	4629      	mov	r1, r5
 800b58c:	f7f5 f834 	bl	80005f8 <__aeabi_dmul>
 800b590:	4642      	mov	r2, r8
 800b592:	4606      	mov	r6, r0
 800b594:	460f      	mov	r7, r1
 800b596:	464b      	mov	r3, r9
 800b598:	4620      	mov	r0, r4
 800b59a:	4629      	mov	r1, r5
 800b59c:	f7f4 fe76 	bl	800028c <__adddf3>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	4630      	mov	r0, r6
 800b5a6:	4639      	mov	r1, r7
 800b5a8:	f7f5 f950 	bl	800084c <__aeabi_ddiv>
 800b5ac:	ec53 2b18 	vmov	r2, r3, d8
 800b5b0:	f7f4 fe6a 	bl	8000288 <__aeabi_dsub>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	4650      	mov	r0, sl
 800b5ba:	4659      	mov	r1, fp
 800b5bc:	f7f4 fe64 	bl	8000288 <__aeabi_dsub>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	f7f4 fe62 	bl	800028c <__adddf3>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	4640      	mov	r0, r8
 800b5ce:	4649      	mov	r1, r9
 800b5d0:	f7f4 fe5a 	bl	8000288 <__aeabi_dsub>
 800b5d4:	9b03      	ldr	r3, [sp, #12]
 800b5d6:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800b5da:	f00a 0a02 	and.w	sl, sl, #2
 800b5de:	4604      	mov	r4, r0
 800b5e0:	f1ca 0001 	rsb	r0, sl, #1
 800b5e4:	460d      	mov	r5, r1
 800b5e6:	f7f4 ff9d 	bl	8000524 <__aeabi_i2d>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	4629      	mov	r1, r5
 800b5f2:	f7f5 f801 	bl	80005f8 <__aeabi_dmul>
 800b5f6:	e6da      	b.n	800b3ae <__kernel_tan+0x4e>
 800b5f8:	2e01      	cmp	r6, #1
 800b5fa:	d038      	beq.n	800b66e <__kernel_tan+0x30e>
 800b5fc:	460f      	mov	r7, r1
 800b5fe:	4689      	mov	r9, r1
 800b600:	4602      	mov	r2, r0
 800b602:	460b      	mov	r3, r1
 800b604:	2000      	movs	r0, #0
 800b606:	493e      	ldr	r1, [pc, #248]	; (800b700 <__kernel_tan+0x3a0>)
 800b608:	f7f5 f920 	bl	800084c <__aeabi_ddiv>
 800b60c:	2600      	movs	r6, #0
 800b60e:	e9cd 0100 	strd	r0, r1, [sp]
 800b612:	4652      	mov	r2, sl
 800b614:	465b      	mov	r3, fp
 800b616:	4630      	mov	r0, r6
 800b618:	4639      	mov	r1, r7
 800b61a:	f7f4 fe35 	bl	8000288 <__aeabi_dsub>
 800b61e:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b622:	4602      	mov	r2, r0
 800b624:	460b      	mov	r3, r1
 800b626:	ec51 0b18 	vmov	r0, r1, d8
 800b62a:	f7f4 fe2d 	bl	8000288 <__aeabi_dsub>
 800b62e:	4632      	mov	r2, r6
 800b630:	462b      	mov	r3, r5
 800b632:	f7f4 ffe1 	bl	80005f8 <__aeabi_dmul>
 800b636:	46b0      	mov	r8, r6
 800b638:	460f      	mov	r7, r1
 800b63a:	4606      	mov	r6, r0
 800b63c:	4642      	mov	r2, r8
 800b63e:	462b      	mov	r3, r5
 800b640:	4640      	mov	r0, r8
 800b642:	4649      	mov	r1, r9
 800b644:	f7f4 ffd8 	bl	80005f8 <__aeabi_dmul>
 800b648:	4b2c      	ldr	r3, [pc, #176]	; (800b6fc <__kernel_tan+0x39c>)
 800b64a:	2200      	movs	r2, #0
 800b64c:	f7f4 fe1e 	bl	800028c <__adddf3>
 800b650:	4602      	mov	r2, r0
 800b652:	460b      	mov	r3, r1
 800b654:	4630      	mov	r0, r6
 800b656:	4639      	mov	r1, r7
 800b658:	f7f4 fe18 	bl	800028c <__adddf3>
 800b65c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b660:	f7f4 ffca 	bl	80005f8 <__aeabi_dmul>
 800b664:	4642      	mov	r2, r8
 800b666:	462b      	mov	r3, r5
 800b668:	f7f4 fe10 	bl	800028c <__adddf3>
 800b66c:	e69f      	b.n	800b3ae <__kernel_tan+0x4e>
 800b66e:	4682      	mov	sl, r0
 800b670:	468b      	mov	fp, r1
 800b672:	e69e      	b.n	800b3b2 <__kernel_tan+0x52>
 800b674:	f3af 8000 	nop.w
 800b678:	54442d18 	.word	0x54442d18
 800b67c:	3fe921fb 	.word	0x3fe921fb
 800b680:	33145c07 	.word	0x33145c07
 800b684:	3c81a626 	.word	0x3c81a626
	...
 800b690:	74bf7ad4 	.word	0x74bf7ad4
 800b694:	3efb2a70 	.word	0x3efb2a70
 800b698:	32f0a7e9 	.word	0x32f0a7e9
 800b69c:	3f12b80f 	.word	0x3f12b80f
 800b6a0:	1a8d1068 	.word	0x1a8d1068
 800b6a4:	3f3026f7 	.word	0x3f3026f7
 800b6a8:	fee08315 	.word	0xfee08315
 800b6ac:	3f57dbc8 	.word	0x3f57dbc8
 800b6b0:	e96e8493 	.word	0xe96e8493
 800b6b4:	3f8226e3 	.word	0x3f8226e3
 800b6b8:	1bb341fe 	.word	0x1bb341fe
 800b6bc:	3faba1ba 	.word	0x3faba1ba
 800b6c0:	db605373 	.word	0xdb605373
 800b6c4:	bef375cb 	.word	0xbef375cb
 800b6c8:	a03792a6 	.word	0xa03792a6
 800b6cc:	3f147e88 	.word	0x3f147e88
 800b6d0:	f2f26501 	.word	0xf2f26501
 800b6d4:	3f4344d8 	.word	0x3f4344d8
 800b6d8:	c9560328 	.word	0xc9560328
 800b6dc:	3f6d6d22 	.word	0x3f6d6d22
 800b6e0:	8406d637 	.word	0x8406d637
 800b6e4:	3f9664f4 	.word	0x3f9664f4
 800b6e8:	1110fe7a 	.word	0x1110fe7a
 800b6ec:	3fc11111 	.word	0x3fc11111
 800b6f0:	55555563 	.word	0x55555563
 800b6f4:	3fd55555 	.word	0x3fd55555
 800b6f8:	3e2fffff 	.word	0x3e2fffff
 800b6fc:	3ff00000 	.word	0x3ff00000
 800b700:	bff00000 	.word	0xbff00000
 800b704:	3fe59427 	.word	0x3fe59427

0800b708 <fabs>:
 800b708:	ec51 0b10 	vmov	r0, r1, d0
 800b70c:	ee10 2a10 	vmov	r2, s0
 800b710:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b714:	ec43 2b10 	vmov	d0, r2, r3
 800b718:	4770      	bx	lr
 800b71a:	0000      	movs	r0, r0
 800b71c:	0000      	movs	r0, r0
	...

0800b720 <floor>:
 800b720:	ec51 0b10 	vmov	r0, r1, d0
 800b724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b728:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b72c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b730:	2e13      	cmp	r6, #19
 800b732:	ee10 5a10 	vmov	r5, s0
 800b736:	ee10 8a10 	vmov	r8, s0
 800b73a:	460c      	mov	r4, r1
 800b73c:	dc32      	bgt.n	800b7a4 <floor+0x84>
 800b73e:	2e00      	cmp	r6, #0
 800b740:	da14      	bge.n	800b76c <floor+0x4c>
 800b742:	a333      	add	r3, pc, #204	; (adr r3, 800b810 <floor+0xf0>)
 800b744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b748:	f7f4 fda0 	bl	800028c <__adddf3>
 800b74c:	2200      	movs	r2, #0
 800b74e:	2300      	movs	r3, #0
 800b750:	f7f5 f9e2 	bl	8000b18 <__aeabi_dcmpgt>
 800b754:	b138      	cbz	r0, 800b766 <floor+0x46>
 800b756:	2c00      	cmp	r4, #0
 800b758:	da57      	bge.n	800b80a <floor+0xea>
 800b75a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b75e:	431d      	orrs	r5, r3
 800b760:	d001      	beq.n	800b766 <floor+0x46>
 800b762:	4c2d      	ldr	r4, [pc, #180]	; (800b818 <floor+0xf8>)
 800b764:	2500      	movs	r5, #0
 800b766:	4621      	mov	r1, r4
 800b768:	4628      	mov	r0, r5
 800b76a:	e025      	b.n	800b7b8 <floor+0x98>
 800b76c:	4f2b      	ldr	r7, [pc, #172]	; (800b81c <floor+0xfc>)
 800b76e:	4137      	asrs	r7, r6
 800b770:	ea01 0307 	and.w	r3, r1, r7
 800b774:	4303      	orrs	r3, r0
 800b776:	d01f      	beq.n	800b7b8 <floor+0x98>
 800b778:	a325      	add	r3, pc, #148	; (adr r3, 800b810 <floor+0xf0>)
 800b77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77e:	f7f4 fd85 	bl	800028c <__adddf3>
 800b782:	2200      	movs	r2, #0
 800b784:	2300      	movs	r3, #0
 800b786:	f7f5 f9c7 	bl	8000b18 <__aeabi_dcmpgt>
 800b78a:	2800      	cmp	r0, #0
 800b78c:	d0eb      	beq.n	800b766 <floor+0x46>
 800b78e:	2c00      	cmp	r4, #0
 800b790:	bfbe      	ittt	lt
 800b792:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b796:	fa43 f606 	asrlt.w	r6, r3, r6
 800b79a:	19a4      	addlt	r4, r4, r6
 800b79c:	ea24 0407 	bic.w	r4, r4, r7
 800b7a0:	2500      	movs	r5, #0
 800b7a2:	e7e0      	b.n	800b766 <floor+0x46>
 800b7a4:	2e33      	cmp	r6, #51	; 0x33
 800b7a6:	dd0b      	ble.n	800b7c0 <floor+0xa0>
 800b7a8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b7ac:	d104      	bne.n	800b7b8 <floor+0x98>
 800b7ae:	ee10 2a10 	vmov	r2, s0
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	f7f4 fd6a 	bl	800028c <__adddf3>
 800b7b8:	ec41 0b10 	vmov	d0, r0, r1
 800b7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7c0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b7c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7c8:	fa23 f707 	lsr.w	r7, r3, r7
 800b7cc:	4207      	tst	r7, r0
 800b7ce:	d0f3      	beq.n	800b7b8 <floor+0x98>
 800b7d0:	a30f      	add	r3, pc, #60	; (adr r3, 800b810 <floor+0xf0>)
 800b7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d6:	f7f4 fd59 	bl	800028c <__adddf3>
 800b7da:	2200      	movs	r2, #0
 800b7dc:	2300      	movs	r3, #0
 800b7de:	f7f5 f99b 	bl	8000b18 <__aeabi_dcmpgt>
 800b7e2:	2800      	cmp	r0, #0
 800b7e4:	d0bf      	beq.n	800b766 <floor+0x46>
 800b7e6:	2c00      	cmp	r4, #0
 800b7e8:	da02      	bge.n	800b7f0 <floor+0xd0>
 800b7ea:	2e14      	cmp	r6, #20
 800b7ec:	d103      	bne.n	800b7f6 <floor+0xd6>
 800b7ee:	3401      	adds	r4, #1
 800b7f0:	ea25 0507 	bic.w	r5, r5, r7
 800b7f4:	e7b7      	b.n	800b766 <floor+0x46>
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b7fc:	fa03 f606 	lsl.w	r6, r3, r6
 800b800:	4435      	add	r5, r6
 800b802:	4545      	cmp	r5, r8
 800b804:	bf38      	it	cc
 800b806:	18e4      	addcc	r4, r4, r3
 800b808:	e7f2      	b.n	800b7f0 <floor+0xd0>
 800b80a:	2500      	movs	r5, #0
 800b80c:	462c      	mov	r4, r5
 800b80e:	e7aa      	b.n	800b766 <floor+0x46>
 800b810:	8800759c 	.word	0x8800759c
 800b814:	7e37e43c 	.word	0x7e37e43c
 800b818:	bff00000 	.word	0xbff00000
 800b81c:	000fffff 	.word	0x000fffff

0800b820 <scalbn>:
 800b820:	b570      	push	{r4, r5, r6, lr}
 800b822:	ec55 4b10 	vmov	r4, r5, d0
 800b826:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b82a:	4606      	mov	r6, r0
 800b82c:	462b      	mov	r3, r5
 800b82e:	b99a      	cbnz	r2, 800b858 <scalbn+0x38>
 800b830:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b834:	4323      	orrs	r3, r4
 800b836:	d036      	beq.n	800b8a6 <scalbn+0x86>
 800b838:	4b39      	ldr	r3, [pc, #228]	; (800b920 <scalbn+0x100>)
 800b83a:	4629      	mov	r1, r5
 800b83c:	ee10 0a10 	vmov	r0, s0
 800b840:	2200      	movs	r2, #0
 800b842:	f7f4 fed9 	bl	80005f8 <__aeabi_dmul>
 800b846:	4b37      	ldr	r3, [pc, #220]	; (800b924 <scalbn+0x104>)
 800b848:	429e      	cmp	r6, r3
 800b84a:	4604      	mov	r4, r0
 800b84c:	460d      	mov	r5, r1
 800b84e:	da10      	bge.n	800b872 <scalbn+0x52>
 800b850:	a32b      	add	r3, pc, #172	; (adr r3, 800b900 <scalbn+0xe0>)
 800b852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b856:	e03a      	b.n	800b8ce <scalbn+0xae>
 800b858:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b85c:	428a      	cmp	r2, r1
 800b85e:	d10c      	bne.n	800b87a <scalbn+0x5a>
 800b860:	ee10 2a10 	vmov	r2, s0
 800b864:	4620      	mov	r0, r4
 800b866:	4629      	mov	r1, r5
 800b868:	f7f4 fd10 	bl	800028c <__adddf3>
 800b86c:	4604      	mov	r4, r0
 800b86e:	460d      	mov	r5, r1
 800b870:	e019      	b.n	800b8a6 <scalbn+0x86>
 800b872:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b876:	460b      	mov	r3, r1
 800b878:	3a36      	subs	r2, #54	; 0x36
 800b87a:	4432      	add	r2, r6
 800b87c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b880:	428a      	cmp	r2, r1
 800b882:	dd08      	ble.n	800b896 <scalbn+0x76>
 800b884:	2d00      	cmp	r5, #0
 800b886:	a120      	add	r1, pc, #128	; (adr r1, 800b908 <scalbn+0xe8>)
 800b888:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b88c:	da1c      	bge.n	800b8c8 <scalbn+0xa8>
 800b88e:	a120      	add	r1, pc, #128	; (adr r1, 800b910 <scalbn+0xf0>)
 800b890:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b894:	e018      	b.n	800b8c8 <scalbn+0xa8>
 800b896:	2a00      	cmp	r2, #0
 800b898:	dd08      	ble.n	800b8ac <scalbn+0x8c>
 800b89a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b89e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b8a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b8a6:	ec45 4b10 	vmov	d0, r4, r5
 800b8aa:	bd70      	pop	{r4, r5, r6, pc}
 800b8ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b8b0:	da19      	bge.n	800b8e6 <scalbn+0xc6>
 800b8b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b8b6:	429e      	cmp	r6, r3
 800b8b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b8bc:	dd0a      	ble.n	800b8d4 <scalbn+0xb4>
 800b8be:	a112      	add	r1, pc, #72	; (adr r1, 800b908 <scalbn+0xe8>)
 800b8c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d1e2      	bne.n	800b88e <scalbn+0x6e>
 800b8c8:	a30f      	add	r3, pc, #60	; (adr r3, 800b908 <scalbn+0xe8>)
 800b8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ce:	f7f4 fe93 	bl	80005f8 <__aeabi_dmul>
 800b8d2:	e7cb      	b.n	800b86c <scalbn+0x4c>
 800b8d4:	a10a      	add	r1, pc, #40	; (adr r1, 800b900 <scalbn+0xe0>)
 800b8d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d0b8      	beq.n	800b850 <scalbn+0x30>
 800b8de:	a10e      	add	r1, pc, #56	; (adr r1, 800b918 <scalbn+0xf8>)
 800b8e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8e4:	e7b4      	b.n	800b850 <scalbn+0x30>
 800b8e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b8ea:	3236      	adds	r2, #54	; 0x36
 800b8ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b8f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	4b0c      	ldr	r3, [pc, #48]	; (800b928 <scalbn+0x108>)
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	e7e8      	b.n	800b8ce <scalbn+0xae>
 800b8fc:	f3af 8000 	nop.w
 800b900:	c2f8f359 	.word	0xc2f8f359
 800b904:	01a56e1f 	.word	0x01a56e1f
 800b908:	8800759c 	.word	0x8800759c
 800b90c:	7e37e43c 	.word	0x7e37e43c
 800b910:	8800759c 	.word	0x8800759c
 800b914:	fe37e43c 	.word	0xfe37e43c
 800b918:	c2f8f359 	.word	0xc2f8f359
 800b91c:	81a56e1f 	.word	0x81a56e1f
 800b920:	43500000 	.word	0x43500000
 800b924:	ffff3cb0 	.word	0xffff3cb0
 800b928:	3c900000 	.word	0x3c900000

0800b92c <_init>:
 800b92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b92e:	bf00      	nop
 800b930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b932:	bc08      	pop	{r3}
 800b934:	469e      	mov	lr, r3
 800b936:	4770      	bx	lr

0800b938 <_fini>:
 800b938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b93a:	bf00      	nop
 800b93c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b93e:	bc08      	pop	{r3}
 800b940:	469e      	mov	lr, r3
 800b942:	4770      	bx	lr
