
stm32serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017f8  0800c460  0800c460  0001c460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc58  0800dc58  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc58  0800dc58  0001dc58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc60  0800dc60  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc60  0800dc60  0001dc60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc64  0800dc64  0001dc64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800dc68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002450  200001f4  0800de5c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002644  0800de5c  00022644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e464  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000422d  00000000  00000000  0003e688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001570  00000000  00000000  000428b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001b044  00000000  00000000  00043e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001a738  00000000  00000000  0005ee6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000944cf  00000000  00000000  000795a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0010da73  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000013c8  00000000  00000000  0010dac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000066d4  00000000  00000000  0010ee90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c444 	.word	0x0800c444

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800c444 	.word	0x0800c444

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c70:	f000 b96e 	b.w	8000f50 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	4604      	mov	r4, r0
 8000c94:	468c      	mov	ip, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f040 8083 	bne.w	8000da2 <__udivmoddi4+0x116>
 8000c9c:	428a      	cmp	r2, r1
 8000c9e:	4617      	mov	r7, r2
 8000ca0:	d947      	bls.n	8000d32 <__udivmoddi4+0xa6>
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	b142      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca8:	f1c2 0020 	rsb	r0, r2, #32
 8000cac:	fa24 f000 	lsr.w	r0, r4, r0
 8000cb0:	4091      	lsls	r1, r2
 8000cb2:	4097      	lsls	r7, r2
 8000cb4:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb8:	4094      	lsls	r4, r2
 8000cba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc4:	fa1f fe87 	uxth.w	lr, r7
 8000cc8:	fb08 c116 	mls	r1, r8, r6, ip
 8000ccc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd0:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	d909      	bls.n	8000cec <__udivmoddi4+0x60>
 8000cd8:	18fb      	adds	r3, r7, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cde:	f080 8119 	bcs.w	8000f14 <__udivmoddi4+0x288>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 8116 	bls.w	8000f14 <__udivmoddi4+0x288>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	443b      	add	r3, r7
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x8c>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0a:	f080 8105 	bcs.w	8000f18 <__udivmoddi4+0x28c>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f240 8102 	bls.w	8000f18 <__udivmoddi4+0x28c>
 8000d14:	3802      	subs	r0, #2
 8000d16:	443c      	add	r4, r7
 8000d18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1c:	eba4 040e 	sub.w	r4, r4, lr
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa0>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	b902      	cbnz	r2, 8000d36 <__udivmoddi4+0xaa>
 8000d34:	deff      	udf	#255	; 0xff
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	2a00      	cmp	r2, #0
 8000d3c:	d150      	bne.n	8000de0 <__udivmoddi4+0x154>
 8000d3e:	1bcb      	subs	r3, r1, r7
 8000d40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d44:	fa1f f887 	uxth.w	r8, r7
 8000d48:	2601      	movs	r6, #1
 8000d4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4e:	0c21      	lsrs	r1, r4, #16
 8000d50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d58:	fb08 f30c 	mul.w	r3, r8, ip
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	d907      	bls.n	8000d70 <__udivmoddi4+0xe4>
 8000d60:	1879      	adds	r1, r7, r1
 8000d62:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0xe2>
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	f200 80e9 	bhi.w	8000f40 <__udivmoddi4+0x2b4>
 8000d6e:	4684      	mov	ip, r0
 8000d70:	1ac9      	subs	r1, r1, r3
 8000d72:	b2a3      	uxth	r3, r4
 8000d74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d80:	fb08 f800 	mul.w	r8, r8, r0
 8000d84:	45a0      	cmp	r8, r4
 8000d86:	d907      	bls.n	8000d98 <__udivmoddi4+0x10c>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x10a>
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	f200 80d9 	bhi.w	8000f48 <__udivmoddi4+0x2bc>
 8000d96:	4618      	mov	r0, r3
 8000d98:	eba4 0408 	sub.w	r4, r4, r8
 8000d9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000da0:	e7bf      	b.n	8000d22 <__udivmoddi4+0x96>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0x12e>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80b1 	beq.w	8000f0e <__udivmoddi4+0x282>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x1cc>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0x140>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80b8 	bhi.w	8000f3c <__udivmoddi4+0x2b0>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0103 	sbc.w	r1, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	468c      	mov	ip, r1
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0a8      	beq.n	8000d2c <__udivmoddi4+0xa0>
 8000dda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dde:	e7a5      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f603 	lsr.w	r6, r0, r3
 8000de8:	4097      	lsls	r7, r2
 8000dea:	fa01 f002 	lsl.w	r0, r1, r2
 8000dee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df2:	40d9      	lsrs	r1, r3
 8000df4:	4330      	orrs	r0, r6
 8000df6:	0c03      	lsrs	r3, r0, #16
 8000df8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e08:	fb06 f108 	mul.w	r1, r6, r8
 8000e0c:	4299      	cmp	r1, r3
 8000e0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x19c>
 8000e14:	18fb      	adds	r3, r7, r3
 8000e16:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e1a:	f080 808d 	bcs.w	8000f38 <__udivmoddi4+0x2ac>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 808a 	bls.w	8000f38 <__udivmoddi4+0x2ac>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	443b      	add	r3, r7
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b281      	uxth	r1, r0
 8000e2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e38:	fb00 f308 	mul.w	r3, r0, r8
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x1c4>
 8000e40:	1879      	adds	r1, r7, r1
 8000e42:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e46:	d273      	bcs.n	8000f30 <__udivmoddi4+0x2a4>
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d971      	bls.n	8000f30 <__udivmoddi4+0x2a4>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4439      	add	r1, r7
 8000e50:	1acb      	subs	r3, r1, r3
 8000e52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e56:	e778      	b.n	8000d4a <__udivmoddi4+0xbe>
 8000e58:	f1c6 0c20 	rsb	ip, r6, #32
 8000e5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e64:	431c      	orrs	r4, r3
 8000e66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e76:	431f      	orrs	r7, r3
 8000e78:	0c3b      	lsrs	r3, r7, #16
 8000e7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7e:	fa1f f884 	uxth.w	r8, r4
 8000e82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	fa02 f206 	lsl.w	r2, r2, r6
 8000e94:	fa00 f306 	lsl.w	r3, r0, r6
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x220>
 8000e9a:	1861      	adds	r1, r4, r1
 8000e9c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ea0:	d248      	bcs.n	8000f34 <__udivmoddi4+0x2a8>
 8000ea2:	458a      	cmp	sl, r1
 8000ea4:	d946      	bls.n	8000f34 <__udivmoddi4+0x2a8>
 8000ea6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eaa:	4421      	add	r1, r4
 8000eac:	eba1 010a 	sub.w	r1, r1, sl
 8000eb0:	b2bf      	uxth	r7, r7
 8000eb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ebe:	fb00 f808 	mul.w	r8, r0, r8
 8000ec2:	45b8      	cmp	r8, r7
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x24a>
 8000ec6:	19e7      	adds	r7, r4, r7
 8000ec8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ecc:	d22e      	bcs.n	8000f2c <__udivmoddi4+0x2a0>
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d92c      	bls.n	8000f2c <__udivmoddi4+0x2a0>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4427      	add	r7, r4
 8000ed6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eda:	eba7 0708 	sub.w	r7, r7, r8
 8000ede:	fba0 8902 	umull	r8, r9, r0, r2
 8000ee2:	454f      	cmp	r7, r9
 8000ee4:	46c6      	mov	lr, r8
 8000ee6:	4649      	mov	r1, r9
 8000ee8:	d31a      	bcc.n	8000f20 <__udivmoddi4+0x294>
 8000eea:	d017      	beq.n	8000f1c <__udivmoddi4+0x290>
 8000eec:	b15d      	cbz	r5, 8000f06 <__udivmoddi4+0x27a>
 8000eee:	ebb3 020e 	subs.w	r2, r3, lr
 8000ef2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000efa:	40f2      	lsrs	r2, r6
 8000efc:	ea4c 0202 	orr.w	r2, ip, r2
 8000f00:	40f7      	lsrs	r7, r6
 8000f02:	e9c5 2700 	strd	r2, r7, [r5]
 8000f06:	2600      	movs	r6, #0
 8000f08:	4631      	mov	r1, r6
 8000f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0e:	462e      	mov	r6, r5
 8000f10:	4628      	mov	r0, r5
 8000f12:	e70b      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000f14:	4606      	mov	r6, r0
 8000f16:	e6e9      	b.n	8000cec <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fd      	b.n	8000d18 <__udivmoddi4+0x8c>
 8000f1c:	4543      	cmp	r3, r8
 8000f1e:	d2e5      	bcs.n	8000eec <__udivmoddi4+0x260>
 8000f20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f24:	eb69 0104 	sbc.w	r1, r9, r4
 8000f28:	3801      	subs	r0, #1
 8000f2a:	e7df      	b.n	8000eec <__udivmoddi4+0x260>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	e7d2      	b.n	8000ed6 <__udivmoddi4+0x24a>
 8000f30:	4660      	mov	r0, ip
 8000f32:	e78d      	b.n	8000e50 <__udivmoddi4+0x1c4>
 8000f34:	4681      	mov	r9, r0
 8000f36:	e7b9      	b.n	8000eac <__udivmoddi4+0x220>
 8000f38:	4666      	mov	r6, ip
 8000f3a:	e775      	b.n	8000e28 <__udivmoddi4+0x19c>
 8000f3c:	4630      	mov	r0, r6
 8000f3e:	e74a      	b.n	8000dd6 <__udivmoddi4+0x14a>
 8000f40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f44:	4439      	add	r1, r7
 8000f46:	e713      	b.n	8000d70 <__udivmoddi4+0xe4>
 8000f48:	3802      	subs	r0, #2
 8000f4a:	443c      	add	r4, r7
 8000f4c:	e724      	b.n	8000d98 <__udivmoddi4+0x10c>
 8000f4e:	bf00      	nop

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <updateDisplay>:
// Copy all data from local screenbuffer to the screen
	ssd1306_UpdateScreen(&hi2c1);

}

void updateDisplay(struct System *system) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b092      	sub	sp, #72	; 0x48
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]

	// ssd1306_Fill(Black);
	ssd1306_UpdateScreen(&hi2c1);
 8000f5c:	4832      	ldr	r0, [pc, #200]	; (8001028 <updateDisplay+0xd4>)
 8000f5e:	f000 fdd7 	bl	8001b10 <ssd1306_UpdateScreen>

	char cpu_text[20] = { 0 };
 8000f62:	2300      	movs	r3, #0
 8000f64:	637b      	str	r3, [r7, #52]	; 0x34
 8000f66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
	char ram_text[20] = { 0 };
 8000f74:	2300      	movs	r3, #0
 8000f76:	623b      	str	r3, [r7, #32]
 8000f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
	char gpu_text[20] = { 0 };
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	f107 0310 	add.w	r3, r7, #16
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]

	sprintf(cpu_text, "CPU %d%% %d C", system->cpu_util, system->cpu_temp);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	791b      	ldrb	r3, [r3, #4]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	799b      	ldrb	r3, [r3, #6]
 8000fa2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000fa6:	4921      	ldr	r1, [pc, #132]	; (800102c <updateDisplay+0xd8>)
 8000fa8:	f009 f9a0 	bl	800a2ec <siprintf>
	sprintf(ram_text, "Memory Util %d%%", system->ram_util);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	f107 0320 	add.w	r3, r7, #32
 8000fb8:	491d      	ldr	r1, [pc, #116]	; (8001030 <updateDisplay+0xdc>)
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f009 f996 	bl	800a2ec <siprintf>
	sprintf(gpu_text, "GPU %d%% %d C", system->gpu_util, system->gpu_temp);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8000fce:	f107 000c 	add.w	r0, r7, #12
 8000fd2:	4918      	ldr	r1, [pc, #96]	; (8001034 <updateDisplay+0xe0>)
 8000fd4:	f009 f98a 	bl	800a2ec <siprintf>

	// Write data to local screenbuffer
	ssd1306_SetCursor(5, 0);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2005      	movs	r0, #5
 8000fdc:	f000 fed0 	bl	8001d80 <ssd1306_SetCursor>
	ssd1306_WriteString(ram_text, Font_7x10, White);
 8000fe0:	4a15      	ldr	r2, [pc, #84]	; (8001038 <updateDisplay+0xe4>)
 8000fe2:	f107 0020 	add.w	r0, r7, #32
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	ca06      	ldmia	r2, {r1, r2}
 8000fea:	f000 fea3 	bl	8001d34 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 15);
 8000fee:	210f      	movs	r1, #15
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f000 fec5 	bl	8001d80 <ssd1306_SetCursor>
	ssd1306_WriteString(cpu_text, Font_11x18, White);
 8000ff6:	4a11      	ldr	r2, [pc, #68]	; (800103c <updateDisplay+0xe8>)
 8000ff8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	ca06      	ldmia	r2, {r1, r2}
 8001000:	f000 fe98 	bl	8001d34 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 40);
 8001004:	2128      	movs	r1, #40	; 0x28
 8001006:	2000      	movs	r0, #0
 8001008:	f000 feba 	bl	8001d80 <ssd1306_SetCursor>
	ssd1306_WriteString(gpu_text, Font_11x18, White);
 800100c:	4a0b      	ldr	r2, [pc, #44]	; (800103c <updateDisplay+0xe8>)
 800100e:	f107 000c 	add.w	r0, r7, #12
 8001012:	2301      	movs	r3, #1
 8001014:	ca06      	ldmia	r2, {r1, r2}
 8001016:	f000 fe8d 	bl	8001d34 <ssd1306_WriteString>

// Copy all data from local screenbuffer to the screen
	ssd1306_UpdateScreen(&hi2c1);
 800101a:	4803      	ldr	r0, [pc, #12]	; (8001028 <updateDisplay+0xd4>)
 800101c:	f000 fd78 	bl	8001b10 <ssd1306_UpdateScreen>

}
 8001020:	bf00      	nop
 8001022:	3748      	adds	r7, #72	; 0x48
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200008dc 	.word	0x200008dc
 800102c:	0800c460 	.word	0x0800c460
 8001030:	0800c470 	.word	0x0800c470
 8001034:	0800c484 	.word	0x0800c484
 8001038:	20000000 	.word	0x20000000
 800103c:	20000008 	.word	0x20000008

08001040 <Set_LED>:

void Set_LED(int LEDnum, int Red, int Green, int Blue) {
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	b2d9      	uxtb	r1, r3
 8001052:	4a11      	ldr	r2, [pc, #68]	; (8001098 <Set_LED+0x58>)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	b2d9      	uxtb	r1, r3
 800105e:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <Set_LED+0x58>)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	460a      	mov	r2, r1
 8001068:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	b2d9      	uxtb	r1, r3
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <Set_LED+0x58>)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	460a      	mov	r2, r1
 8001078:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2d9      	uxtb	r1, r3
 800107e:	4a06      	ldr	r2, [pc, #24]	; (8001098 <Set_LED+0x58>)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	460a      	mov	r2, r1
 8001088:	70da      	strb	r2, [r3, #3]
}
 800108a:	bf00      	nop
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	200008ac 	.word	0x200008ac
 800109c:	00000000 	.word	0x00000000

080010a0 <Set_Brightness>:

void Set_Brightness(int brightness)  // 0-45
{
 80010a0:	b5b0      	push	{r4, r5, r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b2d      	cmp	r3, #45	; 0x2d
 80010ac:	dd01      	ble.n	80010b2 <Set_Brightness+0x12>
		brightness = 45;
 80010ae:	232d      	movs	r3, #45	; 0x2d
 80010b0:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < MAX_LED; i++) {
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	e060      	b.n	800117a <Set_Brightness+0xda>
		LED_Mod[i][0] = LED_Data[i][0];
 80010b8:	4a37      	ldr	r2, [pc, #220]	; (8001198 <Set_Brightness+0xf8>)
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 80010c0:	4a36      	ldr	r2, [pc, #216]	; (800119c <Set_Brightness+0xfc>)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; j++) {
 80010c8:	2301      	movs	r3, #1
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	e04f      	b.n	800116e <Set_Brightness+0xce>
			float angle = 90 - brightness;  // in degrees
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80010d4:	ee07 3a90 	vmov	s15, r3
 80010d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010dc:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle * PI / 180;  // in rad
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f7ff fa31 	bl	8000548 <__aeabi_f2d>
 80010e6:	a32a      	add	r3, pc, #168	; (adr r3, 8001190 <Set_Brightness+0xf0>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff fa84 	bl	80005f8 <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <Set_Brightness+0x100>)
 80010fe:	f7ff fba5 	bl	800084c <__aeabi_ddiv>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fd57 	bl	8000bbc <__aeabi_d2f>
 800110e:	4603      	mov	r3, r0
 8001110:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j]) / (tan(angle));
 8001112:	4a21      	ldr	r2, [pc, #132]	; (8001198 <Set_Brightness+0xf8>)
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	441a      	add	r2, r3
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4413      	add	r3, r2
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f9ff 	bl	8000524 <__aeabi_i2d>
 8001126:	4604      	mov	r4, r0
 8001128:	460d      	mov	r5, r1
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f7ff fa0c 	bl	8000548 <__aeabi_f2d>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	ec43 2b10 	vmov	d0, r2, r3
 8001138:	f00a f922 	bl	800b380 <tan>
 800113c:	ec53 2b10 	vmov	r2, r3, d0
 8001140:	4620      	mov	r0, r4
 8001142:	4629      	mov	r1, r5
 8001144:	f7ff fb82 	bl	800084c <__aeabi_ddiv>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4610      	mov	r0, r2
 800114e:	4619      	mov	r1, r3
 8001150:	f7ff fd14 	bl	8000b7c <__aeabi_d2uiz>
 8001154:	4603      	mov	r3, r0
 8001156:	b2d9      	uxtb	r1, r3
 8001158:	4a10      	ldr	r2, [pc, #64]	; (800119c <Set_Brightness+0xfc>)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	441a      	add	r2, r3
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	4413      	add	r3, r2
 8001164:	460a      	mov	r2, r1
 8001166:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; j++) {
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	3301      	adds	r3, #1
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	2b03      	cmp	r3, #3
 8001172:	ddac      	ble.n	80010ce <Set_Brightness+0x2e>
	for (int i = 0; i < MAX_LED; i++) {
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3301      	adds	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	2b0b      	cmp	r3, #11
 800117e:	dd9b      	ble.n	80010b8 <Set_Brightness+0x18>
		}
	}

#endif

}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bdb0      	pop	{r4, r5, r7, pc}
 800118a:	bf00      	nop
 800118c:	f3af 8000 	nop.w
 8001190:	53c8d4f1 	.word	0x53c8d4f1
 8001194:	400921fb 	.word	0x400921fb
 8001198:	200008ac 	.word	0x200008ac
 800119c:	20000930 	.word	0x20000930
 80011a0:	40668000 	.word	0x40668000

080011a4 <WS2812_Send>:

//https://controllerstech.com/interface-ws2812-with-stm32/
void WS2812_Send(void) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
	uint32_t indx = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; i++) {
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	e036      	b.n	8001222 <WS2812_Send+0x7e>
#if USE_BRIGHTNESS
		color =
				((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 80011b4:	4a2e      	ldr	r2, [pc, #184]	; (8001270 <WS2812_Send+0xcc>)
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	785b      	ldrb	r3, [r3, #1]
 80011be:	041a      	lsls	r2, r3, #16
 80011c0:	492b      	ldr	r1, [pc, #172]	; (8001270 <WS2812_Send+0xcc>)
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	440b      	add	r3, r1
 80011c8:	789b      	ldrb	r3, [r3, #2]
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	431a      	orrs	r2, r3
 80011ce:	4928      	ldr	r1, [pc, #160]	; (8001270 <WS2812_Send+0xcc>)
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	78db      	ldrb	r3, [r3, #3]
 80011d8:	4313      	orrs	r3, r2
		color =
 80011da:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i = 23; i >= 0; i--) {
 80011dc:	2317      	movs	r3, #23
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	e019      	b.n	8001216 <WS2812_Send+0x72>
			if (color & (1 << i)) {
 80011e2:	2201      	movs	r2, #1
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	461a      	mov	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4013      	ands	r3, r2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <WS2812_Send+0x5c>
				pwmData[indx] = 80;  // 2/3 of 120
 80011f4:	4a1f      	ldr	r2, [pc, #124]	; (8001274 <WS2812_Send+0xd0>)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	2150      	movs	r1, #80	; 0x50
 80011fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80011fe:	e004      	b.n	800120a <WS2812_Send+0x66>
			}

			else
				pwmData[indx] = 40;  // 1/3 of 120
 8001200:	4a1c      	ldr	r2, [pc, #112]	; (8001274 <WS2812_Send+0xd0>)
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	2128      	movs	r1, #40	; 0x28
 8001206:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3301      	adds	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
		for (int i = 23; i >= 0; i--) {
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	3b01      	subs	r3, #1
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2b00      	cmp	r3, #0
 800121a:	dae2      	bge.n	80011e2 <WS2812_Send+0x3e>
	for (int i = 0; i < MAX_LED; i++) {
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	3301      	adds	r3, #1
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	2b0b      	cmp	r3, #11
 8001226:	ddc5      	ble.n	80011b4 <WS2812_Send+0x10>
		}

	}

	for (int i = 0; i < 50; i++) {
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	e00a      	b.n	8001244 <WS2812_Send+0xa0>
		pwmData[indx] = 0;
 800122e:	4a11      	ldr	r2, [pc, #68]	; (8001274 <WS2812_Send+0xd0>)
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	2100      	movs	r1, #0
 8001234:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	3301      	adds	r3, #1
 800123c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; i++) {
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	3301      	adds	r3, #1
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	2b31      	cmp	r3, #49	; 0x31
 8001248:	ddf1      	ble.n	800122e <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*) pwmData, indx);
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	b29b      	uxth	r3, r3
 800124e:	4a09      	ldr	r2, [pc, #36]	; (8001274 <WS2812_Send+0xd0>)
 8001250:	2100      	movs	r1, #0
 8001252:	4809      	ldr	r0, [pc, #36]	; (8001278 <WS2812_Send+0xd4>)
 8001254:	f004 f940 	bl	80054d8 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag) {
 8001258:	bf00      	nop
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <WS2812_Send+0xd8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0fb      	beq.n	800125a <WS2812_Send+0xb6>
	};
	datasentflag = 0;
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <WS2812_Send+0xd8>)
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
}
 8001268:	bf00      	nop
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000930 	.word	0x20000930
 8001274:	20000960 	.word	0x20000960
 8001278:	20000c04 	.word	0x20000c04
 800127c:	20000210 	.word	0x20000210

08001280 <HAL_TIM_PWM_PulseFinishedCallback>:


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001288:	2100      	movs	r1, #0
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800128c:	f004 fad4 	bl	8005838 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8001290:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001292:	2201      	movs	r2, #1
 8001294:	601a      	str	r2, [r3, #0]
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000c04 	.word	0x20000c04
 80012a4:	20000210 	.word	0x20000210

080012a8 <updateWheel>:

void updateWheel(uint8_t num_leds){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]

	for(uint8_t i = 0; i < MAX_LED; i++){
 80012b2:	2300      	movs	r3, #0
 80012b4:	73fb      	strb	r3, [r7, #15]
 80012b6:	e018      	b.n	80012ea <updateWheel+0x42>
		Set_Brightness(25);
 80012b8:	2019      	movs	r0, #25
 80012ba:	f7ff fef1 	bl	80010a0 <Set_Brightness>
		if(i < num_leds){
 80012be:	7bfa      	ldrb	r2, [r7, #15]
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d206      	bcs.n	80012d4 <updateWheel+0x2c>
			Set_LED(i, 0, 0, 255);
 80012c6:	7bf8      	ldrb	r0, [r7, #15]
 80012c8:	23ff      	movs	r3, #255	; 0xff
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	f7ff feb7 	bl	8001040 <Set_LED>
 80012d2:	e005      	b.n	80012e0 <updateWheel+0x38>
		}else{
			Set_LED(i, 0, 0, 0);
 80012d4:	7bf8      	ldrb	r0, [r7, #15]
 80012d6:	2300      	movs	r3, #0
 80012d8:	2200      	movs	r2, #0
 80012da:	2100      	movs	r1, #0
 80012dc:	f7ff feb0 	bl	8001040 <Set_LED>
		}
		 WS2812_Send();
 80012e0:	f7ff ff60 	bl	80011a4 <WS2812_Send>
	for(uint8_t i = 0; i < MAX_LED; i++){
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	3301      	adds	r3, #1
 80012e8:	73fb      	strb	r3, [r7, #15]
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	2b0b      	cmp	r3, #11
 80012ee:	d9e3      	bls.n	80012b8 <updateWheel+0x10>
	}


}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b0b0      	sub	sp, #192	; 0xc0
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char msg[11] = "No Data";
 8001302:	4a41      	ldr	r2, [pc, #260]	; (8001408 <main+0x10c>)
 8001304:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001308:	e892 0003 	ldmia.w	r2, {r0, r1}
 800130c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001310:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001314:	2100      	movs	r1, #0
 8001316:	460a      	mov	r2, r1
 8001318:	801a      	strh	r2, [r3, #0]
 800131a:	460a      	mov	r2, r1
 800131c:	709a      	strb	r2, [r3, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800131e:	f000 ff63 	bl	80021e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001322:	f000 f879 	bl	8001418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001326:	f000 f9cf 	bl	80016c8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800132a:	f008 f91f 	bl	800956c <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 800132e:	f000 f8dd 	bl	80014ec <MX_I2C1_Init>
  MX_DMA_Init();
 8001332:	f000 f9a9 	bl	8001688 <MX_DMA_Init>
  MX_TIM1_Init();
 8001336:	f000 f907 	bl	8001548 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	// Init lcd using one of the stm32HAL i2c typedefs
	if (ssd1306_Init(&hi2c1) != 0) {
 800133a:	4834      	ldr	r0, [pc, #208]	; (800140c <main+0x110>)
 800133c:	f000 faa4 	bl	8001888 <ssd1306_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <main+0x4e>
		Error_Handler();
 8001346:	f000 fa03 	bl	8001750 <Error_Handler>
//	writeToDisplay(msg);
	struct System system;

	DataHeaders headers;

	uint8_t data_frame_buffer[3] = {0};
 800134a:	4b31      	ldr	r3, [pc, #196]	; (8001410 <main+0x114>)
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	803b      	strh	r3, [r7, #0]
 8001350:	2300      	movs	r3, #0
 8001352:	70bb      	strb	r3, [r7, #2]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
			get_data_frame(data_frame_buffer, 3);
 8001354:	463b      	mov	r3, r7
 8001356:	2103      	movs	r1, #3
 8001358:	4618      	mov	r0, r3
 800135a:	f008 fa61 	bl	8009820 <get_data_frame>
			if(data_frame_buffer[0] != 0){
 800135e:	783b      	ldrb	r3, [r7, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0f7      	beq.n	8001354 <main+0x58>
				DataHeaders data_head = (DataHeaders) data_frame_buffer[0];
 8001364:	783b      	ldrb	r3, [r7, #0]
 8001366:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb

				switch (data_head) {
 800136a:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800136e:	3b02      	subs	r3, #2
 8001370:	2b0b      	cmp	r3, #11
 8001372:	d842      	bhi.n	80013fa <main+0xfe>
 8001374:	a201      	add	r2, pc, #4	; (adr r2, 800137c <main+0x80>)
 8001376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137a:	bf00      	nop
 800137c:	080013ad 	.word	0x080013ad
 8001380:	080013fb 	.word	0x080013fb
 8001384:	080013dd 	.word	0x080013dd
 8001388:	080013fb 	.word	0x080013fb
 800138c:	080013e3 	.word	0x080013e3
 8001390:	080013fb 	.word	0x080013fb
 8001394:	080013fb 	.word	0x080013fb
 8001398:	080013fb 	.word	0x080013fb
 800139c:	080013fb 	.word	0x080013fb
 80013a0:	080013fb 	.word	0x080013fb
 80013a4:	080013eb 	.word	0x080013eb
 80013a8:	080013f3 	.word	0x080013f3
				case CPU_UTIL: {
					system.cpu_util = data_frame_buffer[1];
 80013ac:	787b      	ldrb	r3, [r7, #1]
 80013ae:	723b      	strb	r3, [r7, #8]
					int leds = system.cpu_util/(9);
 80013b0:	7a3b      	ldrb	r3, [r7, #8]
 80013b2:	4a18      	ldr	r2, [pc, #96]	; (8001414 <main+0x118>)
 80013b4:	fba2 2303 	umull	r2, r3, r2, r3
 80013b8:	085b      	lsrs	r3, r3, #1
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
					if(leds < 1){
 80013c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	dc02      	bgt.n	80013ce <main+0xd2>
						leds = 1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
					}
					updateWheel(leds);
 80013ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff67 	bl	80012a8 <updateWheel>
					break;
 80013da:	e00f      	b.n	80013fc <main+0x100>
				}
				case CPU_TEMP: {
					system.cpu_temp = data_frame_buffer[1];
 80013dc:	787b      	ldrb	r3, [r7, #1]
 80013de:	72bb      	strb	r3, [r7, #10]
					break;
 80013e0:	e00c      	b.n	80013fc <main+0x100>
				}
				case RAM: {
					system.ram_util = data_frame_buffer[1];
 80013e2:	787b      	ldrb	r3, [r7, #1]
 80013e4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					break;
 80013e8:	e008      	b.n	80013fc <main+0x100>
				}
				case GPU_UTIL: {
					system.gpu_util = data_frame_buffer[1];
 80013ea:	787b      	ldrb	r3, [r7, #1]
 80013ec:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
					break;
 80013f0:	e004      	b.n	80013fc <main+0x100>
				}
				case GPU_TEMP: {
					system.gpu_temp = data_frame_buffer[1];
 80013f2:	787b      	ldrb	r3, [r7, #1]
 80013f4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
					break;
 80013f8:	e000      	b.n	80013fc <main+0x100>
				}
				default: {
					break;
 80013fa:	bf00      	nop
				}
				}

				updateDisplay(&system);
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fda8 	bl	8000f54 <updateDisplay>
			get_data_frame(data_frame_buffer, 3);
 8001404:	e7a6      	b.n	8001354 <main+0x58>
 8001406:	bf00      	nop
 8001408:	0800c494 	.word	0x0800c494
 800140c:	200008dc 	.word	0x200008dc
 8001410:	0800c4a0 	.word	0x0800c4a0
 8001414:	38e38e39 	.word	0x38e38e39

08001418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b094      	sub	sp, #80	; 0x50
 800141c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141e:	f107 0320 	add.w	r3, r7, #32
 8001422:	2230      	movs	r2, #48	; 0x30
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f008 fe86 	bl	800a138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800143c:	2300      	movs	r3, #0
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <SystemClock_Config+0xcc>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	4a27      	ldr	r2, [pc, #156]	; (80014e4 <SystemClock_Config+0xcc>)
 8001446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144a:	6413      	str	r3, [r2, #64]	; 0x40
 800144c:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <SystemClock_Config+0xcc>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <SystemClock_Config+0xd0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a21      	ldr	r2, [pc, #132]	; (80014e8 <SystemClock_Config+0xd0>)
 8001462:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <SystemClock_Config+0xd0>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001474:	2301      	movs	r3, #1
 8001476:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001478:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800147e:	2302      	movs	r3, #2
 8001480:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001482:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001486:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001488:	2319      	movs	r3, #25
 800148a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800148c:	23c0      	movs	r3, #192	; 0xc0
 800148e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001490:	2302      	movs	r3, #2
 8001492:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001494:	2304      	movs	r3, #4
 8001496:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001498:	f107 0320 	add.w	r3, r7, #32
 800149c:	4618      	mov	r0, r3
 800149e:	f003 fb3f 	bl	8004b20 <HAL_RCC_OscConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014a8:	f000 f952 	bl	8001750 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ac:	230f      	movs	r3, #15
 80014ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b0:	2302      	movs	r3, #2
 80014b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	2103      	movs	r1, #3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f003 fda0 	bl	8005010 <HAL_RCC_ClockConfig>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014d6:	f000 f93b 	bl	8001750 <Error_Handler>
  }
}
 80014da:	bf00      	nop
 80014dc:	3750      	adds	r7, #80	; 0x50
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40007000 	.word	0x40007000

080014ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <MX_I2C1_Init+0x50>)
 80014f2:	4a13      	ldr	r2, [pc, #76]	; (8001540 <MX_I2C1_Init+0x54>)
 80014f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_I2C1_Init+0x50>)
 80014f8:	4a12      	ldr	r2, [pc, #72]	; (8001544 <MX_I2C1_Init+0x58>)
 80014fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <MX_I2C1_Init+0x50>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_I2C1_Init+0x50>)
 8001504:	2200      	movs	r2, #0
 8001506:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <MX_I2C1_Init+0x50>)
 800150a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800150e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <MX_I2C1_Init+0x50>)
 8001512:	2200      	movs	r2, #0
 8001514:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <MX_I2C1_Init+0x50>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <MX_I2C1_Init+0x50>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <MX_I2C1_Init+0x50>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001528:	4804      	ldr	r0, [pc, #16]	; (800153c <MX_I2C1_Init+0x50>)
 800152a:	f001 fd1b 	bl	8002f64 <HAL_I2C_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001534:	f000 f90c 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200008dc 	.word	0x200008dc
 8001540:	40005400 	.word	0x40005400
 8001544:	00061a80 	.word	0x00061a80

08001548 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b096      	sub	sp, #88	; 0x58
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	611a      	str	r2, [r3, #16]
 8001576:	615a      	str	r2, [r3, #20]
 8001578:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2220      	movs	r2, #32
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f008 fdd9 	bl	800a138 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001586:	4b3e      	ldr	r3, [pc, #248]	; (8001680 <MX_TIM1_Init+0x138>)
 8001588:	4a3e      	ldr	r2, [pc, #248]	; (8001684 <MX_TIM1_Init+0x13c>)
 800158a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800158c:	4b3c      	ldr	r3, [pc, #240]	; (8001680 <MX_TIM1_Init+0x138>)
 800158e:	2200      	movs	r2, #0
 8001590:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001592:	4b3b      	ldr	r3, [pc, #236]	; (8001680 <MX_TIM1_Init+0x138>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 120-1;
 8001598:	4b39      	ldr	r3, [pc, #228]	; (8001680 <MX_TIM1_Init+0x138>)
 800159a:	2277      	movs	r2, #119	; 0x77
 800159c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159e:	4b38      	ldr	r3, [pc, #224]	; (8001680 <MX_TIM1_Init+0x138>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015a4:	4b36      	ldr	r3, [pc, #216]	; (8001680 <MX_TIM1_Init+0x138>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015aa:	4b35      	ldr	r3, [pc, #212]	; (8001680 <MX_TIM1_Init+0x138>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015b0:	4833      	ldr	r0, [pc, #204]	; (8001680 <MX_TIM1_Init+0x138>)
 80015b2:	f003 fee9 	bl	8005388 <HAL_TIM_Base_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80015bc:	f000 f8c8 	bl	8001750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015ca:	4619      	mov	r1, r3
 80015cc:	482c      	ldr	r0, [pc, #176]	; (8001680 <MX_TIM1_Init+0x138>)
 80015ce:	f004 fabb 	bl	8005b48 <HAL_TIM_ConfigClockSource>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80015d8:	f000 f8ba 	bl	8001750 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015dc:	4828      	ldr	r0, [pc, #160]	; (8001680 <MX_TIM1_Init+0x138>)
 80015de:	f003 ff22 	bl	8005426 <HAL_TIM_PWM_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80015e8:	f000 f8b2 	bl	8001750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ec:	2300      	movs	r3, #0
 80015ee:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015f8:	4619      	mov	r1, r3
 80015fa:	4821      	ldr	r0, [pc, #132]	; (8001680 <MX_TIM1_Init+0x138>)
 80015fc:	f004 ff1c 	bl	8006438 <HAL_TIMEx_MasterConfigSynchronization>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001606:	f000 f8a3 	bl	8001750 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800160a:	2360      	movs	r3, #96	; 0x60
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001612:	2300      	movs	r3, #0
 8001614:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001616:	2300      	movs	r3, #0
 8001618:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001622:	2300      	movs	r3, #0
 8001624:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162a:	2200      	movs	r2, #0
 800162c:	4619      	mov	r1, r3
 800162e:	4814      	ldr	r0, [pc, #80]	; (8001680 <MX_TIM1_Init+0x138>)
 8001630:	f004 f9c8 	bl	80059c4 <HAL_TIM_PWM_ConfigChannel>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800163a:	f000 f889 	bl	8001750 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001652:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001656:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	4619      	mov	r1, r3
 8001660:	4807      	ldr	r0, [pc, #28]	; (8001680 <MX_TIM1_Init+0x138>)
 8001662:	f004 ff57 	bl	8006514 <HAL_TIMEx_ConfigBreakDeadTime>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800166c:	f000 f870 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001670:	4803      	ldr	r0, [pc, #12]	; (8001680 <MX_TIM1_Init+0x138>)
 8001672:	f000 fc61 	bl	8001f38 <HAL_TIM_MspPostInit>

}
 8001676:	bf00      	nop
 8001678:	3758      	adds	r7, #88	; 0x58
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000c04 	.word	0x20000c04
 8001684:	40010000 	.word	0x40010000

08001688 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <MX_DMA_Init+0x3c>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <MX_DMA_Init+0x3c>)
 8001698:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <MX_DMA_Init+0x3c>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	2039      	movs	r0, #57	; 0x39
 80016b0:	f000 ff0b 	bl	80024ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80016b4:	2039      	movs	r0, #57	; 0x39
 80016b6:	f000 ff24 	bl	8002502 <HAL_NVIC_EnableIRQ>

}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800

080016c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b1e      	ldr	r3, [pc, #120]	; (800174c <MX_GPIO_Init+0x84>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a1d      	ldr	r2, [pc, #116]	; (800174c <MX_GPIO_Init+0x84>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b1b      	ldr	r3, [pc, #108]	; (800174c <MX_GPIO_Init+0x84>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <MX_GPIO_Init+0x84>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a16      	ldr	r2, [pc, #88]	; (800174c <MX_GPIO_Init+0x84>)
 80016f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <MX_GPIO_Init+0x84>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <MX_GPIO_Init+0x84>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a0f      	ldr	r2, [pc, #60]	; (800174c <MX_GPIO_Init+0x84>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <MX_GPIO_Init+0x84>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <MX_GPIO_Init+0x84>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a08      	ldr	r2, [pc, #32]	; (800174c <MX_GPIO_Init+0x84>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <MX_GPIO_Init+0x84>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	683b      	ldr	r3, [r7, #0]

}
 800173e:	bf00      	nop
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800

08001750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001754:	b672      	cpsid	i
}
 8001756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001758:	e7fe      	b.n	8001758 <Error_Handler+0x8>

0800175a <createQueue>:
struct Queue {
	struct QNode *front, *rear;
};

// A utility function to create an empty queue
struct Queue* createQueue() {
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
	struct Queue *q = (struct Queue*) malloc(sizeof(struct Queue));
 8001760:	2008      	movs	r0, #8
 8001762:	f008 fccb 	bl	800a0fc <malloc>
 8001766:	4603      	mov	r3, r0
 8001768:	607b      	str	r3, [r7, #4]
	q->front = q->rear = NULL;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	601a      	str	r2, [r3, #0]
	return q;
 8001778:	687b      	ldr	r3, [r7, #4]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <enQueue>:

// The function to add a key k to q
uint8_t* enQueue(struct Queue *q, uint8_t size) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	70fb      	strb	r3, [r7, #3]
	if (q) {
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d035      	beq.n	8001802 <enQueue+0x7e>
		struct QNode *temp = (struct QNode*) malloc(sizeof(struct QNode));
 8001796:	2008      	movs	r0, #8
 8001798:	f008 fcb0 	bl	800a0fc <malloc>
 800179c:	4603      	mov	r3, r0
 800179e:	60fb      	str	r3, [r7, #12]
		if(temp == NULL){
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d104      	bne.n	80017b0 <enQueue+0x2c>
			printf("\nHeap Overflow");
 80017a6:	4819      	ldr	r0, [pc, #100]	; (800180c <enQueue+0x88>)
 80017a8:	f008 fd78 	bl	800a29c <iprintf>
			return NULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	e029      	b.n	8001804 <enQueue+0x80>
		}
		uint8_t *data = (uint8_t*) malloc(size * sizeof(uint8_t));
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f008 fca2 	bl	800a0fc <malloc>
 80017b8:	4603      	mov	r3, r0
 80017ba:	60bb      	str	r3, [r7, #8]
		if(data == NULL){
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d104      	bne.n	80017cc <enQueue+0x48>
			printf("\nHeap Overflow");
 80017c2:	4812      	ldr	r0, [pc, #72]	; (800180c <enQueue+0x88>)
 80017c4:	f008 fd6a 	bl	800a29c <iprintf>
			return NULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	e01b      	b.n	8001804 <enQueue+0x80>
		}
		temp->data = data;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	601a      	str	r2, [r3, #0]
		temp->next = NULL;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	605a      	str	r2, [r3, #4]

		// If queue is empty, then new node is front and rear both
		if (q->rear == NULL) {
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d107      	bne.n	80017f0 <enQueue+0x6c>
			q->front = q->rear = temp;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	e006      	b.n	80017fe <enQueue+0x7a>
		} else {
			// Add the new node at the end of queue and change rear
			q->rear->next = temp;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	605a      	str	r2, [r3, #4]
			q->rear = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	605a      	str	r2, [r3, #4]

		}
		return data;
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	e000      	b.n	8001804 <enQueue+0x80>
	}else{
		return NULL;
 8001802:	2300      	movs	r3, #0
	}

}
 8001804:	4618      	mov	r0, r3
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	0800c4a4 	.word	0x0800c4a4

08001810 <deQueue>:

// Function to remove a key from given queue q
struct QNode* deQueue(struct Queue *q) {
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	if (q) {
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d016      	beq.n	800184c <deQueue+0x3c>
		// If queue is empty, return NULL.
		if (q->front == NULL){
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <deQueue+0x1a>
			return NULL;
 8001826:	2300      	movs	r3, #0
 8001828:	e011      	b.n	800184e <deQueue+0x3e>
		}

		// Store previous front and move front one node ahead
		struct QNode *temp = q->front;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	60fb      	str	r3, [r7, #12]

		q->front = q->front->next;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	601a      	str	r2, [r3, #0]

		// If front becomes NULL, then change rear also as NULL
		if (q->front == NULL){
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d102      	bne.n	8001848 <deQueue+0x38>
			q->rear = NULL;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	605a      	str	r2, [r3, #4]
		}
		return temp;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	e000      	b.n	800184e <deQueue+0x3e>
	}else{
		return NULL;
 800184c:	2300      	movs	r3, #0
	}

}
 800184e:	4618      	mov	r0, r3
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af04      	add	r7, sp, #16
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	460b      	mov	r3, r1
 8001864:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001866:	230a      	movs	r3, #10
 8001868:	9302      	str	r3, [sp, #8]
 800186a:	2301      	movs	r3, #1
 800186c:	9301      	str	r3, [sp, #4]
 800186e:	1cfb      	adds	r3, r7, #3
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	2301      	movs	r3, #1
 8001874:	2200      	movs	r2, #0
 8001876:	2178      	movs	r1, #120	; 0x78
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f001 fcb7 	bl	80031ec <HAL_I2C_Mem_Write>
 800187e:	4603      	mov	r3, r0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001890:	2064      	movs	r0, #100	; 0x64
 8001892:	f000 fd1b 	bl	80022cc <HAL_Delay>
    int status = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 800189a:	21ae      	movs	r1, #174	; 0xae
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ffdc 	bl	800185a <ssd1306_WriteCommand>
 80018a2:	4603      	mov	r3, r0
 80018a4:	461a      	mov	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4413      	add	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 80018ac:	2120      	movs	r1, #32
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ffd3 	bl	800185a <ssd1306_WriteCommand>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461a      	mov	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4413      	add	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80018be:	2110      	movs	r1, #16
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ffca 	bl	800185a <ssd1306_WriteCommand>
 80018c6:	4603      	mov	r3, r0
 80018c8:	461a      	mov	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4413      	add	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80018d0:	21b0      	movs	r1, #176	; 0xb0
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff ffc1 	bl	800185a <ssd1306_WriteCommand>
 80018d8:	4603      	mov	r3, r0
 80018da:	461a      	mov	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4413      	add	r3, r2
 80018e0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 80018e2:	21c8      	movs	r1, #200	; 0xc8
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff ffb8 	bl	800185a <ssd1306_WriteCommand>
 80018ea:	4603      	mov	r3, r0
 80018ec:	461a      	mov	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4413      	add	r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 80018f4:	2100      	movs	r1, #0
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffaf 	bl	800185a <ssd1306_WriteCommand>
 80018fc:	4603      	mov	r3, r0
 80018fe:	461a      	mov	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4413      	add	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8001906:	2110      	movs	r1, #16
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ffa6 	bl	800185a <ssd1306_WriteCommand>
 800190e:	4603      	mov	r3, r0
 8001910:	461a      	mov	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4413      	add	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001918:	2140      	movs	r1, #64	; 0x40
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff ff9d 	bl	800185a <ssd1306_WriteCommand>
 8001920:	4603      	mov	r3, r0
 8001922:	461a      	mov	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4413      	add	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 800192a:	2181      	movs	r1, #129	; 0x81
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ff94 	bl	800185a <ssd1306_WriteCommand>
 8001932:	4603      	mov	r3, r0
 8001934:	461a      	mov	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4413      	add	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 800193c:	21ff      	movs	r1, #255	; 0xff
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff ff8b 	bl	800185a <ssd1306_WriteCommand>
 8001944:	4603      	mov	r3, r0
 8001946:	461a      	mov	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4413      	add	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 800194e:	21a1      	movs	r1, #161	; 0xa1
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ff82 	bl	800185a <ssd1306_WriteCommand>
 8001956:	4603      	mov	r3, r0
 8001958:	461a      	mov	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4413      	add	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8001960:	21a6      	movs	r1, #166	; 0xa6
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ff79 	bl	800185a <ssd1306_WriteCommand>
 8001968:	4603      	mov	r3, r0
 800196a:	461a      	mov	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4413      	add	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8001972:	21a8      	movs	r1, #168	; 0xa8
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff ff70 	bl	800185a <ssd1306_WriteCommand>
 800197a:	4603      	mov	r3, r0
 800197c:	461a      	mov	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4413      	add	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8001984:	213f      	movs	r1, #63	; 0x3f
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ff67 	bl	800185a <ssd1306_WriteCommand>
 800198c:	4603      	mov	r3, r0
 800198e:	461a      	mov	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4413      	add	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001996:	21a4      	movs	r1, #164	; 0xa4
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff ff5e 	bl	800185a <ssd1306_WriteCommand>
 800199e:	4603      	mov	r3, r0
 80019a0:	461a      	mov	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4413      	add	r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 80019a8:	21d3      	movs	r1, #211	; 0xd3
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff ff55 	bl	800185a <ssd1306_WriteCommand>
 80019b0:	4603      	mov	r3, r0
 80019b2:	461a      	mov	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4413      	add	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 80019ba:	2100      	movs	r1, #0
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff4c 	bl	800185a <ssd1306_WriteCommand>
 80019c2:	4603      	mov	r3, r0
 80019c4:	461a      	mov	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4413      	add	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 80019cc:	21d5      	movs	r1, #213	; 0xd5
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ff43 	bl	800185a <ssd1306_WriteCommand>
 80019d4:	4603      	mov	r3, r0
 80019d6:	461a      	mov	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4413      	add	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 80019de:	21f0      	movs	r1, #240	; 0xf0
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff3a 	bl	800185a <ssd1306_WriteCommand>
 80019e6:	4603      	mov	r3, r0
 80019e8:	461a      	mov	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4413      	add	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 80019f0:	21d9      	movs	r1, #217	; 0xd9
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ff31 	bl	800185a <ssd1306_WriteCommand>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461a      	mov	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4413      	add	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8001a02:	2122      	movs	r1, #34	; 0x22
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ff28 	bl	800185a <ssd1306_WriteCommand>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4413      	add	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8001a14:	21da      	movs	r1, #218	; 0xda
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ff1f 	bl	800185a <ssd1306_WriteCommand>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	461a      	mov	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4413      	add	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8001a26:	2112      	movs	r1, #18
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ff16 	bl	800185a <ssd1306_WriteCommand>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	461a      	mov	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	4413      	add	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001a38:	21db      	movs	r1, #219	; 0xdb
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ff0d 	bl	800185a <ssd1306_WriteCommand>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4413      	add	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001a4a:	2120      	movs	r1, #32
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ff04 	bl	800185a <ssd1306_WriteCommand>
 8001a52:	4603      	mov	r3, r0
 8001a54:	461a      	mov	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4413      	add	r3, r2
 8001a5a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8001a5c:	218d      	movs	r1, #141	; 0x8d
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff fefb 	bl	800185a <ssd1306_WriteCommand>
 8001a64:	4603      	mov	r3, r0
 8001a66:	461a      	mov	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8001a6e:	2114      	movs	r1, #20
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff fef2 	bl	800185a <ssd1306_WriteCommand>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8001a80:	21af      	movs	r1, #175	; 0xaf
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff fee9 	bl	800185a <ssd1306_WriteCommand>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <ssd1306_Init+0x214>
        return 1;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e00f      	b.n	8001abc <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f000 f813 	bl	8001ac8 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f834 	bl	8001b10 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <ssd1306_Init+0x23c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001aae:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <ssd1306_Init+0x23c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <ssd1306_Init+0x23c>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	715a      	strb	r2, [r3, #5]

    return 0;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000614 	.word	0x20000614

08001ac8 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	e00d      	b.n	8001af4 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <ssd1306_Fill+0x1a>
 8001ade:	2100      	movs	r1, #0
 8001ae0:	e000      	b.n	8001ae4 <ssd1306_Fill+0x1c>
 8001ae2:	21ff      	movs	r1, #255	; 0xff
 8001ae4:	4a09      	ldr	r2, [pc, #36]	; (8001b0c <ssd1306_Fill+0x44>)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4413      	add	r3, r2
 8001aea:	460a      	mov	r2, r1
 8001aec:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	3301      	adds	r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001afa:	d3ed      	bcc.n	8001ad8 <ssd1306_Fill+0x10>
    }
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000214 	.word	0x20000214

08001b10 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af04      	add	r7, sp, #16
 8001b16:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8001b18:	2300      	movs	r3, #0
 8001b1a:	73fb      	strb	r3, [r7, #15]
 8001b1c:	e020      	b.n	8001b60 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	3b50      	subs	r3, #80	; 0x50
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	4619      	mov	r1, r3
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff fe97 	bl	800185a <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff fe93 	bl	800185a <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001b34:	2110      	movs	r1, #16
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff fe8f 	bl	800185a <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	01db      	lsls	r3, r3, #7
 8001b40:	4a0b      	ldr	r2, [pc, #44]	; (8001b70 <ssd1306_UpdateScreen+0x60>)
 8001b42:	4413      	add	r3, r2
 8001b44:	2264      	movs	r2, #100	; 0x64
 8001b46:	9202      	str	r2, [sp, #8]
 8001b48:	2280      	movs	r2, #128	; 0x80
 8001b4a:	9201      	str	r2, [sp, #4]
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	2301      	movs	r3, #1
 8001b50:	2240      	movs	r2, #64	; 0x40
 8001b52:	2178      	movs	r1, #120	; 0x78
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f001 fb49 	bl	80031ec <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	2b07      	cmp	r3, #7
 8001b64:	d9db      	bls.n	8001b1e <ssd1306_UpdateScreen+0xe>
    }
}
 8001b66:	bf00      	nop
 8001b68:	bf00      	nop
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000214 	.word	0x20000214

08001b74 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	71bb      	strb	r3, [r7, #6]
 8001b82:	4613      	mov	r3, r2
 8001b84:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	db48      	blt.n	8001c20 <ssd1306_DrawPixel+0xac>
 8001b8e:	79bb      	ldrb	r3, [r7, #6]
 8001b90:	2b3f      	cmp	r3, #63	; 0x3f
 8001b92:	d845      	bhi.n	8001c20 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8001b94:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <ssd1306_DrawPixel+0xb8>)
 8001b96:	791b      	ldrb	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d006      	beq.n	8001baa <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8001b9c:	797b      	ldrb	r3, [r7, #5]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	bf0c      	ite	eq
 8001ba2:	2301      	moveq	r3, #1
 8001ba4:	2300      	movne	r3, #0
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8001baa:	797b      	ldrb	r3, [r7, #5]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d11a      	bne.n	8001be6 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001bb0:	79fa      	ldrb	r2, [r7, #7]
 8001bb2:	79bb      	ldrb	r3, [r7, #6]
 8001bb4:	08db      	lsrs	r3, r3, #3
 8001bb6:	b2d8      	uxtb	r0, r3
 8001bb8:	4603      	mov	r3, r0
 8001bba:	01db      	lsls	r3, r3, #7
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4a1c      	ldr	r2, [pc, #112]	; (8001c30 <ssd1306_DrawPixel+0xbc>)
 8001bc0:	5cd3      	ldrb	r3, [r2, r3]
 8001bc2:	b25a      	sxtb	r2, r3
 8001bc4:	79bb      	ldrb	r3, [r7, #6]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	2101      	movs	r1, #1
 8001bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd0:	b25b      	sxtb	r3, r3
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	b259      	sxtb	r1, r3
 8001bd6:	79fa      	ldrb	r2, [r7, #7]
 8001bd8:	4603      	mov	r3, r0
 8001bda:	01db      	lsls	r3, r3, #7
 8001bdc:	4413      	add	r3, r2
 8001bde:	b2c9      	uxtb	r1, r1
 8001be0:	4a13      	ldr	r2, [pc, #76]	; (8001c30 <ssd1306_DrawPixel+0xbc>)
 8001be2:	54d1      	strb	r1, [r2, r3]
 8001be4:	e01d      	b.n	8001c22 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001be6:	79fa      	ldrb	r2, [r7, #7]
 8001be8:	79bb      	ldrb	r3, [r7, #6]
 8001bea:	08db      	lsrs	r3, r3, #3
 8001bec:	b2d8      	uxtb	r0, r3
 8001bee:	4603      	mov	r3, r0
 8001bf0:	01db      	lsls	r3, r3, #7
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a0e      	ldr	r2, [pc, #56]	; (8001c30 <ssd1306_DrawPixel+0xbc>)
 8001bf6:	5cd3      	ldrb	r3, [r2, r3]
 8001bf8:	b25a      	sxtb	r2, r3
 8001bfa:	79bb      	ldrb	r3, [r7, #6]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	2101      	movs	r1, #1
 8001c02:	fa01 f303 	lsl.w	r3, r1, r3
 8001c06:	b25b      	sxtb	r3, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	b25b      	sxtb	r3, r3
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	b259      	sxtb	r1, r3
 8001c10:	79fa      	ldrb	r2, [r7, #7]
 8001c12:	4603      	mov	r3, r0
 8001c14:	01db      	lsls	r3, r3, #7
 8001c16:	4413      	add	r3, r2
 8001c18:	b2c9      	uxtb	r1, r1
 8001c1a:	4a05      	ldr	r2, [pc, #20]	; (8001c30 <ssd1306_DrawPixel+0xbc>)
 8001c1c:	54d1      	strb	r1, [r2, r3]
 8001c1e:	e000      	b.n	8001c22 <ssd1306_DrawPixel+0xae>
        return;
 8001c20:	bf00      	nop
    }
}
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	20000614 	.word	0x20000614
 8001c30:	20000214 	.word	0x20000214

08001c34 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b089      	sub	sp, #36	; 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4604      	mov	r4, r0
 8001c3c:	1d38      	adds	r0, r7, #4
 8001c3e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001c42:	461a      	mov	r2, r3
 8001c44:	4623      	mov	r3, r4
 8001c46:	73fb      	strb	r3, [r7, #15]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001c4c:	4b38      	ldr	r3, [pc, #224]	; (8001d30 <ssd1306_WriteChar+0xfc>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	793b      	ldrb	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	2b7f      	cmp	r3, #127	; 0x7f
 8001c58:	dc06      	bgt.n	8001c68 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001c5a:	4b35      	ldr	r3, [pc, #212]	; (8001d30 <ssd1306_WriteChar+0xfc>)
 8001c5c:	885b      	ldrh	r3, [r3, #2]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	797b      	ldrb	r3, [r7, #5]
 8001c62:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001c64:	2b3f      	cmp	r3, #63	; 0x3f
 8001c66:	dd01      	ble.n	8001c6c <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e05d      	b.n	8001d28 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]
 8001c70:	e04c      	b.n	8001d0c <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	3b20      	subs	r3, #32
 8001c78:	7979      	ldrb	r1, [r7, #5]
 8001c7a:	fb01 f303 	mul.w	r3, r1, r3
 8001c7e:	4619      	mov	r1, r3
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	440b      	add	r3, r1
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4413      	add	r3, r2
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61bb      	str	r3, [r7, #24]
 8001c90:	e034      	b.n	8001cfc <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d012      	beq.n	8001cc8 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001ca2:	4b23      	ldr	r3, [pc, #140]	; (8001d30 <ssd1306_WriteChar+0xfc>)
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	4413      	add	r3, r2
 8001cae:	b2d8      	uxtb	r0, r3
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <ssd1306_WriteChar+0xfc>)
 8001cb2:	885b      	ldrh	r3, [r3, #2]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	4413      	add	r3, r2
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	7bba      	ldrb	r2, [r7, #14]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f7ff ff57 	bl	8001b74 <ssd1306_DrawPixel>
 8001cc6:	e016      	b.n	8001cf6 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001cc8:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <ssd1306_WriteChar+0xfc>)
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	b2d8      	uxtb	r0, r3
 8001cd6:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <ssd1306_WriteChar+0xfc>)
 8001cd8:	885b      	ldrh	r3, [r3, #2]
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	b2d9      	uxtb	r1, r3
 8001ce4:	7bbb      	ldrb	r3, [r7, #14]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	bf0c      	ite	eq
 8001cea:	2301      	moveq	r3, #1
 8001cec:	2300      	movne	r3, #0
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	f7ff ff3f 	bl	8001b74 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	61bb      	str	r3, [r7, #24]
 8001cfc:	793b      	ldrb	r3, [r7, #4]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d3c5      	bcc.n	8001c92 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	61fb      	str	r3, [r7, #28]
 8001d0c:	797b      	ldrb	r3, [r7, #5]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d3ad      	bcc.n	8001c72 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <ssd1306_WriteChar+0xfc>)
 8001d18:	881a      	ldrh	r2, [r3, #0]
 8001d1a:	793b      	ldrb	r3, [r7, #4]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	4413      	add	r3, r2
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <ssd1306_WriteChar+0xfc>)
 8001d24:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3724      	adds	r7, #36	; 0x24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd90      	pop	{r4, r7, pc}
 8001d30:	20000614 	.word	0x20000614

08001d34 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	1d38      	adds	r0, r7, #4
 8001d3e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001d42:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8001d44:	e012      	b.n	8001d6c <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	7818      	ldrb	r0, [r3, #0]
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	1d3a      	adds	r2, r7, #4
 8001d4e:	ca06      	ldmia	r2, {r1, r2}
 8001d50:	f7ff ff70 	bl	8001c34 <ssd1306_WriteChar>
 8001d54:	4603      	mov	r3, r0
 8001d56:	461a      	mov	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d002      	beq.n	8001d66 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	e008      	b.n	8001d78 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	60fb      	str	r3, [r7, #12]
    while (*str)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1e8      	bne.n	8001d46 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	781b      	ldrb	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	460a      	mov	r2, r1
 8001d8a:	71fb      	strb	r3, [r7, #7]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <ssd1306_SetCursor+0x2c>)
 8001d96:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001d98:	79bb      	ldrb	r3, [r7, #6]
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <ssd1306_SetCursor+0x2c>)
 8001d9e:	805a      	strh	r2, [r3, #2]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	20000614 	.word	0x20000614

08001db0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <HAL_MspInit+0x4c>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	4a0f      	ldr	r2, [pc, #60]	; (8001dfc <HAL_MspInit+0x4c>)
 8001dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc6:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <HAL_MspInit+0x4c>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	603b      	str	r3, [r7, #0]
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_MspInit+0x4c>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	4a08      	ldr	r2, [pc, #32]	; (8001dfc <HAL_MspInit+0x4c>)
 8001ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de0:	6413      	str	r3, [r2, #64]	; 0x40
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_MspInit+0x4c>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800

08001e00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	; 0x28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a19      	ldr	r2, [pc, #100]	; (8001e84 <HAL_I2C_MspInit+0x84>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d12c      	bne.n	8001e7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <HAL_I2C_MspInit+0x88>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a17      	ldr	r2, [pc, #92]	; (8001e88 <HAL_I2C_MspInit+0x88>)
 8001e2c:	f043 0302 	orr.w	r3, r3, #2
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <HAL_I2C_MspInit+0x88>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e44:	2312      	movs	r3, #18
 8001e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e50:	2304      	movs	r3, #4
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	4619      	mov	r1, r3
 8001e5a:	480c      	ldr	r0, [pc, #48]	; (8001e8c <HAL_I2C_MspInit+0x8c>)
 8001e5c:	f000 fefe 	bl	8002c5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <HAL_I2C_MspInit+0x88>)
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	4a07      	ldr	r2, [pc, #28]	; (8001e88 <HAL_I2C_MspInit+0x88>)
 8001e6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <HAL_I2C_MspInit+0x88>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e7c:	bf00      	nop
 8001e7e:	3728      	adds	r7, #40	; 0x28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40005400 	.word	0x40005400
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40020400 	.word	0x40020400

08001e90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a22      	ldr	r2, [pc, #136]	; (8001f28 <HAL_TIM_Base_MspInit+0x98>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d13d      	bne.n	8001f1e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <HAL_TIM_Base_MspInit+0x9c>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	4a20      	ldr	r2, [pc, #128]	; (8001f2c <HAL_TIM_Base_MspInit+0x9c>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb2:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <HAL_TIM_Base_MspInit+0x9c>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	; (8001f30 <HAL_TIM_Base_MspInit+0xa0>)
 8001ec0:	4a1c      	ldr	r2, [pc, #112]	; (8001f34 <HAL_TIM_Base_MspInit+0xa4>)
 8001ec2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001ec4:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <HAL_TIM_Base_MspInit+0xa0>)
 8001ec6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001eca:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ecc:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <HAL_TIM_Base_MspInit+0xa0>)
 8001ece:	2240      	movs	r2, #64	; 0x40
 8001ed0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <HAL_TIM_Base_MspInit+0xa0>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001ed8:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <HAL_TIM_Base_MspInit+0xa0>)
 8001eda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ede:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ee0:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <HAL_TIM_Base_MspInit+0xa0>)
 8001ee2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ee6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ee8:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_TIM_Base_MspInit+0xa0>)
 8001eea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eee:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <HAL_TIM_Base_MspInit+0xa0>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <HAL_TIM_Base_MspInit+0xa0>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <HAL_TIM_Base_MspInit+0xa0>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001f02:	480b      	ldr	r0, [pc, #44]	; (8001f30 <HAL_TIM_Base_MspInit+0xa0>)
 8001f04:	f000 fb18 	bl	8002538 <HAL_DMA_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001f0e:	f7ff fc1f 	bl	8001750 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a06      	ldr	r2, [pc, #24]	; (8001f30 <HAL_TIM_Base_MspInit+0xa0>)
 8001f16:	625a      	str	r2, [r3, #36]	; 0x24
 8001f18:	4a05      	ldr	r2, [pc, #20]	; (8001f30 <HAL_TIM_Base_MspInit+0xa0>)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40010000 	.word	0x40010000
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	2000084c 	.word	0x2000084c
 8001f34:	40026428 	.word	0x40026428

08001f38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <HAL_TIM_MspPostInit+0x68>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d11e      	bne.n	8001f98 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <HAL_TIM_MspPostInit+0x6c>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a10      	ldr	r2, [pc, #64]	; (8001fa4 <HAL_TIM_MspPostInit+0x6c>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <HAL_TIM_MspPostInit+0x6c>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8c:	f107 030c 	add.w	r3, r7, #12
 8001f90:	4619      	mov	r1, r3
 8001f92:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <HAL_TIM_MspPostInit+0x70>)
 8001f94:	f000 fe62 	bl	8002c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f98:	bf00      	nop
 8001f9a:	3720      	adds	r7, #32
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40010000 	.word	0x40010000
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40020000 	.word	0x40020000

08001fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <NMI_Handler+0x4>

08001fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb6:	e7fe      	b.n	8001fb6 <HardFault_Handler+0x4>

08001fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <MemManage_Handler+0x4>

08001fbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc2:	e7fe      	b.n	8001fc2 <BusFault_Handler+0x4>

08001fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <UsageFault_Handler+0x4>

08001fca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff8:	f000 f948 	bl	800228c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002004:	4802      	ldr	r0, [pc, #8]	; (8002010 <DMA2_Stream1_IRQHandler+0x10>)
 8002006:	f000 fbbf 	bl	8002788 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	2000084c 	.word	0x2000084c

08002014 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002018:	4802      	ldr	r0, [pc, #8]	; (8002024 <OTG_FS_IRQHandler+0x10>)
 800201a:	f001 fd4e 	bl	8003aba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	2000222c 	.word	0x2000222c

08002028 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	e00a      	b.n	8002050 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800203a:	f3af 8000 	nop.w
 800203e:	4601      	mov	r1, r0
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	60ba      	str	r2, [r7, #8]
 8002046:	b2ca      	uxtb	r2, r1
 8002048:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	3301      	adds	r3, #1
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	429a      	cmp	r2, r3
 8002056:	dbf0      	blt.n	800203a <_read+0x12>
	}

return len;
 8002058:	687b      	ldr	r3, [r7, #4]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b086      	sub	sp, #24
 8002066:	af00      	add	r7, sp, #0
 8002068:	60f8      	str	r0, [r7, #12]
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	e009      	b.n	8002088 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	60ba      	str	r2, [r7, #8]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	3301      	adds	r3, #1
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	429a      	cmp	r2, r3
 800208e:	dbf1      	blt.n	8002074 <_write+0x12>
	}
	return len;
 8002090:	687b      	ldr	r3, [r7, #4]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <_close>:

int _close(int file)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
	return -1;
 80020a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020c2:	605a      	str	r2, [r3, #4]
	return 0;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <_isatty>:

int _isatty(int file)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
	return 1;
 80020da:	2301      	movs	r3, #1
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
	return 0;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800210c:	4a14      	ldr	r2, [pc, #80]	; (8002160 <_sbrk+0x5c>)
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <_sbrk+0x60>)
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002118:	4b13      	ldr	r3, [pc, #76]	; (8002168 <_sbrk+0x64>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d102      	bne.n	8002126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002120:	4b11      	ldr	r3, [pc, #68]	; (8002168 <_sbrk+0x64>)
 8002122:	4a12      	ldr	r2, [pc, #72]	; (800216c <_sbrk+0x68>)
 8002124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <_sbrk+0x64>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	429a      	cmp	r2, r3
 8002132:	d207      	bcs.n	8002144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002134:	f007 ffb8 	bl	800a0a8 <__errno>
 8002138:	4603      	mov	r3, r0
 800213a:	220c      	movs	r2, #12
 800213c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800213e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002142:	e009      	b.n	8002158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002144:	4b08      	ldr	r3, [pc, #32]	; (8002168 <_sbrk+0x64>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214a:	4b07      	ldr	r3, [pc, #28]	; (8002168 <_sbrk+0x64>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	4a05      	ldr	r2, [pc, #20]	; (8002168 <_sbrk+0x64>)
 8002154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002156:	68fb      	ldr	r3, [r7, #12]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20020000 	.word	0x20020000
 8002164:	00000400 	.word	0x00000400
 8002168:	2000061c 	.word	0x2000061c
 800216c:	20002648 	.word	0x20002648

08002170 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <SystemInit+0x20>)
 8002176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217a:	4a05      	ldr	r2, [pc, #20]	; (8002190 <SystemInit+0x20>)
 800217c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002180:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002194:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002198:	480d      	ldr	r0, [pc, #52]	; (80021d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800219a:	490e      	ldr	r1, [pc, #56]	; (80021d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800219c:	4a0e      	ldr	r2, [pc, #56]	; (80021d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a0:	e002      	b.n	80021a8 <LoopCopyDataInit>

080021a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021a6:	3304      	adds	r3, #4

080021a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ac:	d3f9      	bcc.n	80021a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ae:	4a0b      	ldr	r2, [pc, #44]	; (80021dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021b0:	4c0b      	ldr	r4, [pc, #44]	; (80021e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b4:	e001      	b.n	80021ba <LoopFillZerobss>

080021b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b8:	3204      	adds	r2, #4

080021ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021bc:	d3fb      	bcc.n	80021b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021be:	f7ff ffd7 	bl	8002170 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021c2:	f007 ff77 	bl	800a0b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021c6:	f7ff f899 	bl	80012fc <main>
  bx  lr    
 80021ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d4:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80021d8:	0800dc68 	.word	0x0800dc68
  ldr r2, =_sbss
 80021dc:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80021e0:	20002644 	.word	0x20002644

080021e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021e4:	e7fe      	b.n	80021e4 <ADC_IRQHandler>
	...

080021e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021ec:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <HAL_Init+0x40>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a0d      	ldr	r2, [pc, #52]	; (8002228 <HAL_Init+0x40>)
 80021f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_Init+0x40>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <HAL_Init+0x40>)
 80021fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002202:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002204:	4b08      	ldr	r3, [pc, #32]	; (8002228 <HAL_Init+0x40>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a07      	ldr	r2, [pc, #28]	; (8002228 <HAL_Init+0x40>)
 800220a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800220e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002210:	2003      	movs	r0, #3
 8002212:	f000 f94f 	bl	80024b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002216:	200f      	movs	r0, #15
 8002218:	f000 f808 	bl	800222c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800221c:	f7ff fdc8 	bl	8001db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40023c00 	.word	0x40023c00

0800222c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002234:	4b12      	ldr	r3, [pc, #72]	; (8002280 <HAL_InitTick+0x54>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <HAL_InitTick+0x58>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	4619      	mov	r1, r3
 800223e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002242:	fbb3 f3f1 	udiv	r3, r3, r1
 8002246:	fbb2 f3f3 	udiv	r3, r2, r3
 800224a:	4618      	mov	r0, r3
 800224c:	f000 f967 	bl	800251e <HAL_SYSTICK_Config>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e00e      	b.n	8002278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b0f      	cmp	r3, #15
 800225e:	d80a      	bhi.n	8002276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002260:	2200      	movs	r2, #0
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002268:	f000 f92f 	bl	80024ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800226c:	4a06      	ldr	r2, [pc, #24]	; (8002288 <HAL_InitTick+0x5c>)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	e000      	b.n	8002278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20000010 	.word	0x20000010
 8002284:	20000018 	.word	0x20000018
 8002288:	20000014 	.word	0x20000014

0800228c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <HAL_IncTick+0x20>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_IncTick+0x24>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4413      	add	r3, r2
 800229c:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <HAL_IncTick+0x24>)
 800229e:	6013      	str	r3, [r2, #0]
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	20000018 	.word	0x20000018
 80022b0:	20000c4c 	.word	0x20000c4c

080022b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return uwTick;
 80022b8:	4b03      	ldr	r3, [pc, #12]	; (80022c8 <HAL_GetTick+0x14>)
 80022ba:	681b      	ldr	r3, [r3, #0]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	20000c4c 	.word	0x20000c4c

080022cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022d4:	f7ff ffee 	bl	80022b4 <HAL_GetTick>
 80022d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022e4:	d005      	beq.n	80022f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022e6:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <HAL_Delay+0x44>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4413      	add	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022f2:	bf00      	nop
 80022f4:	f7ff ffde 	bl	80022b4 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	429a      	cmp	r2, r3
 8002302:	d8f7      	bhi.n	80022f4 <HAL_Delay+0x28>
  {
  }
}
 8002304:	bf00      	nop
 8002306:	bf00      	nop
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000018 	.word	0x20000018

08002314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <__NVIC_SetPriorityGrouping+0x44>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002330:	4013      	ands	r3, r2
 8002332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800233c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002346:	4a04      	ldr	r2, [pc, #16]	; (8002358 <__NVIC_SetPriorityGrouping+0x44>)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	60d3      	str	r3, [r2, #12]
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <__NVIC_GetPriorityGrouping+0x18>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	0a1b      	lsrs	r3, r3, #8
 8002366:	f003 0307 	and.w	r3, r3, #7
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	2b00      	cmp	r3, #0
 8002388:	db0b      	blt.n	80023a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	f003 021f 	and.w	r2, r3, #31
 8002390:	4907      	ldr	r1, [pc, #28]	; (80023b0 <__NVIC_EnableIRQ+0x38>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	2001      	movs	r0, #1
 800239a:	fa00 f202 	lsl.w	r2, r0, r2
 800239e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	e000e100 	.word	0xe000e100

080023b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	6039      	str	r1, [r7, #0]
 80023be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	db0a      	blt.n	80023de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	490c      	ldr	r1, [pc, #48]	; (8002400 <__NVIC_SetPriority+0x4c>)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	0112      	lsls	r2, r2, #4
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	440b      	add	r3, r1
 80023d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023dc:	e00a      	b.n	80023f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4908      	ldr	r1, [pc, #32]	; (8002404 <__NVIC_SetPriority+0x50>)
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	3b04      	subs	r3, #4
 80023ec:	0112      	lsls	r2, r2, #4
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	440b      	add	r3, r1
 80023f2:	761a      	strb	r2, [r3, #24]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000e100 	.word	0xe000e100
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002408:	b480      	push	{r7}
 800240a:	b089      	sub	sp, #36	; 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f1c3 0307 	rsb	r3, r3, #7
 8002422:	2b04      	cmp	r3, #4
 8002424:	bf28      	it	cs
 8002426:	2304      	movcs	r3, #4
 8002428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3304      	adds	r3, #4
 800242e:	2b06      	cmp	r3, #6
 8002430:	d902      	bls.n	8002438 <NVIC_EncodePriority+0x30>
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3b03      	subs	r3, #3
 8002436:	e000      	b.n	800243a <NVIC_EncodePriority+0x32>
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800243c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43da      	mvns	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	401a      	ands	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002450:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fa01 f303 	lsl.w	r3, r1, r3
 800245a:	43d9      	mvns	r1, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	4313      	orrs	r3, r2
         );
}
 8002462:	4618      	mov	r0, r3
 8002464:	3724      	adds	r7, #36	; 0x24
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3b01      	subs	r3, #1
 800247c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002480:	d301      	bcc.n	8002486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002482:	2301      	movs	r3, #1
 8002484:	e00f      	b.n	80024a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002486:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <SysTick_Config+0x40>)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800248e:	210f      	movs	r1, #15
 8002490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002494:	f7ff ff8e 	bl	80023b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002498:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <SysTick_Config+0x40>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249e:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <SysTick_Config+0x40>)
 80024a0:	2207      	movs	r2, #7
 80024a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	e000e010 	.word	0xe000e010

080024b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff ff29 	bl	8002314 <__NVIC_SetPriorityGrouping>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b086      	sub	sp, #24
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	4603      	mov	r3, r0
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024dc:	f7ff ff3e 	bl	800235c <__NVIC_GetPriorityGrouping>
 80024e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	6978      	ldr	r0, [r7, #20]
 80024e8:	f7ff ff8e 	bl	8002408 <NVIC_EncodePriority>
 80024ec:	4602      	mov	r2, r0
 80024ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff5d 	bl	80023b4 <__NVIC_SetPriority>
}
 80024fa:	bf00      	nop
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	4603      	mov	r3, r0
 800250a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800250c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff31 	bl	8002378 <__NVIC_EnableIRQ>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff ffa2 	bl	8002470 <SysTick_Config>
 800252c:	4603      	mov	r3, r0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002544:	f7ff feb6 	bl	80022b4 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e099      	b.n	8002688 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0201 	bic.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002574:	e00f      	b.n	8002596 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002576:	f7ff fe9d 	bl	80022b4 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b05      	cmp	r3, #5
 8002582:	d908      	bls.n	8002596 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2220      	movs	r2, #32
 8002588:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2203      	movs	r2, #3
 800258e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e078      	b.n	8002688 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1e8      	bne.n	8002576 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	4b38      	ldr	r3, [pc, #224]	; (8002690 <HAL_DMA_Init+0x158>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d107      	bne.n	8002600 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	4313      	orrs	r3, r2
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f023 0307 	bic.w	r3, r3, #7
 8002616:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	4313      	orrs	r3, r2
 8002620:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	2b04      	cmp	r3, #4
 8002628:	d117      	bne.n	800265a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4313      	orrs	r3, r2
 8002632:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00e      	beq.n	800265a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 fa91 	bl	8002b64 <DMA_CheckFifoParam>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d008      	beq.n	800265a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2240      	movs	r2, #64	; 0x40
 800264c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002656:	2301      	movs	r3, #1
 8002658:	e016      	b.n	8002688 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fa48 	bl	8002af8 <DMA_CalcBaseAndBitshift>
 8002668:	4603      	mov	r3, r0
 800266a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002670:	223f      	movs	r2, #63	; 0x3f
 8002672:	409a      	lsls	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	f010803f 	.word	0xf010803f

08002694 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
 80026a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <HAL_DMA_Start_IT+0x26>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e040      	b.n	800273c <HAL_DMA_Start_IT+0xa8>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d12f      	bne.n	800272e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2202      	movs	r2, #2
 80026d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	68b9      	ldr	r1, [r7, #8]
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 f9da 	bl	8002a9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ec:	223f      	movs	r2, #63	; 0x3f
 80026ee:	409a      	lsls	r2, r3
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0216 	orr.w	r2, r2, #22
 8002702:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0208 	orr.w	r2, r2, #8
 800271a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	e005      	b.n	800273a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002736:	2302      	movs	r3, #2
 8002738:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800273a:	7dfb      	ldrb	r3, [r7, #23]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d004      	beq.n	8002762 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2280      	movs	r2, #128	; 0x80
 800275c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e00c      	b.n	800277c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2205      	movs	r2, #5
 8002766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0201 	bic.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002794:	4b92      	ldr	r3, [pc, #584]	; (80029e0 <HAL_DMA_IRQHandler+0x258>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a92      	ldr	r2, [pc, #584]	; (80029e4 <HAL_DMA_IRQHandler+0x25c>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	0a9b      	lsrs	r3, r3, #10
 80027a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b2:	2208      	movs	r2, #8
 80027b4:	409a      	lsls	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d01a      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d013      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0204 	bic.w	r2, r2, #4
 80027da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e0:	2208      	movs	r2, #8
 80027e2:	409a      	lsls	r2, r3
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ec:	f043 0201 	orr.w	r2, r3, #1
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f8:	2201      	movs	r2, #1
 80027fa:	409a      	lsls	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d012      	beq.n	800282a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00b      	beq.n	800282a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002816:	2201      	movs	r2, #1
 8002818:	409a      	lsls	r2, r3
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002822:	f043 0202 	orr.w	r2, r3, #2
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282e:	2204      	movs	r2, #4
 8002830:	409a      	lsls	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4013      	ands	r3, r2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d012      	beq.n	8002860 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00b      	beq.n	8002860 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284c:	2204      	movs	r2, #4
 800284e:	409a      	lsls	r2, r3
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002858:	f043 0204 	orr.w	r2, r3, #4
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002864:	2210      	movs	r2, #16
 8002866:	409a      	lsls	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d043      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d03c      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002882:	2210      	movs	r2, #16
 8002884:	409a      	lsls	r2, r3
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d018      	beq.n	80028ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d108      	bne.n	80028b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d024      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	4798      	blx	r3
 80028b6:	e01f      	b.n	80028f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d01b      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	4798      	blx	r3
 80028c8:	e016      	b.n	80028f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d107      	bne.n	80028e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0208 	bic.w	r2, r2, #8
 80028e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fc:	2220      	movs	r2, #32
 80028fe:	409a      	lsls	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4013      	ands	r3, r2
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 808e 	beq.w	8002a26 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 8086 	beq.w	8002a26 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291e:	2220      	movs	r2, #32
 8002920:	409a      	lsls	r2, r3
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b05      	cmp	r3, #5
 8002930:	d136      	bne.n	80029a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0216 	bic.w	r2, r2, #22
 8002940:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002950:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	d103      	bne.n	8002962 <HAL_DMA_IRQHandler+0x1da>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295e:	2b00      	cmp	r3, #0
 8002960:	d007      	beq.n	8002972 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0208 	bic.w	r2, r2, #8
 8002970:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002976:	223f      	movs	r2, #63	; 0x3f
 8002978:	409a      	lsls	r2, r3
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002992:	2b00      	cmp	r3, #0
 8002994:	d07d      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	4798      	blx	r3
        }
        return;
 800299e:	e078      	b.n	8002a92 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d01c      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d108      	bne.n	80029ce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d030      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	4798      	blx	r3
 80029cc:	e02b      	b.n	8002a26 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d027      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	4798      	blx	r3
 80029de:	e022      	b.n	8002a26 <HAL_DMA_IRQHandler+0x29e>
 80029e0:	20000010 	.word	0x20000010
 80029e4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10f      	bne.n	8002a16 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0210 	bic.w	r2, r2, #16
 8002a04:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d032      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d022      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2205      	movs	r2, #5
 8002a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0201 	bic.w	r2, r2, #1
 8002a50:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	3301      	adds	r3, #1
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d307      	bcc.n	8002a6e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1f2      	bne.n	8002a52 <HAL_DMA_IRQHandler+0x2ca>
 8002a6c:	e000      	b.n	8002a70 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002a6e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	4798      	blx	r3
 8002a90:	e000      	b.n	8002a94 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002a92:	bf00      	nop
    }
  }
}
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop

08002a9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ab8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b40      	cmp	r3, #64	; 0x40
 8002ac8:	d108      	bne.n	8002adc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ada:	e007      	b.n	8002aec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	60da      	str	r2, [r3, #12]
}
 8002aec:	bf00      	nop
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	3b10      	subs	r3, #16
 8002b08:	4a14      	ldr	r2, [pc, #80]	; (8002b5c <DMA_CalcBaseAndBitshift+0x64>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	091b      	lsrs	r3, r3, #4
 8002b10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b12:	4a13      	ldr	r2, [pc, #76]	; (8002b60 <DMA_CalcBaseAndBitshift+0x68>)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4413      	add	r3, r2
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d909      	bls.n	8002b3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b2e:	f023 0303 	bic.w	r3, r3, #3
 8002b32:	1d1a      	adds	r2, r3, #4
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	659a      	str	r2, [r3, #88]	; 0x58
 8002b38:	e007      	b.n	8002b4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b42:	f023 0303 	bic.w	r3, r3, #3
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	aaaaaaab 	.word	0xaaaaaaab
 8002b60:	0800d9dc 	.word	0x0800d9dc

08002b64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d11f      	bne.n	8002bbe <DMA_CheckFifoParam+0x5a>
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d856      	bhi.n	8002c32 <DMA_CheckFifoParam+0xce>
 8002b84:	a201      	add	r2, pc, #4	; (adr r2, 8002b8c <DMA_CheckFifoParam+0x28>)
 8002b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8a:	bf00      	nop
 8002b8c:	08002b9d 	.word	0x08002b9d
 8002b90:	08002baf 	.word	0x08002baf
 8002b94:	08002b9d 	.word	0x08002b9d
 8002b98:	08002c33 	.word	0x08002c33
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d046      	beq.n	8002c36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bac:	e043      	b.n	8002c36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bb6:	d140      	bne.n	8002c3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bbc:	e03d      	b.n	8002c3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bc6:	d121      	bne.n	8002c0c <DMA_CheckFifoParam+0xa8>
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d837      	bhi.n	8002c3e <DMA_CheckFifoParam+0xda>
 8002bce:	a201      	add	r2, pc, #4	; (adr r2, 8002bd4 <DMA_CheckFifoParam+0x70>)
 8002bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd4:	08002be5 	.word	0x08002be5
 8002bd8:	08002beb 	.word	0x08002beb
 8002bdc:	08002be5 	.word	0x08002be5
 8002be0:	08002bfd 	.word	0x08002bfd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
      break;
 8002be8:	e030      	b.n	8002c4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d025      	beq.n	8002c42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bfa:	e022      	b.n	8002c42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c04:	d11f      	bne.n	8002c46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c0a:	e01c      	b.n	8002c46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d903      	bls.n	8002c1a <DMA_CheckFifoParam+0xb6>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d003      	beq.n	8002c20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c18:	e018      	b.n	8002c4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c1e:	e015      	b.n	8002c4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00e      	beq.n	8002c4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c30:	e00b      	b.n	8002c4a <DMA_CheckFifoParam+0xe6>
      break;
 8002c32:	bf00      	nop
 8002c34:	e00a      	b.n	8002c4c <DMA_CheckFifoParam+0xe8>
      break;
 8002c36:	bf00      	nop
 8002c38:	e008      	b.n	8002c4c <DMA_CheckFifoParam+0xe8>
      break;
 8002c3a:	bf00      	nop
 8002c3c:	e006      	b.n	8002c4c <DMA_CheckFifoParam+0xe8>
      break;
 8002c3e:	bf00      	nop
 8002c40:	e004      	b.n	8002c4c <DMA_CheckFifoParam+0xe8>
      break;
 8002c42:	bf00      	nop
 8002c44:	e002      	b.n	8002c4c <DMA_CheckFifoParam+0xe8>
      break;   
 8002c46:	bf00      	nop
 8002c48:	e000      	b.n	8002c4c <DMA_CheckFifoParam+0xe8>
      break;
 8002c4a:	bf00      	nop
    }
  } 
  
  return status; 
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop

08002c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b089      	sub	sp, #36	; 0x24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	e159      	b.n	8002f2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c78:	2201      	movs	r2, #1
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	f040 8148 	bne.w	8002f26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d005      	beq.n	8002cae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d130      	bne.n	8002d10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	2203      	movs	r2, #3
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	091b      	lsrs	r3, r3, #4
 8002cfa:	f003 0201 	and.w	r2, r3, #1
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d017      	beq.n	8002d4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	2203      	movs	r2, #3
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d123      	bne.n	8002da0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	08da      	lsrs	r2, r3, #3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3208      	adds	r2, #8
 8002d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	220f      	movs	r2, #15
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	08da      	lsrs	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3208      	adds	r2, #8
 8002d9a:	69b9      	ldr	r1, [r7, #24]
 8002d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	2203      	movs	r2, #3
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0203 	and.w	r2, r3, #3
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 80a2 	beq.w	8002f26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	4b57      	ldr	r3, [pc, #348]	; (8002f44 <HAL_GPIO_Init+0x2e8>)
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	4a56      	ldr	r2, [pc, #344]	; (8002f44 <HAL_GPIO_Init+0x2e8>)
 8002dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df0:	6453      	str	r3, [r2, #68]	; 0x44
 8002df2:	4b54      	ldr	r3, [pc, #336]	; (8002f44 <HAL_GPIO_Init+0x2e8>)
 8002df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dfe:	4a52      	ldr	r2, [pc, #328]	; (8002f48 <HAL_GPIO_Init+0x2ec>)
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	089b      	lsrs	r3, r3, #2
 8002e04:	3302      	adds	r3, #2
 8002e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	220f      	movs	r2, #15
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a49      	ldr	r2, [pc, #292]	; (8002f4c <HAL_GPIO_Init+0x2f0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d019      	beq.n	8002e5e <HAL_GPIO_Init+0x202>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a48      	ldr	r2, [pc, #288]	; (8002f50 <HAL_GPIO_Init+0x2f4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d013      	beq.n	8002e5a <HAL_GPIO_Init+0x1fe>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a47      	ldr	r2, [pc, #284]	; (8002f54 <HAL_GPIO_Init+0x2f8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00d      	beq.n	8002e56 <HAL_GPIO_Init+0x1fa>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a46      	ldr	r2, [pc, #280]	; (8002f58 <HAL_GPIO_Init+0x2fc>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d007      	beq.n	8002e52 <HAL_GPIO_Init+0x1f6>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a45      	ldr	r2, [pc, #276]	; (8002f5c <HAL_GPIO_Init+0x300>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d101      	bne.n	8002e4e <HAL_GPIO_Init+0x1f2>
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	e008      	b.n	8002e60 <HAL_GPIO_Init+0x204>
 8002e4e:	2307      	movs	r3, #7
 8002e50:	e006      	b.n	8002e60 <HAL_GPIO_Init+0x204>
 8002e52:	2303      	movs	r3, #3
 8002e54:	e004      	b.n	8002e60 <HAL_GPIO_Init+0x204>
 8002e56:	2302      	movs	r3, #2
 8002e58:	e002      	b.n	8002e60 <HAL_GPIO_Init+0x204>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <HAL_GPIO_Init+0x204>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	69fa      	ldr	r2, [r7, #28]
 8002e62:	f002 0203 	and.w	r2, r2, #3
 8002e66:	0092      	lsls	r2, r2, #2
 8002e68:	4093      	lsls	r3, r2
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e70:	4935      	ldr	r1, [pc, #212]	; (8002f48 <HAL_GPIO_Init+0x2ec>)
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	089b      	lsrs	r3, r3, #2
 8002e76:	3302      	adds	r3, #2
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e7e:	4b38      	ldr	r3, [pc, #224]	; (8002f60 <HAL_GPIO_Init+0x304>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	43db      	mvns	r3, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ea2:	4a2f      	ldr	r2, [pc, #188]	; (8002f60 <HAL_GPIO_Init+0x304>)
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ea8:	4b2d      	ldr	r3, [pc, #180]	; (8002f60 <HAL_GPIO_Init+0x304>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ecc:	4a24      	ldr	r2, [pc, #144]	; (8002f60 <HAL_GPIO_Init+0x304>)
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ed2:	4b23      	ldr	r3, [pc, #140]	; (8002f60 <HAL_GPIO_Init+0x304>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	43db      	mvns	r3, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ef6:	4a1a      	ldr	r2, [pc, #104]	; (8002f60 <HAL_GPIO_Init+0x304>)
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002efc:	4b18      	ldr	r3, [pc, #96]	; (8002f60 <HAL_GPIO_Init+0x304>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	43db      	mvns	r3, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f20:	4a0f      	ldr	r2, [pc, #60]	; (8002f60 <HAL_GPIO_Init+0x304>)
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	61fb      	str	r3, [r7, #28]
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	2b0f      	cmp	r3, #15
 8002f30:	f67f aea2 	bls.w	8002c78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop
 8002f38:	3724      	adds	r7, #36	; 0x24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40013800 	.word	0x40013800
 8002f4c:	40020000 	.word	0x40020000
 8002f50:	40020400 	.word	0x40020400
 8002f54:	40020800 	.word	0x40020800
 8002f58:	40020c00 	.word	0x40020c00
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	40013c00 	.word	0x40013c00

08002f64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e12b      	b.n	80031ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d106      	bne.n	8002f90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7fe ff38 	bl	8001e00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2224      	movs	r2, #36	; 0x24
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0201 	bic.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fc8:	f002 f9ca 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 8002fcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	4a81      	ldr	r2, [pc, #516]	; (80031d8 <HAL_I2C_Init+0x274>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d807      	bhi.n	8002fe8 <HAL_I2C_Init+0x84>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4a80      	ldr	r2, [pc, #512]	; (80031dc <HAL_I2C_Init+0x278>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	bf94      	ite	ls
 8002fe0:	2301      	movls	r3, #1
 8002fe2:	2300      	movhi	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	e006      	b.n	8002ff6 <HAL_I2C_Init+0x92>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4a7d      	ldr	r2, [pc, #500]	; (80031e0 <HAL_I2C_Init+0x27c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	bf94      	ite	ls
 8002ff0:	2301      	movls	r3, #1
 8002ff2:	2300      	movhi	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e0e7      	b.n	80031ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4a78      	ldr	r2, [pc, #480]	; (80031e4 <HAL_I2C_Init+0x280>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	0c9b      	lsrs	r3, r3, #18
 8003008:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	430a      	orrs	r2, r1
 800301c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	4a6a      	ldr	r2, [pc, #424]	; (80031d8 <HAL_I2C_Init+0x274>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d802      	bhi.n	8003038 <HAL_I2C_Init+0xd4>
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	3301      	adds	r3, #1
 8003036:	e009      	b.n	800304c <HAL_I2C_Init+0xe8>
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800303e:	fb02 f303 	mul.w	r3, r2, r3
 8003042:	4a69      	ldr	r2, [pc, #420]	; (80031e8 <HAL_I2C_Init+0x284>)
 8003044:	fba2 2303 	umull	r2, r3, r2, r3
 8003048:	099b      	lsrs	r3, r3, #6
 800304a:	3301      	adds	r3, #1
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	430b      	orrs	r3, r1
 8003052:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800305e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	495c      	ldr	r1, [pc, #368]	; (80031d8 <HAL_I2C_Init+0x274>)
 8003068:	428b      	cmp	r3, r1
 800306a:	d819      	bhi.n	80030a0 <HAL_I2C_Init+0x13c>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	1e59      	subs	r1, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	fbb1 f3f3 	udiv	r3, r1, r3
 800307a:	1c59      	adds	r1, r3, #1
 800307c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003080:	400b      	ands	r3, r1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <HAL_I2C_Init+0x138>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1e59      	subs	r1, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	fbb1 f3f3 	udiv	r3, r1, r3
 8003094:	3301      	adds	r3, #1
 8003096:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800309a:	e051      	b.n	8003140 <HAL_I2C_Init+0x1dc>
 800309c:	2304      	movs	r3, #4
 800309e:	e04f      	b.n	8003140 <HAL_I2C_Init+0x1dc>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d111      	bne.n	80030cc <HAL_I2C_Init+0x168>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	1e58      	subs	r0, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6859      	ldr	r1, [r3, #4]
 80030b0:	460b      	mov	r3, r1
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	440b      	add	r3, r1
 80030b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ba:	3301      	adds	r3, #1
 80030bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	bf0c      	ite	eq
 80030c4:	2301      	moveq	r3, #1
 80030c6:	2300      	movne	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	e012      	b.n	80030f2 <HAL_I2C_Init+0x18e>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	1e58      	subs	r0, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6859      	ldr	r1, [r3, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	0099      	lsls	r1, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e2:	3301      	adds	r3, #1
 80030e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	bf0c      	ite	eq
 80030ec:	2301      	moveq	r3, #1
 80030ee:	2300      	movne	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_I2C_Init+0x196>
 80030f6:	2301      	movs	r3, #1
 80030f8:	e022      	b.n	8003140 <HAL_I2C_Init+0x1dc>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10e      	bne.n	8003120 <HAL_I2C_Init+0x1bc>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	1e58      	subs	r0, r3, #1
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6859      	ldr	r1, [r3, #4]
 800310a:	460b      	mov	r3, r1
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	440b      	add	r3, r1
 8003110:	fbb0 f3f3 	udiv	r3, r0, r3
 8003114:	3301      	adds	r3, #1
 8003116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800311e:	e00f      	b.n	8003140 <HAL_I2C_Init+0x1dc>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	1e58      	subs	r0, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6859      	ldr	r1, [r3, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	0099      	lsls	r1, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	fbb0 f3f3 	udiv	r3, r0, r3
 8003136:	3301      	adds	r3, #1
 8003138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800313c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	6809      	ldr	r1, [r1, #0]
 8003144:	4313      	orrs	r3, r2
 8003146:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69da      	ldr	r2, [r3, #28]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800316e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6911      	ldr	r1, [r2, #16]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	68d2      	ldr	r2, [r2, #12]
 800317a:	4311      	orrs	r1, r2
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6812      	ldr	r2, [r2, #0]
 8003180:	430b      	orrs	r3, r1
 8003182:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695a      	ldr	r2, [r3, #20]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0201 	orr.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	000186a0 	.word	0x000186a0
 80031dc:	001e847f 	.word	0x001e847f
 80031e0:	003d08ff 	.word	0x003d08ff
 80031e4:	431bde83 	.word	0x431bde83
 80031e8:	10624dd3 	.word	0x10624dd3

080031ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	4608      	mov	r0, r1
 80031f6:	4611      	mov	r1, r2
 80031f8:	461a      	mov	r2, r3
 80031fa:	4603      	mov	r3, r0
 80031fc:	817b      	strh	r3, [r7, #10]
 80031fe:	460b      	mov	r3, r1
 8003200:	813b      	strh	r3, [r7, #8]
 8003202:	4613      	mov	r3, r2
 8003204:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003206:	f7ff f855 	bl	80022b4 <HAL_GetTick>
 800320a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b20      	cmp	r3, #32
 8003216:	f040 80d9 	bne.w	80033cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	2319      	movs	r3, #25
 8003220:	2201      	movs	r2, #1
 8003222:	496d      	ldr	r1, [pc, #436]	; (80033d8 <HAL_I2C_Mem_Write+0x1ec>)
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 f971 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003230:	2302      	movs	r3, #2
 8003232:	e0cc      	b.n	80033ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <HAL_I2C_Mem_Write+0x56>
 800323e:	2302      	movs	r3, #2
 8003240:	e0c5      	b.n	80033ce <HAL_I2C_Mem_Write+0x1e2>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b01      	cmp	r3, #1
 8003256:	d007      	beq.n	8003268 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003276:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2221      	movs	r2, #33	; 0x21
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2240      	movs	r2, #64	; 0x40
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a3a      	ldr	r2, [r7, #32]
 8003292:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003298:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4a4d      	ldr	r2, [pc, #308]	; (80033dc <HAL_I2C_Mem_Write+0x1f0>)
 80032a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032aa:	88f8      	ldrh	r0, [r7, #6]
 80032ac:	893a      	ldrh	r2, [r7, #8]
 80032ae:	8979      	ldrh	r1, [r7, #10]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	9301      	str	r3, [sp, #4]
 80032b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	4603      	mov	r3, r0
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f890 	bl	80033e0 <I2C_RequestMemoryWrite>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d052      	beq.n	800336c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e081      	b.n	80033ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 f9f2 	bl	80036b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00d      	beq.n	80032f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d107      	bne.n	80032f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e06b      	b.n	80033ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	781a      	ldrb	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b04      	cmp	r3, #4
 8003332:	d11b      	bne.n	800336c <HAL_I2C_Mem_Write+0x180>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003338:	2b00      	cmp	r3, #0
 800333a:	d017      	beq.n	800336c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	781a      	ldrb	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1aa      	bne.n	80032ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 f9de 	bl	800373a <I2C_WaitOnBTFFlagUntilTimeout>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00d      	beq.n	80033a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	2b04      	cmp	r3, #4
 800338a:	d107      	bne.n	800339c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800339a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e016      	b.n	80033ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	e000      	b.n	80033ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80033cc:	2302      	movs	r3, #2
  }
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	00100002 	.word	0x00100002
 80033dc:	ffff0000 	.word	0xffff0000

080033e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af02      	add	r7, sp, #8
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	4608      	mov	r0, r1
 80033ea:	4611      	mov	r1, r2
 80033ec:	461a      	mov	r2, r3
 80033ee:	4603      	mov	r3, r0
 80033f0:	817b      	strh	r3, [r7, #10]
 80033f2:	460b      	mov	r3, r1
 80033f4:	813b      	strh	r3, [r7, #8]
 80033f6:	4613      	mov	r3, r2
 80033f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003408:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	2200      	movs	r2, #0
 8003412:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f878 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00d      	beq.n	800343e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003430:	d103      	bne.n	800343a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003438:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e05f      	b.n	80034fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800343e:	897b      	ldrh	r3, [r7, #10]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	461a      	mov	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800344c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	6a3a      	ldr	r2, [r7, #32]
 8003452:	492d      	ldr	r1, [pc, #180]	; (8003508 <I2C_RequestMemoryWrite+0x128>)
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f8b0 	bl	80035ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e04c      	b.n	80034fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800347a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347c:	6a39      	ldr	r1, [r7, #32]
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 f91a 	bl	80036b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00d      	beq.n	80034a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	2b04      	cmp	r3, #4
 8003490:	d107      	bne.n	80034a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e02b      	b.n	80034fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034a6:	88fb      	ldrh	r3, [r7, #6]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d105      	bne.n	80034b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034ac:	893b      	ldrh	r3, [r7, #8]
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	611a      	str	r2, [r3, #16]
 80034b6:	e021      	b.n	80034fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034b8:	893b      	ldrh	r3, [r7, #8]
 80034ba:	0a1b      	lsrs	r3, r3, #8
 80034bc:	b29b      	uxth	r3, r3
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c8:	6a39      	ldr	r1, [r7, #32]
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 f8f4 	bl	80036b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00d      	beq.n	80034f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d107      	bne.n	80034ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e005      	b.n	80034fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034f2:	893b      	ldrh	r3, [r7, #8]
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	00010002 	.word	0x00010002

0800350c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	4613      	mov	r3, r2
 800351a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800351c:	e025      	b.n	800356a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003524:	d021      	beq.n	800356a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003526:	f7fe fec5 	bl	80022b4 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d302      	bcc.n	800353c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d116      	bne.n	800356a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	f043 0220 	orr.w	r2, r3, #32
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e023      	b.n	80035b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	0c1b      	lsrs	r3, r3, #16
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b01      	cmp	r3, #1
 8003572:	d10d      	bne.n	8003590 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	43da      	mvns	r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4013      	ands	r3, r2
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	bf0c      	ite	eq
 8003586:	2301      	moveq	r3, #1
 8003588:	2300      	movne	r3, #0
 800358a:	b2db      	uxtb	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	e00c      	b.n	80035aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	43da      	mvns	r2, r3
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4013      	ands	r3, r2
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	bf0c      	ite	eq
 80035a2:	2301      	moveq	r3, #1
 80035a4:	2300      	movne	r3, #0
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	461a      	mov	r2, r3
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d0b6      	beq.n	800351e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b084      	sub	sp, #16
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035c8:	e051      	b.n	800366e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d8:	d123      	bne.n	8003622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	f043 0204 	orr.w	r2, r3, #4
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e046      	b.n	80036b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003628:	d021      	beq.n	800366e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362a:	f7fe fe43 	bl	80022b4 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	429a      	cmp	r2, r3
 8003638:	d302      	bcc.n	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d116      	bne.n	800366e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f043 0220 	orr.w	r2, r3, #32
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e020      	b.n	80036b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	0c1b      	lsrs	r3, r3, #16
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b01      	cmp	r3, #1
 8003676:	d10c      	bne.n	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	43da      	mvns	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	4013      	ands	r3, r2
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	bf14      	ite	ne
 800368a:	2301      	movne	r3, #1
 800368c:	2300      	moveq	r3, #0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	e00b      	b.n	80036aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	43da      	mvns	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	4013      	ands	r3, r2
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	bf14      	ite	ne
 80036a4:	2301      	movne	r3, #1
 80036a6:	2300      	moveq	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d18d      	bne.n	80035ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036c4:	e02d      	b.n	8003722 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f878 	bl	80037bc <I2C_IsAcknowledgeFailed>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e02d      	b.n	8003732 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036dc:	d021      	beq.n	8003722 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036de:	f7fe fde9 	bl	80022b4 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d302      	bcc.n	80036f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d116      	bne.n	8003722 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f043 0220 	orr.w	r2, r3, #32
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e007      	b.n	8003732 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372c:	2b80      	cmp	r3, #128	; 0x80
 800372e:	d1ca      	bne.n	80036c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b084      	sub	sp, #16
 800373e:	af00      	add	r7, sp, #0
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003746:	e02d      	b.n	80037a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 f837 	bl	80037bc <I2C_IsAcknowledgeFailed>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e02d      	b.n	80037b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800375e:	d021      	beq.n	80037a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003760:	f7fe fda8 	bl	80022b4 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	429a      	cmp	r2, r3
 800376e:	d302      	bcc.n	8003776 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d116      	bne.n	80037a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	f043 0220 	orr.w	r2, r3, #32
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e007      	b.n	80037b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d1ca      	bne.n	8003748 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d2:	d11b      	bne.n	800380c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	f043 0204 	orr.w	r2, r3, #4
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e000      	b.n	800380e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800381a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800381c:	b08f      	sub	sp, #60	; 0x3c
 800381e:	af0a      	add	r7, sp, #40	; 0x28
 8003820:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e10f      	b.n	8003a4c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f006 f924 	bl	8009a94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2203      	movs	r2, #3
 8003850:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385c:	2b00      	cmp	r3, #0
 800385e:	d102      	bne.n	8003866 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f002 ffb9 	bl	80067e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	687e      	ldr	r6, [r7, #4]
 8003878:	466d      	mov	r5, sp
 800387a:	f106 0410 	add.w	r4, r6, #16
 800387e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003880:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003886:	e894 0003 	ldmia.w	r4, {r0, r1}
 800388a:	e885 0003 	stmia.w	r5, {r0, r1}
 800388e:	1d33      	adds	r3, r6, #4
 8003890:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003892:	6838      	ldr	r0, [r7, #0]
 8003894:	f002 fe90 	bl	80065b8 <USB_CoreInit>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d005      	beq.n	80038aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2202      	movs	r2, #2
 80038a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e0d0      	b.n	8003a4c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2100      	movs	r1, #0
 80038b0:	4618      	mov	r0, r3
 80038b2:	f002 ffa7 	bl	8006804 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038b6:	2300      	movs	r3, #0
 80038b8:	73fb      	strb	r3, [r7, #15]
 80038ba:	e04a      	b.n	8003952 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038bc:	7bfa      	ldrb	r2, [r7, #15]
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	1a9b      	subs	r3, r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	333d      	adds	r3, #61	; 0x3d
 80038cc:	2201      	movs	r2, #1
 80038ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038d0:	7bfa      	ldrb	r2, [r7, #15]
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	4613      	mov	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	1a9b      	subs	r3, r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	333c      	adds	r3, #60	; 0x3c
 80038e0:	7bfa      	ldrb	r2, [r7, #15]
 80038e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038e4:	7bfa      	ldrb	r2, [r7, #15]
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	b298      	uxth	r0, r3
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	1a9b      	subs	r3, r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	3342      	adds	r3, #66	; 0x42
 80038f8:	4602      	mov	r2, r0
 80038fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038fc:	7bfa      	ldrb	r2, [r7, #15]
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	333f      	adds	r3, #63	; 0x3f
 800390c:	2200      	movs	r2, #0
 800390e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003910:	7bfa      	ldrb	r2, [r7, #15]
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	4613      	mov	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	1a9b      	subs	r3, r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	3344      	adds	r3, #68	; 0x44
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003924:	7bfa      	ldrb	r2, [r7, #15]
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	4613      	mov	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	1a9b      	subs	r3, r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	3348      	adds	r3, #72	; 0x48
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003938:	7bfa      	ldrb	r2, [r7, #15]
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	3350      	adds	r3, #80	; 0x50
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800394c:	7bfb      	ldrb	r3, [r7, #15]
 800394e:	3301      	adds	r3, #1
 8003950:	73fb      	strb	r3, [r7, #15]
 8003952:	7bfa      	ldrb	r2, [r7, #15]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	429a      	cmp	r2, r3
 800395a:	d3af      	bcc.n	80038bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800395c:	2300      	movs	r3, #0
 800395e:	73fb      	strb	r3, [r7, #15]
 8003960:	e044      	b.n	80039ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003962:	7bfa      	ldrb	r2, [r7, #15]
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	1a9b      	subs	r3, r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003974:	2200      	movs	r2, #0
 8003976:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003978:	7bfa      	ldrb	r2, [r7, #15]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800398a:	7bfa      	ldrb	r2, [r7, #15]
 800398c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800398e:	7bfa      	ldrb	r2, [r7, #15]
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	1a9b      	subs	r3, r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	440b      	add	r3, r1
 800399c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039a4:	7bfa      	ldrb	r2, [r7, #15]
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	4613      	mov	r3, r2
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	1a9b      	subs	r3, r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039ba:	7bfa      	ldrb	r2, [r7, #15]
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4613      	mov	r3, r2
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	1a9b      	subs	r3, r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	440b      	add	r3, r1
 80039c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039d0:	7bfa      	ldrb	r2, [r7, #15]
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	4613      	mov	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	1a9b      	subs	r3, r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039e6:	7bfb      	ldrb	r3, [r7, #15]
 80039e8:	3301      	adds	r3, #1
 80039ea:	73fb      	strb	r3, [r7, #15]
 80039ec:	7bfa      	ldrb	r2, [r7, #15]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d3b5      	bcc.n	8003962 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	603b      	str	r3, [r7, #0]
 80039fc:	687e      	ldr	r6, [r7, #4]
 80039fe:	466d      	mov	r5, sp
 8003a00:	f106 0410 	add.w	r4, r6, #16
 8003a04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a10:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a14:	1d33      	adds	r3, r6, #4
 8003a16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a18:	6838      	ldr	r0, [r7, #0]
 8003a1a:	f002 ff3f 	bl	800689c <USB_DevInit>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e00d      	b.n	8003a4c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f003 ffbb 	bl	80079c0 <USB_DevDisconnect>

  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a54 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_PCD_Start+0x1c>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e020      	b.n	8003ab2 <HAL_PCD_Start+0x5e>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d109      	bne.n	8003a94 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d005      	beq.n	8003a94 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f002 fe91 	bl	80067c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f003 ff6b 	bl	800797e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003aba:	b590      	push	{r4, r7, lr}
 8003abc:	b08d      	sub	sp, #52	; 0x34
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f004 f829 	bl	8007b28 <USB_GetMode>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f040 839d 	bne.w	8004218 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f003 ff8d 	bl	8007a02 <USB_ReadInterrupts>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 8393 	beq.w	8004216 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f003 ff84 	bl	8007a02 <USB_ReadInterrupts>
 8003afa:	4603      	mov	r3, r0
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d107      	bne.n	8003b14 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695a      	ldr	r2, [r3, #20]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f002 0202 	and.w	r2, r2, #2
 8003b12:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f003 ff72 	bl	8007a02 <USB_ReadInterrupts>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f003 0310 	and.w	r3, r3, #16
 8003b24:	2b10      	cmp	r3, #16
 8003b26:	d161      	bne.n	8003bec <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699a      	ldr	r2, [r3, #24]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0210 	bic.w	r2, r2, #16
 8003b36:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	f003 020f 	and.w	r2, r3, #15
 8003b44:	4613      	mov	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	1a9b      	subs	r3, r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	4413      	add	r3, r2
 8003b54:	3304      	adds	r3, #4
 8003b56:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	0c5b      	lsrs	r3, r3, #17
 8003b5c:	f003 030f 	and.w	r3, r3, #15
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d124      	bne.n	8003bae <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d035      	beq.n	8003bdc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	091b      	lsrs	r3, r3, #4
 8003b78:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	461a      	mov	r2, r3
 8003b82:	6a38      	ldr	r0, [r7, #32]
 8003b84:	f003 fda9 	bl	80076da <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	091b      	lsrs	r3, r3, #4
 8003b90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b94:	441a      	add	r2, r3
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	699a      	ldr	r2, [r3, #24]
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	091b      	lsrs	r3, r3, #4
 8003ba2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ba6:	441a      	add	r2, r3
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	619a      	str	r2, [r3, #24]
 8003bac:	e016      	b.n	8003bdc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	0c5b      	lsrs	r3, r3, #17
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	2b06      	cmp	r3, #6
 8003bb8:	d110      	bne.n	8003bdc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003bc0:	2208      	movs	r2, #8
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	6a38      	ldr	r0, [r7, #32]
 8003bc6:	f003 fd88 	bl	80076da <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	699a      	ldr	r2, [r3, #24]
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	091b      	lsrs	r3, r3, #4
 8003bd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bd6:	441a      	add	r2, r3
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0210 	orr.w	r2, r2, #16
 8003bea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f003 ff06 	bl	8007a02 <USB_ReadInterrupts>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bfc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c00:	d16e      	bne.n	8003ce0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f003 ff0c 	bl	8007a28 <USB_ReadDevAllOutEpInterrupt>
 8003c10:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003c12:	e062      	b.n	8003cda <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d057      	beq.n	8003cce <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	4611      	mov	r1, r2
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f003 ff31 	bl	8007a90 <USB_ReadDevOutEPInterrupt>
 8003c2e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00c      	beq.n	8003c54 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c46:	461a      	mov	r2, r3
 8003c48:	2301      	movs	r3, #1
 8003c4a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003c4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fdb0 	bl	80047b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00c      	beq.n	8003c78 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	2308      	movs	r3, #8
 8003c6e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003c70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 feaa 	bl	80049cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	f003 0310 	and.w	r3, r3, #16
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d008      	beq.n	8003c94 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	015a      	lsls	r2, r3, #5
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8e:	461a      	mov	r2, r3
 8003c90:	2310      	movs	r3, #16
 8003c92:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	f003 0320 	and.w	r3, r3, #32
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d008      	beq.n	8003cb0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003caa:	461a      	mov	r2, r3
 8003cac:	2320      	movs	r3, #32
 8003cae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d009      	beq.n	8003cce <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ccc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd6:	085b      	lsrs	r3, r3, #1
 8003cd8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d199      	bne.n	8003c14 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f003 fe8c 	bl	8007a02 <USB_ReadInterrupts>
 8003cea:	4603      	mov	r3, r0
 8003cec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cf0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cf4:	f040 80c0 	bne.w	8003e78 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f003 fead 	bl	8007a5c <USB_ReadDevAllInEpInterrupt>
 8003d02:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003d08:	e0b2      	b.n	8003e70 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 80a7 	beq.w	8003e64 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1c:	b2d2      	uxtb	r2, r2
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f003 fed3 	bl	8007acc <USB_ReadDevInEPInterrupt>
 8003d26:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d057      	beq.n	8003de2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	f003 030f 	and.w	r3, r3, #15
 8003d38:	2201      	movs	r2, #1
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	69f9      	ldr	r1, [r7, #28]
 8003d4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d52:	4013      	ands	r3, r2
 8003d54:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d62:	461a      	mov	r2, r3
 8003d64:	2301      	movs	r3, #1
 8003d66:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d132      	bne.n	8003dd6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d74:	4613      	mov	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	1a9b      	subs	r3, r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	3348      	adds	r3, #72	; 0x48
 8003d80:	6819      	ldr	r1, [r3, #0]
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d86:	4613      	mov	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	1a9b      	subs	r3, r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4403      	add	r3, r0
 8003d90:	3344      	adds	r3, #68	; 0x44
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4419      	add	r1, r3
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	1a9b      	subs	r3, r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4403      	add	r3, r0
 8003da4:	3348      	adds	r3, #72	; 0x48
 8003da6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d113      	bne.n	8003dd6 <HAL_PCD_IRQHandler+0x31c>
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db2:	4613      	mov	r3, r2
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	1a9b      	subs	r3, r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	440b      	add	r3, r1
 8003dbc:	3350      	adds	r3, #80	; 0x50
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d108      	bne.n	8003dd6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6818      	ldr	r0, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003dce:	461a      	mov	r2, r3
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	f003 fedb 	bl	8007b8c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	4619      	mov	r1, r3
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f005 feda 	bl	8009b96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d008      	beq.n	8003dfe <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df8:	461a      	mov	r2, r3
 8003dfa:	2308      	movs	r3, #8
 8003dfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f003 0310 	and.w	r3, r3, #16
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e14:	461a      	mov	r2, r3
 8003e16:	2310      	movs	r3, #16
 8003e18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	015a      	lsls	r2, r3, #5
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e30:	461a      	mov	r2, r3
 8003e32:	2340      	movs	r3, #64	; 0x40
 8003e34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	2302      	movs	r3, #2
 8003e50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003e5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fc1b 	bl	800469a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	3301      	adds	r3, #1
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6c:	085b      	lsrs	r3, r3, #1
 8003e6e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f47f af49 	bne.w	8003d0a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f003 fdc0 	bl	8007a02 <USB_ReadInterrupts>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e8c:	d122      	bne.n	8003ed4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	69fa      	ldr	r2, [r7, #28]
 8003e98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e9c:	f023 0301 	bic.w	r3, r3, #1
 8003ea0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d108      	bne.n	8003ebe <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fe26 	bl	8004b08 <HAL_PCDEx_LPM_Callback>
 8003ebc:	e002      	b.n	8003ec4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f005 fed6 	bl	8009c70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695a      	ldr	r2, [r3, #20]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003ed2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f003 fd92 	bl	8007a02 <USB_ReadInterrupts>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee8:	d112      	bne.n	8003f10 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d102      	bne.n	8003f00 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f005 fe92 	bl	8009c24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695a      	ldr	r2, [r3, #20]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003f0e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f003 fd74 	bl	8007a02 <USB_ReadInterrupts>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f24:	f040 80c7 	bne.w	80040b6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	69fa      	ldr	r2, [r7, #28]
 8003f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f36:	f023 0301 	bic.w	r3, r3, #1
 8003f3a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2110      	movs	r1, #16
 8003f42:	4618      	mov	r0, r3
 8003f44:	f002 fe0e 	bl	8006b64 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f48:	2300      	movs	r3, #0
 8003f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f4c:	e056      	b.n	8003ffc <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f60:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f72:	0151      	lsls	r1, r2, #5
 8003f74:	69fa      	ldr	r2, [r7, #28]
 8003f76:	440a      	add	r2, r1
 8003f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f80:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f92:	0151      	lsls	r1, r2, #5
 8003f94:	69fa      	ldr	r2, [r7, #28]
 8003f96:	440a      	add	r2, r1
 8003f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fa0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa4:	015a      	lsls	r2, r3, #5
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	4413      	add	r3, r2
 8003faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fb4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fc6:	0151      	lsls	r1, r2, #5
 8003fc8:	69fa      	ldr	r2, [r7, #28]
 8003fca:	440a      	add	r2, r1
 8003fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fd4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd8:	015a      	lsls	r2, r3, #5
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	4413      	add	r3, r2
 8003fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fe6:	0151      	lsls	r1, r2, #5
 8003fe8:	69fa      	ldr	r2, [r7, #28]
 8003fea:	440a      	add	r2, r1
 8003fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ff0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ff4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004002:	429a      	cmp	r2, r3
 8004004:	d3a3      	bcc.n	8003f4e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	69fa      	ldr	r2, [r7, #28]
 8004010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004014:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004018:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	2b00      	cmp	r3, #0
 8004020:	d016      	beq.n	8004050 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800402c:	69fa      	ldr	r2, [r7, #28]
 800402e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004032:	f043 030b 	orr.w	r3, r3, #11
 8004036:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	69fa      	ldr	r2, [r7, #28]
 8004044:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004048:	f043 030b 	orr.w	r3, r3, #11
 800404c:	6453      	str	r3, [r2, #68]	; 0x44
 800404e:	e015      	b.n	800407c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	69fa      	ldr	r2, [r7, #28]
 800405a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800405e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004062:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004066:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	69fa      	ldr	r2, [r7, #28]
 8004072:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004076:	f043 030b 	orr.w	r3, r3, #11
 800407a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	69fa      	ldr	r2, [r7, #28]
 8004086:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800408a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800408e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6818      	ldr	r0, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040a0:	461a      	mov	r2, r3
 80040a2:	f003 fd73 	bl	8007b8c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	695a      	ldr	r2, [r3, #20]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80040b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f003 fca1 	bl	8007a02 <USB_ReadInterrupts>
 80040c0:	4603      	mov	r3, r0
 80040c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ca:	d124      	bne.n	8004116 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f003 fd37 	bl	8007b44 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f002 fd9f 	bl	8006c1e <USB_GetDevSpeed>
 80040e0:	4603      	mov	r3, r0
 80040e2:	461a      	mov	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681c      	ldr	r4, [r3, #0]
 80040ec:	f001 f92c 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 80040f0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	461a      	mov	r2, r3
 80040fa:	4620      	mov	r0, r4
 80040fc:	f002 fabe 	bl	800667c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f005 fd70 	bl	8009be6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695a      	ldr	r2, [r3, #20]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004114:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f003 fc71 	bl	8007a02 <USB_ReadInterrupts>
 8004120:	4603      	mov	r3, r0
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b08      	cmp	r3, #8
 8004128:	d10a      	bne.n	8004140 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f005 fd4d 	bl	8009bca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695a      	ldr	r2, [r3, #20]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f002 0208 	and.w	r2, r2, #8
 800413e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f003 fc5c 	bl	8007a02 <USB_ReadInterrupts>
 800414a:	4603      	mov	r3, r0
 800414c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004150:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004154:	d10f      	bne.n	8004176 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	b2db      	uxtb	r3, r3
 800415e:	4619      	mov	r1, r3
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f005 fda5 	bl	8009cb0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695a      	ldr	r2, [r3, #20]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004174:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f003 fc41 	bl	8007a02 <USB_ReadInterrupts>
 8004180:	4603      	mov	r3, r0
 8004182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004186:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800418a:	d10f      	bne.n	80041ac <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800418c:	2300      	movs	r3, #0
 800418e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	b2db      	uxtb	r3, r3
 8004194:	4619      	mov	r1, r3
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f005 fd78 	bl	8009c8c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695a      	ldr	r2, [r3, #20]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80041aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f003 fc26 	bl	8007a02 <USB_ReadInterrupts>
 80041b6:	4603      	mov	r3, r0
 80041b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c0:	d10a      	bne.n	80041d8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f005 fd86 	bl	8009cd4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695a      	ldr	r2, [r3, #20]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80041d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f003 fc10 	bl	8007a02 <USB_ReadInterrupts>
 80041e2:	4603      	mov	r3, r0
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d115      	bne.n	8004218 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	f003 0304 	and.w	r3, r3, #4
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f005 fd76 	bl	8009cf0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6859      	ldr	r1, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	430a      	orrs	r2, r1
 8004212:	605a      	str	r2, [r3, #4]
 8004214:	e000      	b.n	8004218 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004216:	bf00      	nop
    }
  }
}
 8004218:	3734      	adds	r7, #52	; 0x34
 800421a:	46bd      	mov	sp, r7
 800421c:	bd90      	pop	{r4, r7, pc}

0800421e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b082      	sub	sp, #8
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	460b      	mov	r3, r1
 8004228:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004230:	2b01      	cmp	r3, #1
 8004232:	d101      	bne.n	8004238 <HAL_PCD_SetAddress+0x1a>
 8004234:	2302      	movs	r3, #2
 8004236:	e013      	b.n	8004260 <HAL_PCD_SetAddress+0x42>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	78fa      	ldrb	r2, [r7, #3]
 8004244:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	78fa      	ldrb	r2, [r7, #3]
 800424e:	4611      	mov	r1, r2
 8004250:	4618      	mov	r0, r3
 8004252:	f003 fb6e 	bl	8007932 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	4608      	mov	r0, r1
 8004272:	4611      	mov	r1, r2
 8004274:	461a      	mov	r2, r3
 8004276:	4603      	mov	r3, r0
 8004278:	70fb      	strb	r3, [r7, #3]
 800427a:	460b      	mov	r3, r1
 800427c:	803b      	strh	r3, [r7, #0]
 800427e:	4613      	mov	r3, r2
 8004280:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004286:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800428a:	2b00      	cmp	r3, #0
 800428c:	da0f      	bge.n	80042ae <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800428e:	78fb      	ldrb	r3, [r7, #3]
 8004290:	f003 020f 	and.w	r2, r3, #15
 8004294:	4613      	mov	r3, r2
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	1a9b      	subs	r3, r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	3338      	adds	r3, #56	; 0x38
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	4413      	add	r3, r2
 80042a2:	3304      	adds	r3, #4
 80042a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2201      	movs	r2, #1
 80042aa:	705a      	strb	r2, [r3, #1]
 80042ac:	e00f      	b.n	80042ce <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042ae:	78fb      	ldrb	r3, [r7, #3]
 80042b0:	f003 020f 	and.w	r2, r3, #15
 80042b4:	4613      	mov	r3, r2
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	1a9b      	subs	r3, r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	4413      	add	r3, r2
 80042c4:	3304      	adds	r3, #4
 80042c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80042ce:	78fb      	ldrb	r3, [r7, #3]
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80042da:	883a      	ldrh	r2, [r7, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	78ba      	ldrb	r2, [r7, #2]
 80042e4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	785b      	ldrb	r3, [r3, #1]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d004      	beq.n	80042f8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80042f8:	78bb      	ldrb	r3, [r7, #2]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d102      	bne.n	8004304 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800430a:	2b01      	cmp	r3, #1
 800430c:	d101      	bne.n	8004312 <HAL_PCD_EP_Open+0xaa>
 800430e:	2302      	movs	r3, #2
 8004310:	e00e      	b.n	8004330 <HAL_PCD_EP_Open+0xc8>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68f9      	ldr	r1, [r7, #12]
 8004320:	4618      	mov	r0, r3
 8004322:	f002 fca1 	bl	8006c68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800432e:	7afb      	ldrb	r3, [r7, #11]
}
 8004330:	4618      	mov	r0, r3
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004344:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004348:	2b00      	cmp	r3, #0
 800434a:	da0f      	bge.n	800436c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800434c:	78fb      	ldrb	r3, [r7, #3]
 800434e:	f003 020f 	and.w	r2, r3, #15
 8004352:	4613      	mov	r3, r2
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	1a9b      	subs	r3, r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	3338      	adds	r3, #56	; 0x38
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	4413      	add	r3, r2
 8004360:	3304      	adds	r3, #4
 8004362:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2201      	movs	r2, #1
 8004368:	705a      	strb	r2, [r3, #1]
 800436a:	e00f      	b.n	800438c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	f003 020f 	and.w	r2, r3, #15
 8004372:	4613      	mov	r3, r2
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	4413      	add	r3, r2
 8004382:	3304      	adds	r3, #4
 8004384:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800438c:	78fb      	ldrb	r3, [r7, #3]
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	b2da      	uxtb	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d101      	bne.n	80043a6 <HAL_PCD_EP_Close+0x6e>
 80043a2:	2302      	movs	r3, #2
 80043a4:	e00e      	b.n	80043c4 <HAL_PCD_EP_Close+0x8c>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68f9      	ldr	r1, [r7, #12]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f002 fcdf 	bl	8006d78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	607a      	str	r2, [r7, #4]
 80043d6:	603b      	str	r3, [r7, #0]
 80043d8:	460b      	mov	r3, r1
 80043da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043dc:	7afb      	ldrb	r3, [r7, #11]
 80043de:	f003 020f 	and.w	r2, r3, #15
 80043e2:	4613      	mov	r3, r2
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	1a9b      	subs	r3, r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	4413      	add	r3, r2
 80043f2:	3304      	adds	r3, #4
 80043f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2200      	movs	r2, #0
 8004406:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	2200      	movs	r2, #0
 800440c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800440e:	7afb      	ldrb	r3, [r7, #11]
 8004410:	f003 030f 	and.w	r3, r3, #15
 8004414:	b2da      	uxtb	r2, r3
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d102      	bne.n	8004428 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004428:	7afb      	ldrb	r3, [r7, #11]
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	2b00      	cmp	r3, #0
 8004430:	d109      	bne.n	8004446 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6818      	ldr	r0, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	b2db      	uxtb	r3, r3
 800443c:	461a      	mov	r2, r3
 800443e:	6979      	ldr	r1, [r7, #20]
 8004440:	f002 ffba 	bl	80073b8 <USB_EP0StartXfer>
 8004444:	e008      	b.n	8004458 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	b2db      	uxtb	r3, r3
 8004450:	461a      	mov	r2, r3
 8004452:	6979      	ldr	r1, [r7, #20]
 8004454:	f002 fd6c 	bl	8006f30 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
 800446a:	460b      	mov	r3, r1
 800446c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800446e:	78fb      	ldrb	r3, [r7, #3]
 8004470:	f003 020f 	and.w	r2, r3, #15
 8004474:	6879      	ldr	r1, [r7, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	440b      	add	r3, r1
 8004480:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004484:	681b      	ldr	r3, [r3, #0]
}
 8004486:	4618      	mov	r0, r3
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b086      	sub	sp, #24
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	603b      	str	r3, [r7, #0]
 800449e:	460b      	mov	r3, r1
 80044a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044a2:	7afb      	ldrb	r3, [r7, #11]
 80044a4:	f003 020f 	and.w	r2, r3, #15
 80044a8:	4613      	mov	r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	1a9b      	subs	r3, r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	3338      	adds	r3, #56	; 0x38
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4413      	add	r3, r2
 80044b6:	3304      	adds	r3, #4
 80044b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2200      	movs	r2, #0
 80044ca:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	2201      	movs	r2, #1
 80044d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044d2:	7afb      	ldrb	r3, [r7, #11]
 80044d4:	f003 030f 	and.w	r3, r3, #15
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d102      	bne.n	80044ec <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044ec:	7afb      	ldrb	r3, [r7, #11]
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d109      	bne.n	800450a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	461a      	mov	r2, r3
 8004502:	6979      	ldr	r1, [r7, #20]
 8004504:	f002 ff58 	bl	80073b8 <USB_EP0StartXfer>
 8004508:	e008      	b.n	800451c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	461a      	mov	r2, r3
 8004516:	6979      	ldr	r1, [r7, #20]
 8004518:	f002 fd0a 	bl	8006f30 <USB_EPStartXfer>
  }

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b084      	sub	sp, #16
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	460b      	mov	r3, r1
 8004530:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004532:	78fb      	ldrb	r3, [r7, #3]
 8004534:	f003 020f 	and.w	r2, r3, #15
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	429a      	cmp	r2, r3
 800453e:	d901      	bls.n	8004544 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e050      	b.n	80045e6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004544:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004548:	2b00      	cmp	r3, #0
 800454a:	da0f      	bge.n	800456c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800454c:	78fb      	ldrb	r3, [r7, #3]
 800454e:	f003 020f 	and.w	r2, r3, #15
 8004552:	4613      	mov	r3, r2
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	1a9b      	subs	r3, r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	3338      	adds	r3, #56	; 0x38
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	4413      	add	r3, r2
 8004560:	3304      	adds	r3, #4
 8004562:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2201      	movs	r2, #1
 8004568:	705a      	strb	r2, [r3, #1]
 800456a:	e00d      	b.n	8004588 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800456c:	78fa      	ldrb	r2, [r7, #3]
 800456e:	4613      	mov	r3, r2
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	1a9b      	subs	r3, r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	4413      	add	r3, r2
 800457e:	3304      	adds	r3, #4
 8004580:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2201      	movs	r2, #1
 800458c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800458e:	78fb      	ldrb	r3, [r7, #3]
 8004590:	f003 030f 	and.w	r3, r3, #15
 8004594:	b2da      	uxtb	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <HAL_PCD_EP_SetStall+0x82>
 80045a4:	2302      	movs	r3, #2
 80045a6:	e01e      	b.n	80045e6 <HAL_PCD_EP_SetStall+0xc0>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68f9      	ldr	r1, [r7, #12]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f003 f8e7 	bl	800778a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045bc:	78fb      	ldrb	r3, [r7, #3]
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10a      	bne.n	80045dc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6818      	ldr	r0, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	b2d9      	uxtb	r1, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80045d6:	461a      	mov	r2, r3
 80045d8:	f003 fad8 	bl	8007b8c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b084      	sub	sp, #16
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	460b      	mov	r3, r1
 80045f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80045fa:	78fb      	ldrb	r3, [r7, #3]
 80045fc:	f003 020f 	and.w	r2, r3, #15
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	429a      	cmp	r2, r3
 8004606:	d901      	bls.n	800460c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e042      	b.n	8004692 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800460c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004610:	2b00      	cmp	r3, #0
 8004612:	da0f      	bge.n	8004634 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004614:	78fb      	ldrb	r3, [r7, #3]
 8004616:	f003 020f 	and.w	r2, r3, #15
 800461a:	4613      	mov	r3, r2
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	1a9b      	subs	r3, r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	3338      	adds	r3, #56	; 0x38
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	4413      	add	r3, r2
 8004628:	3304      	adds	r3, #4
 800462a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2201      	movs	r2, #1
 8004630:	705a      	strb	r2, [r3, #1]
 8004632:	e00f      	b.n	8004654 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004634:	78fb      	ldrb	r3, [r7, #3]
 8004636:	f003 020f 	and.w	r2, r3, #15
 800463a:	4613      	mov	r3, r2
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	1a9b      	subs	r3, r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	4413      	add	r3, r2
 800464a:	3304      	adds	r3, #4
 800464c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800465a:	78fb      	ldrb	r3, [r7, #3]
 800465c:	f003 030f 	and.w	r3, r3, #15
 8004660:	b2da      	uxtb	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_PCD_EP_ClrStall+0x86>
 8004670:	2302      	movs	r3, #2
 8004672:	e00e      	b.n	8004692 <HAL_PCD_EP_ClrStall+0xa4>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68f9      	ldr	r1, [r7, #12]
 8004682:	4618      	mov	r0, r3
 8004684:	f003 f8ef 	bl	8007866 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b08a      	sub	sp, #40	; 0x28
 800469e:	af02      	add	r7, sp, #8
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	4613      	mov	r3, r2
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	3338      	adds	r3, #56	; 0x38
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	4413      	add	r3, r2
 80046be:	3304      	adds	r3, #4
 80046c0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	699a      	ldr	r2, [r3, #24]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d901      	bls.n	80046d2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e06c      	b.n	80047ac <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	695a      	ldr	r2, [r3, #20]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	69fa      	ldr	r2, [r7, #28]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d902      	bls.n	80046ee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	3303      	adds	r3, #3
 80046f2:	089b      	lsrs	r3, r3, #2
 80046f4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046f6:	e02b      	b.n	8004750 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	695a      	ldr	r2, [r3, #20]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	69fa      	ldr	r2, [r7, #28]
 800470a:	429a      	cmp	r2, r3
 800470c:	d902      	bls.n	8004714 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	3303      	adds	r3, #3
 8004718:	089b      	lsrs	r3, r3, #2
 800471a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	68d9      	ldr	r1, [r3, #12]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	b2da      	uxtb	r2, r3
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800472c:	b2db      	uxtb	r3, r3
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	4603      	mov	r3, r0
 8004732:	6978      	ldr	r0, [r7, #20]
 8004734:	f002 ff93 	bl	800765e <USB_WritePacket>

    ep->xfer_buff  += len;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	441a      	add	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	699a      	ldr	r2, [r3, #24]
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	441a      	add	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	b29b      	uxth	r3, r3
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	429a      	cmp	r2, r3
 8004764:	d809      	bhi.n	800477a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	699a      	ldr	r2, [r3, #24]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800476e:	429a      	cmp	r2, r3
 8004770:	d203      	bcs.n	800477a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1be      	bne.n	80046f8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	695a      	ldr	r2, [r3, #20]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	429a      	cmp	r2, r3
 8004784:	d811      	bhi.n	80047aa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	f003 030f 	and.w	r3, r3, #15
 800478c:	2201      	movs	r2, #1
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800479a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	43db      	mvns	r3, r3
 80047a0:	6939      	ldr	r1, [r7, #16]
 80047a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047a6:	4013      	ands	r3, r2
 80047a8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3720      	adds	r7, #32
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	333c      	adds	r3, #60	; 0x3c
 80047cc:	3304      	adds	r3, #4
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	f040 80a0 	bne.w	800492c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d015      	beq.n	8004822 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4a72      	ldr	r2, [pc, #456]	; (80049c4 <PCD_EP_OutXfrComplete_int+0x210>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	f240 80dd 	bls.w	80049ba <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 80d7 	beq.w	80049ba <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004818:	461a      	mov	r2, r3
 800481a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800481e:	6093      	str	r3, [r2, #8]
 8004820:	e0cb      	b.n	80049ba <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f003 0320 	and.w	r3, r3, #32
 8004828:	2b00      	cmp	r3, #0
 800482a:	d009      	beq.n	8004840 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	015a      	lsls	r2, r3, #5
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	4413      	add	r3, r2
 8004834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004838:	461a      	mov	r2, r3
 800483a:	2320      	movs	r3, #32
 800483c:	6093      	str	r3, [r2, #8]
 800483e:	e0bc      	b.n	80049ba <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004846:	2b00      	cmp	r3, #0
 8004848:	f040 80b7 	bne.w	80049ba <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4a5d      	ldr	r2, [pc, #372]	; (80049c4 <PCD_EP_OutXfrComplete_int+0x210>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d90f      	bls.n	8004874 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486a:	461a      	mov	r2, r3
 800486c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004870:	6093      	str	r3, [r2, #8]
 8004872:	e0a2      	b.n	80049ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004874:	6879      	ldr	r1, [r7, #4]
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	4613      	mov	r3, r2
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	1a9b      	subs	r3, r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	440b      	add	r3, r1
 8004882:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004886:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	0159      	lsls	r1, r3, #5
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	440b      	add	r3, r1
 8004890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800489a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	4613      	mov	r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	1a9b      	subs	r3, r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4403      	add	r3, r0
 80048aa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80048ae:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80048b0:	6879      	ldr	r1, [r7, #4]
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	4613      	mov	r3, r2
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	1a9b      	subs	r3, r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	440b      	add	r3, r1
 80048be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80048c2:	6819      	ldr	r1, [r3, #0]
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	4613      	mov	r3, r2
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	1a9b      	subs	r3, r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4403      	add	r3, r0
 80048d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4419      	add	r1, r3
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	4613      	mov	r3, r2
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	1a9b      	subs	r3, r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4403      	add	r3, r0
 80048e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80048ec:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d114      	bne.n	800491e <PCD_EP_OutXfrComplete_int+0x16a>
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	4613      	mov	r3, r2
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	1a9b      	subs	r3, r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	440b      	add	r3, r1
 8004902:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d108      	bne.n	800491e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6818      	ldr	r0, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004916:	461a      	mov	r2, r3
 8004918:	2101      	movs	r1, #1
 800491a:	f003 f937 	bl	8007b8c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	b2db      	uxtb	r3, r3
 8004922:	4619      	mov	r1, r3
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f005 f91b 	bl	8009b60 <HAL_PCD_DataOutStageCallback>
 800492a:	e046      	b.n	80049ba <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4a26      	ldr	r2, [pc, #152]	; (80049c8 <PCD_EP_OutXfrComplete_int+0x214>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d124      	bne.n	800497e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	4413      	add	r3, r2
 8004946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494a:	461a      	mov	r2, r3
 800494c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004950:	6093      	str	r3, [r2, #8]
 8004952:	e032      	b.n	80049ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f003 0320 	and.w	r3, r3, #32
 800495a:	2b00      	cmp	r3, #0
 800495c:	d008      	beq.n	8004970 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496a:	461a      	mov	r2, r3
 800496c:	2320      	movs	r3, #32
 800496e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	b2db      	uxtb	r3, r3
 8004974:	4619      	mov	r1, r3
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f005 f8f2 	bl	8009b60 <HAL_PCD_DataOutStageCallback>
 800497c:	e01d      	b.n	80049ba <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d114      	bne.n	80049ae <PCD_EP_OutXfrComplete_int+0x1fa>
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	4613      	mov	r3, r2
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	1a9b      	subs	r3, r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	440b      	add	r3, r1
 8004992:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d108      	bne.n	80049ae <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6818      	ldr	r0, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80049a6:	461a      	mov	r2, r3
 80049a8:	2100      	movs	r1, #0
 80049aa:	f003 f8ef 	bl	8007b8c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	4619      	mov	r1, r3
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f005 f8d3 	bl	8009b60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	4f54300a 	.word	0x4f54300a
 80049c8:	4f54310a 	.word	0x4f54310a

080049cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	333c      	adds	r3, #60	; 0x3c
 80049e4:	3304      	adds	r3, #4
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4a15      	ldr	r2, [pc, #84]	; (8004a54 <PCD_EP_OutSetupPacket_int+0x88>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d90e      	bls.n	8004a20 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d009      	beq.n	8004a20 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a18:	461a      	mov	r2, r3
 8004a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a1e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f005 f88b 	bl	8009b3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4a0a      	ldr	r2, [pc, #40]	; (8004a54 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d90c      	bls.n	8004a48 <PCD_EP_OutSetupPacket_int+0x7c>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d108      	bne.n	8004a48 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a40:	461a      	mov	r2, r3
 8004a42:	2101      	movs	r1, #1
 8004a44:	f003 f8a2 	bl	8007b8c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	4f54300a 	.word	0x4f54300a

08004a58 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	460b      	mov	r3, r1
 8004a62:	70fb      	strb	r3, [r7, #3]
 8004a64:	4613      	mov	r3, r2
 8004a66:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d107      	bne.n	8004a86 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004a76:	883b      	ldrh	r3, [r7, #0]
 8004a78:	0419      	lsls	r1, r3, #16
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	629a      	str	r2, [r3, #40]	; 0x28
 8004a84:	e028      	b.n	8004ad8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8c:	0c1b      	lsrs	r3, r3, #16
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	4413      	add	r3, r2
 8004a92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a94:	2300      	movs	r3, #0
 8004a96:	73fb      	strb	r3, [r7, #15]
 8004a98:	e00d      	b.n	8004ab6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
 8004aa0:	3340      	adds	r3, #64	; 0x40
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	0c1b      	lsrs	r3, r3, #16
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	4413      	add	r3, r2
 8004aae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	73fb      	strb	r3, [r7, #15]
 8004ab6:	7bfa      	ldrb	r2, [r7, #15]
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d3ec      	bcc.n	8004a9a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004ac0:	883b      	ldrh	r3, [r7, #0]
 8004ac2:	0418      	lsls	r0, r3, #16
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6819      	ldr	r1, [r3, #0]
 8004ac8:	78fb      	ldrb	r3, [r7, #3]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	4302      	orrs	r2, r0
 8004ad0:	3340      	adds	r3, #64	; 0x40
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	460b      	mov	r3, r1
 8004af0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	887a      	ldrh	r2, [r7, #2]
 8004af8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e264      	b.n	8004ffc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d075      	beq.n	8004c2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b3e:	4ba3      	ldr	r3, [pc, #652]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 030c 	and.w	r3, r3, #12
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d00c      	beq.n	8004b64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b4a:	4ba0      	ldr	r3, [pc, #640]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b52:	2b08      	cmp	r3, #8
 8004b54:	d112      	bne.n	8004b7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b56:	4b9d      	ldr	r3, [pc, #628]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b62:	d10b      	bne.n	8004b7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b64:	4b99      	ldr	r3, [pc, #612]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d05b      	beq.n	8004c28 <HAL_RCC_OscConfig+0x108>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d157      	bne.n	8004c28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e23f      	b.n	8004ffc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b84:	d106      	bne.n	8004b94 <HAL_RCC_OscConfig+0x74>
 8004b86:	4b91      	ldr	r3, [pc, #580]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a90      	ldr	r2, [pc, #576]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b90:	6013      	str	r3, [r2, #0]
 8004b92:	e01d      	b.n	8004bd0 <HAL_RCC_OscConfig+0xb0>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b9c:	d10c      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x98>
 8004b9e:	4b8b      	ldr	r3, [pc, #556]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a8a      	ldr	r2, [pc, #552]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	4b88      	ldr	r3, [pc, #544]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a87      	ldr	r2, [pc, #540]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb4:	6013      	str	r3, [r2, #0]
 8004bb6:	e00b      	b.n	8004bd0 <HAL_RCC_OscConfig+0xb0>
 8004bb8:	4b84      	ldr	r3, [pc, #528]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a83      	ldr	r2, [pc, #524]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	4b81      	ldr	r3, [pc, #516]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a80      	ldr	r2, [pc, #512]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d013      	beq.n	8004c00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd8:	f7fd fb6c 	bl	80022b4 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004be0:	f7fd fb68 	bl	80022b4 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b64      	cmp	r3, #100	; 0x64
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e204      	b.n	8004ffc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bf2:	4b76      	ldr	r3, [pc, #472]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0f0      	beq.n	8004be0 <HAL_RCC_OscConfig+0xc0>
 8004bfe:	e014      	b.n	8004c2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c00:	f7fd fb58 	bl	80022b4 <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c08:	f7fd fb54 	bl	80022b4 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b64      	cmp	r3, #100	; 0x64
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e1f0      	b.n	8004ffc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c1a:	4b6c      	ldr	r3, [pc, #432]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1f0      	bne.n	8004c08 <HAL_RCC_OscConfig+0xe8>
 8004c26:	e000      	b.n	8004c2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d063      	beq.n	8004cfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c36:	4b65      	ldr	r3, [pc, #404]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 030c 	and.w	r3, r3, #12
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00b      	beq.n	8004c5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c42:	4b62      	ldr	r3, [pc, #392]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c4a:	2b08      	cmp	r3, #8
 8004c4c:	d11c      	bne.n	8004c88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c4e:	4b5f      	ldr	r3, [pc, #380]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d116      	bne.n	8004c88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c5a:	4b5c      	ldr	r3, [pc, #368]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d005      	beq.n	8004c72 <HAL_RCC_OscConfig+0x152>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d001      	beq.n	8004c72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e1c4      	b.n	8004ffc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c72:	4b56      	ldr	r3, [pc, #344]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	4952      	ldr	r1, [pc, #328]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c86:	e03a      	b.n	8004cfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d020      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c90:	4b4f      	ldr	r3, [pc, #316]	; (8004dd0 <HAL_RCC_OscConfig+0x2b0>)
 8004c92:	2201      	movs	r2, #1
 8004c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c96:	f7fd fb0d 	bl	80022b4 <HAL_GetTick>
 8004c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c9e:	f7fd fb09 	bl	80022b4 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e1a5      	b.n	8004ffc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cb0:	4b46      	ldr	r3, [pc, #280]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0f0      	beq.n	8004c9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cbc:	4b43      	ldr	r3, [pc, #268]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	00db      	lsls	r3, r3, #3
 8004cca:	4940      	ldr	r1, [pc, #256]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	600b      	str	r3, [r1, #0]
 8004cd0:	e015      	b.n	8004cfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cd2:	4b3f      	ldr	r3, [pc, #252]	; (8004dd0 <HAL_RCC_OscConfig+0x2b0>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd8:	f7fd faec 	bl	80022b4 <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ce0:	f7fd fae8 	bl	80022b4 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e184      	b.n	8004ffc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cf2:	4b36      	ldr	r3, [pc, #216]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1f0      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d030      	beq.n	8004d6c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d016      	beq.n	8004d40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d12:	4b30      	ldr	r3, [pc, #192]	; (8004dd4 <HAL_RCC_OscConfig+0x2b4>)
 8004d14:	2201      	movs	r2, #1
 8004d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d18:	f7fd facc 	bl	80022b4 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d20:	f7fd fac8 	bl	80022b4 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e164      	b.n	8004ffc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d32:	4b26      	ldr	r3, [pc, #152]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0f0      	beq.n	8004d20 <HAL_RCC_OscConfig+0x200>
 8004d3e:	e015      	b.n	8004d6c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d40:	4b24      	ldr	r3, [pc, #144]	; (8004dd4 <HAL_RCC_OscConfig+0x2b4>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d46:	f7fd fab5 	bl	80022b4 <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d4e:	f7fd fab1 	bl	80022b4 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e14d      	b.n	8004ffc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d60:	4b1a      	ldr	r3, [pc, #104]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1f0      	bne.n	8004d4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0304 	and.w	r3, r3, #4
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 80a0 	beq.w	8004eba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d7e:	4b13      	ldr	r3, [pc, #76]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10f      	bne.n	8004daa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60bb      	str	r3, [r7, #8]
 8004d8e:	4b0f      	ldr	r3, [pc, #60]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	4a0e      	ldr	r2, [pc, #56]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d98:	6413      	str	r3, [r2, #64]	; 0x40
 8004d9a:	4b0c      	ldr	r3, [pc, #48]	; (8004dcc <HAL_RCC_OscConfig+0x2ac>)
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da2:	60bb      	str	r3, [r7, #8]
 8004da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004da6:	2301      	movs	r3, #1
 8004da8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004daa:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <HAL_RCC_OscConfig+0x2b8>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d121      	bne.n	8004dfa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004db6:	4b08      	ldr	r3, [pc, #32]	; (8004dd8 <HAL_RCC_OscConfig+0x2b8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a07      	ldr	r2, [pc, #28]	; (8004dd8 <HAL_RCC_OscConfig+0x2b8>)
 8004dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dc2:	f7fd fa77 	bl	80022b4 <HAL_GetTick>
 8004dc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc8:	e011      	b.n	8004dee <HAL_RCC_OscConfig+0x2ce>
 8004dca:	bf00      	nop
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	42470000 	.word	0x42470000
 8004dd4:	42470e80 	.word	0x42470e80
 8004dd8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ddc:	f7fd fa6a 	bl	80022b4 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e106      	b.n	8004ffc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dee:	4b85      	ldr	r3, [pc, #532]	; (8005004 <HAL_RCC_OscConfig+0x4e4>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0f0      	beq.n	8004ddc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d106      	bne.n	8004e10 <HAL_RCC_OscConfig+0x2f0>
 8004e02:	4b81      	ldr	r3, [pc, #516]	; (8005008 <HAL_RCC_OscConfig+0x4e8>)
 8004e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e06:	4a80      	ldr	r2, [pc, #512]	; (8005008 <HAL_RCC_OscConfig+0x4e8>)
 8004e08:	f043 0301 	orr.w	r3, r3, #1
 8004e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e0e:	e01c      	b.n	8004e4a <HAL_RCC_OscConfig+0x32a>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	2b05      	cmp	r3, #5
 8004e16:	d10c      	bne.n	8004e32 <HAL_RCC_OscConfig+0x312>
 8004e18:	4b7b      	ldr	r3, [pc, #492]	; (8005008 <HAL_RCC_OscConfig+0x4e8>)
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1c:	4a7a      	ldr	r2, [pc, #488]	; (8005008 <HAL_RCC_OscConfig+0x4e8>)
 8004e1e:	f043 0304 	orr.w	r3, r3, #4
 8004e22:	6713      	str	r3, [r2, #112]	; 0x70
 8004e24:	4b78      	ldr	r3, [pc, #480]	; (8005008 <HAL_RCC_OscConfig+0x4e8>)
 8004e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e28:	4a77      	ldr	r2, [pc, #476]	; (8005008 <HAL_RCC_OscConfig+0x4e8>)
 8004e2a:	f043 0301 	orr.w	r3, r3, #1
 8004e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e30:	e00b      	b.n	8004e4a <HAL_RCC_OscConfig+0x32a>
 8004e32:	4b75      	ldr	r3, [pc, #468]	; (8005008 <HAL_RCC_OscConfig+0x4e8>)
 8004e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e36:	4a74      	ldr	r2, [pc, #464]	; (8005008 <HAL_RCC_OscConfig+0x4e8>)
 8004e38:	f023 0301 	bic.w	r3, r3, #1
 8004e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e3e:	4b72      	ldr	r3, [pc, #456]	; (8005008 <HAL_RCC_OscConfig+0x4e8>)
 8004e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e42:	4a71      	ldr	r2, [pc, #452]	; (8005008 <HAL_RCC_OscConfig+0x4e8>)
 8004e44:	f023 0304 	bic.w	r3, r3, #4
 8004e48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d015      	beq.n	8004e7e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e52:	f7fd fa2f 	bl	80022b4 <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e58:	e00a      	b.n	8004e70 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e5a:	f7fd fa2b 	bl	80022b4 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e0c5      	b.n	8004ffc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e70:	4b65      	ldr	r3, [pc, #404]	; (8005008 <HAL_RCC_OscConfig+0x4e8>)
 8004e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0ee      	beq.n	8004e5a <HAL_RCC_OscConfig+0x33a>
 8004e7c:	e014      	b.n	8004ea8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e7e:	f7fd fa19 	bl	80022b4 <HAL_GetTick>
 8004e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e84:	e00a      	b.n	8004e9c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e86:	f7fd fa15 	bl	80022b4 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e0af      	b.n	8004ffc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e9c:	4b5a      	ldr	r3, [pc, #360]	; (8005008 <HAL_RCC_OscConfig+0x4e8>)
 8004e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1ee      	bne.n	8004e86 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ea8:	7dfb      	ldrb	r3, [r7, #23]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d105      	bne.n	8004eba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eae:	4b56      	ldr	r3, [pc, #344]	; (8005008 <HAL_RCC_OscConfig+0x4e8>)
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	4a55      	ldr	r2, [pc, #340]	; (8005008 <HAL_RCC_OscConfig+0x4e8>)
 8004eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eb8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 809b 	beq.w	8004ffa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ec4:	4b50      	ldr	r3, [pc, #320]	; (8005008 <HAL_RCC_OscConfig+0x4e8>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f003 030c 	and.w	r3, r3, #12
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d05c      	beq.n	8004f8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d141      	bne.n	8004f5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ed8:	4b4c      	ldr	r3, [pc, #304]	; (800500c <HAL_RCC_OscConfig+0x4ec>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ede:	f7fd f9e9 	bl	80022b4 <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ee6:	f7fd f9e5 	bl	80022b4 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e081      	b.n	8004ffc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ef8:	4b43      	ldr	r3, [pc, #268]	; (8005008 <HAL_RCC_OscConfig+0x4e8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1f0      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	69da      	ldr	r2, [r3, #28]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	019b      	lsls	r3, r3, #6
 8004f14:	431a      	orrs	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1a:	085b      	lsrs	r3, r3, #1
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	041b      	lsls	r3, r3, #16
 8004f20:	431a      	orrs	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f26:	061b      	lsls	r3, r3, #24
 8004f28:	4937      	ldr	r1, [pc, #220]	; (8005008 <HAL_RCC_OscConfig+0x4e8>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f2e:	4b37      	ldr	r3, [pc, #220]	; (800500c <HAL_RCC_OscConfig+0x4ec>)
 8004f30:	2201      	movs	r2, #1
 8004f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f34:	f7fd f9be 	bl	80022b4 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f3c:	f7fd f9ba 	bl	80022b4 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e056      	b.n	8004ffc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f4e:	4b2e      	ldr	r3, [pc, #184]	; (8005008 <HAL_RCC_OscConfig+0x4e8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0f0      	beq.n	8004f3c <HAL_RCC_OscConfig+0x41c>
 8004f5a:	e04e      	b.n	8004ffa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f5c:	4b2b      	ldr	r3, [pc, #172]	; (800500c <HAL_RCC_OscConfig+0x4ec>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f62:	f7fd f9a7 	bl	80022b4 <HAL_GetTick>
 8004f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f68:	e008      	b.n	8004f7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f6a:	f7fd f9a3 	bl	80022b4 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e03f      	b.n	8004ffc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f7c:	4b22      	ldr	r3, [pc, #136]	; (8005008 <HAL_RCC_OscConfig+0x4e8>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1f0      	bne.n	8004f6a <HAL_RCC_OscConfig+0x44a>
 8004f88:	e037      	b.n	8004ffa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d101      	bne.n	8004f96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e032      	b.n	8004ffc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f96:	4b1c      	ldr	r3, [pc, #112]	; (8005008 <HAL_RCC_OscConfig+0x4e8>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d028      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d121      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d11a      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fcc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d111      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fdc:	085b      	lsrs	r3, r3, #1
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d107      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d001      	beq.n	8004ffa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40007000 	.word	0x40007000
 8005008:	40023800 	.word	0x40023800
 800500c:	42470060 	.word	0x42470060

08005010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e0cc      	b.n	80051be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005024:	4b68      	ldr	r3, [pc, #416]	; (80051c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d90c      	bls.n	800504c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005032:	4b65      	ldr	r3, [pc, #404]	; (80051c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800503a:	4b63      	ldr	r3, [pc, #396]	; (80051c8 <HAL_RCC_ClockConfig+0x1b8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d001      	beq.n	800504c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e0b8      	b.n	80051be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d020      	beq.n	800509a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b00      	cmp	r3, #0
 8005062:	d005      	beq.n	8005070 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005064:	4b59      	ldr	r3, [pc, #356]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	4a58      	ldr	r2, [pc, #352]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 800506a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800506e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0308 	and.w	r3, r3, #8
 8005078:	2b00      	cmp	r3, #0
 800507a:	d005      	beq.n	8005088 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800507c:	4b53      	ldr	r3, [pc, #332]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	4a52      	ldr	r2, [pc, #328]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005086:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005088:	4b50      	ldr	r3, [pc, #320]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	494d      	ldr	r1, [pc, #308]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 8005096:	4313      	orrs	r3, r2
 8005098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d044      	beq.n	8005130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d107      	bne.n	80050be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ae:	4b47      	ldr	r3, [pc, #284]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d119      	bne.n	80050ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e07f      	b.n	80051be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d003      	beq.n	80050ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d107      	bne.n	80050de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ce:	4b3f      	ldr	r3, [pc, #252]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d109      	bne.n	80050ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e06f      	b.n	80051be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050de:	4b3b      	ldr	r3, [pc, #236]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e067      	b.n	80051be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ee:	4b37      	ldr	r3, [pc, #220]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f023 0203 	bic.w	r2, r3, #3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	4934      	ldr	r1, [pc, #208]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005100:	f7fd f8d8 	bl	80022b4 <HAL_GetTick>
 8005104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005106:	e00a      	b.n	800511e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005108:	f7fd f8d4 	bl	80022b4 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	f241 3288 	movw	r2, #5000	; 0x1388
 8005116:	4293      	cmp	r3, r2
 8005118:	d901      	bls.n	800511e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e04f      	b.n	80051be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800511e:	4b2b      	ldr	r3, [pc, #172]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 020c 	and.w	r2, r3, #12
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	429a      	cmp	r2, r3
 800512e:	d1eb      	bne.n	8005108 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005130:	4b25      	ldr	r3, [pc, #148]	; (80051c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	429a      	cmp	r2, r3
 800513c:	d20c      	bcs.n	8005158 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800513e:	4b22      	ldr	r3, [pc, #136]	; (80051c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	b2d2      	uxtb	r2, r2
 8005144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005146:	4b20      	ldr	r3, [pc, #128]	; (80051c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d001      	beq.n	8005158 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e032      	b.n	80051be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b00      	cmp	r3, #0
 8005162:	d008      	beq.n	8005176 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005164:	4b19      	ldr	r3, [pc, #100]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	4916      	ldr	r1, [pc, #88]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 8005172:	4313      	orrs	r3, r2
 8005174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b00      	cmp	r3, #0
 8005180:	d009      	beq.n	8005196 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005182:	4b12      	ldr	r3, [pc, #72]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	490e      	ldr	r1, [pc, #56]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 8005192:	4313      	orrs	r3, r2
 8005194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005196:	f000 f821 	bl	80051dc <HAL_RCC_GetSysClockFreq>
 800519a:	4602      	mov	r2, r0
 800519c:	4b0b      	ldr	r3, [pc, #44]	; (80051cc <HAL_RCC_ClockConfig+0x1bc>)
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	091b      	lsrs	r3, r3, #4
 80051a2:	f003 030f 	and.w	r3, r3, #15
 80051a6:	490a      	ldr	r1, [pc, #40]	; (80051d0 <HAL_RCC_ClockConfig+0x1c0>)
 80051a8:	5ccb      	ldrb	r3, [r1, r3]
 80051aa:	fa22 f303 	lsr.w	r3, r2, r3
 80051ae:	4a09      	ldr	r2, [pc, #36]	; (80051d4 <HAL_RCC_ClockConfig+0x1c4>)
 80051b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051b2:	4b09      	ldr	r3, [pc, #36]	; (80051d8 <HAL_RCC_ClockConfig+0x1c8>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fd f838 	bl	800222c <HAL_InitTick>

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	40023c00 	.word	0x40023c00
 80051cc:	40023800 	.word	0x40023800
 80051d0:	0800d9c4 	.word	0x0800d9c4
 80051d4:	20000010 	.word	0x20000010
 80051d8:	20000014 	.word	0x20000014

080051dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051dc:	b5b0      	push	{r4, r5, r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051e2:	2100      	movs	r1, #0
 80051e4:	6079      	str	r1, [r7, #4]
 80051e6:	2100      	movs	r1, #0
 80051e8:	60f9      	str	r1, [r7, #12]
 80051ea:	2100      	movs	r1, #0
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80051ee:	2100      	movs	r1, #0
 80051f0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051f2:	4952      	ldr	r1, [pc, #328]	; (800533c <HAL_RCC_GetSysClockFreq+0x160>)
 80051f4:	6889      	ldr	r1, [r1, #8]
 80051f6:	f001 010c 	and.w	r1, r1, #12
 80051fa:	2908      	cmp	r1, #8
 80051fc:	d00d      	beq.n	800521a <HAL_RCC_GetSysClockFreq+0x3e>
 80051fe:	2908      	cmp	r1, #8
 8005200:	f200 8094 	bhi.w	800532c <HAL_RCC_GetSysClockFreq+0x150>
 8005204:	2900      	cmp	r1, #0
 8005206:	d002      	beq.n	800520e <HAL_RCC_GetSysClockFreq+0x32>
 8005208:	2904      	cmp	r1, #4
 800520a:	d003      	beq.n	8005214 <HAL_RCC_GetSysClockFreq+0x38>
 800520c:	e08e      	b.n	800532c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800520e:	4b4c      	ldr	r3, [pc, #304]	; (8005340 <HAL_RCC_GetSysClockFreq+0x164>)
 8005210:	60bb      	str	r3, [r7, #8]
       break;
 8005212:	e08e      	b.n	8005332 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005214:	4b4b      	ldr	r3, [pc, #300]	; (8005344 <HAL_RCC_GetSysClockFreq+0x168>)
 8005216:	60bb      	str	r3, [r7, #8]
      break;
 8005218:	e08b      	b.n	8005332 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800521a:	4948      	ldr	r1, [pc, #288]	; (800533c <HAL_RCC_GetSysClockFreq+0x160>)
 800521c:	6849      	ldr	r1, [r1, #4]
 800521e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005222:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005224:	4945      	ldr	r1, [pc, #276]	; (800533c <HAL_RCC_GetSysClockFreq+0x160>)
 8005226:	6849      	ldr	r1, [r1, #4]
 8005228:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800522c:	2900      	cmp	r1, #0
 800522e:	d024      	beq.n	800527a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005230:	4942      	ldr	r1, [pc, #264]	; (800533c <HAL_RCC_GetSysClockFreq+0x160>)
 8005232:	6849      	ldr	r1, [r1, #4]
 8005234:	0989      	lsrs	r1, r1, #6
 8005236:	4608      	mov	r0, r1
 8005238:	f04f 0100 	mov.w	r1, #0
 800523c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005240:	f04f 0500 	mov.w	r5, #0
 8005244:	ea00 0204 	and.w	r2, r0, r4
 8005248:	ea01 0305 	and.w	r3, r1, r5
 800524c:	493d      	ldr	r1, [pc, #244]	; (8005344 <HAL_RCC_GetSysClockFreq+0x168>)
 800524e:	fb01 f003 	mul.w	r0, r1, r3
 8005252:	2100      	movs	r1, #0
 8005254:	fb01 f102 	mul.w	r1, r1, r2
 8005258:	1844      	adds	r4, r0, r1
 800525a:	493a      	ldr	r1, [pc, #232]	; (8005344 <HAL_RCC_GetSysClockFreq+0x168>)
 800525c:	fba2 0101 	umull	r0, r1, r2, r1
 8005260:	1863      	adds	r3, r4, r1
 8005262:	4619      	mov	r1, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	461a      	mov	r2, r3
 8005268:	f04f 0300 	mov.w	r3, #0
 800526c:	f7fb fcf6 	bl	8000c5c <__aeabi_uldivmod>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	4613      	mov	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	e04a      	b.n	8005310 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800527a:	4b30      	ldr	r3, [pc, #192]	; (800533c <HAL_RCC_GetSysClockFreq+0x160>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	099b      	lsrs	r3, r3, #6
 8005280:	461a      	mov	r2, r3
 8005282:	f04f 0300 	mov.w	r3, #0
 8005286:	f240 10ff 	movw	r0, #511	; 0x1ff
 800528a:	f04f 0100 	mov.w	r1, #0
 800528e:	ea02 0400 	and.w	r4, r2, r0
 8005292:	ea03 0501 	and.w	r5, r3, r1
 8005296:	4620      	mov	r0, r4
 8005298:	4629      	mov	r1, r5
 800529a:	f04f 0200 	mov.w	r2, #0
 800529e:	f04f 0300 	mov.w	r3, #0
 80052a2:	014b      	lsls	r3, r1, #5
 80052a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80052a8:	0142      	lsls	r2, r0, #5
 80052aa:	4610      	mov	r0, r2
 80052ac:	4619      	mov	r1, r3
 80052ae:	1b00      	subs	r0, r0, r4
 80052b0:	eb61 0105 	sbc.w	r1, r1, r5
 80052b4:	f04f 0200 	mov.w	r2, #0
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	018b      	lsls	r3, r1, #6
 80052be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052c2:	0182      	lsls	r2, r0, #6
 80052c4:	1a12      	subs	r2, r2, r0
 80052c6:	eb63 0301 	sbc.w	r3, r3, r1
 80052ca:	f04f 0000 	mov.w	r0, #0
 80052ce:	f04f 0100 	mov.w	r1, #0
 80052d2:	00d9      	lsls	r1, r3, #3
 80052d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052d8:	00d0      	lsls	r0, r2, #3
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	1912      	adds	r2, r2, r4
 80052e0:	eb45 0303 	adc.w	r3, r5, r3
 80052e4:	f04f 0000 	mov.w	r0, #0
 80052e8:	f04f 0100 	mov.w	r1, #0
 80052ec:	0299      	lsls	r1, r3, #10
 80052ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80052f2:	0290      	lsls	r0, r2, #10
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4610      	mov	r0, r2
 80052fa:	4619      	mov	r1, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	461a      	mov	r2, r3
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	f7fb fcaa 	bl	8000c5c <__aeabi_uldivmod>
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	4613      	mov	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005310:	4b0a      	ldr	r3, [pc, #40]	; (800533c <HAL_RCC_GetSysClockFreq+0x160>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	0c1b      	lsrs	r3, r3, #16
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	3301      	adds	r3, #1
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	fbb2 f3f3 	udiv	r3, r2, r3
 8005328:	60bb      	str	r3, [r7, #8]
      break;
 800532a:	e002      	b.n	8005332 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800532c:	4b04      	ldr	r3, [pc, #16]	; (8005340 <HAL_RCC_GetSysClockFreq+0x164>)
 800532e:	60bb      	str	r3, [r7, #8]
      break;
 8005330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005332:	68bb      	ldr	r3, [r7, #8]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bdb0      	pop	{r4, r5, r7, pc}
 800533c:	40023800 	.word	0x40023800
 8005340:	00f42400 	.word	0x00f42400
 8005344:	017d7840 	.word	0x017d7840

08005348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800534c:	4b03      	ldr	r3, [pc, #12]	; (800535c <HAL_RCC_GetHCLKFreq+0x14>)
 800534e:	681b      	ldr	r3, [r3, #0]
}
 8005350:	4618      	mov	r0, r3
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	20000010 	.word	0x20000010

08005360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005364:	f7ff fff0 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 8005368:	4602      	mov	r2, r0
 800536a:	4b05      	ldr	r3, [pc, #20]	; (8005380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	0a9b      	lsrs	r3, r3, #10
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	4903      	ldr	r1, [pc, #12]	; (8005384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005376:	5ccb      	ldrb	r3, [r1, r3]
 8005378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800537c:	4618      	mov	r0, r3
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40023800 	.word	0x40023800
 8005384:	0800d9d4 	.word	0x0800d9d4

08005388 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e041      	b.n	800541e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d106      	bne.n	80053b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7fc fd6e 	bl	8001e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	3304      	adds	r3, #4
 80053c4:	4619      	mov	r1, r3
 80053c6:	4610      	mov	r0, r2
 80053c8:	f000 fd6a 	bl	8005ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e041      	b.n	80054bc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b00      	cmp	r3, #0
 8005442:	d106      	bne.n	8005452 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f839 	bl	80054c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2202      	movs	r2, #2
 8005456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	3304      	adds	r3, #4
 8005462:	4619      	mov	r1, r3
 8005464:	4610      	mov	r0, r2
 8005466:	f000 fd1b 	bl	8005ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
 80054e4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d109      	bne.n	8005504 <HAL_TIM_PWM_Start_DMA+0x2c>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	bf0c      	ite	eq
 80054fc:	2301      	moveq	r3, #1
 80054fe:	2300      	movne	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	e022      	b.n	800554a <HAL_TIM_PWM_Start_DMA+0x72>
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b04      	cmp	r3, #4
 8005508:	d109      	bne.n	800551e <HAL_TIM_PWM_Start_DMA+0x46>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	bf0c      	ite	eq
 8005516:	2301      	moveq	r3, #1
 8005518:	2300      	movne	r3, #0
 800551a:	b2db      	uxtb	r3, r3
 800551c:	e015      	b.n	800554a <HAL_TIM_PWM_Start_DMA+0x72>
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b08      	cmp	r3, #8
 8005522:	d109      	bne.n	8005538 <HAL_TIM_PWM_Start_DMA+0x60>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b02      	cmp	r3, #2
 800552e:	bf0c      	ite	eq
 8005530:	2301      	moveq	r3, #1
 8005532:	2300      	movne	r3, #0
 8005534:	b2db      	uxtb	r3, r3
 8005536:	e008      	b.n	800554a <HAL_TIM_PWM_Start_DMA+0x72>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	bf0c      	ite	eq
 8005544:	2301      	moveq	r3, #1
 8005546:	2300      	movne	r3, #0
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800554e:	2302      	movs	r3, #2
 8005550:	e15d      	b.n	800580e <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d109      	bne.n	800556c <HAL_TIM_PWM_Start_DMA+0x94>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b01      	cmp	r3, #1
 8005562:	bf0c      	ite	eq
 8005564:	2301      	moveq	r3, #1
 8005566:	2300      	movne	r3, #0
 8005568:	b2db      	uxtb	r3, r3
 800556a:	e022      	b.n	80055b2 <HAL_TIM_PWM_Start_DMA+0xda>
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b04      	cmp	r3, #4
 8005570:	d109      	bne.n	8005586 <HAL_TIM_PWM_Start_DMA+0xae>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b01      	cmp	r3, #1
 800557c:	bf0c      	ite	eq
 800557e:	2301      	moveq	r3, #1
 8005580:	2300      	movne	r3, #0
 8005582:	b2db      	uxtb	r3, r3
 8005584:	e015      	b.n	80055b2 <HAL_TIM_PWM_Start_DMA+0xda>
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b08      	cmp	r3, #8
 800558a:	d109      	bne.n	80055a0 <HAL_TIM_PWM_Start_DMA+0xc8>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b01      	cmp	r3, #1
 8005596:	bf0c      	ite	eq
 8005598:	2301      	moveq	r3, #1
 800559a:	2300      	movne	r3, #0
 800559c:	b2db      	uxtb	r3, r3
 800559e:	e008      	b.n	80055b2 <HAL_TIM_PWM_Start_DMA+0xda>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	bf0c      	ite	eq
 80055ac:	2301      	moveq	r3, #1
 80055ae:	2300      	movne	r3, #0
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d024      	beq.n	8005600 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d104      	bne.n	80055c6 <HAL_TIM_PWM_Start_DMA+0xee>
 80055bc:	887b      	ldrh	r3, [r7, #2]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e123      	b.n	800580e <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d104      	bne.n	80055d6 <HAL_TIM_PWM_Start_DMA+0xfe>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2202      	movs	r2, #2
 80055d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055d4:	e016      	b.n	8005604 <HAL_TIM_PWM_Start_DMA+0x12c>
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d104      	bne.n	80055e6 <HAL_TIM_PWM_Start_DMA+0x10e>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2202      	movs	r2, #2
 80055e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055e4:	e00e      	b.n	8005604 <HAL_TIM_PWM_Start_DMA+0x12c>
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b08      	cmp	r3, #8
 80055ea:	d104      	bne.n	80055f6 <HAL_TIM_PWM_Start_DMA+0x11e>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055f4:	e006      	b.n	8005604 <HAL_TIM_PWM_Start_DMA+0x12c>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2202      	movs	r2, #2
 80055fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055fe:	e001      	b.n	8005604 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e104      	b.n	800580e <HAL_TIM_PWM_Start_DMA+0x336>
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b0c      	cmp	r3, #12
 8005608:	f200 80ae 	bhi.w	8005768 <HAL_TIM_PWM_Start_DMA+0x290>
 800560c:	a201      	add	r2, pc, #4	; (adr r2, 8005614 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800560e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005612:	bf00      	nop
 8005614:	08005649 	.word	0x08005649
 8005618:	08005769 	.word	0x08005769
 800561c:	08005769 	.word	0x08005769
 8005620:	08005769 	.word	0x08005769
 8005624:	08005691 	.word	0x08005691
 8005628:	08005769 	.word	0x08005769
 800562c:	08005769 	.word	0x08005769
 8005630:	08005769 	.word	0x08005769
 8005634:	080056d9 	.word	0x080056d9
 8005638:	08005769 	.word	0x08005769
 800563c:	08005769 	.word	0x08005769
 8005640:	08005769 	.word	0x08005769
 8005644:	08005721 	.word	0x08005721
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	4a72      	ldr	r2, [pc, #456]	; (8005818 <HAL_TIM_PWM_Start_DMA+0x340>)
 800564e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	4a71      	ldr	r2, [pc, #452]	; (800581c <HAL_TIM_PWM_Start_DMA+0x344>)
 8005656:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	4a70      	ldr	r2, [pc, #448]	; (8005820 <HAL_TIM_PWM_Start_DMA+0x348>)
 800565e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005664:	6879      	ldr	r1, [r7, #4]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	3334      	adds	r3, #52	; 0x34
 800566c:	461a      	mov	r2, r3
 800566e:	887b      	ldrh	r3, [r7, #2]
 8005670:	f7fd f810 	bl	8002694 <HAL_DMA_Start_IT>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e0c7      	b.n	800580e <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68da      	ldr	r2, [r3, #12]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800568c:	60da      	str	r2, [r3, #12]
      break;
 800568e:	e06e      	b.n	800576e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005694:	4a60      	ldr	r2, [pc, #384]	; (8005818 <HAL_TIM_PWM_Start_DMA+0x340>)
 8005696:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569c:	4a5f      	ldr	r2, [pc, #380]	; (800581c <HAL_TIM_PWM_Start_DMA+0x344>)
 800569e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a4:	4a5e      	ldr	r2, [pc, #376]	; (8005820 <HAL_TIM_PWM_Start_DMA+0x348>)
 80056a6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80056ac:	6879      	ldr	r1, [r7, #4]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3338      	adds	r3, #56	; 0x38
 80056b4:	461a      	mov	r2, r3
 80056b6:	887b      	ldrh	r3, [r7, #2]
 80056b8:	f7fc ffec 	bl	8002694 <HAL_DMA_Start_IT>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e0a3      	b.n	800580e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056d4:	60da      	str	r2, [r3, #12]
      break;
 80056d6:	e04a      	b.n	800576e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	4a4e      	ldr	r2, [pc, #312]	; (8005818 <HAL_TIM_PWM_Start_DMA+0x340>)
 80056de:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e4:	4a4d      	ldr	r2, [pc, #308]	; (800581c <HAL_TIM_PWM_Start_DMA+0x344>)
 80056e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ec:	4a4c      	ldr	r2, [pc, #304]	; (8005820 <HAL_TIM_PWM_Start_DMA+0x348>)
 80056ee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80056f4:	6879      	ldr	r1, [r7, #4]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	333c      	adds	r3, #60	; 0x3c
 80056fc:	461a      	mov	r2, r3
 80056fe:	887b      	ldrh	r3, [r7, #2]
 8005700:	f7fc ffc8 	bl	8002694 <HAL_DMA_Start_IT>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e07f      	b.n	800580e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68da      	ldr	r2, [r3, #12]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800571c:	60da      	str	r2, [r3, #12]
      break;
 800571e:	e026      	b.n	800576e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005724:	4a3c      	ldr	r2, [pc, #240]	; (8005818 <HAL_TIM_PWM_Start_DMA+0x340>)
 8005726:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	4a3b      	ldr	r2, [pc, #236]	; (800581c <HAL_TIM_PWM_Start_DMA+0x344>)
 800572e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005734:	4a3a      	ldr	r2, [pc, #232]	; (8005820 <HAL_TIM_PWM_Start_DMA+0x348>)
 8005736:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800573c:	6879      	ldr	r1, [r7, #4]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3340      	adds	r3, #64	; 0x40
 8005744:	461a      	mov	r2, r3
 8005746:	887b      	ldrh	r3, [r7, #2]
 8005748:	f7fc ffa4 	bl	8002694 <HAL_DMA_Start_IT>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e05b      	b.n	800580e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68da      	ldr	r2, [r3, #12]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005764:	60da      	str	r2, [r3, #12]
      break;
 8005766:	e002      	b.n	800576e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	75fb      	strb	r3, [r7, #23]
      break;
 800576c:	bf00      	nop
  }

  if (status == HAL_OK)
 800576e:	7dfb      	ldrb	r3, [r7, #23]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d14b      	bne.n	800580c <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2201      	movs	r2, #1
 800577a:	68b9      	ldr	r1, [r7, #8]
 800577c:	4618      	mov	r0, r3
 800577e:	f000 fe35 	bl	80063ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a27      	ldr	r2, [pc, #156]	; (8005824 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d107      	bne.n	800579c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800579a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a20      	ldr	r2, [pc, #128]	; (8005824 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d018      	beq.n	80057d8 <HAL_TIM_PWM_Start_DMA+0x300>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ae:	d013      	beq.n	80057d8 <HAL_TIM_PWM_Start_DMA+0x300>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a1c      	ldr	r2, [pc, #112]	; (8005828 <HAL_TIM_PWM_Start_DMA+0x350>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00e      	beq.n	80057d8 <HAL_TIM_PWM_Start_DMA+0x300>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a1b      	ldr	r2, [pc, #108]	; (800582c <HAL_TIM_PWM_Start_DMA+0x354>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d009      	beq.n	80057d8 <HAL_TIM_PWM_Start_DMA+0x300>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a19      	ldr	r2, [pc, #100]	; (8005830 <HAL_TIM_PWM_Start_DMA+0x358>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d004      	beq.n	80057d8 <HAL_TIM_PWM_Start_DMA+0x300>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a18      	ldr	r2, [pc, #96]	; (8005834 <HAL_TIM_PWM_Start_DMA+0x35c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d111      	bne.n	80057fc <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	2b06      	cmp	r3, #6
 80057e8:	d010      	beq.n	800580c <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f042 0201 	orr.w	r2, r2, #1
 80057f8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057fa:	e007      	b.n	800580c <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0201 	orr.w	r2, r2, #1
 800580a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800580c:	7dfb      	ldrb	r3, [r7, #23]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	08005d91 	.word	0x08005d91
 800581c:	08005e39 	.word	0x08005e39
 8005820:	08005cff 	.word	0x08005cff
 8005824:	40010000 	.word	0x40010000
 8005828:	40000400 	.word	0x40000400
 800582c:	40000800 	.word	0x40000800
 8005830:	40000c00 	.word	0x40000c00
 8005834:	40014000 	.word	0x40014000

08005838 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005842:	2300      	movs	r3, #0
 8005844:	73fb      	strb	r3, [r7, #15]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b0c      	cmp	r3, #12
 800584a:	d855      	bhi.n	80058f8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800584c:	a201      	add	r2, pc, #4	; (adr r2, 8005854 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800584e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005852:	bf00      	nop
 8005854:	08005889 	.word	0x08005889
 8005858:	080058f9 	.word	0x080058f9
 800585c:	080058f9 	.word	0x080058f9
 8005860:	080058f9 	.word	0x080058f9
 8005864:	080058a5 	.word	0x080058a5
 8005868:	080058f9 	.word	0x080058f9
 800586c:	080058f9 	.word	0x080058f9
 8005870:	080058f9 	.word	0x080058f9
 8005874:	080058c1 	.word	0x080058c1
 8005878:	080058f9 	.word	0x080058f9
 800587c:	080058f9 	.word	0x080058f9
 8005880:	080058f9 	.word	0x080058f9
 8005884:	080058dd 	.word	0x080058dd
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68da      	ldr	r2, [r3, #12]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005896:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	4618      	mov	r0, r3
 800589e:	f7fc ff51 	bl	8002744 <HAL_DMA_Abort_IT>
      break;
 80058a2:	e02c      	b.n	80058fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68da      	ldr	r2, [r3, #12]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7fc ff43 	bl	8002744 <HAL_DMA_Abort_IT>
      break;
 80058be:	e01e      	b.n	80058fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7fc ff35 	bl	8002744 <HAL_DMA_Abort_IT>
      break;
 80058da:	e010      	b.n	80058fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68da      	ldr	r2, [r3, #12]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058ea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7fc ff27 	bl	8002744 <HAL_DMA_Abort_IT>
      break;
 80058f6:	e002      	b.n	80058fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	73fb      	strb	r3, [r7, #15]
      break;
 80058fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80058fe:	7bfb      	ldrb	r3, [r7, #15]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d157      	bne.n	80059b4 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2200      	movs	r2, #0
 800590a:	6839      	ldr	r1, [r7, #0]
 800590c:	4618      	mov	r0, r3
 800590e:	f000 fd6d 	bl	80063ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a2a      	ldr	r2, [pc, #168]	; (80059c0 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d117      	bne.n	800594c <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6a1a      	ldr	r2, [r3, #32]
 8005922:	f241 1311 	movw	r3, #4369	; 0x1111
 8005926:	4013      	ands	r3, r2
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10f      	bne.n	800594c <HAL_TIM_PWM_Stop_DMA+0x114>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6a1a      	ldr	r2, [r3, #32]
 8005932:	f240 4344 	movw	r3, #1092	; 0x444
 8005936:	4013      	ands	r3, r2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d107      	bne.n	800594c <HAL_TIM_PWM_Stop_DMA+0x114>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800594a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6a1a      	ldr	r2, [r3, #32]
 8005952:	f241 1311 	movw	r3, #4369	; 0x1111
 8005956:	4013      	ands	r3, r2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10f      	bne.n	800597c <HAL_TIM_PWM_Stop_DMA+0x144>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6a1a      	ldr	r2, [r3, #32]
 8005962:	f240 4344 	movw	r3, #1092	; 0x444
 8005966:	4013      	ands	r3, r2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d107      	bne.n	800597c <HAL_TIM_PWM_Stop_DMA+0x144>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0201 	bic.w	r2, r2, #1
 800597a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d104      	bne.n	800598c <HAL_TIM_PWM_Stop_DMA+0x154>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800598a:	e013      	b.n	80059b4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	2b04      	cmp	r3, #4
 8005990:	d104      	bne.n	800599c <HAL_TIM_PWM_Stop_DMA+0x164>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800599a:	e00b      	b.n	80059b4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2b08      	cmp	r3, #8
 80059a0:	d104      	bne.n	80059ac <HAL_TIM_PWM_Stop_DMA+0x174>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059aa:	e003      	b.n	80059b4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80059b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	40010000 	.word	0x40010000

080059c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d101      	bne.n	80059e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059de:	2302      	movs	r3, #2
 80059e0:	e0ae      	b.n	8005b40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b0c      	cmp	r3, #12
 80059ee:	f200 809f 	bhi.w	8005b30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80059f2:	a201      	add	r2, pc, #4	; (adr r2, 80059f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f8:	08005a2d 	.word	0x08005a2d
 80059fc:	08005b31 	.word	0x08005b31
 8005a00:	08005b31 	.word	0x08005b31
 8005a04:	08005b31 	.word	0x08005b31
 8005a08:	08005a6d 	.word	0x08005a6d
 8005a0c:	08005b31 	.word	0x08005b31
 8005a10:	08005b31 	.word	0x08005b31
 8005a14:	08005b31 	.word	0x08005b31
 8005a18:	08005aaf 	.word	0x08005aaf
 8005a1c:	08005b31 	.word	0x08005b31
 8005a20:	08005b31 	.word	0x08005b31
 8005a24:	08005b31 	.word	0x08005b31
 8005a28:	08005aef 	.word	0x08005aef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68b9      	ldr	r1, [r7, #8]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 fab4 	bl	8005fa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699a      	ldr	r2, [r3, #24]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0208 	orr.w	r2, r2, #8
 8005a46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	699a      	ldr	r2, [r3, #24]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 0204 	bic.w	r2, r2, #4
 8005a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6999      	ldr	r1, [r3, #24]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	691a      	ldr	r2, [r3, #16]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	619a      	str	r2, [r3, #24]
      break;
 8005a6a:	e064      	b.n	8005b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68b9      	ldr	r1, [r7, #8]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 fafa 	bl	800606c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	699a      	ldr	r2, [r3, #24]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699a      	ldr	r2, [r3, #24]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6999      	ldr	r1, [r3, #24]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	021a      	lsls	r2, r3, #8
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	619a      	str	r2, [r3, #24]
      break;
 8005aac:	e043      	b.n	8005b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68b9      	ldr	r1, [r7, #8]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 fb45 	bl	8006144 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69da      	ldr	r2, [r3, #28]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f042 0208 	orr.w	r2, r2, #8
 8005ac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69da      	ldr	r2, [r3, #28]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 0204 	bic.w	r2, r2, #4
 8005ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	69d9      	ldr	r1, [r3, #28]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	691a      	ldr	r2, [r3, #16]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	61da      	str	r2, [r3, #28]
      break;
 8005aec:	e023      	b.n	8005b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68b9      	ldr	r1, [r7, #8]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 fb8f 	bl	8006218 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	69da      	ldr	r2, [r3, #28]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69da      	ldr	r2, [r3, #28]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69d9      	ldr	r1, [r3, #28]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	021a      	lsls	r2, r3, #8
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	61da      	str	r2, [r3, #28]
      break;
 8005b2e:	e002      	b.n	8005b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	75fb      	strb	r3, [r7, #23]
      break;
 8005b34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3718      	adds	r7, #24
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d101      	bne.n	8005b64 <HAL_TIM_ConfigClockSource+0x1c>
 8005b60:	2302      	movs	r3, #2
 8005b62:	e0b4      	b.n	8005cce <HAL_TIM_ConfigClockSource+0x186>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b9c:	d03e      	beq.n	8005c1c <HAL_TIM_ConfigClockSource+0xd4>
 8005b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ba2:	f200 8087 	bhi.w	8005cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005baa:	f000 8086 	beq.w	8005cba <HAL_TIM_ConfigClockSource+0x172>
 8005bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb2:	d87f      	bhi.n	8005cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb4:	2b70      	cmp	r3, #112	; 0x70
 8005bb6:	d01a      	beq.n	8005bee <HAL_TIM_ConfigClockSource+0xa6>
 8005bb8:	2b70      	cmp	r3, #112	; 0x70
 8005bba:	d87b      	bhi.n	8005cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bbc:	2b60      	cmp	r3, #96	; 0x60
 8005bbe:	d050      	beq.n	8005c62 <HAL_TIM_ConfigClockSource+0x11a>
 8005bc0:	2b60      	cmp	r3, #96	; 0x60
 8005bc2:	d877      	bhi.n	8005cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc4:	2b50      	cmp	r3, #80	; 0x50
 8005bc6:	d03c      	beq.n	8005c42 <HAL_TIM_ConfigClockSource+0xfa>
 8005bc8:	2b50      	cmp	r3, #80	; 0x50
 8005bca:	d873      	bhi.n	8005cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bcc:	2b40      	cmp	r3, #64	; 0x40
 8005bce:	d058      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0x13a>
 8005bd0:	2b40      	cmp	r3, #64	; 0x40
 8005bd2:	d86f      	bhi.n	8005cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd4:	2b30      	cmp	r3, #48	; 0x30
 8005bd6:	d064      	beq.n	8005ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8005bd8:	2b30      	cmp	r3, #48	; 0x30
 8005bda:	d86b      	bhi.n	8005cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005bdc:	2b20      	cmp	r3, #32
 8005bde:	d060      	beq.n	8005ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8005be0:	2b20      	cmp	r3, #32
 8005be2:	d867      	bhi.n	8005cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d05c      	beq.n	8005ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8005be8:	2b10      	cmp	r3, #16
 8005bea:	d05a      	beq.n	8005ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8005bec:	e062      	b.n	8005cb4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6818      	ldr	r0, [r3, #0]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	6899      	ldr	r1, [r3, #8]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	f000 fbd5 	bl	80063ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	609a      	str	r2, [r3, #8]
      break;
 8005c1a:	e04f      	b.n	8005cbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6818      	ldr	r0, [r3, #0]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	6899      	ldr	r1, [r3, #8]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f000 fbbe 	bl	80063ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c3e:	609a      	str	r2, [r3, #8]
      break;
 8005c40:	e03c      	b.n	8005cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6818      	ldr	r0, [r3, #0]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	6859      	ldr	r1, [r3, #4]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f000 fb32 	bl	80062b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2150      	movs	r1, #80	; 0x50
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 fb8b 	bl	8006376 <TIM_ITRx_SetConfig>
      break;
 8005c60:	e02c      	b.n	8005cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6818      	ldr	r0, [r3, #0]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	6859      	ldr	r1, [r3, #4]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	f000 fb51 	bl	8006316 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2160      	movs	r1, #96	; 0x60
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 fb7b 	bl	8006376 <TIM_ITRx_SetConfig>
      break;
 8005c80:	e01c      	b.n	8005cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6818      	ldr	r0, [r3, #0]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	6859      	ldr	r1, [r3, #4]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	f000 fb12 	bl	80062b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2140      	movs	r1, #64	; 0x40
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 fb6b 	bl	8006376 <TIM_ITRx_SetConfig>
      break;
 8005ca0:	e00c      	b.n	8005cbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4619      	mov	r1, r3
 8005cac:	4610      	mov	r0, r2
 8005cae:	f000 fb62 	bl	8006376 <TIM_ITRx_SetConfig>
      break;
 8005cb2:	e003      	b.n	8005cbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8005cb8:	e000      	b.n	8005cbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005cba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005cde:	bf00      	nop
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b083      	sub	sp, #12
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005cf2:	bf00      	nop
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b084      	sub	sp, #16
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d107      	bne.n	8005d26 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d24:	e02a      	b.n	8005d7c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d107      	bne.n	8005d40 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2202      	movs	r2, #2
 8005d34:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d3e:	e01d      	b.n	8005d7c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d107      	bne.n	8005d5a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2204      	movs	r2, #4
 8005d4e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d58:	e010      	b.n	8005d7c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d107      	bne.n	8005d74 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2208      	movs	r2, #8
 8005d68:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d72:	e003      	b.n	8005d7c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f7ff ffb4 	bl	8005cea <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	771a      	strb	r2, [r3, #28]
}
 8005d88:	bf00      	nop
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d10b      	bne.n	8005dc0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2201      	movs	r2, #1
 8005dac:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d136      	bne.n	8005e24 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dbe:	e031      	b.n	8005e24 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d10b      	bne.n	8005de2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2202      	movs	r2, #2
 8005dce:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d125      	bne.n	8005e24 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005de0:	e020      	b.n	8005e24 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d10b      	bne.n	8005e04 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2204      	movs	r2, #4
 8005df0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d114      	bne.n	8005e24 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e02:	e00f      	b.n	8005e24 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d10a      	bne.n	8005e24 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2208      	movs	r2, #8
 8005e12:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d103      	bne.n	8005e24 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f7fb fa2b 	bl	8001280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	771a      	strb	r2, [r3, #28]
}
 8005e30:	bf00      	nop
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e44:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d103      	bne.n	8005e58 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2201      	movs	r2, #1
 8005e54:	771a      	strb	r2, [r3, #28]
 8005e56:	e019      	b.n	8005e8c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d103      	bne.n	8005e6a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2202      	movs	r2, #2
 8005e66:	771a      	strb	r2, [r3, #28]
 8005e68:	e010      	b.n	8005e8c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d103      	bne.n	8005e7c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2204      	movs	r2, #4
 8005e78:	771a      	strb	r2, [r3, #28]
 8005e7a:	e007      	b.n	8005e8c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d102      	bne.n	8005e8c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2208      	movs	r2, #8
 8005e8a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f7ff ff22 	bl	8005cd6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	771a      	strb	r2, [r3, #28]
}
 8005e98:	bf00      	nop
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a34      	ldr	r2, [pc, #208]	; (8005f84 <TIM_Base_SetConfig+0xe4>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d00f      	beq.n	8005ed8 <TIM_Base_SetConfig+0x38>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ebe:	d00b      	beq.n	8005ed8 <TIM_Base_SetConfig+0x38>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a31      	ldr	r2, [pc, #196]	; (8005f88 <TIM_Base_SetConfig+0xe8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d007      	beq.n	8005ed8 <TIM_Base_SetConfig+0x38>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a30      	ldr	r2, [pc, #192]	; (8005f8c <TIM_Base_SetConfig+0xec>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d003      	beq.n	8005ed8 <TIM_Base_SetConfig+0x38>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a2f      	ldr	r2, [pc, #188]	; (8005f90 <TIM_Base_SetConfig+0xf0>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d108      	bne.n	8005eea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a25      	ldr	r2, [pc, #148]	; (8005f84 <TIM_Base_SetConfig+0xe4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d01b      	beq.n	8005f2a <TIM_Base_SetConfig+0x8a>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ef8:	d017      	beq.n	8005f2a <TIM_Base_SetConfig+0x8a>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a22      	ldr	r2, [pc, #136]	; (8005f88 <TIM_Base_SetConfig+0xe8>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d013      	beq.n	8005f2a <TIM_Base_SetConfig+0x8a>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a21      	ldr	r2, [pc, #132]	; (8005f8c <TIM_Base_SetConfig+0xec>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d00f      	beq.n	8005f2a <TIM_Base_SetConfig+0x8a>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a20      	ldr	r2, [pc, #128]	; (8005f90 <TIM_Base_SetConfig+0xf0>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d00b      	beq.n	8005f2a <TIM_Base_SetConfig+0x8a>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a1f      	ldr	r2, [pc, #124]	; (8005f94 <TIM_Base_SetConfig+0xf4>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d007      	beq.n	8005f2a <TIM_Base_SetConfig+0x8a>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a1e      	ldr	r2, [pc, #120]	; (8005f98 <TIM_Base_SetConfig+0xf8>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d003      	beq.n	8005f2a <TIM_Base_SetConfig+0x8a>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a1d      	ldr	r2, [pc, #116]	; (8005f9c <TIM_Base_SetConfig+0xfc>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d108      	bne.n	8005f3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a08      	ldr	r2, [pc, #32]	; (8005f84 <TIM_Base_SetConfig+0xe4>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d103      	bne.n	8005f70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	691a      	ldr	r2, [r3, #16]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	615a      	str	r2, [r3, #20]
}
 8005f76:	bf00      	nop
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	40010000 	.word	0x40010000
 8005f88:	40000400 	.word	0x40000400
 8005f8c:	40000800 	.word	0x40000800
 8005f90:	40000c00 	.word	0x40000c00
 8005f94:	40014000 	.word	0x40014000
 8005f98:	40014400 	.word	0x40014400
 8005f9c:	40014800 	.word	0x40014800

08005fa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	f023 0201 	bic.w	r2, r3, #1
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f023 0303 	bic.w	r3, r3, #3
 8005fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f023 0302 	bic.w	r3, r3, #2
 8005fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a1c      	ldr	r2, [pc, #112]	; (8006068 <TIM_OC1_SetConfig+0xc8>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d10c      	bne.n	8006016 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	f023 0308 	bic.w	r3, r3, #8
 8006002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	4313      	orrs	r3, r2
 800600c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f023 0304 	bic.w	r3, r3, #4
 8006014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a13      	ldr	r2, [pc, #76]	; (8006068 <TIM_OC1_SetConfig+0xc8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d111      	bne.n	8006042 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800602c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	4313      	orrs	r3, r2
 8006036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	4313      	orrs	r3, r2
 8006040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	685a      	ldr	r2, [r3, #4]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	621a      	str	r2, [r3, #32]
}
 800605c:	bf00      	nop
 800605e:	371c      	adds	r7, #28
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	40010000 	.word	0x40010000

0800606c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	f023 0210 	bic.w	r2, r3, #16
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800609a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	021b      	lsls	r3, r3, #8
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f023 0320 	bic.w	r3, r3, #32
 80060b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	011b      	lsls	r3, r3, #4
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a1e      	ldr	r2, [pc, #120]	; (8006140 <TIM_OC2_SetConfig+0xd4>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d10d      	bne.n	80060e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	011b      	lsls	r3, r3, #4
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	4313      	orrs	r3, r2
 80060de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a15      	ldr	r2, [pc, #84]	; (8006140 <TIM_OC2_SetConfig+0xd4>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d113      	bne.n	8006118 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	4313      	orrs	r3, r2
 800610a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	4313      	orrs	r3, r2
 8006116:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	621a      	str	r2, [r3, #32]
}
 8006132:	bf00      	nop
 8006134:	371c      	adds	r7, #28
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	40010000 	.word	0x40010000

08006144 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006144:	b480      	push	{r7}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 0303 	bic.w	r3, r3, #3
 800617a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800618c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	021b      	lsls	r3, r3, #8
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	4313      	orrs	r3, r2
 8006198:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a1d      	ldr	r2, [pc, #116]	; (8006214 <TIM_OC3_SetConfig+0xd0>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d10d      	bne.n	80061be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	021b      	lsls	r3, r3, #8
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a14      	ldr	r2, [pc, #80]	; (8006214 <TIM_OC3_SetConfig+0xd0>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d113      	bne.n	80061ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	011b      	lsls	r3, r3, #4
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	4313      	orrs	r3, r2
 80061e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	011b      	lsls	r3, r3, #4
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	621a      	str	r2, [r3, #32]
}
 8006208:	bf00      	nop
 800620a:	371c      	adds	r7, #28
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	40010000 	.word	0x40010000

08006218 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800624e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	021b      	lsls	r3, r3, #8
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	4313      	orrs	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006262:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	031b      	lsls	r3, r3, #12
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	4313      	orrs	r3, r2
 800626e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a10      	ldr	r2, [pc, #64]	; (80062b4 <TIM_OC4_SetConfig+0x9c>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d109      	bne.n	800628c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800627e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	019b      	lsls	r3, r3, #6
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	4313      	orrs	r3, r2
 800628a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	621a      	str	r2, [r3, #32]
}
 80062a6:	bf00      	nop
 80062a8:	371c      	adds	r7, #28
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	40010000 	.word	0x40010000

080062b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b087      	sub	sp, #28
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	f023 0201 	bic.w	r2, r3, #1
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	011b      	lsls	r3, r3, #4
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f023 030a 	bic.w	r3, r3, #10
 80062f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	621a      	str	r2, [r3, #32]
}
 800630a:	bf00      	nop
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006316:	b480      	push	{r7}
 8006318:	b087      	sub	sp, #28
 800631a:	af00      	add	r7, sp, #0
 800631c:	60f8      	str	r0, [r7, #12]
 800631e:	60b9      	str	r1, [r7, #8]
 8006320:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	f023 0210 	bic.w	r2, r3, #16
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6a1b      	ldr	r3, [r3, #32]
 8006338:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006340:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	031b      	lsls	r3, r3, #12
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	4313      	orrs	r3, r2
 800634a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006352:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	011b      	lsls	r3, r3, #4
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	4313      	orrs	r3, r2
 800635c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	621a      	str	r2, [r3, #32]
}
 800636a:	bf00      	nop
 800636c:	371c      	adds	r7, #28
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006376:	b480      	push	{r7}
 8006378:	b085      	sub	sp, #20
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	4313      	orrs	r3, r2
 8006394:	f043 0307 	orr.w	r3, r3, #7
 8006398:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	609a      	str	r2, [r3, #8]
}
 80063a0:	bf00      	nop
 80063a2:	3714      	adds	r7, #20
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	021a      	lsls	r2, r3, #8
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	431a      	orrs	r2, r3
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	609a      	str	r2, [r3, #8]
}
 80063e0:	bf00      	nop
 80063e2:	371c      	adds	r7, #28
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b087      	sub	sp, #28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	f003 031f 	and.w	r3, r3, #31
 80063fe:	2201      	movs	r2, #1
 8006400:	fa02 f303 	lsl.w	r3, r2, r3
 8006404:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6a1a      	ldr	r2, [r3, #32]
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	43db      	mvns	r3, r3
 800640e:	401a      	ands	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a1a      	ldr	r2, [r3, #32]
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	f003 031f 	and.w	r3, r3, #31
 800641e:	6879      	ldr	r1, [r7, #4]
 8006420:	fa01 f303 	lsl.w	r3, r1, r3
 8006424:	431a      	orrs	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	621a      	str	r2, [r3, #32]
}
 800642a:	bf00      	nop
 800642c:	371c      	adds	r7, #28
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
	...

08006438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006448:	2b01      	cmp	r3, #1
 800644a:	d101      	bne.n	8006450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800644c:	2302      	movs	r3, #2
 800644e:	e050      	b.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2202      	movs	r2, #2
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006476:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	4313      	orrs	r3, r2
 8006480:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a1c      	ldr	r2, [pc, #112]	; (8006500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d018      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800649c:	d013      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a18      	ldr	r2, [pc, #96]	; (8006504 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00e      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a16      	ldr	r2, [pc, #88]	; (8006508 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d009      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a15      	ldr	r2, [pc, #84]	; (800650c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d004      	beq.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a13      	ldr	r2, [pc, #76]	; (8006510 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d10c      	bne.n	80064e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	40010000 	.word	0x40010000
 8006504:	40000400 	.word	0x40000400
 8006508:	40000800 	.word	0x40000800
 800650c:	40000c00 	.word	0x40000c00
 8006510:	40014000 	.word	0x40014000

08006514 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800652c:	2302      	movs	r3, #2
 800652e:	e03d      	b.n	80065ac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	4313      	orrs	r3, r2
 8006552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	4313      	orrs	r3, r2
 8006560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4313      	orrs	r3, r2
 800656e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	4313      	orrs	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065b8:	b084      	sub	sp, #16
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b084      	sub	sp, #16
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	f107 001c 	add.w	r0, r7, #28
 80065c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d122      	bne.n	8006616 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80065e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80065f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d105      	bne.n	800660a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f001 fb1c 	bl	8007c48 <USB_CoreReset>
 8006610:	4603      	mov	r3, r0
 8006612:	73fb      	strb	r3, [r7, #15]
 8006614:	e01a      	b.n	800664c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f001 fb10 	bl	8007c48 <USB_CoreReset>
 8006628:	4603      	mov	r3, r0
 800662a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800662c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800662e:	2b00      	cmp	r3, #0
 8006630:	d106      	bne.n	8006640 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006636:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	639a      	str	r2, [r3, #56]	; 0x38
 800663e:	e005      	b.n	800664c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006644:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800664c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664e:	2b01      	cmp	r3, #1
 8006650:	d10b      	bne.n	800666a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f043 0206 	orr.w	r2, r3, #6
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f043 0220 	orr.w	r2, r3, #32
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800666a:	7bfb      	ldrb	r3, [r7, #15]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006676:	b004      	add	sp, #16
 8006678:	4770      	bx	lr
	...

0800667c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	4613      	mov	r3, r2
 8006688:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800668a:	79fb      	ldrb	r3, [r7, #7]
 800668c:	2b02      	cmp	r3, #2
 800668e:	d165      	bne.n	800675c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	4a41      	ldr	r2, [pc, #260]	; (8006798 <USB_SetTurnaroundTime+0x11c>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d906      	bls.n	80066a6 <USB_SetTurnaroundTime+0x2a>
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	4a40      	ldr	r2, [pc, #256]	; (800679c <USB_SetTurnaroundTime+0x120>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d202      	bcs.n	80066a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80066a0:	230f      	movs	r3, #15
 80066a2:	617b      	str	r3, [r7, #20]
 80066a4:	e062      	b.n	800676c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	4a3c      	ldr	r2, [pc, #240]	; (800679c <USB_SetTurnaroundTime+0x120>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d306      	bcc.n	80066bc <USB_SetTurnaroundTime+0x40>
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	4a3b      	ldr	r2, [pc, #236]	; (80067a0 <USB_SetTurnaroundTime+0x124>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d202      	bcs.n	80066bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80066b6:	230e      	movs	r3, #14
 80066b8:	617b      	str	r3, [r7, #20]
 80066ba:	e057      	b.n	800676c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	4a38      	ldr	r2, [pc, #224]	; (80067a0 <USB_SetTurnaroundTime+0x124>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d306      	bcc.n	80066d2 <USB_SetTurnaroundTime+0x56>
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	4a37      	ldr	r2, [pc, #220]	; (80067a4 <USB_SetTurnaroundTime+0x128>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d202      	bcs.n	80066d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80066cc:	230d      	movs	r3, #13
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	e04c      	b.n	800676c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	4a33      	ldr	r2, [pc, #204]	; (80067a4 <USB_SetTurnaroundTime+0x128>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d306      	bcc.n	80066e8 <USB_SetTurnaroundTime+0x6c>
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	4a32      	ldr	r2, [pc, #200]	; (80067a8 <USB_SetTurnaroundTime+0x12c>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d802      	bhi.n	80066e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80066e2:	230c      	movs	r3, #12
 80066e4:	617b      	str	r3, [r7, #20]
 80066e6:	e041      	b.n	800676c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	4a2f      	ldr	r2, [pc, #188]	; (80067a8 <USB_SetTurnaroundTime+0x12c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d906      	bls.n	80066fe <USB_SetTurnaroundTime+0x82>
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	4a2e      	ldr	r2, [pc, #184]	; (80067ac <USB_SetTurnaroundTime+0x130>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d802      	bhi.n	80066fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80066f8:	230b      	movs	r3, #11
 80066fa:	617b      	str	r3, [r7, #20]
 80066fc:	e036      	b.n	800676c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	4a2a      	ldr	r2, [pc, #168]	; (80067ac <USB_SetTurnaroundTime+0x130>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d906      	bls.n	8006714 <USB_SetTurnaroundTime+0x98>
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	4a29      	ldr	r2, [pc, #164]	; (80067b0 <USB_SetTurnaroundTime+0x134>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d802      	bhi.n	8006714 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800670e:	230a      	movs	r3, #10
 8006710:	617b      	str	r3, [r7, #20]
 8006712:	e02b      	b.n	800676c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	4a26      	ldr	r2, [pc, #152]	; (80067b0 <USB_SetTurnaroundTime+0x134>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d906      	bls.n	800672a <USB_SetTurnaroundTime+0xae>
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	4a25      	ldr	r2, [pc, #148]	; (80067b4 <USB_SetTurnaroundTime+0x138>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d202      	bcs.n	800672a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006724:	2309      	movs	r3, #9
 8006726:	617b      	str	r3, [r7, #20]
 8006728:	e020      	b.n	800676c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	4a21      	ldr	r2, [pc, #132]	; (80067b4 <USB_SetTurnaroundTime+0x138>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d306      	bcc.n	8006740 <USB_SetTurnaroundTime+0xc4>
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	4a20      	ldr	r2, [pc, #128]	; (80067b8 <USB_SetTurnaroundTime+0x13c>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d802      	bhi.n	8006740 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800673a:	2308      	movs	r3, #8
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	e015      	b.n	800676c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	4a1d      	ldr	r2, [pc, #116]	; (80067b8 <USB_SetTurnaroundTime+0x13c>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d906      	bls.n	8006756 <USB_SetTurnaroundTime+0xda>
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	4a1c      	ldr	r2, [pc, #112]	; (80067bc <USB_SetTurnaroundTime+0x140>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d202      	bcs.n	8006756 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006750:	2307      	movs	r3, #7
 8006752:	617b      	str	r3, [r7, #20]
 8006754:	e00a      	b.n	800676c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006756:	2306      	movs	r3, #6
 8006758:	617b      	str	r3, [r7, #20]
 800675a:	e007      	b.n	800676c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800675c:	79fb      	ldrb	r3, [r7, #7]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d102      	bne.n	8006768 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006762:	2309      	movs	r3, #9
 8006764:	617b      	str	r3, [r7, #20]
 8006766:	e001      	b.n	800676c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006768:	2309      	movs	r3, #9
 800676a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	68da      	ldr	r2, [r3, #12]
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	029b      	lsls	r3, r3, #10
 8006780:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006784:	431a      	orrs	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	371c      	adds	r7, #28
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	00d8acbf 	.word	0x00d8acbf
 800679c:	00e4e1c0 	.word	0x00e4e1c0
 80067a0:	00f42400 	.word	0x00f42400
 80067a4:	01067380 	.word	0x01067380
 80067a8:	011a499f 	.word	0x011a499f
 80067ac:	01312cff 	.word	0x01312cff
 80067b0:	014ca43f 	.word	0x014ca43f
 80067b4:	016e3600 	.word	0x016e3600
 80067b8:	01a6ab1f 	.word	0x01a6ab1f
 80067bc:	01e84800 	.word	0x01e84800

080067c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f043 0201 	orr.w	r2, r3, #1
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b083      	sub	sp, #12
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f023 0201 	bic.w	r2, r3, #1
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	460b      	mov	r3, r1
 800680e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006810:	2300      	movs	r3, #0
 8006812:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006820:	78fb      	ldrb	r3, [r7, #3]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d115      	bne.n	8006852 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006832:	2001      	movs	r0, #1
 8006834:	f7fb fd4a 	bl	80022cc <HAL_Delay>
      ms++;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3301      	adds	r3, #1
 800683c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f001 f972 	bl	8007b28 <USB_GetMode>
 8006844:	4603      	mov	r3, r0
 8006846:	2b01      	cmp	r3, #1
 8006848:	d01e      	beq.n	8006888 <USB_SetCurrentMode+0x84>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2b31      	cmp	r3, #49	; 0x31
 800684e:	d9f0      	bls.n	8006832 <USB_SetCurrentMode+0x2e>
 8006850:	e01a      	b.n	8006888 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006852:	78fb      	ldrb	r3, [r7, #3]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d115      	bne.n	8006884 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006864:	2001      	movs	r0, #1
 8006866:	f7fb fd31 	bl	80022cc <HAL_Delay>
      ms++;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3301      	adds	r3, #1
 800686e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f001 f959 	bl	8007b28 <USB_GetMode>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d005      	beq.n	8006888 <USB_SetCurrentMode+0x84>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b31      	cmp	r3, #49	; 0x31
 8006880:	d9f0      	bls.n	8006864 <USB_SetCurrentMode+0x60>
 8006882:	e001      	b.n	8006888 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e005      	b.n	8006894 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2b32      	cmp	r3, #50	; 0x32
 800688c:	d101      	bne.n	8006892 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e000      	b.n	8006894 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800689c:	b084      	sub	sp, #16
 800689e:	b580      	push	{r7, lr}
 80068a0:	b086      	sub	sp, #24
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80068aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80068b6:	2300      	movs	r3, #0
 80068b8:	613b      	str	r3, [r7, #16]
 80068ba:	e009      	b.n	80068d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	3340      	adds	r3, #64	; 0x40
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	2200      	movs	r2, #0
 80068c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	3301      	adds	r3, #1
 80068ce:	613b      	str	r3, [r7, #16]
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	2b0e      	cmp	r3, #14
 80068d4:	d9f2      	bls.n	80068bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80068d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d11c      	bne.n	8006916 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068ea:	f043 0302 	orr.w	r3, r3, #2
 80068ee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006900:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	639a      	str	r2, [r3, #56]	; 0x38
 8006914:	e00b      	b.n	800692e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006926:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006934:	461a      	mov	r2, r3
 8006936:	2300      	movs	r3, #0
 8006938:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006940:	4619      	mov	r1, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006948:	461a      	mov	r2, r3
 800694a:	680b      	ldr	r3, [r1, #0]
 800694c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800694e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006950:	2b01      	cmp	r3, #1
 8006952:	d10c      	bne.n	800696e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006956:	2b00      	cmp	r3, #0
 8006958:	d104      	bne.n	8006964 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800695a:	2100      	movs	r1, #0
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f945 	bl	8006bec <USB_SetDevSpeed>
 8006962:	e008      	b.n	8006976 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006964:	2101      	movs	r1, #1
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f940 	bl	8006bec <USB_SetDevSpeed>
 800696c:	e003      	b.n	8006976 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800696e:	2103      	movs	r1, #3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f93b 	bl	8006bec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006976:	2110      	movs	r1, #16
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f8f3 	bl	8006b64 <USB_FlushTxFifo>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d001      	beq.n	8006988 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f90f 	bl	8006bac <USB_FlushRxFifo>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d001      	beq.n	8006998 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800699e:	461a      	mov	r2, r3
 80069a0:	2300      	movs	r3, #0
 80069a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069aa:	461a      	mov	r2, r3
 80069ac:	2300      	movs	r3, #0
 80069ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b6:	461a      	mov	r2, r3
 80069b8:	2300      	movs	r3, #0
 80069ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069bc:	2300      	movs	r3, #0
 80069be:	613b      	str	r3, [r7, #16]
 80069c0:	e043      	b.n	8006a4a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069d8:	d118      	bne.n	8006a0c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10a      	bne.n	80069f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ec:	461a      	mov	r2, r3
 80069ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069f2:	6013      	str	r3, [r2, #0]
 80069f4:	e013      	b.n	8006a1e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a02:	461a      	mov	r2, r3
 8006a04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a08:	6013      	str	r3, [r2, #0]
 8006a0a:	e008      	b.n	8006a1e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a18:	461a      	mov	r2, r3
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	015a      	lsls	r2, r3, #5
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	4413      	add	r3, r2
 8006a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	3301      	adds	r3, #1
 8006a48:	613b      	str	r3, [r7, #16]
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d3b7      	bcc.n	80069c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a52:	2300      	movs	r3, #0
 8006a54:	613b      	str	r3, [r7, #16]
 8006a56:	e043      	b.n	8006ae0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	015a      	lsls	r2, r3, #5
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a6e:	d118      	bne.n	8006aa2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10a      	bne.n	8006a8c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a82:	461a      	mov	r2, r3
 8006a84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a88:	6013      	str	r3, [r2, #0]
 8006a8a:	e013      	b.n	8006ab4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a98:	461a      	mov	r2, r3
 8006a9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a9e:	6013      	str	r3, [r2, #0]
 8006aa0:	e008      	b.n	8006ab4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	015a      	lsls	r2, r3, #5
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aae:	461a      	mov	r2, r3
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	015a      	lsls	r2, r3, #5
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	4413      	add	r3, r2
 8006ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ad8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	3301      	adds	r3, #1
 8006ade:	613b      	str	r3, [r7, #16]
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d3b7      	bcc.n	8006a58 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006af6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006afa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006b08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d105      	bne.n	8006b1c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	f043 0210 	orr.w	r2, r3, #16
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	699a      	ldr	r2, [r3, #24]
 8006b20:	4b0f      	ldr	r3, [pc, #60]	; (8006b60 <USB_DevInit+0x2c4>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d005      	beq.n	8006b3a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	f043 0208 	orr.w	r2, r3, #8
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d107      	bne.n	8006b50 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b48:	f043 0304 	orr.w	r3, r3, #4
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b5c:	b004      	add	sp, #16
 8006b5e:	4770      	bx	lr
 8006b60:	803c3800 	.word	0x803c3800

08006b64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	019b      	lsls	r3, r3, #6
 8006b76:	f043 0220 	orr.w	r2, r3, #32
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3301      	adds	r3, #1
 8006b82:	60fb      	str	r3, [r7, #12]
 8006b84:	4a08      	ldr	r2, [pc, #32]	; (8006ba8 <USB_FlushTxFifo+0x44>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d901      	bls.n	8006b8e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e006      	b.n	8006b9c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	f003 0320 	and.w	r3, r3, #32
 8006b96:	2b20      	cmp	r3, #32
 8006b98:	d0f1      	beq.n	8006b7e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr
 8006ba8:	00030d40 	.word	0x00030d40

08006bac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2210      	movs	r2, #16
 8006bbc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	60fb      	str	r3, [r7, #12]
 8006bc4:	4a08      	ldr	r2, [pc, #32]	; (8006be8 <USB_FlushRxFifo+0x3c>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d901      	bls.n	8006bce <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e006      	b.n	8006bdc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	f003 0310 	and.w	r3, r3, #16
 8006bd6:	2b10      	cmp	r3, #16
 8006bd8:	d0f1      	beq.n	8006bbe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	00030d40 	.word	0x00030d40

08006bec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	78fb      	ldrb	r3, [r7, #3]
 8006c06:	68f9      	ldr	r1, [r7, #12]
 8006c08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3714      	adds	r7, #20
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b087      	sub	sp, #28
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f003 0306 	and.w	r3, r3, #6
 8006c36:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d102      	bne.n	8006c44 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	75fb      	strb	r3, [r7, #23]
 8006c42:	e00a      	b.n	8006c5a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d002      	beq.n	8006c50 <USB_GetDevSpeed+0x32>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2b06      	cmp	r3, #6
 8006c4e:	d102      	bne.n	8006c56 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006c50:	2302      	movs	r3, #2
 8006c52:	75fb      	strb	r3, [r7, #23]
 8006c54:	e001      	b.n	8006c5a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006c56:	230f      	movs	r3, #15
 8006c58:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	371c      	adds	r7, #28
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	785b      	ldrb	r3, [r3, #1]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d13a      	bne.n	8006cfa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c8a:	69da      	ldr	r2, [r3, #28]
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	f003 030f 	and.w	r3, r3, #15
 8006c94:	2101      	movs	r1, #1
 8006c96:	fa01 f303 	lsl.w	r3, r1, r3
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	68f9      	ldr	r1, [r7, #12]
 8006c9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	015a      	lsls	r2, r3, #5
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d155      	bne.n	8006d68 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	78db      	ldrb	r3, [r3, #3]
 8006cd6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cd8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	059b      	lsls	r3, r3, #22
 8006cde:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	0151      	lsls	r1, r2, #5
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	440a      	add	r2, r1
 8006cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cf6:	6013      	str	r3, [r2, #0]
 8006cf8:	e036      	b.n	8006d68 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d00:	69da      	ldr	r2, [r3, #28]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	f003 030f 	and.w	r3, r3, #15
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d10:	041b      	lsls	r3, r3, #16
 8006d12:	68f9      	ldr	r1, [r7, #12]
 8006d14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d11a      	bne.n	8006d68 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	015a      	lsls	r2, r3, #5
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	4413      	add	r3, r2
 8006d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	78db      	ldrb	r3, [r3, #3]
 8006d4c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d4e:	430b      	orrs	r3, r1
 8006d50:	4313      	orrs	r3, r2
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	0151      	lsls	r1, r2, #5
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	440a      	add	r2, r1
 8006d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d66:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
	...

08006d78 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	785b      	ldrb	r3, [r3, #1]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d161      	bne.n	8006e58 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	015a      	lsls	r2, r3, #5
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006da6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006daa:	d11f      	bne.n	8006dec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	015a      	lsls	r2, r3, #5
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4413      	add	r3, r2
 8006db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	0151      	lsls	r1, r2, #5
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	440a      	add	r2, r1
 8006dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006dca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	0151      	lsls	r1, r2, #5
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	440a      	add	r2, r1
 8006de2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006de6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006df2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	f003 030f 	and.w	r3, r3, #15
 8006dfc:	2101      	movs	r1, #1
 8006dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	43db      	mvns	r3, r3
 8006e06:	68f9      	ldr	r1, [r7, #12]
 8006e08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e16:	69da      	ldr	r2, [r3, #28]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	f003 030f 	and.w	r3, r3, #15
 8006e20:	2101      	movs	r1, #1
 8006e22:	fa01 f303 	lsl.w	r3, r1, r3
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	43db      	mvns	r3, r3
 8006e2a:	68f9      	ldr	r1, [r7, #12]
 8006e2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e30:	4013      	ands	r3, r2
 8006e32:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	015a      	lsls	r2, r3, #5
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	0159      	lsls	r1, r3, #5
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	440b      	add	r3, r1
 8006e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e4e:	4619      	mov	r1, r3
 8006e50:	4b35      	ldr	r3, [pc, #212]	; (8006f28 <USB_DeactivateEndpoint+0x1b0>)
 8006e52:	4013      	ands	r3, r2
 8006e54:	600b      	str	r3, [r1, #0]
 8006e56:	e060      	b.n	8006f1a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e6e:	d11f      	bne.n	8006eb0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	0151      	lsls	r1, r2, #5
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	440a      	add	r2, r1
 8006e86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e8e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	0151      	lsls	r1, r2, #5
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	440a      	add	r2, r1
 8006ea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006eae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	f003 030f 	and.w	r3, r3, #15
 8006ec0:	2101      	movs	r1, #1
 8006ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec6:	041b      	lsls	r3, r3, #16
 8006ec8:	43db      	mvns	r3, r3
 8006eca:	68f9      	ldr	r1, [r7, #12]
 8006ecc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eda:	69da      	ldr	r2, [r3, #28]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	f003 030f 	and.w	r3, r3, #15
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eea:	041b      	lsls	r3, r3, #16
 8006eec:	43db      	mvns	r3, r3
 8006eee:	68f9      	ldr	r1, [r7, #12]
 8006ef0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	0159      	lsls	r1, r3, #5
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	440b      	add	r3, r1
 8006f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f12:	4619      	mov	r1, r3
 8006f14:	4b05      	ldr	r3, [pc, #20]	; (8006f2c <USB_DeactivateEndpoint+0x1b4>)
 8006f16:	4013      	ands	r3, r2
 8006f18:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3714      	adds	r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr
 8006f28:	ec337800 	.word	0xec337800
 8006f2c:	eff37800 	.word	0xeff37800

08006f30 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b08a      	sub	sp, #40	; 0x28
 8006f34:	af02      	add	r7, sp, #8
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	785b      	ldrb	r3, [r3, #1]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	f040 815c 	bne.w	800720a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d132      	bne.n	8006fc0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	015a      	lsls	r2, r3, #5
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	4413      	add	r3, r2
 8006f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	0151      	lsls	r1, r2, #5
 8006f6c:	69fa      	ldr	r2, [r7, #28]
 8006f6e:	440a      	add	r2, r1
 8006f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	0151      	lsls	r1, r2, #5
 8006f90:	69fa      	ldr	r2, [r7, #28]
 8006f92:	440a      	add	r2, r1
 8006f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	015a      	lsls	r2, r3, #5
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	0151      	lsls	r1, r2, #5
 8006fb0:	69fa      	ldr	r2, [r7, #28]
 8006fb2:	440a      	add	r2, r1
 8006fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fb8:	0cdb      	lsrs	r3, r3, #19
 8006fba:	04db      	lsls	r3, r3, #19
 8006fbc:	6113      	str	r3, [r2, #16]
 8006fbe:	e074      	b.n	80070aa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	015a      	lsls	r2, r3, #5
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	0151      	lsls	r1, r2, #5
 8006fd2:	69fa      	ldr	r2, [r7, #28]
 8006fd4:	440a      	add	r2, r1
 8006fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fda:	0cdb      	lsrs	r3, r3, #19
 8006fdc:	04db      	lsls	r3, r3, #19
 8006fde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	015a      	lsls	r2, r3, #5
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	0151      	lsls	r1, r2, #5
 8006ff2:	69fa      	ldr	r2, [r7, #28]
 8006ff4:	440a      	add	r2, r1
 8006ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ffa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ffe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007002:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007010:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	6959      	ldr	r1, [r3, #20]
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	440b      	add	r3, r1
 800701c:	1e59      	subs	r1, r3, #1
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	fbb1 f3f3 	udiv	r3, r1, r3
 8007026:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007028:	4b9d      	ldr	r3, [pc, #628]	; (80072a0 <USB_EPStartXfer+0x370>)
 800702a:	400b      	ands	r3, r1
 800702c:	69b9      	ldr	r1, [r7, #24]
 800702e:	0148      	lsls	r0, r1, #5
 8007030:	69f9      	ldr	r1, [r7, #28]
 8007032:	4401      	add	r1, r0
 8007034:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007038:	4313      	orrs	r3, r2
 800703a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007048:	691a      	ldr	r2, [r3, #16]
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007052:	69b9      	ldr	r1, [r7, #24]
 8007054:	0148      	lsls	r0, r1, #5
 8007056:	69f9      	ldr	r1, [r7, #28]
 8007058:	4401      	add	r1, r0
 800705a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800705e:	4313      	orrs	r3, r2
 8007060:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	78db      	ldrb	r3, [r3, #3]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d11f      	bne.n	80070aa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	4413      	add	r3, r2
 8007072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	69ba      	ldr	r2, [r7, #24]
 800707a:	0151      	lsls	r1, r2, #5
 800707c:	69fa      	ldr	r2, [r7, #28]
 800707e:	440a      	add	r2, r1
 8007080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007084:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007088:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	015a      	lsls	r2, r3, #5
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	4413      	add	r3, r2
 8007092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	69ba      	ldr	r2, [r7, #24]
 800709a:	0151      	lsls	r1, r2, #5
 800709c:	69fa      	ldr	r2, [r7, #28]
 800709e:	440a      	add	r2, r1
 80070a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80070aa:	79fb      	ldrb	r3, [r7, #7]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d14b      	bne.n	8007148 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d009      	beq.n	80070cc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c4:	461a      	mov	r2, r3
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	78db      	ldrb	r3, [r3, #3]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d128      	bne.n	8007126 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d110      	bne.n	8007106 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	69ba      	ldr	r2, [r7, #24]
 80070f4:	0151      	lsls	r1, r2, #5
 80070f6:	69fa      	ldr	r2, [r7, #28]
 80070f8:	440a      	add	r2, r1
 80070fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007102:	6013      	str	r3, [r2, #0]
 8007104:	e00f      	b.n	8007126 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	015a      	lsls	r2, r3, #5
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	4413      	add	r3, r2
 800710e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	0151      	lsls	r1, r2, #5
 8007118:	69fa      	ldr	r2, [r7, #28]
 800711a:	440a      	add	r2, r1
 800711c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007124:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	015a      	lsls	r2, r3, #5
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	4413      	add	r3, r2
 800712e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	69ba      	ldr	r2, [r7, #24]
 8007136:	0151      	lsls	r1, r2, #5
 8007138:	69fa      	ldr	r2, [r7, #28]
 800713a:	440a      	add	r2, r1
 800713c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007140:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007144:	6013      	str	r3, [r2, #0]
 8007146:	e12f      	b.n	80073a8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	4413      	add	r3, r2
 8007150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	69ba      	ldr	r2, [r7, #24]
 8007158:	0151      	lsls	r1, r2, #5
 800715a:	69fa      	ldr	r2, [r7, #28]
 800715c:	440a      	add	r2, r1
 800715e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007162:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007166:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	78db      	ldrb	r3, [r3, #3]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d015      	beq.n	800719c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 8117 	beq.w	80073a8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	f003 030f 	and.w	r3, r3, #15
 800718a:	2101      	movs	r1, #1
 800718c:	fa01 f303 	lsl.w	r3, r1, r3
 8007190:	69f9      	ldr	r1, [r7, #28]
 8007192:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007196:	4313      	orrs	r3, r2
 8007198:	634b      	str	r3, [r1, #52]	; 0x34
 800719a:	e105      	b.n	80073a8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d110      	bne.n	80071ce <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	015a      	lsls	r2, r3, #5
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	4413      	add	r3, r2
 80071b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	69ba      	ldr	r2, [r7, #24]
 80071bc:	0151      	lsls	r1, r2, #5
 80071be:	69fa      	ldr	r2, [r7, #28]
 80071c0:	440a      	add	r2, r1
 80071c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071ca:	6013      	str	r3, [r2, #0]
 80071cc:	e00f      	b.n	80071ee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	015a      	lsls	r2, r3, #5
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	4413      	add	r3, r2
 80071d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	0151      	lsls	r1, r2, #5
 80071e0:	69fa      	ldr	r2, [r7, #28]
 80071e2:	440a      	add	r2, r1
 80071e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	68d9      	ldr	r1, [r3, #12]
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	781a      	ldrb	r2, [r3, #0]
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	b298      	uxth	r0, r3
 80071fc:	79fb      	ldrb	r3, [r7, #7]
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	4603      	mov	r3, r0
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f000 fa2b 	bl	800765e <USB_WritePacket>
 8007208:	e0ce      	b.n	80073a8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	015a      	lsls	r2, r3, #5
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	4413      	add	r3, r2
 8007212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	69ba      	ldr	r2, [r7, #24]
 800721a:	0151      	lsls	r1, r2, #5
 800721c:	69fa      	ldr	r2, [r7, #28]
 800721e:	440a      	add	r2, r1
 8007220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007224:	0cdb      	lsrs	r3, r3, #19
 8007226:	04db      	lsls	r3, r3, #19
 8007228:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	015a      	lsls	r2, r3, #5
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	4413      	add	r3, r2
 8007232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	69ba      	ldr	r2, [r7, #24]
 800723a:	0151      	lsls	r1, r2, #5
 800723c:	69fa      	ldr	r2, [r7, #28]
 800723e:	440a      	add	r2, r1
 8007240:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007244:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007248:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800724c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d126      	bne.n	80072a4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	015a      	lsls	r2, r3, #5
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	4413      	add	r3, r2
 800725e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007262:	691a      	ldr	r2, [r3, #16]
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800726c:	69b9      	ldr	r1, [r7, #24]
 800726e:	0148      	lsls	r0, r1, #5
 8007270:	69f9      	ldr	r1, [r7, #28]
 8007272:	4401      	add	r1, r0
 8007274:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007278:	4313      	orrs	r3, r2
 800727a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	69ba      	ldr	r2, [r7, #24]
 800728c:	0151      	lsls	r1, r2, #5
 800728e:	69fa      	ldr	r2, [r7, #28]
 8007290:	440a      	add	r2, r1
 8007292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007296:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800729a:	6113      	str	r3, [r2, #16]
 800729c:	e036      	b.n	800730c <USB_EPStartXfer+0x3dc>
 800729e:	bf00      	nop
 80072a0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	695a      	ldr	r2, [r3, #20]
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	4413      	add	r3, r2
 80072ae:	1e5a      	subs	r2, r3, #1
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c6:	691a      	ldr	r2, [r3, #16]
 80072c8:	8afb      	ldrh	r3, [r7, #22]
 80072ca:	04d9      	lsls	r1, r3, #19
 80072cc:	4b39      	ldr	r3, [pc, #228]	; (80073b4 <USB_EPStartXfer+0x484>)
 80072ce:	400b      	ands	r3, r1
 80072d0:	69b9      	ldr	r1, [r7, #24]
 80072d2:	0148      	lsls	r0, r1, #5
 80072d4:	69f9      	ldr	r1, [r7, #28]
 80072d6:	4401      	add	r1, r0
 80072d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80072dc:	4313      	orrs	r3, r2
 80072de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	015a      	lsls	r2, r3, #5
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	4413      	add	r3, r2
 80072e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ec:	691a      	ldr	r2, [r3, #16]
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	8af9      	ldrh	r1, [r7, #22]
 80072f4:	fb01 f303 	mul.w	r3, r1, r3
 80072f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072fc:	69b9      	ldr	r1, [r7, #24]
 80072fe:	0148      	lsls	r0, r1, #5
 8007300:	69f9      	ldr	r1, [r7, #28]
 8007302:	4401      	add	r1, r0
 8007304:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007308:	4313      	orrs	r3, r2
 800730a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800730c:	79fb      	ldrb	r3, [r7, #7]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d10d      	bne.n	800732e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d009      	beq.n	800732e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	68d9      	ldr	r1, [r3, #12]
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	015a      	lsls	r2, r3, #5
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	4413      	add	r3, r2
 8007326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800732a:	460a      	mov	r2, r1
 800732c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	78db      	ldrb	r3, [r3, #3]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d128      	bne.n	8007388 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007342:	2b00      	cmp	r3, #0
 8007344:	d110      	bne.n	8007368 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	015a      	lsls	r2, r3, #5
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	4413      	add	r3, r2
 800734e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	0151      	lsls	r1, r2, #5
 8007358:	69fa      	ldr	r2, [r7, #28]
 800735a:	440a      	add	r2, r1
 800735c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007360:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007364:	6013      	str	r3, [r2, #0]
 8007366:	e00f      	b.n	8007388 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	015a      	lsls	r2, r3, #5
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	4413      	add	r3, r2
 8007370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	69ba      	ldr	r2, [r7, #24]
 8007378:	0151      	lsls	r1, r2, #5
 800737a:	69fa      	ldr	r2, [r7, #28]
 800737c:	440a      	add	r2, r1
 800737e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007386:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	015a      	lsls	r2, r3, #5
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	4413      	add	r3, r2
 8007390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	69ba      	ldr	r2, [r7, #24]
 8007398:	0151      	lsls	r1, r2, #5
 800739a:	69fa      	ldr	r2, [r7, #28]
 800739c:	440a      	add	r2, r1
 800739e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3720      	adds	r7, #32
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	1ff80000 	.word	0x1ff80000

080073b8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b087      	sub	sp, #28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	4613      	mov	r3, r2
 80073c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	785b      	ldrb	r3, [r3, #1]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	f040 80cd 	bne.w	8007574 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d132      	bne.n	8007448 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	015a      	lsls	r2, r3, #5
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	4413      	add	r3, r2
 80073ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	0151      	lsls	r1, r2, #5
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	440a      	add	r2, r1
 80073f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007400:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007404:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	4413      	add	r3, r2
 800740e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	0151      	lsls	r1, r2, #5
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	440a      	add	r2, r1
 800741c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007420:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007424:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	015a      	lsls	r2, r3, #5
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	4413      	add	r3, r2
 800742e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	0151      	lsls	r1, r2, #5
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	440a      	add	r2, r1
 800743c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007440:	0cdb      	lsrs	r3, r3, #19
 8007442:	04db      	lsls	r3, r3, #19
 8007444:	6113      	str	r3, [r2, #16]
 8007446:	e04e      	b.n	80074e6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	4413      	add	r3, r2
 8007450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	0151      	lsls	r1, r2, #5
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	440a      	add	r2, r1
 800745e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007462:	0cdb      	lsrs	r3, r3, #19
 8007464:	04db      	lsls	r3, r3, #19
 8007466:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	015a      	lsls	r2, r3, #5
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	4413      	add	r3, r2
 8007470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	0151      	lsls	r1, r2, #5
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	440a      	add	r2, r1
 800747e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007482:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007486:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800748a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	695a      	ldr	r2, [r3, #20]
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	429a      	cmp	r2, r3
 8007496:	d903      	bls.n	80074a0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	689a      	ldr	r2, [r3, #8]
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	015a      	lsls	r2, r3, #5
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	4413      	add	r3, r2
 80074a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	693a      	ldr	r2, [r7, #16]
 80074b0:	0151      	lsls	r1, r2, #5
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	440a      	add	r2, r1
 80074b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	015a      	lsls	r2, r3, #5
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	4413      	add	r3, r2
 80074c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074cc:	691a      	ldr	r2, [r3, #16]
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074d6:	6939      	ldr	r1, [r7, #16]
 80074d8:	0148      	lsls	r0, r1, #5
 80074da:	6979      	ldr	r1, [r7, #20]
 80074dc:	4401      	add	r1, r0
 80074de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80074e2:	4313      	orrs	r3, r2
 80074e4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80074e6:	79fb      	ldrb	r3, [r7, #7]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d11e      	bne.n	800752a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d009      	beq.n	8007508 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007500:	461a      	mov	r2, r3
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	015a      	lsls	r2, r3, #5
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	4413      	add	r3, r2
 8007510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	0151      	lsls	r1, r2, #5
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	440a      	add	r2, r1
 800751e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007522:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007526:	6013      	str	r3, [r2, #0]
 8007528:	e092      	b.n	8007650 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	4413      	add	r3, r2
 8007532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	0151      	lsls	r1, r2, #5
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	440a      	add	r2, r1
 8007540:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007544:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007548:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d07e      	beq.n	8007650 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	f003 030f 	and.w	r3, r3, #15
 8007562:	2101      	movs	r1, #1
 8007564:	fa01 f303 	lsl.w	r3, r1, r3
 8007568:	6979      	ldr	r1, [r7, #20]
 800756a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800756e:	4313      	orrs	r3, r2
 8007570:	634b      	str	r3, [r1, #52]	; 0x34
 8007572:	e06d      	b.n	8007650 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	015a      	lsls	r2, r3, #5
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	4413      	add	r3, r2
 800757c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	0151      	lsls	r1, r2, #5
 8007586:	697a      	ldr	r2, [r7, #20]
 8007588:	440a      	add	r2, r1
 800758a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800758e:	0cdb      	lsrs	r3, r3, #19
 8007590:	04db      	lsls	r3, r3, #19
 8007592:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	015a      	lsls	r2, r3, #5
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	4413      	add	r3, r2
 800759c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	0151      	lsls	r1, r2, #5
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	440a      	add	r2, r1
 80075aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80075b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80075b6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d003      	beq.n	80075c8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	689a      	ldr	r2, [r3, #8]
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	693a      	ldr	r2, [r7, #16]
 80075d8:	0151      	lsls	r1, r2, #5
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	440a      	add	r2, r1
 80075de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	015a      	lsls	r2, r3, #5
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	4413      	add	r3, r2
 80075f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f4:	691a      	ldr	r2, [r3, #16]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075fe:	6939      	ldr	r1, [r7, #16]
 8007600:	0148      	lsls	r0, r1, #5
 8007602:	6979      	ldr	r1, [r7, #20]
 8007604:	4401      	add	r1, r0
 8007606:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800760a:	4313      	orrs	r3, r2
 800760c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800760e:	79fb      	ldrb	r3, [r7, #7]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d10d      	bne.n	8007630 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d009      	beq.n	8007630 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	68d9      	ldr	r1, [r3, #12]
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	015a      	lsls	r2, r3, #5
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	4413      	add	r3, r2
 8007628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800762c:	460a      	mov	r2, r1
 800762e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	4413      	add	r3, r2
 8007638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	0151      	lsls	r1, r2, #5
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	440a      	add	r2, r1
 8007646:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800764a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800764e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	371c      	adds	r7, #28
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800765e:	b480      	push	{r7}
 8007660:	b089      	sub	sp, #36	; 0x24
 8007662:	af00      	add	r7, sp, #0
 8007664:	60f8      	str	r0, [r7, #12]
 8007666:	60b9      	str	r1, [r7, #8]
 8007668:	4611      	mov	r1, r2
 800766a:	461a      	mov	r2, r3
 800766c:	460b      	mov	r3, r1
 800766e:	71fb      	strb	r3, [r7, #7]
 8007670:	4613      	mov	r3, r2
 8007672:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800767c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007680:	2b00      	cmp	r3, #0
 8007682:	d123      	bne.n	80076cc <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007684:	88bb      	ldrh	r3, [r7, #4]
 8007686:	3303      	adds	r3, #3
 8007688:	089b      	lsrs	r3, r3, #2
 800768a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800768c:	2300      	movs	r3, #0
 800768e:	61bb      	str	r3, [r7, #24]
 8007690:	e018      	b.n	80076c4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007692:	79fb      	ldrb	r3, [r7, #7]
 8007694:	031a      	lsls	r2, r3, #12
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	4413      	add	r3, r2
 800769a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800769e:	461a      	mov	r2, r3
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	3301      	adds	r3, #1
 80076aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	3301      	adds	r3, #1
 80076b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	3301      	adds	r3, #1
 80076b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	3301      	adds	r3, #1
 80076bc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	3301      	adds	r3, #1
 80076c2:	61bb      	str	r3, [r7, #24]
 80076c4:	69ba      	ldr	r2, [r7, #24]
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d3e2      	bcc.n	8007692 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3724      	adds	r7, #36	; 0x24
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80076da:	b480      	push	{r7}
 80076dc:	b08b      	sub	sp, #44	; 0x2c
 80076de:	af00      	add	r7, sp, #0
 80076e0:	60f8      	str	r0, [r7, #12]
 80076e2:	60b9      	str	r1, [r7, #8]
 80076e4:	4613      	mov	r3, r2
 80076e6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80076f0:	88fb      	ldrh	r3, [r7, #6]
 80076f2:	089b      	lsrs	r3, r3, #2
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80076f8:	88fb      	ldrh	r3, [r7, #6]
 80076fa:	f003 0303 	and.w	r3, r3, #3
 80076fe:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007700:	2300      	movs	r3, #0
 8007702:	623b      	str	r3, [r7, #32]
 8007704:	e014      	b.n	8007730 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007710:	601a      	str	r2, [r3, #0]
    pDest++;
 8007712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007714:	3301      	adds	r3, #1
 8007716:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	3301      	adds	r3, #1
 800771c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800771e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007720:	3301      	adds	r3, #1
 8007722:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	3301      	adds	r3, #1
 8007728:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800772a:	6a3b      	ldr	r3, [r7, #32]
 800772c:	3301      	adds	r3, #1
 800772e:	623b      	str	r3, [r7, #32]
 8007730:	6a3a      	ldr	r2, [r7, #32]
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	429a      	cmp	r2, r3
 8007736:	d3e6      	bcc.n	8007706 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007738:	8bfb      	ldrh	r3, [r7, #30]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d01e      	beq.n	800777c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800773e:	2300      	movs	r3, #0
 8007740:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007748:	461a      	mov	r2, r3
 800774a:	f107 0310 	add.w	r3, r7, #16
 800774e:	6812      	ldr	r2, [r2, #0]
 8007750:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	b2db      	uxtb	r3, r3
 8007758:	00db      	lsls	r3, r3, #3
 800775a:	fa22 f303 	lsr.w	r3, r2, r3
 800775e:	b2da      	uxtb	r2, r3
 8007760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007762:	701a      	strb	r2, [r3, #0]
      i++;
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	3301      	adds	r3, #1
 8007768:	623b      	str	r3, [r7, #32]
      pDest++;
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776c:	3301      	adds	r3, #1
 800776e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007770:	8bfb      	ldrh	r3, [r7, #30]
 8007772:	3b01      	subs	r3, #1
 8007774:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007776:	8bfb      	ldrh	r3, [r7, #30]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1ea      	bne.n	8007752 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800777c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800777e:	4618      	mov	r0, r3
 8007780:	372c      	adds	r7, #44	; 0x2c
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800778a:	b480      	push	{r7}
 800778c:	b085      	sub	sp, #20
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	785b      	ldrb	r3, [r3, #1]
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d12c      	bne.n	8007800 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	015a      	lsls	r2, r3, #5
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	4413      	add	r3, r2
 80077ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	db12      	blt.n	80077de <USB_EPSetStall+0x54>
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00f      	beq.n	80077de <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	015a      	lsls	r2, r3, #5
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	0151      	lsls	r1, r2, #5
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	440a      	add	r2, r1
 80077d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80077dc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	015a      	lsls	r2, r3, #5
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	4413      	add	r3, r2
 80077e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	0151      	lsls	r1, r2, #5
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	440a      	add	r2, r1
 80077f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80077fc:	6013      	str	r3, [r2, #0]
 80077fe:	e02b      	b.n	8007858 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	015a      	lsls	r2, r3, #5
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	4413      	add	r3, r2
 8007808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	db12      	blt.n	8007838 <USB_EPSetStall+0xae>
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00f      	beq.n	8007838 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	015a      	lsls	r2, r3, #5
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	4413      	add	r3, r2
 8007820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	0151      	lsls	r1, r2, #5
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	440a      	add	r2, r1
 800782e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007832:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007836:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	015a      	lsls	r2, r3, #5
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	4413      	add	r3, r2
 8007840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	0151      	lsls	r1, r2, #5
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	440a      	add	r2, r1
 800784e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007852:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007856:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007866:	b480      	push	{r7}
 8007868:	b085      	sub	sp, #20
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	785b      	ldrb	r3, [r3, #1]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d128      	bne.n	80078d4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	015a      	lsls	r2, r3, #5
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	4413      	add	r3, r2
 800788a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68ba      	ldr	r2, [r7, #8]
 8007892:	0151      	lsls	r1, r2, #5
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	440a      	add	r2, r1
 8007898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800789c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	78db      	ldrb	r3, [r3, #3]
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	d003      	beq.n	80078b2 <USB_EPClearStall+0x4c>
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	78db      	ldrb	r3, [r3, #3]
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d138      	bne.n	8007924 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	015a      	lsls	r2, r3, #5
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	4413      	add	r3, r2
 80078ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68ba      	ldr	r2, [r7, #8]
 80078c2:	0151      	lsls	r1, r2, #5
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	440a      	add	r2, r1
 80078c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078d0:	6013      	str	r3, [r2, #0]
 80078d2:	e027      	b.n	8007924 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	015a      	lsls	r2, r3, #5
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68ba      	ldr	r2, [r7, #8]
 80078e4:	0151      	lsls	r1, r2, #5
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	440a      	add	r2, r1
 80078ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	78db      	ldrb	r3, [r3, #3]
 80078f8:	2b03      	cmp	r3, #3
 80078fa:	d003      	beq.n	8007904 <USB_EPClearStall+0x9e>
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	78db      	ldrb	r3, [r3, #3]
 8007900:	2b02      	cmp	r3, #2
 8007902:	d10f      	bne.n	8007924 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	015a      	lsls	r2, r3, #5
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	4413      	add	r3, r2
 800790c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	0151      	lsls	r1, r2, #5
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	440a      	add	r2, r1
 800791a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800791e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007922:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3714      	adds	r7, #20
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007932:	b480      	push	{r7}
 8007934:	b085      	sub	sp, #20
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	460b      	mov	r3, r1
 800793c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007950:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007954:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	78fb      	ldrb	r3, [r7, #3]
 8007960:	011b      	lsls	r3, r3, #4
 8007962:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007966:	68f9      	ldr	r1, [r7, #12]
 8007968:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800796c:	4313      	orrs	r3, r2
 800796e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3714      	adds	r7, #20
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800797e:	b480      	push	{r7}
 8007980:	b085      	sub	sp, #20
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007998:	f023 0303 	bic.w	r3, r3, #3
 800799c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079ac:	f023 0302 	bic.w	r3, r3, #2
 80079b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3714      	adds	r7, #20
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80079da:	f023 0303 	bic.w	r3, r3, #3
 80079de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079ee:	f043 0302 	orr.w	r3, r3, #2
 80079f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b085      	sub	sp, #20
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	4013      	ands	r3, r2
 8007a18:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3714      	adds	r7, #20
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	4013      	ands	r3, r2
 8007a4a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	0c1b      	lsrs	r3, r3, #16
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a78:	69db      	ldr	r3, [r3, #28]
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	b29b      	uxth	r3, r3
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3714      	adds	r7, #20
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007aa0:	78fb      	ldrb	r3, [r7, #3]
 8007aa2:	015a      	lsls	r2, r3, #5
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab6:	695b      	ldr	r3, [r3, #20]
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	4013      	ands	r3, r2
 8007abc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007abe:	68bb      	ldr	r3, [r7, #8]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3714      	adds	r7, #20
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b087      	sub	sp, #28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aee:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007af0:	78fb      	ldrb	r3, [r7, #3]
 8007af2:	f003 030f 	and.w	r3, r3, #15
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	fa22 f303 	lsr.w	r3, r2, r3
 8007afc:	01db      	lsls	r3, r3, #7
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007b06:	78fb      	ldrb	r3, [r7, #3]
 8007b08:	015a      	lsls	r2, r3, #5
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	4013      	ands	r3, r2
 8007b18:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	371c      	adds	r7, #28
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	f003 0301 	and.w	r3, r3, #1
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b5e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007b62:	f023 0307 	bic.w	r3, r3, #7
 8007b66:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b7a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
	...

08007b8c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b087      	sub	sp, #28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	460b      	mov	r3, r1
 8007b96:	607a      	str	r2, [r7, #4]
 8007b98:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	333c      	adds	r3, #60	; 0x3c
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	4a26      	ldr	r2, [pc, #152]	; (8007c44 <USB_EP0_OutStart+0xb8>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d90a      	bls.n	8007bc6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bc0:	d101      	bne.n	8007bc6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	e037      	b.n	8007c36 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bcc:	461a      	mov	r2, r3
 8007bce:	2300      	movs	r3, #0
 8007bd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007be0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007be4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bf4:	f043 0318 	orr.w	r3, r3, #24
 8007bf8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c08:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007c0c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007c0e:	7afb      	ldrb	r3, [r7, #11]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d10f      	bne.n	8007c34 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c2e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007c32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	371c      	adds	r7, #28
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	4f54300a 	.word	0x4f54300a

08007c48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c50:	2300      	movs	r3, #0
 8007c52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	3301      	adds	r3, #1
 8007c58:	60fb      	str	r3, [r7, #12]
 8007c5a:	4a13      	ldr	r2, [pc, #76]	; (8007ca8 <USB_CoreReset+0x60>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d901      	bls.n	8007c64 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e01a      	b.n	8007c9a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	daf3      	bge.n	8007c54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	f043 0201 	orr.w	r2, r3, #1
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	60fb      	str	r3, [r7, #12]
 8007c82:	4a09      	ldr	r2, [pc, #36]	; (8007ca8 <USB_CoreReset+0x60>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d901      	bls.n	8007c8c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e006      	b.n	8007c9a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	f003 0301 	and.w	r3, r3, #1
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d0f1      	beq.n	8007c7c <USB_CoreReset+0x34>

  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	00030d40 	.word	0x00030d40

08007cac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007cb8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007cbc:	f002 f9b0 	bl	800a020 <USBD_static_malloc>
 8007cc0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d105      	bne.n	8007cd4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	e066      	b.n	8007da2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	7c1b      	ldrb	r3, [r3, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d119      	bne.n	8007d18 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ce8:	2202      	movs	r2, #2
 8007cea:	2181      	movs	r1, #129	; 0x81
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f002 f874 	bl	8009dda <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007cf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cfc:	2202      	movs	r2, #2
 8007cfe:	2101      	movs	r1, #1
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f002 f86a 	bl	8009dda <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2210      	movs	r2, #16
 8007d12:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007d16:	e016      	b.n	8007d46 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007d18:	2340      	movs	r3, #64	; 0x40
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	2181      	movs	r1, #129	; 0x81
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f002 f85b 	bl	8009dda <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007d2a:	2340      	movs	r3, #64	; 0x40
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	2101      	movs	r1, #1
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f002 f852 	bl	8009dda <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2210      	movs	r2, #16
 8007d42:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007d46:	2308      	movs	r3, #8
 8007d48:	2203      	movs	r2, #3
 8007d4a:	2182      	movs	r1, #130	; 0x82
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f002 f844 	bl	8009dda <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	7c1b      	ldrb	r3, [r3, #16]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d109      	bne.n	8007d90 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d86:	2101      	movs	r1, #1
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f002 f915 	bl	8009fb8 <USBD_LL_PrepareReceive>
 8007d8e:	e007      	b.n	8007da0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d96:	2340      	movs	r3, #64	; 0x40
 8007d98:	2101      	movs	r1, #1
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f002 f90c 	bl	8009fb8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	460b      	mov	r3, r1
 8007db4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007db6:	2181      	movs	r1, #129	; 0x81
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f002 f834 	bl	8009e26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007dc4:	2101      	movs	r1, #1
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f002 f82d 	bl	8009e26 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007dd4:	2182      	movs	r1, #130	; 0x82
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f002 f825 	bl	8009e26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00e      	beq.n	8007e14 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e06:	4618      	mov	r0, r3
 8007e08:	f002 f918 	bl	800a03c <USBD_static_free>
    pdev->pClassData = NULL;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
	...

08007e20 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e30:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007e32:	2300      	movs	r3, #0
 8007e34:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007e36:	2300      	movs	r3, #0
 8007e38:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d101      	bne.n	8007e48 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e0af      	b.n	8007fa8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d03f      	beq.n	8007ed4 <USBD_CDC_Setup+0xb4>
 8007e54:	2b20      	cmp	r3, #32
 8007e56:	f040 809f 	bne.w	8007f98 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	88db      	ldrh	r3, [r3, #6]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d02e      	beq.n	8007ec0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	b25b      	sxtb	r3, r3
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	da16      	bge.n	8007e9a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	683a      	ldr	r2, [r7, #0]
 8007e76:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007e78:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	88d2      	ldrh	r2, [r2, #6]
 8007e7e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	88db      	ldrh	r3, [r3, #6]
 8007e84:	2b07      	cmp	r3, #7
 8007e86:	bf28      	it	cs
 8007e88:	2307      	movcs	r3, #7
 8007e8a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	89fa      	ldrh	r2, [r7, #14]
 8007e90:	4619      	mov	r1, r3
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f001 fae9 	bl	800946a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007e98:	e085      	b.n	8007fa6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	785a      	ldrb	r2, [r3, #1]
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	88db      	ldrh	r3, [r3, #6]
 8007ea8:	b2da      	uxtb	r2, r3
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007eb0:	6939      	ldr	r1, [r7, #16]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	88db      	ldrh	r3, [r3, #6]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f001 fb02 	bl	80094c2 <USBD_CtlPrepareRx>
      break;
 8007ebe:	e072      	b.n	8007fa6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	683a      	ldr	r2, [r7, #0]
 8007eca:	7850      	ldrb	r0, [r2, #1]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	4798      	blx	r3
      break;
 8007ed2:	e068      	b.n	8007fa6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	785b      	ldrb	r3, [r3, #1]
 8007ed8:	2b0b      	cmp	r3, #11
 8007eda:	d852      	bhi.n	8007f82 <USBD_CDC_Setup+0x162>
 8007edc:	a201      	add	r2, pc, #4	; (adr r2, 8007ee4 <USBD_CDC_Setup+0xc4>)
 8007ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee2:	bf00      	nop
 8007ee4:	08007f15 	.word	0x08007f15
 8007ee8:	08007f91 	.word	0x08007f91
 8007eec:	08007f83 	.word	0x08007f83
 8007ef0:	08007f83 	.word	0x08007f83
 8007ef4:	08007f83 	.word	0x08007f83
 8007ef8:	08007f83 	.word	0x08007f83
 8007efc:	08007f83 	.word	0x08007f83
 8007f00:	08007f83 	.word	0x08007f83
 8007f04:	08007f83 	.word	0x08007f83
 8007f08:	08007f83 	.word	0x08007f83
 8007f0c:	08007f3f 	.word	0x08007f3f
 8007f10:	08007f69 	.word	0x08007f69
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b03      	cmp	r3, #3
 8007f1e:	d107      	bne.n	8007f30 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007f20:	f107 030a 	add.w	r3, r7, #10
 8007f24:	2202      	movs	r2, #2
 8007f26:	4619      	mov	r1, r3
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f001 fa9e 	bl	800946a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f2e:	e032      	b.n	8007f96 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f001 fa28 	bl	8009388 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	75fb      	strb	r3, [r7, #23]
          break;
 8007f3c:	e02b      	b.n	8007f96 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b03      	cmp	r3, #3
 8007f48:	d107      	bne.n	8007f5a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f4a:	f107 030d 	add.w	r3, r7, #13
 8007f4e:	2201      	movs	r2, #1
 8007f50:	4619      	mov	r1, r3
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f001 fa89 	bl	800946a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f58:	e01d      	b.n	8007f96 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f001 fa13 	bl	8009388 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f62:	2303      	movs	r3, #3
 8007f64:	75fb      	strb	r3, [r7, #23]
          break;
 8007f66:	e016      	b.n	8007f96 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	2b03      	cmp	r3, #3
 8007f72:	d00f      	beq.n	8007f94 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f001 fa06 	bl	8009388 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007f80:	e008      	b.n	8007f94 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007f82:	6839      	ldr	r1, [r7, #0]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f001 f9ff 	bl	8009388 <USBD_CtlError>
          ret = USBD_FAIL;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	75fb      	strb	r3, [r7, #23]
          break;
 8007f8e:	e002      	b.n	8007f96 <USBD_CDC_Setup+0x176>
          break;
 8007f90:	bf00      	nop
 8007f92:	e008      	b.n	8007fa6 <USBD_CDC_Setup+0x186>
          break;
 8007f94:	bf00      	nop
      }
      break;
 8007f96:	e006      	b.n	8007fa6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f001 f9f4 	bl	8009388 <USBD_CtlError>
      ret = USBD_FAIL;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	75fb      	strb	r3, [r7, #23]
      break;
 8007fa4:	bf00      	nop
  }

  return (uint8_t)ret;
 8007fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3718      	adds	r7, #24
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007fc2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d101      	bne.n	8007fd2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	e04f      	b.n	8008072 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fd8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007fda:	78fa      	ldrb	r2, [r7, #3]
 8007fdc:	6879      	ldr	r1, [r7, #4]
 8007fde:	4613      	mov	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	440b      	add	r3, r1
 8007fe8:	3318      	adds	r3, #24
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d029      	beq.n	8008044 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007ff0:	78fa      	ldrb	r2, [r7, #3]
 8007ff2:	6879      	ldr	r1, [r7, #4]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	440b      	add	r3, r1
 8007ffe:	3318      	adds	r3, #24
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	78f9      	ldrb	r1, [r7, #3]
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	460b      	mov	r3, r1
 8008008:	00db      	lsls	r3, r3, #3
 800800a:	1a5b      	subs	r3, r3, r1
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4403      	add	r3, r0
 8008010:	3344      	adds	r3, #68	; 0x44
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	fbb2 f1f3 	udiv	r1, r2, r3
 8008018:	fb03 f301 	mul.w	r3, r3, r1
 800801c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800801e:	2b00      	cmp	r3, #0
 8008020:	d110      	bne.n	8008044 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008022:	78fa      	ldrb	r2, [r7, #3]
 8008024:	6879      	ldr	r1, [r7, #4]
 8008026:	4613      	mov	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	440b      	add	r3, r1
 8008030:	3318      	adds	r3, #24
 8008032:	2200      	movs	r2, #0
 8008034:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008036:	78f9      	ldrb	r1, [r7, #3]
 8008038:	2300      	movs	r3, #0
 800803a:	2200      	movs	r2, #0
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f001 ff9a 	bl	8009f76 <USBD_LL_Transmit>
 8008042:	e015      	b.n	8008070 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	2200      	movs	r2, #0
 8008048:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00b      	beq.n	8008070 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800806c:	78fa      	ldrb	r2, [r7, #3]
 800806e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b084      	sub	sp, #16
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	460b      	mov	r3, r1
 8008084:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800808c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008094:	2b00      	cmp	r3, #0
 8008096:	d101      	bne.n	800809c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008098:	2303      	movs	r3, #3
 800809a:	e015      	b.n	80080c8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800809c:	78fb      	ldrb	r3, [r7, #3]
 800809e:	4619      	mov	r1, r3
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f001 ffaa 	bl	8009ffa <USBD_LL_GetRxDataSize>
 80080a6:	4602      	mov	r2, r0
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80080c2:	4611      	mov	r1, r2
 80080c4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080de:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d101      	bne.n	80080ea <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e01b      	b.n	8008122 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d015      	beq.n	8008120 <USBD_CDC_EP0_RxReady+0x50>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80080fa:	2bff      	cmp	r3, #255	; 0xff
 80080fc:	d010      	beq.n	8008120 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800810c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008114:	b292      	uxth	r2, r2
 8008116:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	22ff      	movs	r2, #255	; 0xff
 800811c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
	...

0800812c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2243      	movs	r2, #67	; 0x43
 8008138:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800813a:	4b03      	ldr	r3, [pc, #12]	; (8008148 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800813c:	4618      	mov	r0, r3
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr
 8008148:	200000a4 	.word	0x200000a4

0800814c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2243      	movs	r2, #67	; 0x43
 8008158:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800815a:	4b03      	ldr	r3, [pc, #12]	; (8008168 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800815c:	4618      	mov	r0, r3
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr
 8008168:	20000060 	.word	0x20000060

0800816c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2243      	movs	r2, #67	; 0x43
 8008178:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800817a:	4b03      	ldr	r3, [pc, #12]	; (8008188 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800817c:	4618      	mov	r0, r3
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr
 8008188:	200000e8 	.word	0x200000e8

0800818c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	220a      	movs	r2, #10
 8008198:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800819a:	4b03      	ldr	r3, [pc, #12]	; (80081a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800819c:	4618      	mov	r0, r3
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr
 80081a8:	2000001c 	.word	0x2000001c

080081ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d101      	bne.n	80081c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80081bc:	2303      	movs	r3, #3
 80081be:	e004      	b.n	80081ca <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80081d6:	b480      	push	{r7}
 80081d8:	b087      	sub	sp, #28
 80081da:	af00      	add	r7, sp, #0
 80081dc:	60f8      	str	r0, [r7, #12]
 80081de:	60b9      	str	r1, [r7, #8]
 80081e0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081e8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d101      	bne.n	80081f4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80081f0:	2303      	movs	r3, #3
 80081f2:	e008      	b.n	8008206 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	371c      	adds	r7, #28
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008212:	b480      	push	{r7}
 8008214:	b085      	sub	sp, #20
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008222:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d101      	bne.n	800822e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800822a:	2303      	movs	r3, #3
 800822c:	e004      	b.n	8008238 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	683a      	ldr	r2, [r7, #0]
 8008232:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008252:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800825a:	2b00      	cmp	r3, #0
 800825c:	d101      	bne.n	8008262 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800825e:	2303      	movs	r3, #3
 8008260:	e016      	b.n	8008290 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	7c1b      	ldrb	r3, [r3, #16]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d109      	bne.n	800827e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008274:	2101      	movs	r1, #1
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f001 fe9e 	bl	8009fb8 <USBD_LL_PrepareReceive>
 800827c:	e007      	b.n	800828e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008284:	2340      	movs	r3, #64	; 0x40
 8008286:	2101      	movs	r1, #1
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f001 fe95 	bl	8009fb8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	4613      	mov	r3, r2
 80082a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d101      	bne.n	80082b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e01f      	b.n	80082f0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d003      	beq.n	80082d6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	79fa      	ldrb	r2, [r7, #7]
 80082e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f001 fd11 	bl	8009d0c <USBD_LL_Init>
 80082ea:	4603      	mov	r3, r0
 80082ec:	75fb      	strb	r3, [r7, #23]

  return ret;
 80082ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3718      	adds	r7, #24
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008302:	2300      	movs	r3, #0
 8008304:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d101      	bne.n	8008310 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800830c:	2303      	movs	r3, #3
 800830e:	e016      	b.n	800833e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800831e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00b      	beq.n	800833c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800832a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832c:	f107 020e 	add.w	r2, r7, #14
 8008330:	4610      	mov	r0, r2
 8008332:	4798      	blx	r3
 8008334:	4602      	mov	r2, r0
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b082      	sub	sp, #8
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f001 fd28 	bl	8009da4 <USBD_LL_Start>
 8008354:	4603      	mov	r3, r0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800835e:	b480      	push	{r7}
 8008360:	b083      	sub	sp, #12
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	460b      	mov	r3, r1
 800837e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008380:	2303      	movs	r3, #3
 8008382:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800838a:	2b00      	cmp	r3, #0
 800838c:	d009      	beq.n	80083a2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	78fa      	ldrb	r2, [r7, #3]
 8008398:	4611      	mov	r1, r2
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	4798      	blx	r3
 800839e:	4603      	mov	r3, r0
 80083a0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80083a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	460b      	mov	r3, r1
 80083b6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d007      	beq.n	80083d2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	78fa      	ldrb	r2, [r7, #3]
 80083cc:	4611      	mov	r1, r2
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	4798      	blx	r3
  }

  return USBD_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083ec:	6839      	ldr	r1, [r7, #0]
 80083ee:	4618      	mov	r0, r3
 80083f0:	f000 ff90 	bl	8009314 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008402:	461a      	mov	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008410:	f003 031f 	and.w	r3, r3, #31
 8008414:	2b02      	cmp	r3, #2
 8008416:	d01a      	beq.n	800844e <USBD_LL_SetupStage+0x72>
 8008418:	2b02      	cmp	r3, #2
 800841a:	d822      	bhi.n	8008462 <USBD_LL_SetupStage+0x86>
 800841c:	2b00      	cmp	r3, #0
 800841e:	d002      	beq.n	8008426 <USBD_LL_SetupStage+0x4a>
 8008420:	2b01      	cmp	r3, #1
 8008422:	d00a      	beq.n	800843a <USBD_LL_SetupStage+0x5e>
 8008424:	e01d      	b.n	8008462 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800842c:	4619      	mov	r1, r3
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fa62 	bl	80088f8 <USBD_StdDevReq>
 8008434:	4603      	mov	r3, r0
 8008436:	73fb      	strb	r3, [r7, #15]
      break;
 8008438:	e020      	b.n	800847c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008440:	4619      	mov	r1, r3
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 fac6 	bl	80089d4 <USBD_StdItfReq>
 8008448:	4603      	mov	r3, r0
 800844a:	73fb      	strb	r3, [r7, #15]
      break;
 800844c:	e016      	b.n	800847c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008454:	4619      	mov	r1, r3
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fb05 	bl	8008a66 <USBD_StdEPReq>
 800845c:	4603      	mov	r3, r0
 800845e:	73fb      	strb	r3, [r7, #15]
      break;
 8008460:	e00c      	b.n	800847c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008468:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800846c:	b2db      	uxtb	r3, r3
 800846e:	4619      	mov	r1, r3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f001 fcf7 	bl	8009e64 <USBD_LL_StallEP>
 8008476:	4603      	mov	r3, r0
 8008478:	73fb      	strb	r3, [r7, #15]
      break;
 800847a:	bf00      	nop
  }

  return ret;
 800847c:	7bfb      	ldrb	r3, [r7, #15]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b086      	sub	sp, #24
 800848a:	af00      	add	r7, sp, #0
 800848c:	60f8      	str	r0, [r7, #12]
 800848e:	460b      	mov	r3, r1
 8008490:	607a      	str	r2, [r7, #4]
 8008492:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008494:	7afb      	ldrb	r3, [r7, #11]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d138      	bne.n	800850c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80084a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084a8:	2b03      	cmp	r3, #3
 80084aa:	d14a      	bne.n	8008542 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	689a      	ldr	r2, [r3, #8]
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d913      	bls.n	80084e0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	689a      	ldr	r2, [r3, #8]
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	1ad2      	subs	r2, r2, r3
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	68da      	ldr	r2, [r3, #12]
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	4293      	cmp	r3, r2
 80084d0:	bf28      	it	cs
 80084d2:	4613      	movcs	r3, r2
 80084d4:	461a      	mov	r2, r3
 80084d6:	6879      	ldr	r1, [r7, #4]
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f001 f80f 	bl	80094fc <USBD_CtlContinueRx>
 80084de:	e030      	b.n	8008542 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	2b03      	cmp	r3, #3
 80084ea:	d10b      	bne.n	8008504 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d005      	beq.n	8008504 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f001 f80a 	bl	800951e <USBD_CtlSendStatus>
 800850a:	e01a      	b.n	8008542 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008512:	b2db      	uxtb	r3, r3
 8008514:	2b03      	cmp	r3, #3
 8008516:	d114      	bne.n	8008542 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800851e:	699b      	ldr	r3, [r3, #24]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00e      	beq.n	8008542 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	7afa      	ldrb	r2, [r7, #11]
 800852e:	4611      	mov	r1, r2
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	4798      	blx	r3
 8008534:	4603      	mov	r3, r0
 8008536:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008538:	7dfb      	ldrb	r3, [r7, #23]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d001      	beq.n	8008542 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800853e:	7dfb      	ldrb	r3, [r7, #23]
 8008540:	e000      	b.n	8008544 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3718      	adds	r7, #24
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b086      	sub	sp, #24
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	460b      	mov	r3, r1
 8008556:	607a      	str	r2, [r7, #4]
 8008558:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800855a:	7afb      	ldrb	r3, [r7, #11]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d16b      	bne.n	8008638 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	3314      	adds	r3, #20
 8008564:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800856c:	2b02      	cmp	r3, #2
 800856e:	d156      	bne.n	800861e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	689a      	ldr	r2, [r3, #8]
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	429a      	cmp	r2, r3
 800857a:	d914      	bls.n	80085a6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	689a      	ldr	r2, [r3, #8]
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	1ad2      	subs	r2, r2, r3
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	461a      	mov	r2, r3
 8008590:	6879      	ldr	r1, [r7, #4]
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f000 ff84 	bl	80094a0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008598:	2300      	movs	r3, #0
 800859a:	2200      	movs	r2, #0
 800859c:	2100      	movs	r1, #0
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f001 fd0a 	bl	8009fb8 <USBD_LL_PrepareReceive>
 80085a4:	e03b      	b.n	800861e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	68da      	ldr	r2, [r3, #12]
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d11c      	bne.n	80085ec <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	685a      	ldr	r2, [r3, #4]
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d316      	bcc.n	80085ec <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	685a      	ldr	r2, [r3, #4]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d20f      	bcs.n	80085ec <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80085cc:	2200      	movs	r2, #0
 80085ce:	2100      	movs	r1, #0
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f000 ff65 	bl	80094a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085de:	2300      	movs	r3, #0
 80085e0:	2200      	movs	r2, #0
 80085e2:	2100      	movs	r1, #0
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f001 fce7 	bl	8009fb8 <USBD_LL_PrepareReceive>
 80085ea:	e018      	b.n	800861e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	2b03      	cmp	r3, #3
 80085f6:	d10b      	bne.n	8008610 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d005      	beq.n	8008610 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008610:	2180      	movs	r1, #128	; 0x80
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f001 fc26 	bl	8009e64 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f000 ff93 	bl	8009544 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008624:	2b01      	cmp	r3, #1
 8008626:	d122      	bne.n	800866e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f7ff fe98 	bl	800835e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008636:	e01a      	b.n	800866e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800863e:	b2db      	uxtb	r3, r3
 8008640:	2b03      	cmp	r3, #3
 8008642:	d114      	bne.n	800866e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800864a:	695b      	ldr	r3, [r3, #20]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00e      	beq.n	800866e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008656:	695b      	ldr	r3, [r3, #20]
 8008658:	7afa      	ldrb	r2, [r7, #11]
 800865a:	4611      	mov	r1, r2
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	4798      	blx	r3
 8008660:	4603      	mov	r3, r0
 8008662:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008664:	7dfb      	ldrb	r3, [r7, #23]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d001      	beq.n	800866e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800866a:	7dfb      	ldrb	r3, [r7, #23]
 800866c:	e000      	b.n	8008670 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3718      	adds	r7, #24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d101      	bne.n	80086ac <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80086a8:	2303      	movs	r3, #3
 80086aa:	e02f      	b.n	800870c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00f      	beq.n	80086d6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d009      	beq.n	80086d6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	6852      	ldr	r2, [r2, #4]
 80086ce:	b2d2      	uxtb	r2, r2
 80086d0:	4611      	mov	r1, r2
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086d6:	2340      	movs	r3, #64	; 0x40
 80086d8:	2200      	movs	r2, #0
 80086da:	2100      	movs	r1, #0
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f001 fb7c 	bl	8009dda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2240      	movs	r2, #64	; 0x40
 80086ee:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086f2:	2340      	movs	r3, #64	; 0x40
 80086f4:	2200      	movs	r2, #0
 80086f6:	2180      	movs	r1, #128	; 0x80
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f001 fb6e 	bl	8009dda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2240      	movs	r2, #64	; 0x40
 8008708:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	78fa      	ldrb	r2, [r7, #3]
 8008724:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008742:	b2da      	uxtb	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2204      	movs	r2, #4
 800874e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800876e:	b2db      	uxtb	r3, r3
 8008770:	2b04      	cmp	r3, #4
 8008772:	d106      	bne.n	8008782 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800877a:	b2da      	uxtb	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80087a2:	2303      	movs	r3, #3
 80087a4:	e012      	b.n	80087cc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b03      	cmp	r3, #3
 80087b0:	d10b      	bne.n	80087ca <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087b8:	69db      	ldr	r3, [r3, #28]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d005      	beq.n	80087ca <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087c4:	69db      	ldr	r3, [r3, #28]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3708      	adds	r7, #8
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d101      	bne.n	80087ee <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e014      	b.n	8008818 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	2b03      	cmp	r3, #3
 80087f8:	d10d      	bne.n	8008816 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008800:	6a1b      	ldr	r3, [r3, #32]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d007      	beq.n	8008816 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	78fa      	ldrb	r2, [r7, #3]
 8008810:	4611      	mov	r1, r2
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3708      	adds	r7, #8
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	460b      	mov	r3, r1
 800882a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008832:	2b00      	cmp	r3, #0
 8008834:	d101      	bne.n	800883a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008836:	2303      	movs	r3, #3
 8008838:	e014      	b.n	8008864 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008840:	b2db      	uxtb	r3, r3
 8008842:	2b03      	cmp	r3, #3
 8008844:	d10d      	bne.n	8008862 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800884c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884e:	2b00      	cmp	r3, #0
 8008850:	d007      	beq.n	8008862 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885a:	78fa      	ldrb	r2, [r7, #3]
 800885c:	4611      	mov	r1, r2
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	370c      	adds	r7, #12
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr

08008882 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b082      	sub	sp, #8
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2201      	movs	r2, #1
 800888e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008898:	2b00      	cmp	r3, #0
 800889a:	d009      	beq.n	80088b0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	6852      	ldr	r2, [r2, #4]
 80088a8:	b2d2      	uxtb	r2, r2
 80088aa:	4611      	mov	r1, r2
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	4798      	blx	r3
  }

  return USBD_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80088ba:	b480      	push	{r7}
 80088bc:	b087      	sub	sp, #28
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	3301      	adds	r3, #1
 80088d0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80088d8:	8a3b      	ldrh	r3, [r7, #16]
 80088da:	021b      	lsls	r3, r3, #8
 80088dc:	b21a      	sxth	r2, r3
 80088de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	b21b      	sxth	r3, r3
 80088e6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80088e8:	89fb      	ldrh	r3, [r7, #14]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	371c      	adds	r7, #28
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
	...

080088f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800890e:	2b40      	cmp	r3, #64	; 0x40
 8008910:	d005      	beq.n	800891e <USBD_StdDevReq+0x26>
 8008912:	2b40      	cmp	r3, #64	; 0x40
 8008914:	d853      	bhi.n	80089be <USBD_StdDevReq+0xc6>
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00b      	beq.n	8008932 <USBD_StdDevReq+0x3a>
 800891a:	2b20      	cmp	r3, #32
 800891c:	d14f      	bne.n	80089be <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	6839      	ldr	r1, [r7, #0]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	4798      	blx	r3
 800892c:	4603      	mov	r3, r0
 800892e:	73fb      	strb	r3, [r7, #15]
      break;
 8008930:	e04a      	b.n	80089c8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	785b      	ldrb	r3, [r3, #1]
 8008936:	2b09      	cmp	r3, #9
 8008938:	d83b      	bhi.n	80089b2 <USBD_StdDevReq+0xba>
 800893a:	a201      	add	r2, pc, #4	; (adr r2, 8008940 <USBD_StdDevReq+0x48>)
 800893c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008940:	08008995 	.word	0x08008995
 8008944:	080089a9 	.word	0x080089a9
 8008948:	080089b3 	.word	0x080089b3
 800894c:	0800899f 	.word	0x0800899f
 8008950:	080089b3 	.word	0x080089b3
 8008954:	08008973 	.word	0x08008973
 8008958:	08008969 	.word	0x08008969
 800895c:	080089b3 	.word	0x080089b3
 8008960:	0800898b 	.word	0x0800898b
 8008964:	0800897d 	.word	0x0800897d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008968:	6839      	ldr	r1, [r7, #0]
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f9de 	bl	8008d2c <USBD_GetDescriptor>
          break;
 8008970:	e024      	b.n	80089bc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fb43 	bl	8009000 <USBD_SetAddress>
          break;
 800897a:	e01f      	b.n	80089bc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fb82 	bl	8009088 <USBD_SetConfig>
 8008984:	4603      	mov	r3, r0
 8008986:	73fb      	strb	r3, [r7, #15]
          break;
 8008988:	e018      	b.n	80089bc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800898a:	6839      	ldr	r1, [r7, #0]
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fc21 	bl	80091d4 <USBD_GetConfig>
          break;
 8008992:	e013      	b.n	80089bc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008994:	6839      	ldr	r1, [r7, #0]
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 fc52 	bl	8009240 <USBD_GetStatus>
          break;
 800899c:	e00e      	b.n	80089bc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 fc81 	bl	80092a8 <USBD_SetFeature>
          break;
 80089a6:	e009      	b.n	80089bc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fc90 	bl	80092d0 <USBD_ClrFeature>
          break;
 80089b0:	e004      	b.n	80089bc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80089b2:	6839      	ldr	r1, [r7, #0]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fce7 	bl	8009388 <USBD_CtlError>
          break;
 80089ba:	bf00      	nop
      }
      break;
 80089bc:	e004      	b.n	80089c8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80089be:	6839      	ldr	r1, [r7, #0]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 fce1 	bl	8009388 <USBD_CtlError>
      break;
 80089c6:	bf00      	nop
  }

  return ret;
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop

080089d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089de:	2300      	movs	r3, #0
 80089e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089ea:	2b40      	cmp	r3, #64	; 0x40
 80089ec:	d005      	beq.n	80089fa <USBD_StdItfReq+0x26>
 80089ee:	2b40      	cmp	r3, #64	; 0x40
 80089f0:	d82f      	bhi.n	8008a52 <USBD_StdItfReq+0x7e>
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d001      	beq.n	80089fa <USBD_StdItfReq+0x26>
 80089f6:	2b20      	cmp	r3, #32
 80089f8:	d12b      	bne.n	8008a52 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	3b01      	subs	r3, #1
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d81d      	bhi.n	8008a44 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	889b      	ldrh	r3, [r3, #4]
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d813      	bhi.n	8008a3a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	6839      	ldr	r1, [r7, #0]
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	4798      	blx	r3
 8008a20:	4603      	mov	r3, r0
 8008a22:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	88db      	ldrh	r3, [r3, #6]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d110      	bne.n	8008a4e <USBD_StdItfReq+0x7a>
 8008a2c:	7bfb      	ldrb	r3, [r7, #15]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10d      	bne.n	8008a4e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fd73 	bl	800951e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a38:	e009      	b.n	8008a4e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008a3a:	6839      	ldr	r1, [r7, #0]
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fca3 	bl	8009388 <USBD_CtlError>
          break;
 8008a42:	e004      	b.n	8008a4e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fc9e 	bl	8009388 <USBD_CtlError>
          break;
 8008a4c:	e000      	b.n	8008a50 <USBD_StdItfReq+0x7c>
          break;
 8008a4e:	bf00      	nop
      }
      break;
 8008a50:	e004      	b.n	8008a5c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008a52:	6839      	ldr	r1, [r7, #0]
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 fc97 	bl	8009388 <USBD_CtlError>
      break;
 8008a5a:	bf00      	nop
  }

  return ret;
 8008a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b084      	sub	sp, #16
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a70:	2300      	movs	r3, #0
 8008a72:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	889b      	ldrh	r3, [r3, #4]
 8008a78:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a82:	2b40      	cmp	r3, #64	; 0x40
 8008a84:	d007      	beq.n	8008a96 <USBD_StdEPReq+0x30>
 8008a86:	2b40      	cmp	r3, #64	; 0x40
 8008a88:	f200 8145 	bhi.w	8008d16 <USBD_StdEPReq+0x2b0>
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00c      	beq.n	8008aaa <USBD_StdEPReq+0x44>
 8008a90:	2b20      	cmp	r3, #32
 8008a92:	f040 8140 	bne.w	8008d16 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	6839      	ldr	r1, [r7, #0]
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	4798      	blx	r3
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8008aa8:	e13a      	b.n	8008d20 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	785b      	ldrb	r3, [r3, #1]
 8008aae:	2b03      	cmp	r3, #3
 8008ab0:	d007      	beq.n	8008ac2 <USBD_StdEPReq+0x5c>
 8008ab2:	2b03      	cmp	r3, #3
 8008ab4:	f300 8129 	bgt.w	8008d0a <USBD_StdEPReq+0x2a4>
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d07f      	beq.n	8008bbc <USBD_StdEPReq+0x156>
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d03c      	beq.n	8008b3a <USBD_StdEPReq+0xd4>
 8008ac0:	e123      	b.n	8008d0a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d002      	beq.n	8008ad4 <USBD_StdEPReq+0x6e>
 8008ace:	2b03      	cmp	r3, #3
 8008ad0:	d016      	beq.n	8008b00 <USBD_StdEPReq+0x9a>
 8008ad2:	e02c      	b.n	8008b2e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ad4:	7bbb      	ldrb	r3, [r7, #14]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00d      	beq.n	8008af6 <USBD_StdEPReq+0x90>
 8008ada:	7bbb      	ldrb	r3, [r7, #14]
 8008adc:	2b80      	cmp	r3, #128	; 0x80
 8008ade:	d00a      	beq.n	8008af6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ae0:	7bbb      	ldrb	r3, [r7, #14]
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f001 f9bd 	bl	8009e64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008aea:	2180      	movs	r1, #128	; 0x80
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f001 f9b9 	bl	8009e64 <USBD_LL_StallEP>
 8008af2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008af4:	e020      	b.n	8008b38 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fc45 	bl	8009388 <USBD_CtlError>
              break;
 8008afe:	e01b      	b.n	8008b38 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	885b      	ldrh	r3, [r3, #2]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10e      	bne.n	8008b26 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b08:	7bbb      	ldrb	r3, [r7, #14]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00b      	beq.n	8008b26 <USBD_StdEPReq+0xc0>
 8008b0e:	7bbb      	ldrb	r3, [r7, #14]
 8008b10:	2b80      	cmp	r3, #128	; 0x80
 8008b12:	d008      	beq.n	8008b26 <USBD_StdEPReq+0xc0>
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	88db      	ldrh	r3, [r3, #6]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d104      	bne.n	8008b26 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b1c:	7bbb      	ldrb	r3, [r7, #14]
 8008b1e:	4619      	mov	r1, r3
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f001 f99f 	bl	8009e64 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 fcf9 	bl	800951e <USBD_CtlSendStatus>

              break;
 8008b2c:	e004      	b.n	8008b38 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008b2e:	6839      	ldr	r1, [r7, #0]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fc29 	bl	8009388 <USBD_CtlError>
              break;
 8008b36:	bf00      	nop
          }
          break;
 8008b38:	e0ec      	b.n	8008d14 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d002      	beq.n	8008b4c <USBD_StdEPReq+0xe6>
 8008b46:	2b03      	cmp	r3, #3
 8008b48:	d016      	beq.n	8008b78 <USBD_StdEPReq+0x112>
 8008b4a:	e030      	b.n	8008bae <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b4c:	7bbb      	ldrb	r3, [r7, #14]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00d      	beq.n	8008b6e <USBD_StdEPReq+0x108>
 8008b52:	7bbb      	ldrb	r3, [r7, #14]
 8008b54:	2b80      	cmp	r3, #128	; 0x80
 8008b56:	d00a      	beq.n	8008b6e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b58:	7bbb      	ldrb	r3, [r7, #14]
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f001 f981 	bl	8009e64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b62:	2180      	movs	r1, #128	; 0x80
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f001 f97d 	bl	8009e64 <USBD_LL_StallEP>
 8008b6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b6c:	e025      	b.n	8008bba <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008b6e:	6839      	ldr	r1, [r7, #0]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fc09 	bl	8009388 <USBD_CtlError>
              break;
 8008b76:	e020      	b.n	8008bba <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	885b      	ldrh	r3, [r3, #2]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d11b      	bne.n	8008bb8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008b80:	7bbb      	ldrb	r3, [r7, #14]
 8008b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d004      	beq.n	8008b94 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008b8a:	7bbb      	ldrb	r3, [r7, #14]
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f001 f987 	bl	8009ea2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 fcc2 	bl	800951e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	6839      	ldr	r1, [r7, #0]
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	4798      	blx	r3
 8008ba8:	4603      	mov	r3, r0
 8008baa:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008bac:	e004      	b.n	8008bb8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008bae:	6839      	ldr	r1, [r7, #0]
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 fbe9 	bl	8009388 <USBD_CtlError>
              break;
 8008bb6:	e000      	b.n	8008bba <USBD_StdEPReq+0x154>
              break;
 8008bb8:	bf00      	nop
          }
          break;
 8008bba:	e0ab      	b.n	8008d14 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d002      	beq.n	8008bce <USBD_StdEPReq+0x168>
 8008bc8:	2b03      	cmp	r3, #3
 8008bca:	d032      	beq.n	8008c32 <USBD_StdEPReq+0x1cc>
 8008bcc:	e097      	b.n	8008cfe <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bce:	7bbb      	ldrb	r3, [r7, #14]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d007      	beq.n	8008be4 <USBD_StdEPReq+0x17e>
 8008bd4:	7bbb      	ldrb	r3, [r7, #14]
 8008bd6:	2b80      	cmp	r3, #128	; 0x80
 8008bd8:	d004      	beq.n	8008be4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008bda:	6839      	ldr	r1, [r7, #0]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fbd3 	bl	8009388 <USBD_CtlError>
                break;
 8008be2:	e091      	b.n	8008d08 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008be4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	da0b      	bge.n	8008c04 <USBD_StdEPReq+0x19e>
 8008bec:	7bbb      	ldrb	r3, [r7, #14]
 8008bee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4413      	add	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	3310      	adds	r3, #16
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	4413      	add	r3, r2
 8008c00:	3304      	adds	r3, #4
 8008c02:	e00b      	b.n	8008c1c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c04:	7bbb      	ldrb	r3, [r7, #14]
 8008c06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4413      	add	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	4413      	add	r3, r2
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	2200      	movs	r2, #0
 8008c22:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	2202      	movs	r2, #2
 8008c28:	4619      	mov	r1, r3
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fc1d 	bl	800946a <USBD_CtlSendData>
              break;
 8008c30:	e06a      	b.n	8008d08 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008c32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	da11      	bge.n	8008c5e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c3a:	7bbb      	ldrb	r3, [r7, #14]
 8008c3c:	f003 020f 	and.w	r2, r3, #15
 8008c40:	6879      	ldr	r1, [r7, #4]
 8008c42:	4613      	mov	r3, r2
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	4413      	add	r3, r2
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	440b      	add	r3, r1
 8008c4c:	3324      	adds	r3, #36	; 0x24
 8008c4e:	881b      	ldrh	r3, [r3, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d117      	bne.n	8008c84 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008c54:	6839      	ldr	r1, [r7, #0]
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 fb96 	bl	8009388 <USBD_CtlError>
                  break;
 8008c5c:	e054      	b.n	8008d08 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c5e:	7bbb      	ldrb	r3, [r7, #14]
 8008c60:	f003 020f 	and.w	r2, r3, #15
 8008c64:	6879      	ldr	r1, [r7, #4]
 8008c66:	4613      	mov	r3, r2
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	4413      	add	r3, r2
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	440b      	add	r3, r1
 8008c70:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008c74:	881b      	ldrh	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d104      	bne.n	8008c84 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008c7a:	6839      	ldr	r1, [r7, #0]
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 fb83 	bl	8009388 <USBD_CtlError>
                  break;
 8008c82:	e041      	b.n	8008d08 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	da0b      	bge.n	8008ca4 <USBD_StdEPReq+0x23e>
 8008c8c:	7bbb      	ldrb	r3, [r7, #14]
 8008c8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c92:	4613      	mov	r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	4413      	add	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	3310      	adds	r3, #16
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	3304      	adds	r3, #4
 8008ca2:	e00b      	b.n	8008cbc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ca4:	7bbb      	ldrb	r3, [r7, #14]
 8008ca6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008caa:	4613      	mov	r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	4413      	add	r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	4413      	add	r3, r2
 8008cba:	3304      	adds	r3, #4
 8008cbc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008cbe:	7bbb      	ldrb	r3, [r7, #14]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d002      	beq.n	8008cca <USBD_StdEPReq+0x264>
 8008cc4:	7bbb      	ldrb	r3, [r7, #14]
 8008cc6:	2b80      	cmp	r3, #128	; 0x80
 8008cc8:	d103      	bne.n	8008cd2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	601a      	str	r2, [r3, #0]
 8008cd0:	e00e      	b.n	8008cf0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008cd2:	7bbb      	ldrb	r3, [r7, #14]
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f001 f902 	bl	8009ee0 <USBD_LL_IsStallEP>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d003      	beq.n	8008cea <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	601a      	str	r2, [r3, #0]
 8008ce8:	e002      	b.n	8008cf0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	2200      	movs	r2, #0
 8008cee:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fbb7 	bl	800946a <USBD_CtlSendData>
              break;
 8008cfc:	e004      	b.n	8008d08 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008cfe:	6839      	ldr	r1, [r7, #0]
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 fb41 	bl	8009388 <USBD_CtlError>
              break;
 8008d06:	bf00      	nop
          }
          break;
 8008d08:	e004      	b.n	8008d14 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008d0a:	6839      	ldr	r1, [r7, #0]
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 fb3b 	bl	8009388 <USBD_CtlError>
          break;
 8008d12:	bf00      	nop
      }
      break;
 8008d14:	e004      	b.n	8008d20 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008d16:	6839      	ldr	r1, [r7, #0]
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fb35 	bl	8009388 <USBD_CtlError>
      break;
 8008d1e:	bf00      	nop
  }

  return ret;
 8008d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
	...

08008d2c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d36:	2300      	movs	r3, #0
 8008d38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	885b      	ldrh	r3, [r3, #2]
 8008d46:	0a1b      	lsrs	r3, r3, #8
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	2b06      	cmp	r3, #6
 8008d4e:	f200 8128 	bhi.w	8008fa2 <USBD_GetDescriptor+0x276>
 8008d52:	a201      	add	r2, pc, #4	; (adr r2, 8008d58 <USBD_GetDescriptor+0x2c>)
 8008d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d58:	08008d75 	.word	0x08008d75
 8008d5c:	08008d8d 	.word	0x08008d8d
 8008d60:	08008dcd 	.word	0x08008dcd
 8008d64:	08008fa3 	.word	0x08008fa3
 8008d68:	08008fa3 	.word	0x08008fa3
 8008d6c:	08008f43 	.word	0x08008f43
 8008d70:	08008f6f 	.word	0x08008f6f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	7c12      	ldrb	r2, [r2, #16]
 8008d80:	f107 0108 	add.w	r1, r7, #8
 8008d84:	4610      	mov	r0, r2
 8008d86:	4798      	blx	r3
 8008d88:	60f8      	str	r0, [r7, #12]
      break;
 8008d8a:	e112      	b.n	8008fb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	7c1b      	ldrb	r3, [r3, #16]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d10d      	bne.n	8008db0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d9c:	f107 0208 	add.w	r2, r7, #8
 8008da0:	4610      	mov	r0, r2
 8008da2:	4798      	blx	r3
 8008da4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	3301      	adds	r3, #1
 8008daa:	2202      	movs	r2, #2
 8008dac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008dae:	e100      	b.n	8008fb2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db8:	f107 0208 	add.w	r2, r7, #8
 8008dbc:	4610      	mov	r0, r2
 8008dbe:	4798      	blx	r3
 8008dc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	701a      	strb	r2, [r3, #0]
      break;
 8008dca:	e0f2      	b.n	8008fb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	885b      	ldrh	r3, [r3, #2]
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	2b05      	cmp	r3, #5
 8008dd4:	f200 80ac 	bhi.w	8008f30 <USBD_GetDescriptor+0x204>
 8008dd8:	a201      	add	r2, pc, #4	; (adr r2, 8008de0 <USBD_GetDescriptor+0xb4>)
 8008dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dde:	bf00      	nop
 8008de0:	08008df9 	.word	0x08008df9
 8008de4:	08008e2d 	.word	0x08008e2d
 8008de8:	08008e61 	.word	0x08008e61
 8008dec:	08008e95 	.word	0x08008e95
 8008df0:	08008ec9 	.word	0x08008ec9
 8008df4:	08008efd 	.word	0x08008efd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00b      	beq.n	8008e1c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	7c12      	ldrb	r2, [r2, #16]
 8008e10:	f107 0108 	add.w	r1, r7, #8
 8008e14:	4610      	mov	r0, r2
 8008e16:	4798      	blx	r3
 8008e18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e1a:	e091      	b.n	8008f40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e1c:	6839      	ldr	r1, [r7, #0]
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fab2 	bl	8009388 <USBD_CtlError>
            err++;
 8008e24:	7afb      	ldrb	r3, [r7, #11]
 8008e26:	3301      	adds	r3, #1
 8008e28:	72fb      	strb	r3, [r7, #11]
          break;
 8008e2a:	e089      	b.n	8008f40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00b      	beq.n	8008e50 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	7c12      	ldrb	r2, [r2, #16]
 8008e44:	f107 0108 	add.w	r1, r7, #8
 8008e48:	4610      	mov	r0, r2
 8008e4a:	4798      	blx	r3
 8008e4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e4e:	e077      	b.n	8008f40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fa98 	bl	8009388 <USBD_CtlError>
            err++;
 8008e58:	7afb      	ldrb	r3, [r7, #11]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e5e:	e06f      	b.n	8008f40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00b      	beq.n	8008e84 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	7c12      	ldrb	r2, [r2, #16]
 8008e78:	f107 0108 	add.w	r1, r7, #8
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	4798      	blx	r3
 8008e80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e82:	e05d      	b.n	8008f40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fa7e 	bl	8009388 <USBD_CtlError>
            err++;
 8008e8c:	7afb      	ldrb	r3, [r7, #11]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	72fb      	strb	r3, [r7, #11]
          break;
 8008e92:	e055      	b.n	8008f40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e9a:	691b      	ldr	r3, [r3, #16]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00b      	beq.n	8008eb8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	7c12      	ldrb	r2, [r2, #16]
 8008eac:	f107 0108 	add.w	r1, r7, #8
 8008eb0:	4610      	mov	r0, r2
 8008eb2:	4798      	blx	r3
 8008eb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eb6:	e043      	b.n	8008f40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008eb8:	6839      	ldr	r1, [r7, #0]
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fa64 	bl	8009388 <USBD_CtlError>
            err++;
 8008ec0:	7afb      	ldrb	r3, [r7, #11]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ec6:	e03b      	b.n	8008f40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ece:	695b      	ldr	r3, [r3, #20]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00b      	beq.n	8008eec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eda:	695b      	ldr	r3, [r3, #20]
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	7c12      	ldrb	r2, [r2, #16]
 8008ee0:	f107 0108 	add.w	r1, r7, #8
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	4798      	blx	r3
 8008ee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eea:	e029      	b.n	8008f40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fa4a 	bl	8009388 <USBD_CtlError>
            err++;
 8008ef4:	7afb      	ldrb	r3, [r7, #11]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	72fb      	strb	r3, [r7, #11]
          break;
 8008efa:	e021      	b.n	8008f40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f02:	699b      	ldr	r3, [r3, #24]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00b      	beq.n	8008f20 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	7c12      	ldrb	r2, [r2, #16]
 8008f14:	f107 0108 	add.w	r1, r7, #8
 8008f18:	4610      	mov	r0, r2
 8008f1a:	4798      	blx	r3
 8008f1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f1e:	e00f      	b.n	8008f40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f20:	6839      	ldr	r1, [r7, #0]
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fa30 	bl	8009388 <USBD_CtlError>
            err++;
 8008f28:	7afb      	ldrb	r3, [r7, #11]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f2e:	e007      	b.n	8008f40 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008f30:	6839      	ldr	r1, [r7, #0]
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fa28 	bl	8009388 <USBD_CtlError>
          err++;
 8008f38:	7afb      	ldrb	r3, [r7, #11]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008f3e:	bf00      	nop
      }
      break;
 8008f40:	e037      	b.n	8008fb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	7c1b      	ldrb	r3, [r3, #16]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d109      	bne.n	8008f5e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f52:	f107 0208 	add.w	r2, r7, #8
 8008f56:	4610      	mov	r0, r2
 8008f58:	4798      	blx	r3
 8008f5a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f5c:	e029      	b.n	8008fb2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f5e:	6839      	ldr	r1, [r7, #0]
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 fa11 	bl	8009388 <USBD_CtlError>
        err++;
 8008f66:	7afb      	ldrb	r3, [r7, #11]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	72fb      	strb	r3, [r7, #11]
      break;
 8008f6c:	e021      	b.n	8008fb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	7c1b      	ldrb	r3, [r3, #16]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10d      	bne.n	8008f92 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f7e:	f107 0208 	add.w	r2, r7, #8
 8008f82:	4610      	mov	r0, r2
 8008f84:	4798      	blx	r3
 8008f86:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	2207      	movs	r2, #7
 8008f8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f90:	e00f      	b.n	8008fb2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f92:	6839      	ldr	r1, [r7, #0]
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 f9f7 	bl	8009388 <USBD_CtlError>
        err++;
 8008f9a:	7afb      	ldrb	r3, [r7, #11]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	72fb      	strb	r3, [r7, #11]
      break;
 8008fa0:	e007      	b.n	8008fb2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008fa2:	6839      	ldr	r1, [r7, #0]
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 f9ef 	bl	8009388 <USBD_CtlError>
      err++;
 8008faa:	7afb      	ldrb	r3, [r7, #11]
 8008fac:	3301      	adds	r3, #1
 8008fae:	72fb      	strb	r3, [r7, #11]
      break;
 8008fb0:	bf00      	nop
  }

  if (err != 0U)
 8008fb2:	7afb      	ldrb	r3, [r7, #11]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d11e      	bne.n	8008ff6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	88db      	ldrh	r3, [r3, #6]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d016      	beq.n	8008fee <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008fc0:	893b      	ldrh	r3, [r7, #8]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00e      	beq.n	8008fe4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	88da      	ldrh	r2, [r3, #6]
 8008fca:	893b      	ldrh	r3, [r7, #8]
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	bf28      	it	cs
 8008fd0:	4613      	movcs	r3, r2
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008fd6:	893b      	ldrh	r3, [r7, #8]
 8008fd8:	461a      	mov	r2, r3
 8008fda:	68f9      	ldr	r1, [r7, #12]
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 fa44 	bl	800946a <USBD_CtlSendData>
 8008fe2:	e009      	b.n	8008ff8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008fe4:	6839      	ldr	r1, [r7, #0]
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f9ce 	bl	8009388 <USBD_CtlError>
 8008fec:	e004      	b.n	8008ff8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 fa95 	bl	800951e <USBD_CtlSendStatus>
 8008ff4:	e000      	b.n	8008ff8 <USBD_GetDescriptor+0x2cc>
    return;
 8008ff6:	bf00      	nop
  }
}
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop

08009000 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	889b      	ldrh	r3, [r3, #4]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d131      	bne.n	8009076 <USBD_SetAddress+0x76>
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	88db      	ldrh	r3, [r3, #6]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d12d      	bne.n	8009076 <USBD_SetAddress+0x76>
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	885b      	ldrh	r3, [r3, #2]
 800901e:	2b7f      	cmp	r3, #127	; 0x7f
 8009020:	d829      	bhi.n	8009076 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	885b      	ldrh	r3, [r3, #2]
 8009026:	b2db      	uxtb	r3, r3
 8009028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800902c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009034:	b2db      	uxtb	r3, r3
 8009036:	2b03      	cmp	r3, #3
 8009038:	d104      	bne.n	8009044 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f9a3 	bl	8009388 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009042:	e01d      	b.n	8009080 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	7bfa      	ldrb	r2, [r7, #15]
 8009048:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800904c:	7bfb      	ldrb	r3, [r7, #15]
 800904e:	4619      	mov	r1, r3
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 ff71 	bl	8009f38 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fa61 	bl	800951e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800905c:	7bfb      	ldrb	r3, [r7, #15]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d004      	beq.n	800906c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2202      	movs	r2, #2
 8009066:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800906a:	e009      	b.n	8009080 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009074:	e004      	b.n	8009080 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009076:	6839      	ldr	r1, [r7, #0]
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f985 	bl	8009388 <USBD_CtlError>
  }
}
 800907e:	bf00      	nop
 8009080:	bf00      	nop
 8009082:	3710      	adds	r7, #16
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009092:	2300      	movs	r3, #0
 8009094:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	885b      	ldrh	r3, [r3, #2]
 800909a:	b2da      	uxtb	r2, r3
 800909c:	4b4c      	ldr	r3, [pc, #304]	; (80091d0 <USBD_SetConfig+0x148>)
 800909e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090a0:	4b4b      	ldr	r3, [pc, #300]	; (80091d0 <USBD_SetConfig+0x148>)
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d905      	bls.n	80090b4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80090a8:	6839      	ldr	r1, [r7, #0]
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f96c 	bl	8009388 <USBD_CtlError>
    return USBD_FAIL;
 80090b0:	2303      	movs	r3, #3
 80090b2:	e088      	b.n	80091c6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d002      	beq.n	80090c6 <USBD_SetConfig+0x3e>
 80090c0:	2b03      	cmp	r3, #3
 80090c2:	d025      	beq.n	8009110 <USBD_SetConfig+0x88>
 80090c4:	e071      	b.n	80091aa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80090c6:	4b42      	ldr	r3, [pc, #264]	; (80091d0 <USBD_SetConfig+0x148>)
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d01c      	beq.n	8009108 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80090ce:	4b40      	ldr	r3, [pc, #256]	; (80091d0 <USBD_SetConfig+0x148>)
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	461a      	mov	r2, r3
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80090d8:	4b3d      	ldr	r3, [pc, #244]	; (80091d0 <USBD_SetConfig+0x148>)
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	4619      	mov	r1, r3
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f7ff f948 	bl	8008374 <USBD_SetClassConfig>
 80090e4:	4603      	mov	r3, r0
 80090e6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d004      	beq.n	80090f8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f949 	bl	8009388 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80090f6:	e065      	b.n	80091c4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fa10 	bl	800951e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2203      	movs	r2, #3
 8009102:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009106:	e05d      	b.n	80091c4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fa08 	bl	800951e <USBD_CtlSendStatus>
      break;
 800910e:	e059      	b.n	80091c4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009110:	4b2f      	ldr	r3, [pc, #188]	; (80091d0 <USBD_SetConfig+0x148>)
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d112      	bne.n	800913e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2202      	movs	r2, #2
 800911c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009120:	4b2b      	ldr	r3, [pc, #172]	; (80091d0 <USBD_SetConfig+0x148>)
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	461a      	mov	r2, r3
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800912a:	4b29      	ldr	r3, [pc, #164]	; (80091d0 <USBD_SetConfig+0x148>)
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	4619      	mov	r1, r3
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7ff f93b 	bl	80083ac <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f9f1 	bl	800951e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800913c:	e042      	b.n	80091c4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800913e:	4b24      	ldr	r3, [pc, #144]	; (80091d0 <USBD_SetConfig+0x148>)
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	461a      	mov	r2, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	429a      	cmp	r2, r3
 800914a:	d02a      	beq.n	80091a2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	b2db      	uxtb	r3, r3
 8009152:	4619      	mov	r1, r3
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f7ff f929 	bl	80083ac <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800915a:	4b1d      	ldr	r3, [pc, #116]	; (80091d0 <USBD_SetConfig+0x148>)
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	461a      	mov	r2, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009164:	4b1a      	ldr	r3, [pc, #104]	; (80091d0 <USBD_SetConfig+0x148>)
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	4619      	mov	r1, r3
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f7ff f902 	bl	8008374 <USBD_SetClassConfig>
 8009170:	4603      	mov	r3, r0
 8009172:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009174:	7bfb      	ldrb	r3, [r7, #15]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00f      	beq.n	800919a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800917a:	6839      	ldr	r1, [r7, #0]
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 f903 	bl	8009388 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	b2db      	uxtb	r3, r3
 8009188:	4619      	mov	r1, r3
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f7ff f90e 	bl	80083ac <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2202      	movs	r2, #2
 8009194:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009198:	e014      	b.n	80091c4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f9bf 	bl	800951e <USBD_CtlSendStatus>
      break;
 80091a0:	e010      	b.n	80091c4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 f9bb 	bl	800951e <USBD_CtlSendStatus>
      break;
 80091a8:	e00c      	b.n	80091c4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80091aa:	6839      	ldr	r1, [r7, #0]
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 f8eb 	bl	8009388 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80091b2:	4b07      	ldr	r3, [pc, #28]	; (80091d0 <USBD_SetConfig+0x148>)
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	4619      	mov	r1, r3
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f7ff f8f7 	bl	80083ac <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80091be:	2303      	movs	r3, #3
 80091c0:	73fb      	strb	r3, [r7, #15]
      break;
 80091c2:	bf00      	nop
  }

  return ret;
 80091c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	20000620 	.word	0x20000620

080091d4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	88db      	ldrh	r3, [r3, #6]
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d004      	beq.n	80091f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80091e6:	6839      	ldr	r1, [r7, #0]
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 f8cd 	bl	8009388 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80091ee:	e023      	b.n	8009238 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	dc02      	bgt.n	8009202 <USBD_GetConfig+0x2e>
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	dc03      	bgt.n	8009208 <USBD_GetConfig+0x34>
 8009200:	e015      	b.n	800922e <USBD_GetConfig+0x5a>
 8009202:	2b03      	cmp	r3, #3
 8009204:	d00b      	beq.n	800921e <USBD_GetConfig+0x4a>
 8009206:	e012      	b.n	800922e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	3308      	adds	r3, #8
 8009212:	2201      	movs	r2, #1
 8009214:	4619      	mov	r1, r3
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f927 	bl	800946a <USBD_CtlSendData>
        break;
 800921c:	e00c      	b.n	8009238 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	3304      	adds	r3, #4
 8009222:	2201      	movs	r2, #1
 8009224:	4619      	mov	r1, r3
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f91f 	bl	800946a <USBD_CtlSendData>
        break;
 800922c:	e004      	b.n	8009238 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800922e:	6839      	ldr	r1, [r7, #0]
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 f8a9 	bl	8009388 <USBD_CtlError>
        break;
 8009236:	bf00      	nop
}
 8009238:	bf00      	nop
 800923a:	3708      	adds	r7, #8
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009250:	b2db      	uxtb	r3, r3
 8009252:	3b01      	subs	r3, #1
 8009254:	2b02      	cmp	r3, #2
 8009256:	d81e      	bhi.n	8009296 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	88db      	ldrh	r3, [r3, #6]
 800925c:	2b02      	cmp	r3, #2
 800925e:	d004      	beq.n	800926a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009260:	6839      	ldr	r1, [r7, #0]
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 f890 	bl	8009388 <USBD_CtlError>
        break;
 8009268:	e01a      	b.n	80092a0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2201      	movs	r2, #1
 800926e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009276:	2b00      	cmp	r3, #0
 8009278:	d005      	beq.n	8009286 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	f043 0202 	orr.w	r2, r3, #2
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	330c      	adds	r3, #12
 800928a:	2202      	movs	r2, #2
 800928c:	4619      	mov	r1, r3
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 f8eb 	bl	800946a <USBD_CtlSendData>
      break;
 8009294:	e004      	b.n	80092a0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009296:	6839      	ldr	r1, [r7, #0]
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 f875 	bl	8009388 <USBD_CtlError>
      break;
 800929e:	bf00      	nop
  }
}
 80092a0:	bf00      	nop
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	885b      	ldrh	r3, [r3, #2]
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d106      	bne.n	80092c8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2201      	movs	r2, #1
 80092be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 f92b 	bl	800951e <USBD_CtlSendStatus>
  }
}
 80092c8:	bf00      	nop
 80092ca:	3708      	adds	r7, #8
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	3b01      	subs	r3, #1
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d80b      	bhi.n	8009300 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	885b      	ldrh	r3, [r3, #2]
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d10c      	bne.n	800930a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 f910 	bl	800951e <USBD_CtlSendStatus>
      }
      break;
 80092fe:	e004      	b.n	800930a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f840 	bl	8009388 <USBD_CtlError>
      break;
 8009308:	e000      	b.n	800930c <USBD_ClrFeature+0x3c>
      break;
 800930a:	bf00      	nop
  }
}
 800930c:	bf00      	nop
 800930e:	3708      	adds	r7, #8
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	781a      	ldrb	r2, [r3, #0]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	3301      	adds	r3, #1
 800932e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	781a      	ldrb	r2, [r3, #0]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	3301      	adds	r3, #1
 800933c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f7ff fabb 	bl	80088ba <SWAPBYTE>
 8009344:	4603      	mov	r3, r0
 8009346:	461a      	mov	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	3301      	adds	r3, #1
 8009350:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	3301      	adds	r3, #1
 8009356:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	f7ff faae 	bl	80088ba <SWAPBYTE>
 800935e:	4603      	mov	r3, r0
 8009360:	461a      	mov	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	3301      	adds	r3, #1
 800936a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	3301      	adds	r3, #1
 8009370:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f7ff faa1 	bl	80088ba <SWAPBYTE>
 8009378:	4603      	mov	r3, r0
 800937a:	461a      	mov	r2, r3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	80da      	strh	r2, [r3, #6]
}
 8009380:	bf00      	nop
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009392:	2180      	movs	r1, #128	; 0x80
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fd65 	bl	8009e64 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800939a:	2100      	movs	r1, #0
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fd61 	bl	8009e64 <USBD_LL_StallEP>
}
 80093a2:	bf00      	nop
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b086      	sub	sp, #24
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	60f8      	str	r0, [r7, #12]
 80093b2:	60b9      	str	r1, [r7, #8]
 80093b4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80093b6:	2300      	movs	r3, #0
 80093b8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d036      	beq.n	800942e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80093c4:	6938      	ldr	r0, [r7, #16]
 80093c6:	f000 f836 	bl	8009436 <USBD_GetLen>
 80093ca:	4603      	mov	r3, r0
 80093cc:	3301      	adds	r3, #1
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	005b      	lsls	r3, r3, #1
 80093d2:	b29a      	uxth	r2, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80093d8:	7dfb      	ldrb	r3, [r7, #23]
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	4413      	add	r3, r2
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	7812      	ldrb	r2, [r2, #0]
 80093e2:	701a      	strb	r2, [r3, #0]
  idx++;
 80093e4:	7dfb      	ldrb	r3, [r7, #23]
 80093e6:	3301      	adds	r3, #1
 80093e8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80093ea:	7dfb      	ldrb	r3, [r7, #23]
 80093ec:	68ba      	ldr	r2, [r7, #8]
 80093ee:	4413      	add	r3, r2
 80093f0:	2203      	movs	r2, #3
 80093f2:	701a      	strb	r2, [r3, #0]
  idx++;
 80093f4:	7dfb      	ldrb	r3, [r7, #23]
 80093f6:	3301      	adds	r3, #1
 80093f8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80093fa:	e013      	b.n	8009424 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80093fc:	7dfb      	ldrb	r3, [r7, #23]
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	4413      	add	r3, r2
 8009402:	693a      	ldr	r2, [r7, #16]
 8009404:	7812      	ldrb	r2, [r2, #0]
 8009406:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	3301      	adds	r3, #1
 800940c:	613b      	str	r3, [r7, #16]
    idx++;
 800940e:	7dfb      	ldrb	r3, [r7, #23]
 8009410:	3301      	adds	r3, #1
 8009412:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009414:	7dfb      	ldrb	r3, [r7, #23]
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	4413      	add	r3, r2
 800941a:	2200      	movs	r2, #0
 800941c:	701a      	strb	r2, [r3, #0]
    idx++;
 800941e:	7dfb      	ldrb	r3, [r7, #23]
 8009420:	3301      	adds	r3, #1
 8009422:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1e7      	bne.n	80093fc <USBD_GetString+0x52>
 800942c:	e000      	b.n	8009430 <USBD_GetString+0x86>
    return;
 800942e:	bf00      	nop
  }
}
 8009430:	3718      	adds	r7, #24
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009436:	b480      	push	{r7}
 8009438:	b085      	sub	sp, #20
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800943e:	2300      	movs	r3, #0
 8009440:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009446:	e005      	b.n	8009454 <USBD_GetLen+0x1e>
  {
    len++;
 8009448:	7bfb      	ldrb	r3, [r7, #15]
 800944a:	3301      	adds	r3, #1
 800944c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	3301      	adds	r3, #1
 8009452:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1f5      	bne.n	8009448 <USBD_GetLen+0x12>
  }

  return len;
 800945c:	7bfb      	ldrb	r3, [r7, #15]
}
 800945e:	4618      	mov	r0, r3
 8009460:	3714      	adds	r7, #20
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr

0800946a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800946a:	b580      	push	{r7, lr}
 800946c:	b084      	sub	sp, #16
 800946e:	af00      	add	r7, sp, #0
 8009470:	60f8      	str	r0, [r7, #12]
 8009472:	60b9      	str	r1, [r7, #8]
 8009474:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2202      	movs	r2, #2
 800947a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	68ba      	ldr	r2, [r7, #8]
 800948e:	2100      	movs	r1, #0
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f000 fd70 	bl	8009f76 <USBD_LL_Transmit>

  return USBD_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3710      	adds	r7, #16
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	2100      	movs	r1, #0
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f000 fd5f 	bl	8009f76 <USBD_LL_Transmit>

  return USBD_OK;
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b084      	sub	sp, #16
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	60f8      	str	r0, [r7, #12]
 80094ca:	60b9      	str	r1, [r7, #8]
 80094cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2203      	movs	r2, #3
 80094d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	2100      	movs	r1, #0
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f000 fd63 	bl	8009fb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	68ba      	ldr	r2, [r7, #8]
 800950c:	2100      	movs	r1, #0
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	f000 fd52 	bl	8009fb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b082      	sub	sp, #8
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2204      	movs	r2, #4
 800952a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800952e:	2300      	movs	r3, #0
 8009530:	2200      	movs	r2, #0
 8009532:	2100      	movs	r1, #0
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 fd1e 	bl	8009f76 <USBD_LL_Transmit>

  return USBD_OK;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3708      	adds	r7, #8
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2205      	movs	r2, #5
 8009550:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009554:	2300      	movs	r3, #0
 8009556:	2200      	movs	r2, #0
 8009558:	2100      	movs	r1, #0
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 fd2c 	bl	8009fb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
	...

0800956c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009570:	2200      	movs	r2, #0
 8009572:	4912      	ldr	r1, [pc, #72]	; (80095bc <MX_USB_DEVICE_Init+0x50>)
 8009574:	4812      	ldr	r0, [pc, #72]	; (80095c0 <MX_USB_DEVICE_Init+0x54>)
 8009576:	f7fe fe8f 	bl	8008298 <USBD_Init>
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d001      	beq.n	8009584 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009580:	f7f8 f8e6 	bl	8001750 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009584:	490f      	ldr	r1, [pc, #60]	; (80095c4 <MX_USB_DEVICE_Init+0x58>)
 8009586:	480e      	ldr	r0, [pc, #56]	; (80095c0 <MX_USB_DEVICE_Init+0x54>)
 8009588:	f7fe feb6 	bl	80082f8 <USBD_RegisterClass>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d001      	beq.n	8009596 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009592:	f7f8 f8dd 	bl	8001750 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009596:	490c      	ldr	r1, [pc, #48]	; (80095c8 <MX_USB_DEVICE_Init+0x5c>)
 8009598:	4809      	ldr	r0, [pc, #36]	; (80095c0 <MX_USB_DEVICE_Init+0x54>)
 800959a:	f7fe fe07 	bl	80081ac <USBD_CDC_RegisterInterface>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d001      	beq.n	80095a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80095a4:	f7f8 f8d4 	bl	8001750 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80095a8:	4805      	ldr	r0, [pc, #20]	; (80095c0 <MX_USB_DEVICE_Init+0x54>)
 80095aa:	f7fe fecc 	bl	8008346 <USBD_Start>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d001      	beq.n	80095b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80095b4:	f7f8 f8cc 	bl	8001750 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80095b8:	bf00      	nop
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	20000140 	.word	0x20000140
 80095c0:	20000c50 	.word	0x20000c50
 80095c4:	20000028 	.word	0x20000028
 80095c8:	2000012c 	.word	0x2000012c

080095cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80095d2:	2200      	movs	r2, #0
 80095d4:	4918      	ldr	r1, [pc, #96]	; (8009638 <CDC_Init_FS+0x6c>)
 80095d6:	4819      	ldr	r0, [pc, #100]	; (800963c <CDC_Init_FS+0x70>)
 80095d8:	f7fe fdfd 	bl	80081d6 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80095dc:	4918      	ldr	r1, [pc, #96]	; (8009640 <CDC_Init_FS+0x74>)
 80095de:	4817      	ldr	r0, [pc, #92]	; (800963c <CDC_Init_FS+0x70>)
 80095e0:	f7fe fe17 	bl	8008212 <USBD_CDC_SetRxBuffer>

	// https://stackoverflow.com/a/26925578
	uint32_t baudrate = 9600;
 80095e4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80095e8:	607b      	str	r3, [r7, #4]
	lcBuffer[0] = (uint8_t) (baudrate);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	b2da      	uxtb	r2, r3
 80095ee:	4b15      	ldr	r3, [pc, #84]	; (8009644 <CDC_Init_FS+0x78>)
 80095f0:	701a      	strb	r2, [r3, #0]
	lcBuffer[1] = (uint8_t) (baudrate >> 8);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	0a1b      	lsrs	r3, r3, #8
 80095f6:	b2da      	uxtb	r2, r3
 80095f8:	4b12      	ldr	r3, [pc, #72]	; (8009644 <CDC_Init_FS+0x78>)
 80095fa:	705a      	strb	r2, [r3, #1]
	lcBuffer[2] = (uint8_t) (baudrate >> 16);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	0c1b      	lsrs	r3, r3, #16
 8009600:	b2da      	uxtb	r2, r3
 8009602:	4b10      	ldr	r3, [pc, #64]	; (8009644 <CDC_Init_FS+0x78>)
 8009604:	709a      	strb	r2, [r3, #2]
	lcBuffer[3] = (uint8_t) (baudrate >> 24);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	0e1b      	lsrs	r3, r3, #24
 800960a:	b2da      	uxtb	r2, r3
 800960c:	4b0d      	ldr	r3, [pc, #52]	; (8009644 <CDC_Init_FS+0x78>)
 800960e:	70da      	strb	r2, [r3, #3]
	lcBuffer[4] = 0; // 1 Stop bit
 8009610:	4b0c      	ldr	r3, [pc, #48]	; (8009644 <CDC_Init_FS+0x78>)
 8009612:	2200      	movs	r2, #0
 8009614:	711a      	strb	r2, [r3, #4]
	lcBuffer[5] = 0; // No parity
 8009616:	4b0b      	ldr	r3, [pc, #44]	; (8009644 <CDC_Init_FS+0x78>)
 8009618:	2200      	movs	r2, #0
 800961a:	715a      	strb	r2, [r3, #5]
	lcBuffer[6] = 8; // 8 data bits
 800961c:	4b09      	ldr	r3, [pc, #36]	; (8009644 <CDC_Init_FS+0x78>)
 800961e:	2208      	movs	r2, #8
 8009620:	719a      	strb	r2, [r3, #6]

	queue = createQueue(1);
 8009622:	2001      	movs	r0, #1
 8009624:	f7f8 f899 	bl	800175a <createQueue>
 8009628:	4603      	mov	r3, r0
 800962a:	4a07      	ldr	r2, [pc, #28]	; (8009648 <CDC_Init_FS+0x7c>)
 800962c:	6013      	str	r3, [r2, #0]

	return (USBD_OK);
 800962e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009630:	4618      	mov	r0, r3
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	20001724 	.word	0x20001724
 800963c:	20000c50 	.word	0x20000c50
 8009640:	20000f24 	.word	0x20000f24
 8009644:	20002024 	.word	0x20002024
 8009648:	20000f20 	.word	0x20000f20

0800964c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800964c:	b480      	push	{r7}
 800964e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8009650:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009652:	4618      	mov	r0, r3
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	4603      	mov	r3, r0
 8009664:	6039      	str	r1, [r7, #0]
 8009666:	71fb      	strb	r3, [r7, #7]
 8009668:	4613      	mov	r3, r2
 800966a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 800966c:	79fb      	ldrb	r3, [r7, #7]
 800966e:	2b23      	cmp	r3, #35	; 0x23
 8009670:	f200 808c 	bhi.w	800978c <CDC_Control_FS+0x130>
 8009674:	a201      	add	r2, pc, #4	; (adr r2, 800967c <CDC_Control_FS+0x20>)
 8009676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967a:	bf00      	nop
 800967c:	0800978d 	.word	0x0800978d
 8009680:	0800978d 	.word	0x0800978d
 8009684:	0800978d 	.word	0x0800978d
 8009688:	0800978d 	.word	0x0800978d
 800968c:	0800978d 	.word	0x0800978d
 8009690:	0800978d 	.word	0x0800978d
 8009694:	0800978d 	.word	0x0800978d
 8009698:	0800978d 	.word	0x0800978d
 800969c:	0800978d 	.word	0x0800978d
 80096a0:	0800978d 	.word	0x0800978d
 80096a4:	0800978d 	.word	0x0800978d
 80096a8:	0800978d 	.word	0x0800978d
 80096ac:	0800978d 	.word	0x0800978d
 80096b0:	0800978d 	.word	0x0800978d
 80096b4:	0800978d 	.word	0x0800978d
 80096b8:	0800978d 	.word	0x0800978d
 80096bc:	0800978d 	.word	0x0800978d
 80096c0:	0800978d 	.word	0x0800978d
 80096c4:	0800978d 	.word	0x0800978d
 80096c8:	0800978d 	.word	0x0800978d
 80096cc:	0800978d 	.word	0x0800978d
 80096d0:	0800978d 	.word	0x0800978d
 80096d4:	0800978d 	.word	0x0800978d
 80096d8:	0800978d 	.word	0x0800978d
 80096dc:	0800978d 	.word	0x0800978d
 80096e0:	0800978d 	.word	0x0800978d
 80096e4:	0800978d 	.word	0x0800978d
 80096e8:	0800978d 	.word	0x0800978d
 80096ec:	0800978d 	.word	0x0800978d
 80096f0:	0800978d 	.word	0x0800978d
 80096f4:	0800978d 	.word	0x0800978d
 80096f8:	0800978d 	.word	0x0800978d
 80096fc:	0800970d 	.word	0x0800970d
 8009700:	08009747 	.word	0x08009747
 8009704:	0800978d 	.word	0x0800978d
 8009708:	0800978d 	.word	0x0800978d
		/* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
		/*******************************************************************************/

		// https://github.com/philrawlings/bluepill-usb-cdc-test/blob/main/USB_DEVICE/App/usbd_cdc_if.c
	case CDC_SET_LINE_CODING:
		lcBuffer[0] = pbuf[0];
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	781a      	ldrb	r2, [r3, #0]
 8009710:	4b22      	ldr	r3, [pc, #136]	; (800979c <CDC_Control_FS+0x140>)
 8009712:	701a      	strb	r2, [r3, #0]
		lcBuffer[1] = pbuf[1];
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	785a      	ldrb	r2, [r3, #1]
 8009718:	4b20      	ldr	r3, [pc, #128]	; (800979c <CDC_Control_FS+0x140>)
 800971a:	705a      	strb	r2, [r3, #1]
		lcBuffer[2] = pbuf[2];
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	789a      	ldrb	r2, [r3, #2]
 8009720:	4b1e      	ldr	r3, [pc, #120]	; (800979c <CDC_Control_FS+0x140>)
 8009722:	709a      	strb	r2, [r3, #2]
		lcBuffer[3] = pbuf[3];
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	78da      	ldrb	r2, [r3, #3]
 8009728:	4b1c      	ldr	r3, [pc, #112]	; (800979c <CDC_Control_FS+0x140>)
 800972a:	70da      	strb	r2, [r3, #3]
		lcBuffer[4] = pbuf[4];
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	791a      	ldrb	r2, [r3, #4]
 8009730:	4b1a      	ldr	r3, [pc, #104]	; (800979c <CDC_Control_FS+0x140>)
 8009732:	711a      	strb	r2, [r3, #4]
		lcBuffer[5] = pbuf[5];
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	795a      	ldrb	r2, [r3, #5]
 8009738:	4b18      	ldr	r3, [pc, #96]	; (800979c <CDC_Control_FS+0x140>)
 800973a:	715a      	strb	r2, [r3, #5]
		lcBuffer[6] = pbuf[6];
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	799a      	ldrb	r2, [r3, #6]
 8009740:	4b16      	ldr	r3, [pc, #88]	; (800979c <CDC_Control_FS+0x140>)
 8009742:	719a      	strb	r2, [r3, #6]
		break;
 8009744:	e023      	b.n	800978e <CDC_Control_FS+0x132>

	case CDC_GET_LINE_CODING:
		pbuf[0] = lcBuffer[0];
 8009746:	4b15      	ldr	r3, [pc, #84]	; (800979c <CDC_Control_FS+0x140>)
 8009748:	781a      	ldrb	r2, [r3, #0]
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	701a      	strb	r2, [r3, #0]
		pbuf[1] = lcBuffer[1];
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	3301      	adds	r3, #1
 8009752:	4a12      	ldr	r2, [pc, #72]	; (800979c <CDC_Control_FS+0x140>)
 8009754:	7852      	ldrb	r2, [r2, #1]
 8009756:	701a      	strb	r2, [r3, #0]
		pbuf[2] = lcBuffer[2];
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	3302      	adds	r3, #2
 800975c:	4a0f      	ldr	r2, [pc, #60]	; (800979c <CDC_Control_FS+0x140>)
 800975e:	7892      	ldrb	r2, [r2, #2]
 8009760:	701a      	strb	r2, [r3, #0]
		pbuf[3] = lcBuffer[3];
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	3303      	adds	r3, #3
 8009766:	4a0d      	ldr	r2, [pc, #52]	; (800979c <CDC_Control_FS+0x140>)
 8009768:	78d2      	ldrb	r2, [r2, #3]
 800976a:	701a      	strb	r2, [r3, #0]
		pbuf[4] = lcBuffer[4];
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	3304      	adds	r3, #4
 8009770:	4a0a      	ldr	r2, [pc, #40]	; (800979c <CDC_Control_FS+0x140>)
 8009772:	7912      	ldrb	r2, [r2, #4]
 8009774:	701a      	strb	r2, [r3, #0]
		pbuf[5] = lcBuffer[5];
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	3305      	adds	r3, #5
 800977a:	4a08      	ldr	r2, [pc, #32]	; (800979c <CDC_Control_FS+0x140>)
 800977c:	7952      	ldrb	r2, [r2, #5]
 800977e:	701a      	strb	r2, [r3, #0]
		pbuf[6] = lcBuffer[6];
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	3306      	adds	r3, #6
 8009784:	4a05      	ldr	r2, [pc, #20]	; (800979c <CDC_Control_FS+0x140>)
 8009786:	7992      	ldrb	r2, [r2, #6]
 8009788:	701a      	strb	r2, [r3, #0]
		// Get line coding is invoked when the host connects, clear the RxBuffer when this occurs


	case CDC_SET_CONTROL_LINE_STATE:

		break;
 800978a:	e000      	b.n	800978e <CDC_Control_FS+0x132>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800978c:	bf00      	nop
	}

	return (USBD_OK);
 800978e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009790:	4618      	mov	r0, r3
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr
 800979c:	20002024 	.word	0x20002024

080097a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80097aa:	6879      	ldr	r1, [r7, #4]
 80097ac:	4811      	ldr	r0, [pc, #68]	; (80097f4 <CDC_Receive_FS+0x54>)
 80097ae:	f7fe fd30 	bl	8008212 <USBD_CDC_SetRxBuffer>

	uint8_t len = (uint8_t) *Len;
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	73fb      	strb	r3, [r7, #15]
	uint8_t* dataBuffer = enQueue(queue, QNODE_DATA_BYTES);
 80097b8:	4b0f      	ldr	r3, [pc, #60]	; (80097f8 <CDC_Receive_FS+0x58>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2103      	movs	r1, #3
 80097be:	4618      	mov	r0, r3
 80097c0:	f7f7 ffe0 	bl	8001784 <enQueue>
 80097c4:	60b8      	str	r0, [r7, #8]
	if(dataBuffer){
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d004      	beq.n	80097d6 <CDC_Receive_FS+0x36>
		memcpy(dataBuffer, Buf, QNODE_DATA_BYTES);
 80097cc:	2203      	movs	r2, #3
 80097ce:	6879      	ldr	r1, [r7, #4]
 80097d0:	68b8      	ldr	r0, [r7, #8]
 80097d2:	f000 fca3 	bl	800a11c <memcpy>
	}
	memset(Buf, 0, len);
 80097d6:	7bfb      	ldrb	r3, [r7, #15]
 80097d8:	461a      	mov	r2, r3
 80097da:	2100      	movs	r1, #0
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 fcab 	bl	800a138 <memset>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80097e2:	4804      	ldr	r0, [pc, #16]	; (80097f4 <CDC_Receive_FS+0x54>)
 80097e4:	f7fe fd2e 	bl	8008244 <USBD_CDC_ReceivePacket>


	return (USBD_OK);
 80097e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	20000c50 	.word	0x20000c50
 80097f8:	20000f20 	.word	0x20000f20

080097fc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b087      	sub	sp, #28
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	4613      	mov	r3, r2
 8009808:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800980a:	2300      	movs	r3, #0
 800980c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800980e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009812:	4618      	mov	r0, r3
 8009814:	371c      	adds	r7, #28
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
	...

08009820 <get_data_frame>:
uint8_t data_available(){

	return 0;
}

void get_data_frame(uint8_t* buffer, uint8_t size){
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	460b      	mov	r3, r1
 800982a:	70fb      	strb	r3, [r7, #3]
	struct QNode *temp = deQueue(queue);
 800982c:	4b10      	ldr	r3, [pc, #64]	; (8009870 <get_data_frame+0x50>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4618      	mov	r0, r3
 8009832:	f7f7 ffed 	bl	8001810 <deQueue>
 8009836:	60f8      	str	r0, [r7, #12]
	if(temp){
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00f      	beq.n	800985e <get_data_frame+0x3e>
		memcpy(buffer, temp->data, QNODE_DATA_BYTES);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2203      	movs	r2, #3
 8009844:	4619      	mov	r1, r3
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fc68 	bl	800a11c <memcpy>
		free(temp->data);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4618      	mov	r0, r3
 8009852:	f000 fc5b 	bl	800a10c <free>
		free(temp);
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f000 fc58 	bl	800a10c <free>
	}else{
		memset(buffer, 0, QNODE_DATA_BYTES);
	}


}
 800985c:	e004      	b.n	8009868 <get_data_frame+0x48>
		memset(buffer, 0, QNODE_DATA_BYTES);
 800985e:	2203      	movs	r2, #3
 8009860:	2100      	movs	r1, #0
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 fc68 	bl	800a138 <memset>
}
 8009868:	bf00      	nop
 800986a:	3710      	adds	r7, #16
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	20000f20 	.word	0x20000f20

08009874 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	4603      	mov	r3, r0
 800987c:	6039      	str	r1, [r7, #0]
 800987e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	2212      	movs	r2, #18
 8009884:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009886:	4b03      	ldr	r3, [pc, #12]	; (8009894 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009888:	4618      	mov	r0, r3
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr
 8009894:	2000015c 	.word	0x2000015c

08009898 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	4603      	mov	r3, r0
 80098a0:	6039      	str	r1, [r7, #0]
 80098a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	2204      	movs	r2, #4
 80098a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80098aa:	4b03      	ldr	r3, [pc, #12]	; (80098b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	20000170 	.word	0x20000170

080098bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	4603      	mov	r3, r0
 80098c4:	6039      	str	r1, [r7, #0]
 80098c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80098c8:	79fb      	ldrb	r3, [r7, #7]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d105      	bne.n	80098da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	4907      	ldr	r1, [pc, #28]	; (80098f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80098d2:	4808      	ldr	r0, [pc, #32]	; (80098f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80098d4:	f7ff fd69 	bl	80093aa <USBD_GetString>
 80098d8:	e004      	b.n	80098e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80098da:	683a      	ldr	r2, [r7, #0]
 80098dc:	4904      	ldr	r1, [pc, #16]	; (80098f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80098de:	4805      	ldr	r0, [pc, #20]	; (80098f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80098e0:	f7ff fd63 	bl	80093aa <USBD_GetString>
  }
  return USBD_StrDesc;
 80098e4:	4b02      	ldr	r3, [pc, #8]	; (80098f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	2000202c 	.word	0x2000202c
 80098f4:	0800c4b4 	.word	0x0800c4b4

080098f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	4603      	mov	r3, r0
 8009900:	6039      	str	r1, [r7, #0]
 8009902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009904:	683a      	ldr	r2, [r7, #0]
 8009906:	4904      	ldr	r1, [pc, #16]	; (8009918 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009908:	4804      	ldr	r0, [pc, #16]	; (800991c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800990a:	f7ff fd4e 	bl	80093aa <USBD_GetString>
  return USBD_StrDesc;
 800990e:	4b02      	ldr	r3, [pc, #8]	; (8009918 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009910:	4618      	mov	r0, r3
 8009912:	3708      	adds	r7, #8
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	2000202c 	.word	0x2000202c
 800991c:	0800c4cc 	.word	0x0800c4cc

08009920 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	4603      	mov	r3, r0
 8009928:	6039      	str	r1, [r7, #0]
 800992a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	221a      	movs	r2, #26
 8009930:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009932:	f000 f843 	bl	80099bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009936:	4b02      	ldr	r3, [pc, #8]	; (8009940 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009938:	4618      	mov	r0, r3
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	20000174 	.word	0x20000174

08009944 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	4603      	mov	r3, r0
 800994c:	6039      	str	r1, [r7, #0]
 800994e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009950:	79fb      	ldrb	r3, [r7, #7]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d105      	bne.n	8009962 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009956:	683a      	ldr	r2, [r7, #0]
 8009958:	4907      	ldr	r1, [pc, #28]	; (8009978 <USBD_FS_ConfigStrDescriptor+0x34>)
 800995a:	4808      	ldr	r0, [pc, #32]	; (800997c <USBD_FS_ConfigStrDescriptor+0x38>)
 800995c:	f7ff fd25 	bl	80093aa <USBD_GetString>
 8009960:	e004      	b.n	800996c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009962:	683a      	ldr	r2, [r7, #0]
 8009964:	4904      	ldr	r1, [pc, #16]	; (8009978 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009966:	4805      	ldr	r0, [pc, #20]	; (800997c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009968:	f7ff fd1f 	bl	80093aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800996c:	4b02      	ldr	r3, [pc, #8]	; (8009978 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800996e:	4618      	mov	r0, r3
 8009970:	3708      	adds	r7, #8
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	2000202c 	.word	0x2000202c
 800997c:	0800c4e0 	.word	0x0800c4e0

08009980 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	4603      	mov	r3, r0
 8009988:	6039      	str	r1, [r7, #0]
 800998a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800998c:	79fb      	ldrb	r3, [r7, #7]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d105      	bne.n	800999e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009992:	683a      	ldr	r2, [r7, #0]
 8009994:	4907      	ldr	r1, [pc, #28]	; (80099b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009996:	4808      	ldr	r0, [pc, #32]	; (80099b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009998:	f7ff fd07 	bl	80093aa <USBD_GetString>
 800999c:	e004      	b.n	80099a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800999e:	683a      	ldr	r2, [r7, #0]
 80099a0:	4904      	ldr	r1, [pc, #16]	; (80099b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80099a2:	4805      	ldr	r0, [pc, #20]	; (80099b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80099a4:	f7ff fd01 	bl	80093aa <USBD_GetString>
  }
  return USBD_StrDesc;
 80099a8:	4b02      	ldr	r3, [pc, #8]	; (80099b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	2000202c 	.word	0x2000202c
 80099b8:	0800c4ec 	.word	0x0800c4ec

080099bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80099c2:	4b0f      	ldr	r3, [pc, #60]	; (8009a00 <Get_SerialNum+0x44>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80099c8:	4b0e      	ldr	r3, [pc, #56]	; (8009a04 <Get_SerialNum+0x48>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80099ce:	4b0e      	ldr	r3, [pc, #56]	; (8009a08 <Get_SerialNum+0x4c>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4413      	add	r3, r2
 80099da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d009      	beq.n	80099f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80099e2:	2208      	movs	r2, #8
 80099e4:	4909      	ldr	r1, [pc, #36]	; (8009a0c <Get_SerialNum+0x50>)
 80099e6:	68f8      	ldr	r0, [r7, #12]
 80099e8:	f000 f814 	bl	8009a14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80099ec:	2204      	movs	r2, #4
 80099ee:	4908      	ldr	r1, [pc, #32]	; (8009a10 <Get_SerialNum+0x54>)
 80099f0:	68b8      	ldr	r0, [r7, #8]
 80099f2:	f000 f80f 	bl	8009a14 <IntToUnicode>
  }
}
 80099f6:	bf00      	nop
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	1fff7a10 	.word	0x1fff7a10
 8009a04:	1fff7a14 	.word	0x1fff7a14
 8009a08:	1fff7a18 	.word	0x1fff7a18
 8009a0c:	20000176 	.word	0x20000176
 8009a10:	20000186 	.word	0x20000186

08009a14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b087      	sub	sp, #28
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	4613      	mov	r3, r2
 8009a20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009a22:	2300      	movs	r3, #0
 8009a24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009a26:	2300      	movs	r3, #0
 8009a28:	75fb      	strb	r3, [r7, #23]
 8009a2a:	e027      	b.n	8009a7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	0f1b      	lsrs	r3, r3, #28
 8009a30:	2b09      	cmp	r3, #9
 8009a32:	d80b      	bhi.n	8009a4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	0f1b      	lsrs	r3, r3, #28
 8009a38:	b2da      	uxtb	r2, r3
 8009a3a:	7dfb      	ldrb	r3, [r7, #23]
 8009a3c:	005b      	lsls	r3, r3, #1
 8009a3e:	4619      	mov	r1, r3
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	440b      	add	r3, r1
 8009a44:	3230      	adds	r2, #48	; 0x30
 8009a46:	b2d2      	uxtb	r2, r2
 8009a48:	701a      	strb	r2, [r3, #0]
 8009a4a:	e00a      	b.n	8009a62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	0f1b      	lsrs	r3, r3, #28
 8009a50:	b2da      	uxtb	r2, r3
 8009a52:	7dfb      	ldrb	r3, [r7, #23]
 8009a54:	005b      	lsls	r3, r3, #1
 8009a56:	4619      	mov	r1, r3
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	440b      	add	r3, r1
 8009a5c:	3237      	adds	r2, #55	; 0x37
 8009a5e:	b2d2      	uxtb	r2, r2
 8009a60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	011b      	lsls	r3, r3, #4
 8009a66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009a68:	7dfb      	ldrb	r3, [r7, #23]
 8009a6a:	005b      	lsls	r3, r3, #1
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	68ba      	ldr	r2, [r7, #8]
 8009a70:	4413      	add	r3, r2
 8009a72:	2200      	movs	r2, #0
 8009a74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009a76:	7dfb      	ldrb	r3, [r7, #23]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	75fb      	strb	r3, [r7, #23]
 8009a7c:	7dfa      	ldrb	r2, [r7, #23]
 8009a7e:	79fb      	ldrb	r3, [r7, #7]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d3d3      	bcc.n	8009a2c <IntToUnicode+0x18>
  }
}
 8009a84:	bf00      	nop
 8009a86:	bf00      	nop
 8009a88:	371c      	adds	r7, #28
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr
	...

08009a94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b08a      	sub	sp, #40	; 0x28
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a9c:	f107 0314 	add.w	r3, r7, #20
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	601a      	str	r2, [r3, #0]
 8009aa4:	605a      	str	r2, [r3, #4]
 8009aa6:	609a      	str	r2, [r3, #8]
 8009aa8:	60da      	str	r2, [r3, #12]
 8009aaa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ab4:	d13a      	bne.n	8009b2c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	613b      	str	r3, [r7, #16]
 8009aba:	4b1e      	ldr	r3, [pc, #120]	; (8009b34 <HAL_PCD_MspInit+0xa0>)
 8009abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009abe:	4a1d      	ldr	r2, [pc, #116]	; (8009b34 <HAL_PCD_MspInit+0xa0>)
 8009ac0:	f043 0301 	orr.w	r3, r3, #1
 8009ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8009ac6:	4b1b      	ldr	r3, [pc, #108]	; (8009b34 <HAL_PCD_MspInit+0xa0>)
 8009ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aca:	f003 0301 	and.w	r3, r3, #1
 8009ace:	613b      	str	r3, [r7, #16]
 8009ad0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009ad2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ad8:	2302      	movs	r3, #2
 8009ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009adc:	2300      	movs	r3, #0
 8009ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ae0:	2303      	movs	r3, #3
 8009ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009ae4:	230a      	movs	r3, #10
 8009ae6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ae8:	f107 0314 	add.w	r3, r7, #20
 8009aec:	4619      	mov	r1, r3
 8009aee:	4812      	ldr	r0, [pc, #72]	; (8009b38 <HAL_PCD_MspInit+0xa4>)
 8009af0:	f7f9 f8b4 	bl	8002c5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009af4:	4b0f      	ldr	r3, [pc, #60]	; (8009b34 <HAL_PCD_MspInit+0xa0>)
 8009af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009af8:	4a0e      	ldr	r2, [pc, #56]	; (8009b34 <HAL_PCD_MspInit+0xa0>)
 8009afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009afe:	6353      	str	r3, [r2, #52]	; 0x34
 8009b00:	2300      	movs	r3, #0
 8009b02:	60fb      	str	r3, [r7, #12]
 8009b04:	4b0b      	ldr	r3, [pc, #44]	; (8009b34 <HAL_PCD_MspInit+0xa0>)
 8009b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b08:	4a0a      	ldr	r2, [pc, #40]	; (8009b34 <HAL_PCD_MspInit+0xa0>)
 8009b0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b0e:	6453      	str	r3, [r2, #68]	; 0x44
 8009b10:	4b08      	ldr	r3, [pc, #32]	; (8009b34 <HAL_PCD_MspInit+0xa0>)
 8009b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b18:	60fb      	str	r3, [r7, #12]
 8009b1a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	2100      	movs	r1, #0
 8009b20:	2043      	movs	r0, #67	; 0x43
 8009b22:	f7f8 fcd2 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009b26:	2043      	movs	r0, #67	; 0x43
 8009b28:	f7f8 fceb 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009b2c:	bf00      	nop
 8009b2e:	3728      	adds	r7, #40	; 0x28
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	40023800 	.word	0x40023800
 8009b38:	40020000 	.word	0x40020000

08009b3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009b50:	4619      	mov	r1, r3
 8009b52:	4610      	mov	r0, r2
 8009b54:	f7fe fc42 	bl	80083dc <USBD_LL_SetupStage>
}
 8009b58:	bf00      	nop
 8009b5a:	3708      	adds	r7, #8
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	460b      	mov	r3, r1
 8009b6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009b72:	78fa      	ldrb	r2, [r7, #3]
 8009b74:	6879      	ldr	r1, [r7, #4]
 8009b76:	4613      	mov	r3, r2
 8009b78:	00db      	lsls	r3, r3, #3
 8009b7a:	1a9b      	subs	r3, r3, r2
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	440b      	add	r3, r1
 8009b80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	78fb      	ldrb	r3, [r7, #3]
 8009b88:	4619      	mov	r1, r3
 8009b8a:	f7fe fc7c 	bl	8008486 <USBD_LL_DataOutStage>
}
 8009b8e:	bf00      	nop
 8009b90:	3708      	adds	r7, #8
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b082      	sub	sp, #8
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009ba8:	78fa      	ldrb	r2, [r7, #3]
 8009baa:	6879      	ldr	r1, [r7, #4]
 8009bac:	4613      	mov	r3, r2
 8009bae:	00db      	lsls	r3, r3, #3
 8009bb0:	1a9b      	subs	r3, r3, r2
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	440b      	add	r3, r1
 8009bb6:	3348      	adds	r3, #72	; 0x48
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	78fb      	ldrb	r3, [r7, #3]
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	f7fe fcc5 	bl	800854c <USBD_LL_DataInStage>
}
 8009bc2:	bf00      	nop
 8009bc4:	3708      	adds	r7, #8
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b082      	sub	sp, #8
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7fe fdd9 	bl	8008790 <USBD_LL_SOF>
}
 8009bde:	bf00      	nop
 8009be0:	3708      	adds	r7, #8
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b084      	sub	sp, #16
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d001      	beq.n	8009bfe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009bfa:	f7f7 fda9 	bl	8001750 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c04:	7bfa      	ldrb	r2, [r7, #15]
 8009c06:	4611      	mov	r1, r2
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fe fd83 	bl	8008714 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7fe fd2f 	bl	8008678 <USBD_LL_Reset>
}
 8009c1a:	bf00      	nop
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
	...

08009c24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7fe fd7e 	bl	8008734 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	6812      	ldr	r2, [r2, #0]
 8009c46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c4a:	f043 0301 	orr.w	r3, r3, #1
 8009c4e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6a1b      	ldr	r3, [r3, #32]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d005      	beq.n	8009c64 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c58:	4b04      	ldr	r3, [pc, #16]	; (8009c6c <HAL_PCD_SuspendCallback+0x48>)
 8009c5a:	691b      	ldr	r3, [r3, #16]
 8009c5c:	4a03      	ldr	r2, [pc, #12]	; (8009c6c <HAL_PCD_SuspendCallback+0x48>)
 8009c5e:	f043 0306 	orr.w	r3, r3, #6
 8009c62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009c64:	bf00      	nop
 8009c66:	3708      	adds	r7, #8
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	e000ed00 	.word	0xe000ed00

08009c70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7fe fd6e 	bl	8008760 <USBD_LL_Resume>
}
 8009c84:	bf00      	nop
 8009c86:	3708      	adds	r7, #8
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	460b      	mov	r3, r1
 8009c96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c9e:	78fa      	ldrb	r2, [r7, #3]
 8009ca0:	4611      	mov	r1, r2
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7fe fdbc 	bl	8008820 <USBD_LL_IsoOUTIncomplete>
}
 8009ca8:	bf00      	nop
 8009caa:	3708      	adds	r7, #8
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	460b      	mov	r3, r1
 8009cba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009cc2:	78fa      	ldrb	r2, [r7, #3]
 8009cc4:	4611      	mov	r1, r2
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7fe fd84 	bl	80087d4 <USBD_LL_IsoINIncomplete>
}
 8009ccc:	bf00      	nop
 8009cce:	3708      	adds	r7, #8
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7fe fdc2 	bl	800886c <USBD_LL_DevConnected>
}
 8009ce8:	bf00      	nop
 8009cea:	3708      	adds	r7, #8
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7fe fdbf 	bl	8008882 <USBD_LL_DevDisconnected>
}
 8009d04:	bf00      	nop
 8009d06:	3708      	adds	r7, #8
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d13c      	bne.n	8009d96 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009d1c:	4a20      	ldr	r2, [pc, #128]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a1e      	ldr	r2, [pc, #120]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d28:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009d2c:	4b1c      	ldr	r3, [pc, #112]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009d32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009d34:	4b1a      	ldr	r3, [pc, #104]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d36:	2204      	movs	r2, #4
 8009d38:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009d3a:	4b19      	ldr	r3, [pc, #100]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d3c:	2202      	movs	r2, #2
 8009d3e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009d40:	4b17      	ldr	r3, [pc, #92]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d42:	2200      	movs	r2, #0
 8009d44:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009d46:	4b16      	ldr	r3, [pc, #88]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d48:	2202      	movs	r2, #2
 8009d4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009d4c:	4b14      	ldr	r3, [pc, #80]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d4e:	2200      	movs	r2, #0
 8009d50:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009d52:	4b13      	ldr	r3, [pc, #76]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d54:	2200      	movs	r2, #0
 8009d56:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009d58:	4b11      	ldr	r3, [pc, #68]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009d5e:	4b10      	ldr	r3, [pc, #64]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d60:	2200      	movs	r2, #0
 8009d62:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009d64:	4b0e      	ldr	r3, [pc, #56]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d66:	2200      	movs	r2, #0
 8009d68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009d6a:	480d      	ldr	r0, [pc, #52]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d6c:	f7f9 fd55 	bl	800381a <HAL_PCD_Init>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d001      	beq.n	8009d7a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009d76:	f7f7 fceb 	bl	8001750 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009d7a:	2180      	movs	r1, #128	; 0x80
 8009d7c:	4808      	ldr	r0, [pc, #32]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d7e:	f7fa feb2 	bl	8004ae6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009d82:	2240      	movs	r2, #64	; 0x40
 8009d84:	2100      	movs	r1, #0
 8009d86:	4806      	ldr	r0, [pc, #24]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d88:	f7fa fe66 	bl	8004a58 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009d8c:	2280      	movs	r2, #128	; 0x80
 8009d8e:	2101      	movs	r1, #1
 8009d90:	4803      	ldr	r0, [pc, #12]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d92:	f7fa fe61 	bl	8004a58 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3708      	adds	r7, #8
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	2000222c 	.word	0x2000222c

08009da4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dac:	2300      	movs	r3, #0
 8009dae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009db0:	2300      	movs	r3, #0
 8009db2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7f9 fe4a 	bl	8003a54 <HAL_PCD_Start>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f000 f942 	bl	800a050 <USBD_Get_USB_Status>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b084      	sub	sp, #16
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
 8009de2:	4608      	mov	r0, r1
 8009de4:	4611      	mov	r1, r2
 8009de6:	461a      	mov	r2, r3
 8009de8:	4603      	mov	r3, r0
 8009dea:	70fb      	strb	r3, [r7, #3]
 8009dec:	460b      	mov	r3, r1
 8009dee:	70bb      	strb	r3, [r7, #2]
 8009df0:	4613      	mov	r3, r2
 8009df2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009df4:	2300      	movs	r3, #0
 8009df6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e02:	78bb      	ldrb	r3, [r7, #2]
 8009e04:	883a      	ldrh	r2, [r7, #0]
 8009e06:	78f9      	ldrb	r1, [r7, #3]
 8009e08:	f7fa fa2e 	bl	8004268 <HAL_PCD_EP_Open>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e10:	7bfb      	ldrb	r3, [r7, #15]
 8009e12:	4618      	mov	r0, r3
 8009e14:	f000 f91c 	bl	800a050 <USBD_Get_USB_Status>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e26:	b580      	push	{r7, lr}
 8009e28:	b084      	sub	sp, #16
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
 8009e2e:	460b      	mov	r3, r1
 8009e30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e32:	2300      	movs	r3, #0
 8009e34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e36:	2300      	movs	r3, #0
 8009e38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e40:	78fa      	ldrb	r2, [r7, #3]
 8009e42:	4611      	mov	r1, r2
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7fa fa77 	bl	8004338 <HAL_PCD_EP_Close>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e4e:	7bfb      	ldrb	r3, [r7, #15]
 8009e50:	4618      	mov	r0, r3
 8009e52:	f000 f8fd 	bl	800a050 <USBD_Get_USB_Status>
 8009e56:	4603      	mov	r3, r0
 8009e58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3710      	adds	r7, #16
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e70:	2300      	movs	r3, #0
 8009e72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e74:	2300      	movs	r3, #0
 8009e76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e7e:	78fa      	ldrb	r2, [r7, #3]
 8009e80:	4611      	mov	r1, r2
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7fa fb4f 	bl	8004526 <HAL_PCD_EP_SetStall>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e8c:	7bfb      	ldrb	r3, [r7, #15]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f000 f8de 	bl	800a050 <USBD_Get_USB_Status>
 8009e94:	4603      	mov	r3, r0
 8009e96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e98:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3710      	adds	r7, #16
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b084      	sub	sp, #16
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
 8009eaa:	460b      	mov	r3, r1
 8009eac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ebc:	78fa      	ldrb	r2, [r7, #3]
 8009ebe:	4611      	mov	r1, r2
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7fa fb94 	bl	80045ee <HAL_PCD_EP_ClrStall>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009eca:	7bfb      	ldrb	r3, [r7, #15]
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f000 f8bf 	bl	800a050 <USBD_Get_USB_Status>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ed6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3710      	adds	r7, #16
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b085      	sub	sp, #20
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	460b      	mov	r3, r1
 8009eea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ef2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009ef4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	da0b      	bge.n	8009f14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009efc:	78fb      	ldrb	r3, [r7, #3]
 8009efe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f02:	68f9      	ldr	r1, [r7, #12]
 8009f04:	4613      	mov	r3, r2
 8009f06:	00db      	lsls	r3, r3, #3
 8009f08:	1a9b      	subs	r3, r3, r2
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	440b      	add	r3, r1
 8009f0e:	333e      	adds	r3, #62	; 0x3e
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	e00b      	b.n	8009f2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009f14:	78fb      	ldrb	r3, [r7, #3]
 8009f16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f1a:	68f9      	ldr	r1, [r7, #12]
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	00db      	lsls	r3, r3, #3
 8009f20:	1a9b      	subs	r3, r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	440b      	add	r3, r1
 8009f26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009f2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3714      	adds	r7, #20
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	460b      	mov	r3, r1
 8009f42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f44:	2300      	movs	r3, #0
 8009f46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f52:	78fa      	ldrb	r2, [r7, #3]
 8009f54:	4611      	mov	r1, r2
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fa f961 	bl	800421e <HAL_PCD_SetAddress>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f60:	7bfb      	ldrb	r3, [r7, #15]
 8009f62:	4618      	mov	r0, r3
 8009f64:	f000 f874 	bl	800a050 <USBD_Get_USB_Status>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b086      	sub	sp, #24
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	60f8      	str	r0, [r7, #12]
 8009f7e:	607a      	str	r2, [r7, #4]
 8009f80:	603b      	str	r3, [r7, #0]
 8009f82:	460b      	mov	r3, r1
 8009f84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f86:	2300      	movs	r3, #0
 8009f88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009f94:	7af9      	ldrb	r1, [r7, #11]
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	f7fa fa7a 	bl	8004492 <HAL_PCD_EP_Transmit>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fa2:	7dfb      	ldrb	r3, [r7, #23]
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f000 f853 	bl	800a050 <USBD_Get_USB_Status>
 8009faa:	4603      	mov	r3, r0
 8009fac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009fae:	7dbb      	ldrb	r3, [r7, #22]
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3718      	adds	r7, #24
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	607a      	str	r2, [r7, #4]
 8009fc2:	603b      	str	r3, [r7, #0]
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009fd6:	7af9      	ldrb	r1, [r7, #11]
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	f7fa f9f6 	bl	80043cc <HAL_PCD_EP_Receive>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fe4:	7dfb      	ldrb	r3, [r7, #23]
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f000 f832 	bl	800a050 <USBD_Get_USB_Status>
 8009fec:	4603      	mov	r3, r0
 8009fee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ff0:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3718      	adds	r7, #24
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b082      	sub	sp, #8
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
 800a002:	460b      	mov	r3, r1
 800a004:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a00c:	78fa      	ldrb	r2, [r7, #3]
 800a00e:	4611      	mov	r1, r2
 800a010:	4618      	mov	r0, r3
 800a012:	f7fa fa26 	bl	8004462 <HAL_PCD_EP_GetRxCount>
 800a016:	4603      	mov	r3, r0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3708      	adds	r7, #8
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a028:	4b03      	ldr	r3, [pc, #12]	; (800a038 <USBD_static_malloc+0x18>)
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	370c      	adds	r7, #12
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	20000624 	.word	0x20000624

0800a03c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]

}
 800a044:	bf00      	nop
 800a046:	370c      	adds	r7, #12
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr

0800a050 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a050:	b480      	push	{r7}
 800a052:	b085      	sub	sp, #20
 800a054:	af00      	add	r7, sp, #0
 800a056:	4603      	mov	r3, r0
 800a058:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a05a:	2300      	movs	r3, #0
 800a05c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a05e:	79fb      	ldrb	r3, [r7, #7]
 800a060:	2b03      	cmp	r3, #3
 800a062:	d817      	bhi.n	800a094 <USBD_Get_USB_Status+0x44>
 800a064:	a201      	add	r2, pc, #4	; (adr r2, 800a06c <USBD_Get_USB_Status+0x1c>)
 800a066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a06a:	bf00      	nop
 800a06c:	0800a07d 	.word	0x0800a07d
 800a070:	0800a083 	.word	0x0800a083
 800a074:	0800a089 	.word	0x0800a089
 800a078:	0800a08f 	.word	0x0800a08f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a07c:	2300      	movs	r3, #0
 800a07e:	73fb      	strb	r3, [r7, #15]
    break;
 800a080:	e00b      	b.n	800a09a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a082:	2303      	movs	r3, #3
 800a084:	73fb      	strb	r3, [r7, #15]
    break;
 800a086:	e008      	b.n	800a09a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a088:	2301      	movs	r3, #1
 800a08a:	73fb      	strb	r3, [r7, #15]
    break;
 800a08c:	e005      	b.n	800a09a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a08e:	2303      	movs	r3, #3
 800a090:	73fb      	strb	r3, [r7, #15]
    break;
 800a092:	e002      	b.n	800a09a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a094:	2303      	movs	r3, #3
 800a096:	73fb      	strb	r3, [r7, #15]
    break;
 800a098:	bf00      	nop
  }
  return usb_status;
 800a09a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3714      	adds	r7, #20
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <__errno>:
 800a0a8:	4b01      	ldr	r3, [pc, #4]	; (800a0b0 <__errno+0x8>)
 800a0aa:	6818      	ldr	r0, [r3, #0]
 800a0ac:	4770      	bx	lr
 800a0ae:	bf00      	nop
 800a0b0:	20000190 	.word	0x20000190

0800a0b4 <__libc_init_array>:
 800a0b4:	b570      	push	{r4, r5, r6, lr}
 800a0b6:	4d0d      	ldr	r5, [pc, #52]	; (800a0ec <__libc_init_array+0x38>)
 800a0b8:	4c0d      	ldr	r4, [pc, #52]	; (800a0f0 <__libc_init_array+0x3c>)
 800a0ba:	1b64      	subs	r4, r4, r5
 800a0bc:	10a4      	asrs	r4, r4, #2
 800a0be:	2600      	movs	r6, #0
 800a0c0:	42a6      	cmp	r6, r4
 800a0c2:	d109      	bne.n	800a0d8 <__libc_init_array+0x24>
 800a0c4:	4d0b      	ldr	r5, [pc, #44]	; (800a0f4 <__libc_init_array+0x40>)
 800a0c6:	4c0c      	ldr	r4, [pc, #48]	; (800a0f8 <__libc_init_array+0x44>)
 800a0c8:	f002 f9bc 	bl	800c444 <_init>
 800a0cc:	1b64      	subs	r4, r4, r5
 800a0ce:	10a4      	asrs	r4, r4, #2
 800a0d0:	2600      	movs	r6, #0
 800a0d2:	42a6      	cmp	r6, r4
 800a0d4:	d105      	bne.n	800a0e2 <__libc_init_array+0x2e>
 800a0d6:	bd70      	pop	{r4, r5, r6, pc}
 800a0d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0dc:	4798      	blx	r3
 800a0de:	3601      	adds	r6, #1
 800a0e0:	e7ee      	b.n	800a0c0 <__libc_init_array+0xc>
 800a0e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0e6:	4798      	blx	r3
 800a0e8:	3601      	adds	r6, #1
 800a0ea:	e7f2      	b.n	800a0d2 <__libc_init_array+0x1e>
 800a0ec:	0800dc60 	.word	0x0800dc60
 800a0f0:	0800dc60 	.word	0x0800dc60
 800a0f4:	0800dc60 	.word	0x0800dc60
 800a0f8:	0800dc64 	.word	0x0800dc64

0800a0fc <malloc>:
 800a0fc:	4b02      	ldr	r3, [pc, #8]	; (800a108 <malloc+0xc>)
 800a0fe:	4601      	mov	r1, r0
 800a100:	6818      	ldr	r0, [r3, #0]
 800a102:	f000 b871 	b.w	800a1e8 <_malloc_r>
 800a106:	bf00      	nop
 800a108:	20000190 	.word	0x20000190

0800a10c <free>:
 800a10c:	4b02      	ldr	r3, [pc, #8]	; (800a118 <free+0xc>)
 800a10e:	4601      	mov	r1, r0
 800a110:	6818      	ldr	r0, [r3, #0]
 800a112:	f000 b819 	b.w	800a148 <_free_r>
 800a116:	bf00      	nop
 800a118:	20000190 	.word	0x20000190

0800a11c <memcpy>:
 800a11c:	440a      	add	r2, r1
 800a11e:	4291      	cmp	r1, r2
 800a120:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a124:	d100      	bne.n	800a128 <memcpy+0xc>
 800a126:	4770      	bx	lr
 800a128:	b510      	push	{r4, lr}
 800a12a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a12e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a132:	4291      	cmp	r1, r2
 800a134:	d1f9      	bne.n	800a12a <memcpy+0xe>
 800a136:	bd10      	pop	{r4, pc}

0800a138 <memset>:
 800a138:	4402      	add	r2, r0
 800a13a:	4603      	mov	r3, r0
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d100      	bne.n	800a142 <memset+0xa>
 800a140:	4770      	bx	lr
 800a142:	f803 1b01 	strb.w	r1, [r3], #1
 800a146:	e7f9      	b.n	800a13c <memset+0x4>

0800a148 <_free_r>:
 800a148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a14a:	2900      	cmp	r1, #0
 800a14c:	d048      	beq.n	800a1e0 <_free_r+0x98>
 800a14e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a152:	9001      	str	r0, [sp, #4]
 800a154:	2b00      	cmp	r3, #0
 800a156:	f1a1 0404 	sub.w	r4, r1, #4
 800a15a:	bfb8      	it	lt
 800a15c:	18e4      	addlt	r4, r4, r3
 800a15e:	f000 f9dd 	bl	800a51c <__malloc_lock>
 800a162:	4a20      	ldr	r2, [pc, #128]	; (800a1e4 <_free_r+0x9c>)
 800a164:	9801      	ldr	r0, [sp, #4]
 800a166:	6813      	ldr	r3, [r2, #0]
 800a168:	4615      	mov	r5, r2
 800a16a:	b933      	cbnz	r3, 800a17a <_free_r+0x32>
 800a16c:	6063      	str	r3, [r4, #4]
 800a16e:	6014      	str	r4, [r2, #0]
 800a170:	b003      	add	sp, #12
 800a172:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a176:	f000 b9d7 	b.w	800a528 <__malloc_unlock>
 800a17a:	42a3      	cmp	r3, r4
 800a17c:	d90b      	bls.n	800a196 <_free_r+0x4e>
 800a17e:	6821      	ldr	r1, [r4, #0]
 800a180:	1862      	adds	r2, r4, r1
 800a182:	4293      	cmp	r3, r2
 800a184:	bf04      	itt	eq
 800a186:	681a      	ldreq	r2, [r3, #0]
 800a188:	685b      	ldreq	r3, [r3, #4]
 800a18a:	6063      	str	r3, [r4, #4]
 800a18c:	bf04      	itt	eq
 800a18e:	1852      	addeq	r2, r2, r1
 800a190:	6022      	streq	r2, [r4, #0]
 800a192:	602c      	str	r4, [r5, #0]
 800a194:	e7ec      	b.n	800a170 <_free_r+0x28>
 800a196:	461a      	mov	r2, r3
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	b10b      	cbz	r3, 800a1a0 <_free_r+0x58>
 800a19c:	42a3      	cmp	r3, r4
 800a19e:	d9fa      	bls.n	800a196 <_free_r+0x4e>
 800a1a0:	6811      	ldr	r1, [r2, #0]
 800a1a2:	1855      	adds	r5, r2, r1
 800a1a4:	42a5      	cmp	r5, r4
 800a1a6:	d10b      	bne.n	800a1c0 <_free_r+0x78>
 800a1a8:	6824      	ldr	r4, [r4, #0]
 800a1aa:	4421      	add	r1, r4
 800a1ac:	1854      	adds	r4, r2, r1
 800a1ae:	42a3      	cmp	r3, r4
 800a1b0:	6011      	str	r1, [r2, #0]
 800a1b2:	d1dd      	bne.n	800a170 <_free_r+0x28>
 800a1b4:	681c      	ldr	r4, [r3, #0]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	6053      	str	r3, [r2, #4]
 800a1ba:	4421      	add	r1, r4
 800a1bc:	6011      	str	r1, [r2, #0]
 800a1be:	e7d7      	b.n	800a170 <_free_r+0x28>
 800a1c0:	d902      	bls.n	800a1c8 <_free_r+0x80>
 800a1c2:	230c      	movs	r3, #12
 800a1c4:	6003      	str	r3, [r0, #0]
 800a1c6:	e7d3      	b.n	800a170 <_free_r+0x28>
 800a1c8:	6825      	ldr	r5, [r4, #0]
 800a1ca:	1961      	adds	r1, r4, r5
 800a1cc:	428b      	cmp	r3, r1
 800a1ce:	bf04      	itt	eq
 800a1d0:	6819      	ldreq	r1, [r3, #0]
 800a1d2:	685b      	ldreq	r3, [r3, #4]
 800a1d4:	6063      	str	r3, [r4, #4]
 800a1d6:	bf04      	itt	eq
 800a1d8:	1949      	addeq	r1, r1, r5
 800a1da:	6021      	streq	r1, [r4, #0]
 800a1dc:	6054      	str	r4, [r2, #4]
 800a1de:	e7c7      	b.n	800a170 <_free_r+0x28>
 800a1e0:	b003      	add	sp, #12
 800a1e2:	bd30      	pop	{r4, r5, pc}
 800a1e4:	20000844 	.word	0x20000844

0800a1e8 <_malloc_r>:
 800a1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ea:	1ccd      	adds	r5, r1, #3
 800a1ec:	f025 0503 	bic.w	r5, r5, #3
 800a1f0:	3508      	adds	r5, #8
 800a1f2:	2d0c      	cmp	r5, #12
 800a1f4:	bf38      	it	cc
 800a1f6:	250c      	movcc	r5, #12
 800a1f8:	2d00      	cmp	r5, #0
 800a1fa:	4606      	mov	r6, r0
 800a1fc:	db01      	blt.n	800a202 <_malloc_r+0x1a>
 800a1fe:	42a9      	cmp	r1, r5
 800a200:	d903      	bls.n	800a20a <_malloc_r+0x22>
 800a202:	230c      	movs	r3, #12
 800a204:	6033      	str	r3, [r6, #0]
 800a206:	2000      	movs	r0, #0
 800a208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a20a:	f000 f987 	bl	800a51c <__malloc_lock>
 800a20e:	4921      	ldr	r1, [pc, #132]	; (800a294 <_malloc_r+0xac>)
 800a210:	680a      	ldr	r2, [r1, #0]
 800a212:	4614      	mov	r4, r2
 800a214:	b99c      	cbnz	r4, 800a23e <_malloc_r+0x56>
 800a216:	4f20      	ldr	r7, [pc, #128]	; (800a298 <_malloc_r+0xb0>)
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	b923      	cbnz	r3, 800a226 <_malloc_r+0x3e>
 800a21c:	4621      	mov	r1, r4
 800a21e:	4630      	mov	r0, r6
 800a220:	f000 f854 	bl	800a2cc <_sbrk_r>
 800a224:	6038      	str	r0, [r7, #0]
 800a226:	4629      	mov	r1, r5
 800a228:	4630      	mov	r0, r6
 800a22a:	f000 f84f 	bl	800a2cc <_sbrk_r>
 800a22e:	1c43      	adds	r3, r0, #1
 800a230:	d123      	bne.n	800a27a <_malloc_r+0x92>
 800a232:	230c      	movs	r3, #12
 800a234:	6033      	str	r3, [r6, #0]
 800a236:	4630      	mov	r0, r6
 800a238:	f000 f976 	bl	800a528 <__malloc_unlock>
 800a23c:	e7e3      	b.n	800a206 <_malloc_r+0x1e>
 800a23e:	6823      	ldr	r3, [r4, #0]
 800a240:	1b5b      	subs	r3, r3, r5
 800a242:	d417      	bmi.n	800a274 <_malloc_r+0x8c>
 800a244:	2b0b      	cmp	r3, #11
 800a246:	d903      	bls.n	800a250 <_malloc_r+0x68>
 800a248:	6023      	str	r3, [r4, #0]
 800a24a:	441c      	add	r4, r3
 800a24c:	6025      	str	r5, [r4, #0]
 800a24e:	e004      	b.n	800a25a <_malloc_r+0x72>
 800a250:	6863      	ldr	r3, [r4, #4]
 800a252:	42a2      	cmp	r2, r4
 800a254:	bf0c      	ite	eq
 800a256:	600b      	streq	r3, [r1, #0]
 800a258:	6053      	strne	r3, [r2, #4]
 800a25a:	4630      	mov	r0, r6
 800a25c:	f000 f964 	bl	800a528 <__malloc_unlock>
 800a260:	f104 000b 	add.w	r0, r4, #11
 800a264:	1d23      	adds	r3, r4, #4
 800a266:	f020 0007 	bic.w	r0, r0, #7
 800a26a:	1ac2      	subs	r2, r0, r3
 800a26c:	d0cc      	beq.n	800a208 <_malloc_r+0x20>
 800a26e:	1a1b      	subs	r3, r3, r0
 800a270:	50a3      	str	r3, [r4, r2]
 800a272:	e7c9      	b.n	800a208 <_malloc_r+0x20>
 800a274:	4622      	mov	r2, r4
 800a276:	6864      	ldr	r4, [r4, #4]
 800a278:	e7cc      	b.n	800a214 <_malloc_r+0x2c>
 800a27a:	1cc4      	adds	r4, r0, #3
 800a27c:	f024 0403 	bic.w	r4, r4, #3
 800a280:	42a0      	cmp	r0, r4
 800a282:	d0e3      	beq.n	800a24c <_malloc_r+0x64>
 800a284:	1a21      	subs	r1, r4, r0
 800a286:	4630      	mov	r0, r6
 800a288:	f000 f820 	bl	800a2cc <_sbrk_r>
 800a28c:	3001      	adds	r0, #1
 800a28e:	d1dd      	bne.n	800a24c <_malloc_r+0x64>
 800a290:	e7cf      	b.n	800a232 <_malloc_r+0x4a>
 800a292:	bf00      	nop
 800a294:	20000844 	.word	0x20000844
 800a298:	20000848 	.word	0x20000848

0800a29c <iprintf>:
 800a29c:	b40f      	push	{r0, r1, r2, r3}
 800a29e:	4b0a      	ldr	r3, [pc, #40]	; (800a2c8 <iprintf+0x2c>)
 800a2a0:	b513      	push	{r0, r1, r4, lr}
 800a2a2:	681c      	ldr	r4, [r3, #0]
 800a2a4:	b124      	cbz	r4, 800a2b0 <iprintf+0x14>
 800a2a6:	69a3      	ldr	r3, [r4, #24]
 800a2a8:	b913      	cbnz	r3, 800a2b0 <iprintf+0x14>
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	f000 f896 	bl	800a3dc <__sinit>
 800a2b0:	ab05      	add	r3, sp, #20
 800a2b2:	9a04      	ldr	r2, [sp, #16]
 800a2b4:	68a1      	ldr	r1, [r4, #8]
 800a2b6:	9301      	str	r3, [sp, #4]
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	f000 fac1 	bl	800a840 <_vfiprintf_r>
 800a2be:	b002      	add	sp, #8
 800a2c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2c4:	b004      	add	sp, #16
 800a2c6:	4770      	bx	lr
 800a2c8:	20000190 	.word	0x20000190

0800a2cc <_sbrk_r>:
 800a2cc:	b538      	push	{r3, r4, r5, lr}
 800a2ce:	4d06      	ldr	r5, [pc, #24]	; (800a2e8 <_sbrk_r+0x1c>)
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	4604      	mov	r4, r0
 800a2d4:	4608      	mov	r0, r1
 800a2d6:	602b      	str	r3, [r5, #0]
 800a2d8:	f7f7 ff14 	bl	8002104 <_sbrk>
 800a2dc:	1c43      	adds	r3, r0, #1
 800a2de:	d102      	bne.n	800a2e6 <_sbrk_r+0x1a>
 800a2e0:	682b      	ldr	r3, [r5, #0]
 800a2e2:	b103      	cbz	r3, 800a2e6 <_sbrk_r+0x1a>
 800a2e4:	6023      	str	r3, [r4, #0]
 800a2e6:	bd38      	pop	{r3, r4, r5, pc}
 800a2e8:	20002640 	.word	0x20002640

0800a2ec <siprintf>:
 800a2ec:	b40e      	push	{r1, r2, r3}
 800a2ee:	b500      	push	{lr}
 800a2f0:	b09c      	sub	sp, #112	; 0x70
 800a2f2:	ab1d      	add	r3, sp, #116	; 0x74
 800a2f4:	9002      	str	r0, [sp, #8]
 800a2f6:	9006      	str	r0, [sp, #24]
 800a2f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a2fc:	4809      	ldr	r0, [pc, #36]	; (800a324 <siprintf+0x38>)
 800a2fe:	9107      	str	r1, [sp, #28]
 800a300:	9104      	str	r1, [sp, #16]
 800a302:	4909      	ldr	r1, [pc, #36]	; (800a328 <siprintf+0x3c>)
 800a304:	f853 2b04 	ldr.w	r2, [r3], #4
 800a308:	9105      	str	r1, [sp, #20]
 800a30a:	6800      	ldr	r0, [r0, #0]
 800a30c:	9301      	str	r3, [sp, #4]
 800a30e:	a902      	add	r1, sp, #8
 800a310:	f000 f96c 	bl	800a5ec <_svfiprintf_r>
 800a314:	9b02      	ldr	r3, [sp, #8]
 800a316:	2200      	movs	r2, #0
 800a318:	701a      	strb	r2, [r3, #0]
 800a31a:	b01c      	add	sp, #112	; 0x70
 800a31c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a320:	b003      	add	sp, #12
 800a322:	4770      	bx	lr
 800a324:	20000190 	.word	0x20000190
 800a328:	ffff0208 	.word	0xffff0208

0800a32c <std>:
 800a32c:	2300      	movs	r3, #0
 800a32e:	b510      	push	{r4, lr}
 800a330:	4604      	mov	r4, r0
 800a332:	e9c0 3300 	strd	r3, r3, [r0]
 800a336:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a33a:	6083      	str	r3, [r0, #8]
 800a33c:	8181      	strh	r1, [r0, #12]
 800a33e:	6643      	str	r3, [r0, #100]	; 0x64
 800a340:	81c2      	strh	r2, [r0, #14]
 800a342:	6183      	str	r3, [r0, #24]
 800a344:	4619      	mov	r1, r3
 800a346:	2208      	movs	r2, #8
 800a348:	305c      	adds	r0, #92	; 0x5c
 800a34a:	f7ff fef5 	bl	800a138 <memset>
 800a34e:	4b05      	ldr	r3, [pc, #20]	; (800a364 <std+0x38>)
 800a350:	6263      	str	r3, [r4, #36]	; 0x24
 800a352:	4b05      	ldr	r3, [pc, #20]	; (800a368 <std+0x3c>)
 800a354:	62a3      	str	r3, [r4, #40]	; 0x28
 800a356:	4b05      	ldr	r3, [pc, #20]	; (800a36c <std+0x40>)
 800a358:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a35a:	4b05      	ldr	r3, [pc, #20]	; (800a370 <std+0x44>)
 800a35c:	6224      	str	r4, [r4, #32]
 800a35e:	6323      	str	r3, [r4, #48]	; 0x30
 800a360:	bd10      	pop	{r4, pc}
 800a362:	bf00      	nop
 800a364:	0800adc9 	.word	0x0800adc9
 800a368:	0800adeb 	.word	0x0800adeb
 800a36c:	0800ae23 	.word	0x0800ae23
 800a370:	0800ae47 	.word	0x0800ae47

0800a374 <_cleanup_r>:
 800a374:	4901      	ldr	r1, [pc, #4]	; (800a37c <_cleanup_r+0x8>)
 800a376:	f000 b8af 	b.w	800a4d8 <_fwalk_reent>
 800a37a:	bf00      	nop
 800a37c:	0800b121 	.word	0x0800b121

0800a380 <__sfmoreglue>:
 800a380:	b570      	push	{r4, r5, r6, lr}
 800a382:	1e4a      	subs	r2, r1, #1
 800a384:	2568      	movs	r5, #104	; 0x68
 800a386:	4355      	muls	r5, r2
 800a388:	460e      	mov	r6, r1
 800a38a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a38e:	f7ff ff2b 	bl	800a1e8 <_malloc_r>
 800a392:	4604      	mov	r4, r0
 800a394:	b140      	cbz	r0, 800a3a8 <__sfmoreglue+0x28>
 800a396:	2100      	movs	r1, #0
 800a398:	e9c0 1600 	strd	r1, r6, [r0]
 800a39c:	300c      	adds	r0, #12
 800a39e:	60a0      	str	r0, [r4, #8]
 800a3a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a3a4:	f7ff fec8 	bl	800a138 <memset>
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	bd70      	pop	{r4, r5, r6, pc}

0800a3ac <__sfp_lock_acquire>:
 800a3ac:	4801      	ldr	r0, [pc, #4]	; (800a3b4 <__sfp_lock_acquire+0x8>)
 800a3ae:	f000 b8b3 	b.w	800a518 <__retarget_lock_acquire_recursive>
 800a3b2:	bf00      	nop
 800a3b4:	2000263c 	.word	0x2000263c

0800a3b8 <__sfp_lock_release>:
 800a3b8:	4801      	ldr	r0, [pc, #4]	; (800a3c0 <__sfp_lock_release+0x8>)
 800a3ba:	f000 b8ae 	b.w	800a51a <__retarget_lock_release_recursive>
 800a3be:	bf00      	nop
 800a3c0:	2000263c 	.word	0x2000263c

0800a3c4 <__sinit_lock_acquire>:
 800a3c4:	4801      	ldr	r0, [pc, #4]	; (800a3cc <__sinit_lock_acquire+0x8>)
 800a3c6:	f000 b8a7 	b.w	800a518 <__retarget_lock_acquire_recursive>
 800a3ca:	bf00      	nop
 800a3cc:	20002637 	.word	0x20002637

0800a3d0 <__sinit_lock_release>:
 800a3d0:	4801      	ldr	r0, [pc, #4]	; (800a3d8 <__sinit_lock_release+0x8>)
 800a3d2:	f000 b8a2 	b.w	800a51a <__retarget_lock_release_recursive>
 800a3d6:	bf00      	nop
 800a3d8:	20002637 	.word	0x20002637

0800a3dc <__sinit>:
 800a3dc:	b510      	push	{r4, lr}
 800a3de:	4604      	mov	r4, r0
 800a3e0:	f7ff fff0 	bl	800a3c4 <__sinit_lock_acquire>
 800a3e4:	69a3      	ldr	r3, [r4, #24]
 800a3e6:	b11b      	cbz	r3, 800a3f0 <__sinit+0x14>
 800a3e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3ec:	f7ff bff0 	b.w	800a3d0 <__sinit_lock_release>
 800a3f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a3f4:	6523      	str	r3, [r4, #80]	; 0x50
 800a3f6:	4b13      	ldr	r3, [pc, #76]	; (800a444 <__sinit+0x68>)
 800a3f8:	4a13      	ldr	r2, [pc, #76]	; (800a448 <__sinit+0x6c>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a3fe:	42a3      	cmp	r3, r4
 800a400:	bf04      	itt	eq
 800a402:	2301      	moveq	r3, #1
 800a404:	61a3      	streq	r3, [r4, #24]
 800a406:	4620      	mov	r0, r4
 800a408:	f000 f820 	bl	800a44c <__sfp>
 800a40c:	6060      	str	r0, [r4, #4]
 800a40e:	4620      	mov	r0, r4
 800a410:	f000 f81c 	bl	800a44c <__sfp>
 800a414:	60a0      	str	r0, [r4, #8]
 800a416:	4620      	mov	r0, r4
 800a418:	f000 f818 	bl	800a44c <__sfp>
 800a41c:	2200      	movs	r2, #0
 800a41e:	60e0      	str	r0, [r4, #12]
 800a420:	2104      	movs	r1, #4
 800a422:	6860      	ldr	r0, [r4, #4]
 800a424:	f7ff ff82 	bl	800a32c <std>
 800a428:	68a0      	ldr	r0, [r4, #8]
 800a42a:	2201      	movs	r2, #1
 800a42c:	2109      	movs	r1, #9
 800a42e:	f7ff ff7d 	bl	800a32c <std>
 800a432:	68e0      	ldr	r0, [r4, #12]
 800a434:	2202      	movs	r2, #2
 800a436:	2112      	movs	r1, #18
 800a438:	f7ff ff78 	bl	800a32c <std>
 800a43c:	2301      	movs	r3, #1
 800a43e:	61a3      	str	r3, [r4, #24]
 800a440:	e7d2      	b.n	800a3e8 <__sinit+0xc>
 800a442:	bf00      	nop
 800a444:	0800d9e4 	.word	0x0800d9e4
 800a448:	0800a375 	.word	0x0800a375

0800a44c <__sfp>:
 800a44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44e:	4607      	mov	r7, r0
 800a450:	f7ff ffac 	bl	800a3ac <__sfp_lock_acquire>
 800a454:	4b1e      	ldr	r3, [pc, #120]	; (800a4d0 <__sfp+0x84>)
 800a456:	681e      	ldr	r6, [r3, #0]
 800a458:	69b3      	ldr	r3, [r6, #24]
 800a45a:	b913      	cbnz	r3, 800a462 <__sfp+0x16>
 800a45c:	4630      	mov	r0, r6
 800a45e:	f7ff ffbd 	bl	800a3dc <__sinit>
 800a462:	3648      	adds	r6, #72	; 0x48
 800a464:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a468:	3b01      	subs	r3, #1
 800a46a:	d503      	bpl.n	800a474 <__sfp+0x28>
 800a46c:	6833      	ldr	r3, [r6, #0]
 800a46e:	b30b      	cbz	r3, 800a4b4 <__sfp+0x68>
 800a470:	6836      	ldr	r6, [r6, #0]
 800a472:	e7f7      	b.n	800a464 <__sfp+0x18>
 800a474:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a478:	b9d5      	cbnz	r5, 800a4b0 <__sfp+0x64>
 800a47a:	4b16      	ldr	r3, [pc, #88]	; (800a4d4 <__sfp+0x88>)
 800a47c:	60e3      	str	r3, [r4, #12]
 800a47e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a482:	6665      	str	r5, [r4, #100]	; 0x64
 800a484:	f000 f847 	bl	800a516 <__retarget_lock_init_recursive>
 800a488:	f7ff ff96 	bl	800a3b8 <__sfp_lock_release>
 800a48c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a490:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a494:	6025      	str	r5, [r4, #0]
 800a496:	61a5      	str	r5, [r4, #24]
 800a498:	2208      	movs	r2, #8
 800a49a:	4629      	mov	r1, r5
 800a49c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a4a0:	f7ff fe4a 	bl	800a138 <memset>
 800a4a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a4a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4b0:	3468      	adds	r4, #104	; 0x68
 800a4b2:	e7d9      	b.n	800a468 <__sfp+0x1c>
 800a4b4:	2104      	movs	r1, #4
 800a4b6:	4638      	mov	r0, r7
 800a4b8:	f7ff ff62 	bl	800a380 <__sfmoreglue>
 800a4bc:	4604      	mov	r4, r0
 800a4be:	6030      	str	r0, [r6, #0]
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	d1d5      	bne.n	800a470 <__sfp+0x24>
 800a4c4:	f7ff ff78 	bl	800a3b8 <__sfp_lock_release>
 800a4c8:	230c      	movs	r3, #12
 800a4ca:	603b      	str	r3, [r7, #0]
 800a4cc:	e7ee      	b.n	800a4ac <__sfp+0x60>
 800a4ce:	bf00      	nop
 800a4d0:	0800d9e4 	.word	0x0800d9e4
 800a4d4:	ffff0001 	.word	0xffff0001

0800a4d8 <_fwalk_reent>:
 800a4d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4dc:	4606      	mov	r6, r0
 800a4de:	4688      	mov	r8, r1
 800a4e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a4e4:	2700      	movs	r7, #0
 800a4e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4ea:	f1b9 0901 	subs.w	r9, r9, #1
 800a4ee:	d505      	bpl.n	800a4fc <_fwalk_reent+0x24>
 800a4f0:	6824      	ldr	r4, [r4, #0]
 800a4f2:	2c00      	cmp	r4, #0
 800a4f4:	d1f7      	bne.n	800a4e6 <_fwalk_reent+0xe>
 800a4f6:	4638      	mov	r0, r7
 800a4f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4fc:	89ab      	ldrh	r3, [r5, #12]
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d907      	bls.n	800a512 <_fwalk_reent+0x3a>
 800a502:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a506:	3301      	adds	r3, #1
 800a508:	d003      	beq.n	800a512 <_fwalk_reent+0x3a>
 800a50a:	4629      	mov	r1, r5
 800a50c:	4630      	mov	r0, r6
 800a50e:	47c0      	blx	r8
 800a510:	4307      	orrs	r7, r0
 800a512:	3568      	adds	r5, #104	; 0x68
 800a514:	e7e9      	b.n	800a4ea <_fwalk_reent+0x12>

0800a516 <__retarget_lock_init_recursive>:
 800a516:	4770      	bx	lr

0800a518 <__retarget_lock_acquire_recursive>:
 800a518:	4770      	bx	lr

0800a51a <__retarget_lock_release_recursive>:
 800a51a:	4770      	bx	lr

0800a51c <__malloc_lock>:
 800a51c:	4801      	ldr	r0, [pc, #4]	; (800a524 <__malloc_lock+0x8>)
 800a51e:	f7ff bffb 	b.w	800a518 <__retarget_lock_acquire_recursive>
 800a522:	bf00      	nop
 800a524:	20002638 	.word	0x20002638

0800a528 <__malloc_unlock>:
 800a528:	4801      	ldr	r0, [pc, #4]	; (800a530 <__malloc_unlock+0x8>)
 800a52a:	f7ff bff6 	b.w	800a51a <__retarget_lock_release_recursive>
 800a52e:	bf00      	nop
 800a530:	20002638 	.word	0x20002638

0800a534 <__ssputs_r>:
 800a534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a538:	688e      	ldr	r6, [r1, #8]
 800a53a:	429e      	cmp	r6, r3
 800a53c:	4682      	mov	sl, r0
 800a53e:	460c      	mov	r4, r1
 800a540:	4690      	mov	r8, r2
 800a542:	461f      	mov	r7, r3
 800a544:	d838      	bhi.n	800a5b8 <__ssputs_r+0x84>
 800a546:	898a      	ldrh	r2, [r1, #12]
 800a548:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a54c:	d032      	beq.n	800a5b4 <__ssputs_r+0x80>
 800a54e:	6825      	ldr	r5, [r4, #0]
 800a550:	6909      	ldr	r1, [r1, #16]
 800a552:	eba5 0901 	sub.w	r9, r5, r1
 800a556:	6965      	ldr	r5, [r4, #20]
 800a558:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a55c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a560:	3301      	adds	r3, #1
 800a562:	444b      	add	r3, r9
 800a564:	106d      	asrs	r5, r5, #1
 800a566:	429d      	cmp	r5, r3
 800a568:	bf38      	it	cc
 800a56a:	461d      	movcc	r5, r3
 800a56c:	0553      	lsls	r3, r2, #21
 800a56e:	d531      	bpl.n	800a5d4 <__ssputs_r+0xa0>
 800a570:	4629      	mov	r1, r5
 800a572:	f7ff fe39 	bl	800a1e8 <_malloc_r>
 800a576:	4606      	mov	r6, r0
 800a578:	b950      	cbnz	r0, 800a590 <__ssputs_r+0x5c>
 800a57a:	230c      	movs	r3, #12
 800a57c:	f8ca 3000 	str.w	r3, [sl]
 800a580:	89a3      	ldrh	r3, [r4, #12]
 800a582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a586:	81a3      	strh	r3, [r4, #12]
 800a588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a590:	6921      	ldr	r1, [r4, #16]
 800a592:	464a      	mov	r2, r9
 800a594:	f7ff fdc2 	bl	800a11c <memcpy>
 800a598:	89a3      	ldrh	r3, [r4, #12]
 800a59a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a59e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5a2:	81a3      	strh	r3, [r4, #12]
 800a5a4:	6126      	str	r6, [r4, #16]
 800a5a6:	6165      	str	r5, [r4, #20]
 800a5a8:	444e      	add	r6, r9
 800a5aa:	eba5 0509 	sub.w	r5, r5, r9
 800a5ae:	6026      	str	r6, [r4, #0]
 800a5b0:	60a5      	str	r5, [r4, #8]
 800a5b2:	463e      	mov	r6, r7
 800a5b4:	42be      	cmp	r6, r7
 800a5b6:	d900      	bls.n	800a5ba <__ssputs_r+0x86>
 800a5b8:	463e      	mov	r6, r7
 800a5ba:	4632      	mov	r2, r6
 800a5bc:	6820      	ldr	r0, [r4, #0]
 800a5be:	4641      	mov	r1, r8
 800a5c0:	f000 fe60 	bl	800b284 <memmove>
 800a5c4:	68a3      	ldr	r3, [r4, #8]
 800a5c6:	6822      	ldr	r2, [r4, #0]
 800a5c8:	1b9b      	subs	r3, r3, r6
 800a5ca:	4432      	add	r2, r6
 800a5cc:	60a3      	str	r3, [r4, #8]
 800a5ce:	6022      	str	r2, [r4, #0]
 800a5d0:	2000      	movs	r0, #0
 800a5d2:	e7db      	b.n	800a58c <__ssputs_r+0x58>
 800a5d4:	462a      	mov	r2, r5
 800a5d6:	f000 fe6f 	bl	800b2b8 <_realloc_r>
 800a5da:	4606      	mov	r6, r0
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	d1e1      	bne.n	800a5a4 <__ssputs_r+0x70>
 800a5e0:	6921      	ldr	r1, [r4, #16]
 800a5e2:	4650      	mov	r0, sl
 800a5e4:	f7ff fdb0 	bl	800a148 <_free_r>
 800a5e8:	e7c7      	b.n	800a57a <__ssputs_r+0x46>
	...

0800a5ec <_svfiprintf_r>:
 800a5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f0:	4698      	mov	r8, r3
 800a5f2:	898b      	ldrh	r3, [r1, #12]
 800a5f4:	061b      	lsls	r3, r3, #24
 800a5f6:	b09d      	sub	sp, #116	; 0x74
 800a5f8:	4607      	mov	r7, r0
 800a5fa:	460d      	mov	r5, r1
 800a5fc:	4614      	mov	r4, r2
 800a5fe:	d50e      	bpl.n	800a61e <_svfiprintf_r+0x32>
 800a600:	690b      	ldr	r3, [r1, #16]
 800a602:	b963      	cbnz	r3, 800a61e <_svfiprintf_r+0x32>
 800a604:	2140      	movs	r1, #64	; 0x40
 800a606:	f7ff fdef 	bl	800a1e8 <_malloc_r>
 800a60a:	6028      	str	r0, [r5, #0]
 800a60c:	6128      	str	r0, [r5, #16]
 800a60e:	b920      	cbnz	r0, 800a61a <_svfiprintf_r+0x2e>
 800a610:	230c      	movs	r3, #12
 800a612:	603b      	str	r3, [r7, #0]
 800a614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a618:	e0d1      	b.n	800a7be <_svfiprintf_r+0x1d2>
 800a61a:	2340      	movs	r3, #64	; 0x40
 800a61c:	616b      	str	r3, [r5, #20]
 800a61e:	2300      	movs	r3, #0
 800a620:	9309      	str	r3, [sp, #36]	; 0x24
 800a622:	2320      	movs	r3, #32
 800a624:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a628:	f8cd 800c 	str.w	r8, [sp, #12]
 800a62c:	2330      	movs	r3, #48	; 0x30
 800a62e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a7d8 <_svfiprintf_r+0x1ec>
 800a632:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a636:	f04f 0901 	mov.w	r9, #1
 800a63a:	4623      	mov	r3, r4
 800a63c:	469a      	mov	sl, r3
 800a63e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a642:	b10a      	cbz	r2, 800a648 <_svfiprintf_r+0x5c>
 800a644:	2a25      	cmp	r2, #37	; 0x25
 800a646:	d1f9      	bne.n	800a63c <_svfiprintf_r+0x50>
 800a648:	ebba 0b04 	subs.w	fp, sl, r4
 800a64c:	d00b      	beq.n	800a666 <_svfiprintf_r+0x7a>
 800a64e:	465b      	mov	r3, fp
 800a650:	4622      	mov	r2, r4
 800a652:	4629      	mov	r1, r5
 800a654:	4638      	mov	r0, r7
 800a656:	f7ff ff6d 	bl	800a534 <__ssputs_r>
 800a65a:	3001      	adds	r0, #1
 800a65c:	f000 80aa 	beq.w	800a7b4 <_svfiprintf_r+0x1c8>
 800a660:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a662:	445a      	add	r2, fp
 800a664:	9209      	str	r2, [sp, #36]	; 0x24
 800a666:	f89a 3000 	ldrb.w	r3, [sl]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	f000 80a2 	beq.w	800a7b4 <_svfiprintf_r+0x1c8>
 800a670:	2300      	movs	r3, #0
 800a672:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a676:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a67a:	f10a 0a01 	add.w	sl, sl, #1
 800a67e:	9304      	str	r3, [sp, #16]
 800a680:	9307      	str	r3, [sp, #28]
 800a682:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a686:	931a      	str	r3, [sp, #104]	; 0x68
 800a688:	4654      	mov	r4, sl
 800a68a:	2205      	movs	r2, #5
 800a68c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a690:	4851      	ldr	r0, [pc, #324]	; (800a7d8 <_svfiprintf_r+0x1ec>)
 800a692:	f7f5 fda5 	bl	80001e0 <memchr>
 800a696:	9a04      	ldr	r2, [sp, #16]
 800a698:	b9d8      	cbnz	r0, 800a6d2 <_svfiprintf_r+0xe6>
 800a69a:	06d0      	lsls	r0, r2, #27
 800a69c:	bf44      	itt	mi
 800a69e:	2320      	movmi	r3, #32
 800a6a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6a4:	0711      	lsls	r1, r2, #28
 800a6a6:	bf44      	itt	mi
 800a6a8:	232b      	movmi	r3, #43	; 0x2b
 800a6aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6ae:	f89a 3000 	ldrb.w	r3, [sl]
 800a6b2:	2b2a      	cmp	r3, #42	; 0x2a
 800a6b4:	d015      	beq.n	800a6e2 <_svfiprintf_r+0xf6>
 800a6b6:	9a07      	ldr	r2, [sp, #28]
 800a6b8:	4654      	mov	r4, sl
 800a6ba:	2000      	movs	r0, #0
 800a6bc:	f04f 0c0a 	mov.w	ip, #10
 800a6c0:	4621      	mov	r1, r4
 800a6c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6c6:	3b30      	subs	r3, #48	; 0x30
 800a6c8:	2b09      	cmp	r3, #9
 800a6ca:	d94e      	bls.n	800a76a <_svfiprintf_r+0x17e>
 800a6cc:	b1b0      	cbz	r0, 800a6fc <_svfiprintf_r+0x110>
 800a6ce:	9207      	str	r2, [sp, #28]
 800a6d0:	e014      	b.n	800a6fc <_svfiprintf_r+0x110>
 800a6d2:	eba0 0308 	sub.w	r3, r0, r8
 800a6d6:	fa09 f303 	lsl.w	r3, r9, r3
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	9304      	str	r3, [sp, #16]
 800a6de:	46a2      	mov	sl, r4
 800a6e0:	e7d2      	b.n	800a688 <_svfiprintf_r+0x9c>
 800a6e2:	9b03      	ldr	r3, [sp, #12]
 800a6e4:	1d19      	adds	r1, r3, #4
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	9103      	str	r1, [sp, #12]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	bfbb      	ittet	lt
 800a6ee:	425b      	neglt	r3, r3
 800a6f0:	f042 0202 	orrlt.w	r2, r2, #2
 800a6f4:	9307      	strge	r3, [sp, #28]
 800a6f6:	9307      	strlt	r3, [sp, #28]
 800a6f8:	bfb8      	it	lt
 800a6fa:	9204      	strlt	r2, [sp, #16]
 800a6fc:	7823      	ldrb	r3, [r4, #0]
 800a6fe:	2b2e      	cmp	r3, #46	; 0x2e
 800a700:	d10c      	bne.n	800a71c <_svfiprintf_r+0x130>
 800a702:	7863      	ldrb	r3, [r4, #1]
 800a704:	2b2a      	cmp	r3, #42	; 0x2a
 800a706:	d135      	bne.n	800a774 <_svfiprintf_r+0x188>
 800a708:	9b03      	ldr	r3, [sp, #12]
 800a70a:	1d1a      	adds	r2, r3, #4
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	9203      	str	r2, [sp, #12]
 800a710:	2b00      	cmp	r3, #0
 800a712:	bfb8      	it	lt
 800a714:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a718:	3402      	adds	r4, #2
 800a71a:	9305      	str	r3, [sp, #20]
 800a71c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a7e8 <_svfiprintf_r+0x1fc>
 800a720:	7821      	ldrb	r1, [r4, #0]
 800a722:	2203      	movs	r2, #3
 800a724:	4650      	mov	r0, sl
 800a726:	f7f5 fd5b 	bl	80001e0 <memchr>
 800a72a:	b140      	cbz	r0, 800a73e <_svfiprintf_r+0x152>
 800a72c:	2340      	movs	r3, #64	; 0x40
 800a72e:	eba0 000a 	sub.w	r0, r0, sl
 800a732:	fa03 f000 	lsl.w	r0, r3, r0
 800a736:	9b04      	ldr	r3, [sp, #16]
 800a738:	4303      	orrs	r3, r0
 800a73a:	3401      	adds	r4, #1
 800a73c:	9304      	str	r3, [sp, #16]
 800a73e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a742:	4826      	ldr	r0, [pc, #152]	; (800a7dc <_svfiprintf_r+0x1f0>)
 800a744:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a748:	2206      	movs	r2, #6
 800a74a:	f7f5 fd49 	bl	80001e0 <memchr>
 800a74e:	2800      	cmp	r0, #0
 800a750:	d038      	beq.n	800a7c4 <_svfiprintf_r+0x1d8>
 800a752:	4b23      	ldr	r3, [pc, #140]	; (800a7e0 <_svfiprintf_r+0x1f4>)
 800a754:	bb1b      	cbnz	r3, 800a79e <_svfiprintf_r+0x1b2>
 800a756:	9b03      	ldr	r3, [sp, #12]
 800a758:	3307      	adds	r3, #7
 800a75a:	f023 0307 	bic.w	r3, r3, #7
 800a75e:	3308      	adds	r3, #8
 800a760:	9303      	str	r3, [sp, #12]
 800a762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a764:	4433      	add	r3, r6
 800a766:	9309      	str	r3, [sp, #36]	; 0x24
 800a768:	e767      	b.n	800a63a <_svfiprintf_r+0x4e>
 800a76a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a76e:	460c      	mov	r4, r1
 800a770:	2001      	movs	r0, #1
 800a772:	e7a5      	b.n	800a6c0 <_svfiprintf_r+0xd4>
 800a774:	2300      	movs	r3, #0
 800a776:	3401      	adds	r4, #1
 800a778:	9305      	str	r3, [sp, #20]
 800a77a:	4619      	mov	r1, r3
 800a77c:	f04f 0c0a 	mov.w	ip, #10
 800a780:	4620      	mov	r0, r4
 800a782:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a786:	3a30      	subs	r2, #48	; 0x30
 800a788:	2a09      	cmp	r2, #9
 800a78a:	d903      	bls.n	800a794 <_svfiprintf_r+0x1a8>
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d0c5      	beq.n	800a71c <_svfiprintf_r+0x130>
 800a790:	9105      	str	r1, [sp, #20]
 800a792:	e7c3      	b.n	800a71c <_svfiprintf_r+0x130>
 800a794:	fb0c 2101 	mla	r1, ip, r1, r2
 800a798:	4604      	mov	r4, r0
 800a79a:	2301      	movs	r3, #1
 800a79c:	e7f0      	b.n	800a780 <_svfiprintf_r+0x194>
 800a79e:	ab03      	add	r3, sp, #12
 800a7a0:	9300      	str	r3, [sp, #0]
 800a7a2:	462a      	mov	r2, r5
 800a7a4:	4b0f      	ldr	r3, [pc, #60]	; (800a7e4 <_svfiprintf_r+0x1f8>)
 800a7a6:	a904      	add	r1, sp, #16
 800a7a8:	4638      	mov	r0, r7
 800a7aa:	f3af 8000 	nop.w
 800a7ae:	1c42      	adds	r2, r0, #1
 800a7b0:	4606      	mov	r6, r0
 800a7b2:	d1d6      	bne.n	800a762 <_svfiprintf_r+0x176>
 800a7b4:	89ab      	ldrh	r3, [r5, #12]
 800a7b6:	065b      	lsls	r3, r3, #25
 800a7b8:	f53f af2c 	bmi.w	800a614 <_svfiprintf_r+0x28>
 800a7bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7be:	b01d      	add	sp, #116	; 0x74
 800a7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c4:	ab03      	add	r3, sp, #12
 800a7c6:	9300      	str	r3, [sp, #0]
 800a7c8:	462a      	mov	r2, r5
 800a7ca:	4b06      	ldr	r3, [pc, #24]	; (800a7e4 <_svfiprintf_r+0x1f8>)
 800a7cc:	a904      	add	r1, sp, #16
 800a7ce:	4638      	mov	r0, r7
 800a7d0:	f000 f9d4 	bl	800ab7c <_printf_i>
 800a7d4:	e7eb      	b.n	800a7ae <_svfiprintf_r+0x1c2>
 800a7d6:	bf00      	nop
 800a7d8:	0800da48 	.word	0x0800da48
 800a7dc:	0800da52 	.word	0x0800da52
 800a7e0:	00000000 	.word	0x00000000
 800a7e4:	0800a535 	.word	0x0800a535
 800a7e8:	0800da4e 	.word	0x0800da4e

0800a7ec <__sfputc_r>:
 800a7ec:	6893      	ldr	r3, [r2, #8]
 800a7ee:	3b01      	subs	r3, #1
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	b410      	push	{r4}
 800a7f4:	6093      	str	r3, [r2, #8]
 800a7f6:	da08      	bge.n	800a80a <__sfputc_r+0x1e>
 800a7f8:	6994      	ldr	r4, [r2, #24]
 800a7fa:	42a3      	cmp	r3, r4
 800a7fc:	db01      	blt.n	800a802 <__sfputc_r+0x16>
 800a7fe:	290a      	cmp	r1, #10
 800a800:	d103      	bne.n	800a80a <__sfputc_r+0x1e>
 800a802:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a806:	f000 bb23 	b.w	800ae50 <__swbuf_r>
 800a80a:	6813      	ldr	r3, [r2, #0]
 800a80c:	1c58      	adds	r0, r3, #1
 800a80e:	6010      	str	r0, [r2, #0]
 800a810:	7019      	strb	r1, [r3, #0]
 800a812:	4608      	mov	r0, r1
 800a814:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a818:	4770      	bx	lr

0800a81a <__sfputs_r>:
 800a81a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81c:	4606      	mov	r6, r0
 800a81e:	460f      	mov	r7, r1
 800a820:	4614      	mov	r4, r2
 800a822:	18d5      	adds	r5, r2, r3
 800a824:	42ac      	cmp	r4, r5
 800a826:	d101      	bne.n	800a82c <__sfputs_r+0x12>
 800a828:	2000      	movs	r0, #0
 800a82a:	e007      	b.n	800a83c <__sfputs_r+0x22>
 800a82c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a830:	463a      	mov	r2, r7
 800a832:	4630      	mov	r0, r6
 800a834:	f7ff ffda 	bl	800a7ec <__sfputc_r>
 800a838:	1c43      	adds	r3, r0, #1
 800a83a:	d1f3      	bne.n	800a824 <__sfputs_r+0xa>
 800a83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a840 <_vfiprintf_r>:
 800a840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a844:	460d      	mov	r5, r1
 800a846:	b09d      	sub	sp, #116	; 0x74
 800a848:	4614      	mov	r4, r2
 800a84a:	4698      	mov	r8, r3
 800a84c:	4606      	mov	r6, r0
 800a84e:	b118      	cbz	r0, 800a858 <_vfiprintf_r+0x18>
 800a850:	6983      	ldr	r3, [r0, #24]
 800a852:	b90b      	cbnz	r3, 800a858 <_vfiprintf_r+0x18>
 800a854:	f7ff fdc2 	bl	800a3dc <__sinit>
 800a858:	4b89      	ldr	r3, [pc, #548]	; (800aa80 <_vfiprintf_r+0x240>)
 800a85a:	429d      	cmp	r5, r3
 800a85c:	d11b      	bne.n	800a896 <_vfiprintf_r+0x56>
 800a85e:	6875      	ldr	r5, [r6, #4]
 800a860:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a862:	07d9      	lsls	r1, r3, #31
 800a864:	d405      	bmi.n	800a872 <_vfiprintf_r+0x32>
 800a866:	89ab      	ldrh	r3, [r5, #12]
 800a868:	059a      	lsls	r2, r3, #22
 800a86a:	d402      	bmi.n	800a872 <_vfiprintf_r+0x32>
 800a86c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a86e:	f7ff fe53 	bl	800a518 <__retarget_lock_acquire_recursive>
 800a872:	89ab      	ldrh	r3, [r5, #12]
 800a874:	071b      	lsls	r3, r3, #28
 800a876:	d501      	bpl.n	800a87c <_vfiprintf_r+0x3c>
 800a878:	692b      	ldr	r3, [r5, #16]
 800a87a:	b9eb      	cbnz	r3, 800a8b8 <_vfiprintf_r+0x78>
 800a87c:	4629      	mov	r1, r5
 800a87e:	4630      	mov	r0, r6
 800a880:	f000 fb4a 	bl	800af18 <__swsetup_r>
 800a884:	b1c0      	cbz	r0, 800a8b8 <_vfiprintf_r+0x78>
 800a886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a888:	07dc      	lsls	r4, r3, #31
 800a88a:	d50e      	bpl.n	800a8aa <_vfiprintf_r+0x6a>
 800a88c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a890:	b01d      	add	sp, #116	; 0x74
 800a892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a896:	4b7b      	ldr	r3, [pc, #492]	; (800aa84 <_vfiprintf_r+0x244>)
 800a898:	429d      	cmp	r5, r3
 800a89a:	d101      	bne.n	800a8a0 <_vfiprintf_r+0x60>
 800a89c:	68b5      	ldr	r5, [r6, #8]
 800a89e:	e7df      	b.n	800a860 <_vfiprintf_r+0x20>
 800a8a0:	4b79      	ldr	r3, [pc, #484]	; (800aa88 <_vfiprintf_r+0x248>)
 800a8a2:	429d      	cmp	r5, r3
 800a8a4:	bf08      	it	eq
 800a8a6:	68f5      	ldreq	r5, [r6, #12]
 800a8a8:	e7da      	b.n	800a860 <_vfiprintf_r+0x20>
 800a8aa:	89ab      	ldrh	r3, [r5, #12]
 800a8ac:	0598      	lsls	r0, r3, #22
 800a8ae:	d4ed      	bmi.n	800a88c <_vfiprintf_r+0x4c>
 800a8b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8b2:	f7ff fe32 	bl	800a51a <__retarget_lock_release_recursive>
 800a8b6:	e7e9      	b.n	800a88c <_vfiprintf_r+0x4c>
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a8bc:	2320      	movs	r3, #32
 800a8be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8c6:	2330      	movs	r3, #48	; 0x30
 800a8c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aa8c <_vfiprintf_r+0x24c>
 800a8cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8d0:	f04f 0901 	mov.w	r9, #1
 800a8d4:	4623      	mov	r3, r4
 800a8d6:	469a      	mov	sl, r3
 800a8d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8dc:	b10a      	cbz	r2, 800a8e2 <_vfiprintf_r+0xa2>
 800a8de:	2a25      	cmp	r2, #37	; 0x25
 800a8e0:	d1f9      	bne.n	800a8d6 <_vfiprintf_r+0x96>
 800a8e2:	ebba 0b04 	subs.w	fp, sl, r4
 800a8e6:	d00b      	beq.n	800a900 <_vfiprintf_r+0xc0>
 800a8e8:	465b      	mov	r3, fp
 800a8ea:	4622      	mov	r2, r4
 800a8ec:	4629      	mov	r1, r5
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	f7ff ff93 	bl	800a81a <__sfputs_r>
 800a8f4:	3001      	adds	r0, #1
 800a8f6:	f000 80aa 	beq.w	800aa4e <_vfiprintf_r+0x20e>
 800a8fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8fc:	445a      	add	r2, fp
 800a8fe:	9209      	str	r2, [sp, #36]	; 0x24
 800a900:	f89a 3000 	ldrb.w	r3, [sl]
 800a904:	2b00      	cmp	r3, #0
 800a906:	f000 80a2 	beq.w	800aa4e <_vfiprintf_r+0x20e>
 800a90a:	2300      	movs	r3, #0
 800a90c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a910:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a914:	f10a 0a01 	add.w	sl, sl, #1
 800a918:	9304      	str	r3, [sp, #16]
 800a91a:	9307      	str	r3, [sp, #28]
 800a91c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a920:	931a      	str	r3, [sp, #104]	; 0x68
 800a922:	4654      	mov	r4, sl
 800a924:	2205      	movs	r2, #5
 800a926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a92a:	4858      	ldr	r0, [pc, #352]	; (800aa8c <_vfiprintf_r+0x24c>)
 800a92c:	f7f5 fc58 	bl	80001e0 <memchr>
 800a930:	9a04      	ldr	r2, [sp, #16]
 800a932:	b9d8      	cbnz	r0, 800a96c <_vfiprintf_r+0x12c>
 800a934:	06d1      	lsls	r1, r2, #27
 800a936:	bf44      	itt	mi
 800a938:	2320      	movmi	r3, #32
 800a93a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a93e:	0713      	lsls	r3, r2, #28
 800a940:	bf44      	itt	mi
 800a942:	232b      	movmi	r3, #43	; 0x2b
 800a944:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a948:	f89a 3000 	ldrb.w	r3, [sl]
 800a94c:	2b2a      	cmp	r3, #42	; 0x2a
 800a94e:	d015      	beq.n	800a97c <_vfiprintf_r+0x13c>
 800a950:	9a07      	ldr	r2, [sp, #28]
 800a952:	4654      	mov	r4, sl
 800a954:	2000      	movs	r0, #0
 800a956:	f04f 0c0a 	mov.w	ip, #10
 800a95a:	4621      	mov	r1, r4
 800a95c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a960:	3b30      	subs	r3, #48	; 0x30
 800a962:	2b09      	cmp	r3, #9
 800a964:	d94e      	bls.n	800aa04 <_vfiprintf_r+0x1c4>
 800a966:	b1b0      	cbz	r0, 800a996 <_vfiprintf_r+0x156>
 800a968:	9207      	str	r2, [sp, #28]
 800a96a:	e014      	b.n	800a996 <_vfiprintf_r+0x156>
 800a96c:	eba0 0308 	sub.w	r3, r0, r8
 800a970:	fa09 f303 	lsl.w	r3, r9, r3
 800a974:	4313      	orrs	r3, r2
 800a976:	9304      	str	r3, [sp, #16]
 800a978:	46a2      	mov	sl, r4
 800a97a:	e7d2      	b.n	800a922 <_vfiprintf_r+0xe2>
 800a97c:	9b03      	ldr	r3, [sp, #12]
 800a97e:	1d19      	adds	r1, r3, #4
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	9103      	str	r1, [sp, #12]
 800a984:	2b00      	cmp	r3, #0
 800a986:	bfbb      	ittet	lt
 800a988:	425b      	neglt	r3, r3
 800a98a:	f042 0202 	orrlt.w	r2, r2, #2
 800a98e:	9307      	strge	r3, [sp, #28]
 800a990:	9307      	strlt	r3, [sp, #28]
 800a992:	bfb8      	it	lt
 800a994:	9204      	strlt	r2, [sp, #16]
 800a996:	7823      	ldrb	r3, [r4, #0]
 800a998:	2b2e      	cmp	r3, #46	; 0x2e
 800a99a:	d10c      	bne.n	800a9b6 <_vfiprintf_r+0x176>
 800a99c:	7863      	ldrb	r3, [r4, #1]
 800a99e:	2b2a      	cmp	r3, #42	; 0x2a
 800a9a0:	d135      	bne.n	800aa0e <_vfiprintf_r+0x1ce>
 800a9a2:	9b03      	ldr	r3, [sp, #12]
 800a9a4:	1d1a      	adds	r2, r3, #4
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	9203      	str	r2, [sp, #12]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	bfb8      	it	lt
 800a9ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a9b2:	3402      	adds	r4, #2
 800a9b4:	9305      	str	r3, [sp, #20]
 800a9b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aa9c <_vfiprintf_r+0x25c>
 800a9ba:	7821      	ldrb	r1, [r4, #0]
 800a9bc:	2203      	movs	r2, #3
 800a9be:	4650      	mov	r0, sl
 800a9c0:	f7f5 fc0e 	bl	80001e0 <memchr>
 800a9c4:	b140      	cbz	r0, 800a9d8 <_vfiprintf_r+0x198>
 800a9c6:	2340      	movs	r3, #64	; 0x40
 800a9c8:	eba0 000a 	sub.w	r0, r0, sl
 800a9cc:	fa03 f000 	lsl.w	r0, r3, r0
 800a9d0:	9b04      	ldr	r3, [sp, #16]
 800a9d2:	4303      	orrs	r3, r0
 800a9d4:	3401      	adds	r4, #1
 800a9d6:	9304      	str	r3, [sp, #16]
 800a9d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9dc:	482c      	ldr	r0, [pc, #176]	; (800aa90 <_vfiprintf_r+0x250>)
 800a9de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9e2:	2206      	movs	r2, #6
 800a9e4:	f7f5 fbfc 	bl	80001e0 <memchr>
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	d03f      	beq.n	800aa6c <_vfiprintf_r+0x22c>
 800a9ec:	4b29      	ldr	r3, [pc, #164]	; (800aa94 <_vfiprintf_r+0x254>)
 800a9ee:	bb1b      	cbnz	r3, 800aa38 <_vfiprintf_r+0x1f8>
 800a9f0:	9b03      	ldr	r3, [sp, #12]
 800a9f2:	3307      	adds	r3, #7
 800a9f4:	f023 0307 	bic.w	r3, r3, #7
 800a9f8:	3308      	adds	r3, #8
 800a9fa:	9303      	str	r3, [sp, #12]
 800a9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9fe:	443b      	add	r3, r7
 800aa00:	9309      	str	r3, [sp, #36]	; 0x24
 800aa02:	e767      	b.n	800a8d4 <_vfiprintf_r+0x94>
 800aa04:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa08:	460c      	mov	r4, r1
 800aa0a:	2001      	movs	r0, #1
 800aa0c:	e7a5      	b.n	800a95a <_vfiprintf_r+0x11a>
 800aa0e:	2300      	movs	r3, #0
 800aa10:	3401      	adds	r4, #1
 800aa12:	9305      	str	r3, [sp, #20]
 800aa14:	4619      	mov	r1, r3
 800aa16:	f04f 0c0a 	mov.w	ip, #10
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa20:	3a30      	subs	r2, #48	; 0x30
 800aa22:	2a09      	cmp	r2, #9
 800aa24:	d903      	bls.n	800aa2e <_vfiprintf_r+0x1ee>
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d0c5      	beq.n	800a9b6 <_vfiprintf_r+0x176>
 800aa2a:	9105      	str	r1, [sp, #20]
 800aa2c:	e7c3      	b.n	800a9b6 <_vfiprintf_r+0x176>
 800aa2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa32:	4604      	mov	r4, r0
 800aa34:	2301      	movs	r3, #1
 800aa36:	e7f0      	b.n	800aa1a <_vfiprintf_r+0x1da>
 800aa38:	ab03      	add	r3, sp, #12
 800aa3a:	9300      	str	r3, [sp, #0]
 800aa3c:	462a      	mov	r2, r5
 800aa3e:	4b16      	ldr	r3, [pc, #88]	; (800aa98 <_vfiprintf_r+0x258>)
 800aa40:	a904      	add	r1, sp, #16
 800aa42:	4630      	mov	r0, r6
 800aa44:	f3af 8000 	nop.w
 800aa48:	4607      	mov	r7, r0
 800aa4a:	1c78      	adds	r0, r7, #1
 800aa4c:	d1d6      	bne.n	800a9fc <_vfiprintf_r+0x1bc>
 800aa4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa50:	07d9      	lsls	r1, r3, #31
 800aa52:	d405      	bmi.n	800aa60 <_vfiprintf_r+0x220>
 800aa54:	89ab      	ldrh	r3, [r5, #12]
 800aa56:	059a      	lsls	r2, r3, #22
 800aa58:	d402      	bmi.n	800aa60 <_vfiprintf_r+0x220>
 800aa5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa5c:	f7ff fd5d 	bl	800a51a <__retarget_lock_release_recursive>
 800aa60:	89ab      	ldrh	r3, [r5, #12]
 800aa62:	065b      	lsls	r3, r3, #25
 800aa64:	f53f af12 	bmi.w	800a88c <_vfiprintf_r+0x4c>
 800aa68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa6a:	e711      	b.n	800a890 <_vfiprintf_r+0x50>
 800aa6c:	ab03      	add	r3, sp, #12
 800aa6e:	9300      	str	r3, [sp, #0]
 800aa70:	462a      	mov	r2, r5
 800aa72:	4b09      	ldr	r3, [pc, #36]	; (800aa98 <_vfiprintf_r+0x258>)
 800aa74:	a904      	add	r1, sp, #16
 800aa76:	4630      	mov	r0, r6
 800aa78:	f000 f880 	bl	800ab7c <_printf_i>
 800aa7c:	e7e4      	b.n	800aa48 <_vfiprintf_r+0x208>
 800aa7e:	bf00      	nop
 800aa80:	0800da08 	.word	0x0800da08
 800aa84:	0800da28 	.word	0x0800da28
 800aa88:	0800d9e8 	.word	0x0800d9e8
 800aa8c:	0800da48 	.word	0x0800da48
 800aa90:	0800da52 	.word	0x0800da52
 800aa94:	00000000 	.word	0x00000000
 800aa98:	0800a81b 	.word	0x0800a81b
 800aa9c:	0800da4e 	.word	0x0800da4e

0800aaa0 <_printf_common>:
 800aaa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaa4:	4616      	mov	r6, r2
 800aaa6:	4699      	mov	r9, r3
 800aaa8:	688a      	ldr	r2, [r1, #8]
 800aaaa:	690b      	ldr	r3, [r1, #16]
 800aaac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aab0:	4293      	cmp	r3, r2
 800aab2:	bfb8      	it	lt
 800aab4:	4613      	movlt	r3, r2
 800aab6:	6033      	str	r3, [r6, #0]
 800aab8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aabc:	4607      	mov	r7, r0
 800aabe:	460c      	mov	r4, r1
 800aac0:	b10a      	cbz	r2, 800aac6 <_printf_common+0x26>
 800aac2:	3301      	adds	r3, #1
 800aac4:	6033      	str	r3, [r6, #0]
 800aac6:	6823      	ldr	r3, [r4, #0]
 800aac8:	0699      	lsls	r1, r3, #26
 800aaca:	bf42      	ittt	mi
 800aacc:	6833      	ldrmi	r3, [r6, #0]
 800aace:	3302      	addmi	r3, #2
 800aad0:	6033      	strmi	r3, [r6, #0]
 800aad2:	6825      	ldr	r5, [r4, #0]
 800aad4:	f015 0506 	ands.w	r5, r5, #6
 800aad8:	d106      	bne.n	800aae8 <_printf_common+0x48>
 800aada:	f104 0a19 	add.w	sl, r4, #25
 800aade:	68e3      	ldr	r3, [r4, #12]
 800aae0:	6832      	ldr	r2, [r6, #0]
 800aae2:	1a9b      	subs	r3, r3, r2
 800aae4:	42ab      	cmp	r3, r5
 800aae6:	dc26      	bgt.n	800ab36 <_printf_common+0x96>
 800aae8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aaec:	1e13      	subs	r3, r2, #0
 800aaee:	6822      	ldr	r2, [r4, #0]
 800aaf0:	bf18      	it	ne
 800aaf2:	2301      	movne	r3, #1
 800aaf4:	0692      	lsls	r2, r2, #26
 800aaf6:	d42b      	bmi.n	800ab50 <_printf_common+0xb0>
 800aaf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aafc:	4649      	mov	r1, r9
 800aafe:	4638      	mov	r0, r7
 800ab00:	47c0      	blx	r8
 800ab02:	3001      	adds	r0, #1
 800ab04:	d01e      	beq.n	800ab44 <_printf_common+0xa4>
 800ab06:	6823      	ldr	r3, [r4, #0]
 800ab08:	68e5      	ldr	r5, [r4, #12]
 800ab0a:	6832      	ldr	r2, [r6, #0]
 800ab0c:	f003 0306 	and.w	r3, r3, #6
 800ab10:	2b04      	cmp	r3, #4
 800ab12:	bf08      	it	eq
 800ab14:	1aad      	subeq	r5, r5, r2
 800ab16:	68a3      	ldr	r3, [r4, #8]
 800ab18:	6922      	ldr	r2, [r4, #16]
 800ab1a:	bf0c      	ite	eq
 800ab1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab20:	2500      	movne	r5, #0
 800ab22:	4293      	cmp	r3, r2
 800ab24:	bfc4      	itt	gt
 800ab26:	1a9b      	subgt	r3, r3, r2
 800ab28:	18ed      	addgt	r5, r5, r3
 800ab2a:	2600      	movs	r6, #0
 800ab2c:	341a      	adds	r4, #26
 800ab2e:	42b5      	cmp	r5, r6
 800ab30:	d11a      	bne.n	800ab68 <_printf_common+0xc8>
 800ab32:	2000      	movs	r0, #0
 800ab34:	e008      	b.n	800ab48 <_printf_common+0xa8>
 800ab36:	2301      	movs	r3, #1
 800ab38:	4652      	mov	r2, sl
 800ab3a:	4649      	mov	r1, r9
 800ab3c:	4638      	mov	r0, r7
 800ab3e:	47c0      	blx	r8
 800ab40:	3001      	adds	r0, #1
 800ab42:	d103      	bne.n	800ab4c <_printf_common+0xac>
 800ab44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab4c:	3501      	adds	r5, #1
 800ab4e:	e7c6      	b.n	800aade <_printf_common+0x3e>
 800ab50:	18e1      	adds	r1, r4, r3
 800ab52:	1c5a      	adds	r2, r3, #1
 800ab54:	2030      	movs	r0, #48	; 0x30
 800ab56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab5a:	4422      	add	r2, r4
 800ab5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab64:	3302      	adds	r3, #2
 800ab66:	e7c7      	b.n	800aaf8 <_printf_common+0x58>
 800ab68:	2301      	movs	r3, #1
 800ab6a:	4622      	mov	r2, r4
 800ab6c:	4649      	mov	r1, r9
 800ab6e:	4638      	mov	r0, r7
 800ab70:	47c0      	blx	r8
 800ab72:	3001      	adds	r0, #1
 800ab74:	d0e6      	beq.n	800ab44 <_printf_common+0xa4>
 800ab76:	3601      	adds	r6, #1
 800ab78:	e7d9      	b.n	800ab2e <_printf_common+0x8e>
	...

0800ab7c <_printf_i>:
 800ab7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab80:	460c      	mov	r4, r1
 800ab82:	4691      	mov	r9, r2
 800ab84:	7e27      	ldrb	r7, [r4, #24]
 800ab86:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ab88:	2f78      	cmp	r7, #120	; 0x78
 800ab8a:	4680      	mov	r8, r0
 800ab8c:	469a      	mov	sl, r3
 800ab8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab92:	d807      	bhi.n	800aba4 <_printf_i+0x28>
 800ab94:	2f62      	cmp	r7, #98	; 0x62
 800ab96:	d80a      	bhi.n	800abae <_printf_i+0x32>
 800ab98:	2f00      	cmp	r7, #0
 800ab9a:	f000 80d8 	beq.w	800ad4e <_printf_i+0x1d2>
 800ab9e:	2f58      	cmp	r7, #88	; 0x58
 800aba0:	f000 80a3 	beq.w	800acea <_printf_i+0x16e>
 800aba4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aba8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abac:	e03a      	b.n	800ac24 <_printf_i+0xa8>
 800abae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abb2:	2b15      	cmp	r3, #21
 800abb4:	d8f6      	bhi.n	800aba4 <_printf_i+0x28>
 800abb6:	a001      	add	r0, pc, #4	; (adr r0, 800abbc <_printf_i+0x40>)
 800abb8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800abbc:	0800ac15 	.word	0x0800ac15
 800abc0:	0800ac29 	.word	0x0800ac29
 800abc4:	0800aba5 	.word	0x0800aba5
 800abc8:	0800aba5 	.word	0x0800aba5
 800abcc:	0800aba5 	.word	0x0800aba5
 800abd0:	0800aba5 	.word	0x0800aba5
 800abd4:	0800ac29 	.word	0x0800ac29
 800abd8:	0800aba5 	.word	0x0800aba5
 800abdc:	0800aba5 	.word	0x0800aba5
 800abe0:	0800aba5 	.word	0x0800aba5
 800abe4:	0800aba5 	.word	0x0800aba5
 800abe8:	0800ad35 	.word	0x0800ad35
 800abec:	0800ac59 	.word	0x0800ac59
 800abf0:	0800ad17 	.word	0x0800ad17
 800abf4:	0800aba5 	.word	0x0800aba5
 800abf8:	0800aba5 	.word	0x0800aba5
 800abfc:	0800ad57 	.word	0x0800ad57
 800ac00:	0800aba5 	.word	0x0800aba5
 800ac04:	0800ac59 	.word	0x0800ac59
 800ac08:	0800aba5 	.word	0x0800aba5
 800ac0c:	0800aba5 	.word	0x0800aba5
 800ac10:	0800ad1f 	.word	0x0800ad1f
 800ac14:	680b      	ldr	r3, [r1, #0]
 800ac16:	1d1a      	adds	r2, r3, #4
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	600a      	str	r2, [r1, #0]
 800ac1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ac20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac24:	2301      	movs	r3, #1
 800ac26:	e0a3      	b.n	800ad70 <_printf_i+0x1f4>
 800ac28:	6825      	ldr	r5, [r4, #0]
 800ac2a:	6808      	ldr	r0, [r1, #0]
 800ac2c:	062e      	lsls	r6, r5, #24
 800ac2e:	f100 0304 	add.w	r3, r0, #4
 800ac32:	d50a      	bpl.n	800ac4a <_printf_i+0xce>
 800ac34:	6805      	ldr	r5, [r0, #0]
 800ac36:	600b      	str	r3, [r1, #0]
 800ac38:	2d00      	cmp	r5, #0
 800ac3a:	da03      	bge.n	800ac44 <_printf_i+0xc8>
 800ac3c:	232d      	movs	r3, #45	; 0x2d
 800ac3e:	426d      	negs	r5, r5
 800ac40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac44:	485e      	ldr	r0, [pc, #376]	; (800adc0 <_printf_i+0x244>)
 800ac46:	230a      	movs	r3, #10
 800ac48:	e019      	b.n	800ac7e <_printf_i+0x102>
 800ac4a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ac4e:	6805      	ldr	r5, [r0, #0]
 800ac50:	600b      	str	r3, [r1, #0]
 800ac52:	bf18      	it	ne
 800ac54:	b22d      	sxthne	r5, r5
 800ac56:	e7ef      	b.n	800ac38 <_printf_i+0xbc>
 800ac58:	680b      	ldr	r3, [r1, #0]
 800ac5a:	6825      	ldr	r5, [r4, #0]
 800ac5c:	1d18      	adds	r0, r3, #4
 800ac5e:	6008      	str	r0, [r1, #0]
 800ac60:	0628      	lsls	r0, r5, #24
 800ac62:	d501      	bpl.n	800ac68 <_printf_i+0xec>
 800ac64:	681d      	ldr	r5, [r3, #0]
 800ac66:	e002      	b.n	800ac6e <_printf_i+0xf2>
 800ac68:	0669      	lsls	r1, r5, #25
 800ac6a:	d5fb      	bpl.n	800ac64 <_printf_i+0xe8>
 800ac6c:	881d      	ldrh	r5, [r3, #0]
 800ac6e:	4854      	ldr	r0, [pc, #336]	; (800adc0 <_printf_i+0x244>)
 800ac70:	2f6f      	cmp	r7, #111	; 0x6f
 800ac72:	bf0c      	ite	eq
 800ac74:	2308      	moveq	r3, #8
 800ac76:	230a      	movne	r3, #10
 800ac78:	2100      	movs	r1, #0
 800ac7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac7e:	6866      	ldr	r6, [r4, #4]
 800ac80:	60a6      	str	r6, [r4, #8]
 800ac82:	2e00      	cmp	r6, #0
 800ac84:	bfa2      	ittt	ge
 800ac86:	6821      	ldrge	r1, [r4, #0]
 800ac88:	f021 0104 	bicge.w	r1, r1, #4
 800ac8c:	6021      	strge	r1, [r4, #0]
 800ac8e:	b90d      	cbnz	r5, 800ac94 <_printf_i+0x118>
 800ac90:	2e00      	cmp	r6, #0
 800ac92:	d04d      	beq.n	800ad30 <_printf_i+0x1b4>
 800ac94:	4616      	mov	r6, r2
 800ac96:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac9a:	fb03 5711 	mls	r7, r3, r1, r5
 800ac9e:	5dc7      	ldrb	r7, [r0, r7]
 800aca0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aca4:	462f      	mov	r7, r5
 800aca6:	42bb      	cmp	r3, r7
 800aca8:	460d      	mov	r5, r1
 800acaa:	d9f4      	bls.n	800ac96 <_printf_i+0x11a>
 800acac:	2b08      	cmp	r3, #8
 800acae:	d10b      	bne.n	800acc8 <_printf_i+0x14c>
 800acb0:	6823      	ldr	r3, [r4, #0]
 800acb2:	07df      	lsls	r7, r3, #31
 800acb4:	d508      	bpl.n	800acc8 <_printf_i+0x14c>
 800acb6:	6923      	ldr	r3, [r4, #16]
 800acb8:	6861      	ldr	r1, [r4, #4]
 800acba:	4299      	cmp	r1, r3
 800acbc:	bfde      	ittt	le
 800acbe:	2330      	movle	r3, #48	; 0x30
 800acc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800acc4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800acc8:	1b92      	subs	r2, r2, r6
 800acca:	6122      	str	r2, [r4, #16]
 800accc:	f8cd a000 	str.w	sl, [sp]
 800acd0:	464b      	mov	r3, r9
 800acd2:	aa03      	add	r2, sp, #12
 800acd4:	4621      	mov	r1, r4
 800acd6:	4640      	mov	r0, r8
 800acd8:	f7ff fee2 	bl	800aaa0 <_printf_common>
 800acdc:	3001      	adds	r0, #1
 800acde:	d14c      	bne.n	800ad7a <_printf_i+0x1fe>
 800ace0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ace4:	b004      	add	sp, #16
 800ace6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acea:	4835      	ldr	r0, [pc, #212]	; (800adc0 <_printf_i+0x244>)
 800acec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800acf0:	6823      	ldr	r3, [r4, #0]
 800acf2:	680e      	ldr	r6, [r1, #0]
 800acf4:	061f      	lsls	r7, r3, #24
 800acf6:	f856 5b04 	ldr.w	r5, [r6], #4
 800acfa:	600e      	str	r6, [r1, #0]
 800acfc:	d514      	bpl.n	800ad28 <_printf_i+0x1ac>
 800acfe:	07d9      	lsls	r1, r3, #31
 800ad00:	bf44      	itt	mi
 800ad02:	f043 0320 	orrmi.w	r3, r3, #32
 800ad06:	6023      	strmi	r3, [r4, #0]
 800ad08:	b91d      	cbnz	r5, 800ad12 <_printf_i+0x196>
 800ad0a:	6823      	ldr	r3, [r4, #0]
 800ad0c:	f023 0320 	bic.w	r3, r3, #32
 800ad10:	6023      	str	r3, [r4, #0]
 800ad12:	2310      	movs	r3, #16
 800ad14:	e7b0      	b.n	800ac78 <_printf_i+0xfc>
 800ad16:	6823      	ldr	r3, [r4, #0]
 800ad18:	f043 0320 	orr.w	r3, r3, #32
 800ad1c:	6023      	str	r3, [r4, #0]
 800ad1e:	2378      	movs	r3, #120	; 0x78
 800ad20:	4828      	ldr	r0, [pc, #160]	; (800adc4 <_printf_i+0x248>)
 800ad22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad26:	e7e3      	b.n	800acf0 <_printf_i+0x174>
 800ad28:	065e      	lsls	r6, r3, #25
 800ad2a:	bf48      	it	mi
 800ad2c:	b2ad      	uxthmi	r5, r5
 800ad2e:	e7e6      	b.n	800acfe <_printf_i+0x182>
 800ad30:	4616      	mov	r6, r2
 800ad32:	e7bb      	b.n	800acac <_printf_i+0x130>
 800ad34:	680b      	ldr	r3, [r1, #0]
 800ad36:	6826      	ldr	r6, [r4, #0]
 800ad38:	6960      	ldr	r0, [r4, #20]
 800ad3a:	1d1d      	adds	r5, r3, #4
 800ad3c:	600d      	str	r5, [r1, #0]
 800ad3e:	0635      	lsls	r5, r6, #24
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	d501      	bpl.n	800ad48 <_printf_i+0x1cc>
 800ad44:	6018      	str	r0, [r3, #0]
 800ad46:	e002      	b.n	800ad4e <_printf_i+0x1d2>
 800ad48:	0671      	lsls	r1, r6, #25
 800ad4a:	d5fb      	bpl.n	800ad44 <_printf_i+0x1c8>
 800ad4c:	8018      	strh	r0, [r3, #0]
 800ad4e:	2300      	movs	r3, #0
 800ad50:	6123      	str	r3, [r4, #16]
 800ad52:	4616      	mov	r6, r2
 800ad54:	e7ba      	b.n	800accc <_printf_i+0x150>
 800ad56:	680b      	ldr	r3, [r1, #0]
 800ad58:	1d1a      	adds	r2, r3, #4
 800ad5a:	600a      	str	r2, [r1, #0]
 800ad5c:	681e      	ldr	r6, [r3, #0]
 800ad5e:	6862      	ldr	r2, [r4, #4]
 800ad60:	2100      	movs	r1, #0
 800ad62:	4630      	mov	r0, r6
 800ad64:	f7f5 fa3c 	bl	80001e0 <memchr>
 800ad68:	b108      	cbz	r0, 800ad6e <_printf_i+0x1f2>
 800ad6a:	1b80      	subs	r0, r0, r6
 800ad6c:	6060      	str	r0, [r4, #4]
 800ad6e:	6863      	ldr	r3, [r4, #4]
 800ad70:	6123      	str	r3, [r4, #16]
 800ad72:	2300      	movs	r3, #0
 800ad74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad78:	e7a8      	b.n	800accc <_printf_i+0x150>
 800ad7a:	6923      	ldr	r3, [r4, #16]
 800ad7c:	4632      	mov	r2, r6
 800ad7e:	4649      	mov	r1, r9
 800ad80:	4640      	mov	r0, r8
 800ad82:	47d0      	blx	sl
 800ad84:	3001      	adds	r0, #1
 800ad86:	d0ab      	beq.n	800ace0 <_printf_i+0x164>
 800ad88:	6823      	ldr	r3, [r4, #0]
 800ad8a:	079b      	lsls	r3, r3, #30
 800ad8c:	d413      	bmi.n	800adb6 <_printf_i+0x23a>
 800ad8e:	68e0      	ldr	r0, [r4, #12]
 800ad90:	9b03      	ldr	r3, [sp, #12]
 800ad92:	4298      	cmp	r0, r3
 800ad94:	bfb8      	it	lt
 800ad96:	4618      	movlt	r0, r3
 800ad98:	e7a4      	b.n	800ace4 <_printf_i+0x168>
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	4632      	mov	r2, r6
 800ad9e:	4649      	mov	r1, r9
 800ada0:	4640      	mov	r0, r8
 800ada2:	47d0      	blx	sl
 800ada4:	3001      	adds	r0, #1
 800ada6:	d09b      	beq.n	800ace0 <_printf_i+0x164>
 800ada8:	3501      	adds	r5, #1
 800adaa:	68e3      	ldr	r3, [r4, #12]
 800adac:	9903      	ldr	r1, [sp, #12]
 800adae:	1a5b      	subs	r3, r3, r1
 800adb0:	42ab      	cmp	r3, r5
 800adb2:	dcf2      	bgt.n	800ad9a <_printf_i+0x21e>
 800adb4:	e7eb      	b.n	800ad8e <_printf_i+0x212>
 800adb6:	2500      	movs	r5, #0
 800adb8:	f104 0619 	add.w	r6, r4, #25
 800adbc:	e7f5      	b.n	800adaa <_printf_i+0x22e>
 800adbe:	bf00      	nop
 800adc0:	0800da59 	.word	0x0800da59
 800adc4:	0800da6a 	.word	0x0800da6a

0800adc8 <__sread>:
 800adc8:	b510      	push	{r4, lr}
 800adca:	460c      	mov	r4, r1
 800adcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800add0:	f000 fa98 	bl	800b304 <_read_r>
 800add4:	2800      	cmp	r0, #0
 800add6:	bfab      	itete	ge
 800add8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800adda:	89a3      	ldrhlt	r3, [r4, #12]
 800addc:	181b      	addge	r3, r3, r0
 800adde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ade2:	bfac      	ite	ge
 800ade4:	6563      	strge	r3, [r4, #84]	; 0x54
 800ade6:	81a3      	strhlt	r3, [r4, #12]
 800ade8:	bd10      	pop	{r4, pc}

0800adea <__swrite>:
 800adea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adee:	461f      	mov	r7, r3
 800adf0:	898b      	ldrh	r3, [r1, #12]
 800adf2:	05db      	lsls	r3, r3, #23
 800adf4:	4605      	mov	r5, r0
 800adf6:	460c      	mov	r4, r1
 800adf8:	4616      	mov	r6, r2
 800adfa:	d505      	bpl.n	800ae08 <__swrite+0x1e>
 800adfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae00:	2302      	movs	r3, #2
 800ae02:	2200      	movs	r2, #0
 800ae04:	f000 f9c8 	bl	800b198 <_lseek_r>
 800ae08:	89a3      	ldrh	r3, [r4, #12]
 800ae0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae12:	81a3      	strh	r3, [r4, #12]
 800ae14:	4632      	mov	r2, r6
 800ae16:	463b      	mov	r3, r7
 800ae18:	4628      	mov	r0, r5
 800ae1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae1e:	f000 b869 	b.w	800aef4 <_write_r>

0800ae22 <__sseek>:
 800ae22:	b510      	push	{r4, lr}
 800ae24:	460c      	mov	r4, r1
 800ae26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae2a:	f000 f9b5 	bl	800b198 <_lseek_r>
 800ae2e:	1c43      	adds	r3, r0, #1
 800ae30:	89a3      	ldrh	r3, [r4, #12]
 800ae32:	bf15      	itete	ne
 800ae34:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae3e:	81a3      	strheq	r3, [r4, #12]
 800ae40:	bf18      	it	ne
 800ae42:	81a3      	strhne	r3, [r4, #12]
 800ae44:	bd10      	pop	{r4, pc}

0800ae46 <__sclose>:
 800ae46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae4a:	f000 b8d3 	b.w	800aff4 <_close_r>
	...

0800ae50 <__swbuf_r>:
 800ae50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae52:	460e      	mov	r6, r1
 800ae54:	4614      	mov	r4, r2
 800ae56:	4605      	mov	r5, r0
 800ae58:	b118      	cbz	r0, 800ae62 <__swbuf_r+0x12>
 800ae5a:	6983      	ldr	r3, [r0, #24]
 800ae5c:	b90b      	cbnz	r3, 800ae62 <__swbuf_r+0x12>
 800ae5e:	f7ff fabd 	bl	800a3dc <__sinit>
 800ae62:	4b21      	ldr	r3, [pc, #132]	; (800aee8 <__swbuf_r+0x98>)
 800ae64:	429c      	cmp	r4, r3
 800ae66:	d12b      	bne.n	800aec0 <__swbuf_r+0x70>
 800ae68:	686c      	ldr	r4, [r5, #4]
 800ae6a:	69a3      	ldr	r3, [r4, #24]
 800ae6c:	60a3      	str	r3, [r4, #8]
 800ae6e:	89a3      	ldrh	r3, [r4, #12]
 800ae70:	071a      	lsls	r2, r3, #28
 800ae72:	d52f      	bpl.n	800aed4 <__swbuf_r+0x84>
 800ae74:	6923      	ldr	r3, [r4, #16]
 800ae76:	b36b      	cbz	r3, 800aed4 <__swbuf_r+0x84>
 800ae78:	6923      	ldr	r3, [r4, #16]
 800ae7a:	6820      	ldr	r0, [r4, #0]
 800ae7c:	1ac0      	subs	r0, r0, r3
 800ae7e:	6963      	ldr	r3, [r4, #20]
 800ae80:	b2f6      	uxtb	r6, r6
 800ae82:	4283      	cmp	r3, r0
 800ae84:	4637      	mov	r7, r6
 800ae86:	dc04      	bgt.n	800ae92 <__swbuf_r+0x42>
 800ae88:	4621      	mov	r1, r4
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	f000 f948 	bl	800b120 <_fflush_r>
 800ae90:	bb30      	cbnz	r0, 800aee0 <__swbuf_r+0x90>
 800ae92:	68a3      	ldr	r3, [r4, #8]
 800ae94:	3b01      	subs	r3, #1
 800ae96:	60a3      	str	r3, [r4, #8]
 800ae98:	6823      	ldr	r3, [r4, #0]
 800ae9a:	1c5a      	adds	r2, r3, #1
 800ae9c:	6022      	str	r2, [r4, #0]
 800ae9e:	701e      	strb	r6, [r3, #0]
 800aea0:	6963      	ldr	r3, [r4, #20]
 800aea2:	3001      	adds	r0, #1
 800aea4:	4283      	cmp	r3, r0
 800aea6:	d004      	beq.n	800aeb2 <__swbuf_r+0x62>
 800aea8:	89a3      	ldrh	r3, [r4, #12]
 800aeaa:	07db      	lsls	r3, r3, #31
 800aeac:	d506      	bpl.n	800aebc <__swbuf_r+0x6c>
 800aeae:	2e0a      	cmp	r6, #10
 800aeb0:	d104      	bne.n	800aebc <__swbuf_r+0x6c>
 800aeb2:	4621      	mov	r1, r4
 800aeb4:	4628      	mov	r0, r5
 800aeb6:	f000 f933 	bl	800b120 <_fflush_r>
 800aeba:	b988      	cbnz	r0, 800aee0 <__swbuf_r+0x90>
 800aebc:	4638      	mov	r0, r7
 800aebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aec0:	4b0a      	ldr	r3, [pc, #40]	; (800aeec <__swbuf_r+0x9c>)
 800aec2:	429c      	cmp	r4, r3
 800aec4:	d101      	bne.n	800aeca <__swbuf_r+0x7a>
 800aec6:	68ac      	ldr	r4, [r5, #8]
 800aec8:	e7cf      	b.n	800ae6a <__swbuf_r+0x1a>
 800aeca:	4b09      	ldr	r3, [pc, #36]	; (800aef0 <__swbuf_r+0xa0>)
 800aecc:	429c      	cmp	r4, r3
 800aece:	bf08      	it	eq
 800aed0:	68ec      	ldreq	r4, [r5, #12]
 800aed2:	e7ca      	b.n	800ae6a <__swbuf_r+0x1a>
 800aed4:	4621      	mov	r1, r4
 800aed6:	4628      	mov	r0, r5
 800aed8:	f000 f81e 	bl	800af18 <__swsetup_r>
 800aedc:	2800      	cmp	r0, #0
 800aede:	d0cb      	beq.n	800ae78 <__swbuf_r+0x28>
 800aee0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800aee4:	e7ea      	b.n	800aebc <__swbuf_r+0x6c>
 800aee6:	bf00      	nop
 800aee8:	0800da08 	.word	0x0800da08
 800aeec:	0800da28 	.word	0x0800da28
 800aef0:	0800d9e8 	.word	0x0800d9e8

0800aef4 <_write_r>:
 800aef4:	b538      	push	{r3, r4, r5, lr}
 800aef6:	4d07      	ldr	r5, [pc, #28]	; (800af14 <_write_r+0x20>)
 800aef8:	4604      	mov	r4, r0
 800aefa:	4608      	mov	r0, r1
 800aefc:	4611      	mov	r1, r2
 800aefe:	2200      	movs	r2, #0
 800af00:	602a      	str	r2, [r5, #0]
 800af02:	461a      	mov	r2, r3
 800af04:	f7f7 f8ad 	bl	8002062 <_write>
 800af08:	1c43      	adds	r3, r0, #1
 800af0a:	d102      	bne.n	800af12 <_write_r+0x1e>
 800af0c:	682b      	ldr	r3, [r5, #0]
 800af0e:	b103      	cbz	r3, 800af12 <_write_r+0x1e>
 800af10:	6023      	str	r3, [r4, #0]
 800af12:	bd38      	pop	{r3, r4, r5, pc}
 800af14:	20002640 	.word	0x20002640

0800af18 <__swsetup_r>:
 800af18:	4b32      	ldr	r3, [pc, #200]	; (800afe4 <__swsetup_r+0xcc>)
 800af1a:	b570      	push	{r4, r5, r6, lr}
 800af1c:	681d      	ldr	r5, [r3, #0]
 800af1e:	4606      	mov	r6, r0
 800af20:	460c      	mov	r4, r1
 800af22:	b125      	cbz	r5, 800af2e <__swsetup_r+0x16>
 800af24:	69ab      	ldr	r3, [r5, #24]
 800af26:	b913      	cbnz	r3, 800af2e <__swsetup_r+0x16>
 800af28:	4628      	mov	r0, r5
 800af2a:	f7ff fa57 	bl	800a3dc <__sinit>
 800af2e:	4b2e      	ldr	r3, [pc, #184]	; (800afe8 <__swsetup_r+0xd0>)
 800af30:	429c      	cmp	r4, r3
 800af32:	d10f      	bne.n	800af54 <__swsetup_r+0x3c>
 800af34:	686c      	ldr	r4, [r5, #4]
 800af36:	89a3      	ldrh	r3, [r4, #12]
 800af38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af3c:	0719      	lsls	r1, r3, #28
 800af3e:	d42c      	bmi.n	800af9a <__swsetup_r+0x82>
 800af40:	06dd      	lsls	r5, r3, #27
 800af42:	d411      	bmi.n	800af68 <__swsetup_r+0x50>
 800af44:	2309      	movs	r3, #9
 800af46:	6033      	str	r3, [r6, #0]
 800af48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af4c:	81a3      	strh	r3, [r4, #12]
 800af4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af52:	e03e      	b.n	800afd2 <__swsetup_r+0xba>
 800af54:	4b25      	ldr	r3, [pc, #148]	; (800afec <__swsetup_r+0xd4>)
 800af56:	429c      	cmp	r4, r3
 800af58:	d101      	bne.n	800af5e <__swsetup_r+0x46>
 800af5a:	68ac      	ldr	r4, [r5, #8]
 800af5c:	e7eb      	b.n	800af36 <__swsetup_r+0x1e>
 800af5e:	4b24      	ldr	r3, [pc, #144]	; (800aff0 <__swsetup_r+0xd8>)
 800af60:	429c      	cmp	r4, r3
 800af62:	bf08      	it	eq
 800af64:	68ec      	ldreq	r4, [r5, #12]
 800af66:	e7e6      	b.n	800af36 <__swsetup_r+0x1e>
 800af68:	0758      	lsls	r0, r3, #29
 800af6a:	d512      	bpl.n	800af92 <__swsetup_r+0x7a>
 800af6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af6e:	b141      	cbz	r1, 800af82 <__swsetup_r+0x6a>
 800af70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af74:	4299      	cmp	r1, r3
 800af76:	d002      	beq.n	800af7e <__swsetup_r+0x66>
 800af78:	4630      	mov	r0, r6
 800af7a:	f7ff f8e5 	bl	800a148 <_free_r>
 800af7e:	2300      	movs	r3, #0
 800af80:	6363      	str	r3, [r4, #52]	; 0x34
 800af82:	89a3      	ldrh	r3, [r4, #12]
 800af84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af88:	81a3      	strh	r3, [r4, #12]
 800af8a:	2300      	movs	r3, #0
 800af8c:	6063      	str	r3, [r4, #4]
 800af8e:	6923      	ldr	r3, [r4, #16]
 800af90:	6023      	str	r3, [r4, #0]
 800af92:	89a3      	ldrh	r3, [r4, #12]
 800af94:	f043 0308 	orr.w	r3, r3, #8
 800af98:	81a3      	strh	r3, [r4, #12]
 800af9a:	6923      	ldr	r3, [r4, #16]
 800af9c:	b94b      	cbnz	r3, 800afb2 <__swsetup_r+0x9a>
 800af9e:	89a3      	ldrh	r3, [r4, #12]
 800afa0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800afa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afa8:	d003      	beq.n	800afb2 <__swsetup_r+0x9a>
 800afaa:	4621      	mov	r1, r4
 800afac:	4630      	mov	r0, r6
 800afae:	f000 f929 	bl	800b204 <__smakebuf_r>
 800afb2:	89a0      	ldrh	r0, [r4, #12]
 800afb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afb8:	f010 0301 	ands.w	r3, r0, #1
 800afbc:	d00a      	beq.n	800afd4 <__swsetup_r+0xbc>
 800afbe:	2300      	movs	r3, #0
 800afc0:	60a3      	str	r3, [r4, #8]
 800afc2:	6963      	ldr	r3, [r4, #20]
 800afc4:	425b      	negs	r3, r3
 800afc6:	61a3      	str	r3, [r4, #24]
 800afc8:	6923      	ldr	r3, [r4, #16]
 800afca:	b943      	cbnz	r3, 800afde <__swsetup_r+0xc6>
 800afcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800afd0:	d1ba      	bne.n	800af48 <__swsetup_r+0x30>
 800afd2:	bd70      	pop	{r4, r5, r6, pc}
 800afd4:	0781      	lsls	r1, r0, #30
 800afd6:	bf58      	it	pl
 800afd8:	6963      	ldrpl	r3, [r4, #20]
 800afda:	60a3      	str	r3, [r4, #8]
 800afdc:	e7f4      	b.n	800afc8 <__swsetup_r+0xb0>
 800afde:	2000      	movs	r0, #0
 800afe0:	e7f7      	b.n	800afd2 <__swsetup_r+0xba>
 800afe2:	bf00      	nop
 800afe4:	20000190 	.word	0x20000190
 800afe8:	0800da08 	.word	0x0800da08
 800afec:	0800da28 	.word	0x0800da28
 800aff0:	0800d9e8 	.word	0x0800d9e8

0800aff4 <_close_r>:
 800aff4:	b538      	push	{r3, r4, r5, lr}
 800aff6:	4d06      	ldr	r5, [pc, #24]	; (800b010 <_close_r+0x1c>)
 800aff8:	2300      	movs	r3, #0
 800affa:	4604      	mov	r4, r0
 800affc:	4608      	mov	r0, r1
 800affe:	602b      	str	r3, [r5, #0]
 800b000:	f7f7 f84b 	bl	800209a <_close>
 800b004:	1c43      	adds	r3, r0, #1
 800b006:	d102      	bne.n	800b00e <_close_r+0x1a>
 800b008:	682b      	ldr	r3, [r5, #0]
 800b00a:	b103      	cbz	r3, 800b00e <_close_r+0x1a>
 800b00c:	6023      	str	r3, [r4, #0]
 800b00e:	bd38      	pop	{r3, r4, r5, pc}
 800b010:	20002640 	.word	0x20002640

0800b014 <__sflush_r>:
 800b014:	898a      	ldrh	r2, [r1, #12]
 800b016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b01a:	4605      	mov	r5, r0
 800b01c:	0710      	lsls	r0, r2, #28
 800b01e:	460c      	mov	r4, r1
 800b020:	d458      	bmi.n	800b0d4 <__sflush_r+0xc0>
 800b022:	684b      	ldr	r3, [r1, #4]
 800b024:	2b00      	cmp	r3, #0
 800b026:	dc05      	bgt.n	800b034 <__sflush_r+0x20>
 800b028:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	dc02      	bgt.n	800b034 <__sflush_r+0x20>
 800b02e:	2000      	movs	r0, #0
 800b030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b034:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b036:	2e00      	cmp	r6, #0
 800b038:	d0f9      	beq.n	800b02e <__sflush_r+0x1a>
 800b03a:	2300      	movs	r3, #0
 800b03c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b040:	682f      	ldr	r7, [r5, #0]
 800b042:	602b      	str	r3, [r5, #0]
 800b044:	d032      	beq.n	800b0ac <__sflush_r+0x98>
 800b046:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b048:	89a3      	ldrh	r3, [r4, #12]
 800b04a:	075a      	lsls	r2, r3, #29
 800b04c:	d505      	bpl.n	800b05a <__sflush_r+0x46>
 800b04e:	6863      	ldr	r3, [r4, #4]
 800b050:	1ac0      	subs	r0, r0, r3
 800b052:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b054:	b10b      	cbz	r3, 800b05a <__sflush_r+0x46>
 800b056:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b058:	1ac0      	subs	r0, r0, r3
 800b05a:	2300      	movs	r3, #0
 800b05c:	4602      	mov	r2, r0
 800b05e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b060:	6a21      	ldr	r1, [r4, #32]
 800b062:	4628      	mov	r0, r5
 800b064:	47b0      	blx	r6
 800b066:	1c43      	adds	r3, r0, #1
 800b068:	89a3      	ldrh	r3, [r4, #12]
 800b06a:	d106      	bne.n	800b07a <__sflush_r+0x66>
 800b06c:	6829      	ldr	r1, [r5, #0]
 800b06e:	291d      	cmp	r1, #29
 800b070:	d82c      	bhi.n	800b0cc <__sflush_r+0xb8>
 800b072:	4a2a      	ldr	r2, [pc, #168]	; (800b11c <__sflush_r+0x108>)
 800b074:	40ca      	lsrs	r2, r1
 800b076:	07d6      	lsls	r6, r2, #31
 800b078:	d528      	bpl.n	800b0cc <__sflush_r+0xb8>
 800b07a:	2200      	movs	r2, #0
 800b07c:	6062      	str	r2, [r4, #4]
 800b07e:	04d9      	lsls	r1, r3, #19
 800b080:	6922      	ldr	r2, [r4, #16]
 800b082:	6022      	str	r2, [r4, #0]
 800b084:	d504      	bpl.n	800b090 <__sflush_r+0x7c>
 800b086:	1c42      	adds	r2, r0, #1
 800b088:	d101      	bne.n	800b08e <__sflush_r+0x7a>
 800b08a:	682b      	ldr	r3, [r5, #0]
 800b08c:	b903      	cbnz	r3, 800b090 <__sflush_r+0x7c>
 800b08e:	6560      	str	r0, [r4, #84]	; 0x54
 800b090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b092:	602f      	str	r7, [r5, #0]
 800b094:	2900      	cmp	r1, #0
 800b096:	d0ca      	beq.n	800b02e <__sflush_r+0x1a>
 800b098:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b09c:	4299      	cmp	r1, r3
 800b09e:	d002      	beq.n	800b0a6 <__sflush_r+0x92>
 800b0a0:	4628      	mov	r0, r5
 800b0a2:	f7ff f851 	bl	800a148 <_free_r>
 800b0a6:	2000      	movs	r0, #0
 800b0a8:	6360      	str	r0, [r4, #52]	; 0x34
 800b0aa:	e7c1      	b.n	800b030 <__sflush_r+0x1c>
 800b0ac:	6a21      	ldr	r1, [r4, #32]
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	4628      	mov	r0, r5
 800b0b2:	47b0      	blx	r6
 800b0b4:	1c41      	adds	r1, r0, #1
 800b0b6:	d1c7      	bne.n	800b048 <__sflush_r+0x34>
 800b0b8:	682b      	ldr	r3, [r5, #0]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d0c4      	beq.n	800b048 <__sflush_r+0x34>
 800b0be:	2b1d      	cmp	r3, #29
 800b0c0:	d001      	beq.n	800b0c6 <__sflush_r+0xb2>
 800b0c2:	2b16      	cmp	r3, #22
 800b0c4:	d101      	bne.n	800b0ca <__sflush_r+0xb6>
 800b0c6:	602f      	str	r7, [r5, #0]
 800b0c8:	e7b1      	b.n	800b02e <__sflush_r+0x1a>
 800b0ca:	89a3      	ldrh	r3, [r4, #12]
 800b0cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0d0:	81a3      	strh	r3, [r4, #12]
 800b0d2:	e7ad      	b.n	800b030 <__sflush_r+0x1c>
 800b0d4:	690f      	ldr	r7, [r1, #16]
 800b0d6:	2f00      	cmp	r7, #0
 800b0d8:	d0a9      	beq.n	800b02e <__sflush_r+0x1a>
 800b0da:	0793      	lsls	r3, r2, #30
 800b0dc:	680e      	ldr	r6, [r1, #0]
 800b0de:	bf08      	it	eq
 800b0e0:	694b      	ldreq	r3, [r1, #20]
 800b0e2:	600f      	str	r7, [r1, #0]
 800b0e4:	bf18      	it	ne
 800b0e6:	2300      	movne	r3, #0
 800b0e8:	eba6 0807 	sub.w	r8, r6, r7
 800b0ec:	608b      	str	r3, [r1, #8]
 800b0ee:	f1b8 0f00 	cmp.w	r8, #0
 800b0f2:	dd9c      	ble.n	800b02e <__sflush_r+0x1a>
 800b0f4:	6a21      	ldr	r1, [r4, #32]
 800b0f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b0f8:	4643      	mov	r3, r8
 800b0fa:	463a      	mov	r2, r7
 800b0fc:	4628      	mov	r0, r5
 800b0fe:	47b0      	blx	r6
 800b100:	2800      	cmp	r0, #0
 800b102:	dc06      	bgt.n	800b112 <__sflush_r+0xfe>
 800b104:	89a3      	ldrh	r3, [r4, #12]
 800b106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b10a:	81a3      	strh	r3, [r4, #12]
 800b10c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b110:	e78e      	b.n	800b030 <__sflush_r+0x1c>
 800b112:	4407      	add	r7, r0
 800b114:	eba8 0800 	sub.w	r8, r8, r0
 800b118:	e7e9      	b.n	800b0ee <__sflush_r+0xda>
 800b11a:	bf00      	nop
 800b11c:	20400001 	.word	0x20400001

0800b120 <_fflush_r>:
 800b120:	b538      	push	{r3, r4, r5, lr}
 800b122:	690b      	ldr	r3, [r1, #16]
 800b124:	4605      	mov	r5, r0
 800b126:	460c      	mov	r4, r1
 800b128:	b913      	cbnz	r3, 800b130 <_fflush_r+0x10>
 800b12a:	2500      	movs	r5, #0
 800b12c:	4628      	mov	r0, r5
 800b12e:	bd38      	pop	{r3, r4, r5, pc}
 800b130:	b118      	cbz	r0, 800b13a <_fflush_r+0x1a>
 800b132:	6983      	ldr	r3, [r0, #24]
 800b134:	b90b      	cbnz	r3, 800b13a <_fflush_r+0x1a>
 800b136:	f7ff f951 	bl	800a3dc <__sinit>
 800b13a:	4b14      	ldr	r3, [pc, #80]	; (800b18c <_fflush_r+0x6c>)
 800b13c:	429c      	cmp	r4, r3
 800b13e:	d11b      	bne.n	800b178 <_fflush_r+0x58>
 800b140:	686c      	ldr	r4, [r5, #4]
 800b142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d0ef      	beq.n	800b12a <_fflush_r+0xa>
 800b14a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b14c:	07d0      	lsls	r0, r2, #31
 800b14e:	d404      	bmi.n	800b15a <_fflush_r+0x3a>
 800b150:	0599      	lsls	r1, r3, #22
 800b152:	d402      	bmi.n	800b15a <_fflush_r+0x3a>
 800b154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b156:	f7ff f9df 	bl	800a518 <__retarget_lock_acquire_recursive>
 800b15a:	4628      	mov	r0, r5
 800b15c:	4621      	mov	r1, r4
 800b15e:	f7ff ff59 	bl	800b014 <__sflush_r>
 800b162:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b164:	07da      	lsls	r2, r3, #31
 800b166:	4605      	mov	r5, r0
 800b168:	d4e0      	bmi.n	800b12c <_fflush_r+0xc>
 800b16a:	89a3      	ldrh	r3, [r4, #12]
 800b16c:	059b      	lsls	r3, r3, #22
 800b16e:	d4dd      	bmi.n	800b12c <_fflush_r+0xc>
 800b170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b172:	f7ff f9d2 	bl	800a51a <__retarget_lock_release_recursive>
 800b176:	e7d9      	b.n	800b12c <_fflush_r+0xc>
 800b178:	4b05      	ldr	r3, [pc, #20]	; (800b190 <_fflush_r+0x70>)
 800b17a:	429c      	cmp	r4, r3
 800b17c:	d101      	bne.n	800b182 <_fflush_r+0x62>
 800b17e:	68ac      	ldr	r4, [r5, #8]
 800b180:	e7df      	b.n	800b142 <_fflush_r+0x22>
 800b182:	4b04      	ldr	r3, [pc, #16]	; (800b194 <_fflush_r+0x74>)
 800b184:	429c      	cmp	r4, r3
 800b186:	bf08      	it	eq
 800b188:	68ec      	ldreq	r4, [r5, #12]
 800b18a:	e7da      	b.n	800b142 <_fflush_r+0x22>
 800b18c:	0800da08 	.word	0x0800da08
 800b190:	0800da28 	.word	0x0800da28
 800b194:	0800d9e8 	.word	0x0800d9e8

0800b198 <_lseek_r>:
 800b198:	b538      	push	{r3, r4, r5, lr}
 800b19a:	4d07      	ldr	r5, [pc, #28]	; (800b1b8 <_lseek_r+0x20>)
 800b19c:	4604      	mov	r4, r0
 800b19e:	4608      	mov	r0, r1
 800b1a0:	4611      	mov	r1, r2
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	602a      	str	r2, [r5, #0]
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	f7f6 ff9e 	bl	80020e8 <_lseek>
 800b1ac:	1c43      	adds	r3, r0, #1
 800b1ae:	d102      	bne.n	800b1b6 <_lseek_r+0x1e>
 800b1b0:	682b      	ldr	r3, [r5, #0]
 800b1b2:	b103      	cbz	r3, 800b1b6 <_lseek_r+0x1e>
 800b1b4:	6023      	str	r3, [r4, #0]
 800b1b6:	bd38      	pop	{r3, r4, r5, pc}
 800b1b8:	20002640 	.word	0x20002640

0800b1bc <__swhatbuf_r>:
 800b1bc:	b570      	push	{r4, r5, r6, lr}
 800b1be:	460e      	mov	r6, r1
 800b1c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1c4:	2900      	cmp	r1, #0
 800b1c6:	b096      	sub	sp, #88	; 0x58
 800b1c8:	4614      	mov	r4, r2
 800b1ca:	461d      	mov	r5, r3
 800b1cc:	da07      	bge.n	800b1de <__swhatbuf_r+0x22>
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	602b      	str	r3, [r5, #0]
 800b1d2:	89b3      	ldrh	r3, [r6, #12]
 800b1d4:	061a      	lsls	r2, r3, #24
 800b1d6:	d410      	bmi.n	800b1fa <__swhatbuf_r+0x3e>
 800b1d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1dc:	e00e      	b.n	800b1fc <__swhatbuf_r+0x40>
 800b1de:	466a      	mov	r2, sp
 800b1e0:	f000 f8a2 	bl	800b328 <_fstat_r>
 800b1e4:	2800      	cmp	r0, #0
 800b1e6:	dbf2      	blt.n	800b1ce <__swhatbuf_r+0x12>
 800b1e8:	9a01      	ldr	r2, [sp, #4]
 800b1ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b1ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b1f2:	425a      	negs	r2, r3
 800b1f4:	415a      	adcs	r2, r3
 800b1f6:	602a      	str	r2, [r5, #0]
 800b1f8:	e7ee      	b.n	800b1d8 <__swhatbuf_r+0x1c>
 800b1fa:	2340      	movs	r3, #64	; 0x40
 800b1fc:	2000      	movs	r0, #0
 800b1fe:	6023      	str	r3, [r4, #0]
 800b200:	b016      	add	sp, #88	; 0x58
 800b202:	bd70      	pop	{r4, r5, r6, pc}

0800b204 <__smakebuf_r>:
 800b204:	898b      	ldrh	r3, [r1, #12]
 800b206:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b208:	079d      	lsls	r5, r3, #30
 800b20a:	4606      	mov	r6, r0
 800b20c:	460c      	mov	r4, r1
 800b20e:	d507      	bpl.n	800b220 <__smakebuf_r+0x1c>
 800b210:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b214:	6023      	str	r3, [r4, #0]
 800b216:	6123      	str	r3, [r4, #16]
 800b218:	2301      	movs	r3, #1
 800b21a:	6163      	str	r3, [r4, #20]
 800b21c:	b002      	add	sp, #8
 800b21e:	bd70      	pop	{r4, r5, r6, pc}
 800b220:	ab01      	add	r3, sp, #4
 800b222:	466a      	mov	r2, sp
 800b224:	f7ff ffca 	bl	800b1bc <__swhatbuf_r>
 800b228:	9900      	ldr	r1, [sp, #0]
 800b22a:	4605      	mov	r5, r0
 800b22c:	4630      	mov	r0, r6
 800b22e:	f7fe ffdb 	bl	800a1e8 <_malloc_r>
 800b232:	b948      	cbnz	r0, 800b248 <__smakebuf_r+0x44>
 800b234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b238:	059a      	lsls	r2, r3, #22
 800b23a:	d4ef      	bmi.n	800b21c <__smakebuf_r+0x18>
 800b23c:	f023 0303 	bic.w	r3, r3, #3
 800b240:	f043 0302 	orr.w	r3, r3, #2
 800b244:	81a3      	strh	r3, [r4, #12]
 800b246:	e7e3      	b.n	800b210 <__smakebuf_r+0xc>
 800b248:	4b0d      	ldr	r3, [pc, #52]	; (800b280 <__smakebuf_r+0x7c>)
 800b24a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b24c:	89a3      	ldrh	r3, [r4, #12]
 800b24e:	6020      	str	r0, [r4, #0]
 800b250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b254:	81a3      	strh	r3, [r4, #12]
 800b256:	9b00      	ldr	r3, [sp, #0]
 800b258:	6163      	str	r3, [r4, #20]
 800b25a:	9b01      	ldr	r3, [sp, #4]
 800b25c:	6120      	str	r0, [r4, #16]
 800b25e:	b15b      	cbz	r3, 800b278 <__smakebuf_r+0x74>
 800b260:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b264:	4630      	mov	r0, r6
 800b266:	f000 f871 	bl	800b34c <_isatty_r>
 800b26a:	b128      	cbz	r0, 800b278 <__smakebuf_r+0x74>
 800b26c:	89a3      	ldrh	r3, [r4, #12]
 800b26e:	f023 0303 	bic.w	r3, r3, #3
 800b272:	f043 0301 	orr.w	r3, r3, #1
 800b276:	81a3      	strh	r3, [r4, #12]
 800b278:	89a0      	ldrh	r0, [r4, #12]
 800b27a:	4305      	orrs	r5, r0
 800b27c:	81a5      	strh	r5, [r4, #12]
 800b27e:	e7cd      	b.n	800b21c <__smakebuf_r+0x18>
 800b280:	0800a375 	.word	0x0800a375

0800b284 <memmove>:
 800b284:	4288      	cmp	r0, r1
 800b286:	b510      	push	{r4, lr}
 800b288:	eb01 0402 	add.w	r4, r1, r2
 800b28c:	d902      	bls.n	800b294 <memmove+0x10>
 800b28e:	4284      	cmp	r4, r0
 800b290:	4623      	mov	r3, r4
 800b292:	d807      	bhi.n	800b2a4 <memmove+0x20>
 800b294:	1e43      	subs	r3, r0, #1
 800b296:	42a1      	cmp	r1, r4
 800b298:	d008      	beq.n	800b2ac <memmove+0x28>
 800b29a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b29e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2a2:	e7f8      	b.n	800b296 <memmove+0x12>
 800b2a4:	4402      	add	r2, r0
 800b2a6:	4601      	mov	r1, r0
 800b2a8:	428a      	cmp	r2, r1
 800b2aa:	d100      	bne.n	800b2ae <memmove+0x2a>
 800b2ac:	bd10      	pop	{r4, pc}
 800b2ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2b6:	e7f7      	b.n	800b2a8 <memmove+0x24>

0800b2b8 <_realloc_r>:
 800b2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ba:	4607      	mov	r7, r0
 800b2bc:	4614      	mov	r4, r2
 800b2be:	460e      	mov	r6, r1
 800b2c0:	b921      	cbnz	r1, 800b2cc <_realloc_r+0x14>
 800b2c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b2c6:	4611      	mov	r1, r2
 800b2c8:	f7fe bf8e 	b.w	800a1e8 <_malloc_r>
 800b2cc:	b922      	cbnz	r2, 800b2d8 <_realloc_r+0x20>
 800b2ce:	f7fe ff3b 	bl	800a148 <_free_r>
 800b2d2:	4625      	mov	r5, r4
 800b2d4:	4628      	mov	r0, r5
 800b2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2d8:	f000 f848 	bl	800b36c <_malloc_usable_size_r>
 800b2dc:	42a0      	cmp	r0, r4
 800b2de:	d20f      	bcs.n	800b300 <_realloc_r+0x48>
 800b2e0:	4621      	mov	r1, r4
 800b2e2:	4638      	mov	r0, r7
 800b2e4:	f7fe ff80 	bl	800a1e8 <_malloc_r>
 800b2e8:	4605      	mov	r5, r0
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	d0f2      	beq.n	800b2d4 <_realloc_r+0x1c>
 800b2ee:	4631      	mov	r1, r6
 800b2f0:	4622      	mov	r2, r4
 800b2f2:	f7fe ff13 	bl	800a11c <memcpy>
 800b2f6:	4631      	mov	r1, r6
 800b2f8:	4638      	mov	r0, r7
 800b2fa:	f7fe ff25 	bl	800a148 <_free_r>
 800b2fe:	e7e9      	b.n	800b2d4 <_realloc_r+0x1c>
 800b300:	4635      	mov	r5, r6
 800b302:	e7e7      	b.n	800b2d4 <_realloc_r+0x1c>

0800b304 <_read_r>:
 800b304:	b538      	push	{r3, r4, r5, lr}
 800b306:	4d07      	ldr	r5, [pc, #28]	; (800b324 <_read_r+0x20>)
 800b308:	4604      	mov	r4, r0
 800b30a:	4608      	mov	r0, r1
 800b30c:	4611      	mov	r1, r2
 800b30e:	2200      	movs	r2, #0
 800b310:	602a      	str	r2, [r5, #0]
 800b312:	461a      	mov	r2, r3
 800b314:	f7f6 fe88 	bl	8002028 <_read>
 800b318:	1c43      	adds	r3, r0, #1
 800b31a:	d102      	bne.n	800b322 <_read_r+0x1e>
 800b31c:	682b      	ldr	r3, [r5, #0]
 800b31e:	b103      	cbz	r3, 800b322 <_read_r+0x1e>
 800b320:	6023      	str	r3, [r4, #0]
 800b322:	bd38      	pop	{r3, r4, r5, pc}
 800b324:	20002640 	.word	0x20002640

0800b328 <_fstat_r>:
 800b328:	b538      	push	{r3, r4, r5, lr}
 800b32a:	4d07      	ldr	r5, [pc, #28]	; (800b348 <_fstat_r+0x20>)
 800b32c:	2300      	movs	r3, #0
 800b32e:	4604      	mov	r4, r0
 800b330:	4608      	mov	r0, r1
 800b332:	4611      	mov	r1, r2
 800b334:	602b      	str	r3, [r5, #0]
 800b336:	f7f6 febc 	bl	80020b2 <_fstat>
 800b33a:	1c43      	adds	r3, r0, #1
 800b33c:	d102      	bne.n	800b344 <_fstat_r+0x1c>
 800b33e:	682b      	ldr	r3, [r5, #0]
 800b340:	b103      	cbz	r3, 800b344 <_fstat_r+0x1c>
 800b342:	6023      	str	r3, [r4, #0]
 800b344:	bd38      	pop	{r3, r4, r5, pc}
 800b346:	bf00      	nop
 800b348:	20002640 	.word	0x20002640

0800b34c <_isatty_r>:
 800b34c:	b538      	push	{r3, r4, r5, lr}
 800b34e:	4d06      	ldr	r5, [pc, #24]	; (800b368 <_isatty_r+0x1c>)
 800b350:	2300      	movs	r3, #0
 800b352:	4604      	mov	r4, r0
 800b354:	4608      	mov	r0, r1
 800b356:	602b      	str	r3, [r5, #0]
 800b358:	f7f6 febb 	bl	80020d2 <_isatty>
 800b35c:	1c43      	adds	r3, r0, #1
 800b35e:	d102      	bne.n	800b366 <_isatty_r+0x1a>
 800b360:	682b      	ldr	r3, [r5, #0]
 800b362:	b103      	cbz	r3, 800b366 <_isatty_r+0x1a>
 800b364:	6023      	str	r3, [r4, #0]
 800b366:	bd38      	pop	{r3, r4, r5, pc}
 800b368:	20002640 	.word	0x20002640

0800b36c <_malloc_usable_size_r>:
 800b36c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b370:	1f18      	subs	r0, r3, #4
 800b372:	2b00      	cmp	r3, #0
 800b374:	bfbc      	itt	lt
 800b376:	580b      	ldrlt	r3, [r1, r0]
 800b378:	18c0      	addlt	r0, r0, r3
 800b37a:	4770      	bx	lr
 800b37c:	0000      	movs	r0, r0
	...

0800b380 <tan>:
 800b380:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b382:	ec53 2b10 	vmov	r2, r3, d0
 800b386:	4814      	ldr	r0, [pc, #80]	; (800b3d8 <tan+0x58>)
 800b388:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b38c:	4281      	cmp	r1, r0
 800b38e:	dc05      	bgt.n	800b39c <tan+0x1c>
 800b390:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 800b3d0 <tan+0x50>
 800b394:	2001      	movs	r0, #1
 800b396:	f000 fd6f 	bl	800be78 <__kernel_tan>
 800b39a:	e009      	b.n	800b3b0 <tan+0x30>
 800b39c:	480f      	ldr	r0, [pc, #60]	; (800b3dc <tan+0x5c>)
 800b39e:	4281      	cmp	r1, r0
 800b3a0:	dd09      	ble.n	800b3b6 <tan+0x36>
 800b3a2:	ee10 0a10 	vmov	r0, s0
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	f7f4 ff6e 	bl	8000288 <__aeabi_dsub>
 800b3ac:	ec41 0b10 	vmov	d0, r0, r1
 800b3b0:	b005      	add	sp, #20
 800b3b2:	f85d fb04 	ldr.w	pc, [sp], #4
 800b3b6:	4668      	mov	r0, sp
 800b3b8:	f000 f812 	bl	800b3e0 <__ieee754_rem_pio2>
 800b3bc:	0040      	lsls	r0, r0, #1
 800b3be:	f000 0002 	and.w	r0, r0, #2
 800b3c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b3c6:	ed9d 0b00 	vldr	d0, [sp]
 800b3ca:	f1c0 0001 	rsb	r0, r0, #1
 800b3ce:	e7e2      	b.n	800b396 <tan+0x16>
	...
 800b3d8:	3fe921fb 	.word	0x3fe921fb
 800b3dc:	7fefffff 	.word	0x7fefffff

0800b3e0 <__ieee754_rem_pio2>:
 800b3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e4:	ed2d 8b02 	vpush	{d8}
 800b3e8:	ec55 4b10 	vmov	r4, r5, d0
 800b3ec:	4bca      	ldr	r3, [pc, #808]	; (800b718 <__ieee754_rem_pio2+0x338>)
 800b3ee:	b08b      	sub	sp, #44	; 0x2c
 800b3f0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b3f4:	4598      	cmp	r8, r3
 800b3f6:	4682      	mov	sl, r0
 800b3f8:	9502      	str	r5, [sp, #8]
 800b3fa:	dc08      	bgt.n	800b40e <__ieee754_rem_pio2+0x2e>
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	2300      	movs	r3, #0
 800b400:	ed80 0b00 	vstr	d0, [r0]
 800b404:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b408:	f04f 0b00 	mov.w	fp, #0
 800b40c:	e028      	b.n	800b460 <__ieee754_rem_pio2+0x80>
 800b40e:	4bc3      	ldr	r3, [pc, #780]	; (800b71c <__ieee754_rem_pio2+0x33c>)
 800b410:	4598      	cmp	r8, r3
 800b412:	dc78      	bgt.n	800b506 <__ieee754_rem_pio2+0x126>
 800b414:	9b02      	ldr	r3, [sp, #8]
 800b416:	4ec2      	ldr	r6, [pc, #776]	; (800b720 <__ieee754_rem_pio2+0x340>)
 800b418:	2b00      	cmp	r3, #0
 800b41a:	ee10 0a10 	vmov	r0, s0
 800b41e:	a3b0      	add	r3, pc, #704	; (adr r3, 800b6e0 <__ieee754_rem_pio2+0x300>)
 800b420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b424:	4629      	mov	r1, r5
 800b426:	dd39      	ble.n	800b49c <__ieee754_rem_pio2+0xbc>
 800b428:	f7f4 ff2e 	bl	8000288 <__aeabi_dsub>
 800b42c:	45b0      	cmp	r8, r6
 800b42e:	4604      	mov	r4, r0
 800b430:	460d      	mov	r5, r1
 800b432:	d01b      	beq.n	800b46c <__ieee754_rem_pio2+0x8c>
 800b434:	a3ac      	add	r3, pc, #688	; (adr r3, 800b6e8 <__ieee754_rem_pio2+0x308>)
 800b436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43a:	f7f4 ff25 	bl	8000288 <__aeabi_dsub>
 800b43e:	4602      	mov	r2, r0
 800b440:	460b      	mov	r3, r1
 800b442:	e9ca 2300 	strd	r2, r3, [sl]
 800b446:	4620      	mov	r0, r4
 800b448:	4629      	mov	r1, r5
 800b44a:	f7f4 ff1d 	bl	8000288 <__aeabi_dsub>
 800b44e:	a3a6      	add	r3, pc, #664	; (adr r3, 800b6e8 <__ieee754_rem_pio2+0x308>)
 800b450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b454:	f7f4 ff18 	bl	8000288 <__aeabi_dsub>
 800b458:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b45c:	f04f 0b01 	mov.w	fp, #1
 800b460:	4658      	mov	r0, fp
 800b462:	b00b      	add	sp, #44	; 0x2c
 800b464:	ecbd 8b02 	vpop	{d8}
 800b468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b46c:	a3a0      	add	r3, pc, #640	; (adr r3, 800b6f0 <__ieee754_rem_pio2+0x310>)
 800b46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b472:	f7f4 ff09 	bl	8000288 <__aeabi_dsub>
 800b476:	a3a0      	add	r3, pc, #640	; (adr r3, 800b6f8 <__ieee754_rem_pio2+0x318>)
 800b478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47c:	4604      	mov	r4, r0
 800b47e:	460d      	mov	r5, r1
 800b480:	f7f4 ff02 	bl	8000288 <__aeabi_dsub>
 800b484:	4602      	mov	r2, r0
 800b486:	460b      	mov	r3, r1
 800b488:	e9ca 2300 	strd	r2, r3, [sl]
 800b48c:	4620      	mov	r0, r4
 800b48e:	4629      	mov	r1, r5
 800b490:	f7f4 fefa 	bl	8000288 <__aeabi_dsub>
 800b494:	a398      	add	r3, pc, #608	; (adr r3, 800b6f8 <__ieee754_rem_pio2+0x318>)
 800b496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49a:	e7db      	b.n	800b454 <__ieee754_rem_pio2+0x74>
 800b49c:	f7f4 fef6 	bl	800028c <__adddf3>
 800b4a0:	45b0      	cmp	r8, r6
 800b4a2:	4604      	mov	r4, r0
 800b4a4:	460d      	mov	r5, r1
 800b4a6:	d016      	beq.n	800b4d6 <__ieee754_rem_pio2+0xf6>
 800b4a8:	a38f      	add	r3, pc, #572	; (adr r3, 800b6e8 <__ieee754_rem_pio2+0x308>)
 800b4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ae:	f7f4 feed 	bl	800028c <__adddf3>
 800b4b2:	4602      	mov	r2, r0
 800b4b4:	460b      	mov	r3, r1
 800b4b6:	e9ca 2300 	strd	r2, r3, [sl]
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	4629      	mov	r1, r5
 800b4be:	f7f4 fee3 	bl	8000288 <__aeabi_dsub>
 800b4c2:	a389      	add	r3, pc, #548	; (adr r3, 800b6e8 <__ieee754_rem_pio2+0x308>)
 800b4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c8:	f7f4 fee0 	bl	800028c <__adddf3>
 800b4cc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800b4d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b4d4:	e7c4      	b.n	800b460 <__ieee754_rem_pio2+0x80>
 800b4d6:	a386      	add	r3, pc, #536	; (adr r3, 800b6f0 <__ieee754_rem_pio2+0x310>)
 800b4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4dc:	f7f4 fed6 	bl	800028c <__adddf3>
 800b4e0:	a385      	add	r3, pc, #532	; (adr r3, 800b6f8 <__ieee754_rem_pio2+0x318>)
 800b4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e6:	4604      	mov	r4, r0
 800b4e8:	460d      	mov	r5, r1
 800b4ea:	f7f4 fecf 	bl	800028c <__adddf3>
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	e9ca 2300 	strd	r2, r3, [sl]
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	4629      	mov	r1, r5
 800b4fa:	f7f4 fec5 	bl	8000288 <__aeabi_dsub>
 800b4fe:	a37e      	add	r3, pc, #504	; (adr r3, 800b6f8 <__ieee754_rem_pio2+0x318>)
 800b500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b504:	e7e0      	b.n	800b4c8 <__ieee754_rem_pio2+0xe8>
 800b506:	4b87      	ldr	r3, [pc, #540]	; (800b724 <__ieee754_rem_pio2+0x344>)
 800b508:	4598      	cmp	r8, r3
 800b50a:	f300 80d9 	bgt.w	800b6c0 <__ieee754_rem_pio2+0x2e0>
 800b50e:	f000 fe87 	bl	800c220 <fabs>
 800b512:	ec55 4b10 	vmov	r4, r5, d0
 800b516:	ee10 0a10 	vmov	r0, s0
 800b51a:	a379      	add	r3, pc, #484	; (adr r3, 800b700 <__ieee754_rem_pio2+0x320>)
 800b51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b520:	4629      	mov	r1, r5
 800b522:	f7f5 f869 	bl	80005f8 <__aeabi_dmul>
 800b526:	4b80      	ldr	r3, [pc, #512]	; (800b728 <__ieee754_rem_pio2+0x348>)
 800b528:	2200      	movs	r2, #0
 800b52a:	f7f4 feaf 	bl	800028c <__adddf3>
 800b52e:	f7f5 fafd 	bl	8000b2c <__aeabi_d2iz>
 800b532:	4683      	mov	fp, r0
 800b534:	f7f4 fff6 	bl	8000524 <__aeabi_i2d>
 800b538:	4602      	mov	r2, r0
 800b53a:	460b      	mov	r3, r1
 800b53c:	ec43 2b18 	vmov	d8, r2, r3
 800b540:	a367      	add	r3, pc, #412	; (adr r3, 800b6e0 <__ieee754_rem_pio2+0x300>)
 800b542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b546:	f7f5 f857 	bl	80005f8 <__aeabi_dmul>
 800b54a:	4602      	mov	r2, r0
 800b54c:	460b      	mov	r3, r1
 800b54e:	4620      	mov	r0, r4
 800b550:	4629      	mov	r1, r5
 800b552:	f7f4 fe99 	bl	8000288 <__aeabi_dsub>
 800b556:	a364      	add	r3, pc, #400	; (adr r3, 800b6e8 <__ieee754_rem_pio2+0x308>)
 800b558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55c:	4606      	mov	r6, r0
 800b55e:	460f      	mov	r7, r1
 800b560:	ec51 0b18 	vmov	r0, r1, d8
 800b564:	f7f5 f848 	bl	80005f8 <__aeabi_dmul>
 800b568:	f1bb 0f1f 	cmp.w	fp, #31
 800b56c:	4604      	mov	r4, r0
 800b56e:	460d      	mov	r5, r1
 800b570:	dc0d      	bgt.n	800b58e <__ieee754_rem_pio2+0x1ae>
 800b572:	4b6e      	ldr	r3, [pc, #440]	; (800b72c <__ieee754_rem_pio2+0x34c>)
 800b574:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800b578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b57c:	4543      	cmp	r3, r8
 800b57e:	d006      	beq.n	800b58e <__ieee754_rem_pio2+0x1ae>
 800b580:	4622      	mov	r2, r4
 800b582:	462b      	mov	r3, r5
 800b584:	4630      	mov	r0, r6
 800b586:	4639      	mov	r1, r7
 800b588:	f7f4 fe7e 	bl	8000288 <__aeabi_dsub>
 800b58c:	e00f      	b.n	800b5ae <__ieee754_rem_pio2+0x1ce>
 800b58e:	462b      	mov	r3, r5
 800b590:	4622      	mov	r2, r4
 800b592:	4630      	mov	r0, r6
 800b594:	4639      	mov	r1, r7
 800b596:	f7f4 fe77 	bl	8000288 <__aeabi_dsub>
 800b59a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b59e:	9303      	str	r3, [sp, #12]
 800b5a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b5a4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b5a8:	f1b8 0f10 	cmp.w	r8, #16
 800b5ac:	dc02      	bgt.n	800b5b4 <__ieee754_rem_pio2+0x1d4>
 800b5ae:	e9ca 0100 	strd	r0, r1, [sl]
 800b5b2:	e039      	b.n	800b628 <__ieee754_rem_pio2+0x248>
 800b5b4:	a34e      	add	r3, pc, #312	; (adr r3, 800b6f0 <__ieee754_rem_pio2+0x310>)
 800b5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ba:	ec51 0b18 	vmov	r0, r1, d8
 800b5be:	f7f5 f81b 	bl	80005f8 <__aeabi_dmul>
 800b5c2:	4604      	mov	r4, r0
 800b5c4:	460d      	mov	r5, r1
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	4630      	mov	r0, r6
 800b5cc:	4639      	mov	r1, r7
 800b5ce:	f7f4 fe5b 	bl	8000288 <__aeabi_dsub>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	4680      	mov	r8, r0
 800b5d8:	4689      	mov	r9, r1
 800b5da:	4630      	mov	r0, r6
 800b5dc:	4639      	mov	r1, r7
 800b5de:	f7f4 fe53 	bl	8000288 <__aeabi_dsub>
 800b5e2:	4622      	mov	r2, r4
 800b5e4:	462b      	mov	r3, r5
 800b5e6:	f7f4 fe4f 	bl	8000288 <__aeabi_dsub>
 800b5ea:	a343      	add	r3, pc, #268	; (adr r3, 800b6f8 <__ieee754_rem_pio2+0x318>)
 800b5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	460d      	mov	r5, r1
 800b5f4:	ec51 0b18 	vmov	r0, r1, d8
 800b5f8:	f7f4 fffe 	bl	80005f8 <__aeabi_dmul>
 800b5fc:	4622      	mov	r2, r4
 800b5fe:	462b      	mov	r3, r5
 800b600:	f7f4 fe42 	bl	8000288 <__aeabi_dsub>
 800b604:	4602      	mov	r2, r0
 800b606:	460b      	mov	r3, r1
 800b608:	4604      	mov	r4, r0
 800b60a:	460d      	mov	r5, r1
 800b60c:	4640      	mov	r0, r8
 800b60e:	4649      	mov	r1, r9
 800b610:	f7f4 fe3a 	bl	8000288 <__aeabi_dsub>
 800b614:	9a03      	ldr	r2, [sp, #12]
 800b616:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b61a:	1ad3      	subs	r3, r2, r3
 800b61c:	2b31      	cmp	r3, #49	; 0x31
 800b61e:	dc24      	bgt.n	800b66a <__ieee754_rem_pio2+0x28a>
 800b620:	e9ca 0100 	strd	r0, r1, [sl]
 800b624:	4646      	mov	r6, r8
 800b626:	464f      	mov	r7, r9
 800b628:	e9da 8900 	ldrd	r8, r9, [sl]
 800b62c:	4630      	mov	r0, r6
 800b62e:	4642      	mov	r2, r8
 800b630:	464b      	mov	r3, r9
 800b632:	4639      	mov	r1, r7
 800b634:	f7f4 fe28 	bl	8000288 <__aeabi_dsub>
 800b638:	462b      	mov	r3, r5
 800b63a:	4622      	mov	r2, r4
 800b63c:	f7f4 fe24 	bl	8000288 <__aeabi_dsub>
 800b640:	9b02      	ldr	r3, [sp, #8]
 800b642:	2b00      	cmp	r3, #0
 800b644:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b648:	f6bf af0a 	bge.w	800b460 <__ieee754_rem_pio2+0x80>
 800b64c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b650:	f8ca 3004 	str.w	r3, [sl, #4]
 800b654:	f8ca 8000 	str.w	r8, [sl]
 800b658:	f8ca 0008 	str.w	r0, [sl, #8]
 800b65c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b660:	f8ca 300c 	str.w	r3, [sl, #12]
 800b664:	f1cb 0b00 	rsb	fp, fp, #0
 800b668:	e6fa      	b.n	800b460 <__ieee754_rem_pio2+0x80>
 800b66a:	a327      	add	r3, pc, #156	; (adr r3, 800b708 <__ieee754_rem_pio2+0x328>)
 800b66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b670:	ec51 0b18 	vmov	r0, r1, d8
 800b674:	f7f4 ffc0 	bl	80005f8 <__aeabi_dmul>
 800b678:	4604      	mov	r4, r0
 800b67a:	460d      	mov	r5, r1
 800b67c:	4602      	mov	r2, r0
 800b67e:	460b      	mov	r3, r1
 800b680:	4640      	mov	r0, r8
 800b682:	4649      	mov	r1, r9
 800b684:	f7f4 fe00 	bl	8000288 <__aeabi_dsub>
 800b688:	4602      	mov	r2, r0
 800b68a:	460b      	mov	r3, r1
 800b68c:	4606      	mov	r6, r0
 800b68e:	460f      	mov	r7, r1
 800b690:	4640      	mov	r0, r8
 800b692:	4649      	mov	r1, r9
 800b694:	f7f4 fdf8 	bl	8000288 <__aeabi_dsub>
 800b698:	4622      	mov	r2, r4
 800b69a:	462b      	mov	r3, r5
 800b69c:	f7f4 fdf4 	bl	8000288 <__aeabi_dsub>
 800b6a0:	a31b      	add	r3, pc, #108	; (adr r3, 800b710 <__ieee754_rem_pio2+0x330>)
 800b6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a6:	4604      	mov	r4, r0
 800b6a8:	460d      	mov	r5, r1
 800b6aa:	ec51 0b18 	vmov	r0, r1, d8
 800b6ae:	f7f4 ffa3 	bl	80005f8 <__aeabi_dmul>
 800b6b2:	4622      	mov	r2, r4
 800b6b4:	462b      	mov	r3, r5
 800b6b6:	f7f4 fde7 	bl	8000288 <__aeabi_dsub>
 800b6ba:	4604      	mov	r4, r0
 800b6bc:	460d      	mov	r5, r1
 800b6be:	e75f      	b.n	800b580 <__ieee754_rem_pio2+0x1a0>
 800b6c0:	4b1b      	ldr	r3, [pc, #108]	; (800b730 <__ieee754_rem_pio2+0x350>)
 800b6c2:	4598      	cmp	r8, r3
 800b6c4:	dd36      	ble.n	800b734 <__ieee754_rem_pio2+0x354>
 800b6c6:	ee10 2a10 	vmov	r2, s0
 800b6ca:	462b      	mov	r3, r5
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	4629      	mov	r1, r5
 800b6d0:	f7f4 fdda 	bl	8000288 <__aeabi_dsub>
 800b6d4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b6d8:	e9ca 0100 	strd	r0, r1, [sl]
 800b6dc:	e694      	b.n	800b408 <__ieee754_rem_pio2+0x28>
 800b6de:	bf00      	nop
 800b6e0:	54400000 	.word	0x54400000
 800b6e4:	3ff921fb 	.word	0x3ff921fb
 800b6e8:	1a626331 	.word	0x1a626331
 800b6ec:	3dd0b461 	.word	0x3dd0b461
 800b6f0:	1a600000 	.word	0x1a600000
 800b6f4:	3dd0b461 	.word	0x3dd0b461
 800b6f8:	2e037073 	.word	0x2e037073
 800b6fc:	3ba3198a 	.word	0x3ba3198a
 800b700:	6dc9c883 	.word	0x6dc9c883
 800b704:	3fe45f30 	.word	0x3fe45f30
 800b708:	2e000000 	.word	0x2e000000
 800b70c:	3ba3198a 	.word	0x3ba3198a
 800b710:	252049c1 	.word	0x252049c1
 800b714:	397b839a 	.word	0x397b839a
 800b718:	3fe921fb 	.word	0x3fe921fb
 800b71c:	4002d97b 	.word	0x4002d97b
 800b720:	3ff921fb 	.word	0x3ff921fb
 800b724:	413921fb 	.word	0x413921fb
 800b728:	3fe00000 	.word	0x3fe00000
 800b72c:	0800da7c 	.word	0x0800da7c
 800b730:	7fefffff 	.word	0x7fefffff
 800b734:	ea4f 5428 	mov.w	r4, r8, asr #20
 800b738:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800b73c:	ee10 0a10 	vmov	r0, s0
 800b740:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800b744:	ee10 6a10 	vmov	r6, s0
 800b748:	460f      	mov	r7, r1
 800b74a:	f7f5 f9ef 	bl	8000b2c <__aeabi_d2iz>
 800b74e:	f7f4 fee9 	bl	8000524 <__aeabi_i2d>
 800b752:	4602      	mov	r2, r0
 800b754:	460b      	mov	r3, r1
 800b756:	4630      	mov	r0, r6
 800b758:	4639      	mov	r1, r7
 800b75a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b75e:	f7f4 fd93 	bl	8000288 <__aeabi_dsub>
 800b762:	4b22      	ldr	r3, [pc, #136]	; (800b7ec <__ieee754_rem_pio2+0x40c>)
 800b764:	2200      	movs	r2, #0
 800b766:	f7f4 ff47 	bl	80005f8 <__aeabi_dmul>
 800b76a:	460f      	mov	r7, r1
 800b76c:	4606      	mov	r6, r0
 800b76e:	f7f5 f9dd 	bl	8000b2c <__aeabi_d2iz>
 800b772:	f7f4 fed7 	bl	8000524 <__aeabi_i2d>
 800b776:	4602      	mov	r2, r0
 800b778:	460b      	mov	r3, r1
 800b77a:	4630      	mov	r0, r6
 800b77c:	4639      	mov	r1, r7
 800b77e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b782:	f7f4 fd81 	bl	8000288 <__aeabi_dsub>
 800b786:	4b19      	ldr	r3, [pc, #100]	; (800b7ec <__ieee754_rem_pio2+0x40c>)
 800b788:	2200      	movs	r2, #0
 800b78a:	f7f4 ff35 	bl	80005f8 <__aeabi_dmul>
 800b78e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b792:	ad04      	add	r5, sp, #16
 800b794:	f04f 0803 	mov.w	r8, #3
 800b798:	46a9      	mov	r9, r5
 800b79a:	2600      	movs	r6, #0
 800b79c:	2700      	movs	r7, #0
 800b79e:	4632      	mov	r2, r6
 800b7a0:	463b      	mov	r3, r7
 800b7a2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800b7a6:	46c3      	mov	fp, r8
 800b7a8:	3d08      	subs	r5, #8
 800b7aa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b7ae:	f7f5 f98b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7b2:	2800      	cmp	r0, #0
 800b7b4:	d1f3      	bne.n	800b79e <__ieee754_rem_pio2+0x3be>
 800b7b6:	4b0e      	ldr	r3, [pc, #56]	; (800b7f0 <__ieee754_rem_pio2+0x410>)
 800b7b8:	9301      	str	r3, [sp, #4]
 800b7ba:	2302      	movs	r3, #2
 800b7bc:	9300      	str	r3, [sp, #0]
 800b7be:	4622      	mov	r2, r4
 800b7c0:	465b      	mov	r3, fp
 800b7c2:	4651      	mov	r1, sl
 800b7c4:	4648      	mov	r0, r9
 800b7c6:	f000 f817 	bl	800b7f8 <__kernel_rem_pio2>
 800b7ca:	9b02      	ldr	r3, [sp, #8]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	4683      	mov	fp, r0
 800b7d0:	f6bf ae46 	bge.w	800b460 <__ieee754_rem_pio2+0x80>
 800b7d4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b7d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b7dc:	f8ca 3004 	str.w	r3, [sl, #4]
 800b7e0:	f8da 300c 	ldr.w	r3, [sl, #12]
 800b7e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b7e8:	e73a      	b.n	800b660 <__ieee754_rem_pio2+0x280>
 800b7ea:	bf00      	nop
 800b7ec:	41700000 	.word	0x41700000
 800b7f0:	0800dafc 	.word	0x0800dafc
 800b7f4:	00000000 	.word	0x00000000

0800b7f8 <__kernel_rem_pio2>:
 800b7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7fc:	ed2d 8b02 	vpush	{d8}
 800b800:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b804:	f112 0f14 	cmn.w	r2, #20
 800b808:	9308      	str	r3, [sp, #32]
 800b80a:	9101      	str	r1, [sp, #4]
 800b80c:	4bc6      	ldr	r3, [pc, #792]	; (800bb28 <__kernel_rem_pio2+0x330>)
 800b80e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800b810:	9009      	str	r0, [sp, #36]	; 0x24
 800b812:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b816:	9304      	str	r3, [sp, #16]
 800b818:	9b08      	ldr	r3, [sp, #32]
 800b81a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b81e:	bfa8      	it	ge
 800b820:	1ed4      	subge	r4, r2, #3
 800b822:	9306      	str	r3, [sp, #24]
 800b824:	bfb2      	itee	lt
 800b826:	2400      	movlt	r4, #0
 800b828:	2318      	movge	r3, #24
 800b82a:	fb94 f4f3 	sdivge	r4, r4, r3
 800b82e:	f06f 0317 	mvn.w	r3, #23
 800b832:	fb04 3303 	mla	r3, r4, r3, r3
 800b836:	eb03 0a02 	add.w	sl, r3, r2
 800b83a:	9b04      	ldr	r3, [sp, #16]
 800b83c:	9a06      	ldr	r2, [sp, #24]
 800b83e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800bb18 <__kernel_rem_pio2+0x320>
 800b842:	eb03 0802 	add.w	r8, r3, r2
 800b846:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b848:	1aa7      	subs	r7, r4, r2
 800b84a:	ae20      	add	r6, sp, #128	; 0x80
 800b84c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b850:	2500      	movs	r5, #0
 800b852:	4545      	cmp	r5, r8
 800b854:	dd18      	ble.n	800b888 <__kernel_rem_pio2+0x90>
 800b856:	9b08      	ldr	r3, [sp, #32]
 800b858:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b85c:	aa20      	add	r2, sp, #128	; 0x80
 800b85e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800bb18 <__kernel_rem_pio2+0x320>
 800b862:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b866:	f1c3 0301 	rsb	r3, r3, #1
 800b86a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800b86e:	9307      	str	r3, [sp, #28]
 800b870:	9b07      	ldr	r3, [sp, #28]
 800b872:	9a04      	ldr	r2, [sp, #16]
 800b874:	4443      	add	r3, r8
 800b876:	429a      	cmp	r2, r3
 800b878:	db2f      	blt.n	800b8da <__kernel_rem_pio2+0xe2>
 800b87a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b87e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b882:	462f      	mov	r7, r5
 800b884:	2600      	movs	r6, #0
 800b886:	e01b      	b.n	800b8c0 <__kernel_rem_pio2+0xc8>
 800b888:	42ef      	cmn	r7, r5
 800b88a:	d407      	bmi.n	800b89c <__kernel_rem_pio2+0xa4>
 800b88c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b890:	f7f4 fe48 	bl	8000524 <__aeabi_i2d>
 800b894:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b898:	3501      	adds	r5, #1
 800b89a:	e7da      	b.n	800b852 <__kernel_rem_pio2+0x5a>
 800b89c:	ec51 0b18 	vmov	r0, r1, d8
 800b8a0:	e7f8      	b.n	800b894 <__kernel_rem_pio2+0x9c>
 800b8a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8a6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b8aa:	f7f4 fea5 	bl	80005f8 <__aeabi_dmul>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8b6:	f7f4 fce9 	bl	800028c <__adddf3>
 800b8ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8be:	3601      	adds	r6, #1
 800b8c0:	9b06      	ldr	r3, [sp, #24]
 800b8c2:	429e      	cmp	r6, r3
 800b8c4:	f1a7 0708 	sub.w	r7, r7, #8
 800b8c8:	ddeb      	ble.n	800b8a2 <__kernel_rem_pio2+0xaa>
 800b8ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b8ce:	3508      	adds	r5, #8
 800b8d0:	ecab 7b02 	vstmia	fp!, {d7}
 800b8d4:	f108 0801 	add.w	r8, r8, #1
 800b8d8:	e7ca      	b.n	800b870 <__kernel_rem_pio2+0x78>
 800b8da:	9b04      	ldr	r3, [sp, #16]
 800b8dc:	aa0c      	add	r2, sp, #48	; 0x30
 800b8de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b8e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8e4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b8e6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b8ea:	9c04      	ldr	r4, [sp, #16]
 800b8ec:	930a      	str	r3, [sp, #40]	; 0x28
 800b8ee:	ab98      	add	r3, sp, #608	; 0x260
 800b8f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b8f4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b8f8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800b8fc:	f8cd b008 	str.w	fp, [sp, #8]
 800b900:	4625      	mov	r5, r4
 800b902:	2d00      	cmp	r5, #0
 800b904:	dc78      	bgt.n	800b9f8 <__kernel_rem_pio2+0x200>
 800b906:	ec47 6b10 	vmov	d0, r6, r7
 800b90a:	4650      	mov	r0, sl
 800b90c:	f000 fd14 	bl	800c338 <scalbn>
 800b910:	ec57 6b10 	vmov	r6, r7, d0
 800b914:	2200      	movs	r2, #0
 800b916:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b91a:	ee10 0a10 	vmov	r0, s0
 800b91e:	4639      	mov	r1, r7
 800b920:	f7f4 fe6a 	bl	80005f8 <__aeabi_dmul>
 800b924:	ec41 0b10 	vmov	d0, r0, r1
 800b928:	f000 fc86 	bl	800c238 <floor>
 800b92c:	4b7f      	ldr	r3, [pc, #508]	; (800bb2c <__kernel_rem_pio2+0x334>)
 800b92e:	ec51 0b10 	vmov	r0, r1, d0
 800b932:	2200      	movs	r2, #0
 800b934:	f7f4 fe60 	bl	80005f8 <__aeabi_dmul>
 800b938:	4602      	mov	r2, r0
 800b93a:	460b      	mov	r3, r1
 800b93c:	4630      	mov	r0, r6
 800b93e:	4639      	mov	r1, r7
 800b940:	f7f4 fca2 	bl	8000288 <__aeabi_dsub>
 800b944:	460f      	mov	r7, r1
 800b946:	4606      	mov	r6, r0
 800b948:	f7f5 f8f0 	bl	8000b2c <__aeabi_d2iz>
 800b94c:	9007      	str	r0, [sp, #28]
 800b94e:	f7f4 fde9 	bl	8000524 <__aeabi_i2d>
 800b952:	4602      	mov	r2, r0
 800b954:	460b      	mov	r3, r1
 800b956:	4630      	mov	r0, r6
 800b958:	4639      	mov	r1, r7
 800b95a:	f7f4 fc95 	bl	8000288 <__aeabi_dsub>
 800b95e:	f1ba 0f00 	cmp.w	sl, #0
 800b962:	4606      	mov	r6, r0
 800b964:	460f      	mov	r7, r1
 800b966:	dd70      	ble.n	800ba4a <__kernel_rem_pio2+0x252>
 800b968:	1e62      	subs	r2, r4, #1
 800b96a:	ab0c      	add	r3, sp, #48	; 0x30
 800b96c:	9d07      	ldr	r5, [sp, #28]
 800b96e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b972:	f1ca 0118 	rsb	r1, sl, #24
 800b976:	fa40 f301 	asr.w	r3, r0, r1
 800b97a:	441d      	add	r5, r3
 800b97c:	408b      	lsls	r3, r1
 800b97e:	1ac0      	subs	r0, r0, r3
 800b980:	ab0c      	add	r3, sp, #48	; 0x30
 800b982:	9507      	str	r5, [sp, #28]
 800b984:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b988:	f1ca 0317 	rsb	r3, sl, #23
 800b98c:	fa40 f303 	asr.w	r3, r0, r3
 800b990:	9302      	str	r3, [sp, #8]
 800b992:	9b02      	ldr	r3, [sp, #8]
 800b994:	2b00      	cmp	r3, #0
 800b996:	dd66      	ble.n	800ba66 <__kernel_rem_pio2+0x26e>
 800b998:	9b07      	ldr	r3, [sp, #28]
 800b99a:	2200      	movs	r2, #0
 800b99c:	3301      	adds	r3, #1
 800b99e:	9307      	str	r3, [sp, #28]
 800b9a0:	4615      	mov	r5, r2
 800b9a2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b9a6:	4294      	cmp	r4, r2
 800b9a8:	f300 8099 	bgt.w	800bade <__kernel_rem_pio2+0x2e6>
 800b9ac:	f1ba 0f00 	cmp.w	sl, #0
 800b9b0:	dd07      	ble.n	800b9c2 <__kernel_rem_pio2+0x1ca>
 800b9b2:	f1ba 0f01 	cmp.w	sl, #1
 800b9b6:	f000 80a5 	beq.w	800bb04 <__kernel_rem_pio2+0x30c>
 800b9ba:	f1ba 0f02 	cmp.w	sl, #2
 800b9be:	f000 80c1 	beq.w	800bb44 <__kernel_rem_pio2+0x34c>
 800b9c2:	9b02      	ldr	r3, [sp, #8]
 800b9c4:	2b02      	cmp	r3, #2
 800b9c6:	d14e      	bne.n	800ba66 <__kernel_rem_pio2+0x26e>
 800b9c8:	4632      	mov	r2, r6
 800b9ca:	463b      	mov	r3, r7
 800b9cc:	4958      	ldr	r1, [pc, #352]	; (800bb30 <__kernel_rem_pio2+0x338>)
 800b9ce:	2000      	movs	r0, #0
 800b9d0:	f7f4 fc5a 	bl	8000288 <__aeabi_dsub>
 800b9d4:	4606      	mov	r6, r0
 800b9d6:	460f      	mov	r7, r1
 800b9d8:	2d00      	cmp	r5, #0
 800b9da:	d044      	beq.n	800ba66 <__kernel_rem_pio2+0x26e>
 800b9dc:	4650      	mov	r0, sl
 800b9de:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800bb20 <__kernel_rem_pio2+0x328>
 800b9e2:	f000 fca9 	bl	800c338 <scalbn>
 800b9e6:	4630      	mov	r0, r6
 800b9e8:	4639      	mov	r1, r7
 800b9ea:	ec53 2b10 	vmov	r2, r3, d0
 800b9ee:	f7f4 fc4b 	bl	8000288 <__aeabi_dsub>
 800b9f2:	4606      	mov	r6, r0
 800b9f4:	460f      	mov	r7, r1
 800b9f6:	e036      	b.n	800ba66 <__kernel_rem_pio2+0x26e>
 800b9f8:	4b4e      	ldr	r3, [pc, #312]	; (800bb34 <__kernel_rem_pio2+0x33c>)
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	4630      	mov	r0, r6
 800b9fe:	4639      	mov	r1, r7
 800ba00:	f7f4 fdfa 	bl	80005f8 <__aeabi_dmul>
 800ba04:	f7f5 f892 	bl	8000b2c <__aeabi_d2iz>
 800ba08:	f7f4 fd8c 	bl	8000524 <__aeabi_i2d>
 800ba0c:	4b4a      	ldr	r3, [pc, #296]	; (800bb38 <__kernel_rem_pio2+0x340>)
 800ba0e:	2200      	movs	r2, #0
 800ba10:	4680      	mov	r8, r0
 800ba12:	4689      	mov	r9, r1
 800ba14:	f7f4 fdf0 	bl	80005f8 <__aeabi_dmul>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	4630      	mov	r0, r6
 800ba1e:	4639      	mov	r1, r7
 800ba20:	f7f4 fc32 	bl	8000288 <__aeabi_dsub>
 800ba24:	f7f5 f882 	bl	8000b2c <__aeabi_d2iz>
 800ba28:	9b02      	ldr	r3, [sp, #8]
 800ba2a:	f843 0b04 	str.w	r0, [r3], #4
 800ba2e:	3d01      	subs	r5, #1
 800ba30:	9302      	str	r3, [sp, #8]
 800ba32:	ab70      	add	r3, sp, #448	; 0x1c0
 800ba34:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ba38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3c:	4640      	mov	r0, r8
 800ba3e:	4649      	mov	r1, r9
 800ba40:	f7f4 fc24 	bl	800028c <__adddf3>
 800ba44:	4606      	mov	r6, r0
 800ba46:	460f      	mov	r7, r1
 800ba48:	e75b      	b.n	800b902 <__kernel_rem_pio2+0x10a>
 800ba4a:	d105      	bne.n	800ba58 <__kernel_rem_pio2+0x260>
 800ba4c:	1e63      	subs	r3, r4, #1
 800ba4e:	aa0c      	add	r2, sp, #48	; 0x30
 800ba50:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ba54:	15c3      	asrs	r3, r0, #23
 800ba56:	e79b      	b.n	800b990 <__kernel_rem_pio2+0x198>
 800ba58:	4b38      	ldr	r3, [pc, #224]	; (800bb3c <__kernel_rem_pio2+0x344>)
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f7f5 f852 	bl	8000b04 <__aeabi_dcmpge>
 800ba60:	2800      	cmp	r0, #0
 800ba62:	d139      	bne.n	800bad8 <__kernel_rem_pio2+0x2e0>
 800ba64:	9002      	str	r0, [sp, #8]
 800ba66:	2200      	movs	r2, #0
 800ba68:	2300      	movs	r3, #0
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	4639      	mov	r1, r7
 800ba6e:	f7f5 f82b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba72:	2800      	cmp	r0, #0
 800ba74:	f000 80b4 	beq.w	800bbe0 <__kernel_rem_pio2+0x3e8>
 800ba78:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800ba7c:	465b      	mov	r3, fp
 800ba7e:	2200      	movs	r2, #0
 800ba80:	9904      	ldr	r1, [sp, #16]
 800ba82:	428b      	cmp	r3, r1
 800ba84:	da65      	bge.n	800bb52 <__kernel_rem_pio2+0x35a>
 800ba86:	2a00      	cmp	r2, #0
 800ba88:	d07b      	beq.n	800bb82 <__kernel_rem_pio2+0x38a>
 800ba8a:	ab0c      	add	r3, sp, #48	; 0x30
 800ba8c:	f1aa 0a18 	sub.w	sl, sl, #24
 800ba90:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	f000 80a0 	beq.w	800bbda <__kernel_rem_pio2+0x3e2>
 800ba9a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800bb20 <__kernel_rem_pio2+0x328>
 800ba9e:	4650      	mov	r0, sl
 800baa0:	f000 fc4a 	bl	800c338 <scalbn>
 800baa4:	4f23      	ldr	r7, [pc, #140]	; (800bb34 <__kernel_rem_pio2+0x33c>)
 800baa6:	ec55 4b10 	vmov	r4, r5, d0
 800baaa:	46d8      	mov	r8, fp
 800baac:	2600      	movs	r6, #0
 800baae:	f1b8 0f00 	cmp.w	r8, #0
 800bab2:	f280 80cf 	bge.w	800bc54 <__kernel_rem_pio2+0x45c>
 800bab6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800bb18 <__kernel_rem_pio2+0x320>
 800baba:	465f      	mov	r7, fp
 800babc:	f04f 0800 	mov.w	r8, #0
 800bac0:	2f00      	cmp	r7, #0
 800bac2:	f2c0 80fd 	blt.w	800bcc0 <__kernel_rem_pio2+0x4c8>
 800bac6:	ab70      	add	r3, sp, #448	; 0x1c0
 800bac8:	f8df a074 	ldr.w	sl, [pc, #116]	; 800bb40 <__kernel_rem_pio2+0x348>
 800bacc:	ec55 4b18 	vmov	r4, r5, d8
 800bad0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800bad4:	2600      	movs	r6, #0
 800bad6:	e0e5      	b.n	800bca4 <__kernel_rem_pio2+0x4ac>
 800bad8:	2302      	movs	r3, #2
 800bada:	9302      	str	r3, [sp, #8]
 800badc:	e75c      	b.n	800b998 <__kernel_rem_pio2+0x1a0>
 800bade:	f8db 3000 	ldr.w	r3, [fp]
 800bae2:	b955      	cbnz	r5, 800bafa <__kernel_rem_pio2+0x302>
 800bae4:	b123      	cbz	r3, 800baf0 <__kernel_rem_pio2+0x2f8>
 800bae6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800baea:	f8cb 3000 	str.w	r3, [fp]
 800baee:	2301      	movs	r3, #1
 800baf0:	3201      	adds	r2, #1
 800baf2:	f10b 0b04 	add.w	fp, fp, #4
 800baf6:	461d      	mov	r5, r3
 800baf8:	e755      	b.n	800b9a6 <__kernel_rem_pio2+0x1ae>
 800bafa:	1acb      	subs	r3, r1, r3
 800bafc:	f8cb 3000 	str.w	r3, [fp]
 800bb00:	462b      	mov	r3, r5
 800bb02:	e7f5      	b.n	800baf0 <__kernel_rem_pio2+0x2f8>
 800bb04:	1e62      	subs	r2, r4, #1
 800bb06:	ab0c      	add	r3, sp, #48	; 0x30
 800bb08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb0c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bb10:	a90c      	add	r1, sp, #48	; 0x30
 800bb12:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bb16:	e754      	b.n	800b9c2 <__kernel_rem_pio2+0x1ca>
	...
 800bb24:	3ff00000 	.word	0x3ff00000
 800bb28:	0800dc48 	.word	0x0800dc48
 800bb2c:	40200000 	.word	0x40200000
 800bb30:	3ff00000 	.word	0x3ff00000
 800bb34:	3e700000 	.word	0x3e700000
 800bb38:	41700000 	.word	0x41700000
 800bb3c:	3fe00000 	.word	0x3fe00000
 800bb40:	0800dc08 	.word	0x0800dc08
 800bb44:	1e62      	subs	r2, r4, #1
 800bb46:	ab0c      	add	r3, sp, #48	; 0x30
 800bb48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb4c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bb50:	e7de      	b.n	800bb10 <__kernel_rem_pio2+0x318>
 800bb52:	a90c      	add	r1, sp, #48	; 0x30
 800bb54:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bb58:	3b01      	subs	r3, #1
 800bb5a:	430a      	orrs	r2, r1
 800bb5c:	e790      	b.n	800ba80 <__kernel_rem_pio2+0x288>
 800bb5e:	3301      	adds	r3, #1
 800bb60:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800bb64:	2900      	cmp	r1, #0
 800bb66:	d0fa      	beq.n	800bb5e <__kernel_rem_pio2+0x366>
 800bb68:	9a08      	ldr	r2, [sp, #32]
 800bb6a:	18e3      	adds	r3, r4, r3
 800bb6c:	18a6      	adds	r6, r4, r2
 800bb6e:	aa20      	add	r2, sp, #128	; 0x80
 800bb70:	1c65      	adds	r5, r4, #1
 800bb72:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800bb76:	9302      	str	r3, [sp, #8]
 800bb78:	9b02      	ldr	r3, [sp, #8]
 800bb7a:	42ab      	cmp	r3, r5
 800bb7c:	da04      	bge.n	800bb88 <__kernel_rem_pio2+0x390>
 800bb7e:	461c      	mov	r4, r3
 800bb80:	e6b5      	b.n	800b8ee <__kernel_rem_pio2+0xf6>
 800bb82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bb84:	2301      	movs	r3, #1
 800bb86:	e7eb      	b.n	800bb60 <__kernel_rem_pio2+0x368>
 800bb88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb8e:	f7f4 fcc9 	bl	8000524 <__aeabi_i2d>
 800bb92:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bb96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb98:	46b3      	mov	fp, r6
 800bb9a:	461c      	mov	r4, r3
 800bb9c:	2700      	movs	r7, #0
 800bb9e:	f04f 0800 	mov.w	r8, #0
 800bba2:	f04f 0900 	mov.w	r9, #0
 800bba6:	9b06      	ldr	r3, [sp, #24]
 800bba8:	429f      	cmp	r7, r3
 800bbaa:	dd06      	ble.n	800bbba <__kernel_rem_pio2+0x3c2>
 800bbac:	ab70      	add	r3, sp, #448	; 0x1c0
 800bbae:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bbb2:	e9c3 8900 	strd	r8, r9, [r3]
 800bbb6:	3501      	adds	r5, #1
 800bbb8:	e7de      	b.n	800bb78 <__kernel_rem_pio2+0x380>
 800bbba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800bbbe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800bbc2:	f7f4 fd19 	bl	80005f8 <__aeabi_dmul>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	460b      	mov	r3, r1
 800bbca:	4640      	mov	r0, r8
 800bbcc:	4649      	mov	r1, r9
 800bbce:	f7f4 fb5d 	bl	800028c <__adddf3>
 800bbd2:	3701      	adds	r7, #1
 800bbd4:	4680      	mov	r8, r0
 800bbd6:	4689      	mov	r9, r1
 800bbd8:	e7e5      	b.n	800bba6 <__kernel_rem_pio2+0x3ae>
 800bbda:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bbde:	e754      	b.n	800ba8a <__kernel_rem_pio2+0x292>
 800bbe0:	ec47 6b10 	vmov	d0, r6, r7
 800bbe4:	f1ca 0000 	rsb	r0, sl, #0
 800bbe8:	f000 fba6 	bl	800c338 <scalbn>
 800bbec:	ec57 6b10 	vmov	r6, r7, d0
 800bbf0:	4b9f      	ldr	r3, [pc, #636]	; (800be70 <__kernel_rem_pio2+0x678>)
 800bbf2:	ee10 0a10 	vmov	r0, s0
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	4639      	mov	r1, r7
 800bbfa:	f7f4 ff83 	bl	8000b04 <__aeabi_dcmpge>
 800bbfe:	b300      	cbz	r0, 800bc42 <__kernel_rem_pio2+0x44a>
 800bc00:	4b9c      	ldr	r3, [pc, #624]	; (800be74 <__kernel_rem_pio2+0x67c>)
 800bc02:	2200      	movs	r2, #0
 800bc04:	4630      	mov	r0, r6
 800bc06:	4639      	mov	r1, r7
 800bc08:	f7f4 fcf6 	bl	80005f8 <__aeabi_dmul>
 800bc0c:	f7f4 ff8e 	bl	8000b2c <__aeabi_d2iz>
 800bc10:	4605      	mov	r5, r0
 800bc12:	f7f4 fc87 	bl	8000524 <__aeabi_i2d>
 800bc16:	4b96      	ldr	r3, [pc, #600]	; (800be70 <__kernel_rem_pio2+0x678>)
 800bc18:	2200      	movs	r2, #0
 800bc1a:	f7f4 fced 	bl	80005f8 <__aeabi_dmul>
 800bc1e:	460b      	mov	r3, r1
 800bc20:	4602      	mov	r2, r0
 800bc22:	4639      	mov	r1, r7
 800bc24:	4630      	mov	r0, r6
 800bc26:	f7f4 fb2f 	bl	8000288 <__aeabi_dsub>
 800bc2a:	f7f4 ff7f 	bl	8000b2c <__aeabi_d2iz>
 800bc2e:	f104 0b01 	add.w	fp, r4, #1
 800bc32:	ab0c      	add	r3, sp, #48	; 0x30
 800bc34:	f10a 0a18 	add.w	sl, sl, #24
 800bc38:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bc3c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800bc40:	e72b      	b.n	800ba9a <__kernel_rem_pio2+0x2a2>
 800bc42:	4630      	mov	r0, r6
 800bc44:	4639      	mov	r1, r7
 800bc46:	f7f4 ff71 	bl	8000b2c <__aeabi_d2iz>
 800bc4a:	ab0c      	add	r3, sp, #48	; 0x30
 800bc4c:	46a3      	mov	fp, r4
 800bc4e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bc52:	e722      	b.n	800ba9a <__kernel_rem_pio2+0x2a2>
 800bc54:	ab70      	add	r3, sp, #448	; 0x1c0
 800bc56:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800bc5a:	ab0c      	add	r3, sp, #48	; 0x30
 800bc5c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bc60:	f7f4 fc60 	bl	8000524 <__aeabi_i2d>
 800bc64:	4622      	mov	r2, r4
 800bc66:	462b      	mov	r3, r5
 800bc68:	f7f4 fcc6 	bl	80005f8 <__aeabi_dmul>
 800bc6c:	4632      	mov	r2, r6
 800bc6e:	e9c9 0100 	strd	r0, r1, [r9]
 800bc72:	463b      	mov	r3, r7
 800bc74:	4620      	mov	r0, r4
 800bc76:	4629      	mov	r1, r5
 800bc78:	f7f4 fcbe 	bl	80005f8 <__aeabi_dmul>
 800bc7c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bc80:	4604      	mov	r4, r0
 800bc82:	460d      	mov	r5, r1
 800bc84:	e713      	b.n	800baae <__kernel_rem_pio2+0x2b6>
 800bc86:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800bc8a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800bc8e:	f7f4 fcb3 	bl	80005f8 <__aeabi_dmul>
 800bc92:	4602      	mov	r2, r0
 800bc94:	460b      	mov	r3, r1
 800bc96:	4620      	mov	r0, r4
 800bc98:	4629      	mov	r1, r5
 800bc9a:	f7f4 faf7 	bl	800028c <__adddf3>
 800bc9e:	3601      	adds	r6, #1
 800bca0:	4604      	mov	r4, r0
 800bca2:	460d      	mov	r5, r1
 800bca4:	9b04      	ldr	r3, [sp, #16]
 800bca6:	429e      	cmp	r6, r3
 800bca8:	dc01      	bgt.n	800bcae <__kernel_rem_pio2+0x4b6>
 800bcaa:	45b0      	cmp	r8, r6
 800bcac:	daeb      	bge.n	800bc86 <__kernel_rem_pio2+0x48e>
 800bcae:	ab48      	add	r3, sp, #288	; 0x120
 800bcb0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bcb4:	e9c3 4500 	strd	r4, r5, [r3]
 800bcb8:	3f01      	subs	r7, #1
 800bcba:	f108 0801 	add.w	r8, r8, #1
 800bcbe:	e6ff      	b.n	800bac0 <__kernel_rem_pio2+0x2c8>
 800bcc0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800bcc2:	2b02      	cmp	r3, #2
 800bcc4:	dc0b      	bgt.n	800bcde <__kernel_rem_pio2+0x4e6>
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	dc6e      	bgt.n	800bda8 <__kernel_rem_pio2+0x5b0>
 800bcca:	d045      	beq.n	800bd58 <__kernel_rem_pio2+0x560>
 800bccc:	9b07      	ldr	r3, [sp, #28]
 800bcce:	f003 0007 	and.w	r0, r3, #7
 800bcd2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800bcd6:	ecbd 8b02 	vpop	{d8}
 800bcda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcde:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800bce0:	2b03      	cmp	r3, #3
 800bce2:	d1f3      	bne.n	800bccc <__kernel_rem_pio2+0x4d4>
 800bce4:	ab48      	add	r3, sp, #288	; 0x120
 800bce6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800bcea:	46d0      	mov	r8, sl
 800bcec:	46d9      	mov	r9, fp
 800bcee:	f1b9 0f00 	cmp.w	r9, #0
 800bcf2:	f1a8 0808 	sub.w	r8, r8, #8
 800bcf6:	dc64      	bgt.n	800bdc2 <__kernel_rem_pio2+0x5ca>
 800bcf8:	465c      	mov	r4, fp
 800bcfa:	2c01      	cmp	r4, #1
 800bcfc:	f1aa 0a08 	sub.w	sl, sl, #8
 800bd00:	dc7e      	bgt.n	800be00 <__kernel_rem_pio2+0x608>
 800bd02:	2000      	movs	r0, #0
 800bd04:	2100      	movs	r1, #0
 800bd06:	f1bb 0f01 	cmp.w	fp, #1
 800bd0a:	f300 8097 	bgt.w	800be3c <__kernel_rem_pio2+0x644>
 800bd0e:	9b02      	ldr	r3, [sp, #8]
 800bd10:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800bd14:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	f040 8099 	bne.w	800be50 <__kernel_rem_pio2+0x658>
 800bd1e:	9b01      	ldr	r3, [sp, #4]
 800bd20:	e9c3 5600 	strd	r5, r6, [r3]
 800bd24:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800bd28:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800bd2c:	e7ce      	b.n	800bccc <__kernel_rem_pio2+0x4d4>
 800bd2e:	ab48      	add	r3, sp, #288	; 0x120
 800bd30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd38:	f7f4 faa8 	bl	800028c <__adddf3>
 800bd3c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bd40:	f1bb 0f00 	cmp.w	fp, #0
 800bd44:	daf3      	bge.n	800bd2e <__kernel_rem_pio2+0x536>
 800bd46:	9b02      	ldr	r3, [sp, #8]
 800bd48:	b113      	cbz	r3, 800bd50 <__kernel_rem_pio2+0x558>
 800bd4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd4e:	4619      	mov	r1, r3
 800bd50:	9b01      	ldr	r3, [sp, #4]
 800bd52:	e9c3 0100 	strd	r0, r1, [r3]
 800bd56:	e7b9      	b.n	800bccc <__kernel_rem_pio2+0x4d4>
 800bd58:	2000      	movs	r0, #0
 800bd5a:	2100      	movs	r1, #0
 800bd5c:	e7f0      	b.n	800bd40 <__kernel_rem_pio2+0x548>
 800bd5e:	ab48      	add	r3, sp, #288	; 0x120
 800bd60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd68:	f7f4 fa90 	bl	800028c <__adddf3>
 800bd6c:	3c01      	subs	r4, #1
 800bd6e:	2c00      	cmp	r4, #0
 800bd70:	daf5      	bge.n	800bd5e <__kernel_rem_pio2+0x566>
 800bd72:	9b02      	ldr	r3, [sp, #8]
 800bd74:	b1e3      	cbz	r3, 800bdb0 <__kernel_rem_pio2+0x5b8>
 800bd76:	4602      	mov	r2, r0
 800bd78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd7c:	9c01      	ldr	r4, [sp, #4]
 800bd7e:	e9c4 2300 	strd	r2, r3, [r4]
 800bd82:	4602      	mov	r2, r0
 800bd84:	460b      	mov	r3, r1
 800bd86:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800bd8a:	f7f4 fa7d 	bl	8000288 <__aeabi_dsub>
 800bd8e:	ad4a      	add	r5, sp, #296	; 0x128
 800bd90:	2401      	movs	r4, #1
 800bd92:	45a3      	cmp	fp, r4
 800bd94:	da0f      	bge.n	800bdb6 <__kernel_rem_pio2+0x5be>
 800bd96:	9b02      	ldr	r3, [sp, #8]
 800bd98:	b113      	cbz	r3, 800bda0 <__kernel_rem_pio2+0x5a8>
 800bd9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd9e:	4619      	mov	r1, r3
 800bda0:	9b01      	ldr	r3, [sp, #4]
 800bda2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bda6:	e791      	b.n	800bccc <__kernel_rem_pio2+0x4d4>
 800bda8:	465c      	mov	r4, fp
 800bdaa:	2000      	movs	r0, #0
 800bdac:	2100      	movs	r1, #0
 800bdae:	e7de      	b.n	800bd6e <__kernel_rem_pio2+0x576>
 800bdb0:	4602      	mov	r2, r0
 800bdb2:	460b      	mov	r3, r1
 800bdb4:	e7e2      	b.n	800bd7c <__kernel_rem_pio2+0x584>
 800bdb6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800bdba:	f7f4 fa67 	bl	800028c <__adddf3>
 800bdbe:	3401      	adds	r4, #1
 800bdc0:	e7e7      	b.n	800bd92 <__kernel_rem_pio2+0x59a>
 800bdc2:	e9d8 4500 	ldrd	r4, r5, [r8]
 800bdc6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800bdca:	4620      	mov	r0, r4
 800bdcc:	4632      	mov	r2, r6
 800bdce:	463b      	mov	r3, r7
 800bdd0:	4629      	mov	r1, r5
 800bdd2:	f7f4 fa5b 	bl	800028c <__adddf3>
 800bdd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bdda:	4602      	mov	r2, r0
 800bddc:	460b      	mov	r3, r1
 800bdde:	4620      	mov	r0, r4
 800bde0:	4629      	mov	r1, r5
 800bde2:	f7f4 fa51 	bl	8000288 <__aeabi_dsub>
 800bde6:	4632      	mov	r2, r6
 800bde8:	463b      	mov	r3, r7
 800bdea:	f7f4 fa4f 	bl	800028c <__adddf3>
 800bdee:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bdf2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800bdf6:	ed88 7b00 	vstr	d7, [r8]
 800bdfa:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800bdfe:	e776      	b.n	800bcee <__kernel_rem_pio2+0x4f6>
 800be00:	e9da 8900 	ldrd	r8, r9, [sl]
 800be04:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800be08:	4640      	mov	r0, r8
 800be0a:	4632      	mov	r2, r6
 800be0c:	463b      	mov	r3, r7
 800be0e:	4649      	mov	r1, r9
 800be10:	f7f4 fa3c 	bl	800028c <__adddf3>
 800be14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be18:	4602      	mov	r2, r0
 800be1a:	460b      	mov	r3, r1
 800be1c:	4640      	mov	r0, r8
 800be1e:	4649      	mov	r1, r9
 800be20:	f7f4 fa32 	bl	8000288 <__aeabi_dsub>
 800be24:	4632      	mov	r2, r6
 800be26:	463b      	mov	r3, r7
 800be28:	f7f4 fa30 	bl	800028c <__adddf3>
 800be2c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800be30:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800be34:	ed8a 7b00 	vstr	d7, [sl]
 800be38:	3c01      	subs	r4, #1
 800be3a:	e75e      	b.n	800bcfa <__kernel_rem_pio2+0x502>
 800be3c:	ab48      	add	r3, sp, #288	; 0x120
 800be3e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800be42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be46:	f7f4 fa21 	bl	800028c <__adddf3>
 800be4a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800be4e:	e75a      	b.n	800bd06 <__kernel_rem_pio2+0x50e>
 800be50:	9b01      	ldr	r3, [sp, #4]
 800be52:	9a01      	ldr	r2, [sp, #4]
 800be54:	601d      	str	r5, [r3, #0]
 800be56:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800be5a:	605c      	str	r4, [r3, #4]
 800be5c:	609f      	str	r7, [r3, #8]
 800be5e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800be62:	60d3      	str	r3, [r2, #12]
 800be64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be68:	6110      	str	r0, [r2, #16]
 800be6a:	6153      	str	r3, [r2, #20]
 800be6c:	e72e      	b.n	800bccc <__kernel_rem_pio2+0x4d4>
 800be6e:	bf00      	nop
 800be70:	41700000 	.word	0x41700000
 800be74:	3e700000 	.word	0x3e700000

0800be78 <__kernel_tan>:
 800be78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be7c:	ed2d 8b04 	vpush	{d8-d9}
 800be80:	ec5b ab10 	vmov	sl, fp, d0
 800be84:	4be2      	ldr	r3, [pc, #904]	; (800c210 <__kernel_tan+0x398>)
 800be86:	b085      	sub	sp, #20
 800be88:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800be8c:	429f      	cmp	r7, r3
 800be8e:	ed8d 1b00 	vstr	d1, [sp]
 800be92:	4606      	mov	r6, r0
 800be94:	f8cd b00c 	str.w	fp, [sp, #12]
 800be98:	dc24      	bgt.n	800bee4 <__kernel_tan+0x6c>
 800be9a:	ee10 0a10 	vmov	r0, s0
 800be9e:	4659      	mov	r1, fp
 800bea0:	f7f4 fe44 	bl	8000b2c <__aeabi_d2iz>
 800bea4:	2800      	cmp	r0, #0
 800bea6:	d148      	bne.n	800bf3a <__kernel_tan+0xc2>
 800bea8:	1c73      	adds	r3, r6, #1
 800beaa:	4652      	mov	r2, sl
 800beac:	4313      	orrs	r3, r2
 800beae:	433b      	orrs	r3, r7
 800beb0:	d112      	bne.n	800bed8 <__kernel_tan+0x60>
 800beb2:	ec4b ab10 	vmov	d0, sl, fp
 800beb6:	f000 f9b3 	bl	800c220 <fabs>
 800beba:	49d6      	ldr	r1, [pc, #856]	; (800c214 <__kernel_tan+0x39c>)
 800bebc:	ec53 2b10 	vmov	r2, r3, d0
 800bec0:	2000      	movs	r0, #0
 800bec2:	f7f4 fcc3 	bl	800084c <__aeabi_ddiv>
 800bec6:	4682      	mov	sl, r0
 800bec8:	468b      	mov	fp, r1
 800beca:	ec4b ab10 	vmov	d0, sl, fp
 800bece:	b005      	add	sp, #20
 800bed0:	ecbd 8b04 	vpop	{d8-d9}
 800bed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bed8:	2e01      	cmp	r6, #1
 800beda:	d0f6      	beq.n	800beca <__kernel_tan+0x52>
 800bedc:	49ce      	ldr	r1, [pc, #824]	; (800c218 <__kernel_tan+0x3a0>)
 800bede:	465b      	mov	r3, fp
 800bee0:	2000      	movs	r0, #0
 800bee2:	e7ee      	b.n	800bec2 <__kernel_tan+0x4a>
 800bee4:	4bcd      	ldr	r3, [pc, #820]	; (800c21c <__kernel_tan+0x3a4>)
 800bee6:	429f      	cmp	r7, r3
 800bee8:	dd27      	ble.n	800bf3a <__kernel_tan+0xc2>
 800beea:	9b03      	ldr	r3, [sp, #12]
 800beec:	2b00      	cmp	r3, #0
 800beee:	da0a      	bge.n	800bf06 <__kernel_tan+0x8e>
 800bef0:	e9dd 2100 	ldrd	r2, r1, [sp]
 800bef4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bef8:	469b      	mov	fp, r3
 800befa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800befe:	e9cd 2300 	strd	r2, r3, [sp]
 800bf02:	ee10 aa10 	vmov	sl, s0
 800bf06:	4652      	mov	r2, sl
 800bf08:	465b      	mov	r3, fp
 800bf0a:	a1a1      	add	r1, pc, #644	; (adr r1, 800c190 <__kernel_tan+0x318>)
 800bf0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf10:	f7f4 f9ba 	bl	8000288 <__aeabi_dsub>
 800bf14:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf18:	4604      	mov	r4, r0
 800bf1a:	460d      	mov	r5, r1
 800bf1c:	a19e      	add	r1, pc, #632	; (adr r1, 800c198 <__kernel_tan+0x320>)
 800bf1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf22:	f7f4 f9b1 	bl	8000288 <__aeabi_dsub>
 800bf26:	4622      	mov	r2, r4
 800bf28:	462b      	mov	r3, r5
 800bf2a:	f7f4 f9af 	bl	800028c <__adddf3>
 800bf2e:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 800c1a0 <__kernel_tan+0x328>
 800bf32:	ed8d 7b00 	vstr	d7, [sp]
 800bf36:	4682      	mov	sl, r0
 800bf38:	468b      	mov	fp, r1
 800bf3a:	4652      	mov	r2, sl
 800bf3c:	465b      	mov	r3, fp
 800bf3e:	4650      	mov	r0, sl
 800bf40:	4659      	mov	r1, fp
 800bf42:	f7f4 fb59 	bl	80005f8 <__aeabi_dmul>
 800bf46:	4602      	mov	r2, r0
 800bf48:	460b      	mov	r3, r1
 800bf4a:	4680      	mov	r8, r0
 800bf4c:	4689      	mov	r9, r1
 800bf4e:	f7f4 fb53 	bl	80005f8 <__aeabi_dmul>
 800bf52:	4642      	mov	r2, r8
 800bf54:	4604      	mov	r4, r0
 800bf56:	460d      	mov	r5, r1
 800bf58:	464b      	mov	r3, r9
 800bf5a:	4650      	mov	r0, sl
 800bf5c:	4659      	mov	r1, fp
 800bf5e:	f7f4 fb4b 	bl	80005f8 <__aeabi_dmul>
 800bf62:	a391      	add	r3, pc, #580	; (adr r3, 800c1a8 <__kernel_tan+0x330>)
 800bf64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf68:	ec41 0b18 	vmov	d8, r0, r1
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	4629      	mov	r1, r5
 800bf70:	f7f4 fb42 	bl	80005f8 <__aeabi_dmul>
 800bf74:	a38e      	add	r3, pc, #568	; (adr r3, 800c1b0 <__kernel_tan+0x338>)
 800bf76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf7a:	f7f4 f987 	bl	800028c <__adddf3>
 800bf7e:	4622      	mov	r2, r4
 800bf80:	462b      	mov	r3, r5
 800bf82:	f7f4 fb39 	bl	80005f8 <__aeabi_dmul>
 800bf86:	a38c      	add	r3, pc, #560	; (adr r3, 800c1b8 <__kernel_tan+0x340>)
 800bf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8c:	f7f4 f97e 	bl	800028c <__adddf3>
 800bf90:	4622      	mov	r2, r4
 800bf92:	462b      	mov	r3, r5
 800bf94:	f7f4 fb30 	bl	80005f8 <__aeabi_dmul>
 800bf98:	a389      	add	r3, pc, #548	; (adr r3, 800c1c0 <__kernel_tan+0x348>)
 800bf9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9e:	f7f4 f975 	bl	800028c <__adddf3>
 800bfa2:	4622      	mov	r2, r4
 800bfa4:	462b      	mov	r3, r5
 800bfa6:	f7f4 fb27 	bl	80005f8 <__aeabi_dmul>
 800bfaa:	a387      	add	r3, pc, #540	; (adr r3, 800c1c8 <__kernel_tan+0x350>)
 800bfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb0:	f7f4 f96c 	bl	800028c <__adddf3>
 800bfb4:	4622      	mov	r2, r4
 800bfb6:	462b      	mov	r3, r5
 800bfb8:	f7f4 fb1e 	bl	80005f8 <__aeabi_dmul>
 800bfbc:	a384      	add	r3, pc, #528	; (adr r3, 800c1d0 <__kernel_tan+0x358>)
 800bfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc2:	f7f4 f963 	bl	800028c <__adddf3>
 800bfc6:	4642      	mov	r2, r8
 800bfc8:	464b      	mov	r3, r9
 800bfca:	f7f4 fb15 	bl	80005f8 <__aeabi_dmul>
 800bfce:	a382      	add	r3, pc, #520	; (adr r3, 800c1d8 <__kernel_tan+0x360>)
 800bfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd4:	ec41 0b19 	vmov	d9, r0, r1
 800bfd8:	4620      	mov	r0, r4
 800bfda:	4629      	mov	r1, r5
 800bfdc:	f7f4 fb0c 	bl	80005f8 <__aeabi_dmul>
 800bfe0:	a37f      	add	r3, pc, #508	; (adr r3, 800c1e0 <__kernel_tan+0x368>)
 800bfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe6:	f7f4 f951 	bl	800028c <__adddf3>
 800bfea:	4622      	mov	r2, r4
 800bfec:	462b      	mov	r3, r5
 800bfee:	f7f4 fb03 	bl	80005f8 <__aeabi_dmul>
 800bff2:	a37d      	add	r3, pc, #500	; (adr r3, 800c1e8 <__kernel_tan+0x370>)
 800bff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff8:	f7f4 f948 	bl	800028c <__adddf3>
 800bffc:	4622      	mov	r2, r4
 800bffe:	462b      	mov	r3, r5
 800c000:	f7f4 fafa 	bl	80005f8 <__aeabi_dmul>
 800c004:	a37a      	add	r3, pc, #488	; (adr r3, 800c1f0 <__kernel_tan+0x378>)
 800c006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00a:	f7f4 f93f 	bl	800028c <__adddf3>
 800c00e:	4622      	mov	r2, r4
 800c010:	462b      	mov	r3, r5
 800c012:	f7f4 faf1 	bl	80005f8 <__aeabi_dmul>
 800c016:	a378      	add	r3, pc, #480	; (adr r3, 800c1f8 <__kernel_tan+0x380>)
 800c018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01c:	f7f4 f936 	bl	800028c <__adddf3>
 800c020:	4622      	mov	r2, r4
 800c022:	462b      	mov	r3, r5
 800c024:	f7f4 fae8 	bl	80005f8 <__aeabi_dmul>
 800c028:	a375      	add	r3, pc, #468	; (adr r3, 800c200 <__kernel_tan+0x388>)
 800c02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02e:	f7f4 f92d 	bl	800028c <__adddf3>
 800c032:	4602      	mov	r2, r0
 800c034:	460b      	mov	r3, r1
 800c036:	ec51 0b19 	vmov	r0, r1, d9
 800c03a:	f7f4 f927 	bl	800028c <__adddf3>
 800c03e:	ec53 2b18 	vmov	r2, r3, d8
 800c042:	f7f4 fad9 	bl	80005f8 <__aeabi_dmul>
 800c046:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c04a:	f7f4 f91f 	bl	800028c <__adddf3>
 800c04e:	4642      	mov	r2, r8
 800c050:	464b      	mov	r3, r9
 800c052:	f7f4 fad1 	bl	80005f8 <__aeabi_dmul>
 800c056:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c05a:	f7f4 f917 	bl	800028c <__adddf3>
 800c05e:	a36a      	add	r3, pc, #424	; (adr r3, 800c208 <__kernel_tan+0x390>)
 800c060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c064:	4604      	mov	r4, r0
 800c066:	460d      	mov	r5, r1
 800c068:	ec51 0b18 	vmov	r0, r1, d8
 800c06c:	f7f4 fac4 	bl	80005f8 <__aeabi_dmul>
 800c070:	4622      	mov	r2, r4
 800c072:	462b      	mov	r3, r5
 800c074:	f7f4 f90a 	bl	800028c <__adddf3>
 800c078:	460b      	mov	r3, r1
 800c07a:	ec41 0b18 	vmov	d8, r0, r1
 800c07e:	4602      	mov	r2, r0
 800c080:	4659      	mov	r1, fp
 800c082:	4650      	mov	r0, sl
 800c084:	f7f4 f902 	bl	800028c <__adddf3>
 800c088:	4b64      	ldr	r3, [pc, #400]	; (800c21c <__kernel_tan+0x3a4>)
 800c08a:	429f      	cmp	r7, r3
 800c08c:	4604      	mov	r4, r0
 800c08e:	460d      	mov	r5, r1
 800c090:	dd3e      	ble.n	800c110 <__kernel_tan+0x298>
 800c092:	4630      	mov	r0, r6
 800c094:	f7f4 fa46 	bl	8000524 <__aeabi_i2d>
 800c098:	4622      	mov	r2, r4
 800c09a:	4680      	mov	r8, r0
 800c09c:	4689      	mov	r9, r1
 800c09e:	462b      	mov	r3, r5
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	4629      	mov	r1, r5
 800c0a4:	f7f4 faa8 	bl	80005f8 <__aeabi_dmul>
 800c0a8:	4642      	mov	r2, r8
 800c0aa:	4606      	mov	r6, r0
 800c0ac:	460f      	mov	r7, r1
 800c0ae:	464b      	mov	r3, r9
 800c0b0:	4620      	mov	r0, r4
 800c0b2:	4629      	mov	r1, r5
 800c0b4:	f7f4 f8ea 	bl	800028c <__adddf3>
 800c0b8:	4602      	mov	r2, r0
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	4630      	mov	r0, r6
 800c0be:	4639      	mov	r1, r7
 800c0c0:	f7f4 fbc4 	bl	800084c <__aeabi_ddiv>
 800c0c4:	ec53 2b18 	vmov	r2, r3, d8
 800c0c8:	f7f4 f8de 	bl	8000288 <__aeabi_dsub>
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	4650      	mov	r0, sl
 800c0d2:	4659      	mov	r1, fp
 800c0d4:	f7f4 f8d8 	bl	8000288 <__aeabi_dsub>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	460b      	mov	r3, r1
 800c0dc:	f7f4 f8d6 	bl	800028c <__adddf3>
 800c0e0:	4602      	mov	r2, r0
 800c0e2:	460b      	mov	r3, r1
 800c0e4:	4640      	mov	r0, r8
 800c0e6:	4649      	mov	r1, r9
 800c0e8:	f7f4 f8ce 	bl	8000288 <__aeabi_dsub>
 800c0ec:	9b03      	ldr	r3, [sp, #12]
 800c0ee:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800c0f2:	f00a 0a02 	and.w	sl, sl, #2
 800c0f6:	4604      	mov	r4, r0
 800c0f8:	f1ca 0001 	rsb	r0, sl, #1
 800c0fc:	460d      	mov	r5, r1
 800c0fe:	f7f4 fa11 	bl	8000524 <__aeabi_i2d>
 800c102:	4602      	mov	r2, r0
 800c104:	460b      	mov	r3, r1
 800c106:	4620      	mov	r0, r4
 800c108:	4629      	mov	r1, r5
 800c10a:	f7f4 fa75 	bl	80005f8 <__aeabi_dmul>
 800c10e:	e6da      	b.n	800bec6 <__kernel_tan+0x4e>
 800c110:	2e01      	cmp	r6, #1
 800c112:	d038      	beq.n	800c186 <__kernel_tan+0x30e>
 800c114:	460f      	mov	r7, r1
 800c116:	4689      	mov	r9, r1
 800c118:	4602      	mov	r2, r0
 800c11a:	460b      	mov	r3, r1
 800c11c:	2000      	movs	r0, #0
 800c11e:	493e      	ldr	r1, [pc, #248]	; (800c218 <__kernel_tan+0x3a0>)
 800c120:	f7f4 fb94 	bl	800084c <__aeabi_ddiv>
 800c124:	2600      	movs	r6, #0
 800c126:	e9cd 0100 	strd	r0, r1, [sp]
 800c12a:	4652      	mov	r2, sl
 800c12c:	465b      	mov	r3, fp
 800c12e:	4630      	mov	r0, r6
 800c130:	4639      	mov	r1, r7
 800c132:	f7f4 f8a9 	bl	8000288 <__aeabi_dsub>
 800c136:	e9dd 4500 	ldrd	r4, r5, [sp]
 800c13a:	4602      	mov	r2, r0
 800c13c:	460b      	mov	r3, r1
 800c13e:	ec51 0b18 	vmov	r0, r1, d8
 800c142:	f7f4 f8a1 	bl	8000288 <__aeabi_dsub>
 800c146:	4632      	mov	r2, r6
 800c148:	462b      	mov	r3, r5
 800c14a:	f7f4 fa55 	bl	80005f8 <__aeabi_dmul>
 800c14e:	46b0      	mov	r8, r6
 800c150:	460f      	mov	r7, r1
 800c152:	4606      	mov	r6, r0
 800c154:	4642      	mov	r2, r8
 800c156:	462b      	mov	r3, r5
 800c158:	4640      	mov	r0, r8
 800c15a:	4649      	mov	r1, r9
 800c15c:	f7f4 fa4c 	bl	80005f8 <__aeabi_dmul>
 800c160:	4b2c      	ldr	r3, [pc, #176]	; (800c214 <__kernel_tan+0x39c>)
 800c162:	2200      	movs	r2, #0
 800c164:	f7f4 f892 	bl	800028c <__adddf3>
 800c168:	4602      	mov	r2, r0
 800c16a:	460b      	mov	r3, r1
 800c16c:	4630      	mov	r0, r6
 800c16e:	4639      	mov	r1, r7
 800c170:	f7f4 f88c 	bl	800028c <__adddf3>
 800c174:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c178:	f7f4 fa3e 	bl	80005f8 <__aeabi_dmul>
 800c17c:	4642      	mov	r2, r8
 800c17e:	462b      	mov	r3, r5
 800c180:	f7f4 f884 	bl	800028c <__adddf3>
 800c184:	e69f      	b.n	800bec6 <__kernel_tan+0x4e>
 800c186:	4682      	mov	sl, r0
 800c188:	468b      	mov	fp, r1
 800c18a:	e69e      	b.n	800beca <__kernel_tan+0x52>
 800c18c:	f3af 8000 	nop.w
 800c190:	54442d18 	.word	0x54442d18
 800c194:	3fe921fb 	.word	0x3fe921fb
 800c198:	33145c07 	.word	0x33145c07
 800c19c:	3c81a626 	.word	0x3c81a626
	...
 800c1a8:	74bf7ad4 	.word	0x74bf7ad4
 800c1ac:	3efb2a70 	.word	0x3efb2a70
 800c1b0:	32f0a7e9 	.word	0x32f0a7e9
 800c1b4:	3f12b80f 	.word	0x3f12b80f
 800c1b8:	1a8d1068 	.word	0x1a8d1068
 800c1bc:	3f3026f7 	.word	0x3f3026f7
 800c1c0:	fee08315 	.word	0xfee08315
 800c1c4:	3f57dbc8 	.word	0x3f57dbc8
 800c1c8:	e96e8493 	.word	0xe96e8493
 800c1cc:	3f8226e3 	.word	0x3f8226e3
 800c1d0:	1bb341fe 	.word	0x1bb341fe
 800c1d4:	3faba1ba 	.word	0x3faba1ba
 800c1d8:	db605373 	.word	0xdb605373
 800c1dc:	bef375cb 	.word	0xbef375cb
 800c1e0:	a03792a6 	.word	0xa03792a6
 800c1e4:	3f147e88 	.word	0x3f147e88
 800c1e8:	f2f26501 	.word	0xf2f26501
 800c1ec:	3f4344d8 	.word	0x3f4344d8
 800c1f0:	c9560328 	.word	0xc9560328
 800c1f4:	3f6d6d22 	.word	0x3f6d6d22
 800c1f8:	8406d637 	.word	0x8406d637
 800c1fc:	3f9664f4 	.word	0x3f9664f4
 800c200:	1110fe7a 	.word	0x1110fe7a
 800c204:	3fc11111 	.word	0x3fc11111
 800c208:	55555563 	.word	0x55555563
 800c20c:	3fd55555 	.word	0x3fd55555
 800c210:	3e2fffff 	.word	0x3e2fffff
 800c214:	3ff00000 	.word	0x3ff00000
 800c218:	bff00000 	.word	0xbff00000
 800c21c:	3fe59427 	.word	0x3fe59427

0800c220 <fabs>:
 800c220:	ec51 0b10 	vmov	r0, r1, d0
 800c224:	ee10 2a10 	vmov	r2, s0
 800c228:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c22c:	ec43 2b10 	vmov	d0, r2, r3
 800c230:	4770      	bx	lr
 800c232:	0000      	movs	r0, r0
 800c234:	0000      	movs	r0, r0
	...

0800c238 <floor>:
 800c238:	ec51 0b10 	vmov	r0, r1, d0
 800c23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c240:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c244:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c248:	2e13      	cmp	r6, #19
 800c24a:	ee10 5a10 	vmov	r5, s0
 800c24e:	ee10 8a10 	vmov	r8, s0
 800c252:	460c      	mov	r4, r1
 800c254:	dc32      	bgt.n	800c2bc <floor+0x84>
 800c256:	2e00      	cmp	r6, #0
 800c258:	da14      	bge.n	800c284 <floor+0x4c>
 800c25a:	a333      	add	r3, pc, #204	; (adr r3, 800c328 <floor+0xf0>)
 800c25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c260:	f7f4 f814 	bl	800028c <__adddf3>
 800c264:	2200      	movs	r2, #0
 800c266:	2300      	movs	r3, #0
 800c268:	f7f4 fc56 	bl	8000b18 <__aeabi_dcmpgt>
 800c26c:	b138      	cbz	r0, 800c27e <floor+0x46>
 800c26e:	2c00      	cmp	r4, #0
 800c270:	da57      	bge.n	800c322 <floor+0xea>
 800c272:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c276:	431d      	orrs	r5, r3
 800c278:	d001      	beq.n	800c27e <floor+0x46>
 800c27a:	4c2d      	ldr	r4, [pc, #180]	; (800c330 <floor+0xf8>)
 800c27c:	2500      	movs	r5, #0
 800c27e:	4621      	mov	r1, r4
 800c280:	4628      	mov	r0, r5
 800c282:	e025      	b.n	800c2d0 <floor+0x98>
 800c284:	4f2b      	ldr	r7, [pc, #172]	; (800c334 <floor+0xfc>)
 800c286:	4137      	asrs	r7, r6
 800c288:	ea01 0307 	and.w	r3, r1, r7
 800c28c:	4303      	orrs	r3, r0
 800c28e:	d01f      	beq.n	800c2d0 <floor+0x98>
 800c290:	a325      	add	r3, pc, #148	; (adr r3, 800c328 <floor+0xf0>)
 800c292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c296:	f7f3 fff9 	bl	800028c <__adddf3>
 800c29a:	2200      	movs	r2, #0
 800c29c:	2300      	movs	r3, #0
 800c29e:	f7f4 fc3b 	bl	8000b18 <__aeabi_dcmpgt>
 800c2a2:	2800      	cmp	r0, #0
 800c2a4:	d0eb      	beq.n	800c27e <floor+0x46>
 800c2a6:	2c00      	cmp	r4, #0
 800c2a8:	bfbe      	ittt	lt
 800c2aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c2ae:	fa43 f606 	asrlt.w	r6, r3, r6
 800c2b2:	19a4      	addlt	r4, r4, r6
 800c2b4:	ea24 0407 	bic.w	r4, r4, r7
 800c2b8:	2500      	movs	r5, #0
 800c2ba:	e7e0      	b.n	800c27e <floor+0x46>
 800c2bc:	2e33      	cmp	r6, #51	; 0x33
 800c2be:	dd0b      	ble.n	800c2d8 <floor+0xa0>
 800c2c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c2c4:	d104      	bne.n	800c2d0 <floor+0x98>
 800c2c6:	ee10 2a10 	vmov	r2, s0
 800c2ca:	460b      	mov	r3, r1
 800c2cc:	f7f3 ffde 	bl	800028c <__adddf3>
 800c2d0:	ec41 0b10 	vmov	d0, r0, r1
 800c2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2d8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c2dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c2e0:	fa23 f707 	lsr.w	r7, r3, r7
 800c2e4:	4207      	tst	r7, r0
 800c2e6:	d0f3      	beq.n	800c2d0 <floor+0x98>
 800c2e8:	a30f      	add	r3, pc, #60	; (adr r3, 800c328 <floor+0xf0>)
 800c2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ee:	f7f3 ffcd 	bl	800028c <__adddf3>
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	f7f4 fc0f 	bl	8000b18 <__aeabi_dcmpgt>
 800c2fa:	2800      	cmp	r0, #0
 800c2fc:	d0bf      	beq.n	800c27e <floor+0x46>
 800c2fe:	2c00      	cmp	r4, #0
 800c300:	da02      	bge.n	800c308 <floor+0xd0>
 800c302:	2e14      	cmp	r6, #20
 800c304:	d103      	bne.n	800c30e <floor+0xd6>
 800c306:	3401      	adds	r4, #1
 800c308:	ea25 0507 	bic.w	r5, r5, r7
 800c30c:	e7b7      	b.n	800c27e <floor+0x46>
 800c30e:	2301      	movs	r3, #1
 800c310:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c314:	fa03 f606 	lsl.w	r6, r3, r6
 800c318:	4435      	add	r5, r6
 800c31a:	4545      	cmp	r5, r8
 800c31c:	bf38      	it	cc
 800c31e:	18e4      	addcc	r4, r4, r3
 800c320:	e7f2      	b.n	800c308 <floor+0xd0>
 800c322:	2500      	movs	r5, #0
 800c324:	462c      	mov	r4, r5
 800c326:	e7aa      	b.n	800c27e <floor+0x46>
 800c328:	8800759c 	.word	0x8800759c
 800c32c:	7e37e43c 	.word	0x7e37e43c
 800c330:	bff00000 	.word	0xbff00000
 800c334:	000fffff 	.word	0x000fffff

0800c338 <scalbn>:
 800c338:	b570      	push	{r4, r5, r6, lr}
 800c33a:	ec55 4b10 	vmov	r4, r5, d0
 800c33e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c342:	4606      	mov	r6, r0
 800c344:	462b      	mov	r3, r5
 800c346:	b99a      	cbnz	r2, 800c370 <scalbn+0x38>
 800c348:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c34c:	4323      	orrs	r3, r4
 800c34e:	d036      	beq.n	800c3be <scalbn+0x86>
 800c350:	4b39      	ldr	r3, [pc, #228]	; (800c438 <scalbn+0x100>)
 800c352:	4629      	mov	r1, r5
 800c354:	ee10 0a10 	vmov	r0, s0
 800c358:	2200      	movs	r2, #0
 800c35a:	f7f4 f94d 	bl	80005f8 <__aeabi_dmul>
 800c35e:	4b37      	ldr	r3, [pc, #220]	; (800c43c <scalbn+0x104>)
 800c360:	429e      	cmp	r6, r3
 800c362:	4604      	mov	r4, r0
 800c364:	460d      	mov	r5, r1
 800c366:	da10      	bge.n	800c38a <scalbn+0x52>
 800c368:	a32b      	add	r3, pc, #172	; (adr r3, 800c418 <scalbn+0xe0>)
 800c36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36e:	e03a      	b.n	800c3e6 <scalbn+0xae>
 800c370:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c374:	428a      	cmp	r2, r1
 800c376:	d10c      	bne.n	800c392 <scalbn+0x5a>
 800c378:	ee10 2a10 	vmov	r2, s0
 800c37c:	4620      	mov	r0, r4
 800c37e:	4629      	mov	r1, r5
 800c380:	f7f3 ff84 	bl	800028c <__adddf3>
 800c384:	4604      	mov	r4, r0
 800c386:	460d      	mov	r5, r1
 800c388:	e019      	b.n	800c3be <scalbn+0x86>
 800c38a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c38e:	460b      	mov	r3, r1
 800c390:	3a36      	subs	r2, #54	; 0x36
 800c392:	4432      	add	r2, r6
 800c394:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c398:	428a      	cmp	r2, r1
 800c39a:	dd08      	ble.n	800c3ae <scalbn+0x76>
 800c39c:	2d00      	cmp	r5, #0
 800c39e:	a120      	add	r1, pc, #128	; (adr r1, 800c420 <scalbn+0xe8>)
 800c3a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3a4:	da1c      	bge.n	800c3e0 <scalbn+0xa8>
 800c3a6:	a120      	add	r1, pc, #128	; (adr r1, 800c428 <scalbn+0xf0>)
 800c3a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3ac:	e018      	b.n	800c3e0 <scalbn+0xa8>
 800c3ae:	2a00      	cmp	r2, #0
 800c3b0:	dd08      	ble.n	800c3c4 <scalbn+0x8c>
 800c3b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c3b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c3ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c3be:	ec45 4b10 	vmov	d0, r4, r5
 800c3c2:	bd70      	pop	{r4, r5, r6, pc}
 800c3c4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c3c8:	da19      	bge.n	800c3fe <scalbn+0xc6>
 800c3ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c3ce:	429e      	cmp	r6, r3
 800c3d0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c3d4:	dd0a      	ble.n	800c3ec <scalbn+0xb4>
 800c3d6:	a112      	add	r1, pc, #72	; (adr r1, 800c420 <scalbn+0xe8>)
 800c3d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d1e2      	bne.n	800c3a6 <scalbn+0x6e>
 800c3e0:	a30f      	add	r3, pc, #60	; (adr r3, 800c420 <scalbn+0xe8>)
 800c3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e6:	f7f4 f907 	bl	80005f8 <__aeabi_dmul>
 800c3ea:	e7cb      	b.n	800c384 <scalbn+0x4c>
 800c3ec:	a10a      	add	r1, pc, #40	; (adr r1, 800c418 <scalbn+0xe0>)
 800c3ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d0b8      	beq.n	800c368 <scalbn+0x30>
 800c3f6:	a10e      	add	r1, pc, #56	; (adr r1, 800c430 <scalbn+0xf8>)
 800c3f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3fc:	e7b4      	b.n	800c368 <scalbn+0x30>
 800c3fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c402:	3236      	adds	r2, #54	; 0x36
 800c404:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c408:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c40c:	4620      	mov	r0, r4
 800c40e:	4b0c      	ldr	r3, [pc, #48]	; (800c440 <scalbn+0x108>)
 800c410:	2200      	movs	r2, #0
 800c412:	e7e8      	b.n	800c3e6 <scalbn+0xae>
 800c414:	f3af 8000 	nop.w
 800c418:	c2f8f359 	.word	0xc2f8f359
 800c41c:	01a56e1f 	.word	0x01a56e1f
 800c420:	8800759c 	.word	0x8800759c
 800c424:	7e37e43c 	.word	0x7e37e43c
 800c428:	8800759c 	.word	0x8800759c
 800c42c:	fe37e43c 	.word	0xfe37e43c
 800c430:	c2f8f359 	.word	0xc2f8f359
 800c434:	81a56e1f 	.word	0x81a56e1f
 800c438:	43500000 	.word	0x43500000
 800c43c:	ffff3cb0 	.word	0xffff3cb0
 800c440:	3c900000 	.word	0x3c900000

0800c444 <_init>:
 800c444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c446:	bf00      	nop
 800c448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c44a:	bc08      	pop	{r3}
 800c44c:	469e      	mov	lr, r3
 800c44e:	4770      	bx	lr

0800c450 <_fini>:
 800c450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c452:	bf00      	nop
 800c454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c456:	bc08      	pop	{r3}
 800c458:	469e      	mov	lr, r3
 800c45a:	4770      	bx	lr
