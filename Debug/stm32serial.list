
stm32serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d28  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e68  08007ec8  08007ec8  00017ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d30  08008d30  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08008d30  08008d30  00018d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d38  08008d38  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d38  08008d38  00018d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d3c  08008d3c  00018d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08008d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000209c  200001ec  08008f2c  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002288  08008f2c  00022288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ea8  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035ad  00000000  00000000  000370c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  0003a678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018e13  00000000  00000000  0003b4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000134dc  00000000  00000000  00054303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008a06e  00000000  00000000  000677df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000f184d  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000d20  00000000  00000000  000f18a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003fb0  00000000  00000000  000f25c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007eb0 	.word	0x08007eb0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	08007eb0 	.word	0x08007eb0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <writeToDisplay>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void writeToDisplay(char* str){
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	 //HAL_Delay(1000);

	    // ssd1306_Fill(Black);
	     ssd1306_UpdateScreen(&hi2c1);
 8000580:	4809      	ldr	r0, [pc, #36]	; (80005a8 <writeToDisplay+0x30>)
 8000582:	f000 faff 	bl	8000b84 <ssd1306_UpdateScreen>

	    //HAL_Delay(1000);

	     // Write data to local screenbuffer
	     ssd1306_SetCursor(0, 0);
 8000586:	2100      	movs	r1, #0
 8000588:	2000      	movs	r0, #0
 800058a:	f000 fc33 	bl	8000df4 <ssd1306_SetCursor>
	     ssd1306_WriteString(str, Font_11x18, White);
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <writeToDisplay+0x34>)
 8000590:	2301      	movs	r3, #1
 8000592:	ca06      	ldmia	r2, {r1, r2}
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f000 fc07 	bl	8000da8 <ssd1306_WriteString>
//	             ssd1306_DrawPixel(100+i, 0+j, White);
//	         }
//	     }

	     // Copy all data from local screenbuffer to the screen
	     ssd1306_UpdateScreen(&hi2c1);
 800059a:	4803      	ldr	r0, [pc, #12]	; (80005a8 <writeToDisplay+0x30>)
 800059c:	f000 faf2 	bl	8000b84 <ssd1306_UpdateScreen>


}
 80005a0:	bf00      	nop
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000840 	.word	0x20000840
 80005ac:	20000000 	.word	0x20000000

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b5b0      	push	{r4, r5, r7, lr}
 80005b2:	b092      	sub	sp, #72	; 0x48
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char msg[11] = "No Data";
 80005b6:	4a45      	ldr	r2, [pc, #276]	; (80006cc <main+0x11c>)
 80005b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005c0:	e883 0003 	stmia.w	r3, {r0, r1}
 80005c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005c8:	2100      	movs	r1, #0
 80005ca:	460a      	mov	r2, r1
 80005cc:	801a      	strh	r2, [r3, #0]
 80005ce:	460a      	mov	r2, r1
 80005d0:	709a      	strb	r2, [r3, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fd3d 	bl	8001050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f87f 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 f913 	bl	8000804 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005de:	f006 fa69 	bl	8006ab4 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80005e2:	f000 f8e1 	bl	80007a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  // Init lcd using one of the stm32HAL i2c typedefs
   if (ssd1306_Init(&hi2c1) != 0) {
 80005e6:	483a      	ldr	r0, [pc, #232]	; (80006d0 <main+0x120>)
 80005e8:	f000 f988 	bl	80008fc <ssd1306_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <main+0x46>
     Error_Handler();
 80005f2:	f000 f967 	bl	80008c4 <Error_Handler>
   }


   writeToDisplay(msg);
 80005f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff ffbc 	bl	8000578 <writeToDisplay>




   char message[20] = {0};
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
 8000604:	f107 0320 	add.w	r3, r7, #32
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t bytesAvailable = CDC_GetRxBufferBytesAvailable_FS();
 8000612:	f006 fbaf 	bl	8006d74 <CDC_GetRxBufferBytesAvailable_FS>
 8000616:	4603      	mov	r3, r0
 8000618:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      if(bytesAvailable != 0){
 800061c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000620:	2b00      	cmp	r3, #0
 8000622:	d0f6      	beq.n	8000612 <main+0x62>
 8000624:	466b      	mov	r3, sp
 8000626:	461d      	mov	r5, r3
    	  uint8_t raw_string_buffer[bytesAvailable +1];
 8000628:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800062c:	1c5c      	adds	r4, r3, #1
 800062e:	1e63      	subs	r3, r4, #1
 8000630:	643b      	str	r3, [r7, #64]	; 0x40
 8000632:	4623      	mov	r3, r4
 8000634:	4618      	mov	r0, r3
 8000636:	f04f 0100 	mov.w	r1, #0
 800063a:	f04f 0200 	mov.w	r2, #0
 800063e:	f04f 0300 	mov.w	r3, #0
 8000642:	00cb      	lsls	r3, r1, #3
 8000644:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000648:	00c2      	lsls	r2, r0, #3
 800064a:	4623      	mov	r3, r4
 800064c:	4618      	mov	r0, r3
 800064e:	f04f 0100 	mov.w	r1, #0
 8000652:	f04f 0200 	mov.w	r2, #0
 8000656:	f04f 0300 	mov.w	r3, #0
 800065a:	00cb      	lsls	r3, r1, #3
 800065c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000660:	00c2      	lsls	r2, r0, #3
 8000662:	4623      	mov	r3, r4
 8000664:	3307      	adds	r3, #7
 8000666:	08db      	lsrs	r3, r3, #3
 8000668:	00db      	lsls	r3, r3, #3
 800066a:	ebad 0d03 	sub.w	sp, sp, r3
 800066e:	466b      	mov	r3, sp
 8000670:	3300      	adds	r3, #0
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
    	  int system_values[7];
    	  memset(raw_string_buffer, 0, bytesAvailable);  // clear the buffer
 8000674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000676:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f006 ffef 	bl	8007660 <memset>
    	  CDC_ReadRxBuffer_FS(raw_string_buffer, bytesAvailable);
 8000682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000684:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000688:	4611      	mov	r1, r2
 800068a:	4618      	mov	r0, r3
 800068c:	f006 fb60 	bl	8006d50 <CDC_ReadRxBuffer_FS>
    	  raw_string_buffer[bytesAvailable] = '\0';
 8000690:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000694:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000696:	2100      	movs	r1, #0
 8000698:	54d1      	strb	r1, [r2, r3]
    	 // Monitor_Get_Values(raw_string_buffer, sizeof raw_string_buffer, system_values); //TODO: error handling

    	  sprintf(message, "v: %d ", raw_string_buffer[0]);
 800069a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	490b      	ldr	r1, [pc, #44]	; (80006d4 <main+0x124>)
 80006a6:	4618      	mov	r0, r3
 80006a8:	f006 ffe2 	bl	8007670 <siprintf>





    	   writeToDisplay(message);
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ff61 	bl	8000578 <writeToDisplay>
    	   memset(message, 0, 20);
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	2214      	movs	r2, #20
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f006 ffce 	bl	8007660 <memset>
    	  CDC_FlushRxBuffer_FS();
 80006c4:	f006 fb6e 	bl	8006da4 <CDC_FlushRxBuffer_FS>
 80006c8:	46ad      	mov	sp, r5
  {
 80006ca:	e7a2      	b.n	8000612 <main+0x62>
 80006cc:	08007ed4 	.word	0x08007ed4
 80006d0:	20000840 	.word	0x20000840
 80006d4:	08007ecc 	.word	0x08007ecc

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	; 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f006 ffba 	bl	8007660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b27      	ldr	r3, [pc, #156]	; (80007a0 <SystemClock_Config+0xc8>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a26      	ldr	r2, [pc, #152]	; (80007a0 <SystemClock_Config+0xc8>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b24      	ldr	r3, [pc, #144]	; (80007a0 <SystemClock_Config+0xc8>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <SystemClock_Config+0xcc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a20      	ldr	r2, [pc, #128]	; (80007a4 <SystemClock_Config+0xcc>)
 8000722:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <SystemClock_Config+0xcc>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000734:	2301      	movs	r3, #1
 8000736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000738:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073e:	2302      	movs	r3, #2
 8000740:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000742:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000748:	2319      	movs	r3, #25
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800074c:	23c0      	movs	r3, #192	; 0xc0
 800074e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000754:	2304      	movs	r3, #4
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	4618      	mov	r0, r3
 800075e:	f002 fd9b 	bl	8003298 <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000768:	f000 f8ac 	bl	80008c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
 800076e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000770:	2302      	movs	r3, #2
 8000772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2103      	movs	r1, #3
 8000788:	4618      	mov	r0, r3
 800078a:	f002 fffd 	bl	8003788 <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000794:	f000 f896 	bl	80008c4 <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3750      	adds	r7, #80	; 0x50
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007ae:	4a13      	ldr	r2, [pc, #76]	; (80007fc <MX_I2C1_Init+0x54>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007b4:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_I2C1_Init+0x58>)
 80007b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_I2C1_Init+0x50>)
 80007e6:	f000 ff79 	bl	80016dc <HAL_I2C_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007f0:	f000 f868 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000840 	.word	0x20000840
 80007fc:	40005400 	.word	0x40005400
 8000800:	000186a0 	.word	0x000186a0

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	4b27      	ldr	r3, [pc, #156]	; (80008bc <MX_GPIO_Init+0xb8>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a26      	ldr	r2, [pc, #152]	; (80008bc <MX_GPIO_Init+0xb8>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b24      	ldr	r3, [pc, #144]	; (80008bc <MX_GPIO_Init+0xb8>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b20      	ldr	r3, [pc, #128]	; (80008bc <MX_GPIO_Init+0xb8>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a1f      	ldr	r2, [pc, #124]	; (80008bc <MX_GPIO_Init+0xb8>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <MX_GPIO_Init+0xb8>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b19      	ldr	r3, [pc, #100]	; (80008bc <MX_GPIO_Init+0xb8>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a18      	ldr	r2, [pc, #96]	; (80008bc <MX_GPIO_Init+0xb8>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <MX_GPIO_Init+0xb8>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_GPIO_Init+0xb8>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a11      	ldr	r2, [pc, #68]	; (80008bc <MX_GPIO_Init+0xb8>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_GPIO_Init+0xb8>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000890:	480b      	ldr	r0, [pc, #44]	; (80008c0 <MX_GPIO_Init+0xbc>)
 8000892:	f000 ff09 	bl	80016a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_GPIO_Init+0xbc>)
 80008b0:	f000 fd76 	bl	80013a0 <HAL_GPIO_Init>

}
 80008b4:	bf00      	nop
 80008b6:	3728      	adds	r7, #40	; 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020400 	.word	0x40020400

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	e7fe      	b.n	80008cc <Error_Handler+0x8>

080008ce <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b086      	sub	sp, #24
 80008d2:	af04      	add	r7, sp, #16
 80008d4:	6078      	str	r0, [r7, #4]
 80008d6:	460b      	mov	r3, r1
 80008d8:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80008da:	230a      	movs	r3, #10
 80008dc:	9302      	str	r3, [sp, #8]
 80008de:	2301      	movs	r3, #1
 80008e0:	9301      	str	r3, [sp, #4]
 80008e2:	1cfb      	adds	r3, r7, #3
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	2301      	movs	r3, #1
 80008e8:	2200      	movs	r2, #0
 80008ea:	2178      	movs	r1, #120	; 0x78
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f001 f839 	bl	8001964 <HAL_I2C_Mem_Write>
 80008f2:	4603      	mov	r3, r0
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8000904:	2064      	movs	r0, #100	; 0x64
 8000906:	f000 fc15 	bl	8001134 <HAL_Delay>
    int status = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 800090e:	21ae      	movs	r1, #174	; 0xae
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f7ff ffdc 	bl	80008ce <ssd1306_WriteCommand>
 8000916:	4603      	mov	r3, r0
 8000918:	461a      	mov	r2, r3
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	4413      	add	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8000920:	2120      	movs	r1, #32
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff ffd3 	bl	80008ce <ssd1306_WriteCommand>
 8000928:	4603      	mov	r3, r0
 800092a:	461a      	mov	r2, r3
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	4413      	add	r3, r2
 8000930:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000932:	2110      	movs	r1, #16
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff ffca 	bl	80008ce <ssd1306_WriteCommand>
 800093a:	4603      	mov	r3, r0
 800093c:	461a      	mov	r2, r3
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	4413      	add	r3, r2
 8000942:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8000944:	21b0      	movs	r1, #176	; 0xb0
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff ffc1 	bl	80008ce <ssd1306_WriteCommand>
 800094c:	4603      	mov	r3, r0
 800094e:	461a      	mov	r2, r3
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	4413      	add	r3, r2
 8000954:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8000956:	21c8      	movs	r1, #200	; 0xc8
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff ffb8 	bl	80008ce <ssd1306_WriteCommand>
 800095e:	4603      	mov	r3, r0
 8000960:	461a      	mov	r2, r3
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	4413      	add	r3, r2
 8000966:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8000968:	2100      	movs	r1, #0
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff ffaf 	bl	80008ce <ssd1306_WriteCommand>
 8000970:	4603      	mov	r3, r0
 8000972:	461a      	mov	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	4413      	add	r3, r2
 8000978:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 800097a:	2110      	movs	r1, #16
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff ffa6 	bl	80008ce <ssd1306_WriteCommand>
 8000982:	4603      	mov	r3, r0
 8000984:	461a      	mov	r2, r3
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	4413      	add	r3, r2
 800098a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 800098c:	2140      	movs	r1, #64	; 0x40
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f7ff ff9d 	bl	80008ce <ssd1306_WriteCommand>
 8000994:	4603      	mov	r3, r0
 8000996:	461a      	mov	r2, r3
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	4413      	add	r3, r2
 800099c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 800099e:	2181      	movs	r1, #129	; 0x81
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff ff94 	bl	80008ce <ssd1306_WriteCommand>
 80009a6:	4603      	mov	r3, r0
 80009a8:	461a      	mov	r2, r3
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	4413      	add	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 80009b0:	21ff      	movs	r1, #255	; 0xff
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff ff8b 	bl	80008ce <ssd1306_WriteCommand>
 80009b8:	4603      	mov	r3, r0
 80009ba:	461a      	mov	r2, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	4413      	add	r3, r2
 80009c0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 80009c2:	21a1      	movs	r1, #161	; 0xa1
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f7ff ff82 	bl	80008ce <ssd1306_WriteCommand>
 80009ca:	4603      	mov	r3, r0
 80009cc:	461a      	mov	r2, r3
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	4413      	add	r3, r2
 80009d2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 80009d4:	21a6      	movs	r1, #166	; 0xa6
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff ff79 	bl	80008ce <ssd1306_WriteCommand>
 80009dc:	4603      	mov	r3, r0
 80009de:	461a      	mov	r2, r3
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	4413      	add	r3, r2
 80009e4:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 80009e6:	21a8      	movs	r1, #168	; 0xa8
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f7ff ff70 	bl	80008ce <ssd1306_WriteCommand>
 80009ee:	4603      	mov	r3, r0
 80009f0:	461a      	mov	r2, r3
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	4413      	add	r3, r2
 80009f6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 80009f8:	213f      	movs	r1, #63	; 0x3f
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff ff67 	bl	80008ce <ssd1306_WriteCommand>
 8000a00:	4603      	mov	r3, r0
 8000a02:	461a      	mov	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	4413      	add	r3, r2
 8000a08:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000a0a:	21a4      	movs	r1, #164	; 0xa4
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f7ff ff5e 	bl	80008ce <ssd1306_WriteCommand>
 8000a12:	4603      	mov	r3, r0
 8000a14:	461a      	mov	r2, r3
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	4413      	add	r3, r2
 8000a1a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8000a1c:	21d3      	movs	r1, #211	; 0xd3
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff ff55 	bl	80008ce <ssd1306_WriteCommand>
 8000a24:	4603      	mov	r3, r0
 8000a26:	461a      	mov	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8000a2e:	2100      	movs	r1, #0
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff ff4c 	bl	80008ce <ssd1306_WriteCommand>
 8000a36:	4603      	mov	r3, r0
 8000a38:	461a      	mov	r2, r3
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8000a40:	21d5      	movs	r1, #213	; 0xd5
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff ff43 	bl	80008ce <ssd1306_WriteCommand>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	4413      	add	r3, r2
 8000a50:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8000a52:	21f0      	movs	r1, #240	; 0xf0
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff ff3a 	bl	80008ce <ssd1306_WriteCommand>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	4413      	add	r3, r2
 8000a62:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8000a64:	21d9      	movs	r1, #217	; 0xd9
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff ff31 	bl	80008ce <ssd1306_WriteCommand>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	461a      	mov	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8000a76:	2122      	movs	r1, #34	; 0x22
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff ff28 	bl	80008ce <ssd1306_WriteCommand>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	461a      	mov	r2, r3
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	4413      	add	r3, r2
 8000a86:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8000a88:	21da      	movs	r1, #218	; 0xda
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f7ff ff1f 	bl	80008ce <ssd1306_WriteCommand>
 8000a90:	4603      	mov	r3, r0
 8000a92:	461a      	mov	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4413      	add	r3, r2
 8000a98:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8000a9a:	2112      	movs	r1, #18
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ff16 	bl	80008ce <ssd1306_WriteCommand>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8000aac:	21db      	movs	r1, #219	; 0xdb
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff ff0d 	bl	80008ce <ssd1306_WriteCommand>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	4413      	add	r3, r2
 8000abc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8000abe:	2120      	movs	r1, #32
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ff04 	bl	80008ce <ssd1306_WriteCommand>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	461a      	mov	r2, r3
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	4413      	add	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8000ad0:	218d      	movs	r1, #141	; 0x8d
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f7ff fefb 	bl	80008ce <ssd1306_WriteCommand>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	461a      	mov	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4413      	add	r3, r2
 8000ae0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8000ae2:	2114      	movs	r1, #20
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff fef2 	bl	80008ce <ssd1306_WriteCommand>
 8000aea:	4603      	mov	r3, r0
 8000aec:	461a      	mov	r2, r3
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	4413      	add	r3, r2
 8000af2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8000af4:	21af      	movs	r1, #175	; 0xaf
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff fee9 	bl	80008ce <ssd1306_WriteCommand>
 8000afc:	4603      	mov	r3, r0
 8000afe:	461a      	mov	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4413      	add	r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <ssd1306_Init+0x214>
        return 1;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e00f      	b.n	8000b30 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8000b10:	2000      	movs	r0, #0
 8000b12:	f000 f813 	bl	8000b3c <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f000 f834 	bl	8000b84 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <ssd1306_Init+0x23c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <ssd1306_Init+0x23c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <ssd1306_Init+0x23c>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	715a      	strb	r2, [r3, #5]

    return 0;
 8000b2e:	2300      	movs	r3, #0
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000608 	.word	0x20000608

08000b3c <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	e00d      	b.n	8000b68 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d101      	bne.n	8000b56 <ssd1306_Fill+0x1a>
 8000b52:	2100      	movs	r1, #0
 8000b54:	e000      	b.n	8000b58 <ssd1306_Fill+0x1c>
 8000b56:	21ff      	movs	r1, #255	; 0xff
 8000b58:	4a09      	ldr	r2, [pc, #36]	; (8000b80 <ssd1306_Fill+0x44>)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	460a      	mov	r2, r1
 8000b60:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	3301      	adds	r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b6e:	d3ed      	bcc.n	8000b4c <ssd1306_Fill+0x10>
    }
}
 8000b70:	bf00      	nop
 8000b72:	bf00      	nop
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000208 	.word	0x20000208

08000b84 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b088      	sub	sp, #32
 8000b88:	af04      	add	r7, sp, #16
 8000b8a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	73fb      	strb	r3, [r7, #15]
 8000b90:	e020      	b.n	8000bd4 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	3b50      	subs	r3, #80	; 0x50
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	4619      	mov	r1, r3
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff fe97 	bl	80008ce <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff fe93 	bl	80008ce <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8000ba8:	2110      	movs	r1, #16
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff fe8f 	bl	80008ce <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	01db      	lsls	r3, r3, #7
 8000bb4:	4a0b      	ldr	r2, [pc, #44]	; (8000be4 <ssd1306_UpdateScreen+0x60>)
 8000bb6:	4413      	add	r3, r2
 8000bb8:	2264      	movs	r2, #100	; 0x64
 8000bba:	9202      	str	r2, [sp, #8]
 8000bbc:	2280      	movs	r2, #128	; 0x80
 8000bbe:	9201      	str	r2, [sp, #4]
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	2240      	movs	r2, #64	; 0x40
 8000bc6:	2178      	movs	r1, #120	; 0x78
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f000 fecb 	bl	8001964 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	73fb      	strb	r3, [r7, #15]
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	2b07      	cmp	r3, #7
 8000bd8:	d9db      	bls.n	8000b92 <ssd1306_UpdateScreen+0xe>
    }
}
 8000bda:	bf00      	nop
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000208 	.word	0x20000208

08000be8 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	71bb      	strb	r3, [r7, #6]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	db48      	blt.n	8000c94 <ssd1306_DrawPixel+0xac>
 8000c02:	79bb      	ldrb	r3, [r7, #6]
 8000c04:	2b3f      	cmp	r3, #63	; 0x3f
 8000c06:	d845      	bhi.n	8000c94 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8000c08:	4b25      	ldr	r3, [pc, #148]	; (8000ca0 <ssd1306_DrawPixel+0xb8>)
 8000c0a:	791b      	ldrb	r3, [r3, #4]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d006      	beq.n	8000c1e <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8000c10:	797b      	ldrb	r3, [r7, #5]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	bf0c      	ite	eq
 8000c16:	2301      	moveq	r3, #1
 8000c18:	2300      	movne	r3, #0
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8000c1e:	797b      	ldrb	r3, [r7, #5]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d11a      	bne.n	8000c5a <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000c24:	79fa      	ldrb	r2, [r7, #7]
 8000c26:	79bb      	ldrb	r3, [r7, #6]
 8000c28:	08db      	lsrs	r3, r3, #3
 8000c2a:	b2d8      	uxtb	r0, r3
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	01db      	lsls	r3, r3, #7
 8000c30:	4413      	add	r3, r2
 8000c32:	4a1c      	ldr	r2, [pc, #112]	; (8000ca4 <ssd1306_DrawPixel+0xbc>)
 8000c34:	5cd3      	ldrb	r3, [r2, r3]
 8000c36:	b25a      	sxtb	r2, r3
 8000c38:	79bb      	ldrb	r3, [r7, #6]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	2101      	movs	r1, #1
 8000c40:	fa01 f303 	lsl.w	r3, r1, r3
 8000c44:	b25b      	sxtb	r3, r3
 8000c46:	4313      	orrs	r3, r2
 8000c48:	b259      	sxtb	r1, r3
 8000c4a:	79fa      	ldrb	r2, [r7, #7]
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	01db      	lsls	r3, r3, #7
 8000c50:	4413      	add	r3, r2
 8000c52:	b2c9      	uxtb	r1, r1
 8000c54:	4a13      	ldr	r2, [pc, #76]	; (8000ca4 <ssd1306_DrawPixel+0xbc>)
 8000c56:	54d1      	strb	r1, [r2, r3]
 8000c58:	e01d      	b.n	8000c96 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000c5a:	79fa      	ldrb	r2, [r7, #7]
 8000c5c:	79bb      	ldrb	r3, [r7, #6]
 8000c5e:	08db      	lsrs	r3, r3, #3
 8000c60:	b2d8      	uxtb	r0, r3
 8000c62:	4603      	mov	r3, r0
 8000c64:	01db      	lsls	r3, r3, #7
 8000c66:	4413      	add	r3, r2
 8000c68:	4a0e      	ldr	r2, [pc, #56]	; (8000ca4 <ssd1306_DrawPixel+0xbc>)
 8000c6a:	5cd3      	ldrb	r3, [r2, r3]
 8000c6c:	b25a      	sxtb	r2, r3
 8000c6e:	79bb      	ldrb	r3, [r7, #6]
 8000c70:	f003 0307 	and.w	r3, r3, #7
 8000c74:	2101      	movs	r1, #1
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	b25b      	sxtb	r3, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	b25b      	sxtb	r3, r3
 8000c80:	4013      	ands	r3, r2
 8000c82:	b259      	sxtb	r1, r3
 8000c84:	79fa      	ldrb	r2, [r7, #7]
 8000c86:	4603      	mov	r3, r0
 8000c88:	01db      	lsls	r3, r3, #7
 8000c8a:	4413      	add	r3, r2
 8000c8c:	b2c9      	uxtb	r1, r1
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <ssd1306_DrawPixel+0xbc>)
 8000c90:	54d1      	strb	r1, [r2, r3]
 8000c92:	e000      	b.n	8000c96 <ssd1306_DrawPixel+0xae>
        return;
 8000c94:	bf00      	nop
    }
}
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	20000608 	.word	0x20000608
 8000ca4:	20000208 	.word	0x20000208

08000ca8 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	1d38      	adds	r0, r7, #4
 8000cb2:	e880 0006 	stmia.w	r0, {r1, r2}
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	4623      	mov	r3, r4
 8000cba:	73fb      	strb	r3, [r7, #15]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000cc0:	4b38      	ldr	r3, [pc, #224]	; (8000da4 <ssd1306_WriteChar+0xfc>)
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	793b      	ldrb	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	2b7f      	cmp	r3, #127	; 0x7f
 8000ccc:	dc06      	bgt.n	8000cdc <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8000cce:	4b35      	ldr	r3, [pc, #212]	; (8000da4 <ssd1306_WriteChar+0xfc>)
 8000cd0:	885b      	ldrh	r3, [r3, #2]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	797b      	ldrb	r3, [r7, #5]
 8000cd6:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000cd8:	2b3f      	cmp	r3, #63	; 0x3f
 8000cda:	dd01      	ble.n	8000ce0 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	e05d      	b.n	8000d9c <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
 8000ce4:	e04c      	b.n	8000d80 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	3b20      	subs	r3, #32
 8000cec:	7979      	ldrb	r1, [r7, #5]
 8000cee:	fb01 f303 	mul.w	r3, r1, r3
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	440b      	add	r3, r1
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	4413      	add	r3, r2
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	61bb      	str	r3, [r7, #24]
 8000d04:	e034      	b.n	8000d70 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8000d06:	697a      	ldr	r2, [r7, #20]
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d012      	beq.n	8000d3c <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000d16:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <ssd1306_WriteChar+0xfc>)
 8000d18:	881b      	ldrh	r3, [r3, #0]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	4413      	add	r3, r2
 8000d22:	b2d8      	uxtb	r0, r3
 8000d24:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <ssd1306_WriteChar+0xfc>)
 8000d26:	885b      	ldrh	r3, [r3, #2]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	4413      	add	r3, r2
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	7bba      	ldrb	r2, [r7, #14]
 8000d34:	4619      	mov	r1, r3
 8000d36:	f7ff ff57 	bl	8000be8 <ssd1306_DrawPixel>
 8000d3a:	e016      	b.n	8000d6a <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000d3c:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <ssd1306_WriteChar+0xfc>)
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	4413      	add	r3, r2
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <ssd1306_WriteChar+0xfc>)
 8000d4c:	885b      	ldrh	r3, [r3, #2]
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	4413      	add	r3, r2
 8000d56:	b2d9      	uxtb	r1, r3
 8000d58:	7bbb      	ldrb	r3, [r7, #14]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	bf0c      	ite	eq
 8000d5e:	2301      	moveq	r3, #1
 8000d60:	2300      	movne	r3, #0
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	461a      	mov	r2, r3
 8000d66:	f7ff ff3f 	bl	8000be8 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	61bb      	str	r3, [r7, #24]
 8000d70:	793b      	ldrb	r3, [r7, #4]
 8000d72:	461a      	mov	r2, r3
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d3c5      	bcc.n	8000d06 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	61fb      	str	r3, [r7, #28]
 8000d80:	797b      	ldrb	r3, [r7, #5]
 8000d82:	461a      	mov	r2, r3
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d3ad      	bcc.n	8000ce6 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <ssd1306_WriteChar+0xfc>)
 8000d8c:	881a      	ldrh	r2, [r3, #0]
 8000d8e:	793b      	ldrb	r3, [r7, #4]
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	4413      	add	r3, r2
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <ssd1306_WriteChar+0xfc>)
 8000d98:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3724      	adds	r7, #36	; 0x24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd90      	pop	{r4, r7, pc}
 8000da4:	20000608 	.word	0x20000608

08000da8 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	1d38      	adds	r0, r7, #4
 8000db2:	e880 0006 	stmia.w	r0, {r1, r2}
 8000db6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8000db8:	e012      	b.n	8000de0 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	7818      	ldrb	r0, [r3, #0]
 8000dbe:	78fb      	ldrb	r3, [r7, #3]
 8000dc0:	1d3a      	adds	r2, r7, #4
 8000dc2:	ca06      	ldmia	r2, {r1, r2}
 8000dc4:	f7ff ff70 	bl	8000ca8 <ssd1306_WriteChar>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d002      	beq.n	8000dda <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	e008      	b.n	8000dec <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
    while (*str)
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1e8      	bne.n	8000dba <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	781b      	ldrb	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	460a      	mov	r2, r1
 8000dfe:	71fb      	strb	r3, [r7, #7]
 8000e00:	4613      	mov	r3, r2
 8000e02:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <ssd1306_SetCursor+0x2c>)
 8000e0a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000e0c:	79bb      	ldrb	r3, [r7, #6]
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <ssd1306_SetCursor+0x2c>)
 8000e12:	805a      	strh	r2, [r3, #2]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	20000608 	.word	0x20000608

08000e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e38:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	603b      	str	r3, [r7, #0]
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	4a08      	ldr	r2, [pc, #32]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e54:	6413      	str	r3, [r2, #64]	; 0x40
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800

08000e74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	; 0x28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a19      	ldr	r2, [pc, #100]	; (8000ef8 <HAL_I2C_MspInit+0x84>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d12c      	bne.n	8000ef0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <HAL_I2C_MspInit+0x88>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a17      	ldr	r2, [pc, #92]	; (8000efc <HAL_I2C_MspInit+0x88>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <HAL_I2C_MspInit+0x88>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb8:	2312      	movs	r3, #18
 8000eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	480c      	ldr	r0, [pc, #48]	; (8000f00 <HAL_I2C_MspInit+0x8c>)
 8000ed0:	f000 fa66 	bl	80013a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <HAL_I2C_MspInit+0x88>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	4a07      	ldr	r2, [pc, #28]	; (8000efc <HAL_I2C_MspInit+0x88>)
 8000ede:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ee2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <HAL_I2C_MspInit+0x88>)
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ef0:	bf00      	nop
 8000ef2:	3728      	adds	r7, #40	; 0x28
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40005400 	.word	0x40005400
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020400 	.word	0x40020400

08000f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <NMI_Handler+0x4>

08000f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <HardFault_Handler+0x4>

08000f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <MemManage_Handler+0x4>

08000f16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <BusFault_Handler+0x4>

08000f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <UsageFault_Handler+0x4>

08000f22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f50:	f000 f8d0 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <OTG_FS_IRQHandler+0x10>)
 8000f5e:	f001 f968 	bl	8002232 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20001e70 	.word	0x20001e70

08000f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f74:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <_sbrk+0x5c>)
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <_sbrk+0x60>)
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <_sbrk+0x64>)
 8000f8a:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <_sbrk+0x68>)
 8000f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <_sbrk+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d207      	bcs.n	8000fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f9c:	f006 fb28 	bl	80075f0 <__errno>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000faa:	e009      	b.n	8000fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <_sbrk+0x64>)
 8000fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20020000 	.word	0x20020000
 8000fcc:	00000400 	.word	0x00000400
 8000fd0:	20000610 	.word	0x20000610
 8000fd4:	20002288 	.word	0x20002288

08000fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <SystemInit+0x20>)
 8000fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <SystemInit+0x20>)
 8000fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001034 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001002:	490e      	ldr	r1, [pc, #56]	; (800103c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001004:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001018:	4c0b      	ldr	r4, [pc, #44]	; (8001048 <LoopFillZerobss+0x26>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001026:	f7ff ffd7 	bl	8000fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102a:	f006 fae7 	bl	80075fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102e:	f7ff fabf 	bl	80005b0 <main>
  bx  lr    
 8001032:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001034:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001040:	08008d40 	.word	0x08008d40
  ldr r2, =_sbss
 8001044:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001048:	20002288 	.word	0x20002288

0800104c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC_IRQHandler>
	...

08001050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <HAL_Init+0x40>)
 800105a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800105e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <HAL_Init+0x40>)
 8001066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <HAL_Init+0x40>)
 8001072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 f94f 	bl	800131c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	200f      	movs	r0, #15
 8001080:	f000 f808 	bl	8001094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001084:	f7ff fece 	bl	8000e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023c00 	.word	0x40023c00

08001094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_InitTick+0x54>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x58>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f967 	bl	8001386 <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00e      	b.n	80010e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d80a      	bhi.n	80010de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010d0:	f000 f92f 	bl	8001332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d4:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <HAL_InitTick+0x5c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000008 	.word	0x20000008
 80010ec:	20000010 	.word	0x20000010
 80010f0:	2000000c 	.word	0x2000000c

080010f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_IncTick+0x20>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x24>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <HAL_IncTick+0x24>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000010 	.word	0x20000010
 8001118:	20000894 	.word	0x20000894

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000894 	.word	0x20000894

08001134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800113c:	f7ff ffee 	bl	800111c <HAL_GetTick>
 8001140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800114c:	d005      	beq.n	800115a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_Delay+0x44>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800115a:	bf00      	nop
 800115c:	f7ff ffde 	bl	800111c <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	429a      	cmp	r2, r3
 800116a:	d8f7      	bhi.n	800115c <HAL_Delay+0x28>
  {
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000010 	.word	0x20000010

0800117c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001198:	4013      	ands	r3, r2
 800119a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	60d3      	str	r3, [r2, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <__NVIC_GetPriorityGrouping+0x18>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	f003 0307 	and.w	r3, r3, #7
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	db0b      	blt.n	800120a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	f003 021f 	and.w	r2, r3, #31
 80011f8:	4907      	ldr	r1, [pc, #28]	; (8001218 <__NVIC_EnableIRQ+0x38>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	2001      	movs	r0, #1
 8001202:	fa00 f202 	lsl.w	r2, r0, r2
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000e100 	.word	0xe000e100

0800121c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	490c      	ldr	r1, [pc, #48]	; (8001268 <__NVIC_SetPriority+0x4c>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	; (800126c <__NVIC_SetPriority+0x50>)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	3b04      	subs	r3, #4
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f1c3 0307 	rsb	r3, r3, #7
 800128a:	2b04      	cmp	r3, #4
 800128c:	bf28      	it	cs
 800128e:	2304      	movcs	r3, #4
 8001290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3304      	adds	r3, #4
 8001296:	2b06      	cmp	r3, #6
 8001298:	d902      	bls.n	80012a0 <NVIC_EncodePriority+0x30>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3b03      	subs	r3, #3
 800129e:	e000      	b.n	80012a2 <NVIC_EncodePriority+0x32>
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43d9      	mvns	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	4313      	orrs	r3, r2
         );
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e8:	d301      	bcc.n	80012ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00f      	b.n	800130e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <SysTick_Config+0x40>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f6:	210f      	movs	r1, #15
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012fc:	f7ff ff8e 	bl	800121c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <SysTick_Config+0x40>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001306:	4b04      	ldr	r3, [pc, #16]	; (8001318 <SysTick_Config+0x40>)
 8001308:	2207      	movs	r2, #7
 800130a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	e000e010 	.word	0xe000e010

0800131c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff29 	bl	800117c <__NVIC_SetPriorityGrouping>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001344:	f7ff ff3e 	bl	80011c4 <__NVIC_GetPriorityGrouping>
 8001348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	6978      	ldr	r0, [r7, #20]
 8001350:	f7ff ff8e 	bl	8001270 <NVIC_EncodePriority>
 8001354:	4602      	mov	r2, r0
 8001356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff5d 	bl	800121c <__NVIC_SetPriority>
}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff31 	bl	80011e0 <__NVIC_EnableIRQ>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ffa2 	bl	80012d8 <SysTick_Config>
 8001394:	4603      	mov	r3, r0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	; 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
 80013ba:	e159      	b.n	8001670 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013bc:	2201      	movs	r2, #1
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	f040 8148 	bne.w	800166a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d005      	beq.n	80013f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d130      	bne.n	8001454 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	68da      	ldr	r2, [r3, #12]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001428:	2201      	movs	r2, #1
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	091b      	lsrs	r3, r3, #4
 800143e:	f003 0201 	and.w	r2, r3, #1
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b03      	cmp	r3, #3
 800145e:	d017      	beq.n	8001490 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	2203      	movs	r2, #3
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d123      	bne.n	80014e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	08da      	lsrs	r2, r3, #3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3208      	adds	r2, #8
 80014a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	220f      	movs	r2, #15
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	691a      	ldr	r2, [r3, #16]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	08da      	lsrs	r2, r3, #3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3208      	adds	r2, #8
 80014de:	69b9      	ldr	r1, [r7, #24]
 80014e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	2203      	movs	r2, #3
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0203 	and.w	r2, r3, #3
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80a2 	beq.w	800166a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b57      	ldr	r3, [pc, #348]	; (8001688 <HAL_GPIO_Init+0x2e8>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	4a56      	ldr	r2, [pc, #344]	; (8001688 <HAL_GPIO_Init+0x2e8>)
 8001530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001534:	6453      	str	r3, [r2, #68]	; 0x44
 8001536:	4b54      	ldr	r3, [pc, #336]	; (8001688 <HAL_GPIO_Init+0x2e8>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001542:	4a52      	ldr	r2, [pc, #328]	; (800168c <HAL_GPIO_Init+0x2ec>)
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	089b      	lsrs	r3, r3, #2
 8001548:	3302      	adds	r3, #2
 800154a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	220f      	movs	r2, #15
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a49      	ldr	r2, [pc, #292]	; (8001690 <HAL_GPIO_Init+0x2f0>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d019      	beq.n	80015a2 <HAL_GPIO_Init+0x202>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a48      	ldr	r2, [pc, #288]	; (8001694 <HAL_GPIO_Init+0x2f4>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d013      	beq.n	800159e <HAL_GPIO_Init+0x1fe>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a47      	ldr	r2, [pc, #284]	; (8001698 <HAL_GPIO_Init+0x2f8>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d00d      	beq.n	800159a <HAL_GPIO_Init+0x1fa>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a46      	ldr	r2, [pc, #280]	; (800169c <HAL_GPIO_Init+0x2fc>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d007      	beq.n	8001596 <HAL_GPIO_Init+0x1f6>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a45      	ldr	r2, [pc, #276]	; (80016a0 <HAL_GPIO_Init+0x300>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d101      	bne.n	8001592 <HAL_GPIO_Init+0x1f2>
 800158e:	2304      	movs	r3, #4
 8001590:	e008      	b.n	80015a4 <HAL_GPIO_Init+0x204>
 8001592:	2307      	movs	r3, #7
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x204>
 8001596:	2303      	movs	r3, #3
 8001598:	e004      	b.n	80015a4 <HAL_GPIO_Init+0x204>
 800159a:	2302      	movs	r3, #2
 800159c:	e002      	b.n	80015a4 <HAL_GPIO_Init+0x204>
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <HAL_GPIO_Init+0x204>
 80015a2:	2300      	movs	r3, #0
 80015a4:	69fa      	ldr	r2, [r7, #28]
 80015a6:	f002 0203 	and.w	r2, r2, #3
 80015aa:	0092      	lsls	r2, r2, #2
 80015ac:	4093      	lsls	r3, r2
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015b4:	4935      	ldr	r1, [pc, #212]	; (800168c <HAL_GPIO_Init+0x2ec>)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	3302      	adds	r3, #2
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015c2:	4b38      	ldr	r3, [pc, #224]	; (80016a4 <HAL_GPIO_Init+0x304>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015e6:	4a2f      	ldr	r2, [pc, #188]	; (80016a4 <HAL_GPIO_Init+0x304>)
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015ec:	4b2d      	ldr	r3, [pc, #180]	; (80016a4 <HAL_GPIO_Init+0x304>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001610:	4a24      	ldr	r2, [pc, #144]	; (80016a4 <HAL_GPIO_Init+0x304>)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001616:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <HAL_GPIO_Init+0x304>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800163a:	4a1a      	ldr	r2, [pc, #104]	; (80016a4 <HAL_GPIO_Init+0x304>)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001640:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <HAL_GPIO_Init+0x304>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001664:	4a0f      	ldr	r2, [pc, #60]	; (80016a4 <HAL_GPIO_Init+0x304>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3301      	adds	r3, #1
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	2b0f      	cmp	r3, #15
 8001674:	f67f aea2 	bls.w	80013bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3724      	adds	r7, #36	; 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	40013800 	.word	0x40013800
 8001690:	40020000 	.word	0x40020000
 8001694:	40020400 	.word	0x40020400
 8001698:	40020800 	.word	0x40020800
 800169c:	40020c00 	.word	0x40020c00
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40013c00 	.word	0x40013c00

080016a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	807b      	strh	r3, [r7, #2]
 80016b4:	4613      	mov	r3, r2
 80016b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016b8:	787b      	ldrb	r3, [r7, #1]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016be:	887a      	ldrh	r2, [r7, #2]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016c4:	e003      	b.n	80016ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016c6:	887b      	ldrh	r3, [r7, #2]
 80016c8:	041a      	lsls	r2, r3, #16
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	619a      	str	r2, [r3, #24]
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
	...

080016dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e12b      	b.n	8001946 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d106      	bne.n	8001708 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff fbb6 	bl	8000e74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2224      	movs	r2, #36	; 0x24
 800170c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0201 	bic.w	r2, r2, #1
 800171e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800172e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800173e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001740:	f002 f9ca 	bl	8003ad8 <HAL_RCC_GetPCLK1Freq>
 8001744:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	4a81      	ldr	r2, [pc, #516]	; (8001950 <HAL_I2C_Init+0x274>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d807      	bhi.n	8001760 <HAL_I2C_Init+0x84>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4a80      	ldr	r2, [pc, #512]	; (8001954 <HAL_I2C_Init+0x278>)
 8001754:	4293      	cmp	r3, r2
 8001756:	bf94      	ite	ls
 8001758:	2301      	movls	r3, #1
 800175a:	2300      	movhi	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	e006      	b.n	800176e <HAL_I2C_Init+0x92>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4a7d      	ldr	r2, [pc, #500]	; (8001958 <HAL_I2C_Init+0x27c>)
 8001764:	4293      	cmp	r3, r2
 8001766:	bf94      	ite	ls
 8001768:	2301      	movls	r3, #1
 800176a:	2300      	movhi	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e0e7      	b.n	8001946 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4a78      	ldr	r2, [pc, #480]	; (800195c <HAL_I2C_Init+0x280>)
 800177a:	fba2 2303 	umull	r2, r3, r2, r3
 800177e:	0c9b      	lsrs	r3, r3, #18
 8001780:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	430a      	orrs	r2, r1
 8001794:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	4a6a      	ldr	r2, [pc, #424]	; (8001950 <HAL_I2C_Init+0x274>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d802      	bhi.n	80017b0 <HAL_I2C_Init+0xd4>
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	3301      	adds	r3, #1
 80017ae:	e009      	b.n	80017c4 <HAL_I2C_Init+0xe8>
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017b6:	fb02 f303 	mul.w	r3, r2, r3
 80017ba:	4a69      	ldr	r2, [pc, #420]	; (8001960 <HAL_I2C_Init+0x284>)
 80017bc:	fba2 2303 	umull	r2, r3, r2, r3
 80017c0:	099b      	lsrs	r3, r3, #6
 80017c2:	3301      	adds	r3, #1
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6812      	ldr	r2, [r2, #0]
 80017c8:	430b      	orrs	r3, r1
 80017ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	495c      	ldr	r1, [pc, #368]	; (8001950 <HAL_I2C_Init+0x274>)
 80017e0:	428b      	cmp	r3, r1
 80017e2:	d819      	bhi.n	8001818 <HAL_I2C_Init+0x13c>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	1e59      	subs	r1, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80017f2:	1c59      	adds	r1, r3, #1
 80017f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80017f8:	400b      	ands	r3, r1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00a      	beq.n	8001814 <HAL_I2C_Init+0x138>
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1e59      	subs	r1, r3, #1
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	fbb1 f3f3 	udiv	r3, r1, r3
 800180c:	3301      	adds	r3, #1
 800180e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001812:	e051      	b.n	80018b8 <HAL_I2C_Init+0x1dc>
 8001814:	2304      	movs	r3, #4
 8001816:	e04f      	b.n	80018b8 <HAL_I2C_Init+0x1dc>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d111      	bne.n	8001844 <HAL_I2C_Init+0x168>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	1e58      	subs	r0, r3, #1
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6859      	ldr	r1, [r3, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	440b      	add	r3, r1
 800182e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001832:	3301      	adds	r3, #1
 8001834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001838:	2b00      	cmp	r3, #0
 800183a:	bf0c      	ite	eq
 800183c:	2301      	moveq	r3, #1
 800183e:	2300      	movne	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	e012      	b.n	800186a <HAL_I2C_Init+0x18e>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	1e58      	subs	r0, r3, #1
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6859      	ldr	r1, [r3, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	0099      	lsls	r1, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	fbb0 f3f3 	udiv	r3, r0, r3
 800185a:	3301      	adds	r3, #1
 800185c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001860:	2b00      	cmp	r3, #0
 8001862:	bf0c      	ite	eq
 8001864:	2301      	moveq	r3, #1
 8001866:	2300      	movne	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_I2C_Init+0x196>
 800186e:	2301      	movs	r3, #1
 8001870:	e022      	b.n	80018b8 <HAL_I2C_Init+0x1dc>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10e      	bne.n	8001898 <HAL_I2C_Init+0x1bc>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	1e58      	subs	r0, r3, #1
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6859      	ldr	r1, [r3, #4]
 8001882:	460b      	mov	r3, r1
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	440b      	add	r3, r1
 8001888:	fbb0 f3f3 	udiv	r3, r0, r3
 800188c:	3301      	adds	r3, #1
 800188e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001896:	e00f      	b.n	80018b8 <HAL_I2C_Init+0x1dc>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	1e58      	subs	r0, r3, #1
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6859      	ldr	r1, [r3, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	0099      	lsls	r1, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ae:	3301      	adds	r3, #1
 80018b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	6809      	ldr	r1, [r1, #0]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69da      	ldr	r2, [r3, #28]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6911      	ldr	r1, [r2, #16]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	68d2      	ldr	r2, [r2, #12]
 80018f2:	4311      	orrs	r1, r2
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6812      	ldr	r2, [r2, #0]
 80018f8:	430b      	orrs	r3, r1
 80018fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	695a      	ldr	r2, [r3, #20]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f042 0201 	orr.w	r2, r2, #1
 8001926:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2220      	movs	r2, #32
 8001932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	000186a0 	.word	0x000186a0
 8001954:	001e847f 	.word	0x001e847f
 8001958:	003d08ff 	.word	0x003d08ff
 800195c:	431bde83 	.word	0x431bde83
 8001960:	10624dd3 	.word	0x10624dd3

08001964 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af02      	add	r7, sp, #8
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	4608      	mov	r0, r1
 800196e:	4611      	mov	r1, r2
 8001970:	461a      	mov	r2, r3
 8001972:	4603      	mov	r3, r0
 8001974:	817b      	strh	r3, [r7, #10]
 8001976:	460b      	mov	r3, r1
 8001978:	813b      	strh	r3, [r7, #8]
 800197a:	4613      	mov	r3, r2
 800197c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800197e:	f7ff fbcd 	bl	800111c <HAL_GetTick>
 8001982:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b20      	cmp	r3, #32
 800198e:	f040 80d9 	bne.w	8001b44 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2319      	movs	r3, #25
 8001998:	2201      	movs	r2, #1
 800199a:	496d      	ldr	r1, [pc, #436]	; (8001b50 <HAL_I2C_Mem_Write+0x1ec>)
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 f971 	bl	8001c84 <I2C_WaitOnFlagUntilTimeout>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80019a8:	2302      	movs	r3, #2
 80019aa:	e0cc      	b.n	8001b46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d101      	bne.n	80019ba <HAL_I2C_Mem_Write+0x56>
 80019b6:	2302      	movs	r3, #2
 80019b8:	e0c5      	b.n	8001b46 <HAL_I2C_Mem_Write+0x1e2>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d007      	beq.n	80019e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0201 	orr.w	r2, r2, #1
 80019de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2221      	movs	r2, #33	; 0x21
 80019f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2240      	movs	r2, #64	; 0x40
 80019fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6a3a      	ldr	r2, [r7, #32]
 8001a0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4a4d      	ldr	r2, [pc, #308]	; (8001b54 <HAL_I2C_Mem_Write+0x1f0>)
 8001a20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a22:	88f8      	ldrh	r0, [r7, #6]
 8001a24:	893a      	ldrh	r2, [r7, #8]
 8001a26:	8979      	ldrh	r1, [r7, #10]
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	4603      	mov	r3, r0
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f000 f890 	bl	8001b58 <I2C_RequestMemoryWrite>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d052      	beq.n	8001ae4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e081      	b.n	8001b46 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 f9f2 	bl	8001e30 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00d      	beq.n	8001a6e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d107      	bne.n	8001a6a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e06b      	b.n	8001b46 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	781a      	ldrb	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	3b01      	subs	r3, #1
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d11b      	bne.n	8001ae4 <HAL_I2C_Mem_Write+0x180>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d017      	beq.n	8001ae4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	781a      	ldrb	r2, [r3, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1aa      	bne.n	8001a42 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f000 f9de 	bl	8001eb2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00d      	beq.n	8001b18 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d107      	bne.n	8001b14 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b12:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e016      	b.n	8001b46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	e000      	b.n	8001b46 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001b44:	2302      	movs	r3, #2
  }
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	00100002 	.word	0x00100002
 8001b54:	ffff0000 	.word	0xffff0000

08001b58 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af02      	add	r7, sp, #8
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	4608      	mov	r0, r1
 8001b62:	4611      	mov	r1, r2
 8001b64:	461a      	mov	r2, r3
 8001b66:	4603      	mov	r3, r0
 8001b68:	817b      	strh	r3, [r7, #10]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	813b      	strh	r3, [r7, #8]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 f878 	bl	8001c84 <I2C_WaitOnFlagUntilTimeout>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00d      	beq.n	8001bb6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ba8:	d103      	bne.n	8001bb2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e05f      	b.n	8001c76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bb6:	897b      	ldrh	r3, [r7, #10]
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001bc4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	6a3a      	ldr	r2, [r7, #32]
 8001bca:	492d      	ldr	r1, [pc, #180]	; (8001c80 <I2C_RequestMemoryWrite+0x128>)
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f000 f8b0 	bl	8001d32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e04c      	b.n	8001c76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf4:	6a39      	ldr	r1, [r7, #32]
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 f91a 	bl	8001e30 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00d      	beq.n	8001c1e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d107      	bne.n	8001c1a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e02b      	b.n	8001c76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c1e:	88fb      	ldrh	r3, [r7, #6]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d105      	bne.n	8001c30 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c24:	893b      	ldrh	r3, [r7, #8]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	611a      	str	r2, [r3, #16]
 8001c2e:	e021      	b.n	8001c74 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001c30:	893b      	ldrh	r3, [r7, #8]
 8001c32:	0a1b      	lsrs	r3, r3, #8
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c40:	6a39      	ldr	r1, [r7, #32]
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 f8f4 	bl	8001e30 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00d      	beq.n	8001c6a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d107      	bne.n	8001c66 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e005      	b.n	8001c76 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c6a:	893b      	ldrh	r3, [r7, #8]
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	00010002 	.word	0x00010002

08001c84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	4613      	mov	r3, r2
 8001c92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c94:	e025      	b.n	8001ce2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c9c:	d021      	beq.n	8001ce2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c9e:	f7ff fa3d 	bl	800111c <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d302      	bcc.n	8001cb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d116      	bne.n	8001ce2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2220      	movs	r2, #32
 8001cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f043 0220 	orr.w	r2, r3, #32
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e023      	b.n	8001d2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	0c1b      	lsrs	r3, r3, #16
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d10d      	bne.n	8001d08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	43da      	mvns	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	bf0c      	ite	eq
 8001cfe:	2301      	moveq	r3, #1
 8001d00:	2300      	movne	r3, #0
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	461a      	mov	r2, r3
 8001d06:	e00c      	b.n	8001d22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	4013      	ands	r3, r2
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	bf0c      	ite	eq
 8001d1a:	2301      	moveq	r3, #1
 8001d1c:	2300      	movne	r3, #0
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	461a      	mov	r2, r3
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d0b6      	beq.n	8001c96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b084      	sub	sp, #16
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d40:	e051      	b.n	8001de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d50:	d123      	bne.n	8001d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2220      	movs	r2, #32
 8001d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f043 0204 	orr.w	r2, r3, #4
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e046      	b.n	8001e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001da0:	d021      	beq.n	8001de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001da2:	f7ff f9bb 	bl	800111c <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d302      	bcc.n	8001db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d116      	bne.n	8001de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f043 0220 	orr.w	r2, r3, #32
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e020      	b.n	8001e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	0c1b      	lsrs	r3, r3, #16
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d10c      	bne.n	8001e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	43da      	mvns	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	bf14      	ite	ne
 8001e02:	2301      	movne	r3, #1
 8001e04:	2300      	moveq	r3, #0
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	e00b      	b.n	8001e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	43da      	mvns	r2, r3
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	4013      	ands	r3, r2
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf14      	ite	ne
 8001e1c:	2301      	movne	r3, #1
 8001e1e:	2300      	moveq	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d18d      	bne.n	8001d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e3c:	e02d      	b.n	8001e9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 f878 	bl	8001f34 <I2C_IsAcknowledgeFailed>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e02d      	b.n	8001eaa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e54:	d021      	beq.n	8001e9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e56:	f7ff f961 	bl	800111c <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d302      	bcc.n	8001e6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d116      	bne.n	8001e9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2220      	movs	r2, #32
 8001e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f043 0220 	orr.w	r2, r3, #32
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e007      	b.n	8001eaa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea4:	2b80      	cmp	r3, #128	; 0x80
 8001ea6:	d1ca      	bne.n	8001e3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b084      	sub	sp, #16
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	60f8      	str	r0, [r7, #12]
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ebe:	e02d      	b.n	8001f1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f000 f837 	bl	8001f34 <I2C_IsAcknowledgeFailed>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e02d      	b.n	8001f2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ed6:	d021      	beq.n	8001f1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ed8:	f7ff f920 	bl	800111c <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d302      	bcc.n	8001eee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d116      	bne.n	8001f1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	f043 0220 	orr.w	r2, r3, #32
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e007      	b.n	8001f2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d1ca      	bne.n	8001ec0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f4a:	d11b      	bne.n	8001f84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	f043 0204 	orr.w	r2, r3, #4
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e000      	b.n	8001f86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f94:	b08f      	sub	sp, #60	; 0x3c
 8001f96:	af0a      	add	r7, sp, #40	; 0x28
 8001f98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e10f      	b.n	80021c4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d106      	bne.n	8001fc4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f005 f80c 	bl	8006fdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d102      	bne.n	8001fde <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f001 fea1 	bl	8003d2a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	603b      	str	r3, [r7, #0]
 8001fee:	687e      	ldr	r6, [r7, #4]
 8001ff0:	466d      	mov	r5, sp
 8001ff2:	f106 0410 	add.w	r4, r6, #16
 8001ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ffc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ffe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002002:	e885 0003 	stmia.w	r5, {r0, r1}
 8002006:	1d33      	adds	r3, r6, #4
 8002008:	cb0e      	ldmia	r3, {r1, r2, r3}
 800200a:	6838      	ldr	r0, [r7, #0]
 800200c:	f001 fd78 	bl	8003b00 <USB_CoreInit>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d005      	beq.n	8002022 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2202      	movs	r2, #2
 800201a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e0d0      	b.n	80021c4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2100      	movs	r1, #0
 8002028:	4618      	mov	r0, r3
 800202a:	f001 fe8f 	bl	8003d4c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800202e:	2300      	movs	r3, #0
 8002030:	73fb      	strb	r3, [r7, #15]
 8002032:	e04a      	b.n	80020ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002034:	7bfa      	ldrb	r2, [r7, #15]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	333d      	adds	r3, #61	; 0x3d
 8002044:	2201      	movs	r2, #1
 8002046:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	1a9b      	subs	r3, r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	333c      	adds	r3, #60	; 0x3c
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	b298      	uxth	r0, r3
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	1a9b      	subs	r3, r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	3342      	adds	r3, #66	; 0x42
 8002070:	4602      	mov	r2, r0
 8002072:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002074:	7bfa      	ldrb	r2, [r7, #15]
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	1a9b      	subs	r3, r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	333f      	adds	r3, #63	; 0x3f
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002088:	7bfa      	ldrb	r2, [r7, #15]
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	1a9b      	subs	r3, r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	3344      	adds	r3, #68	; 0x44
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	1a9b      	subs	r3, r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	3348      	adds	r3, #72	; 0x48
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020b0:	7bfa      	ldrb	r2, [r7, #15]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	3350      	adds	r3, #80	; 0x50
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
 80020c6:	3301      	adds	r3, #1
 80020c8:	73fb      	strb	r3, [r7, #15]
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d3af      	bcc.n	8002034 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	73fb      	strb	r3, [r7, #15]
 80020d8:	e044      	b.n	8002164 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020da:	7bfa      	ldrb	r2, [r7, #15]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	1a9b      	subs	r3, r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020f0:	7bfa      	ldrb	r2, [r7, #15]
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	1a9b      	subs	r3, r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	1a9b      	subs	r3, r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800211c:	7bfa      	ldrb	r2, [r7, #15]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	1a9b      	subs	r3, r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002132:	7bfa      	ldrb	r2, [r7, #15]
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002148:	7bfa      	ldrb	r2, [r7, #15]
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	1a9b      	subs	r3, r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	3301      	adds	r3, #1
 8002162:	73fb      	strb	r3, [r7, #15]
 8002164:	7bfa      	ldrb	r2, [r7, #15]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	429a      	cmp	r2, r3
 800216c:	d3b5      	bcc.n	80020da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	687e      	ldr	r6, [r7, #4]
 8002176:	466d      	mov	r5, sp
 8002178:	f106 0410 	add.w	r4, r6, #16
 800217c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800217e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002182:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002184:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002188:	e885 0003 	stmia.w	r5, {r0, r1}
 800218c:	1d33      	adds	r3, r6, #4
 800218e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002190:	6838      	ldr	r0, [r7, #0]
 8002192:	f001 fe27 	bl	8003de4 <USB_DevInit>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e00d      	b.n	80021c4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f002 fea3 	bl	8004f08 <USB_DevDisconnect>

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021cc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <HAL_PCD_Start+0x1c>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e020      	b.n	800222a <HAL_PCD_Start+0x5e>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d109      	bne.n	800220c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d005      	beq.n	800220c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002204:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f001 fd79 	bl	8003d08 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f002 fe53 	bl	8004ec6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002232:	b590      	push	{r4, r7, lr}
 8002234:	b08d      	sub	sp, #52	; 0x34
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f002 ff11 	bl	8005070 <USB_GetMode>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	f040 839d 	bne.w	8002990 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f002 fe75 	bl	8004f4a <USB_ReadInterrupts>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 8393 	beq.w	800298e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f002 fe6c 	bl	8004f4a <USB_ReadInterrupts>
 8002272:	4603      	mov	r3, r0
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b02      	cmp	r3, #2
 800227a:	d107      	bne.n	800228c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695a      	ldr	r2, [r3, #20]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f002 0202 	and.w	r2, r2, #2
 800228a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f002 fe5a 	bl	8004f4a <USB_ReadInterrupts>
 8002296:	4603      	mov	r3, r0
 8002298:	f003 0310 	and.w	r3, r3, #16
 800229c:	2b10      	cmp	r3, #16
 800229e:	d161      	bne.n	8002364 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699a      	ldr	r2, [r3, #24]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0210 	bic.w	r2, r2, #16
 80022ae:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	f003 020f 	and.w	r2, r3, #15
 80022bc:	4613      	mov	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	1a9b      	subs	r3, r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	4413      	add	r3, r2
 80022cc:	3304      	adds	r3, #4
 80022ce:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	0c5b      	lsrs	r3, r3, #17
 80022d4:	f003 030f 	and.w	r3, r3, #15
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d124      	bne.n	8002326 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d035      	beq.n	8002354 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	091b      	lsrs	r3, r3, #4
 80022f0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	461a      	mov	r2, r3
 80022fa:	6a38      	ldr	r0, [r7, #32]
 80022fc:	f002 fc91 	bl	8004c22 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800230c:	441a      	add	r2, r3
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	699a      	ldr	r2, [r3, #24]
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	091b      	lsrs	r3, r3, #4
 800231a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800231e:	441a      	add	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	619a      	str	r2, [r3, #24]
 8002324:	e016      	b.n	8002354 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	0c5b      	lsrs	r3, r3, #17
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	2b06      	cmp	r3, #6
 8002330:	d110      	bne.n	8002354 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002338:	2208      	movs	r2, #8
 800233a:	4619      	mov	r1, r3
 800233c:	6a38      	ldr	r0, [r7, #32]
 800233e:	f002 fc70 	bl	8004c22 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	699a      	ldr	r2, [r3, #24]
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800234e:	441a      	add	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699a      	ldr	r2, [r3, #24]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0210 	orr.w	r2, r2, #16
 8002362:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f002 fdee 	bl	8004f4a <USB_ReadInterrupts>
 800236e:	4603      	mov	r3, r0
 8002370:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002374:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002378:	d16e      	bne.n	8002458 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f002 fdf4 	bl	8004f70 <USB_ReadDevAllOutEpInterrupt>
 8002388:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800238a:	e062      	b.n	8002452 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800238c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d057      	beq.n	8002446 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	4611      	mov	r1, r2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f002 fe19 	bl	8004fd8 <USB_ReadDevOutEPInterrupt>
 80023a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00c      	beq.n	80023cc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	015a      	lsls	r2, r3, #5
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	4413      	add	r3, r2
 80023ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023be:	461a      	mov	r2, r3
 80023c0:	2301      	movs	r3, #1
 80023c2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80023c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 fdb0 	bl	8002f2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00c      	beq.n	80023f0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	015a      	lsls	r2, r3, #5
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023e2:	461a      	mov	r2, r3
 80023e4:	2308      	movs	r3, #8
 80023e6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80023e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 feaa 	bl	8003144 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	f003 0310 	and.w	r3, r3, #16
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d008      	beq.n	800240c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	015a      	lsls	r2, r3, #5
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	4413      	add	r3, r2
 8002402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002406:	461a      	mov	r2, r3
 8002408:	2310      	movs	r3, #16
 800240a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	f003 0320 	and.w	r3, r3, #32
 8002412:	2b00      	cmp	r3, #0
 8002414:	d008      	beq.n	8002428 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	015a      	lsls	r2, r3, #5
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	4413      	add	r3, r2
 800241e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002422:	461a      	mov	r2, r3
 8002424:	2320      	movs	r3, #32
 8002426:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d009      	beq.n	8002446 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	4413      	add	r3, r2
 800243a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800243e:	461a      	mov	r2, r3
 8002440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002444:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	3301      	adds	r3, #1
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244e:	085b      	lsrs	r3, r3, #1
 8002450:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002454:	2b00      	cmp	r3, #0
 8002456:	d199      	bne.n	800238c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f002 fd74 	bl	8004f4a <USB_ReadInterrupts>
 8002462:	4603      	mov	r3, r0
 8002464:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002468:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800246c:	f040 80c0 	bne.w	80025f0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f002 fd95 	bl	8004fa4 <USB_ReadDevAllInEpInterrupt>
 800247a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002480:	e0b2      	b.n	80025e8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 80a7 	beq.w	80025dc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	4611      	mov	r1, r2
 8002498:	4618      	mov	r0, r3
 800249a:	f002 fdbb 	bl	8005014 <USB_ReadDevInEPInterrupt>
 800249e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d057      	beq.n	800255a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	2201      	movs	r2, #1
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69f9      	ldr	r1, [r7, #28]
 80024c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024ca:	4013      	ands	r3, r2
 80024cc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024da:	461a      	mov	r2, r3
 80024dc:	2301      	movs	r3, #1
 80024de:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d132      	bne.n	800254e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ec:	4613      	mov	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	1a9b      	subs	r3, r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	3348      	adds	r3, #72	; 0x48
 80024f8:	6819      	ldr	r1, [r3, #0]
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4403      	add	r3, r0
 8002508:	3344      	adds	r3, #68	; 0x44
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4419      	add	r1, r3
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4403      	add	r3, r0
 800251c:	3348      	adds	r3, #72	; 0x48
 800251e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	2b00      	cmp	r3, #0
 8002524:	d113      	bne.n	800254e <HAL_PCD_IRQHandler+0x31c>
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252a:	4613      	mov	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	1a9b      	subs	r3, r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	3350      	adds	r3, #80	; 0x50
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d108      	bne.n	800254e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002546:	461a      	mov	r2, r3
 8002548:	2101      	movs	r1, #1
 800254a:	f002 fdc3 	bl	80050d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	b2db      	uxtb	r3, r3
 8002552:	4619      	mov	r1, r3
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f004 fdc2 	bl	80070de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	015a      	lsls	r2, r3, #5
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	4413      	add	r3, r2
 800256c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002570:	461a      	mov	r2, r3
 8002572:	2308      	movs	r3, #8
 8002574:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	f003 0310 	and.w	r3, r3, #16
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	4413      	add	r3, r2
 8002588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800258c:	461a      	mov	r2, r3
 800258e:	2310      	movs	r3, #16
 8002590:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025a8:	461a      	mov	r2, r3
 80025aa:	2340      	movs	r3, #64	; 0x40
 80025ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025c4:	461a      	mov	r2, r3
 80025c6:	2302      	movs	r3, #2
 80025c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80025d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 fc1b 	bl	8002e12 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	3301      	adds	r3, #1
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e4:	085b      	lsrs	r3, r3, #1
 80025e6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f47f af49 	bne.w	8002482 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f002 fca8 	bl	8004f4a <USB_ReadInterrupts>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002600:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002604:	d122      	bne.n	800264c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002614:	f023 0301 	bic.w	r3, r3, #1
 8002618:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002620:	2b01      	cmp	r3, #1
 8002622:	d108      	bne.n	8002636 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800262c:	2100      	movs	r1, #0
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 fe26 	bl	8003280 <HAL_PCDEx_LPM_Callback>
 8002634:	e002      	b.n	800263c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f004 fdbe 	bl	80071b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	695a      	ldr	r2, [r3, #20]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800264a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f002 fc7a 	bl	8004f4a <USB_ReadInterrupts>
 8002656:	4603      	mov	r3, r0
 8002658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800265c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002660:	d112      	bne.n	8002688 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b01      	cmp	r3, #1
 8002670:	d102      	bne.n	8002678 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f004 fd7a 	bl	800716c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	695a      	ldr	r2, [r3, #20]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002686:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f002 fc5c 	bl	8004f4a <USB_ReadInterrupts>
 8002692:	4603      	mov	r3, r0
 8002694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800269c:	f040 80c7 	bne.w	800282e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	69fa      	ldr	r2, [r7, #28]
 80026aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026ae:	f023 0301 	bic.w	r3, r3, #1
 80026b2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2110      	movs	r1, #16
 80026ba:	4618      	mov	r0, r3
 80026bc:	f001 fcf6 	bl	80040ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026c0:	2300      	movs	r3, #0
 80026c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026c4:	e056      	b.n	8002774 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80026c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026d2:	461a      	mov	r2, r3
 80026d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026d8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80026da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026dc:	015a      	lsls	r2, r3, #5
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	4413      	add	r3, r2
 80026e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ea:	0151      	lsls	r1, r2, #5
 80026ec:	69fa      	ldr	r2, [r7, #28]
 80026ee:	440a      	add	r2, r1
 80026f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80026f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026f8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80026fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	4413      	add	r3, r2
 8002702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800270a:	0151      	lsls	r1, r2, #5
 800270c:	69fa      	ldr	r2, [r7, #28]
 800270e:	440a      	add	r2, r1
 8002710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002714:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002718:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800271a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271c:	015a      	lsls	r2, r3, #5
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	4413      	add	r3, r2
 8002722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002726:	461a      	mov	r2, r3
 8002728:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800272c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800272e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	4413      	add	r3, r2
 8002736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800273e:	0151      	lsls	r1, r2, #5
 8002740:	69fa      	ldr	r2, [r7, #28]
 8002742:	440a      	add	r2, r1
 8002744:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002748:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800274c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800274e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002750:	015a      	lsls	r2, r3, #5
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	4413      	add	r3, r2
 8002756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800275e:	0151      	lsls	r1, r2, #5
 8002760:	69fa      	ldr	r2, [r7, #28]
 8002762:	440a      	add	r2, r1
 8002764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002768:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800276c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800276e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002770:	3301      	adds	r3, #1
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800277a:	429a      	cmp	r2, r3
 800277c:	d3a3      	bcc.n	80026c6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	69fa      	ldr	r2, [r7, #28]
 8002788:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800278c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002790:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	2b00      	cmp	r3, #0
 8002798:	d016      	beq.n	80027c8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027a4:	69fa      	ldr	r2, [r7, #28]
 80027a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027aa:	f043 030b 	orr.w	r3, r3, #11
 80027ae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027c0:	f043 030b 	orr.w	r3, r3, #11
 80027c4:	6453      	str	r3, [r2, #68]	; 0x44
 80027c6:	e015      	b.n	80027f4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	69fa      	ldr	r2, [r7, #28]
 80027d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027da:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80027de:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027ee:	f043 030b 	orr.w	r3, r3, #11
 80027f2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	69fa      	ldr	r2, [r7, #28]
 80027fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002802:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002806:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6818      	ldr	r0, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002818:	461a      	mov	r2, r3
 800281a:	f002 fc5b 	bl	80050d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695a      	ldr	r2, [r3, #20]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800282c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f002 fb89 	bl	8004f4a <USB_ReadInterrupts>
 8002838:	4603      	mov	r3, r0
 800283a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800283e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002842:	d124      	bne.n	800288e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f002 fc1f 	bl	800508c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f001 fc87 	bl	8004166 <USB_GetDevSpeed>
 8002858:	4603      	mov	r3, r0
 800285a:	461a      	mov	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681c      	ldr	r4, [r3, #0]
 8002864:	f001 f92c 	bl	8003ac0 <HAL_RCC_GetHCLKFreq>
 8002868:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800286e:	b2db      	uxtb	r3, r3
 8002870:	461a      	mov	r2, r3
 8002872:	4620      	mov	r0, r4
 8002874:	f001 f9a6 	bl	8003bc4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f004 fc58 	bl	800712e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695a      	ldr	r2, [r3, #20]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800288c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f002 fb59 	bl	8004f4a <USB_ReadInterrupts>
 8002898:	4603      	mov	r3, r0
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d10a      	bne.n	80028b8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f004 fc35 	bl	8007112 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695a      	ldr	r2, [r3, #20]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f002 0208 	and.w	r2, r2, #8
 80028b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f002 fb44 	bl	8004f4a <USB_ReadInterrupts>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028cc:	d10f      	bne.n	80028ee <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	4619      	mov	r1, r3
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f004 fc8d 	bl	80071f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695a      	ldr	r2, [r3, #20]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80028ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f002 fb29 	bl	8004f4a <USB_ReadInterrupts>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002902:	d10f      	bne.n	8002924 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	b2db      	uxtb	r3, r3
 800290c:	4619      	mov	r1, r3
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f004 fc60 	bl	80071d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	695a      	ldr	r2, [r3, #20]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002922:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f002 fb0e 	bl	8004f4a <USB_ReadInterrupts>
 800292e:	4603      	mov	r3, r0
 8002930:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002938:	d10a      	bne.n	8002950 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f004 fc6e 	bl	800721c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800294e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f002 faf8 	bl	8004f4a <USB_ReadInterrupts>
 800295a:	4603      	mov	r3, r0
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b04      	cmp	r3, #4
 8002962:	d115      	bne.n	8002990 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f004 fc5e 	bl	8007238 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6859      	ldr	r1, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	430a      	orrs	r2, r1
 800298a:	605a      	str	r2, [r3, #4]
 800298c:	e000      	b.n	8002990 <HAL_PCD_IRQHandler+0x75e>
      return;
 800298e:	bf00      	nop
    }
  }
}
 8002990:	3734      	adds	r7, #52	; 0x34
 8002992:	46bd      	mov	sp, r7
 8002994:	bd90      	pop	{r4, r7, pc}

08002996 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	460b      	mov	r3, r1
 80029a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_PCD_SetAddress+0x1a>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e013      	b.n	80029d8 <HAL_PCD_SetAddress+0x42>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	78fa      	ldrb	r2, [r7, #3]
 80029bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	78fa      	ldrb	r2, [r7, #3]
 80029c6:	4611      	mov	r1, r2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f002 fa56 	bl	8004e7a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	4608      	mov	r0, r1
 80029ea:	4611      	mov	r1, r2
 80029ec:	461a      	mov	r2, r3
 80029ee:	4603      	mov	r3, r0
 80029f0:	70fb      	strb	r3, [r7, #3]
 80029f2:	460b      	mov	r3, r1
 80029f4:	803b      	strh	r3, [r7, #0]
 80029f6:	4613      	mov	r3, r2
 80029f8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	da0f      	bge.n	8002a26 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a06:	78fb      	ldrb	r3, [r7, #3]
 8002a08:	f003 020f 	and.w	r2, r3, #15
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	3338      	adds	r3, #56	; 0x38
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	4413      	add	r3, r2
 8002a1a:	3304      	adds	r3, #4
 8002a1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2201      	movs	r2, #1
 8002a22:	705a      	strb	r2, [r3, #1]
 8002a24:	e00f      	b.n	8002a46 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a26:	78fb      	ldrb	r3, [r7, #3]
 8002a28:	f003 020f 	and.w	r2, r3, #15
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	1a9b      	subs	r3, r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a46:	78fb      	ldrb	r3, [r7, #3]
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a52:	883a      	ldrh	r2, [r7, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	78ba      	ldrb	r2, [r7, #2]
 8002a5c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	785b      	ldrb	r3, [r3, #1]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d004      	beq.n	8002a70 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a70:	78bb      	ldrb	r3, [r7, #2]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d102      	bne.n	8002a7c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_PCD_EP_Open+0xaa>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e00e      	b.n	8002aa8 <HAL_PCD_EP_Open+0xc8>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68f9      	ldr	r1, [r7, #12]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f001 fb89 	bl	80041b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002aa6:	7afb      	ldrb	r3, [r7, #11]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002abc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	da0f      	bge.n	8002ae4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ac4:	78fb      	ldrb	r3, [r7, #3]
 8002ac6:	f003 020f 	and.w	r2, r3, #15
 8002aca:	4613      	mov	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	1a9b      	subs	r3, r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	3338      	adds	r3, #56	; 0x38
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3304      	adds	r3, #4
 8002ada:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	705a      	strb	r2, [r3, #1]
 8002ae2:	e00f      	b.n	8002b04 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	f003 020f 	and.w	r2, r3, #15
 8002aea:	4613      	mov	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	1a9b      	subs	r3, r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	4413      	add	r3, r2
 8002afa:	3304      	adds	r3, #4
 8002afc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b04:	78fb      	ldrb	r3, [r7, #3]
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_PCD_EP_Close+0x6e>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e00e      	b.n	8002b3c <HAL_PCD_EP_Close+0x8c>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68f9      	ldr	r1, [r7, #12]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f001 fbc7 	bl	80042c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	607a      	str	r2, [r7, #4]
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	460b      	mov	r3, r1
 8002b52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b54:	7afb      	ldrb	r3, [r7, #11]
 8002b56:	f003 020f 	and.w	r2, r3, #15
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	1a9b      	subs	r3, r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4413      	add	r3, r2
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	2200      	movs	r2, #0
 8002b84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b86:	7afb      	ldrb	r3, [r7, #11]
 8002b88:	f003 030f 	and.w	r3, r3, #15
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d102      	bne.n	8002ba0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ba0:	7afb      	ldrb	r3, [r7, #11]
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d109      	bne.n	8002bbe <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	6979      	ldr	r1, [r7, #20]
 8002bb8:	f001 fea2 	bl	8004900 <USB_EP0StartXfer>
 8002bbc:	e008      	b.n	8002bd0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	6979      	ldr	r1, [r7, #20]
 8002bcc:	f001 fc54 	bl	8004478 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	460b      	mov	r3, r1
 8002be4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	f003 020f 	and.w	r2, r3, #15
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	1a9b      	subs	r3, r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002bfc:	681b      	ldr	r3, [r3, #0]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b086      	sub	sp, #24
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	603b      	str	r3, [r7, #0]
 8002c16:	460b      	mov	r3, r1
 8002c18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c1a:	7afb      	ldrb	r3, [r7, #11]
 8002c1c:	f003 020f 	and.w	r2, r3, #15
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	1a9b      	subs	r3, r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	3338      	adds	r3, #56	; 0x38
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3304      	adds	r3, #4
 8002c30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2200      	movs	r2, #0
 8002c42:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2201      	movs	r2, #1
 8002c48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c4a:	7afb      	ldrb	r3, [r7, #11]
 8002c4c:	f003 030f 	and.w	r3, r3, #15
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d102      	bne.n	8002c64 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c64:	7afb      	ldrb	r3, [r7, #11]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d109      	bne.n	8002c82 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	6979      	ldr	r1, [r7, #20]
 8002c7c:	f001 fe40 	bl	8004900 <USB_EP0StartXfer>
 8002c80:	e008      	b.n	8002c94 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	6979      	ldr	r1, [r7, #20]
 8002c90:	f001 fbf2 	bl	8004478 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	f003 020f 	and.w	r2, r3, #15
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d901      	bls.n	8002cbc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e050      	b.n	8002d5e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	da0f      	bge.n	8002ce4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	f003 020f 	and.w	r2, r3, #15
 8002cca:	4613      	mov	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	1a9b      	subs	r3, r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	3338      	adds	r3, #56	; 0x38
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3304      	adds	r3, #4
 8002cda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	705a      	strb	r2, [r3, #1]
 8002ce2:	e00d      	b.n	8002d00 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	1a9b      	subs	r3, r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2201      	movs	r2, #1
 8002d04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	f003 030f 	and.w	r3, r3, #15
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_PCD_EP_SetStall+0x82>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e01e      	b.n	8002d5e <HAL_PCD_EP_SetStall+0xc0>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68f9      	ldr	r1, [r7, #12]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f001 ffcf 	bl	8004cd2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10a      	bne.n	8002d54 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	b2d9      	uxtb	r1, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d4e:	461a      	mov	r2, r3
 8002d50:	f002 f9c0 	bl	80050d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	460b      	mov	r3, r1
 8002d70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	f003 020f 	and.w	r2, r3, #15
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d901      	bls.n	8002d84 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e042      	b.n	8002e0a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	da0f      	bge.n	8002dac <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	f003 020f 	and.w	r2, r3, #15
 8002d92:	4613      	mov	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	1a9b      	subs	r3, r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	3338      	adds	r3, #56	; 0x38
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	4413      	add	r3, r2
 8002da0:	3304      	adds	r3, #4
 8002da2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2201      	movs	r2, #1
 8002da8:	705a      	strb	r2, [r3, #1]
 8002daa:	e00f      	b.n	8002dcc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dac:	78fb      	ldrb	r3, [r7, #3]
 8002dae:	f003 020f 	and.w	r2, r3, #15
 8002db2:	4613      	mov	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_PCD_EP_ClrStall+0x86>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e00e      	b.n	8002e0a <HAL_PCD_EP_ClrStall+0xa4>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68f9      	ldr	r1, [r7, #12]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f001 ffd7 	bl	8004dae <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b08a      	sub	sp, #40	; 0x28
 8002e16:	af02      	add	r7, sp, #8
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	1a9b      	subs	r3, r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	3338      	adds	r3, #56	; 0x38
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	4413      	add	r3, r2
 8002e36:	3304      	adds	r3, #4
 8002e38:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	699a      	ldr	r2, [r3, #24]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d901      	bls.n	8002e4a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e06c      	b.n	8002f24 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	695a      	ldr	r2, [r3, #20]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d902      	bls.n	8002e66 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3303      	adds	r3, #3
 8002e6a:	089b      	lsrs	r3, r3, #2
 8002e6c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e6e:	e02b      	b.n	8002ec8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	695a      	ldr	r2, [r3, #20]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	69fa      	ldr	r2, [r7, #28]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d902      	bls.n	8002e8c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	3303      	adds	r3, #3
 8002e90:	089b      	lsrs	r3, r3, #2
 8002e92:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	68d9      	ldr	r1, [r3, #12]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	6978      	ldr	r0, [r7, #20]
 8002eac:	f001 fe7b 	bl	8004ba6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	441a      	add	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	699a      	ldr	r2, [r3, #24]
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	441a      	add	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	015a      	lsls	r2, r3, #5
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	4413      	add	r3, r2
 8002ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d809      	bhi.n	8002ef2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d203      	bcs.n	8002ef2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1be      	bne.n	8002e70 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d811      	bhi.n	8002f22 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	f003 030f 	and.w	r3, r3, #15
 8002f04:	2201      	movs	r2, #1
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	43db      	mvns	r3, r3
 8002f18:	6939      	ldr	r1, [r7, #16]
 8002f1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f1e:	4013      	ands	r3, r2
 8002f20:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3720      	adds	r7, #32
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	333c      	adds	r3, #60	; 0x3c
 8002f44:	3304      	adds	r3, #4
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	015a      	lsls	r2, r3, #5
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	f040 80a0 	bne.w	80030a4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d015      	beq.n	8002f9a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4a72      	ldr	r2, [pc, #456]	; (800313c <PCD_EP_OutXfrComplete_int+0x210>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	f240 80dd 	bls.w	8003132 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 80d7 	beq.w	8003132 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f90:	461a      	mov	r2, r3
 8002f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f96:	6093      	str	r3, [r2, #8]
 8002f98:	e0cb      	b.n	8003132 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d009      	beq.n	8002fb8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2320      	movs	r3, #32
 8002fb4:	6093      	str	r3, [r2, #8]
 8002fb6:	e0bc      	b.n	8003132 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f040 80b7 	bne.w	8003132 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4a5d      	ldr	r2, [pc, #372]	; (800313c <PCD_EP_OutXfrComplete_int+0x210>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d90f      	bls.n	8002fec <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fe8:	6093      	str	r3, [r2, #8]
 8002fea:	e0a2      	b.n	8003132 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	1a9b      	subs	r3, r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002ffe:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	0159      	lsls	r1, r3, #5
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	440b      	add	r3, r1
 8003008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003012:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	4613      	mov	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	1a9b      	subs	r3, r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4403      	add	r3, r0
 8003022:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003026:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800303a:	6819      	ldr	r1, [r3, #0]
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	4613      	mov	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4403      	add	r3, r0
 800304a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4419      	add	r1, r3
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	4613      	mov	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	1a9b      	subs	r3, r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4403      	add	r3, r0
 8003060:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003064:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d114      	bne.n	8003096 <PCD_EP_OutXfrComplete_int+0x16a>
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d108      	bne.n	8003096 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800308e:	461a      	mov	r2, r3
 8003090:	2101      	movs	r1, #1
 8003092:	f002 f81f 	bl	80050d4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	b2db      	uxtb	r3, r3
 800309a:	4619      	mov	r1, r3
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f004 f803 	bl	80070a8 <HAL_PCD_DataOutStageCallback>
 80030a2:	e046      	b.n	8003132 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4a26      	ldr	r2, [pc, #152]	; (8003140 <PCD_EP_OutXfrComplete_int+0x214>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d124      	bne.n	80030f6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c2:	461a      	mov	r2, r3
 80030c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030c8:	6093      	str	r3, [r2, #8]
 80030ca:	e032      	b.n	8003132 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d008      	beq.n	80030e8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e2:	461a      	mov	r2, r3
 80030e4:	2320      	movs	r3, #32
 80030e6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	4619      	mov	r1, r3
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f003 ffda 	bl	80070a8 <HAL_PCD_DataOutStageCallback>
 80030f4:	e01d      	b.n	8003132 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d114      	bne.n	8003126 <PCD_EP_OutXfrComplete_int+0x1fa>
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	4613      	mov	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	1a9b      	subs	r3, r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d108      	bne.n	8003126 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800311e:	461a      	mov	r2, r3
 8003120:	2100      	movs	r1, #0
 8003122:	f001 ffd7 	bl	80050d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	4619      	mov	r1, r3
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f003 ffbb 	bl	80070a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	4f54300a 	.word	0x4f54300a
 8003140:	4f54310a 	.word	0x4f54310a

08003144 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	333c      	adds	r3, #60	; 0x3c
 800315c:	3304      	adds	r3, #4
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4413      	add	r3, r2
 800316a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4a15      	ldr	r2, [pc, #84]	; (80031cc <PCD_EP_OutSetupPacket_int+0x88>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d90e      	bls.n	8003198 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003180:	2b00      	cmp	r3, #0
 8003182:	d009      	beq.n	8003198 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	015a      	lsls	r2, r3, #5
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4413      	add	r3, r2
 800318c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003190:	461a      	mov	r2, r3
 8003192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003196:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f003 ff73 	bl	8007084 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <PCD_EP_OutSetupPacket_int+0x88>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d90c      	bls.n	80031c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d108      	bne.n	80031c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6818      	ldr	r0, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031b8:	461a      	mov	r2, r3
 80031ba:	2101      	movs	r1, #1
 80031bc:	f001 ff8a 	bl	80050d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	4f54300a 	.word	0x4f54300a

080031d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	70fb      	strb	r3, [r7, #3]
 80031dc:	4613      	mov	r3, r2
 80031de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d107      	bne.n	80031fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80031ee:	883b      	ldrh	r3, [r7, #0]
 80031f0:	0419      	lsls	r1, r3, #16
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	629a      	str	r2, [r3, #40]	; 0x28
 80031fc:	e028      	b.n	8003250 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	0c1b      	lsrs	r3, r3, #16
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	4413      	add	r3, r2
 800320a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800320c:	2300      	movs	r3, #0
 800320e:	73fb      	strb	r3, [r7, #15]
 8003210:	e00d      	b.n	800322e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	7bfb      	ldrb	r3, [r7, #15]
 8003218:	3340      	adds	r3, #64	; 0x40
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	0c1b      	lsrs	r3, r3, #16
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	4413      	add	r3, r2
 8003226:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	3301      	adds	r3, #1
 800322c:	73fb      	strb	r3, [r7, #15]
 800322e:	7bfa      	ldrb	r2, [r7, #15]
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	3b01      	subs	r3, #1
 8003234:	429a      	cmp	r2, r3
 8003236:	d3ec      	bcc.n	8003212 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003238:	883b      	ldrh	r3, [r7, #0]
 800323a:	0418      	lsls	r0, r3, #16
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6819      	ldr	r1, [r3, #0]
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	3b01      	subs	r3, #1
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	4302      	orrs	r2, r0
 8003248:	3340      	adds	r3, #64	; 0x40
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	460b      	mov	r3, r1
 8003268:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	887a      	ldrh	r2, [r7, #2]
 8003270:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e264      	b.n	8003774 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d075      	beq.n	80033a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032b6:	4ba3      	ldr	r3, [pc, #652]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 030c 	and.w	r3, r3, #12
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d00c      	beq.n	80032dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032c2:	4ba0      	ldr	r3, [pc, #640]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d112      	bne.n	80032f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ce:	4b9d      	ldr	r3, [pc, #628]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032da:	d10b      	bne.n	80032f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032dc:	4b99      	ldr	r3, [pc, #612]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d05b      	beq.n	80033a0 <HAL_RCC_OscConfig+0x108>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d157      	bne.n	80033a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e23f      	b.n	8003774 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032fc:	d106      	bne.n	800330c <HAL_RCC_OscConfig+0x74>
 80032fe:	4b91      	ldr	r3, [pc, #580]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a90      	ldr	r2, [pc, #576]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 8003304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	e01d      	b.n	8003348 <HAL_RCC_OscConfig+0xb0>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003314:	d10c      	bne.n	8003330 <HAL_RCC_OscConfig+0x98>
 8003316:	4b8b      	ldr	r3, [pc, #556]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a8a      	ldr	r2, [pc, #552]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 800331c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	4b88      	ldr	r3, [pc, #544]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a87      	ldr	r2, [pc, #540]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 8003328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	e00b      	b.n	8003348 <HAL_RCC_OscConfig+0xb0>
 8003330:	4b84      	ldr	r3, [pc, #528]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a83      	ldr	r2, [pc, #524]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 8003336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800333a:	6013      	str	r3, [r2, #0]
 800333c:	4b81      	ldr	r3, [pc, #516]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a80      	ldr	r2, [pc, #512]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 8003342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d013      	beq.n	8003378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003350:	f7fd fee4 	bl	800111c <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003358:	f7fd fee0 	bl	800111c <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b64      	cmp	r3, #100	; 0x64
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e204      	b.n	8003774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336a:	4b76      	ldr	r3, [pc, #472]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCC_OscConfig+0xc0>
 8003376:	e014      	b.n	80033a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003378:	f7fd fed0 	bl	800111c <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003380:	f7fd fecc 	bl	800111c <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b64      	cmp	r3, #100	; 0x64
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e1f0      	b.n	8003774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003392:	4b6c      	ldr	r3, [pc, #432]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0xe8>
 800339e:	e000      	b.n	80033a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d063      	beq.n	8003476 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033ae:	4b65      	ldr	r3, [pc, #404]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 030c 	and.w	r3, r3, #12
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00b      	beq.n	80033d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ba:	4b62      	ldr	r3, [pc, #392]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033c2:	2b08      	cmp	r3, #8
 80033c4:	d11c      	bne.n	8003400 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033c6:	4b5f      	ldr	r3, [pc, #380]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d116      	bne.n	8003400 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d2:	4b5c      	ldr	r3, [pc, #368]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d005      	beq.n	80033ea <HAL_RCC_OscConfig+0x152>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d001      	beq.n	80033ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e1c4      	b.n	8003774 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ea:	4b56      	ldr	r3, [pc, #344]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	4952      	ldr	r1, [pc, #328]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fe:	e03a      	b.n	8003476 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d020      	beq.n	800344a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003408:	4b4f      	ldr	r3, [pc, #316]	; (8003548 <HAL_RCC_OscConfig+0x2b0>)
 800340a:	2201      	movs	r2, #1
 800340c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340e:	f7fd fe85 	bl	800111c <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003416:	f7fd fe81 	bl	800111c <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e1a5      	b.n	8003774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003428:	4b46      	ldr	r3, [pc, #280]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0f0      	beq.n	8003416 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003434:	4b43      	ldr	r3, [pc, #268]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4940      	ldr	r1, [pc, #256]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 8003444:	4313      	orrs	r3, r2
 8003446:	600b      	str	r3, [r1, #0]
 8003448:	e015      	b.n	8003476 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800344a:	4b3f      	ldr	r3, [pc, #252]	; (8003548 <HAL_RCC_OscConfig+0x2b0>)
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003450:	f7fd fe64 	bl	800111c <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003458:	f7fd fe60 	bl	800111c <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e184      	b.n	8003774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800346a:	4b36      	ldr	r3, [pc, #216]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d030      	beq.n	80034e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d016      	beq.n	80034b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800348a:	4b30      	ldr	r3, [pc, #192]	; (800354c <HAL_RCC_OscConfig+0x2b4>)
 800348c:	2201      	movs	r2, #1
 800348e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003490:	f7fd fe44 	bl	800111c <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003498:	f7fd fe40 	bl	800111c <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e164      	b.n	8003774 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034aa:	4b26      	ldr	r3, [pc, #152]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 80034ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f0      	beq.n	8003498 <HAL_RCC_OscConfig+0x200>
 80034b6:	e015      	b.n	80034e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b8:	4b24      	ldr	r3, [pc, #144]	; (800354c <HAL_RCC_OscConfig+0x2b4>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034be:	f7fd fe2d 	bl	800111c <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034c6:	f7fd fe29 	bl	800111c <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e14d      	b.n	8003774 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d8:	4b1a      	ldr	r3, [pc, #104]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 80034da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1f0      	bne.n	80034c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 80a0 	beq.w	8003632 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034f2:	2300      	movs	r3, #0
 80034f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f6:	4b13      	ldr	r3, [pc, #76]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10f      	bne.n	8003522 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	4a0e      	ldr	r2, [pc, #56]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 800350c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003510:	6413      	str	r3, [r2, #64]	; 0x40
 8003512:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <HAL_RCC_OscConfig+0x2ac>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800351e:	2301      	movs	r3, #1
 8003520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003522:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <HAL_RCC_OscConfig+0x2b8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352a:	2b00      	cmp	r3, #0
 800352c:	d121      	bne.n	8003572 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800352e:	4b08      	ldr	r3, [pc, #32]	; (8003550 <HAL_RCC_OscConfig+0x2b8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a07      	ldr	r2, [pc, #28]	; (8003550 <HAL_RCC_OscConfig+0x2b8>)
 8003534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800353a:	f7fd fdef 	bl	800111c <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003540:	e011      	b.n	8003566 <HAL_RCC_OscConfig+0x2ce>
 8003542:	bf00      	nop
 8003544:	40023800 	.word	0x40023800
 8003548:	42470000 	.word	0x42470000
 800354c:	42470e80 	.word	0x42470e80
 8003550:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003554:	f7fd fde2 	bl	800111c <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e106      	b.n	8003774 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003566:	4b85      	ldr	r3, [pc, #532]	; (800377c <HAL_RCC_OscConfig+0x4e4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d106      	bne.n	8003588 <HAL_RCC_OscConfig+0x2f0>
 800357a:	4b81      	ldr	r3, [pc, #516]	; (8003780 <HAL_RCC_OscConfig+0x4e8>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357e:	4a80      	ldr	r2, [pc, #512]	; (8003780 <HAL_RCC_OscConfig+0x4e8>)
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	6713      	str	r3, [r2, #112]	; 0x70
 8003586:	e01c      	b.n	80035c2 <HAL_RCC_OscConfig+0x32a>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	2b05      	cmp	r3, #5
 800358e:	d10c      	bne.n	80035aa <HAL_RCC_OscConfig+0x312>
 8003590:	4b7b      	ldr	r3, [pc, #492]	; (8003780 <HAL_RCC_OscConfig+0x4e8>)
 8003592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003594:	4a7a      	ldr	r2, [pc, #488]	; (8003780 <HAL_RCC_OscConfig+0x4e8>)
 8003596:	f043 0304 	orr.w	r3, r3, #4
 800359a:	6713      	str	r3, [r2, #112]	; 0x70
 800359c:	4b78      	ldr	r3, [pc, #480]	; (8003780 <HAL_RCC_OscConfig+0x4e8>)
 800359e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a0:	4a77      	ldr	r2, [pc, #476]	; (8003780 <HAL_RCC_OscConfig+0x4e8>)
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	6713      	str	r3, [r2, #112]	; 0x70
 80035a8:	e00b      	b.n	80035c2 <HAL_RCC_OscConfig+0x32a>
 80035aa:	4b75      	ldr	r3, [pc, #468]	; (8003780 <HAL_RCC_OscConfig+0x4e8>)
 80035ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ae:	4a74      	ldr	r2, [pc, #464]	; (8003780 <HAL_RCC_OscConfig+0x4e8>)
 80035b0:	f023 0301 	bic.w	r3, r3, #1
 80035b4:	6713      	str	r3, [r2, #112]	; 0x70
 80035b6:	4b72      	ldr	r3, [pc, #456]	; (8003780 <HAL_RCC_OscConfig+0x4e8>)
 80035b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ba:	4a71      	ldr	r2, [pc, #452]	; (8003780 <HAL_RCC_OscConfig+0x4e8>)
 80035bc:	f023 0304 	bic.w	r3, r3, #4
 80035c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d015      	beq.n	80035f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ca:	f7fd fda7 	bl	800111c <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d0:	e00a      	b.n	80035e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d2:	f7fd fda3 	bl	800111c <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e0c5      	b.n	8003774 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e8:	4b65      	ldr	r3, [pc, #404]	; (8003780 <HAL_RCC_OscConfig+0x4e8>)
 80035ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0ee      	beq.n	80035d2 <HAL_RCC_OscConfig+0x33a>
 80035f4:	e014      	b.n	8003620 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f6:	f7fd fd91 	bl	800111c <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035fc:	e00a      	b.n	8003614 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035fe:	f7fd fd8d 	bl	800111c <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	f241 3288 	movw	r2, #5000	; 0x1388
 800360c:	4293      	cmp	r3, r2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e0af      	b.n	8003774 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003614:	4b5a      	ldr	r3, [pc, #360]	; (8003780 <HAL_RCC_OscConfig+0x4e8>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1ee      	bne.n	80035fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003620:	7dfb      	ldrb	r3, [r7, #23]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d105      	bne.n	8003632 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003626:	4b56      	ldr	r3, [pc, #344]	; (8003780 <HAL_RCC_OscConfig+0x4e8>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	4a55      	ldr	r2, [pc, #340]	; (8003780 <HAL_RCC_OscConfig+0x4e8>)
 800362c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003630:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 809b 	beq.w	8003772 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800363c:	4b50      	ldr	r3, [pc, #320]	; (8003780 <HAL_RCC_OscConfig+0x4e8>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 030c 	and.w	r3, r3, #12
 8003644:	2b08      	cmp	r3, #8
 8003646:	d05c      	beq.n	8003702 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	2b02      	cmp	r3, #2
 800364e:	d141      	bne.n	80036d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003650:	4b4c      	ldr	r3, [pc, #304]	; (8003784 <HAL_RCC_OscConfig+0x4ec>)
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003656:	f7fd fd61 	bl	800111c <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800365e:	f7fd fd5d 	bl	800111c <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e081      	b.n	8003774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003670:	4b43      	ldr	r3, [pc, #268]	; (8003780 <HAL_RCC_OscConfig+0x4e8>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1f0      	bne.n	800365e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	69da      	ldr	r2, [r3, #28]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	019b      	lsls	r3, r3, #6
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003692:	085b      	lsrs	r3, r3, #1
 8003694:	3b01      	subs	r3, #1
 8003696:	041b      	lsls	r3, r3, #16
 8003698:	431a      	orrs	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	061b      	lsls	r3, r3, #24
 80036a0:	4937      	ldr	r1, [pc, #220]	; (8003780 <HAL_RCC_OscConfig+0x4e8>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036a6:	4b37      	ldr	r3, [pc, #220]	; (8003784 <HAL_RCC_OscConfig+0x4ec>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ac:	f7fd fd36 	bl	800111c <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b4:	f7fd fd32 	bl	800111c <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e056      	b.n	8003774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c6:	4b2e      	ldr	r3, [pc, #184]	; (8003780 <HAL_RCC_OscConfig+0x4e8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0f0      	beq.n	80036b4 <HAL_RCC_OscConfig+0x41c>
 80036d2:	e04e      	b.n	8003772 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d4:	4b2b      	ldr	r3, [pc, #172]	; (8003784 <HAL_RCC_OscConfig+0x4ec>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036da:	f7fd fd1f 	bl	800111c <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e2:	f7fd fd1b 	bl	800111c <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e03f      	b.n	8003774 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f4:	4b22      	ldr	r3, [pc, #136]	; (8003780 <HAL_RCC_OscConfig+0x4e8>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1f0      	bne.n	80036e2 <HAL_RCC_OscConfig+0x44a>
 8003700:	e037      	b.n	8003772 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d101      	bne.n	800370e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e032      	b.n	8003774 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800370e:	4b1c      	ldr	r3, [pc, #112]	; (8003780 <HAL_RCC_OscConfig+0x4e8>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d028      	beq.n	800376e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003726:	429a      	cmp	r2, r3
 8003728:	d121      	bne.n	800376e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003734:	429a      	cmp	r2, r3
 8003736:	d11a      	bne.n	800376e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800373e:	4013      	ands	r3, r2
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003744:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003746:	4293      	cmp	r3, r2
 8003748:	d111      	bne.n	800376e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	085b      	lsrs	r3, r3, #1
 8003756:	3b01      	subs	r3, #1
 8003758:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800375a:	429a      	cmp	r2, r3
 800375c:	d107      	bne.n	800376e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800376a:	429a      	cmp	r2, r3
 800376c:	d001      	beq.n	8003772 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40007000 	.word	0x40007000
 8003780:	40023800 	.word	0x40023800
 8003784:	42470060 	.word	0x42470060

08003788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e0cc      	b.n	8003936 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800379c:	4b68      	ldr	r3, [pc, #416]	; (8003940 <HAL_RCC_ClockConfig+0x1b8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d90c      	bls.n	80037c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037aa:	4b65      	ldr	r3, [pc, #404]	; (8003940 <HAL_RCC_ClockConfig+0x1b8>)
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b2:	4b63      	ldr	r3, [pc, #396]	; (8003940 <HAL_RCC_ClockConfig+0x1b8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e0b8      	b.n	8003936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d020      	beq.n	8003812 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037dc:	4b59      	ldr	r3, [pc, #356]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	4a58      	ldr	r2, [pc, #352]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037f4:	4b53      	ldr	r3, [pc, #332]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	4a52      	ldr	r2, [pc, #328]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003800:	4b50      	ldr	r3, [pc, #320]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	494d      	ldr	r1, [pc, #308]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	4313      	orrs	r3, r2
 8003810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d044      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d107      	bne.n	8003836 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003826:	4b47      	ldr	r3, [pc, #284]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d119      	bne.n	8003866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e07f      	b.n	8003936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d003      	beq.n	8003846 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003842:	2b03      	cmp	r3, #3
 8003844:	d107      	bne.n	8003856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003846:	4b3f      	ldr	r3, [pc, #252]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e06f      	b.n	8003936 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003856:	4b3b      	ldr	r3, [pc, #236]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e067      	b.n	8003936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003866:	4b37      	ldr	r3, [pc, #220]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f023 0203 	bic.w	r2, r3, #3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	4934      	ldr	r1, [pc, #208]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 8003874:	4313      	orrs	r3, r2
 8003876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003878:	f7fd fc50 	bl	800111c <HAL_GetTick>
 800387c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387e:	e00a      	b.n	8003896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003880:	f7fd fc4c 	bl	800111c <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	f241 3288 	movw	r2, #5000	; 0x1388
 800388e:	4293      	cmp	r3, r2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e04f      	b.n	8003936 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003896:	4b2b      	ldr	r3, [pc, #172]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 020c 	and.w	r2, r3, #12
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d1eb      	bne.n	8003880 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038a8:	4b25      	ldr	r3, [pc, #148]	; (8003940 <HAL_RCC_ClockConfig+0x1b8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d20c      	bcs.n	80038d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b6:	4b22      	ldr	r3, [pc, #136]	; (8003940 <HAL_RCC_ClockConfig+0x1b8>)
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038be:	4b20      	ldr	r3, [pc, #128]	; (8003940 <HAL_RCC_ClockConfig+0x1b8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e032      	b.n	8003936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038dc:	4b19      	ldr	r3, [pc, #100]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	4916      	ldr	r1, [pc, #88]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d009      	beq.n	800390e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038fa:	4b12      	ldr	r3, [pc, #72]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	490e      	ldr	r1, [pc, #56]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	4313      	orrs	r3, r2
 800390c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800390e:	f000 f821 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 8003912:	4602      	mov	r2, r0
 8003914:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	091b      	lsrs	r3, r3, #4
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	490a      	ldr	r1, [pc, #40]	; (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 8003920:	5ccb      	ldrb	r3, [r1, r3]
 8003922:	fa22 f303 	lsr.w	r3, r2, r3
 8003926:	4a09      	ldr	r2, [pc, #36]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800392a:	4b09      	ldr	r3, [pc, #36]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f7fd fbb0 	bl	8001094 <HAL_InitTick>

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40023c00 	.word	0x40023c00
 8003944:	40023800 	.word	0x40023800
 8003948:	08008c84 	.word	0x08008c84
 800394c:	20000008 	.word	0x20000008
 8003950:	2000000c 	.word	0x2000000c

08003954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003954:	b5b0      	push	{r4, r5, r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800395a:	2100      	movs	r1, #0
 800395c:	6079      	str	r1, [r7, #4]
 800395e:	2100      	movs	r1, #0
 8003960:	60f9      	str	r1, [r7, #12]
 8003962:	2100      	movs	r1, #0
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003966:	2100      	movs	r1, #0
 8003968:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800396a:	4952      	ldr	r1, [pc, #328]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x160>)
 800396c:	6889      	ldr	r1, [r1, #8]
 800396e:	f001 010c 	and.w	r1, r1, #12
 8003972:	2908      	cmp	r1, #8
 8003974:	d00d      	beq.n	8003992 <HAL_RCC_GetSysClockFreq+0x3e>
 8003976:	2908      	cmp	r1, #8
 8003978:	f200 8094 	bhi.w	8003aa4 <HAL_RCC_GetSysClockFreq+0x150>
 800397c:	2900      	cmp	r1, #0
 800397e:	d002      	beq.n	8003986 <HAL_RCC_GetSysClockFreq+0x32>
 8003980:	2904      	cmp	r1, #4
 8003982:	d003      	beq.n	800398c <HAL_RCC_GetSysClockFreq+0x38>
 8003984:	e08e      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003986:	4b4c      	ldr	r3, [pc, #304]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003988:	60bb      	str	r3, [r7, #8]
       break;
 800398a:	e08e      	b.n	8003aaa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800398c:	4b4b      	ldr	r3, [pc, #300]	; (8003abc <HAL_RCC_GetSysClockFreq+0x168>)
 800398e:	60bb      	str	r3, [r7, #8]
      break;
 8003990:	e08b      	b.n	8003aaa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003992:	4948      	ldr	r1, [pc, #288]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003994:	6849      	ldr	r1, [r1, #4]
 8003996:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800399a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800399c:	4945      	ldr	r1, [pc, #276]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x160>)
 800399e:	6849      	ldr	r1, [r1, #4]
 80039a0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80039a4:	2900      	cmp	r1, #0
 80039a6:	d024      	beq.n	80039f2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039a8:	4942      	ldr	r1, [pc, #264]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x160>)
 80039aa:	6849      	ldr	r1, [r1, #4]
 80039ac:	0989      	lsrs	r1, r1, #6
 80039ae:	4608      	mov	r0, r1
 80039b0:	f04f 0100 	mov.w	r1, #0
 80039b4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80039b8:	f04f 0500 	mov.w	r5, #0
 80039bc:	ea00 0204 	and.w	r2, r0, r4
 80039c0:	ea01 0305 	and.w	r3, r1, r5
 80039c4:	493d      	ldr	r1, [pc, #244]	; (8003abc <HAL_RCC_GetSysClockFreq+0x168>)
 80039c6:	fb01 f003 	mul.w	r0, r1, r3
 80039ca:	2100      	movs	r1, #0
 80039cc:	fb01 f102 	mul.w	r1, r1, r2
 80039d0:	1844      	adds	r4, r0, r1
 80039d2:	493a      	ldr	r1, [pc, #232]	; (8003abc <HAL_RCC_GetSysClockFreq+0x168>)
 80039d4:	fba2 0101 	umull	r0, r1, r2, r1
 80039d8:	1863      	adds	r3, r4, r1
 80039da:	4619      	mov	r1, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	461a      	mov	r2, r3
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	f7fc fc4c 	bl	8000280 <__aeabi_uldivmod>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4613      	mov	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	e04a      	b.n	8003a88 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039f2:	4b30      	ldr	r3, [pc, #192]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x160>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	099b      	lsrs	r3, r3, #6
 80039f8:	461a      	mov	r2, r3
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a02:	f04f 0100 	mov.w	r1, #0
 8003a06:	ea02 0400 	and.w	r4, r2, r0
 8003a0a:	ea03 0501 	and.w	r5, r3, r1
 8003a0e:	4620      	mov	r0, r4
 8003a10:	4629      	mov	r1, r5
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	f04f 0300 	mov.w	r3, #0
 8003a1a:	014b      	lsls	r3, r1, #5
 8003a1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a20:	0142      	lsls	r2, r0, #5
 8003a22:	4610      	mov	r0, r2
 8003a24:	4619      	mov	r1, r3
 8003a26:	1b00      	subs	r0, r0, r4
 8003a28:	eb61 0105 	sbc.w	r1, r1, r5
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	018b      	lsls	r3, r1, #6
 8003a36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a3a:	0182      	lsls	r2, r0, #6
 8003a3c:	1a12      	subs	r2, r2, r0
 8003a3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a42:	f04f 0000 	mov.w	r0, #0
 8003a46:	f04f 0100 	mov.w	r1, #0
 8003a4a:	00d9      	lsls	r1, r3, #3
 8003a4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a50:	00d0      	lsls	r0, r2, #3
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	1912      	adds	r2, r2, r4
 8003a58:	eb45 0303 	adc.w	r3, r5, r3
 8003a5c:	f04f 0000 	mov.w	r0, #0
 8003a60:	f04f 0100 	mov.w	r1, #0
 8003a64:	0299      	lsls	r1, r3, #10
 8003a66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a6a:	0290      	lsls	r0, r2, #10
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4610      	mov	r0, r2
 8003a72:	4619      	mov	r1, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	461a      	mov	r2, r3
 8003a78:	f04f 0300 	mov.w	r3, #0
 8003a7c:	f7fc fc00 	bl	8000280 <__aeabi_uldivmod>
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	4613      	mov	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a88:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	0c1b      	lsrs	r3, r3, #16
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	3301      	adds	r3, #1
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa0:	60bb      	str	r3, [r7, #8]
      break;
 8003aa2:	e002      	b.n	8003aaa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003aa4:	4b04      	ldr	r3, [pc, #16]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003aa6:	60bb      	str	r3, [r7, #8]
      break;
 8003aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aaa:	68bb      	ldr	r3, [r7, #8]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	00f42400 	.word	0x00f42400
 8003abc:	017d7840 	.word	0x017d7840

08003ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac4:	4b03      	ldr	r3, [pc, #12]	; (8003ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	20000008 	.word	0x20000008

08003ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003adc:	f7ff fff0 	bl	8003ac0 <HAL_RCC_GetHCLKFreq>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	0a9b      	lsrs	r3, r3, #10
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	4903      	ldr	r1, [pc, #12]	; (8003afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aee:	5ccb      	ldrb	r3, [r1, r3]
 8003af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40023800 	.word	0x40023800
 8003afc:	08008c94 	.word	0x08008c94

08003b00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b00:	b084      	sub	sp, #16
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b084      	sub	sp, #16
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
 8003b0a:	f107 001c 	add.w	r0, r7, #28
 8003b0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d122      	bne.n	8003b5e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d105      	bne.n	8003b52 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f001 fb1c 	bl	8005190 <USB_CoreReset>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	73fb      	strb	r3, [r7, #15]
 8003b5c:	e01a      	b.n	8003b94 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f001 fb10 	bl	8005190 <USB_CoreReset>
 8003b70:	4603      	mov	r3, r0
 8003b72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	639a      	str	r2, [r3, #56]	; 0x38
 8003b86:	e005      	b.n	8003b94 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d10b      	bne.n	8003bb2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f043 0206 	orr.w	r2, r3, #6
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f043 0220 	orr.w	r2, r3, #32
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bbe:	b004      	add	sp, #16
 8003bc0:	4770      	bx	lr
	...

08003bc4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d165      	bne.n	8003ca4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	4a41      	ldr	r2, [pc, #260]	; (8003ce0 <USB_SetTurnaroundTime+0x11c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d906      	bls.n	8003bee <USB_SetTurnaroundTime+0x2a>
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4a40      	ldr	r2, [pc, #256]	; (8003ce4 <USB_SetTurnaroundTime+0x120>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d202      	bcs.n	8003bee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003be8:	230f      	movs	r3, #15
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	e062      	b.n	8003cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	4a3c      	ldr	r2, [pc, #240]	; (8003ce4 <USB_SetTurnaroundTime+0x120>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d306      	bcc.n	8003c04 <USB_SetTurnaroundTime+0x40>
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	4a3b      	ldr	r2, [pc, #236]	; (8003ce8 <USB_SetTurnaroundTime+0x124>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d202      	bcs.n	8003c04 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003bfe:	230e      	movs	r3, #14
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	e057      	b.n	8003cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4a38      	ldr	r2, [pc, #224]	; (8003ce8 <USB_SetTurnaroundTime+0x124>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d306      	bcc.n	8003c1a <USB_SetTurnaroundTime+0x56>
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4a37      	ldr	r2, [pc, #220]	; (8003cec <USB_SetTurnaroundTime+0x128>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d202      	bcs.n	8003c1a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003c14:	230d      	movs	r3, #13
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	e04c      	b.n	8003cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4a33      	ldr	r2, [pc, #204]	; (8003cec <USB_SetTurnaroundTime+0x128>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d306      	bcc.n	8003c30 <USB_SetTurnaroundTime+0x6c>
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	4a32      	ldr	r2, [pc, #200]	; (8003cf0 <USB_SetTurnaroundTime+0x12c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d802      	bhi.n	8003c30 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003c2a:	230c      	movs	r3, #12
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	e041      	b.n	8003cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	4a2f      	ldr	r2, [pc, #188]	; (8003cf0 <USB_SetTurnaroundTime+0x12c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d906      	bls.n	8003c46 <USB_SetTurnaroundTime+0x82>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	4a2e      	ldr	r2, [pc, #184]	; (8003cf4 <USB_SetTurnaroundTime+0x130>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d802      	bhi.n	8003c46 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003c40:	230b      	movs	r3, #11
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	e036      	b.n	8003cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	4a2a      	ldr	r2, [pc, #168]	; (8003cf4 <USB_SetTurnaroundTime+0x130>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d906      	bls.n	8003c5c <USB_SetTurnaroundTime+0x98>
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	4a29      	ldr	r2, [pc, #164]	; (8003cf8 <USB_SetTurnaroundTime+0x134>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d802      	bhi.n	8003c5c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003c56:	230a      	movs	r3, #10
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	e02b      	b.n	8003cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4a26      	ldr	r2, [pc, #152]	; (8003cf8 <USB_SetTurnaroundTime+0x134>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d906      	bls.n	8003c72 <USB_SetTurnaroundTime+0xae>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	4a25      	ldr	r2, [pc, #148]	; (8003cfc <USB_SetTurnaroundTime+0x138>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d202      	bcs.n	8003c72 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003c6c:	2309      	movs	r3, #9
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	e020      	b.n	8003cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	4a21      	ldr	r2, [pc, #132]	; (8003cfc <USB_SetTurnaroundTime+0x138>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d306      	bcc.n	8003c88 <USB_SetTurnaroundTime+0xc4>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	4a20      	ldr	r2, [pc, #128]	; (8003d00 <USB_SetTurnaroundTime+0x13c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d802      	bhi.n	8003c88 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003c82:	2308      	movs	r3, #8
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	e015      	b.n	8003cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4a1d      	ldr	r2, [pc, #116]	; (8003d00 <USB_SetTurnaroundTime+0x13c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d906      	bls.n	8003c9e <USB_SetTurnaroundTime+0xda>
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	4a1c      	ldr	r2, [pc, #112]	; (8003d04 <USB_SetTurnaroundTime+0x140>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d202      	bcs.n	8003c9e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003c98:	2307      	movs	r3, #7
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	e00a      	b.n	8003cb4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003c9e:	2306      	movs	r3, #6
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	e007      	b.n	8003cb4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003ca4:	79fb      	ldrb	r3, [r7, #7]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d102      	bne.n	8003cb0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003caa:	2309      	movs	r3, #9
 8003cac:	617b      	str	r3, [r7, #20]
 8003cae:	e001      	b.n	8003cb4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003cb0:	2309      	movs	r3, #9
 8003cb2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	029b      	lsls	r3, r3, #10
 8003cc8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	371c      	adds	r7, #28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	00d8acbf 	.word	0x00d8acbf
 8003ce4:	00e4e1c0 	.word	0x00e4e1c0
 8003ce8:	00f42400 	.word	0x00f42400
 8003cec:	01067380 	.word	0x01067380
 8003cf0:	011a499f 	.word	0x011a499f
 8003cf4:	01312cff 	.word	0x01312cff
 8003cf8:	014ca43f 	.word	0x014ca43f
 8003cfc:	016e3600 	.word	0x016e3600
 8003d00:	01a6ab1f 	.word	0x01a6ab1f
 8003d04:	01e84800 	.word	0x01e84800

08003d08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f043 0201 	orr.w	r2, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f023 0201 	bic.w	r2, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d115      	bne.n	8003d9a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d7a:	2001      	movs	r0, #1
 8003d7c:	f7fd f9da 	bl	8001134 <HAL_Delay>
      ms++;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	3301      	adds	r3, #1
 8003d84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f001 f972 	bl	8005070 <USB_GetMode>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d01e      	beq.n	8003dd0 <USB_SetCurrentMode+0x84>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b31      	cmp	r3, #49	; 0x31
 8003d96:	d9f0      	bls.n	8003d7a <USB_SetCurrentMode+0x2e>
 8003d98:	e01a      	b.n	8003dd0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d115      	bne.n	8003dcc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003dac:	2001      	movs	r0, #1
 8003dae:	f7fd f9c1 	bl	8001134 <HAL_Delay>
      ms++;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	3301      	adds	r3, #1
 8003db6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f001 f959 	bl	8005070 <USB_GetMode>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <USB_SetCurrentMode+0x84>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b31      	cmp	r3, #49	; 0x31
 8003dc8:	d9f0      	bls.n	8003dac <USB_SetCurrentMode+0x60>
 8003dca:	e001      	b.n	8003dd0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e005      	b.n	8003ddc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2b32      	cmp	r3, #50	; 0x32
 8003dd4:	d101      	bne.n	8003dda <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003de4:	b084      	sub	sp, #16
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b086      	sub	sp, #24
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003df2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003dfe:	2300      	movs	r3, #0
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	e009      	b.n	8003e18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	3340      	adds	r3, #64	; 0x40
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	2200      	movs	r2, #0
 8003e10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	3301      	adds	r3, #1
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	2b0e      	cmp	r3, #14
 8003e1c:	d9f2      	bls.n	8003e04 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d11c      	bne.n	8003e5e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e32:	f043 0302 	orr.w	r3, r3, #2
 8003e36:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e48:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e54:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	639a      	str	r2, [r3, #56]	; 0x38
 8003e5c:	e00b      	b.n	8003e76 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e62:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	2300      	movs	r3, #0
 8003e80:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e88:	4619      	mov	r1, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e90:	461a      	mov	r2, r3
 8003e92:	680b      	ldr	r3, [r1, #0]
 8003e94:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d10c      	bne.n	8003eb6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d104      	bne.n	8003eac <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f945 	bl	8004134 <USB_SetDevSpeed>
 8003eaa:	e008      	b.n	8003ebe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003eac:	2101      	movs	r1, #1
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f940 	bl	8004134 <USB_SetDevSpeed>
 8003eb4:	e003      	b.n	8003ebe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003eb6:	2103      	movs	r1, #3
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f93b 	bl	8004134 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003ebe:	2110      	movs	r1, #16
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f8f3 	bl	80040ac <USB_FlushTxFifo>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f90f 	bl	80040f4 <USB_FlushRxFifo>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	2300      	movs	r3, #0
 8003eea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003efe:	461a      	mov	r2, r3
 8003f00:	2300      	movs	r3, #0
 8003f02:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f04:	2300      	movs	r3, #0
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	e043      	b.n	8003f92 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f20:	d118      	bne.n	8003f54 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10a      	bne.n	8003f3e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f34:	461a      	mov	r2, r3
 8003f36:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	e013      	b.n	8003f66 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	e008      	b.n	8003f66 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f60:	461a      	mov	r2, r3
 8003f62:	2300      	movs	r3, #0
 8003f64:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f72:	461a      	mov	r2, r3
 8003f74:	2300      	movs	r3, #0
 8003f76:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	015a      	lsls	r2, r3, #5
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f84:	461a      	mov	r2, r3
 8003f86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f8a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d3b7      	bcc.n	8003f0a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	e043      	b.n	8004028 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fb6:	d118      	bne.n	8003fea <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10a      	bne.n	8003fd4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	e013      	b.n	8003ffc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	e008      	b.n	8003ffc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4413      	add	r3, r2
 8004004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004008:	461a      	mov	r2, r3
 800400a:	2300      	movs	r3, #0
 800400c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401a:	461a      	mov	r2, r3
 800401c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004020:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	3301      	adds	r3, #1
 8004026:	613b      	str	r3, [r7, #16]
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	429a      	cmp	r2, r3
 800402e:	d3b7      	bcc.n	8003fa0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800403e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004042:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004050:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004054:	2b00      	cmp	r3, #0
 8004056:	d105      	bne.n	8004064 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	f043 0210 	orr.w	r2, r3, #16
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	699a      	ldr	r2, [r3, #24]
 8004068:	4b0f      	ldr	r3, [pc, #60]	; (80040a8 <USB_DevInit+0x2c4>)
 800406a:	4313      	orrs	r3, r2
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	f043 0208 	orr.w	r2, r3, #8
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004084:	2b01      	cmp	r3, #1
 8004086:	d107      	bne.n	8004098 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004090:	f043 0304 	orr.w	r3, r3, #4
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004098:	7dfb      	ldrb	r3, [r7, #23]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040a4:	b004      	add	sp, #16
 80040a6:	4770      	bx	lr
 80040a8:	803c3800 	.word	0x803c3800

080040ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	019b      	lsls	r3, r3, #6
 80040be:	f043 0220 	orr.w	r2, r3, #32
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	3301      	adds	r3, #1
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	4a08      	ldr	r2, [pc, #32]	; (80040f0 <USB_FlushTxFifo+0x44>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d901      	bls.n	80040d6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e006      	b.n	80040e4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f003 0320 	and.w	r3, r3, #32
 80040de:	2b20      	cmp	r3, #32
 80040e0:	d0f1      	beq.n	80040c6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	00030d40 	.word	0x00030d40

080040f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2210      	movs	r2, #16
 8004104:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	3301      	adds	r3, #1
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	4a08      	ldr	r2, [pc, #32]	; (8004130 <USB_FlushRxFifo+0x3c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d901      	bls.n	8004116 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e006      	b.n	8004124 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0310 	and.w	r3, r3, #16
 800411e:	2b10      	cmp	r3, #16
 8004120:	d0f1      	beq.n	8004106 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	00030d40 	.word	0x00030d40

08004134 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	78fb      	ldrb	r3, [r7, #3]
 800414e:	68f9      	ldr	r1, [r7, #12]
 8004150:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004154:	4313      	orrs	r3, r2
 8004156:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004166:	b480      	push	{r7}
 8004168:	b087      	sub	sp, #28
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 0306 	and.w	r3, r3, #6
 800417e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d102      	bne.n	800418c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004186:	2300      	movs	r3, #0
 8004188:	75fb      	strb	r3, [r7, #23]
 800418a:	e00a      	b.n	80041a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b02      	cmp	r3, #2
 8004190:	d002      	beq.n	8004198 <USB_GetDevSpeed+0x32>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2b06      	cmp	r3, #6
 8004196:	d102      	bne.n	800419e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004198:	2302      	movs	r3, #2
 800419a:	75fb      	strb	r3, [r7, #23]
 800419c:	e001      	b.n	80041a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800419e:	230f      	movs	r3, #15
 80041a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80041a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	371c      	adds	r7, #28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	785b      	ldrb	r3, [r3, #1]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d13a      	bne.n	8004242 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d2:	69da      	ldr	r2, [r3, #28]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	2101      	movs	r1, #1
 80041de:	fa01 f303 	lsl.w	r3, r1, r3
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	68f9      	ldr	r1, [r7, #12]
 80041e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041ea:	4313      	orrs	r3, r2
 80041ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d155      	bne.n	80042b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	78db      	ldrb	r3, [r3, #3]
 800421e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004220:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	059b      	lsls	r3, r3, #22
 8004226:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004228:	4313      	orrs	r3, r2
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	0151      	lsls	r1, r2, #5
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	440a      	add	r2, r1
 8004232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800423e:	6013      	str	r3, [r2, #0]
 8004240:	e036      	b.n	80042b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004248:	69da      	ldr	r2, [r3, #28]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	2101      	movs	r1, #1
 8004254:	fa01 f303 	lsl.w	r3, r1, r3
 8004258:	041b      	lsls	r3, r3, #16
 800425a:	68f9      	ldr	r1, [r7, #12]
 800425c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004260:	4313      	orrs	r3, r2
 8004262:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d11a      	bne.n	80042b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4413      	add	r3, r2
 8004282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	78db      	ldrb	r3, [r3, #3]
 8004294:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004296:	430b      	orrs	r3, r1
 8004298:	4313      	orrs	r3, r2
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	0151      	lsls	r1, r2, #5
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	440a      	add	r2, r1
 80042a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
	...

080042c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	785b      	ldrb	r3, [r3, #1]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d161      	bne.n	80043a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042f2:	d11f      	bne.n	8004334 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	0151      	lsls	r1, r2, #5
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	440a      	add	r2, r1
 800430a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800430e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004312:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4413      	add	r3, r2
 800431c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	0151      	lsls	r1, r2, #5
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	440a      	add	r2, r1
 800432a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800432e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004332:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800433a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	f003 030f 	and.w	r3, r3, #15
 8004344:	2101      	movs	r1, #1
 8004346:	fa01 f303 	lsl.w	r3, r1, r3
 800434a:	b29b      	uxth	r3, r3
 800434c:	43db      	mvns	r3, r3
 800434e:	68f9      	ldr	r1, [r7, #12]
 8004350:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004354:	4013      	ands	r3, r2
 8004356:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	f003 030f 	and.w	r3, r3, #15
 8004368:	2101      	movs	r1, #1
 800436a:	fa01 f303 	lsl.w	r3, r1, r3
 800436e:	b29b      	uxth	r3, r3
 8004370:	43db      	mvns	r3, r3
 8004372:	68f9      	ldr	r1, [r7, #12]
 8004374:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004378:	4013      	ands	r3, r2
 800437a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	0159      	lsls	r1, r3, #5
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	440b      	add	r3, r1
 8004392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004396:	4619      	mov	r1, r3
 8004398:	4b35      	ldr	r3, [pc, #212]	; (8004470 <USB_DeactivateEndpoint+0x1b0>)
 800439a:	4013      	ands	r3, r2
 800439c:	600b      	str	r3, [r1, #0]
 800439e:	e060      	b.n	8004462 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043b6:	d11f      	bne.n	80043f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	0151      	lsls	r1, r2, #5
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	440a      	add	r2, r1
 80043ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	0151      	lsls	r1, r2, #5
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	440a      	add	r2, r1
 80043ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	f003 030f 	and.w	r3, r3, #15
 8004408:	2101      	movs	r1, #1
 800440a:	fa01 f303 	lsl.w	r3, r1, r3
 800440e:	041b      	lsls	r3, r3, #16
 8004410:	43db      	mvns	r3, r3
 8004412:	68f9      	ldr	r1, [r7, #12]
 8004414:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004418:	4013      	ands	r3, r2
 800441a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004422:	69da      	ldr	r2, [r3, #28]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	f003 030f 	and.w	r3, r3, #15
 800442c:	2101      	movs	r1, #1
 800442e:	fa01 f303 	lsl.w	r3, r1, r3
 8004432:	041b      	lsls	r3, r3, #16
 8004434:	43db      	mvns	r3, r3
 8004436:	68f9      	ldr	r1, [r7, #12]
 8004438:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800443c:	4013      	ands	r3, r2
 800443e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4413      	add	r3, r2
 8004448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	0159      	lsls	r1, r3, #5
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	440b      	add	r3, r1
 8004456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445a:	4619      	mov	r1, r3
 800445c:	4b05      	ldr	r3, [pc, #20]	; (8004474 <USB_DeactivateEndpoint+0x1b4>)
 800445e:	4013      	ands	r3, r2
 8004460:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	ec337800 	.word	0xec337800
 8004474:	eff37800 	.word	0xeff37800

08004478 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b08a      	sub	sp, #40	; 0x28
 800447c:	af02      	add	r7, sp, #8
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	4613      	mov	r3, r2
 8004484:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	785b      	ldrb	r3, [r3, #1]
 8004494:	2b01      	cmp	r3, #1
 8004496:	f040 815c 	bne.w	8004752 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d132      	bne.n	8004508 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	0151      	lsls	r1, r2, #5
 80044b4:	69fa      	ldr	r2, [r7, #28]
 80044b6:	440a      	add	r2, r1
 80044b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	0151      	lsls	r1, r2, #5
 80044d8:	69fa      	ldr	r2, [r7, #28]
 80044da:	440a      	add	r2, r1
 80044dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	0151      	lsls	r1, r2, #5
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	440a      	add	r2, r1
 80044fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004500:	0cdb      	lsrs	r3, r3, #19
 8004502:	04db      	lsls	r3, r3, #19
 8004504:	6113      	str	r3, [r2, #16]
 8004506:	e074      	b.n	80045f2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	0151      	lsls	r1, r2, #5
 800451a:	69fa      	ldr	r2, [r7, #28]
 800451c:	440a      	add	r2, r1
 800451e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004522:	0cdb      	lsrs	r3, r3, #19
 8004524:	04db      	lsls	r3, r3, #19
 8004526:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	4413      	add	r3, r2
 8004530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	0151      	lsls	r1, r2, #5
 800453a:	69fa      	ldr	r2, [r7, #28]
 800453c:	440a      	add	r2, r1
 800453e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004542:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004546:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800454a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004558:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	6959      	ldr	r1, [r3, #20]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	440b      	add	r3, r1
 8004564:	1e59      	subs	r1, r3, #1
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	fbb1 f3f3 	udiv	r3, r1, r3
 800456e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004570:	4b9d      	ldr	r3, [pc, #628]	; (80047e8 <USB_EPStartXfer+0x370>)
 8004572:	400b      	ands	r3, r1
 8004574:	69b9      	ldr	r1, [r7, #24]
 8004576:	0148      	lsls	r0, r1, #5
 8004578:	69f9      	ldr	r1, [r7, #28]
 800457a:	4401      	add	r1, r0
 800457c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004580:	4313      	orrs	r3, r2
 8004582:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800459a:	69b9      	ldr	r1, [r7, #24]
 800459c:	0148      	lsls	r0, r1, #5
 800459e:	69f9      	ldr	r1, [r7, #28]
 80045a0:	4401      	add	r1, r0
 80045a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80045a6:	4313      	orrs	r3, r2
 80045a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	78db      	ldrb	r3, [r3, #3]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d11f      	bne.n	80045f2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	0151      	lsls	r1, r2, #5
 80045c4:	69fa      	ldr	r2, [r7, #28]
 80045c6:	440a      	add	r2, r1
 80045c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80045d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	0151      	lsls	r1, r2, #5
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	440a      	add	r2, r1
 80045e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80045f2:	79fb      	ldrb	r3, [r7, #7]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d14b      	bne.n	8004690 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d009      	beq.n	8004614 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460c:	461a      	mov	r2, r3
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	78db      	ldrb	r3, [r3, #3]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d128      	bne.n	800466e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004628:	2b00      	cmp	r3, #0
 800462a:	d110      	bne.n	800464e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	0151      	lsls	r1, r2, #5
 800463e:	69fa      	ldr	r2, [r7, #28]
 8004640:	440a      	add	r2, r1
 8004642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004646:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	e00f      	b.n	800466e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	4413      	add	r3, r2
 8004656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	0151      	lsls	r1, r2, #5
 8004660:	69fa      	ldr	r2, [r7, #28]
 8004662:	440a      	add	r2, r1
 8004664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800466c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	4413      	add	r3, r2
 8004676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	0151      	lsls	r1, r2, #5
 8004680:	69fa      	ldr	r2, [r7, #28]
 8004682:	440a      	add	r2, r1
 8004684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004688:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	e12f      	b.n	80048f0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	4413      	add	r3, r2
 8004698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	0151      	lsls	r1, r2, #5
 80046a2:	69fa      	ldr	r2, [r7, #28]
 80046a4:	440a      	add	r2, r1
 80046a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	78db      	ldrb	r3, [r3, #3]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d015      	beq.n	80046e4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 8117 	beq.w	80048f0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	2101      	movs	r1, #1
 80046d4:	fa01 f303 	lsl.w	r3, r1, r3
 80046d8:	69f9      	ldr	r1, [r7, #28]
 80046da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046de:	4313      	orrs	r3, r2
 80046e0:	634b      	str	r3, [r1, #52]	; 0x34
 80046e2:	e105      	b.n	80048f0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d110      	bne.n	8004716 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	0151      	lsls	r1, r2, #5
 8004706:	69fa      	ldr	r2, [r7, #28]
 8004708:	440a      	add	r2, r1
 800470a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800470e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	e00f      	b.n	8004736 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	015a      	lsls	r2, r3, #5
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	4413      	add	r3, r2
 800471e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	0151      	lsls	r1, r2, #5
 8004728:	69fa      	ldr	r2, [r7, #28]
 800472a:	440a      	add	r2, r1
 800472c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004734:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	68d9      	ldr	r1, [r3, #12]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	781a      	ldrb	r2, [r3, #0]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	b298      	uxth	r0, r3
 8004744:	79fb      	ldrb	r3, [r7, #7]
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	4603      	mov	r3, r0
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 fa2b 	bl	8004ba6 <USB_WritePacket>
 8004750:	e0ce      	b.n	80048f0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	0151      	lsls	r1, r2, #5
 8004764:	69fa      	ldr	r2, [r7, #28]
 8004766:	440a      	add	r2, r1
 8004768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800476c:	0cdb      	lsrs	r3, r3, #19
 800476e:	04db      	lsls	r3, r3, #19
 8004770:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	0151      	lsls	r1, r2, #5
 8004784:	69fa      	ldr	r2, [r7, #28]
 8004786:	440a      	add	r2, r1
 8004788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800478c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004790:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004794:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d126      	bne.n	80047ec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b4:	69b9      	ldr	r1, [r7, #24]
 80047b6:	0148      	lsls	r0, r1, #5
 80047b8:	69f9      	ldr	r1, [r7, #28]
 80047ba:	4401      	add	r1, r0
 80047bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80047c0:	4313      	orrs	r3, r2
 80047c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	0151      	lsls	r1, r2, #5
 80047d6:	69fa      	ldr	r2, [r7, #28]
 80047d8:	440a      	add	r2, r1
 80047da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047e2:	6113      	str	r3, [r2, #16]
 80047e4:	e036      	b.n	8004854 <USB_EPStartXfer+0x3dc>
 80047e6:	bf00      	nop
 80047e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	695a      	ldr	r2, [r3, #20]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	4413      	add	r3, r2
 80047f6:	1e5a      	subs	r2, r3, #1
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004800:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	8afb      	ldrh	r3, [r7, #22]
 8004812:	04d9      	lsls	r1, r3, #19
 8004814:	4b39      	ldr	r3, [pc, #228]	; (80048fc <USB_EPStartXfer+0x484>)
 8004816:	400b      	ands	r3, r1
 8004818:	69b9      	ldr	r1, [r7, #24]
 800481a:	0148      	lsls	r0, r1, #5
 800481c:	69f9      	ldr	r1, [r7, #28]
 800481e:	4401      	add	r1, r0
 8004820:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004824:	4313      	orrs	r3, r2
 8004826:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	8af9      	ldrh	r1, [r7, #22]
 800483c:	fb01 f303 	mul.w	r3, r1, r3
 8004840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004844:	69b9      	ldr	r1, [r7, #24]
 8004846:	0148      	lsls	r0, r1, #5
 8004848:	69f9      	ldr	r1, [r7, #28]
 800484a:	4401      	add	r1, r0
 800484c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004850:	4313      	orrs	r3, r2
 8004852:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004854:	79fb      	ldrb	r3, [r7, #7]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d10d      	bne.n	8004876 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d009      	beq.n	8004876 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	68d9      	ldr	r1, [r3, #12]
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	4413      	add	r3, r2
 800486e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004872:	460a      	mov	r2, r1
 8004874:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	78db      	ldrb	r3, [r3, #3]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d128      	bne.n	80048d0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488a:	2b00      	cmp	r3, #0
 800488c:	d110      	bne.n	80048b0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	0151      	lsls	r1, r2, #5
 80048a0:	69fa      	ldr	r2, [r7, #28]
 80048a2:	440a      	add	r2, r1
 80048a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	e00f      	b.n	80048d0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	0151      	lsls	r1, r2, #5
 80048c2:	69fa      	ldr	r2, [r7, #28]
 80048c4:	440a      	add	r2, r1
 80048c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	0151      	lsls	r1, r2, #5
 80048e2:	69fa      	ldr	r2, [r7, #28]
 80048e4:	440a      	add	r2, r1
 80048e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3720      	adds	r7, #32
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	1ff80000 	.word	0x1ff80000

08004900 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004900:	b480      	push	{r7}
 8004902:	b087      	sub	sp, #28
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	4613      	mov	r3, r2
 800490c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	785b      	ldrb	r3, [r3, #1]
 800491c:	2b01      	cmp	r3, #1
 800491e:	f040 80cd 	bne.w	8004abc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d132      	bne.n	8004990 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	0151      	lsls	r1, r2, #5
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	440a      	add	r2, r1
 8004940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004944:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004948:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800494c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	0151      	lsls	r1, r2, #5
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	440a      	add	r2, r1
 8004964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004968:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800496c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	4413      	add	r3, r2
 8004976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	0151      	lsls	r1, r2, #5
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	440a      	add	r2, r1
 8004984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004988:	0cdb      	lsrs	r3, r3, #19
 800498a:	04db      	lsls	r3, r3, #19
 800498c:	6113      	str	r3, [r2, #16]
 800498e:	e04e      	b.n	8004a2e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	4413      	add	r3, r2
 8004998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	0151      	lsls	r1, r2, #5
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	440a      	add	r2, r1
 80049a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049aa:	0cdb      	lsrs	r3, r3, #19
 80049ac:	04db      	lsls	r3, r3, #19
 80049ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	0151      	lsls	r1, r2, #5
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	440a      	add	r2, r1
 80049c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049d2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	695a      	ldr	r2, [r3, #20]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d903      	bls.n	80049e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	0151      	lsls	r1, r2, #5
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	440a      	add	r2, r1
 80049fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a14:	691a      	ldr	r2, [r3, #16]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a1e:	6939      	ldr	r1, [r7, #16]
 8004a20:	0148      	lsls	r0, r1, #5
 8004a22:	6979      	ldr	r1, [r7, #20]
 8004a24:	4401      	add	r1, r0
 8004a26:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a2e:	79fb      	ldrb	r3, [r7, #7]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d11e      	bne.n	8004a72 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d009      	beq.n	8004a50 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a48:	461a      	mov	r2, r3
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	0151      	lsls	r1, r2, #5
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	440a      	add	r2, r1
 8004a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	e092      	b.n	8004b98 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	0151      	lsls	r1, r2, #5
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	440a      	add	r2, r1
 8004a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a90:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d07e      	beq.n	8004b98 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	2101      	movs	r1, #1
 8004aac:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab0:	6979      	ldr	r1, [r7, #20]
 8004ab2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	634b      	str	r3, [r1, #52]	; 0x34
 8004aba:	e06d      	b.n	8004b98 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	0151      	lsls	r1, r2, #5
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	440a      	add	r2, r1
 8004ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ad6:	0cdb      	lsrs	r3, r3, #19
 8004ad8:	04db      	lsls	r3, r3, #19
 8004ada:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	0151      	lsls	r1, r2, #5
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	440a      	add	r2, r1
 8004af2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004af6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004afa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004afe:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	0151      	lsls	r1, r2, #5
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	440a      	add	r2, r1
 8004b26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b3c:	691a      	ldr	r2, [r3, #16]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b46:	6939      	ldr	r1, [r7, #16]
 8004b48:	0148      	lsls	r0, r1, #5
 8004b4a:	6979      	ldr	r1, [r7, #20]
 8004b4c:	4401      	add	r1, r0
 8004b4e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b52:	4313      	orrs	r3, r2
 8004b54:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004b56:	79fb      	ldrb	r3, [r7, #7]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d10d      	bne.n	8004b78 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d009      	beq.n	8004b78 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	68d9      	ldr	r1, [r3, #12]
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b74:	460a      	mov	r2, r1
 8004b76:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	0151      	lsls	r1, r2, #5
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	440a      	add	r2, r1
 8004b8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	371c      	adds	r7, #28
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b089      	sub	sp, #36	; 0x24
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	60f8      	str	r0, [r7, #12]
 8004bae:	60b9      	str	r1, [r7, #8]
 8004bb0:	4611      	mov	r1, r2
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	71fb      	strb	r3, [r7, #7]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004bc4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d123      	bne.n	8004c14 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004bcc:	88bb      	ldrh	r3, [r7, #4]
 8004bce:	3303      	adds	r3, #3
 8004bd0:	089b      	lsrs	r3, r3, #2
 8004bd2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	61bb      	str	r3, [r7, #24]
 8004bd8:	e018      	b.n	8004c0c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	031a      	lsls	r2, r3, #12
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004be6:	461a      	mov	r2, r3
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	3301      	adds	r3, #1
 8004c04:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	61bb      	str	r3, [r7, #24]
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d3e2      	bcc.n	8004bda <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3724      	adds	r7, #36	; 0x24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b08b      	sub	sp, #44	; 0x2c
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	60f8      	str	r0, [r7, #12]
 8004c2a:	60b9      	str	r1, [r7, #8]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004c38:	88fb      	ldrh	r3, [r7, #6]
 8004c3a:	089b      	lsrs	r3, r3, #2
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004c40:	88fb      	ldrh	r3, [r7, #6]
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004c48:	2300      	movs	r3, #0
 8004c4a:	623b      	str	r3, [r7, #32]
 8004c4c:	e014      	b.n	8004c78 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	601a      	str	r2, [r3, #0]
    pDest++;
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	3301      	adds	r3, #1
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	3301      	adds	r3, #1
 8004c6a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	3301      	adds	r3, #1
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	3301      	adds	r3, #1
 8004c76:	623b      	str	r3, [r7, #32]
 8004c78:	6a3a      	ldr	r2, [r7, #32]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d3e6      	bcc.n	8004c4e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004c80:	8bfb      	ldrh	r3, [r7, #30]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d01e      	beq.n	8004cc4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c90:	461a      	mov	r2, r3
 8004c92:	f107 0310 	add.w	r3, r7, #16
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	701a      	strb	r2, [r3, #0]
      i++;
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	623b      	str	r3, [r7, #32]
      pDest++;
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004cb8:	8bfb      	ldrh	r3, [r7, #30]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004cbe:	8bfb      	ldrh	r3, [r7, #30]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1ea      	bne.n	8004c9a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	372c      	adds	r7, #44	; 0x2c
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b085      	sub	sp, #20
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	785b      	ldrb	r3, [r3, #1]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d12c      	bne.n	8004d48 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	db12      	blt.n	8004d26 <USB_EPSetStall+0x54>
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00f      	beq.n	8004d26 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	0151      	lsls	r1, r2, #5
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	440a      	add	r2, r1
 8004d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d24:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	0151      	lsls	r1, r2, #5
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	440a      	add	r2, r1
 8004d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d44:	6013      	str	r3, [r2, #0]
 8004d46:	e02b      	b.n	8004da0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	db12      	blt.n	8004d80 <USB_EPSetStall+0xae>
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00f      	beq.n	8004d80 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	0151      	lsls	r1, r2, #5
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	440a      	add	r2, r1
 8004d76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d7e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	0151      	lsls	r1, r2, #5
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	440a      	add	r2, r1
 8004d96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b085      	sub	sp, #20
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
 8004db6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	785b      	ldrb	r3, [r3, #1]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d128      	bne.n	8004e1c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	0151      	lsls	r1, r2, #5
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	440a      	add	r2, r1
 8004de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004de8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	78db      	ldrb	r3, [r3, #3]
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d003      	beq.n	8004dfa <USB_EPClearStall+0x4c>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	78db      	ldrb	r3, [r3, #3]
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d138      	bne.n	8004e6c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	0151      	lsls	r1, r2, #5
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	440a      	add	r2, r1
 8004e10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	e027      	b.n	8004e6c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	0151      	lsls	r1, r2, #5
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	440a      	add	r2, r1
 8004e32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e3a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	78db      	ldrb	r3, [r3, #3]
 8004e40:	2b03      	cmp	r3, #3
 8004e42:	d003      	beq.n	8004e4c <USB_EPClearStall+0x9e>
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	78db      	ldrb	r3, [r3, #3]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d10f      	bne.n	8004e6c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	0151      	lsls	r1, r2, #5
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	440a      	add	r2, r1
 8004e62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e6a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b085      	sub	sp, #20
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	460b      	mov	r3, r1
 8004e84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e98:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004e9c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	78fb      	ldrb	r3, [r7, #3]
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004eae:	68f9      	ldr	r1, [r7, #12]
 8004eb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b085      	sub	sp, #20
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ee0:	f023 0303 	bic.w	r3, r3, #3
 8004ee4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ef4:	f023 0302 	bic.w	r3, r3, #2
 8004ef8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f22:	f023 0303 	bic.w	r3, r3, #3
 8004f26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f36:	f043 0302 	orr.w	r3, r3, #2
 8004f3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b085      	sub	sp, #20
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004f62:	68fb      	ldr	r3, [r7, #12]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	4013      	ands	r3, r2
 8004f92:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	0c1b      	lsrs	r3, r3, #16
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	b29b      	uxth	r3, r3
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	4013      	ands	r3, r2
 8005004:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005006:	68bb      	ldr	r3, [r7, #8]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005036:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005038:	78fb      	ldrb	r3, [r7, #3]
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	fa22 f303 	lsr.w	r3, r2, r3
 8005044:	01db      	lsls	r3, r3, #7
 8005046:	b2db      	uxtb	r3, r3
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800504e:	78fb      	ldrb	r3, [r7, #3]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	4413      	add	r3, r2
 8005056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4013      	ands	r3, r2
 8005060:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005062:	68bb      	ldr	r3, [r7, #8]
}
 8005064:	4618      	mov	r0, r3
 8005066:	371c      	adds	r7, #28
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	f003 0301 	and.w	r3, r3, #1
}
 8005080:	4618      	mov	r0, r3
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80050aa:	f023 0307 	bic.w	r3, r3, #7
 80050ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
	...

080050d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	460b      	mov	r3, r1
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	333c      	adds	r3, #60	; 0x3c
 80050ea:	3304      	adds	r3, #4
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	4a26      	ldr	r2, [pc, #152]	; (800518c <USB_EP0_OutStart+0xb8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d90a      	bls.n	800510e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005108:	d101      	bne.n	800510e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	e037      	b.n	800517e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005114:	461a      	mov	r2, r3
 8005116:	2300      	movs	r3, #0
 8005118:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005128:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800512c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800513c:	f043 0318 	orr.w	r3, r3, #24
 8005140:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005150:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005154:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005156:	7afb      	ldrb	r3, [r7, #11]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d10f      	bne.n	800517c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005162:	461a      	mov	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005176:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800517a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	371c      	adds	r7, #28
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	4f54300a 	.word	0x4f54300a

08005190 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	3301      	adds	r3, #1
 80051a0:	60fb      	str	r3, [r7, #12]
 80051a2:	4a13      	ldr	r2, [pc, #76]	; (80051f0 <USB_CoreReset+0x60>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d901      	bls.n	80051ac <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e01a      	b.n	80051e2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	daf3      	bge.n	800519c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	f043 0201 	orr.w	r2, r3, #1
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	3301      	adds	r3, #1
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	4a09      	ldr	r2, [pc, #36]	; (80051f0 <USB_CoreReset+0x60>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d901      	bls.n	80051d4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e006      	b.n	80051e2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d0f1      	beq.n	80051c4 <USB_CoreReset+0x34>

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	00030d40 	.word	0x00030d40

080051f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	460b      	mov	r3, r1
 80051fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005200:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005204:	f002 f9b0 	bl	8007568 <USBD_static_malloc>
 8005208:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d105      	bne.n	800521c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005218:	2302      	movs	r3, #2
 800521a:	e066      	b.n	80052ea <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	7c1b      	ldrb	r3, [r3, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d119      	bne.n	8005260 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800522c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005230:	2202      	movs	r2, #2
 8005232:	2181      	movs	r1, #129	; 0x81
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f002 f874 	bl	8007322 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005240:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005244:	2202      	movs	r2, #2
 8005246:	2101      	movs	r1, #1
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f002 f86a 	bl	8007322 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2210      	movs	r2, #16
 800525a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800525e:	e016      	b.n	800528e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005260:	2340      	movs	r3, #64	; 0x40
 8005262:	2202      	movs	r2, #2
 8005264:	2181      	movs	r1, #129	; 0x81
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f002 f85b 	bl	8007322 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005272:	2340      	movs	r3, #64	; 0x40
 8005274:	2202      	movs	r2, #2
 8005276:	2101      	movs	r1, #1
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f002 f852 	bl	8007322 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2210      	movs	r2, #16
 800528a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800528e:	2308      	movs	r3, #8
 8005290:	2203      	movs	r2, #3
 8005292:	2182      	movs	r1, #130	; 0x82
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f002 f844 	bl	8007322 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	7c1b      	ldrb	r3, [r3, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d109      	bne.n	80052d8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052ce:	2101      	movs	r1, #1
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f002 f915 	bl	8007500 <USBD_LL_PrepareReceive>
 80052d6:	e007      	b.n	80052e8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052de:	2340      	movs	r3, #64	; 0x40
 80052e0:	2101      	movs	r1, #1
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f002 f90c 	bl	8007500 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b082      	sub	sp, #8
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	460b      	mov	r3, r1
 80052fc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80052fe:	2181      	movs	r1, #129	; 0x81
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f002 f834 	bl	800736e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800530c:	2101      	movs	r1, #1
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f002 f82d 	bl	800736e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800531c:	2182      	movs	r1, #130	; 0x82
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f002 f825 	bl	800736e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00e      	beq.n	800535c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800534e:	4618      	mov	r0, r3
 8005350:	f002 f918 	bl	8007584 <USBD_static_free>
    pdev->pClassData = NULL;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
	...

08005368 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005378:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800537a:	2300      	movs	r3, #0
 800537c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005382:	2300      	movs	r3, #0
 8005384:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800538c:	2303      	movs	r3, #3
 800538e:	e0af      	b.n	80054f0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005398:	2b00      	cmp	r3, #0
 800539a:	d03f      	beq.n	800541c <USBD_CDC_Setup+0xb4>
 800539c:	2b20      	cmp	r3, #32
 800539e:	f040 809f 	bne.w	80054e0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	88db      	ldrh	r3, [r3, #6]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d02e      	beq.n	8005408 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	b25b      	sxtb	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	da16      	bge.n	80053e2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80053c0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	88d2      	ldrh	r2, [r2, #6]
 80053c6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	88db      	ldrh	r3, [r3, #6]
 80053cc:	2b07      	cmp	r3, #7
 80053ce:	bf28      	it	cs
 80053d0:	2307      	movcs	r3, #7
 80053d2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	89fa      	ldrh	r2, [r7, #14]
 80053d8:	4619      	mov	r1, r3
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f001 fae9 	bl	80069b2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80053e0:	e085      	b.n	80054ee <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	785a      	ldrb	r2, [r3, #1]
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	88db      	ldrh	r3, [r3, #6]
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80053f8:	6939      	ldr	r1, [r7, #16]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	88db      	ldrh	r3, [r3, #6]
 80053fe:	461a      	mov	r2, r3
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f001 fb02 	bl	8006a0a <USBD_CtlPrepareRx>
      break;
 8005406:	e072      	b.n	80054ee <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	7850      	ldrb	r0, [r2, #1]
 8005414:	2200      	movs	r2, #0
 8005416:	6839      	ldr	r1, [r7, #0]
 8005418:	4798      	blx	r3
      break;
 800541a:	e068      	b.n	80054ee <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	785b      	ldrb	r3, [r3, #1]
 8005420:	2b0b      	cmp	r3, #11
 8005422:	d852      	bhi.n	80054ca <USBD_CDC_Setup+0x162>
 8005424:	a201      	add	r2, pc, #4	; (adr r2, 800542c <USBD_CDC_Setup+0xc4>)
 8005426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542a:	bf00      	nop
 800542c:	0800545d 	.word	0x0800545d
 8005430:	080054d9 	.word	0x080054d9
 8005434:	080054cb 	.word	0x080054cb
 8005438:	080054cb 	.word	0x080054cb
 800543c:	080054cb 	.word	0x080054cb
 8005440:	080054cb 	.word	0x080054cb
 8005444:	080054cb 	.word	0x080054cb
 8005448:	080054cb 	.word	0x080054cb
 800544c:	080054cb 	.word	0x080054cb
 8005450:	080054cb 	.word	0x080054cb
 8005454:	08005487 	.word	0x08005487
 8005458:	080054b1 	.word	0x080054b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b03      	cmp	r3, #3
 8005466:	d107      	bne.n	8005478 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005468:	f107 030a 	add.w	r3, r7, #10
 800546c:	2202      	movs	r2, #2
 800546e:	4619      	mov	r1, r3
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f001 fa9e 	bl	80069b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005476:	e032      	b.n	80054de <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005478:	6839      	ldr	r1, [r7, #0]
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f001 fa28 	bl	80068d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8005480:	2303      	movs	r3, #3
 8005482:	75fb      	strb	r3, [r7, #23]
          break;
 8005484:	e02b      	b.n	80054de <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b03      	cmp	r3, #3
 8005490:	d107      	bne.n	80054a2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005492:	f107 030d 	add.w	r3, r7, #13
 8005496:	2201      	movs	r2, #1
 8005498:	4619      	mov	r1, r3
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f001 fa89 	bl	80069b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80054a0:	e01d      	b.n	80054de <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80054a2:	6839      	ldr	r1, [r7, #0]
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f001 fa13 	bl	80068d0 <USBD_CtlError>
            ret = USBD_FAIL;
 80054aa:	2303      	movs	r3, #3
 80054ac:	75fb      	strb	r3, [r7, #23]
          break;
 80054ae:	e016      	b.n	80054de <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b03      	cmp	r3, #3
 80054ba:	d00f      	beq.n	80054dc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80054bc:	6839      	ldr	r1, [r7, #0]
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f001 fa06 	bl	80068d0 <USBD_CtlError>
            ret = USBD_FAIL;
 80054c4:	2303      	movs	r3, #3
 80054c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80054c8:	e008      	b.n	80054dc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80054ca:	6839      	ldr	r1, [r7, #0]
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f001 f9ff 	bl	80068d0 <USBD_CtlError>
          ret = USBD_FAIL;
 80054d2:	2303      	movs	r3, #3
 80054d4:	75fb      	strb	r3, [r7, #23]
          break;
 80054d6:	e002      	b.n	80054de <USBD_CDC_Setup+0x176>
          break;
 80054d8:	bf00      	nop
 80054da:	e008      	b.n	80054ee <USBD_CDC_Setup+0x186>
          break;
 80054dc:	bf00      	nop
      }
      break;
 80054de:	e006      	b.n	80054ee <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80054e0:	6839      	ldr	r1, [r7, #0]
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f001 f9f4 	bl	80068d0 <USBD_CtlError>
      ret = USBD_FAIL;
 80054e8:	2303      	movs	r3, #3
 80054ea:	75fb      	strb	r3, [r7, #23]
      break;
 80054ec:	bf00      	nop
  }

  return (uint8_t)ret;
 80054ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3718      	adds	r7, #24
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	460b      	mov	r3, r1
 8005502:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800550a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005516:	2303      	movs	r3, #3
 8005518:	e04f      	b.n	80055ba <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005520:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005522:	78fa      	ldrb	r2, [r7, #3]
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	4613      	mov	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	440b      	add	r3, r1
 8005530:	3318      	adds	r3, #24
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d029      	beq.n	800558c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005538:	78fa      	ldrb	r2, [r7, #3]
 800553a:	6879      	ldr	r1, [r7, #4]
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	3318      	adds	r3, #24
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	78f9      	ldrb	r1, [r7, #3]
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	460b      	mov	r3, r1
 8005550:	00db      	lsls	r3, r3, #3
 8005552:	1a5b      	subs	r3, r3, r1
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4403      	add	r3, r0
 8005558:	3344      	adds	r3, #68	; 0x44
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005560:	fb03 f301 	mul.w	r3, r3, r1
 8005564:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005566:	2b00      	cmp	r3, #0
 8005568:	d110      	bne.n	800558c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800556a:	78fa      	ldrb	r2, [r7, #3]
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	4613      	mov	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	440b      	add	r3, r1
 8005578:	3318      	adds	r3, #24
 800557a:	2200      	movs	r2, #0
 800557c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800557e:	78f9      	ldrb	r1, [r7, #3]
 8005580:	2300      	movs	r3, #0
 8005582:	2200      	movs	r2, #0
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f001 ff9a 	bl	80074be <USBD_LL_Transmit>
 800558a:	e015      	b.n	80055b8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2200      	movs	r2, #0
 8005590:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00b      	beq.n	80055b8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80055b4:	78fa      	ldrb	r2, [r7, #3]
 80055b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b084      	sub	sp, #16
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
 80055ca:	460b      	mov	r3, r1
 80055cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e015      	b.n	8005610 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	4619      	mov	r1, r3
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f001 ffaa 	bl	8007542 <USBD_LL_GetRxDataSize>
 80055ee:	4602      	mov	r2, r0
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800560a:	4611      	mov	r1, r2
 800560c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005626:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800562e:	2303      	movs	r3, #3
 8005630:	e01b      	b.n	800566a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d015      	beq.n	8005668 <USBD_CDC_EP0_RxReady+0x50>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005642:	2bff      	cmp	r3, #255	; 0xff
 8005644:	d010      	beq.n	8005668 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005654:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800565c:	b292      	uxth	r2, r2
 800565e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	22ff      	movs	r2, #255	; 0xff
 8005664:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
	...

08005674 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2243      	movs	r2, #67	; 0x43
 8005680:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005682:	4b03      	ldr	r3, [pc, #12]	; (8005690 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005684:	4618      	mov	r0, r3
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	2000009c 	.word	0x2000009c

08005694 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2243      	movs	r2, #67	; 0x43
 80056a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80056a2:	4b03      	ldr	r3, [pc, #12]	; (80056b0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	20000058 	.word	0x20000058

080056b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2243      	movs	r2, #67	; 0x43
 80056c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80056c2:	4b03      	ldr	r3, [pc, #12]	; (80056d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	200000e0 	.word	0x200000e0

080056d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	220a      	movs	r2, #10
 80056e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80056e2:	4b03      	ldr	r3, [pc, #12]	; (80056f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	20000014 	.word	0x20000014

080056f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005704:	2303      	movs	r3, #3
 8005706:	e004      	b.n	8005712 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800571e:	b480      	push	{r7}
 8005720:	b087      	sub	sp, #28
 8005722:	af00      	add	r7, sp, #0
 8005724:	60f8      	str	r0, [r7, #12]
 8005726:	60b9      	str	r1, [r7, #8]
 8005728:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005730:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005738:	2303      	movs	r3, #3
 800573a:	e008      	b.n	800574e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	371c      	adds	r7, #28
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800575a:	b480      	push	{r7}
 800575c:	b085      	sub	sp, #20
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
 8005762:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800576a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005772:	2303      	movs	r3, #3
 8005774:	e004      	b.n	8005780 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800579a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e016      	b.n	80057d8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	7c1b      	ldrb	r3, [r3, #16]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d109      	bne.n	80057c6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057bc:	2101      	movs	r1, #1
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f001 fe9e 	bl	8007500 <USBD_LL_PrepareReceive>
 80057c4:	e007      	b.n	80057d6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057cc:	2340      	movs	r3, #64	; 0x40
 80057ce:	2101      	movs	r1, #1
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f001 fe95 	bl	8007500 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	4613      	mov	r3, r2
 80057ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e01f      	b.n	8005838 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	79fa      	ldrb	r2, [r7, #7]
 800582a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f001 fd11 	bl	8007254 <USBD_LL_Init>
 8005832:	4603      	mov	r3, r0
 8005834:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005836:	7dfb      	ldrb	r3, [r7, #23]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005854:	2303      	movs	r3, #3
 8005856:	e016      	b.n	8005886 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00b      	beq.n	8005884 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	f107 020e 	add.w	r2, r7, #14
 8005878:	4610      	mov	r0, r2
 800587a:	4798      	blx	r3
 800587c:	4602      	mov	r2, r0
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b082      	sub	sp, #8
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f001 fd28 	bl	80072ec <USBD_LL_Start>
 800589c:	4603      	mov	r3, r0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b083      	sub	sp, #12
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	460b      	mov	r3, r1
 80058c6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80058c8:	2303      	movs	r3, #3
 80058ca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d009      	beq.n	80058ea <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	78fa      	ldrb	r2, [r7, #3]
 80058e0:	4611      	mov	r1, r2
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	4798      	blx	r3
 80058e6:	4603      	mov	r3, r0
 80058e8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	460b      	mov	r3, r1
 80058fe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005906:	2b00      	cmp	r3, #0
 8005908:	d007      	beq.n	800591a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	78fa      	ldrb	r2, [r7, #3]
 8005914:	4611      	mov	r1, r2
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	4798      	blx	r3
  }

  return USBD_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005934:	6839      	ldr	r1, [r7, #0]
 8005936:	4618      	mov	r0, r3
 8005938:	f000 ff90 	bl	800685c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800594a:	461a      	mov	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005958:	f003 031f 	and.w	r3, r3, #31
 800595c:	2b02      	cmp	r3, #2
 800595e:	d01a      	beq.n	8005996 <USBD_LL_SetupStage+0x72>
 8005960:	2b02      	cmp	r3, #2
 8005962:	d822      	bhi.n	80059aa <USBD_LL_SetupStage+0x86>
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <USBD_LL_SetupStage+0x4a>
 8005968:	2b01      	cmp	r3, #1
 800596a:	d00a      	beq.n	8005982 <USBD_LL_SetupStage+0x5e>
 800596c:	e01d      	b.n	80059aa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005974:	4619      	mov	r1, r3
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fa62 	bl	8005e40 <USBD_StdDevReq>
 800597c:	4603      	mov	r3, r0
 800597e:	73fb      	strb	r3, [r7, #15]
      break;
 8005980:	e020      	b.n	80059c4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005988:	4619      	mov	r1, r3
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fac6 	bl	8005f1c <USBD_StdItfReq>
 8005990:	4603      	mov	r3, r0
 8005992:	73fb      	strb	r3, [r7, #15]
      break;
 8005994:	e016      	b.n	80059c4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800599c:	4619      	mov	r1, r3
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fb05 	bl	8005fae <USBD_StdEPReq>
 80059a4:	4603      	mov	r3, r0
 80059a6:	73fb      	strb	r3, [r7, #15]
      break;
 80059a8:	e00c      	b.n	80059c4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	4619      	mov	r1, r3
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f001 fcf7 	bl	80073ac <USBD_LL_StallEP>
 80059be:	4603      	mov	r3, r0
 80059c0:	73fb      	strb	r3, [r7, #15]
      break;
 80059c2:	bf00      	nop
  }

  return ret;
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b086      	sub	sp, #24
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	460b      	mov	r3, r1
 80059d8:	607a      	str	r2, [r7, #4]
 80059da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80059dc:	7afb      	ldrb	r3, [r7, #11]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d138      	bne.n	8005a54 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80059e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80059f0:	2b03      	cmp	r3, #3
 80059f2:	d14a      	bne.n	8005a8a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	689a      	ldr	r2, [r3, #8]
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d913      	bls.n	8005a28 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	689a      	ldr	r2, [r3, #8]
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	1ad2      	subs	r2, r2, r3
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	4293      	cmp	r3, r2
 8005a18:	bf28      	it	cs
 8005a1a:	4613      	movcs	r3, r2
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	6879      	ldr	r1, [r7, #4]
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f001 f80f 	bl	8006a44 <USBD_CtlContinueRx>
 8005a26:	e030      	b.n	8005a8a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b03      	cmp	r3, #3
 8005a32:	d10b      	bne.n	8005a4c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d005      	beq.n	8005a4c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f001 f80a 	bl	8006a66 <USBD_CtlSendStatus>
 8005a52:	e01a      	b.n	8005a8a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b03      	cmp	r3, #3
 8005a5e:	d114      	bne.n	8005a8a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00e      	beq.n	8005a8a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	7afa      	ldrb	r2, [r7, #11]
 8005a76:	4611      	mov	r1, r2
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	4798      	blx	r3
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005a80:	7dfb      	ldrb	r3, [r7, #23]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005a86:	7dfb      	ldrb	r3, [r7, #23]
 8005a88:	e000      	b.n	8005a8c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	607a      	str	r2, [r7, #4]
 8005aa0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005aa2:	7afb      	ldrb	r3, [r7, #11]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d16b      	bne.n	8005b80 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	3314      	adds	r3, #20
 8005aac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d156      	bne.n	8005b66 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d914      	bls.n	8005aee <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	1ad2      	subs	r2, r2, r3
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	6879      	ldr	r1, [r7, #4]
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 ff84 	bl	80069e8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f001 fd0a 	bl	8007500 <USBD_LL_PrepareReceive>
 8005aec:	e03b      	b.n	8005b66 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	68da      	ldr	r2, [r3, #12]
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d11c      	bne.n	8005b34 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d316      	bcc.n	8005b34 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d20f      	bcs.n	8005b34 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b14:	2200      	movs	r2, #0
 8005b16:	2100      	movs	r1, #0
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f000 ff65 	bl	80069e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b26:	2300      	movs	r3, #0
 8005b28:	2200      	movs	r2, #0
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f001 fce7 	bl	8007500 <USBD_LL_PrepareReceive>
 8005b32:	e018      	b.n	8005b66 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b03      	cmp	r3, #3
 8005b3e:	d10b      	bne.n	8005b58 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d005      	beq.n	8005b58 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b58:	2180      	movs	r1, #128	; 0x80
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f001 fc26 	bl	80073ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 ff93 	bl	8006a8c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d122      	bne.n	8005bb6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f7ff fe98 	bl	80058a6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005b7e:	e01a      	b.n	8005bb6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b03      	cmp	r3, #3
 8005b8a:	d114      	bne.n	8005bb6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00e      	beq.n	8005bb6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	7afa      	ldrb	r2, [r7, #11]
 8005ba2:	4611      	mov	r1, r2
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	4798      	blx	r3
 8005ba8:	4603      	mov	r3, r0
 8005baa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005bac:	7dfb      	ldrb	r3, [r7, #23]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005bb2:	7dfb      	ldrb	r3, [r7, #23]
 8005bb4:	e000      	b.n	8005bb8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3718      	adds	r7, #24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e02f      	b.n	8005c54 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00f      	beq.n	8005c1e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d009      	beq.n	8005c1e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6852      	ldr	r2, [r2, #4]
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	4611      	mov	r1, r2
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c1e:	2340      	movs	r3, #64	; 0x40
 8005c20:	2200      	movs	r2, #0
 8005c22:	2100      	movs	r1, #0
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f001 fb7c 	bl	8007322 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2240      	movs	r2, #64	; 0x40
 8005c36:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c3a:	2340      	movs	r3, #64	; 0x40
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	2180      	movs	r1, #128	; 0x80
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f001 fb6e 	bl	8007322 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2240      	movs	r2, #64	; 0x40
 8005c50:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	460b      	mov	r3, r1
 8005c66:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	78fa      	ldrb	r2, [r7, #3]
 8005c6c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2204      	movs	r2, #4
 8005c96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d106      	bne.n	8005cca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e012      	b.n	8005d14 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d10b      	bne.n	8005d12 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d005      	beq.n	8005d12 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3708      	adds	r7, #8
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	460b      	mov	r3, r1
 8005d26:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e014      	b.n	8005d60 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b03      	cmp	r3, #3
 8005d40:	d10d      	bne.n	8005d5e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d007      	beq.n	8005d5e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	78fa      	ldrb	r2, [r7, #3]
 8005d58:	4611      	mov	r1, r2
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	460b      	mov	r3, r1
 8005d72:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e014      	b.n	8005dac <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b03      	cmp	r3, #3
 8005d8c:	d10d      	bne.n	8005daa <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d007      	beq.n	8005daa <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	78fa      	ldrb	r2, [r7, #3]
 8005da4:	4611      	mov	r1, r2
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3708      	adds	r7, #8
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b082      	sub	sp, #8
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d009      	beq.n	8005df8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	6852      	ldr	r2, [r2, #4]
 8005df0:	b2d2      	uxtb	r2, r2
 8005df2:	4611      	mov	r1, r2
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	4798      	blx	r3
  }

  return USBD_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b087      	sub	sp, #28
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	3301      	adds	r3, #1
 8005e18:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005e20:	8a3b      	ldrh	r3, [r7, #16]
 8005e22:	021b      	lsls	r3, r3, #8
 8005e24:	b21a      	sxth	r2, r3
 8005e26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	b21b      	sxth	r3, r3
 8005e2e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005e30:	89fb      	ldrh	r3, [r7, #14]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
	...

08005e40 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e56:	2b40      	cmp	r3, #64	; 0x40
 8005e58:	d005      	beq.n	8005e66 <USBD_StdDevReq+0x26>
 8005e5a:	2b40      	cmp	r3, #64	; 0x40
 8005e5c:	d853      	bhi.n	8005f06 <USBD_StdDevReq+0xc6>
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00b      	beq.n	8005e7a <USBD_StdDevReq+0x3a>
 8005e62:	2b20      	cmp	r3, #32
 8005e64:	d14f      	bne.n	8005f06 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	6839      	ldr	r1, [r7, #0]
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	4798      	blx	r3
 8005e74:	4603      	mov	r3, r0
 8005e76:	73fb      	strb	r3, [r7, #15]
      break;
 8005e78:	e04a      	b.n	8005f10 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	785b      	ldrb	r3, [r3, #1]
 8005e7e:	2b09      	cmp	r3, #9
 8005e80:	d83b      	bhi.n	8005efa <USBD_StdDevReq+0xba>
 8005e82:	a201      	add	r2, pc, #4	; (adr r2, 8005e88 <USBD_StdDevReq+0x48>)
 8005e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e88:	08005edd 	.word	0x08005edd
 8005e8c:	08005ef1 	.word	0x08005ef1
 8005e90:	08005efb 	.word	0x08005efb
 8005e94:	08005ee7 	.word	0x08005ee7
 8005e98:	08005efb 	.word	0x08005efb
 8005e9c:	08005ebb 	.word	0x08005ebb
 8005ea0:	08005eb1 	.word	0x08005eb1
 8005ea4:	08005efb 	.word	0x08005efb
 8005ea8:	08005ed3 	.word	0x08005ed3
 8005eac:	08005ec5 	.word	0x08005ec5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005eb0:	6839      	ldr	r1, [r7, #0]
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f9de 	bl	8006274 <USBD_GetDescriptor>
          break;
 8005eb8:	e024      	b.n	8005f04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005eba:	6839      	ldr	r1, [r7, #0]
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fb43 	bl	8006548 <USBD_SetAddress>
          break;
 8005ec2:	e01f      	b.n	8005f04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005ec4:	6839      	ldr	r1, [r7, #0]
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fb82 	bl	80065d0 <USBD_SetConfig>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	73fb      	strb	r3, [r7, #15]
          break;
 8005ed0:	e018      	b.n	8005f04 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005ed2:	6839      	ldr	r1, [r7, #0]
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fc21 	bl	800671c <USBD_GetConfig>
          break;
 8005eda:	e013      	b.n	8005f04 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005edc:	6839      	ldr	r1, [r7, #0]
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 fc52 	bl	8006788 <USBD_GetStatus>
          break;
 8005ee4:	e00e      	b.n	8005f04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005ee6:	6839      	ldr	r1, [r7, #0]
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 fc81 	bl	80067f0 <USBD_SetFeature>
          break;
 8005eee:	e009      	b.n	8005f04 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005ef0:	6839      	ldr	r1, [r7, #0]
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fc90 	bl	8006818 <USBD_ClrFeature>
          break;
 8005ef8:	e004      	b.n	8005f04 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005efa:	6839      	ldr	r1, [r7, #0]
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fce7 	bl	80068d0 <USBD_CtlError>
          break;
 8005f02:	bf00      	nop
      }
      break;
 8005f04:	e004      	b.n	8005f10 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005f06:	6839      	ldr	r1, [r7, #0]
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 fce1 	bl	80068d0 <USBD_CtlError>
      break;
 8005f0e:	bf00      	nop
  }

  return ret;
 8005f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop

08005f1c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f26:	2300      	movs	r3, #0
 8005f28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f32:	2b40      	cmp	r3, #64	; 0x40
 8005f34:	d005      	beq.n	8005f42 <USBD_StdItfReq+0x26>
 8005f36:	2b40      	cmp	r3, #64	; 0x40
 8005f38:	d82f      	bhi.n	8005f9a <USBD_StdItfReq+0x7e>
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <USBD_StdItfReq+0x26>
 8005f3e:	2b20      	cmp	r3, #32
 8005f40:	d12b      	bne.n	8005f9a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d81d      	bhi.n	8005f8c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	889b      	ldrh	r3, [r3, #4]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d813      	bhi.n	8005f82 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	6839      	ldr	r1, [r7, #0]
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	4798      	blx	r3
 8005f68:	4603      	mov	r3, r0
 8005f6a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	88db      	ldrh	r3, [r3, #6]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d110      	bne.n	8005f96 <USBD_StdItfReq+0x7a>
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10d      	bne.n	8005f96 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 fd73 	bl	8006a66 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005f80:	e009      	b.n	8005f96 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005f82:	6839      	ldr	r1, [r7, #0]
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fca3 	bl	80068d0 <USBD_CtlError>
          break;
 8005f8a:	e004      	b.n	8005f96 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005f8c:	6839      	ldr	r1, [r7, #0]
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 fc9e 	bl	80068d0 <USBD_CtlError>
          break;
 8005f94:	e000      	b.n	8005f98 <USBD_StdItfReq+0x7c>
          break;
 8005f96:	bf00      	nop
      }
      break;
 8005f98:	e004      	b.n	8005fa4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005f9a:	6839      	ldr	r1, [r7, #0]
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fc97 	bl	80068d0 <USBD_CtlError>
      break;
 8005fa2:	bf00      	nop
  }

  return ret;
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	889b      	ldrh	r3, [r3, #4]
 8005fc0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fca:	2b40      	cmp	r3, #64	; 0x40
 8005fcc:	d007      	beq.n	8005fde <USBD_StdEPReq+0x30>
 8005fce:	2b40      	cmp	r3, #64	; 0x40
 8005fd0:	f200 8145 	bhi.w	800625e <USBD_StdEPReq+0x2b0>
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00c      	beq.n	8005ff2 <USBD_StdEPReq+0x44>
 8005fd8:	2b20      	cmp	r3, #32
 8005fda:	f040 8140 	bne.w	800625e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	6839      	ldr	r1, [r7, #0]
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	4798      	blx	r3
 8005fec:	4603      	mov	r3, r0
 8005fee:	73fb      	strb	r3, [r7, #15]
      break;
 8005ff0:	e13a      	b.n	8006268 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	785b      	ldrb	r3, [r3, #1]
 8005ff6:	2b03      	cmp	r3, #3
 8005ff8:	d007      	beq.n	800600a <USBD_StdEPReq+0x5c>
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	f300 8129 	bgt.w	8006252 <USBD_StdEPReq+0x2a4>
 8006000:	2b00      	cmp	r3, #0
 8006002:	d07f      	beq.n	8006104 <USBD_StdEPReq+0x156>
 8006004:	2b01      	cmp	r3, #1
 8006006:	d03c      	beq.n	8006082 <USBD_StdEPReq+0xd4>
 8006008:	e123      	b.n	8006252 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b02      	cmp	r3, #2
 8006014:	d002      	beq.n	800601c <USBD_StdEPReq+0x6e>
 8006016:	2b03      	cmp	r3, #3
 8006018:	d016      	beq.n	8006048 <USBD_StdEPReq+0x9a>
 800601a:	e02c      	b.n	8006076 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800601c:	7bbb      	ldrb	r3, [r7, #14]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00d      	beq.n	800603e <USBD_StdEPReq+0x90>
 8006022:	7bbb      	ldrb	r3, [r7, #14]
 8006024:	2b80      	cmp	r3, #128	; 0x80
 8006026:	d00a      	beq.n	800603e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006028:	7bbb      	ldrb	r3, [r7, #14]
 800602a:	4619      	mov	r1, r3
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f001 f9bd 	bl	80073ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006032:	2180      	movs	r1, #128	; 0x80
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f001 f9b9 	bl	80073ac <USBD_LL_StallEP>
 800603a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800603c:	e020      	b.n	8006080 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800603e:	6839      	ldr	r1, [r7, #0]
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 fc45 	bl	80068d0 <USBD_CtlError>
              break;
 8006046:	e01b      	b.n	8006080 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	885b      	ldrh	r3, [r3, #2]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10e      	bne.n	800606e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006050:	7bbb      	ldrb	r3, [r7, #14]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00b      	beq.n	800606e <USBD_StdEPReq+0xc0>
 8006056:	7bbb      	ldrb	r3, [r7, #14]
 8006058:	2b80      	cmp	r3, #128	; 0x80
 800605a:	d008      	beq.n	800606e <USBD_StdEPReq+0xc0>
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	88db      	ldrh	r3, [r3, #6]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d104      	bne.n	800606e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006064:	7bbb      	ldrb	r3, [r7, #14]
 8006066:	4619      	mov	r1, r3
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f001 f99f 	bl	80073ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fcf9 	bl	8006a66 <USBD_CtlSendStatus>

              break;
 8006074:	e004      	b.n	8006080 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006076:	6839      	ldr	r1, [r7, #0]
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fc29 	bl	80068d0 <USBD_CtlError>
              break;
 800607e:	bf00      	nop
          }
          break;
 8006080:	e0ec      	b.n	800625c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b02      	cmp	r3, #2
 800608c:	d002      	beq.n	8006094 <USBD_StdEPReq+0xe6>
 800608e:	2b03      	cmp	r3, #3
 8006090:	d016      	beq.n	80060c0 <USBD_StdEPReq+0x112>
 8006092:	e030      	b.n	80060f6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006094:	7bbb      	ldrb	r3, [r7, #14]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00d      	beq.n	80060b6 <USBD_StdEPReq+0x108>
 800609a:	7bbb      	ldrb	r3, [r7, #14]
 800609c:	2b80      	cmp	r3, #128	; 0x80
 800609e:	d00a      	beq.n	80060b6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80060a0:	7bbb      	ldrb	r3, [r7, #14]
 80060a2:	4619      	mov	r1, r3
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f001 f981 	bl	80073ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80060aa:	2180      	movs	r1, #128	; 0x80
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f001 f97d 	bl	80073ac <USBD_LL_StallEP>
 80060b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80060b4:	e025      	b.n	8006102 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80060b6:	6839      	ldr	r1, [r7, #0]
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 fc09 	bl	80068d0 <USBD_CtlError>
              break;
 80060be:	e020      	b.n	8006102 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	885b      	ldrh	r3, [r3, #2]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d11b      	bne.n	8006100 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80060c8:	7bbb      	ldrb	r3, [r7, #14]
 80060ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d004      	beq.n	80060dc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80060d2:	7bbb      	ldrb	r3, [r7, #14]
 80060d4:	4619      	mov	r1, r3
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f001 f987 	bl	80073ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fcc2 	bl	8006a66 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	6839      	ldr	r1, [r7, #0]
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	4798      	blx	r3
 80060f0:	4603      	mov	r3, r0
 80060f2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80060f4:	e004      	b.n	8006100 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80060f6:	6839      	ldr	r1, [r7, #0]
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fbe9 	bl	80068d0 <USBD_CtlError>
              break;
 80060fe:	e000      	b.n	8006102 <USBD_StdEPReq+0x154>
              break;
 8006100:	bf00      	nop
          }
          break;
 8006102:	e0ab      	b.n	800625c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b02      	cmp	r3, #2
 800610e:	d002      	beq.n	8006116 <USBD_StdEPReq+0x168>
 8006110:	2b03      	cmp	r3, #3
 8006112:	d032      	beq.n	800617a <USBD_StdEPReq+0x1cc>
 8006114:	e097      	b.n	8006246 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006116:	7bbb      	ldrb	r3, [r7, #14]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d007      	beq.n	800612c <USBD_StdEPReq+0x17e>
 800611c:	7bbb      	ldrb	r3, [r7, #14]
 800611e:	2b80      	cmp	r3, #128	; 0x80
 8006120:	d004      	beq.n	800612c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006122:	6839      	ldr	r1, [r7, #0]
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 fbd3 	bl	80068d0 <USBD_CtlError>
                break;
 800612a:	e091      	b.n	8006250 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800612c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006130:	2b00      	cmp	r3, #0
 8006132:	da0b      	bge.n	800614c <USBD_StdEPReq+0x19e>
 8006134:	7bbb      	ldrb	r3, [r7, #14]
 8006136:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800613a:	4613      	mov	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	3310      	adds	r3, #16
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	4413      	add	r3, r2
 8006148:	3304      	adds	r3, #4
 800614a:	e00b      	b.n	8006164 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800614c:	7bbb      	ldrb	r3, [r7, #14]
 800614e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006152:	4613      	mov	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	4413      	add	r3, r2
 8006162:	3304      	adds	r3, #4
 8006164:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2200      	movs	r2, #0
 800616a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2202      	movs	r2, #2
 8006170:	4619      	mov	r1, r3
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fc1d 	bl	80069b2 <USBD_CtlSendData>
              break;
 8006178:	e06a      	b.n	8006250 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800617a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800617e:	2b00      	cmp	r3, #0
 8006180:	da11      	bge.n	80061a6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006182:	7bbb      	ldrb	r3, [r7, #14]
 8006184:	f003 020f 	and.w	r2, r3, #15
 8006188:	6879      	ldr	r1, [r7, #4]
 800618a:	4613      	mov	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	440b      	add	r3, r1
 8006194:	3324      	adds	r3, #36	; 0x24
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d117      	bne.n	80061cc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800619c:	6839      	ldr	r1, [r7, #0]
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fb96 	bl	80068d0 <USBD_CtlError>
                  break;
 80061a4:	e054      	b.n	8006250 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80061a6:	7bbb      	ldrb	r3, [r7, #14]
 80061a8:	f003 020f 	and.w	r2, r3, #15
 80061ac:	6879      	ldr	r1, [r7, #4]
 80061ae:	4613      	mov	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4413      	add	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	440b      	add	r3, r1
 80061b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d104      	bne.n	80061cc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80061c2:	6839      	ldr	r1, [r7, #0]
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fb83 	bl	80068d0 <USBD_CtlError>
                  break;
 80061ca:	e041      	b.n	8006250 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	da0b      	bge.n	80061ec <USBD_StdEPReq+0x23e>
 80061d4:	7bbb      	ldrb	r3, [r7, #14]
 80061d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061da:	4613      	mov	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	3310      	adds	r3, #16
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	4413      	add	r3, r2
 80061e8:	3304      	adds	r3, #4
 80061ea:	e00b      	b.n	8006204 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80061ec:	7bbb      	ldrb	r3, [r7, #14]
 80061ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061f2:	4613      	mov	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	4413      	add	r3, r2
 8006202:	3304      	adds	r3, #4
 8006204:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006206:	7bbb      	ldrb	r3, [r7, #14]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <USBD_StdEPReq+0x264>
 800620c:	7bbb      	ldrb	r3, [r7, #14]
 800620e:	2b80      	cmp	r3, #128	; 0x80
 8006210:	d103      	bne.n	800621a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	2200      	movs	r2, #0
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	e00e      	b.n	8006238 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800621a:	7bbb      	ldrb	r3, [r7, #14]
 800621c:	4619      	mov	r1, r3
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f001 f902 	bl	8007428 <USBD_LL_IsStallEP>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2201      	movs	r2, #1
 800622e:	601a      	str	r2, [r3, #0]
 8006230:	e002      	b.n	8006238 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2200      	movs	r2, #0
 8006236:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2202      	movs	r2, #2
 800623c:	4619      	mov	r1, r3
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 fbb7 	bl	80069b2 <USBD_CtlSendData>
              break;
 8006244:	e004      	b.n	8006250 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006246:	6839      	ldr	r1, [r7, #0]
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 fb41 	bl	80068d0 <USBD_CtlError>
              break;
 800624e:	bf00      	nop
          }
          break;
 8006250:	e004      	b.n	800625c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006252:	6839      	ldr	r1, [r7, #0]
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fb3b 	bl	80068d0 <USBD_CtlError>
          break;
 800625a:	bf00      	nop
      }
      break;
 800625c:	e004      	b.n	8006268 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800625e:	6839      	ldr	r1, [r7, #0]
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fb35 	bl	80068d0 <USBD_CtlError>
      break;
 8006266:	bf00      	nop
  }

  return ret;
 8006268:	7bfb      	ldrb	r3, [r7, #15]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
	...

08006274 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800627e:	2300      	movs	r3, #0
 8006280:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006282:	2300      	movs	r3, #0
 8006284:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	885b      	ldrh	r3, [r3, #2]
 800628e:	0a1b      	lsrs	r3, r3, #8
 8006290:	b29b      	uxth	r3, r3
 8006292:	3b01      	subs	r3, #1
 8006294:	2b06      	cmp	r3, #6
 8006296:	f200 8128 	bhi.w	80064ea <USBD_GetDescriptor+0x276>
 800629a:	a201      	add	r2, pc, #4	; (adr r2, 80062a0 <USBD_GetDescriptor+0x2c>)
 800629c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a0:	080062bd 	.word	0x080062bd
 80062a4:	080062d5 	.word	0x080062d5
 80062a8:	08006315 	.word	0x08006315
 80062ac:	080064eb 	.word	0x080064eb
 80062b0:	080064eb 	.word	0x080064eb
 80062b4:	0800648b 	.word	0x0800648b
 80062b8:	080064b7 	.word	0x080064b7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	7c12      	ldrb	r2, [r2, #16]
 80062c8:	f107 0108 	add.w	r1, r7, #8
 80062cc:	4610      	mov	r0, r2
 80062ce:	4798      	blx	r3
 80062d0:	60f8      	str	r0, [r7, #12]
      break;
 80062d2:	e112      	b.n	80064fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	7c1b      	ldrb	r3, [r3, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10d      	bne.n	80062f8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e4:	f107 0208 	add.w	r2, r7, #8
 80062e8:	4610      	mov	r0, r2
 80062ea:	4798      	blx	r3
 80062ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	3301      	adds	r3, #1
 80062f2:	2202      	movs	r2, #2
 80062f4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80062f6:	e100      	b.n	80064fa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006300:	f107 0208 	add.w	r2, r7, #8
 8006304:	4610      	mov	r0, r2
 8006306:	4798      	blx	r3
 8006308:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	3301      	adds	r3, #1
 800630e:	2202      	movs	r2, #2
 8006310:	701a      	strb	r2, [r3, #0]
      break;
 8006312:	e0f2      	b.n	80064fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	885b      	ldrh	r3, [r3, #2]
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b05      	cmp	r3, #5
 800631c:	f200 80ac 	bhi.w	8006478 <USBD_GetDescriptor+0x204>
 8006320:	a201      	add	r2, pc, #4	; (adr r2, 8006328 <USBD_GetDescriptor+0xb4>)
 8006322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006326:	bf00      	nop
 8006328:	08006341 	.word	0x08006341
 800632c:	08006375 	.word	0x08006375
 8006330:	080063a9 	.word	0x080063a9
 8006334:	080063dd 	.word	0x080063dd
 8006338:	08006411 	.word	0x08006411
 800633c:	08006445 	.word	0x08006445
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00b      	beq.n	8006364 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	7c12      	ldrb	r2, [r2, #16]
 8006358:	f107 0108 	add.w	r1, r7, #8
 800635c:	4610      	mov	r0, r2
 800635e:	4798      	blx	r3
 8006360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006362:	e091      	b.n	8006488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006364:	6839      	ldr	r1, [r7, #0]
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fab2 	bl	80068d0 <USBD_CtlError>
            err++;
 800636c:	7afb      	ldrb	r3, [r7, #11]
 800636e:	3301      	adds	r3, #1
 8006370:	72fb      	strb	r3, [r7, #11]
          break;
 8006372:	e089      	b.n	8006488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00b      	beq.n	8006398 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	7c12      	ldrb	r2, [r2, #16]
 800638c:	f107 0108 	add.w	r1, r7, #8
 8006390:	4610      	mov	r0, r2
 8006392:	4798      	blx	r3
 8006394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006396:	e077      	b.n	8006488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006398:	6839      	ldr	r1, [r7, #0]
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 fa98 	bl	80068d0 <USBD_CtlError>
            err++;
 80063a0:	7afb      	ldrb	r3, [r7, #11]
 80063a2:	3301      	adds	r3, #1
 80063a4:	72fb      	strb	r3, [r7, #11]
          break;
 80063a6:	e06f      	b.n	8006488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00b      	beq.n	80063cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	7c12      	ldrb	r2, [r2, #16]
 80063c0:	f107 0108 	add.w	r1, r7, #8
 80063c4:	4610      	mov	r0, r2
 80063c6:	4798      	blx	r3
 80063c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063ca:	e05d      	b.n	8006488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063cc:	6839      	ldr	r1, [r7, #0]
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fa7e 	bl	80068d0 <USBD_CtlError>
            err++;
 80063d4:	7afb      	ldrb	r3, [r7, #11]
 80063d6:	3301      	adds	r3, #1
 80063d8:	72fb      	strb	r3, [r7, #11]
          break;
 80063da:	e055      	b.n	8006488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00b      	beq.n	8006400 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	7c12      	ldrb	r2, [r2, #16]
 80063f4:	f107 0108 	add.w	r1, r7, #8
 80063f8:	4610      	mov	r0, r2
 80063fa:	4798      	blx	r3
 80063fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063fe:	e043      	b.n	8006488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006400:	6839      	ldr	r1, [r7, #0]
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fa64 	bl	80068d0 <USBD_CtlError>
            err++;
 8006408:	7afb      	ldrb	r3, [r7, #11]
 800640a:	3301      	adds	r3, #1
 800640c:	72fb      	strb	r3, [r7, #11]
          break;
 800640e:	e03b      	b.n	8006488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00b      	beq.n	8006434 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	7c12      	ldrb	r2, [r2, #16]
 8006428:	f107 0108 	add.w	r1, r7, #8
 800642c:	4610      	mov	r0, r2
 800642e:	4798      	blx	r3
 8006430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006432:	e029      	b.n	8006488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006434:	6839      	ldr	r1, [r7, #0]
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fa4a 	bl	80068d0 <USBD_CtlError>
            err++;
 800643c:	7afb      	ldrb	r3, [r7, #11]
 800643e:	3301      	adds	r3, #1
 8006440:	72fb      	strb	r3, [r7, #11]
          break;
 8006442:	e021      	b.n	8006488 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00b      	beq.n	8006468 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	7c12      	ldrb	r2, [r2, #16]
 800645c:	f107 0108 	add.w	r1, r7, #8
 8006460:	4610      	mov	r0, r2
 8006462:	4798      	blx	r3
 8006464:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006466:	e00f      	b.n	8006488 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006468:	6839      	ldr	r1, [r7, #0]
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fa30 	bl	80068d0 <USBD_CtlError>
            err++;
 8006470:	7afb      	ldrb	r3, [r7, #11]
 8006472:	3301      	adds	r3, #1
 8006474:	72fb      	strb	r3, [r7, #11]
          break;
 8006476:	e007      	b.n	8006488 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006478:	6839      	ldr	r1, [r7, #0]
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fa28 	bl	80068d0 <USBD_CtlError>
          err++;
 8006480:	7afb      	ldrb	r3, [r7, #11]
 8006482:	3301      	adds	r3, #1
 8006484:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006486:	bf00      	nop
      }
      break;
 8006488:	e037      	b.n	80064fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	7c1b      	ldrb	r3, [r3, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d109      	bne.n	80064a6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800649a:	f107 0208 	add.w	r2, r7, #8
 800649e:	4610      	mov	r0, r2
 80064a0:	4798      	blx	r3
 80064a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064a4:	e029      	b.n	80064fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80064a6:	6839      	ldr	r1, [r7, #0]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fa11 	bl	80068d0 <USBD_CtlError>
        err++;
 80064ae:	7afb      	ldrb	r3, [r7, #11]
 80064b0:	3301      	adds	r3, #1
 80064b2:	72fb      	strb	r3, [r7, #11]
      break;
 80064b4:	e021      	b.n	80064fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	7c1b      	ldrb	r3, [r3, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10d      	bne.n	80064da <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c6:	f107 0208 	add.w	r2, r7, #8
 80064ca:	4610      	mov	r0, r2
 80064cc:	4798      	blx	r3
 80064ce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	3301      	adds	r3, #1
 80064d4:	2207      	movs	r2, #7
 80064d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064d8:	e00f      	b.n	80064fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80064da:	6839      	ldr	r1, [r7, #0]
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f9f7 	bl	80068d0 <USBD_CtlError>
        err++;
 80064e2:	7afb      	ldrb	r3, [r7, #11]
 80064e4:	3301      	adds	r3, #1
 80064e6:	72fb      	strb	r3, [r7, #11]
      break;
 80064e8:	e007      	b.n	80064fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f9ef 	bl	80068d0 <USBD_CtlError>
      err++;
 80064f2:	7afb      	ldrb	r3, [r7, #11]
 80064f4:	3301      	adds	r3, #1
 80064f6:	72fb      	strb	r3, [r7, #11]
      break;
 80064f8:	bf00      	nop
  }

  if (err != 0U)
 80064fa:	7afb      	ldrb	r3, [r7, #11]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d11e      	bne.n	800653e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	88db      	ldrh	r3, [r3, #6]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d016      	beq.n	8006536 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006508:	893b      	ldrh	r3, [r7, #8]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00e      	beq.n	800652c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	88da      	ldrh	r2, [r3, #6]
 8006512:	893b      	ldrh	r3, [r7, #8]
 8006514:	4293      	cmp	r3, r2
 8006516:	bf28      	it	cs
 8006518:	4613      	movcs	r3, r2
 800651a:	b29b      	uxth	r3, r3
 800651c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800651e:	893b      	ldrh	r3, [r7, #8]
 8006520:	461a      	mov	r2, r3
 8006522:	68f9      	ldr	r1, [r7, #12]
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fa44 	bl	80069b2 <USBD_CtlSendData>
 800652a:	e009      	b.n	8006540 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800652c:	6839      	ldr	r1, [r7, #0]
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f9ce 	bl	80068d0 <USBD_CtlError>
 8006534:	e004      	b.n	8006540 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fa95 	bl	8006a66 <USBD_CtlSendStatus>
 800653c:	e000      	b.n	8006540 <USBD_GetDescriptor+0x2cc>
    return;
 800653e:	bf00      	nop
  }
}
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop

08006548 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	889b      	ldrh	r3, [r3, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d131      	bne.n	80065be <USBD_SetAddress+0x76>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	88db      	ldrh	r3, [r3, #6]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d12d      	bne.n	80065be <USBD_SetAddress+0x76>
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	885b      	ldrh	r3, [r3, #2]
 8006566:	2b7f      	cmp	r3, #127	; 0x7f
 8006568:	d829      	bhi.n	80065be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	885b      	ldrh	r3, [r3, #2]
 800656e:	b2db      	uxtb	r3, r3
 8006570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006574:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b03      	cmp	r3, #3
 8006580:	d104      	bne.n	800658c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006582:	6839      	ldr	r1, [r7, #0]
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f9a3 	bl	80068d0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800658a:	e01d      	b.n	80065c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	7bfa      	ldrb	r2, [r7, #15]
 8006590:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006594:	7bfb      	ldrb	r3, [r7, #15]
 8006596:	4619      	mov	r1, r3
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 ff71 	bl	8007480 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fa61 	bl	8006a66 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d004      	beq.n	80065b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2202      	movs	r2, #2
 80065ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065b2:	e009      	b.n	80065c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065bc:	e004      	b.n	80065c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80065be:	6839      	ldr	r1, [r7, #0]
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f985 	bl	80068d0 <USBD_CtlError>
  }
}
 80065c6:	bf00      	nop
 80065c8:	bf00      	nop
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065da:	2300      	movs	r3, #0
 80065dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	885b      	ldrh	r3, [r3, #2]
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	4b4c      	ldr	r3, [pc, #304]	; (8006718 <USBD_SetConfig+0x148>)
 80065e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80065e8:	4b4b      	ldr	r3, [pc, #300]	; (8006718 <USBD_SetConfig+0x148>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d905      	bls.n	80065fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80065f0:	6839      	ldr	r1, [r7, #0]
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f96c 	bl	80068d0 <USBD_CtlError>
    return USBD_FAIL;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e088      	b.n	800670e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b02      	cmp	r3, #2
 8006606:	d002      	beq.n	800660e <USBD_SetConfig+0x3e>
 8006608:	2b03      	cmp	r3, #3
 800660a:	d025      	beq.n	8006658 <USBD_SetConfig+0x88>
 800660c:	e071      	b.n	80066f2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800660e:	4b42      	ldr	r3, [pc, #264]	; (8006718 <USBD_SetConfig+0x148>)
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d01c      	beq.n	8006650 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006616:	4b40      	ldr	r3, [pc, #256]	; (8006718 <USBD_SetConfig+0x148>)
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	461a      	mov	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006620:	4b3d      	ldr	r3, [pc, #244]	; (8006718 <USBD_SetConfig+0x148>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	4619      	mov	r1, r3
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7ff f948 	bl	80058bc <USBD_SetClassConfig>
 800662c:	4603      	mov	r3, r0
 800662e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006630:	7bfb      	ldrb	r3, [r7, #15]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d004      	beq.n	8006640 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006636:	6839      	ldr	r1, [r7, #0]
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f949 	bl	80068d0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800663e:	e065      	b.n	800670c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 fa10 	bl	8006a66 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2203      	movs	r2, #3
 800664a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800664e:	e05d      	b.n	800670c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fa08 	bl	8006a66 <USBD_CtlSendStatus>
      break;
 8006656:	e059      	b.n	800670c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006658:	4b2f      	ldr	r3, [pc, #188]	; (8006718 <USBD_SetConfig+0x148>)
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d112      	bne.n	8006686 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006668:	4b2b      	ldr	r3, [pc, #172]	; (8006718 <USBD_SetConfig+0x148>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	461a      	mov	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006672:	4b29      	ldr	r3, [pc, #164]	; (8006718 <USBD_SetConfig+0x148>)
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7ff f93b 	bl	80058f4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f9f1 	bl	8006a66 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006684:	e042      	b.n	800670c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006686:	4b24      	ldr	r3, [pc, #144]	; (8006718 <USBD_SetConfig+0x148>)
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	461a      	mov	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	429a      	cmp	r2, r3
 8006692:	d02a      	beq.n	80066ea <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	b2db      	uxtb	r3, r3
 800669a:	4619      	mov	r1, r3
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f7ff f929 	bl	80058f4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80066a2:	4b1d      	ldr	r3, [pc, #116]	; (8006718 <USBD_SetConfig+0x148>)
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	461a      	mov	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80066ac:	4b1a      	ldr	r3, [pc, #104]	; (8006718 <USBD_SetConfig+0x148>)
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	4619      	mov	r1, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7ff f902 	bl	80058bc <USBD_SetClassConfig>
 80066b8:	4603      	mov	r3, r0
 80066ba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00f      	beq.n	80066e2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80066c2:	6839      	ldr	r1, [r7, #0]
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f903 	bl	80068d0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	4619      	mov	r1, r3
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7ff f90e 	bl	80058f4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80066e0:	e014      	b.n	800670c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f9bf 	bl	8006a66 <USBD_CtlSendStatus>
      break;
 80066e8:	e010      	b.n	800670c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f9bb 	bl	8006a66 <USBD_CtlSendStatus>
      break;
 80066f0:	e00c      	b.n	800670c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80066f2:	6839      	ldr	r1, [r7, #0]
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f8eb 	bl	80068d0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80066fa:	4b07      	ldr	r3, [pc, #28]	; (8006718 <USBD_SetConfig+0x148>)
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	4619      	mov	r1, r3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f7ff f8f7 	bl	80058f4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006706:	2303      	movs	r3, #3
 8006708:	73fb      	strb	r3, [r7, #15]
      break;
 800670a:	bf00      	nop
  }

  return ret;
 800670c:	7bfb      	ldrb	r3, [r7, #15]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	20000614 	.word	0x20000614

0800671c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	88db      	ldrh	r3, [r3, #6]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d004      	beq.n	8006738 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800672e:	6839      	ldr	r1, [r7, #0]
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 f8cd 	bl	80068d0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006736:	e023      	b.n	8006780 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b02      	cmp	r3, #2
 8006742:	dc02      	bgt.n	800674a <USBD_GetConfig+0x2e>
 8006744:	2b00      	cmp	r3, #0
 8006746:	dc03      	bgt.n	8006750 <USBD_GetConfig+0x34>
 8006748:	e015      	b.n	8006776 <USBD_GetConfig+0x5a>
 800674a:	2b03      	cmp	r3, #3
 800674c:	d00b      	beq.n	8006766 <USBD_GetConfig+0x4a>
 800674e:	e012      	b.n	8006776 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	3308      	adds	r3, #8
 800675a:	2201      	movs	r2, #1
 800675c:	4619      	mov	r1, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f927 	bl	80069b2 <USBD_CtlSendData>
        break;
 8006764:	e00c      	b.n	8006780 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3304      	adds	r3, #4
 800676a:	2201      	movs	r2, #1
 800676c:	4619      	mov	r1, r3
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f91f 	bl	80069b2 <USBD_CtlSendData>
        break;
 8006774:	e004      	b.n	8006780 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006776:	6839      	ldr	r1, [r7, #0]
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f8a9 	bl	80068d0 <USBD_CtlError>
        break;
 800677e:	bf00      	nop
}
 8006780:	bf00      	nop
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006798:	b2db      	uxtb	r3, r3
 800679a:	3b01      	subs	r3, #1
 800679c:	2b02      	cmp	r3, #2
 800679e:	d81e      	bhi.n	80067de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	88db      	ldrh	r3, [r3, #6]
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d004      	beq.n	80067b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80067a8:	6839      	ldr	r1, [r7, #0]
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f890 	bl	80068d0 <USBD_CtlError>
        break;
 80067b0:	e01a      	b.n	80067e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d005      	beq.n	80067ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f043 0202 	orr.w	r2, r3, #2
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	330c      	adds	r3, #12
 80067d2:	2202      	movs	r2, #2
 80067d4:	4619      	mov	r1, r3
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f8eb 	bl	80069b2 <USBD_CtlSendData>
      break;
 80067dc:	e004      	b.n	80067e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80067de:	6839      	ldr	r1, [r7, #0]
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f875 	bl	80068d0 <USBD_CtlError>
      break;
 80067e6:	bf00      	nop
  }
}
 80067e8:	bf00      	nop
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	885b      	ldrh	r3, [r3, #2]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d106      	bne.n	8006810 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f92b 	bl	8006a66 <USBD_CtlSendStatus>
  }
}
 8006810:	bf00      	nop
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006828:	b2db      	uxtb	r3, r3
 800682a:	3b01      	subs	r3, #1
 800682c:	2b02      	cmp	r3, #2
 800682e:	d80b      	bhi.n	8006848 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	885b      	ldrh	r3, [r3, #2]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d10c      	bne.n	8006852 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f910 	bl	8006a66 <USBD_CtlSendStatus>
      }
      break;
 8006846:	e004      	b.n	8006852 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006848:	6839      	ldr	r1, [r7, #0]
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f840 	bl	80068d0 <USBD_CtlError>
      break;
 8006850:	e000      	b.n	8006854 <USBD_ClrFeature+0x3c>
      break;
 8006852:	bf00      	nop
  }
}
 8006854:	bf00      	nop
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	781a      	ldrb	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3301      	adds	r3, #1
 8006876:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	781a      	ldrb	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3301      	adds	r3, #1
 8006884:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f7ff fabb 	bl	8005e02 <SWAPBYTE>
 800688c:	4603      	mov	r3, r0
 800688e:	461a      	mov	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	3301      	adds	r3, #1
 8006898:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	3301      	adds	r3, #1
 800689e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f7ff faae 	bl	8005e02 <SWAPBYTE>
 80068a6:	4603      	mov	r3, r0
 80068a8:	461a      	mov	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	3301      	adds	r3, #1
 80068b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	3301      	adds	r3, #1
 80068b8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f7ff faa1 	bl	8005e02 <SWAPBYTE>
 80068c0:	4603      	mov	r3, r0
 80068c2:	461a      	mov	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	80da      	strh	r2, [r3, #6]
}
 80068c8:	bf00      	nop
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80068da:	2180      	movs	r1, #128	; 0x80
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fd65 	bl	80073ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80068e2:	2100      	movs	r1, #0
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fd61 	bl	80073ac <USBD_LL_StallEP>
}
 80068ea:	bf00      	nop
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b086      	sub	sp, #24
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	60f8      	str	r0, [r7, #12]
 80068fa:	60b9      	str	r1, [r7, #8]
 80068fc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80068fe:	2300      	movs	r3, #0
 8006900:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d036      	beq.n	8006976 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800690c:	6938      	ldr	r0, [r7, #16]
 800690e:	f000 f836 	bl	800697e <USBD_GetLen>
 8006912:	4603      	mov	r3, r0
 8006914:	3301      	adds	r3, #1
 8006916:	b29b      	uxth	r3, r3
 8006918:	005b      	lsls	r3, r3, #1
 800691a:	b29a      	uxth	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006920:	7dfb      	ldrb	r3, [r7, #23]
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	4413      	add	r3, r2
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	7812      	ldrb	r2, [r2, #0]
 800692a:	701a      	strb	r2, [r3, #0]
  idx++;
 800692c:	7dfb      	ldrb	r3, [r7, #23]
 800692e:	3301      	adds	r3, #1
 8006930:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006932:	7dfb      	ldrb	r3, [r7, #23]
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	4413      	add	r3, r2
 8006938:	2203      	movs	r2, #3
 800693a:	701a      	strb	r2, [r3, #0]
  idx++;
 800693c:	7dfb      	ldrb	r3, [r7, #23]
 800693e:	3301      	adds	r3, #1
 8006940:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006942:	e013      	b.n	800696c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006944:	7dfb      	ldrb	r3, [r7, #23]
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	4413      	add	r3, r2
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	7812      	ldrb	r2, [r2, #0]
 800694e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	3301      	adds	r3, #1
 8006954:	613b      	str	r3, [r7, #16]
    idx++;
 8006956:	7dfb      	ldrb	r3, [r7, #23]
 8006958:	3301      	adds	r3, #1
 800695a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800695c:	7dfb      	ldrb	r3, [r7, #23]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	4413      	add	r3, r2
 8006962:	2200      	movs	r2, #0
 8006964:	701a      	strb	r2, [r3, #0]
    idx++;
 8006966:	7dfb      	ldrb	r3, [r7, #23]
 8006968:	3301      	adds	r3, #1
 800696a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1e7      	bne.n	8006944 <USBD_GetString+0x52>
 8006974:	e000      	b.n	8006978 <USBD_GetString+0x86>
    return;
 8006976:	bf00      	nop
  }
}
 8006978:	3718      	adds	r7, #24
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800697e:	b480      	push	{r7}
 8006980:	b085      	sub	sp, #20
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006986:	2300      	movs	r3, #0
 8006988:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800698e:	e005      	b.n	800699c <USBD_GetLen+0x1e>
  {
    len++;
 8006990:	7bfb      	ldrb	r3, [r7, #15]
 8006992:	3301      	adds	r3, #1
 8006994:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	3301      	adds	r3, #1
 800699a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1f5      	bne.n	8006990 <USBD_GetLen+0x12>
  }

  return len;
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b084      	sub	sp, #16
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	60f8      	str	r0, [r7, #12]
 80069ba:	60b9      	str	r1, [r7, #8]
 80069bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2202      	movs	r2, #2
 80069c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	2100      	movs	r1, #0
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 fd70 	bl	80074be <USBD_LL_Transmit>

  return USBD_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	2100      	movs	r1, #0
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f000 fd5f 	bl	80074be <USBD_LL_Transmit>

  return USBD_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b084      	sub	sp, #16
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	60f8      	str	r0, [r7, #12]
 8006a12:	60b9      	str	r1, [r7, #8]
 8006a14:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2203      	movs	r2, #3
 8006a1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	2100      	movs	r1, #0
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f000 fd63 	bl	8007500 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	2100      	movs	r1, #0
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 fd52 	bl	8007500 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b082      	sub	sp, #8
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2204      	movs	r2, #4
 8006a72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006a76:	2300      	movs	r3, #0
 8006a78:	2200      	movs	r2, #0
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fd1e 	bl	80074be <USBD_LL_Transmit>

  return USBD_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3708      	adds	r7, #8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2205      	movs	r2, #5
 8006a98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fd2c 	bl	8007500 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	4912      	ldr	r1, [pc, #72]	; (8006b04 <MX_USB_DEVICE_Init+0x50>)
 8006abc:	4812      	ldr	r0, [pc, #72]	; (8006b08 <MX_USB_DEVICE_Init+0x54>)
 8006abe:	f7fe fe8f 	bl	80057e0 <USBD_Init>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d001      	beq.n	8006acc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006ac8:	f7f9 fefc 	bl	80008c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006acc:	490f      	ldr	r1, [pc, #60]	; (8006b0c <MX_USB_DEVICE_Init+0x58>)
 8006ace:	480e      	ldr	r0, [pc, #56]	; (8006b08 <MX_USB_DEVICE_Init+0x54>)
 8006ad0:	f7fe feb6 	bl	8005840 <USBD_RegisterClass>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006ada:	f7f9 fef3 	bl	80008c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006ade:	490c      	ldr	r1, [pc, #48]	; (8006b10 <MX_USB_DEVICE_Init+0x5c>)
 8006ae0:	4809      	ldr	r0, [pc, #36]	; (8006b08 <MX_USB_DEVICE_Init+0x54>)
 8006ae2:	f7fe fe07 	bl	80056f4 <USBD_CDC_RegisterInterface>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006aec:	f7f9 feea 	bl	80008c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006af0:	4805      	ldr	r0, [pc, #20]	; (8006b08 <MX_USB_DEVICE_Init+0x54>)
 8006af2:	f7fe fecc 	bl	800588e <USBD_Start>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d001      	beq.n	8006b00 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006afc:	f7f9 fee2 	bl	80008c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006b00:	bf00      	nop
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	20000138 	.word	0x20000138
 8006b08:	20000898 	.word	0x20000898
 8006b0c:	20000020 	.word	0x20000020
 8006b10:	20000124 	.word	0x20000124

08006b14 <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	4915      	ldr	r1, [pc, #84]	; (8006b74 <CDC_Init_FS+0x60>)
 8006b1e:	4816      	ldr	r0, [pc, #88]	; (8006b78 <CDC_Init_FS+0x64>)
 8006b20:	f7fe fdfd 	bl	800571e <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006b24:	4915      	ldr	r1, [pc, #84]	; (8006b7c <CDC_Init_FS+0x68>)
 8006b26:	4814      	ldr	r0, [pc, #80]	; (8006b78 <CDC_Init_FS+0x64>)
 8006b28:	f7fe fe17 	bl	800575a <USBD_CDC_SetRxBuffer>


	  // https://stackoverflow.com/a/26925578
	  uint32_t baudrate = 9600;
 8006b2c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8006b30:	607b      	str	r3, [r7, #4]
	  lcBuffer[0] = (uint8_t)(baudrate);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	4b12      	ldr	r3, [pc, #72]	; (8006b80 <CDC_Init_FS+0x6c>)
 8006b38:	701a      	strb	r2, [r3, #0]
	  lcBuffer[1] = (uint8_t)(baudrate >> 8);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	0a1b      	lsrs	r3, r3, #8
 8006b3e:	b2da      	uxtb	r2, r3
 8006b40:	4b0f      	ldr	r3, [pc, #60]	; (8006b80 <CDC_Init_FS+0x6c>)
 8006b42:	705a      	strb	r2, [r3, #1]
	  lcBuffer[2] = (uint8_t)(baudrate >> 16);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	0c1b      	lsrs	r3, r3, #16
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	4b0d      	ldr	r3, [pc, #52]	; (8006b80 <CDC_Init_FS+0x6c>)
 8006b4c:	709a      	strb	r2, [r3, #2]
	  lcBuffer[3] = (uint8_t)(baudrate >> 24);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	0e1b      	lsrs	r3, r3, #24
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	4b0a      	ldr	r3, [pc, #40]	; (8006b80 <CDC_Init_FS+0x6c>)
 8006b56:	70da      	strb	r2, [r3, #3]
	  lcBuffer[4] = 0; // 1 Stop bit
 8006b58:	4b09      	ldr	r3, [pc, #36]	; (8006b80 <CDC_Init_FS+0x6c>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	711a      	strb	r2, [r3, #4]
	  lcBuffer[5] = 0; // No parity
 8006b5e:	4b08      	ldr	r3, [pc, #32]	; (8006b80 <CDC_Init_FS+0x6c>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	715a      	strb	r2, [r3, #5]
	  lcBuffer[6] = 8; // 8 data bits
 8006b64:	4b06      	ldr	r3, [pc, #24]	; (8006b80 <CDC_Init_FS+0x6c>)
 8006b66:	2208      	movs	r2, #8
 8006b68:	719a      	strb	r2, [r3, #6]

	return (USBD_OK);
 8006b6a:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	20001368 	.word	0x20001368
 8006b78:	20000898 	.word	0x20000898
 8006b7c:	20000b68 	.word	0x20000b68
 8006b80:	20001c68 	.word	0x20001c68

08006b84 <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 8006b84:	b480      	push	{r7}
 8006b86:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 8006b88:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <CDC_Control_FS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	6039      	str	r1, [r7, #0]
 8006b9e:	71fb      	strb	r3, [r7, #7]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd) {
 8006ba4:	79fb      	ldrb	r3, [r7, #7]
 8006ba6:	2b23      	cmp	r3, #35	; 0x23
 8006ba8:	f200 808e 	bhi.w	8006cc8 <CDC_Control_FS+0x134>
 8006bac:	a201      	add	r2, pc, #4	; (adr r2, 8006bb4 <CDC_Control_FS+0x20>)
 8006bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb2:	bf00      	nop
 8006bb4:	08006cc9 	.word	0x08006cc9
 8006bb8:	08006cc9 	.word	0x08006cc9
 8006bbc:	08006cc9 	.word	0x08006cc9
 8006bc0:	08006cc9 	.word	0x08006cc9
 8006bc4:	08006cc9 	.word	0x08006cc9
 8006bc8:	08006cc9 	.word	0x08006cc9
 8006bcc:	08006cc9 	.word	0x08006cc9
 8006bd0:	08006cc9 	.word	0x08006cc9
 8006bd4:	08006cc9 	.word	0x08006cc9
 8006bd8:	08006cc9 	.word	0x08006cc9
 8006bdc:	08006cc9 	.word	0x08006cc9
 8006be0:	08006cc9 	.word	0x08006cc9
 8006be4:	08006cc9 	.word	0x08006cc9
 8006be8:	08006cc9 	.word	0x08006cc9
 8006bec:	08006cc9 	.word	0x08006cc9
 8006bf0:	08006cc9 	.word	0x08006cc9
 8006bf4:	08006cc9 	.word	0x08006cc9
 8006bf8:	08006cc9 	.word	0x08006cc9
 8006bfc:	08006cc9 	.word	0x08006cc9
 8006c00:	08006cc9 	.word	0x08006cc9
 8006c04:	08006cc9 	.word	0x08006cc9
 8006c08:	08006cc9 	.word	0x08006cc9
 8006c0c:	08006cc9 	.word	0x08006cc9
 8006c10:	08006cc9 	.word	0x08006cc9
 8006c14:	08006cc9 	.word	0x08006cc9
 8006c18:	08006cc9 	.word	0x08006cc9
 8006c1c:	08006cc9 	.word	0x08006cc9
 8006c20:	08006cc9 	.word	0x08006cc9
 8006c24:	08006cc9 	.word	0x08006cc9
 8006c28:	08006cc9 	.word	0x08006cc9
 8006c2c:	08006cc9 	.word	0x08006cc9
 8006c30:	08006cc9 	.word	0x08006cc9
 8006c34:	08006c45 	.word	0x08006c45
 8006c38:	08006c7f 	.word	0x08006c7f
 8006c3c:	08006cc9 	.word	0x08006cc9
 8006c40:	08006cc9 	.word	0x08006cc9
		/* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
		/*******************************************************************************/

	// https://github.com/philrawlings/bluepill-usb-cdc-test/blob/main/USB_DEVICE/App/usbd_cdc_if.c
    case CDC_SET_LINE_CODING:
        lcBuffer[0] = pbuf[0];
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	781a      	ldrb	r2, [r3, #0]
 8006c48:	4b22      	ldr	r3, [pc, #136]	; (8006cd4 <CDC_Control_FS+0x140>)
 8006c4a:	701a      	strb	r2, [r3, #0]
        lcBuffer[1] = pbuf[1];
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	785a      	ldrb	r2, [r3, #1]
 8006c50:	4b20      	ldr	r3, [pc, #128]	; (8006cd4 <CDC_Control_FS+0x140>)
 8006c52:	705a      	strb	r2, [r3, #1]
        lcBuffer[2] = pbuf[2];
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	789a      	ldrb	r2, [r3, #2]
 8006c58:	4b1e      	ldr	r3, [pc, #120]	; (8006cd4 <CDC_Control_FS+0x140>)
 8006c5a:	709a      	strb	r2, [r3, #2]
        lcBuffer[3] = pbuf[3];
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	78da      	ldrb	r2, [r3, #3]
 8006c60:	4b1c      	ldr	r3, [pc, #112]	; (8006cd4 <CDC_Control_FS+0x140>)
 8006c62:	70da      	strb	r2, [r3, #3]
        lcBuffer[4] = pbuf[4];
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	791a      	ldrb	r2, [r3, #4]
 8006c68:	4b1a      	ldr	r3, [pc, #104]	; (8006cd4 <CDC_Control_FS+0x140>)
 8006c6a:	711a      	strb	r2, [r3, #4]
        lcBuffer[5] = pbuf[5];
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	795a      	ldrb	r2, [r3, #5]
 8006c70:	4b18      	ldr	r3, [pc, #96]	; (8006cd4 <CDC_Control_FS+0x140>)
 8006c72:	715a      	strb	r2, [r3, #5]
        lcBuffer[6] = pbuf[6];
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	799a      	ldrb	r2, [r3, #6]
 8006c78:	4b16      	ldr	r3, [pc, #88]	; (8006cd4 <CDC_Control_FS+0x140>)
 8006c7a:	719a      	strb	r2, [r3, #6]
    break;
 8006c7c:	e025      	b.n	8006cca <CDC_Control_FS+0x136>

    case CDC_GET_LINE_CODING:
        pbuf[0] = lcBuffer[0];
 8006c7e:	4b15      	ldr	r3, [pc, #84]	; (8006cd4 <CDC_Control_FS+0x140>)
 8006c80:	781a      	ldrb	r2, [r3, #0]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	701a      	strb	r2, [r3, #0]
        pbuf[1] = lcBuffer[1];
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	4a12      	ldr	r2, [pc, #72]	; (8006cd4 <CDC_Control_FS+0x140>)
 8006c8c:	7852      	ldrb	r2, [r2, #1]
 8006c8e:	701a      	strb	r2, [r3, #0]
        pbuf[2] = lcBuffer[2];
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	3302      	adds	r3, #2
 8006c94:	4a0f      	ldr	r2, [pc, #60]	; (8006cd4 <CDC_Control_FS+0x140>)
 8006c96:	7892      	ldrb	r2, [r2, #2]
 8006c98:	701a      	strb	r2, [r3, #0]
        pbuf[3] = lcBuffer[3];
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	3303      	adds	r3, #3
 8006c9e:	4a0d      	ldr	r2, [pc, #52]	; (8006cd4 <CDC_Control_FS+0x140>)
 8006ca0:	78d2      	ldrb	r2, [r2, #3]
 8006ca2:	701a      	strb	r2, [r3, #0]
        pbuf[4] = lcBuffer[4];
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	4a0a      	ldr	r2, [pc, #40]	; (8006cd4 <CDC_Control_FS+0x140>)
 8006caa:	7912      	ldrb	r2, [r2, #4]
 8006cac:	701a      	strb	r2, [r3, #0]
        pbuf[5] = lcBuffer[5];
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	3305      	adds	r3, #5
 8006cb2:	4a08      	ldr	r2, [pc, #32]	; (8006cd4 <CDC_Control_FS+0x140>)
 8006cb4:	7952      	ldrb	r2, [r2, #5]
 8006cb6:	701a      	strb	r2, [r3, #0]
        pbuf[6] = lcBuffer[6];
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	3306      	adds	r3, #6
 8006cbc:	4a05      	ldr	r2, [pc, #20]	; (8006cd4 <CDC_Control_FS+0x140>)
 8006cbe:	7992      	ldrb	r2, [r2, #6]
 8006cc0:	701a      	strb	r2, [r3, #0]

        // Get line coding is invoked when the host connects, clear the RxBuffer when this occurs
        CDC_FlushRxBuffer_FS();
 8006cc2:	f000 f86f 	bl	8006da4 <CDC_FlushRxBuffer_FS>

	case CDC_SET_CONTROL_LINE_STATE:

		break;
 8006cc6:	e000      	b.n	8006cca <CDC_Control_FS+0x136>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8006cc8:	bf00      	nop
	}

	return (USBD_OK);
 8006cca:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	20001c68 	.word	0x20001c68

08006cd8 <CDC_Receive_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006ce2:	6879      	ldr	r1, [r7, #4]
 8006ce4:	480f      	ldr	r0, [pc, #60]	; (8006d24 <CDC_Receive_FS+0x4c>)
 8006ce6:	f7fe fd38 	bl	800575a <USBD_CDC_SetRxBuffer>

	uint8_t len = (uint8_t) *Len; // Get length
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	73fb      	strb	r3, [r7, #15]



		memset(rxBuffer, 0, HL_RX_BUFFER_SIZE);  // clear the buffer
 8006cf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	480c      	ldr	r0, [pc, #48]	; (8006d28 <CDC_Receive_FS+0x50>)
 8006cf8:	f000 fcb2 	bl	8007660 <memset>
		memcpy(rxBuffer, Buf, len);  // copy the data to the buffer
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	6879      	ldr	r1, [r7, #4]
 8006d02:	4809      	ldr	r0, [pc, #36]	; (8006d28 <CDC_Receive_FS+0x50>)
 8006d04:	f000 fc9e 	bl	8007644 <memcpy>
		memset(Buf, 0, len);   // clear the Buf also
 8006d08:	7bfb      	ldrb	r3, [r7, #15]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fca6 	bl	8007660 <memset>

	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006d14:	4803      	ldr	r0, [pc, #12]	; (8006d24 <CDC_Receive_FS+0x4c>)
 8006d16:	f7fe fd39 	bl	800578c <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 8006d1a:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	20000898 	.word	0x20000898
 8006d28:	20001b68 	.word	0x20001b68

08006d2c <CDC_TransmitCplt_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum) {
 8006d2c:	b480      	push	{r7}
 8006d2e:	b087      	sub	sp, #28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	4613      	mov	r3, r2
 8006d38:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 13 */
	return result;
 8006d3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	371c      	adds	r7, #28
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
	...

08006d50 <CDC_ReadRxBuffer_FS>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void CDC_ReadRxBuffer_FS(uint8_t* Buf, uint8_t Len) {
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	460b      	mov	r3, r1
 8006d5a:	70fb      	strb	r3, [r7, #3]
		memcpy(Buf, rxBuffer, Len);  // copy the data to the buffer
 8006d5c:	78fb      	ldrb	r3, [r7, #3]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	4903      	ldr	r1, [pc, #12]	; (8006d70 <CDC_ReadRxBuffer_FS+0x20>)
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fc6e 	bl	8007644 <memcpy>
}
 8006d68:	bf00      	nop
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	20001b68 	.word	0x20001b68

08006d74 <CDC_GetRxBufferBytesAvailable_FS>:

uint8_t CDC_GetRxBufferBytesAvailable_FS(void) {
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0

	uint8_t index = 0;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	71fb      	strb	r3, [r7, #7]
	while(rxBuffer[index] != 0){
 8006d7e:	e002      	b.n	8006d86 <CDC_GetRxBufferBytesAvailable_FS+0x12>
	    index++;
 8006d80:	79fb      	ldrb	r3, [r7, #7]
 8006d82:	3301      	adds	r3, #1
 8006d84:	71fb      	strb	r3, [r7, #7]
	while(rxBuffer[index] != 0){
 8006d86:	79fb      	ldrb	r3, [r7, #7]
 8006d88:	4a05      	ldr	r2, [pc, #20]	; (8006da0 <CDC_GetRxBufferBytesAvailable_FS+0x2c>)
 8006d8a:	5cd3      	ldrb	r3, [r2, r3]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1f7      	bne.n	8006d80 <CDC_GetRxBufferBytesAvailable_FS+0xc>
	}
	return index;
 8006d90:	79fb      	ldrb	r3, [r7, #7]

}
 8006d92:	4618      	mov	r0, r3
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	20001b68 	.word	0x20001b68

08006da4 <CDC_FlushRxBuffer_FS>:


void CDC_FlushRxBuffer_FS() {
 8006da4:	b580      	push	{r7, lr}
 8006da6:	af00      	add	r7, sp, #0
   memset(rxBuffer, 0, HL_RX_BUFFER_SIZE);
 8006da8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006dac:	2100      	movs	r1, #0
 8006dae:	4802      	ldr	r0, [pc, #8]	; (8006db8 <CDC_FlushRxBuffer_FS+0x14>)
 8006db0:	f000 fc56 	bl	8007660 <memset>
}
 8006db4:	bf00      	nop
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	20001b68 	.word	0x20001b68

08006dbc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	6039      	str	r1, [r7, #0]
 8006dc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	2212      	movs	r2, #18
 8006dcc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006dce:	4b03      	ldr	r3, [pc, #12]	; (8006ddc <USBD_FS_DeviceDescriptor+0x20>)
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	20000154 	.word	0x20000154

08006de0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	4603      	mov	r3, r0
 8006de8:	6039      	str	r1, [r7, #0]
 8006dea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	2204      	movs	r2, #4
 8006df0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006df2:	4b03      	ldr	r3, [pc, #12]	; (8006e00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	20000168 	.word	0x20000168

08006e04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	6039      	str	r1, [r7, #0]
 8006e0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e10:	79fb      	ldrb	r3, [r7, #7]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d105      	bne.n	8006e22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e16:	683a      	ldr	r2, [r7, #0]
 8006e18:	4907      	ldr	r1, [pc, #28]	; (8006e38 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e1a:	4808      	ldr	r0, [pc, #32]	; (8006e3c <USBD_FS_ProductStrDescriptor+0x38>)
 8006e1c:	f7ff fd69 	bl	80068f2 <USBD_GetString>
 8006e20:	e004      	b.n	8006e2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	4904      	ldr	r1, [pc, #16]	; (8006e38 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e26:	4805      	ldr	r0, [pc, #20]	; (8006e3c <USBD_FS_ProductStrDescriptor+0x38>)
 8006e28:	f7ff fd63 	bl	80068f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e2c:	4b02      	ldr	r3, [pc, #8]	; (8006e38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20001c70 	.word	0x20001c70
 8006e3c:	08007ee0 	.word	0x08007ee0

08006e40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	4603      	mov	r3, r0
 8006e48:	6039      	str	r1, [r7, #0]
 8006e4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	4904      	ldr	r1, [pc, #16]	; (8006e60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006e50:	4804      	ldr	r0, [pc, #16]	; (8006e64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006e52:	f7ff fd4e 	bl	80068f2 <USBD_GetString>
  return USBD_StrDesc;
 8006e56:	4b02      	ldr	r3, [pc, #8]	; (8006e60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	20001c70 	.word	0x20001c70
 8006e64:	08007ef8 	.word	0x08007ef8

08006e68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	4603      	mov	r3, r0
 8006e70:	6039      	str	r1, [r7, #0]
 8006e72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	221a      	movs	r2, #26
 8006e78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006e7a:	f000 f843 	bl	8006f04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006e7e:	4b02      	ldr	r3, [pc, #8]	; (8006e88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	2000016c 	.word	0x2000016c

08006e8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	4603      	mov	r3, r0
 8006e94:	6039      	str	r1, [r7, #0]
 8006e96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006e98:	79fb      	ldrb	r3, [r7, #7]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d105      	bne.n	8006eaa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e9e:	683a      	ldr	r2, [r7, #0]
 8006ea0:	4907      	ldr	r1, [pc, #28]	; (8006ec0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006ea2:	4808      	ldr	r0, [pc, #32]	; (8006ec4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ea4:	f7ff fd25 	bl	80068f2 <USBD_GetString>
 8006ea8:	e004      	b.n	8006eb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	4904      	ldr	r1, [pc, #16]	; (8006ec0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006eae:	4805      	ldr	r0, [pc, #20]	; (8006ec4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006eb0:	f7ff fd1f 	bl	80068f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006eb4:	4b02      	ldr	r3, [pc, #8]	; (8006ec0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	20001c70 	.word	0x20001c70
 8006ec4:	08007f0c 	.word	0x08007f0c

08006ec8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	4603      	mov	r3, r0
 8006ed0:	6039      	str	r1, [r7, #0]
 8006ed2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ed4:	79fb      	ldrb	r3, [r7, #7]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d105      	bne.n	8006ee6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	4907      	ldr	r1, [pc, #28]	; (8006efc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006ede:	4808      	ldr	r0, [pc, #32]	; (8006f00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ee0:	f7ff fd07 	bl	80068f2 <USBD_GetString>
 8006ee4:	e004      	b.n	8006ef0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	4904      	ldr	r1, [pc, #16]	; (8006efc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006eea:	4805      	ldr	r0, [pc, #20]	; (8006f00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006eec:	f7ff fd01 	bl	80068f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ef0:	4b02      	ldr	r3, [pc, #8]	; (8006efc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	20001c70 	.word	0x20001c70
 8006f00:	08007f18 	.word	0x08007f18

08006f04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006f0a:	4b0f      	ldr	r3, [pc, #60]	; (8006f48 <Get_SerialNum+0x44>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006f10:	4b0e      	ldr	r3, [pc, #56]	; (8006f4c <Get_SerialNum+0x48>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006f16:	4b0e      	ldr	r3, [pc, #56]	; (8006f50 <Get_SerialNum+0x4c>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4413      	add	r3, r2
 8006f22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d009      	beq.n	8006f3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006f2a:	2208      	movs	r2, #8
 8006f2c:	4909      	ldr	r1, [pc, #36]	; (8006f54 <Get_SerialNum+0x50>)
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f000 f814 	bl	8006f5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006f34:	2204      	movs	r2, #4
 8006f36:	4908      	ldr	r1, [pc, #32]	; (8006f58 <Get_SerialNum+0x54>)
 8006f38:	68b8      	ldr	r0, [r7, #8]
 8006f3a:	f000 f80f 	bl	8006f5c <IntToUnicode>
  }
}
 8006f3e:	bf00      	nop
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	1fff7a10 	.word	0x1fff7a10
 8006f4c:	1fff7a14 	.word	0x1fff7a14
 8006f50:	1fff7a18 	.word	0x1fff7a18
 8006f54:	2000016e 	.word	0x2000016e
 8006f58:	2000017e 	.word	0x2000017e

08006f5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	4613      	mov	r3, r2
 8006f68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006f6e:	2300      	movs	r3, #0
 8006f70:	75fb      	strb	r3, [r7, #23]
 8006f72:	e027      	b.n	8006fc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	0f1b      	lsrs	r3, r3, #28
 8006f78:	2b09      	cmp	r3, #9
 8006f7a:	d80b      	bhi.n	8006f94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	0f1b      	lsrs	r3, r3, #28
 8006f80:	b2da      	uxtb	r2, r3
 8006f82:	7dfb      	ldrb	r3, [r7, #23]
 8006f84:	005b      	lsls	r3, r3, #1
 8006f86:	4619      	mov	r1, r3
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	440b      	add	r3, r1
 8006f8c:	3230      	adds	r2, #48	; 0x30
 8006f8e:	b2d2      	uxtb	r2, r2
 8006f90:	701a      	strb	r2, [r3, #0]
 8006f92:	e00a      	b.n	8006faa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	0f1b      	lsrs	r3, r3, #28
 8006f98:	b2da      	uxtb	r2, r3
 8006f9a:	7dfb      	ldrb	r3, [r7, #23]
 8006f9c:	005b      	lsls	r3, r3, #1
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	440b      	add	r3, r1
 8006fa4:	3237      	adds	r2, #55	; 0x37
 8006fa6:	b2d2      	uxtb	r2, r2
 8006fa8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	011b      	lsls	r3, r3, #4
 8006fae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006fb0:	7dfb      	ldrb	r3, [r7, #23]
 8006fb2:	005b      	lsls	r3, r3, #1
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	4413      	add	r3, r2
 8006fba:	2200      	movs	r2, #0
 8006fbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006fbe:	7dfb      	ldrb	r3, [r7, #23]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	75fb      	strb	r3, [r7, #23]
 8006fc4:	7dfa      	ldrb	r2, [r7, #23]
 8006fc6:	79fb      	ldrb	r3, [r7, #7]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d3d3      	bcc.n	8006f74 <IntToUnicode+0x18>
  }
}
 8006fcc:	bf00      	nop
 8006fce:	bf00      	nop
 8006fd0:	371c      	adds	r7, #28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
	...

08006fdc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08a      	sub	sp, #40	; 0x28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fe4:	f107 0314 	add.w	r3, r7, #20
 8006fe8:	2200      	movs	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]
 8006fec:	605a      	str	r2, [r3, #4]
 8006fee:	609a      	str	r2, [r3, #8]
 8006ff0:	60da      	str	r2, [r3, #12]
 8006ff2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ffc:	d13a      	bne.n	8007074 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ffe:	2300      	movs	r3, #0
 8007000:	613b      	str	r3, [r7, #16]
 8007002:	4b1e      	ldr	r3, [pc, #120]	; (800707c <HAL_PCD_MspInit+0xa0>)
 8007004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007006:	4a1d      	ldr	r2, [pc, #116]	; (800707c <HAL_PCD_MspInit+0xa0>)
 8007008:	f043 0301 	orr.w	r3, r3, #1
 800700c:	6313      	str	r3, [r2, #48]	; 0x30
 800700e:	4b1b      	ldr	r3, [pc, #108]	; (800707c <HAL_PCD_MspInit+0xa0>)
 8007010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	613b      	str	r3, [r7, #16]
 8007018:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800701a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800701e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007020:	2302      	movs	r3, #2
 8007022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007024:	2300      	movs	r3, #0
 8007026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007028:	2303      	movs	r3, #3
 800702a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800702c:	230a      	movs	r3, #10
 800702e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007030:	f107 0314 	add.w	r3, r7, #20
 8007034:	4619      	mov	r1, r3
 8007036:	4812      	ldr	r0, [pc, #72]	; (8007080 <HAL_PCD_MspInit+0xa4>)
 8007038:	f7fa f9b2 	bl	80013a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800703c:	4b0f      	ldr	r3, [pc, #60]	; (800707c <HAL_PCD_MspInit+0xa0>)
 800703e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007040:	4a0e      	ldr	r2, [pc, #56]	; (800707c <HAL_PCD_MspInit+0xa0>)
 8007042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007046:	6353      	str	r3, [r2, #52]	; 0x34
 8007048:	2300      	movs	r3, #0
 800704a:	60fb      	str	r3, [r7, #12]
 800704c:	4b0b      	ldr	r3, [pc, #44]	; (800707c <HAL_PCD_MspInit+0xa0>)
 800704e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007050:	4a0a      	ldr	r2, [pc, #40]	; (800707c <HAL_PCD_MspInit+0xa0>)
 8007052:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007056:	6453      	str	r3, [r2, #68]	; 0x44
 8007058:	4b08      	ldr	r3, [pc, #32]	; (800707c <HAL_PCD_MspInit+0xa0>)
 800705a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800705c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007060:	60fb      	str	r3, [r7, #12]
 8007062:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007064:	2200      	movs	r2, #0
 8007066:	2100      	movs	r1, #0
 8007068:	2043      	movs	r0, #67	; 0x43
 800706a:	f7fa f962 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800706e:	2043      	movs	r0, #67	; 0x43
 8007070:	f7fa f97b 	bl	800136a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007074:	bf00      	nop
 8007076:	3728      	adds	r7, #40	; 0x28
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	40023800 	.word	0x40023800
 8007080:	40020000 	.word	0x40020000

08007084 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007098:	4619      	mov	r1, r3
 800709a:	4610      	mov	r0, r2
 800709c:	f7fe fc42 	bl	8005924 <USBD_LL_SetupStage>
}
 80070a0:	bf00      	nop
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	460b      	mov	r3, r1
 80070b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80070ba:	78fa      	ldrb	r2, [r7, #3]
 80070bc:	6879      	ldr	r1, [r7, #4]
 80070be:	4613      	mov	r3, r2
 80070c0:	00db      	lsls	r3, r3, #3
 80070c2:	1a9b      	subs	r3, r3, r2
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	440b      	add	r3, r1
 80070c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	78fb      	ldrb	r3, [r7, #3]
 80070d0:	4619      	mov	r1, r3
 80070d2:	f7fe fc7c 	bl	80059ce <USBD_LL_DataOutStage>
}
 80070d6:	bf00      	nop
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b082      	sub	sp, #8
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
 80070e6:	460b      	mov	r3, r1
 80070e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80070f0:	78fa      	ldrb	r2, [r7, #3]
 80070f2:	6879      	ldr	r1, [r7, #4]
 80070f4:	4613      	mov	r3, r2
 80070f6:	00db      	lsls	r3, r3, #3
 80070f8:	1a9b      	subs	r3, r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	440b      	add	r3, r1
 80070fe:	3348      	adds	r3, #72	; 0x48
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	78fb      	ldrb	r3, [r7, #3]
 8007104:	4619      	mov	r1, r3
 8007106:	f7fe fcc5 	bl	8005a94 <USBD_LL_DataInStage>
}
 800710a:	bf00      	nop
 800710c:	3708      	adds	r7, #8
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b082      	sub	sp, #8
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007120:	4618      	mov	r0, r3
 8007122:	f7fe fdd9 	bl	8005cd8 <USBD_LL_SOF>
}
 8007126:	bf00      	nop
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b084      	sub	sp, #16
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007136:	2301      	movs	r3, #1
 8007138:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	2b02      	cmp	r3, #2
 8007140:	d001      	beq.n	8007146 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007142:	f7f9 fbbf 	bl	80008c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800714c:	7bfa      	ldrb	r2, [r7, #15]
 800714e:	4611      	mov	r1, r2
 8007150:	4618      	mov	r0, r3
 8007152:	f7fe fd83 	bl	8005c5c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800715c:	4618      	mov	r0, r3
 800715e:	f7fe fd2f 	bl	8005bc0 <USBD_LL_Reset>
}
 8007162:	bf00      	nop
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800717a:	4618      	mov	r0, r3
 800717c:	f7fe fd7e 	bl	8005c7c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	6812      	ldr	r2, [r2, #0]
 800718e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007192:	f043 0301 	orr.w	r3, r3, #1
 8007196:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a1b      	ldr	r3, [r3, #32]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d005      	beq.n	80071ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80071a0:	4b04      	ldr	r3, [pc, #16]	; (80071b4 <HAL_PCD_SuspendCallback+0x48>)
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	4a03      	ldr	r2, [pc, #12]	; (80071b4 <HAL_PCD_SuspendCallback+0x48>)
 80071a6:	f043 0306 	orr.w	r3, r3, #6
 80071aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80071ac:	bf00      	nop
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	e000ed00 	.word	0xe000ed00

080071b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fe fd6e 	bl	8005ca8 <USBD_LL_Resume>
}
 80071cc:	bf00      	nop
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	460b      	mov	r3, r1
 80071de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80071e6:	78fa      	ldrb	r2, [r7, #3]
 80071e8:	4611      	mov	r1, r2
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fe fdbc 	bl	8005d68 <USBD_LL_IsoOUTIncomplete>
}
 80071f0:	bf00      	nop
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	460b      	mov	r3, r1
 8007202:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800720a:	78fa      	ldrb	r2, [r7, #3]
 800720c:	4611      	mov	r1, r2
 800720e:	4618      	mov	r0, r3
 8007210:	f7fe fd84 	bl	8005d1c <USBD_LL_IsoINIncomplete>
}
 8007214:	bf00      	nop
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800722a:	4618      	mov	r0, r3
 800722c:	f7fe fdc2 	bl	8005db4 <USBD_LL_DevConnected>
}
 8007230:	bf00      	nop
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007246:	4618      	mov	r0, r3
 8007248:	f7fe fdbf 	bl	8005dca <USBD_LL_DevDisconnected>
}
 800724c:	bf00      	nop
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d13c      	bne.n	80072de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007264:	4a20      	ldr	r2, [pc, #128]	; (80072e8 <USBD_LL_Init+0x94>)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a1e      	ldr	r2, [pc, #120]	; (80072e8 <USBD_LL_Init+0x94>)
 8007270:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007274:	4b1c      	ldr	r3, [pc, #112]	; (80072e8 <USBD_LL_Init+0x94>)
 8007276:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800727a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800727c:	4b1a      	ldr	r3, [pc, #104]	; (80072e8 <USBD_LL_Init+0x94>)
 800727e:	2204      	movs	r2, #4
 8007280:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007282:	4b19      	ldr	r3, [pc, #100]	; (80072e8 <USBD_LL_Init+0x94>)
 8007284:	2202      	movs	r2, #2
 8007286:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007288:	4b17      	ldr	r3, [pc, #92]	; (80072e8 <USBD_LL_Init+0x94>)
 800728a:	2200      	movs	r2, #0
 800728c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800728e:	4b16      	ldr	r3, [pc, #88]	; (80072e8 <USBD_LL_Init+0x94>)
 8007290:	2202      	movs	r2, #2
 8007292:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007294:	4b14      	ldr	r3, [pc, #80]	; (80072e8 <USBD_LL_Init+0x94>)
 8007296:	2200      	movs	r2, #0
 8007298:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800729a:	4b13      	ldr	r3, [pc, #76]	; (80072e8 <USBD_LL_Init+0x94>)
 800729c:	2200      	movs	r2, #0
 800729e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80072a0:	4b11      	ldr	r3, [pc, #68]	; (80072e8 <USBD_LL_Init+0x94>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80072a6:	4b10      	ldr	r3, [pc, #64]	; (80072e8 <USBD_LL_Init+0x94>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80072ac:	4b0e      	ldr	r3, [pc, #56]	; (80072e8 <USBD_LL_Init+0x94>)
 80072ae:	2200      	movs	r2, #0
 80072b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80072b2:	480d      	ldr	r0, [pc, #52]	; (80072e8 <USBD_LL_Init+0x94>)
 80072b4:	f7fa fe6d 	bl	8001f92 <HAL_PCD_Init>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d001      	beq.n	80072c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80072be:	f7f9 fb01 	bl	80008c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80072c2:	2180      	movs	r1, #128	; 0x80
 80072c4:	4808      	ldr	r0, [pc, #32]	; (80072e8 <USBD_LL_Init+0x94>)
 80072c6:	f7fb ffca 	bl	800325e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80072ca:	2240      	movs	r2, #64	; 0x40
 80072cc:	2100      	movs	r1, #0
 80072ce:	4806      	ldr	r0, [pc, #24]	; (80072e8 <USBD_LL_Init+0x94>)
 80072d0:	f7fb ff7e 	bl	80031d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80072d4:	2280      	movs	r2, #128	; 0x80
 80072d6:	2101      	movs	r1, #1
 80072d8:	4803      	ldr	r0, [pc, #12]	; (80072e8 <USBD_LL_Init+0x94>)
 80072da:	f7fb ff79 	bl	80031d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	20001e70 	.word	0x20001e70

080072ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072f8:	2300      	movs	r3, #0
 80072fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007302:	4618      	mov	r0, r3
 8007304:	f7fa ff62 	bl	80021cc <HAL_PCD_Start>
 8007308:	4603      	mov	r3, r0
 800730a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800730c:	7bfb      	ldrb	r3, [r7, #15]
 800730e:	4618      	mov	r0, r3
 8007310:	f000 f942 	bl	8007598 <USBD_Get_USB_Status>
 8007314:	4603      	mov	r3, r0
 8007316:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007318:	7bbb      	ldrb	r3, [r7, #14]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b084      	sub	sp, #16
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	4608      	mov	r0, r1
 800732c:	4611      	mov	r1, r2
 800732e:	461a      	mov	r2, r3
 8007330:	4603      	mov	r3, r0
 8007332:	70fb      	strb	r3, [r7, #3]
 8007334:	460b      	mov	r3, r1
 8007336:	70bb      	strb	r3, [r7, #2]
 8007338:	4613      	mov	r3, r2
 800733a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007340:	2300      	movs	r3, #0
 8007342:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800734a:	78bb      	ldrb	r3, [r7, #2]
 800734c:	883a      	ldrh	r2, [r7, #0]
 800734e:	78f9      	ldrb	r1, [r7, #3]
 8007350:	f7fb fb46 	bl	80029e0 <HAL_PCD_EP_Open>
 8007354:	4603      	mov	r3, r0
 8007356:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007358:	7bfb      	ldrb	r3, [r7, #15]
 800735a:	4618      	mov	r0, r3
 800735c:	f000 f91c 	bl	8007598 <USBD_Get_USB_Status>
 8007360:	4603      	mov	r3, r0
 8007362:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007364:	7bbb      	ldrb	r3, [r7, #14]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	460b      	mov	r3, r1
 8007378:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800737a:	2300      	movs	r3, #0
 800737c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007388:	78fa      	ldrb	r2, [r7, #3]
 800738a:	4611      	mov	r1, r2
 800738c:	4618      	mov	r0, r3
 800738e:	f7fb fb8f 	bl	8002ab0 <HAL_PCD_EP_Close>
 8007392:	4603      	mov	r3, r0
 8007394:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007396:	7bfb      	ldrb	r3, [r7, #15]
 8007398:	4618      	mov	r0, r3
 800739a:	f000 f8fd 	bl	8007598 <USBD_Get_USB_Status>
 800739e:	4603      	mov	r3, r0
 80073a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073b8:	2300      	movs	r3, #0
 80073ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073bc:	2300      	movs	r3, #0
 80073be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80073c6:	78fa      	ldrb	r2, [r7, #3]
 80073c8:	4611      	mov	r1, r2
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7fb fc67 	bl	8002c9e <HAL_PCD_EP_SetStall>
 80073d0:	4603      	mov	r3, r0
 80073d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 f8de 	bl	8007598 <USBD_Get_USB_Status>
 80073dc:	4603      	mov	r3, r0
 80073de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b084      	sub	sp, #16
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
 80073f2:	460b      	mov	r3, r1
 80073f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007404:	78fa      	ldrb	r2, [r7, #3]
 8007406:	4611      	mov	r1, r2
 8007408:	4618      	mov	r0, r3
 800740a:	f7fb fcac 	bl	8002d66 <HAL_PCD_EP_ClrStall>
 800740e:	4603      	mov	r3, r0
 8007410:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007412:	7bfb      	ldrb	r3, [r7, #15]
 8007414:	4618      	mov	r0, r3
 8007416:	f000 f8bf 	bl	8007598 <USBD_Get_USB_Status>
 800741a:	4603      	mov	r3, r0
 800741c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800741e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	460b      	mov	r3, r1
 8007432:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800743a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800743c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007440:	2b00      	cmp	r3, #0
 8007442:	da0b      	bge.n	800745c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007444:	78fb      	ldrb	r3, [r7, #3]
 8007446:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800744a:	68f9      	ldr	r1, [r7, #12]
 800744c:	4613      	mov	r3, r2
 800744e:	00db      	lsls	r3, r3, #3
 8007450:	1a9b      	subs	r3, r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	440b      	add	r3, r1
 8007456:	333e      	adds	r3, #62	; 0x3e
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	e00b      	b.n	8007474 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800745c:	78fb      	ldrb	r3, [r7, #3]
 800745e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007462:	68f9      	ldr	r1, [r7, #12]
 8007464:	4613      	mov	r3, r2
 8007466:	00db      	lsls	r3, r3, #3
 8007468:	1a9b      	subs	r3, r3, r2
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	440b      	add	r3, r1
 800746e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007472:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007474:	4618      	mov	r0, r3
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	460b      	mov	r3, r1
 800748a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800748c:	2300      	movs	r3, #0
 800748e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800749a:	78fa      	ldrb	r2, [r7, #3]
 800749c:	4611      	mov	r1, r2
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fb fa79 	bl	8002996 <HAL_PCD_SetAddress>
 80074a4:	4603      	mov	r3, r0
 80074a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 f874 	bl	8007598 <USBD_Get_USB_Status>
 80074b0:	4603      	mov	r3, r0
 80074b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b086      	sub	sp, #24
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	60f8      	str	r0, [r7, #12]
 80074c6:	607a      	str	r2, [r7, #4]
 80074c8:	603b      	str	r3, [r7, #0]
 80074ca:	460b      	mov	r3, r1
 80074cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80074dc:	7af9      	ldrb	r1, [r7, #11]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	f7fb fb92 	bl	8002c0a <HAL_PCD_EP_Transmit>
 80074e6:	4603      	mov	r3, r0
 80074e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074ea:	7dfb      	ldrb	r3, [r7, #23]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f000 f853 	bl	8007598 <USBD_Get_USB_Status>
 80074f2:	4603      	mov	r3, r0
 80074f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80074f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3718      	adds	r7, #24
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	607a      	str	r2, [r7, #4]
 800750a:	603b      	str	r3, [r7, #0]
 800750c:	460b      	mov	r3, r1
 800750e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800751e:	7af9      	ldrb	r1, [r7, #11]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	f7fb fb0e 	bl	8002b44 <HAL_PCD_EP_Receive>
 8007528:	4603      	mov	r3, r0
 800752a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800752c:	7dfb      	ldrb	r3, [r7, #23]
 800752e:	4618      	mov	r0, r3
 8007530:	f000 f832 	bl	8007598 <USBD_Get_USB_Status>
 8007534:	4603      	mov	r3, r0
 8007536:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007538:	7dbb      	ldrb	r3, [r7, #22]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b082      	sub	sp, #8
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	460b      	mov	r3, r1
 800754c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007554:	78fa      	ldrb	r2, [r7, #3]
 8007556:	4611      	mov	r1, r2
 8007558:	4618      	mov	r0, r3
 800755a:	f7fb fb3e 	bl	8002bda <HAL_PCD_EP_GetRxCount>
 800755e:	4603      	mov	r3, r0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007570:	4b03      	ldr	r3, [pc, #12]	; (8007580 <USBD_static_malloc+0x18>)
}
 8007572:	4618      	mov	r0, r3
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	20000618 	.word	0x20000618

08007584 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]

}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	4603      	mov	r3, r0
 80075a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80075a6:	79fb      	ldrb	r3, [r7, #7]
 80075a8:	2b03      	cmp	r3, #3
 80075aa:	d817      	bhi.n	80075dc <USBD_Get_USB_Status+0x44>
 80075ac:	a201      	add	r2, pc, #4	; (adr r2, 80075b4 <USBD_Get_USB_Status+0x1c>)
 80075ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b2:	bf00      	nop
 80075b4:	080075c5 	.word	0x080075c5
 80075b8:	080075cb 	.word	0x080075cb
 80075bc:	080075d1 	.word	0x080075d1
 80075c0:	080075d7 	.word	0x080075d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80075c4:	2300      	movs	r3, #0
 80075c6:	73fb      	strb	r3, [r7, #15]
    break;
 80075c8:	e00b      	b.n	80075e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80075ca:	2303      	movs	r3, #3
 80075cc:	73fb      	strb	r3, [r7, #15]
    break;
 80075ce:	e008      	b.n	80075e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80075d0:	2301      	movs	r3, #1
 80075d2:	73fb      	strb	r3, [r7, #15]
    break;
 80075d4:	e005      	b.n	80075e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80075d6:	2303      	movs	r3, #3
 80075d8:	73fb      	strb	r3, [r7, #15]
    break;
 80075da:	e002      	b.n	80075e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80075dc:	2303      	movs	r3, #3
 80075de:	73fb      	strb	r3, [r7, #15]
    break;
 80075e0:	bf00      	nop
  }
  return usb_status;
 80075e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3714      	adds	r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <__errno>:
 80075f0:	4b01      	ldr	r3, [pc, #4]	; (80075f8 <__errno+0x8>)
 80075f2:	6818      	ldr	r0, [r3, #0]
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	20000188 	.word	0x20000188

080075fc <__libc_init_array>:
 80075fc:	b570      	push	{r4, r5, r6, lr}
 80075fe:	4d0d      	ldr	r5, [pc, #52]	; (8007634 <__libc_init_array+0x38>)
 8007600:	4c0d      	ldr	r4, [pc, #52]	; (8007638 <__libc_init_array+0x3c>)
 8007602:	1b64      	subs	r4, r4, r5
 8007604:	10a4      	asrs	r4, r4, #2
 8007606:	2600      	movs	r6, #0
 8007608:	42a6      	cmp	r6, r4
 800760a:	d109      	bne.n	8007620 <__libc_init_array+0x24>
 800760c:	4d0b      	ldr	r5, [pc, #44]	; (800763c <__libc_init_array+0x40>)
 800760e:	4c0c      	ldr	r4, [pc, #48]	; (8007640 <__libc_init_array+0x44>)
 8007610:	f000 fc4e 	bl	8007eb0 <_init>
 8007614:	1b64      	subs	r4, r4, r5
 8007616:	10a4      	asrs	r4, r4, #2
 8007618:	2600      	movs	r6, #0
 800761a:	42a6      	cmp	r6, r4
 800761c:	d105      	bne.n	800762a <__libc_init_array+0x2e>
 800761e:	bd70      	pop	{r4, r5, r6, pc}
 8007620:	f855 3b04 	ldr.w	r3, [r5], #4
 8007624:	4798      	blx	r3
 8007626:	3601      	adds	r6, #1
 8007628:	e7ee      	b.n	8007608 <__libc_init_array+0xc>
 800762a:	f855 3b04 	ldr.w	r3, [r5], #4
 800762e:	4798      	blx	r3
 8007630:	3601      	adds	r6, #1
 8007632:	e7f2      	b.n	800761a <__libc_init_array+0x1e>
 8007634:	08008d38 	.word	0x08008d38
 8007638:	08008d38 	.word	0x08008d38
 800763c:	08008d38 	.word	0x08008d38
 8007640:	08008d3c 	.word	0x08008d3c

08007644 <memcpy>:
 8007644:	440a      	add	r2, r1
 8007646:	4291      	cmp	r1, r2
 8007648:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800764c:	d100      	bne.n	8007650 <memcpy+0xc>
 800764e:	4770      	bx	lr
 8007650:	b510      	push	{r4, lr}
 8007652:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007656:	f803 4f01 	strb.w	r4, [r3, #1]!
 800765a:	4291      	cmp	r1, r2
 800765c:	d1f9      	bne.n	8007652 <memcpy+0xe>
 800765e:	bd10      	pop	{r4, pc}

08007660 <memset>:
 8007660:	4402      	add	r2, r0
 8007662:	4603      	mov	r3, r0
 8007664:	4293      	cmp	r3, r2
 8007666:	d100      	bne.n	800766a <memset+0xa>
 8007668:	4770      	bx	lr
 800766a:	f803 1b01 	strb.w	r1, [r3], #1
 800766e:	e7f9      	b.n	8007664 <memset+0x4>

08007670 <siprintf>:
 8007670:	b40e      	push	{r1, r2, r3}
 8007672:	b500      	push	{lr}
 8007674:	b09c      	sub	sp, #112	; 0x70
 8007676:	ab1d      	add	r3, sp, #116	; 0x74
 8007678:	9002      	str	r0, [sp, #8]
 800767a:	9006      	str	r0, [sp, #24]
 800767c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007680:	4809      	ldr	r0, [pc, #36]	; (80076a8 <siprintf+0x38>)
 8007682:	9107      	str	r1, [sp, #28]
 8007684:	9104      	str	r1, [sp, #16]
 8007686:	4909      	ldr	r1, [pc, #36]	; (80076ac <siprintf+0x3c>)
 8007688:	f853 2b04 	ldr.w	r2, [r3], #4
 800768c:	9105      	str	r1, [sp, #20]
 800768e:	6800      	ldr	r0, [r0, #0]
 8007690:	9301      	str	r3, [sp, #4]
 8007692:	a902      	add	r1, sp, #8
 8007694:	f000 f868 	bl	8007768 <_svfiprintf_r>
 8007698:	9b02      	ldr	r3, [sp, #8]
 800769a:	2200      	movs	r2, #0
 800769c:	701a      	strb	r2, [r3, #0]
 800769e:	b01c      	add	sp, #112	; 0x70
 80076a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80076a4:	b003      	add	sp, #12
 80076a6:	4770      	bx	lr
 80076a8:	20000188 	.word	0x20000188
 80076ac:	ffff0208 	.word	0xffff0208

080076b0 <__ssputs_r>:
 80076b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076b4:	688e      	ldr	r6, [r1, #8]
 80076b6:	429e      	cmp	r6, r3
 80076b8:	4682      	mov	sl, r0
 80076ba:	460c      	mov	r4, r1
 80076bc:	4690      	mov	r8, r2
 80076be:	461f      	mov	r7, r3
 80076c0:	d838      	bhi.n	8007734 <__ssputs_r+0x84>
 80076c2:	898a      	ldrh	r2, [r1, #12]
 80076c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076c8:	d032      	beq.n	8007730 <__ssputs_r+0x80>
 80076ca:	6825      	ldr	r5, [r4, #0]
 80076cc:	6909      	ldr	r1, [r1, #16]
 80076ce:	eba5 0901 	sub.w	r9, r5, r1
 80076d2:	6965      	ldr	r5, [r4, #20]
 80076d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076dc:	3301      	adds	r3, #1
 80076de:	444b      	add	r3, r9
 80076e0:	106d      	asrs	r5, r5, #1
 80076e2:	429d      	cmp	r5, r3
 80076e4:	bf38      	it	cc
 80076e6:	461d      	movcc	r5, r3
 80076e8:	0553      	lsls	r3, r2, #21
 80076ea:	d531      	bpl.n	8007750 <__ssputs_r+0xa0>
 80076ec:	4629      	mov	r1, r5
 80076ee:	f000 fb3b 	bl	8007d68 <_malloc_r>
 80076f2:	4606      	mov	r6, r0
 80076f4:	b950      	cbnz	r0, 800770c <__ssputs_r+0x5c>
 80076f6:	230c      	movs	r3, #12
 80076f8:	f8ca 3000 	str.w	r3, [sl]
 80076fc:	89a3      	ldrh	r3, [r4, #12]
 80076fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007702:	81a3      	strh	r3, [r4, #12]
 8007704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800770c:	6921      	ldr	r1, [r4, #16]
 800770e:	464a      	mov	r2, r9
 8007710:	f7ff ff98 	bl	8007644 <memcpy>
 8007714:	89a3      	ldrh	r3, [r4, #12]
 8007716:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800771a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800771e:	81a3      	strh	r3, [r4, #12]
 8007720:	6126      	str	r6, [r4, #16]
 8007722:	6165      	str	r5, [r4, #20]
 8007724:	444e      	add	r6, r9
 8007726:	eba5 0509 	sub.w	r5, r5, r9
 800772a:	6026      	str	r6, [r4, #0]
 800772c:	60a5      	str	r5, [r4, #8]
 800772e:	463e      	mov	r6, r7
 8007730:	42be      	cmp	r6, r7
 8007732:	d900      	bls.n	8007736 <__ssputs_r+0x86>
 8007734:	463e      	mov	r6, r7
 8007736:	4632      	mov	r2, r6
 8007738:	6820      	ldr	r0, [r4, #0]
 800773a:	4641      	mov	r1, r8
 800773c:	f000 faaa 	bl	8007c94 <memmove>
 8007740:	68a3      	ldr	r3, [r4, #8]
 8007742:	6822      	ldr	r2, [r4, #0]
 8007744:	1b9b      	subs	r3, r3, r6
 8007746:	4432      	add	r2, r6
 8007748:	60a3      	str	r3, [r4, #8]
 800774a:	6022      	str	r2, [r4, #0]
 800774c:	2000      	movs	r0, #0
 800774e:	e7db      	b.n	8007708 <__ssputs_r+0x58>
 8007750:	462a      	mov	r2, r5
 8007752:	f000 fb63 	bl	8007e1c <_realloc_r>
 8007756:	4606      	mov	r6, r0
 8007758:	2800      	cmp	r0, #0
 800775a:	d1e1      	bne.n	8007720 <__ssputs_r+0x70>
 800775c:	6921      	ldr	r1, [r4, #16]
 800775e:	4650      	mov	r0, sl
 8007760:	f000 fab2 	bl	8007cc8 <_free_r>
 8007764:	e7c7      	b.n	80076f6 <__ssputs_r+0x46>
	...

08007768 <_svfiprintf_r>:
 8007768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800776c:	4698      	mov	r8, r3
 800776e:	898b      	ldrh	r3, [r1, #12]
 8007770:	061b      	lsls	r3, r3, #24
 8007772:	b09d      	sub	sp, #116	; 0x74
 8007774:	4607      	mov	r7, r0
 8007776:	460d      	mov	r5, r1
 8007778:	4614      	mov	r4, r2
 800777a:	d50e      	bpl.n	800779a <_svfiprintf_r+0x32>
 800777c:	690b      	ldr	r3, [r1, #16]
 800777e:	b963      	cbnz	r3, 800779a <_svfiprintf_r+0x32>
 8007780:	2140      	movs	r1, #64	; 0x40
 8007782:	f000 faf1 	bl	8007d68 <_malloc_r>
 8007786:	6028      	str	r0, [r5, #0]
 8007788:	6128      	str	r0, [r5, #16]
 800778a:	b920      	cbnz	r0, 8007796 <_svfiprintf_r+0x2e>
 800778c:	230c      	movs	r3, #12
 800778e:	603b      	str	r3, [r7, #0]
 8007790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007794:	e0d1      	b.n	800793a <_svfiprintf_r+0x1d2>
 8007796:	2340      	movs	r3, #64	; 0x40
 8007798:	616b      	str	r3, [r5, #20]
 800779a:	2300      	movs	r3, #0
 800779c:	9309      	str	r3, [sp, #36]	; 0x24
 800779e:	2320      	movs	r3, #32
 80077a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80077a8:	2330      	movs	r3, #48	; 0x30
 80077aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007954 <_svfiprintf_r+0x1ec>
 80077ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077b2:	f04f 0901 	mov.w	r9, #1
 80077b6:	4623      	mov	r3, r4
 80077b8:	469a      	mov	sl, r3
 80077ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077be:	b10a      	cbz	r2, 80077c4 <_svfiprintf_r+0x5c>
 80077c0:	2a25      	cmp	r2, #37	; 0x25
 80077c2:	d1f9      	bne.n	80077b8 <_svfiprintf_r+0x50>
 80077c4:	ebba 0b04 	subs.w	fp, sl, r4
 80077c8:	d00b      	beq.n	80077e2 <_svfiprintf_r+0x7a>
 80077ca:	465b      	mov	r3, fp
 80077cc:	4622      	mov	r2, r4
 80077ce:	4629      	mov	r1, r5
 80077d0:	4638      	mov	r0, r7
 80077d2:	f7ff ff6d 	bl	80076b0 <__ssputs_r>
 80077d6:	3001      	adds	r0, #1
 80077d8:	f000 80aa 	beq.w	8007930 <_svfiprintf_r+0x1c8>
 80077dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077de:	445a      	add	r2, fp
 80077e0:	9209      	str	r2, [sp, #36]	; 0x24
 80077e2:	f89a 3000 	ldrb.w	r3, [sl]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f000 80a2 	beq.w	8007930 <_svfiprintf_r+0x1c8>
 80077ec:	2300      	movs	r3, #0
 80077ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077f6:	f10a 0a01 	add.w	sl, sl, #1
 80077fa:	9304      	str	r3, [sp, #16]
 80077fc:	9307      	str	r3, [sp, #28]
 80077fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007802:	931a      	str	r3, [sp, #104]	; 0x68
 8007804:	4654      	mov	r4, sl
 8007806:	2205      	movs	r2, #5
 8007808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800780c:	4851      	ldr	r0, [pc, #324]	; (8007954 <_svfiprintf_r+0x1ec>)
 800780e:	f7f8 fce7 	bl	80001e0 <memchr>
 8007812:	9a04      	ldr	r2, [sp, #16]
 8007814:	b9d8      	cbnz	r0, 800784e <_svfiprintf_r+0xe6>
 8007816:	06d0      	lsls	r0, r2, #27
 8007818:	bf44      	itt	mi
 800781a:	2320      	movmi	r3, #32
 800781c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007820:	0711      	lsls	r1, r2, #28
 8007822:	bf44      	itt	mi
 8007824:	232b      	movmi	r3, #43	; 0x2b
 8007826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800782a:	f89a 3000 	ldrb.w	r3, [sl]
 800782e:	2b2a      	cmp	r3, #42	; 0x2a
 8007830:	d015      	beq.n	800785e <_svfiprintf_r+0xf6>
 8007832:	9a07      	ldr	r2, [sp, #28]
 8007834:	4654      	mov	r4, sl
 8007836:	2000      	movs	r0, #0
 8007838:	f04f 0c0a 	mov.w	ip, #10
 800783c:	4621      	mov	r1, r4
 800783e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007842:	3b30      	subs	r3, #48	; 0x30
 8007844:	2b09      	cmp	r3, #9
 8007846:	d94e      	bls.n	80078e6 <_svfiprintf_r+0x17e>
 8007848:	b1b0      	cbz	r0, 8007878 <_svfiprintf_r+0x110>
 800784a:	9207      	str	r2, [sp, #28]
 800784c:	e014      	b.n	8007878 <_svfiprintf_r+0x110>
 800784e:	eba0 0308 	sub.w	r3, r0, r8
 8007852:	fa09 f303 	lsl.w	r3, r9, r3
 8007856:	4313      	orrs	r3, r2
 8007858:	9304      	str	r3, [sp, #16]
 800785a:	46a2      	mov	sl, r4
 800785c:	e7d2      	b.n	8007804 <_svfiprintf_r+0x9c>
 800785e:	9b03      	ldr	r3, [sp, #12]
 8007860:	1d19      	adds	r1, r3, #4
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	9103      	str	r1, [sp, #12]
 8007866:	2b00      	cmp	r3, #0
 8007868:	bfbb      	ittet	lt
 800786a:	425b      	neglt	r3, r3
 800786c:	f042 0202 	orrlt.w	r2, r2, #2
 8007870:	9307      	strge	r3, [sp, #28]
 8007872:	9307      	strlt	r3, [sp, #28]
 8007874:	bfb8      	it	lt
 8007876:	9204      	strlt	r2, [sp, #16]
 8007878:	7823      	ldrb	r3, [r4, #0]
 800787a:	2b2e      	cmp	r3, #46	; 0x2e
 800787c:	d10c      	bne.n	8007898 <_svfiprintf_r+0x130>
 800787e:	7863      	ldrb	r3, [r4, #1]
 8007880:	2b2a      	cmp	r3, #42	; 0x2a
 8007882:	d135      	bne.n	80078f0 <_svfiprintf_r+0x188>
 8007884:	9b03      	ldr	r3, [sp, #12]
 8007886:	1d1a      	adds	r2, r3, #4
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	9203      	str	r2, [sp, #12]
 800788c:	2b00      	cmp	r3, #0
 800788e:	bfb8      	it	lt
 8007890:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007894:	3402      	adds	r4, #2
 8007896:	9305      	str	r3, [sp, #20]
 8007898:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007964 <_svfiprintf_r+0x1fc>
 800789c:	7821      	ldrb	r1, [r4, #0]
 800789e:	2203      	movs	r2, #3
 80078a0:	4650      	mov	r0, sl
 80078a2:	f7f8 fc9d 	bl	80001e0 <memchr>
 80078a6:	b140      	cbz	r0, 80078ba <_svfiprintf_r+0x152>
 80078a8:	2340      	movs	r3, #64	; 0x40
 80078aa:	eba0 000a 	sub.w	r0, r0, sl
 80078ae:	fa03 f000 	lsl.w	r0, r3, r0
 80078b2:	9b04      	ldr	r3, [sp, #16]
 80078b4:	4303      	orrs	r3, r0
 80078b6:	3401      	adds	r4, #1
 80078b8:	9304      	str	r3, [sp, #16]
 80078ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078be:	4826      	ldr	r0, [pc, #152]	; (8007958 <_svfiprintf_r+0x1f0>)
 80078c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078c4:	2206      	movs	r2, #6
 80078c6:	f7f8 fc8b 	bl	80001e0 <memchr>
 80078ca:	2800      	cmp	r0, #0
 80078cc:	d038      	beq.n	8007940 <_svfiprintf_r+0x1d8>
 80078ce:	4b23      	ldr	r3, [pc, #140]	; (800795c <_svfiprintf_r+0x1f4>)
 80078d0:	bb1b      	cbnz	r3, 800791a <_svfiprintf_r+0x1b2>
 80078d2:	9b03      	ldr	r3, [sp, #12]
 80078d4:	3307      	adds	r3, #7
 80078d6:	f023 0307 	bic.w	r3, r3, #7
 80078da:	3308      	adds	r3, #8
 80078dc:	9303      	str	r3, [sp, #12]
 80078de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e0:	4433      	add	r3, r6
 80078e2:	9309      	str	r3, [sp, #36]	; 0x24
 80078e4:	e767      	b.n	80077b6 <_svfiprintf_r+0x4e>
 80078e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80078ea:	460c      	mov	r4, r1
 80078ec:	2001      	movs	r0, #1
 80078ee:	e7a5      	b.n	800783c <_svfiprintf_r+0xd4>
 80078f0:	2300      	movs	r3, #0
 80078f2:	3401      	adds	r4, #1
 80078f4:	9305      	str	r3, [sp, #20]
 80078f6:	4619      	mov	r1, r3
 80078f8:	f04f 0c0a 	mov.w	ip, #10
 80078fc:	4620      	mov	r0, r4
 80078fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007902:	3a30      	subs	r2, #48	; 0x30
 8007904:	2a09      	cmp	r2, #9
 8007906:	d903      	bls.n	8007910 <_svfiprintf_r+0x1a8>
 8007908:	2b00      	cmp	r3, #0
 800790a:	d0c5      	beq.n	8007898 <_svfiprintf_r+0x130>
 800790c:	9105      	str	r1, [sp, #20]
 800790e:	e7c3      	b.n	8007898 <_svfiprintf_r+0x130>
 8007910:	fb0c 2101 	mla	r1, ip, r1, r2
 8007914:	4604      	mov	r4, r0
 8007916:	2301      	movs	r3, #1
 8007918:	e7f0      	b.n	80078fc <_svfiprintf_r+0x194>
 800791a:	ab03      	add	r3, sp, #12
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	462a      	mov	r2, r5
 8007920:	4b0f      	ldr	r3, [pc, #60]	; (8007960 <_svfiprintf_r+0x1f8>)
 8007922:	a904      	add	r1, sp, #16
 8007924:	4638      	mov	r0, r7
 8007926:	f3af 8000 	nop.w
 800792a:	1c42      	adds	r2, r0, #1
 800792c:	4606      	mov	r6, r0
 800792e:	d1d6      	bne.n	80078de <_svfiprintf_r+0x176>
 8007930:	89ab      	ldrh	r3, [r5, #12]
 8007932:	065b      	lsls	r3, r3, #25
 8007934:	f53f af2c 	bmi.w	8007790 <_svfiprintf_r+0x28>
 8007938:	9809      	ldr	r0, [sp, #36]	; 0x24
 800793a:	b01d      	add	sp, #116	; 0x74
 800793c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007940:	ab03      	add	r3, sp, #12
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	462a      	mov	r2, r5
 8007946:	4b06      	ldr	r3, [pc, #24]	; (8007960 <_svfiprintf_r+0x1f8>)
 8007948:	a904      	add	r1, sp, #16
 800794a:	4638      	mov	r0, r7
 800794c:	f000 f87a 	bl	8007a44 <_printf_i>
 8007950:	e7eb      	b.n	800792a <_svfiprintf_r+0x1c2>
 8007952:	bf00      	nop
 8007954:	08008c9c 	.word	0x08008c9c
 8007958:	08008ca6 	.word	0x08008ca6
 800795c:	00000000 	.word	0x00000000
 8007960:	080076b1 	.word	0x080076b1
 8007964:	08008ca2 	.word	0x08008ca2

08007968 <_printf_common>:
 8007968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800796c:	4616      	mov	r6, r2
 800796e:	4699      	mov	r9, r3
 8007970:	688a      	ldr	r2, [r1, #8]
 8007972:	690b      	ldr	r3, [r1, #16]
 8007974:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007978:	4293      	cmp	r3, r2
 800797a:	bfb8      	it	lt
 800797c:	4613      	movlt	r3, r2
 800797e:	6033      	str	r3, [r6, #0]
 8007980:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007984:	4607      	mov	r7, r0
 8007986:	460c      	mov	r4, r1
 8007988:	b10a      	cbz	r2, 800798e <_printf_common+0x26>
 800798a:	3301      	adds	r3, #1
 800798c:	6033      	str	r3, [r6, #0]
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	0699      	lsls	r1, r3, #26
 8007992:	bf42      	ittt	mi
 8007994:	6833      	ldrmi	r3, [r6, #0]
 8007996:	3302      	addmi	r3, #2
 8007998:	6033      	strmi	r3, [r6, #0]
 800799a:	6825      	ldr	r5, [r4, #0]
 800799c:	f015 0506 	ands.w	r5, r5, #6
 80079a0:	d106      	bne.n	80079b0 <_printf_common+0x48>
 80079a2:	f104 0a19 	add.w	sl, r4, #25
 80079a6:	68e3      	ldr	r3, [r4, #12]
 80079a8:	6832      	ldr	r2, [r6, #0]
 80079aa:	1a9b      	subs	r3, r3, r2
 80079ac:	42ab      	cmp	r3, r5
 80079ae:	dc26      	bgt.n	80079fe <_printf_common+0x96>
 80079b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079b4:	1e13      	subs	r3, r2, #0
 80079b6:	6822      	ldr	r2, [r4, #0]
 80079b8:	bf18      	it	ne
 80079ba:	2301      	movne	r3, #1
 80079bc:	0692      	lsls	r2, r2, #26
 80079be:	d42b      	bmi.n	8007a18 <_printf_common+0xb0>
 80079c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079c4:	4649      	mov	r1, r9
 80079c6:	4638      	mov	r0, r7
 80079c8:	47c0      	blx	r8
 80079ca:	3001      	adds	r0, #1
 80079cc:	d01e      	beq.n	8007a0c <_printf_common+0xa4>
 80079ce:	6823      	ldr	r3, [r4, #0]
 80079d0:	68e5      	ldr	r5, [r4, #12]
 80079d2:	6832      	ldr	r2, [r6, #0]
 80079d4:	f003 0306 	and.w	r3, r3, #6
 80079d8:	2b04      	cmp	r3, #4
 80079da:	bf08      	it	eq
 80079dc:	1aad      	subeq	r5, r5, r2
 80079de:	68a3      	ldr	r3, [r4, #8]
 80079e0:	6922      	ldr	r2, [r4, #16]
 80079e2:	bf0c      	ite	eq
 80079e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079e8:	2500      	movne	r5, #0
 80079ea:	4293      	cmp	r3, r2
 80079ec:	bfc4      	itt	gt
 80079ee:	1a9b      	subgt	r3, r3, r2
 80079f0:	18ed      	addgt	r5, r5, r3
 80079f2:	2600      	movs	r6, #0
 80079f4:	341a      	adds	r4, #26
 80079f6:	42b5      	cmp	r5, r6
 80079f8:	d11a      	bne.n	8007a30 <_printf_common+0xc8>
 80079fa:	2000      	movs	r0, #0
 80079fc:	e008      	b.n	8007a10 <_printf_common+0xa8>
 80079fe:	2301      	movs	r3, #1
 8007a00:	4652      	mov	r2, sl
 8007a02:	4649      	mov	r1, r9
 8007a04:	4638      	mov	r0, r7
 8007a06:	47c0      	blx	r8
 8007a08:	3001      	adds	r0, #1
 8007a0a:	d103      	bne.n	8007a14 <_printf_common+0xac>
 8007a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a14:	3501      	adds	r5, #1
 8007a16:	e7c6      	b.n	80079a6 <_printf_common+0x3e>
 8007a18:	18e1      	adds	r1, r4, r3
 8007a1a:	1c5a      	adds	r2, r3, #1
 8007a1c:	2030      	movs	r0, #48	; 0x30
 8007a1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a22:	4422      	add	r2, r4
 8007a24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a2c:	3302      	adds	r3, #2
 8007a2e:	e7c7      	b.n	80079c0 <_printf_common+0x58>
 8007a30:	2301      	movs	r3, #1
 8007a32:	4622      	mov	r2, r4
 8007a34:	4649      	mov	r1, r9
 8007a36:	4638      	mov	r0, r7
 8007a38:	47c0      	blx	r8
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	d0e6      	beq.n	8007a0c <_printf_common+0xa4>
 8007a3e:	3601      	adds	r6, #1
 8007a40:	e7d9      	b.n	80079f6 <_printf_common+0x8e>
	...

08007a44 <_printf_i>:
 8007a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a48:	460c      	mov	r4, r1
 8007a4a:	4691      	mov	r9, r2
 8007a4c:	7e27      	ldrb	r7, [r4, #24]
 8007a4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007a50:	2f78      	cmp	r7, #120	; 0x78
 8007a52:	4680      	mov	r8, r0
 8007a54:	469a      	mov	sl, r3
 8007a56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a5a:	d807      	bhi.n	8007a6c <_printf_i+0x28>
 8007a5c:	2f62      	cmp	r7, #98	; 0x62
 8007a5e:	d80a      	bhi.n	8007a76 <_printf_i+0x32>
 8007a60:	2f00      	cmp	r7, #0
 8007a62:	f000 80d8 	beq.w	8007c16 <_printf_i+0x1d2>
 8007a66:	2f58      	cmp	r7, #88	; 0x58
 8007a68:	f000 80a3 	beq.w	8007bb2 <_printf_i+0x16e>
 8007a6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a74:	e03a      	b.n	8007aec <_printf_i+0xa8>
 8007a76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a7a:	2b15      	cmp	r3, #21
 8007a7c:	d8f6      	bhi.n	8007a6c <_printf_i+0x28>
 8007a7e:	a001      	add	r0, pc, #4	; (adr r0, 8007a84 <_printf_i+0x40>)
 8007a80:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007a84:	08007add 	.word	0x08007add
 8007a88:	08007af1 	.word	0x08007af1
 8007a8c:	08007a6d 	.word	0x08007a6d
 8007a90:	08007a6d 	.word	0x08007a6d
 8007a94:	08007a6d 	.word	0x08007a6d
 8007a98:	08007a6d 	.word	0x08007a6d
 8007a9c:	08007af1 	.word	0x08007af1
 8007aa0:	08007a6d 	.word	0x08007a6d
 8007aa4:	08007a6d 	.word	0x08007a6d
 8007aa8:	08007a6d 	.word	0x08007a6d
 8007aac:	08007a6d 	.word	0x08007a6d
 8007ab0:	08007bfd 	.word	0x08007bfd
 8007ab4:	08007b21 	.word	0x08007b21
 8007ab8:	08007bdf 	.word	0x08007bdf
 8007abc:	08007a6d 	.word	0x08007a6d
 8007ac0:	08007a6d 	.word	0x08007a6d
 8007ac4:	08007c1f 	.word	0x08007c1f
 8007ac8:	08007a6d 	.word	0x08007a6d
 8007acc:	08007b21 	.word	0x08007b21
 8007ad0:	08007a6d 	.word	0x08007a6d
 8007ad4:	08007a6d 	.word	0x08007a6d
 8007ad8:	08007be7 	.word	0x08007be7
 8007adc:	680b      	ldr	r3, [r1, #0]
 8007ade:	1d1a      	adds	r2, r3, #4
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	600a      	str	r2, [r1, #0]
 8007ae4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ae8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007aec:	2301      	movs	r3, #1
 8007aee:	e0a3      	b.n	8007c38 <_printf_i+0x1f4>
 8007af0:	6825      	ldr	r5, [r4, #0]
 8007af2:	6808      	ldr	r0, [r1, #0]
 8007af4:	062e      	lsls	r6, r5, #24
 8007af6:	f100 0304 	add.w	r3, r0, #4
 8007afa:	d50a      	bpl.n	8007b12 <_printf_i+0xce>
 8007afc:	6805      	ldr	r5, [r0, #0]
 8007afe:	600b      	str	r3, [r1, #0]
 8007b00:	2d00      	cmp	r5, #0
 8007b02:	da03      	bge.n	8007b0c <_printf_i+0xc8>
 8007b04:	232d      	movs	r3, #45	; 0x2d
 8007b06:	426d      	negs	r5, r5
 8007b08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b0c:	485e      	ldr	r0, [pc, #376]	; (8007c88 <_printf_i+0x244>)
 8007b0e:	230a      	movs	r3, #10
 8007b10:	e019      	b.n	8007b46 <_printf_i+0x102>
 8007b12:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007b16:	6805      	ldr	r5, [r0, #0]
 8007b18:	600b      	str	r3, [r1, #0]
 8007b1a:	bf18      	it	ne
 8007b1c:	b22d      	sxthne	r5, r5
 8007b1e:	e7ef      	b.n	8007b00 <_printf_i+0xbc>
 8007b20:	680b      	ldr	r3, [r1, #0]
 8007b22:	6825      	ldr	r5, [r4, #0]
 8007b24:	1d18      	adds	r0, r3, #4
 8007b26:	6008      	str	r0, [r1, #0]
 8007b28:	0628      	lsls	r0, r5, #24
 8007b2a:	d501      	bpl.n	8007b30 <_printf_i+0xec>
 8007b2c:	681d      	ldr	r5, [r3, #0]
 8007b2e:	e002      	b.n	8007b36 <_printf_i+0xf2>
 8007b30:	0669      	lsls	r1, r5, #25
 8007b32:	d5fb      	bpl.n	8007b2c <_printf_i+0xe8>
 8007b34:	881d      	ldrh	r5, [r3, #0]
 8007b36:	4854      	ldr	r0, [pc, #336]	; (8007c88 <_printf_i+0x244>)
 8007b38:	2f6f      	cmp	r7, #111	; 0x6f
 8007b3a:	bf0c      	ite	eq
 8007b3c:	2308      	moveq	r3, #8
 8007b3e:	230a      	movne	r3, #10
 8007b40:	2100      	movs	r1, #0
 8007b42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b46:	6866      	ldr	r6, [r4, #4]
 8007b48:	60a6      	str	r6, [r4, #8]
 8007b4a:	2e00      	cmp	r6, #0
 8007b4c:	bfa2      	ittt	ge
 8007b4e:	6821      	ldrge	r1, [r4, #0]
 8007b50:	f021 0104 	bicge.w	r1, r1, #4
 8007b54:	6021      	strge	r1, [r4, #0]
 8007b56:	b90d      	cbnz	r5, 8007b5c <_printf_i+0x118>
 8007b58:	2e00      	cmp	r6, #0
 8007b5a:	d04d      	beq.n	8007bf8 <_printf_i+0x1b4>
 8007b5c:	4616      	mov	r6, r2
 8007b5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b62:	fb03 5711 	mls	r7, r3, r1, r5
 8007b66:	5dc7      	ldrb	r7, [r0, r7]
 8007b68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b6c:	462f      	mov	r7, r5
 8007b6e:	42bb      	cmp	r3, r7
 8007b70:	460d      	mov	r5, r1
 8007b72:	d9f4      	bls.n	8007b5e <_printf_i+0x11a>
 8007b74:	2b08      	cmp	r3, #8
 8007b76:	d10b      	bne.n	8007b90 <_printf_i+0x14c>
 8007b78:	6823      	ldr	r3, [r4, #0]
 8007b7a:	07df      	lsls	r7, r3, #31
 8007b7c:	d508      	bpl.n	8007b90 <_printf_i+0x14c>
 8007b7e:	6923      	ldr	r3, [r4, #16]
 8007b80:	6861      	ldr	r1, [r4, #4]
 8007b82:	4299      	cmp	r1, r3
 8007b84:	bfde      	ittt	le
 8007b86:	2330      	movle	r3, #48	; 0x30
 8007b88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b8c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007b90:	1b92      	subs	r2, r2, r6
 8007b92:	6122      	str	r2, [r4, #16]
 8007b94:	f8cd a000 	str.w	sl, [sp]
 8007b98:	464b      	mov	r3, r9
 8007b9a:	aa03      	add	r2, sp, #12
 8007b9c:	4621      	mov	r1, r4
 8007b9e:	4640      	mov	r0, r8
 8007ba0:	f7ff fee2 	bl	8007968 <_printf_common>
 8007ba4:	3001      	adds	r0, #1
 8007ba6:	d14c      	bne.n	8007c42 <_printf_i+0x1fe>
 8007ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bac:	b004      	add	sp, #16
 8007bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bb2:	4835      	ldr	r0, [pc, #212]	; (8007c88 <_printf_i+0x244>)
 8007bb4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007bb8:	6823      	ldr	r3, [r4, #0]
 8007bba:	680e      	ldr	r6, [r1, #0]
 8007bbc:	061f      	lsls	r7, r3, #24
 8007bbe:	f856 5b04 	ldr.w	r5, [r6], #4
 8007bc2:	600e      	str	r6, [r1, #0]
 8007bc4:	d514      	bpl.n	8007bf0 <_printf_i+0x1ac>
 8007bc6:	07d9      	lsls	r1, r3, #31
 8007bc8:	bf44      	itt	mi
 8007bca:	f043 0320 	orrmi.w	r3, r3, #32
 8007bce:	6023      	strmi	r3, [r4, #0]
 8007bd0:	b91d      	cbnz	r5, 8007bda <_printf_i+0x196>
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	f023 0320 	bic.w	r3, r3, #32
 8007bd8:	6023      	str	r3, [r4, #0]
 8007bda:	2310      	movs	r3, #16
 8007bdc:	e7b0      	b.n	8007b40 <_printf_i+0xfc>
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	f043 0320 	orr.w	r3, r3, #32
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	2378      	movs	r3, #120	; 0x78
 8007be8:	4828      	ldr	r0, [pc, #160]	; (8007c8c <_printf_i+0x248>)
 8007bea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007bee:	e7e3      	b.n	8007bb8 <_printf_i+0x174>
 8007bf0:	065e      	lsls	r6, r3, #25
 8007bf2:	bf48      	it	mi
 8007bf4:	b2ad      	uxthmi	r5, r5
 8007bf6:	e7e6      	b.n	8007bc6 <_printf_i+0x182>
 8007bf8:	4616      	mov	r6, r2
 8007bfa:	e7bb      	b.n	8007b74 <_printf_i+0x130>
 8007bfc:	680b      	ldr	r3, [r1, #0]
 8007bfe:	6826      	ldr	r6, [r4, #0]
 8007c00:	6960      	ldr	r0, [r4, #20]
 8007c02:	1d1d      	adds	r5, r3, #4
 8007c04:	600d      	str	r5, [r1, #0]
 8007c06:	0635      	lsls	r5, r6, #24
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	d501      	bpl.n	8007c10 <_printf_i+0x1cc>
 8007c0c:	6018      	str	r0, [r3, #0]
 8007c0e:	e002      	b.n	8007c16 <_printf_i+0x1d2>
 8007c10:	0671      	lsls	r1, r6, #25
 8007c12:	d5fb      	bpl.n	8007c0c <_printf_i+0x1c8>
 8007c14:	8018      	strh	r0, [r3, #0]
 8007c16:	2300      	movs	r3, #0
 8007c18:	6123      	str	r3, [r4, #16]
 8007c1a:	4616      	mov	r6, r2
 8007c1c:	e7ba      	b.n	8007b94 <_printf_i+0x150>
 8007c1e:	680b      	ldr	r3, [r1, #0]
 8007c20:	1d1a      	adds	r2, r3, #4
 8007c22:	600a      	str	r2, [r1, #0]
 8007c24:	681e      	ldr	r6, [r3, #0]
 8007c26:	6862      	ldr	r2, [r4, #4]
 8007c28:	2100      	movs	r1, #0
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	f7f8 fad8 	bl	80001e0 <memchr>
 8007c30:	b108      	cbz	r0, 8007c36 <_printf_i+0x1f2>
 8007c32:	1b80      	subs	r0, r0, r6
 8007c34:	6060      	str	r0, [r4, #4]
 8007c36:	6863      	ldr	r3, [r4, #4]
 8007c38:	6123      	str	r3, [r4, #16]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c40:	e7a8      	b.n	8007b94 <_printf_i+0x150>
 8007c42:	6923      	ldr	r3, [r4, #16]
 8007c44:	4632      	mov	r2, r6
 8007c46:	4649      	mov	r1, r9
 8007c48:	4640      	mov	r0, r8
 8007c4a:	47d0      	blx	sl
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	d0ab      	beq.n	8007ba8 <_printf_i+0x164>
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	079b      	lsls	r3, r3, #30
 8007c54:	d413      	bmi.n	8007c7e <_printf_i+0x23a>
 8007c56:	68e0      	ldr	r0, [r4, #12]
 8007c58:	9b03      	ldr	r3, [sp, #12]
 8007c5a:	4298      	cmp	r0, r3
 8007c5c:	bfb8      	it	lt
 8007c5e:	4618      	movlt	r0, r3
 8007c60:	e7a4      	b.n	8007bac <_printf_i+0x168>
 8007c62:	2301      	movs	r3, #1
 8007c64:	4632      	mov	r2, r6
 8007c66:	4649      	mov	r1, r9
 8007c68:	4640      	mov	r0, r8
 8007c6a:	47d0      	blx	sl
 8007c6c:	3001      	adds	r0, #1
 8007c6e:	d09b      	beq.n	8007ba8 <_printf_i+0x164>
 8007c70:	3501      	adds	r5, #1
 8007c72:	68e3      	ldr	r3, [r4, #12]
 8007c74:	9903      	ldr	r1, [sp, #12]
 8007c76:	1a5b      	subs	r3, r3, r1
 8007c78:	42ab      	cmp	r3, r5
 8007c7a:	dcf2      	bgt.n	8007c62 <_printf_i+0x21e>
 8007c7c:	e7eb      	b.n	8007c56 <_printf_i+0x212>
 8007c7e:	2500      	movs	r5, #0
 8007c80:	f104 0619 	add.w	r6, r4, #25
 8007c84:	e7f5      	b.n	8007c72 <_printf_i+0x22e>
 8007c86:	bf00      	nop
 8007c88:	08008cad 	.word	0x08008cad
 8007c8c:	08008cbe 	.word	0x08008cbe

08007c90 <__retarget_lock_acquire_recursive>:
 8007c90:	4770      	bx	lr

08007c92 <__retarget_lock_release_recursive>:
 8007c92:	4770      	bx	lr

08007c94 <memmove>:
 8007c94:	4288      	cmp	r0, r1
 8007c96:	b510      	push	{r4, lr}
 8007c98:	eb01 0402 	add.w	r4, r1, r2
 8007c9c:	d902      	bls.n	8007ca4 <memmove+0x10>
 8007c9e:	4284      	cmp	r4, r0
 8007ca0:	4623      	mov	r3, r4
 8007ca2:	d807      	bhi.n	8007cb4 <memmove+0x20>
 8007ca4:	1e43      	subs	r3, r0, #1
 8007ca6:	42a1      	cmp	r1, r4
 8007ca8:	d008      	beq.n	8007cbc <memmove+0x28>
 8007caa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cb2:	e7f8      	b.n	8007ca6 <memmove+0x12>
 8007cb4:	4402      	add	r2, r0
 8007cb6:	4601      	mov	r1, r0
 8007cb8:	428a      	cmp	r2, r1
 8007cba:	d100      	bne.n	8007cbe <memmove+0x2a>
 8007cbc:	bd10      	pop	{r4, pc}
 8007cbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cc6:	e7f7      	b.n	8007cb8 <memmove+0x24>

08007cc8 <_free_r>:
 8007cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cca:	2900      	cmp	r1, #0
 8007ccc:	d048      	beq.n	8007d60 <_free_r+0x98>
 8007cce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cd2:	9001      	str	r0, [sp, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f1a1 0404 	sub.w	r4, r1, #4
 8007cda:	bfb8      	it	lt
 8007cdc:	18e4      	addlt	r4, r4, r3
 8007cde:	f000 f8d3 	bl	8007e88 <__malloc_lock>
 8007ce2:	4a20      	ldr	r2, [pc, #128]	; (8007d64 <_free_r+0x9c>)
 8007ce4:	9801      	ldr	r0, [sp, #4]
 8007ce6:	6813      	ldr	r3, [r2, #0]
 8007ce8:	4615      	mov	r5, r2
 8007cea:	b933      	cbnz	r3, 8007cfa <_free_r+0x32>
 8007cec:	6063      	str	r3, [r4, #4]
 8007cee:	6014      	str	r4, [r2, #0]
 8007cf0:	b003      	add	sp, #12
 8007cf2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cf6:	f000 b8cd 	b.w	8007e94 <__malloc_unlock>
 8007cfa:	42a3      	cmp	r3, r4
 8007cfc:	d90b      	bls.n	8007d16 <_free_r+0x4e>
 8007cfe:	6821      	ldr	r1, [r4, #0]
 8007d00:	1862      	adds	r2, r4, r1
 8007d02:	4293      	cmp	r3, r2
 8007d04:	bf04      	itt	eq
 8007d06:	681a      	ldreq	r2, [r3, #0]
 8007d08:	685b      	ldreq	r3, [r3, #4]
 8007d0a:	6063      	str	r3, [r4, #4]
 8007d0c:	bf04      	itt	eq
 8007d0e:	1852      	addeq	r2, r2, r1
 8007d10:	6022      	streq	r2, [r4, #0]
 8007d12:	602c      	str	r4, [r5, #0]
 8007d14:	e7ec      	b.n	8007cf0 <_free_r+0x28>
 8007d16:	461a      	mov	r2, r3
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	b10b      	cbz	r3, 8007d20 <_free_r+0x58>
 8007d1c:	42a3      	cmp	r3, r4
 8007d1e:	d9fa      	bls.n	8007d16 <_free_r+0x4e>
 8007d20:	6811      	ldr	r1, [r2, #0]
 8007d22:	1855      	adds	r5, r2, r1
 8007d24:	42a5      	cmp	r5, r4
 8007d26:	d10b      	bne.n	8007d40 <_free_r+0x78>
 8007d28:	6824      	ldr	r4, [r4, #0]
 8007d2a:	4421      	add	r1, r4
 8007d2c:	1854      	adds	r4, r2, r1
 8007d2e:	42a3      	cmp	r3, r4
 8007d30:	6011      	str	r1, [r2, #0]
 8007d32:	d1dd      	bne.n	8007cf0 <_free_r+0x28>
 8007d34:	681c      	ldr	r4, [r3, #0]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	6053      	str	r3, [r2, #4]
 8007d3a:	4421      	add	r1, r4
 8007d3c:	6011      	str	r1, [r2, #0]
 8007d3e:	e7d7      	b.n	8007cf0 <_free_r+0x28>
 8007d40:	d902      	bls.n	8007d48 <_free_r+0x80>
 8007d42:	230c      	movs	r3, #12
 8007d44:	6003      	str	r3, [r0, #0]
 8007d46:	e7d3      	b.n	8007cf0 <_free_r+0x28>
 8007d48:	6825      	ldr	r5, [r4, #0]
 8007d4a:	1961      	adds	r1, r4, r5
 8007d4c:	428b      	cmp	r3, r1
 8007d4e:	bf04      	itt	eq
 8007d50:	6819      	ldreq	r1, [r3, #0]
 8007d52:	685b      	ldreq	r3, [r3, #4]
 8007d54:	6063      	str	r3, [r4, #4]
 8007d56:	bf04      	itt	eq
 8007d58:	1949      	addeq	r1, r1, r5
 8007d5a:	6021      	streq	r1, [r4, #0]
 8007d5c:	6054      	str	r4, [r2, #4]
 8007d5e:	e7c7      	b.n	8007cf0 <_free_r+0x28>
 8007d60:	b003      	add	sp, #12
 8007d62:	bd30      	pop	{r4, r5, pc}
 8007d64:	20000838 	.word	0x20000838

08007d68 <_malloc_r>:
 8007d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6a:	1ccd      	adds	r5, r1, #3
 8007d6c:	f025 0503 	bic.w	r5, r5, #3
 8007d70:	3508      	adds	r5, #8
 8007d72:	2d0c      	cmp	r5, #12
 8007d74:	bf38      	it	cc
 8007d76:	250c      	movcc	r5, #12
 8007d78:	2d00      	cmp	r5, #0
 8007d7a:	4606      	mov	r6, r0
 8007d7c:	db01      	blt.n	8007d82 <_malloc_r+0x1a>
 8007d7e:	42a9      	cmp	r1, r5
 8007d80:	d903      	bls.n	8007d8a <_malloc_r+0x22>
 8007d82:	230c      	movs	r3, #12
 8007d84:	6033      	str	r3, [r6, #0]
 8007d86:	2000      	movs	r0, #0
 8007d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d8a:	f000 f87d 	bl	8007e88 <__malloc_lock>
 8007d8e:	4921      	ldr	r1, [pc, #132]	; (8007e14 <_malloc_r+0xac>)
 8007d90:	680a      	ldr	r2, [r1, #0]
 8007d92:	4614      	mov	r4, r2
 8007d94:	b99c      	cbnz	r4, 8007dbe <_malloc_r+0x56>
 8007d96:	4f20      	ldr	r7, [pc, #128]	; (8007e18 <_malloc_r+0xb0>)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	b923      	cbnz	r3, 8007da6 <_malloc_r+0x3e>
 8007d9c:	4621      	mov	r1, r4
 8007d9e:	4630      	mov	r0, r6
 8007da0:	f000 f862 	bl	8007e68 <_sbrk_r>
 8007da4:	6038      	str	r0, [r7, #0]
 8007da6:	4629      	mov	r1, r5
 8007da8:	4630      	mov	r0, r6
 8007daa:	f000 f85d 	bl	8007e68 <_sbrk_r>
 8007dae:	1c43      	adds	r3, r0, #1
 8007db0:	d123      	bne.n	8007dfa <_malloc_r+0x92>
 8007db2:	230c      	movs	r3, #12
 8007db4:	6033      	str	r3, [r6, #0]
 8007db6:	4630      	mov	r0, r6
 8007db8:	f000 f86c 	bl	8007e94 <__malloc_unlock>
 8007dbc:	e7e3      	b.n	8007d86 <_malloc_r+0x1e>
 8007dbe:	6823      	ldr	r3, [r4, #0]
 8007dc0:	1b5b      	subs	r3, r3, r5
 8007dc2:	d417      	bmi.n	8007df4 <_malloc_r+0x8c>
 8007dc4:	2b0b      	cmp	r3, #11
 8007dc6:	d903      	bls.n	8007dd0 <_malloc_r+0x68>
 8007dc8:	6023      	str	r3, [r4, #0]
 8007dca:	441c      	add	r4, r3
 8007dcc:	6025      	str	r5, [r4, #0]
 8007dce:	e004      	b.n	8007dda <_malloc_r+0x72>
 8007dd0:	6863      	ldr	r3, [r4, #4]
 8007dd2:	42a2      	cmp	r2, r4
 8007dd4:	bf0c      	ite	eq
 8007dd6:	600b      	streq	r3, [r1, #0]
 8007dd8:	6053      	strne	r3, [r2, #4]
 8007dda:	4630      	mov	r0, r6
 8007ddc:	f000 f85a 	bl	8007e94 <__malloc_unlock>
 8007de0:	f104 000b 	add.w	r0, r4, #11
 8007de4:	1d23      	adds	r3, r4, #4
 8007de6:	f020 0007 	bic.w	r0, r0, #7
 8007dea:	1ac2      	subs	r2, r0, r3
 8007dec:	d0cc      	beq.n	8007d88 <_malloc_r+0x20>
 8007dee:	1a1b      	subs	r3, r3, r0
 8007df0:	50a3      	str	r3, [r4, r2]
 8007df2:	e7c9      	b.n	8007d88 <_malloc_r+0x20>
 8007df4:	4622      	mov	r2, r4
 8007df6:	6864      	ldr	r4, [r4, #4]
 8007df8:	e7cc      	b.n	8007d94 <_malloc_r+0x2c>
 8007dfa:	1cc4      	adds	r4, r0, #3
 8007dfc:	f024 0403 	bic.w	r4, r4, #3
 8007e00:	42a0      	cmp	r0, r4
 8007e02:	d0e3      	beq.n	8007dcc <_malloc_r+0x64>
 8007e04:	1a21      	subs	r1, r4, r0
 8007e06:	4630      	mov	r0, r6
 8007e08:	f000 f82e 	bl	8007e68 <_sbrk_r>
 8007e0c:	3001      	adds	r0, #1
 8007e0e:	d1dd      	bne.n	8007dcc <_malloc_r+0x64>
 8007e10:	e7cf      	b.n	8007db2 <_malloc_r+0x4a>
 8007e12:	bf00      	nop
 8007e14:	20000838 	.word	0x20000838
 8007e18:	2000083c 	.word	0x2000083c

08007e1c <_realloc_r>:
 8007e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1e:	4607      	mov	r7, r0
 8007e20:	4614      	mov	r4, r2
 8007e22:	460e      	mov	r6, r1
 8007e24:	b921      	cbnz	r1, 8007e30 <_realloc_r+0x14>
 8007e26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e2a:	4611      	mov	r1, r2
 8007e2c:	f7ff bf9c 	b.w	8007d68 <_malloc_r>
 8007e30:	b922      	cbnz	r2, 8007e3c <_realloc_r+0x20>
 8007e32:	f7ff ff49 	bl	8007cc8 <_free_r>
 8007e36:	4625      	mov	r5, r4
 8007e38:	4628      	mov	r0, r5
 8007e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e3c:	f000 f830 	bl	8007ea0 <_malloc_usable_size_r>
 8007e40:	42a0      	cmp	r0, r4
 8007e42:	d20f      	bcs.n	8007e64 <_realloc_r+0x48>
 8007e44:	4621      	mov	r1, r4
 8007e46:	4638      	mov	r0, r7
 8007e48:	f7ff ff8e 	bl	8007d68 <_malloc_r>
 8007e4c:	4605      	mov	r5, r0
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d0f2      	beq.n	8007e38 <_realloc_r+0x1c>
 8007e52:	4631      	mov	r1, r6
 8007e54:	4622      	mov	r2, r4
 8007e56:	f7ff fbf5 	bl	8007644 <memcpy>
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	4638      	mov	r0, r7
 8007e5e:	f7ff ff33 	bl	8007cc8 <_free_r>
 8007e62:	e7e9      	b.n	8007e38 <_realloc_r+0x1c>
 8007e64:	4635      	mov	r5, r6
 8007e66:	e7e7      	b.n	8007e38 <_realloc_r+0x1c>

08007e68 <_sbrk_r>:
 8007e68:	b538      	push	{r3, r4, r5, lr}
 8007e6a:	4d06      	ldr	r5, [pc, #24]	; (8007e84 <_sbrk_r+0x1c>)
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	4604      	mov	r4, r0
 8007e70:	4608      	mov	r0, r1
 8007e72:	602b      	str	r3, [r5, #0]
 8007e74:	f7f9 f87a 	bl	8000f6c <_sbrk>
 8007e78:	1c43      	adds	r3, r0, #1
 8007e7a:	d102      	bne.n	8007e82 <_sbrk_r+0x1a>
 8007e7c:	682b      	ldr	r3, [r5, #0]
 8007e7e:	b103      	cbz	r3, 8007e82 <_sbrk_r+0x1a>
 8007e80:	6023      	str	r3, [r4, #0]
 8007e82:	bd38      	pop	{r3, r4, r5, pc}
 8007e84:	20002278 	.word	0x20002278

08007e88 <__malloc_lock>:
 8007e88:	4801      	ldr	r0, [pc, #4]	; (8007e90 <__malloc_lock+0x8>)
 8007e8a:	f7ff bf01 	b.w	8007c90 <__retarget_lock_acquire_recursive>
 8007e8e:	bf00      	nop
 8007e90:	20002280 	.word	0x20002280

08007e94 <__malloc_unlock>:
 8007e94:	4801      	ldr	r0, [pc, #4]	; (8007e9c <__malloc_unlock+0x8>)
 8007e96:	f7ff befc 	b.w	8007c92 <__retarget_lock_release_recursive>
 8007e9a:	bf00      	nop
 8007e9c:	20002280 	.word	0x20002280

08007ea0 <_malloc_usable_size_r>:
 8007ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ea4:	1f18      	subs	r0, r3, #4
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	bfbc      	itt	lt
 8007eaa:	580b      	ldrlt	r3, [r1, r0]
 8007eac:	18c0      	addlt	r0, r0, r3
 8007eae:	4770      	bx	lr

08007eb0 <_init>:
 8007eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb2:	bf00      	nop
 8007eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eb6:	bc08      	pop	{r3}
 8007eb8:	469e      	mov	lr, r3
 8007eba:	4770      	bx	lr

08007ebc <_fini>:
 8007ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ebe:	bf00      	nop
 8007ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ec2:	bc08      	pop	{r3}
 8007ec4:	469e      	mov	lr, r3
 8007ec6:	4770      	bx	lr
